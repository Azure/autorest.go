@using AutoRest.Core.Utilities
@using AutoRest.Go
@using AutoRest.Go.Model
@using AutoRest.Go.Templates
@using System
@using System.Collections.Generic
@using System.Linq

@inherits AutoRest.Core.Template<AutoRest.Go.Model.MethodGroupGo>

@{
    var ctorPrefix = "New";
    var ctorSuffix = Model.ClientName;
    var baseCtorSuffix = Model.BaseClient;
    if (!CodeNamerGo.Instance.ExportClientTypes)
    {
        ctorPrefix = "new";
        ctorSuffix = Model.ClientName.ToPascalCase();
        baseCtorSuffix = baseCtorSuffix.ToPascalCase();
    }
}
package @Model.PackageName
@EmptyLine
@Header("// ")

@EmptyLine

import (
@foreach (var import in Model.Imports)
{
    if (Model.CodeModel.ToCodeModelGo().IsCustomBaseUri)
    {
        @:"net/url"
    }
    @:@(import)
}
)
@EmptyLine

@WrapComment("// ", Model.Documentation)
type @(Model.ClientName) struct {
    @(Model.BaseClient)
}

@WrapComment("// ", string.Format("{0}{1} creates an instance of the {2} client.", ctorPrefix, ctorSuffix, Model.ClientName))
@if (Model.CodeModel.ToCodeModelGo().IsCustomBaseUri)
{
<text>
func @(ctorPrefix)@(ctorSuffix)(url url.URL, p pipeline.Pipeline) @(Model.ClientName) {
    return @(Model.ClientName){@(ctorPrefix)@(baseCtorSuffix)(url, p)}
}
</text>
}
else
{
<text>
func @(ctorPrefix)@(ctorSuffix)(p pipeline.Pipeline) @(Model.ClientName) {
	return @(Model.ClientName){NewManagementClient(p)}
}
</text>
}
@EmptyLine

@foreach (var method in Model.MethodsGo)
{
<text>
@(Include(new MethodTemplate(), method))
@EmptyLine
</text>
}
