@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.Go
@using AutoRest.Go.Templates
@using AutoRest.Go.Model
@using System.Linq

@inherits AutoRest.Core.Template<AutoRest.Go.Model.CodeModelGo>

@{
    var ctorPrefix = "New";
    var ctorSuffix = Model.BaseClient;
    if (!CodeNamerGo.Instance.ExportClientTypes)
    {
        ctorPrefix = "new";
        ctorSuffix = Model.BaseClient.ToPascalCase();
    }
    var methods = Model.ClientMethods.OrderBy(m => m.Name.Value);
}

@if (CodeNamerGo.Instance.ExportClientTypes)
{
    WrapComment("// ", Model.GetDocumentation());
}
package @Model.Namespace
@EmptyLine
@Header("// ")

@EmptyLine
import (
@foreach (var import in Model.ClientImports)
{
<text>
    "net/url"
    @(import)
</text>
}
)

@EmptyLine
const (
    // ServiceVersion specifies the version of the operations used in this package.
    ServiceVersion = "@(Model.ApiVersion)"
@if (!Model.IsCustomBaseUri)
{
<text>
    // DefaultBaseURL is the default URL used for the service @(Model.ServiceName)
    DefaultBaseURL = "@Model.BaseUrl"
</text>
}
)

@EmptyLine
@WrapComment("// ", Model.ClientDocumentation)
type @(Model.BaseClient) struct {
    url url.URL
    p pipeline.Pipeline
}

@if (!Model.IsCustomBaseUri)
{
<text>
@EmptyLine
@WrapComment("// ", string.Format("{0}{1} creates an instance of the {2} client.", ctorPrefix, ctorSuffix, Model.BaseClient))
func @(ctorPrefix)@(ctorSuffix)(p pipeline.Pipeline) @(Model.BaseClient) {
    u, err := url.Parse(DefaultBaseURL)
    if err != nil {
        panic(err)
    }
    return @(ctorPrefix)@(ctorSuffix)WithURL(*u, p)
}
</text>
    ctorSuffix = $"{ctorSuffix}WithURL";
}

@EmptyLine
@WrapComment("// ", string.Format("{0}{1} creates an instance of the {2} client.", ctorPrefix, ctorSuffix, Model.BaseClient))
func @(ctorPrefix)@(ctorSuffix)(url url.URL, p pipeline.Pipeline) @(Model.BaseClient) {
    return @(Model.BaseClient){
        url: url,
        p: p,
    }
}

@EmptyLine
@WrapComment("// ", "URL returns a copy of the URL for this client.")
func (@(Model.BaseClient.ToShortName()) @(Model.BaseClient)) URL() url.URL {
    return mc.url
}

@EmptyLine
@WrapComment("// ", "Pipeline returns the pipeline for this client.")
func (@(Model.BaseClient.ToShortName()) @(Model.BaseClient)) Pipeline() pipeline.Pipeline {
    return mc.p
}

@EmptyLine
@foreach (var method in methods)
{
<text>
    @(Include(new MethodTemplate(), method))
    @EmptyLine
</text>
}
