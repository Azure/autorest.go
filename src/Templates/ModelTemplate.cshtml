@using System.Linq
@using AutoRest.Go
@using AutoRest.Core.Model
@using AutoRest.Go.Model
@using AutoRest.Go.Templates
@using AutoRest.Core.Utilities

@inherits AutoRest.Core.Template<AutoRest.Go.Model.CompositeTypeGo>

@{
    var depMessage = "This type has been deprecated.";
    if (!string.IsNullOrWhiteSpace(Model.DeprecationMessage))
    {
        depMessage = Model.DeprecationMessage;
    }
}

@if (Model.HasInterface())
{
    @if (Model.Deprecated)
    {
        @:@WrapComment("// Deprecated: ", depMessage)
    }
    @WrapComment("// ", $"{Model.GetInterfaceName()} {Model.Documentation.ToSentence()}")
    <text>
        type @(Model.GetInterfaceName()) interface {
        @foreach (var dt in Model.DerivedTypes)
        {
            @:As@(dt.Name) () (*@(dt.Name), bool)
            if (dt.HasInterface())
            {
                @:As@(dt.GetInterfaceName()) () (@(dt.GetInterfaceName()), bool)
            }
        }
        As@(Model.Name) () (*@(Model.Name), bool)
        }

        @EmptyLine
        @if (Model.Deprecated)
        {
            @:@WrapComment("// Deprecated: ", depMessage)
        }
        @WrapComment("// ", $"{Model.Name} {Model.Documentation.ToSentence()}")
        type @(Model.Name) struct {
        @(Model.AddHTTPResponse())
        @(Model.Fields())
        }

        @EmptyLine
        func unmarshal@(Model.GetInterfaceName())(body []byte) (@(Model.GetInterfaceName()), error){
        var m map[string]interface{}
        err := json.Unmarshal(body, &m)
        if err != nil {
        return nil, err
        }
        @EmptyLine
        switch m["@(Model.RootType.PolymorphicDiscriminator)"] {
        @foreach (var dt in Model.DerivedTypes)
        {
            <text>
            case string(@(CodeNamerGo.Instance.GetEnumMemberName((dt as CompositeTypeGo).DiscriminatorEnumValue))):
            var @(dt.Name.FixedValue.ToVariableName()) @(dt.Name)
            err := json.Unmarshal(body, &@(dt.Name.FixedValue.ToVariableName()))
            return @(dt.Name.FixedValue.ToVariableName()), err
    </text>
}
        default:
        var @(Model.Name.FixedValue.ToVariableName()) @(Model.Name)
        err := json.Unmarshal(body, &@(Model.Name.FixedValue.ToVariableName()))
        return @(Model.Name.FixedValue.ToVariableName()), err
        }
        }

        func unmarshal@(Model.GetInterfaceName())Array(body []byte) ([]@(Model.GetInterfaceName()), error){
        var rawMessages []*json.RawMessage
        err := json.Unmarshal(body, &rawMessages)
        if err != nil {
        return nil, err
        }
        @EmptyLine
        @(Model.Name.FixedValue.ToVariableName())Array := make([]@(Model.GetInterfaceName()), len(rawMessages))
        @EmptyLine
        for index, rawMessage := range rawMessages {
        @(Model.Name.FixedValue.ToVariableName()), err := unmarshal@(Model.GetInterfaceName())(*rawMessage)
        if err != nil {
        return nil, err
        }
        @(Model.Name.FixedValue.ToVariableName())Array[index] = @(Model.Name.FixedValue.ToVariableName())
        }
        return @(Model.Name.FixedValue.ToVariableName())Array, nil
        }
        </text>
    }
    else
    {
        if (Model is PageTypeGo)
        {
            var pageType = Model as PageTypeGo;
            var itemName = pageType.ItemName;
            var contentType = pageType.ContentType.Name;
            var receiverVar = contentType.FixedValue.ToVariableName();

            <text>
                @EmptyLine
                // IsEmpty returns true if the ListResult contains no values.
                func (@receiverVar @contentType) IsEmpty() bool {
                return @(receiverVar).@itemName == nil || len(*@(receiverVar).@itemName) == 0
                }
                @EmptyLine
                // hasNextLink returns true if the NextLink is not empty.
                func (@receiverVar @contentType) hasNextLink() bool {
                return @(receiverVar).@(pageType.NextLink) != nil && len(*@(receiverVar).@(pageType.NextLink)) != 0
                }
            </text>
            if (pageType.PreparerNeeded)
            {
                <text>
                    // @(pageType.PreparerMethodName) prepares a request to retrieve the next set of results.
                    // It returns nil if no more results exist.
                    func (@receiverVar @contentType) @(pageType.PreparerMethodName)(ctx context.Context) (*http.Request, error) {
                    if !@(receiverVar).hasNextLink() {
                    return nil, nil
                    }
                    return autorest.Prepare((&http.Request{}).WithContext(ctx),
                    autorest.AsJSON(),
                    autorest.AsGet(),
                    autorest.WithBaseURL(to.String( @(receiverVar).@(pageType.NextLink))));
                    }
                    @EmptyLine
                </text>
            }
        }
        <text>
            @if (Model.Deprecated)
            {
                @:@WrapComment("// Deprecated: ", depMessage)
            }
            @WrapComment("// ", $"{Model.Name} {Model.Documentation.ToSentence()}")
            type @(Model.Name) struct {
            @(Model.AddHTTPResponse())
            @(Model.Fields())
            }
        </text>
    }

@if (Model.NeedsCustomMarshalling)
{
    <text>
        @EmptyLine
        // MarshalJSON is the custom marshaler for @(Model.Name).
        func (@(Model.Name.FixedValue.ToVariableName()) @(Model.Name))MarshalJSON() ([]byte, error){
        @if (Model.DiscriminatorEnumValue != null)
        {
            <text>
            @(Model.Name.FixedValue.ToVariableName()).@(Model.PolymorphicProperty) = @(CodeNamerGo.Instance.GetEnumMemberName(Model.DiscriminatorEnumValue))
    </text>
}
        objectMap := make(map[string]interface{})

        @foreach (var property in Model.AllProperties.Where(p => !string.IsNullOrEmpty(p.SerializedName)))
        {
            if (property.IsReadOnly)
            {
                // don't send read-only fields across the wire
                continue;
            }
            // must check object for nil to avoid inserting `"foo": null` into the JSON
            if (property.IsPointer || property.ModelType is DictionaryTypeGo || property.ModelType.IsPrimaryType(KnownPrimaryType.Object))
            {
                @:if(@(Model.Name.FixedValue.ToVariableName()).@(property.FieldName) != nil) {
                @:objectMap["@(property.SerializedName)"] = @(Model.Name.FixedValue.ToVariableName()).@(property.FieldName)
                @:}
            }
            else if (property.ModelType is EnumTypeGo)
            {
                @:if(@(Model.Name.FixedValue.ToVariableName()).@(property.Name) != "") {
                @:objectMap["@(property.SerializedName)"] = @(Model.Name.FixedValue.ToVariableName()).@(property.Name)
                @:}
            }
            else
            {
                @:objectMap["@(property.SerializedName)"] = @(Model.Name.FixedValue.ToVariableName()).@(property.Name)
            }
        }
        @if (Model.AdditionalPropertiesField != default(PropertyGo))
        {
            @:for k, v := range @(Model.Name.FixedValue.ToVariableName()).@(Model.AdditionalPropertiesField.Name) {
            @:    objectMap[k] = v
            @:}
        }
        return json.Marshal(objectMap)
        }
        </text>
    }

@if (Model.BaseIsPolymorphic || Model.IsPolymorphic)
{
    <text>
        @foreach (var st in Model.SiblingTypes)
        {
            <text>
            @EmptyLine
            // As@(st.Name) is the @(Model.RootType.GetInterfaceName()) implementation for @(Model.Name).
            func (@(Model.Name.FixedValue.ToVariableName()) @(Model.Name)) As@(st.Name)() (*@(st.Name), bool) {
            @if (st.Equals(Model))
            {
                @:return &@(Model.Name.FixedValue.ToVariableName()), true
            }
            else
            {
                @:return nil, false
            }
            }

            @if (st.HasInterface())
            {
                @EmptyLine
                @:// As@(st.GetInterfaceName()) is the @(Model.RootType.GetInterfaceName()) implementation for @(Model.Name).
                @:func(@(Model.Name.FixedValue.ToVariableName()) @(Model.Name)) As@(st.GetInterfaceName())()(@(st.GetInterfaceName()), bool) {
                if (st.Equals(Model) || Model.DerivesFrom(st))
                {
                    @:return &@(Model.Name.FixedValue.ToVariableName()), true
                }
                else
                {
                    @:return nil, false
                }
                @:}
                @EmptyLine
            }
    </text>
}
        </text>
    }

@if (Model.NeedsCustomUnmarshalling)
{
    var vsp = new VariableScopeProvider();
    var receiverVar = Model.Name.FixedValue.ToVariableName(vsp);
    <text>
        // UnmarshalJSON is the custom unmarshaler for @(Model.Name) struct.
        func (@receiverVar *@(Model.Name)) UnmarshalJSON(@(vsp.GetVariableName("body")) []byte) error {
        @if (Model.IsWrapperType)
        {
            string varName;
            if (Model.BaseType is SequenceTypeGo sequenceType)
            {
                varName = sequenceType.ElementType.Name.FixedValue.ToVariableName(vsp);
                @:@varName, err := unmarshal@(sequenceType.ElementType.GetInterfaceName())Array(body)
            }
            else
            {
                varName = Model.BaseType.Name.FixedValue.ToVariableName(vsp);
                @:@varName, err := unmarshal@(Model.BaseType.GetInterfaceName())(body)
            }
            <text>
            if err != nil {
            return err
            }
    </text>
    if (Model.BaseType is SequenceType type)
    {
        @:@(receiverVar).Value = &@varName
    }
    else
    {
        @:@(receiverVar).Value = @varName
    }
}
else
{
    <text>
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }

        for k, v := range  m {

        switch k {
        @foreach (var p in Model.AllProperties)
        {
            var varName = CodeNamerGo.Instance.GetVariableName(p.Name, vsp);
            if (!string.IsNullOrEmpty(p.SerializedName))
            {
                <text>
                case "@(p.SerializedName)":
    </text>
}
else
{
    <text>
        default:
    </text>
}

var modelType = p.ModelType;

if (modelType is DictionaryTypeGo dictionaryType && dictionaryType.SupportsAdditionalProperties)
{
    modelType = dictionaryType.ValueType;
}
<text>
    if v != nil {
    @if (modelType.HasInterface())
    {
        @:@varName, err := unmarshal@(modelType.GetInterfaceName())(*v)
    }
    else if (modelType is SequenceTypeGo sequenceType && sequenceType.ElementType.HasInterface())
    {
        @:@varName, err := unmarshal@(sequenceType.ElementType.GetInterfaceName())Array(*v)
    }
    else
    {
        <text>
        var @varName @(modelType.Name)
        err = json.Unmarshal(*v, &@varName)
</text>
}
    if err != nil {
    return err
    }
    @if (p.ModelType is DictionaryTypeGo type && type.SupportsAdditionalProperties)
    {
        @:if(@(receiverVar).@(p.Name) == nil) {
        @: @(receiverVar).@(p.Name) = make(@(p.ModelType.Name))
        @:}
        if (type.ValueType.CanBeNull())
        {
            @:@(receiverVar).@(p.Name)[k] = @varName
        }
        else
        {
            @:@(receiverVar).@(p.Name)[k] = &@varName
        }
    }
    else if (!p.IsPointer)
    {
        @:@(receiverVar).@(p.Name) = @varName
    }
    else
    {
        @:@(receiverVar).@(p.FieldName) = &@varName
    }
    }

    </text>
}
        }
        }
        </text>
    }
        @EmptyLine
        return nil
        }
        </text>
    }

@if (Model is PageTypeGo modelPageType)
{
    var itemName = modelPageType.ItemName;
    <text>
        @EmptyLine
        // NextWithContext advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        func (page * @Model.Name) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/@(modelPageType.AdvancerQualifiedName)")
        defer func() {
        sc := -1
        if page.Response().Response.Response != nil {
        sc = page.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        for {
        next, err := page.@(modelPageType.FnFieldName)(ctx, page.@modelPageType.ResultFieldName)
        if err != nil {
        return err
        }
        page.@modelPageType.ResultFieldName = next
        if !next.hasNextLink() || !next.IsEmpty() {
        break
        }
        }
        return nil
        }
        @EmptyLine
        // Next advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        @WrapComment("// Deprecated: ", "Use NextWithContext() instead.")
        func (page * @Model.Name) Next() error {
        return page.NextWithContext(context.Background())
        }

        // NotDone returns true if the page enumeration should be started or is not yet complete.
        func (page @Model.Name) NotDone() bool {
        return !page.@(modelPageType.ResultFieldName).IsEmpty()
        }

        // Response returns the raw server response from the last page request.
        func (page @Model.Name) Response() @modelPageType.ContentType.Name {
        return page.@modelPageType.ResultFieldName
        }

        // Values returns the slice of values for the current page or nil if there are no values.
        func (page @Model.Name) Values() []@(modelPageType.ReturnTypeName) {
        if page.@(modelPageType.ResultFieldName).IsEmpty() {
        return nil
        }
        return *page.@(modelPageType.ResultFieldName).@itemName
        }

        // Creates a new instance of the @Model.Name type.
        func New@(Model.Name) (cur @(modelPageType.ContentType.Name), getNextPage @(modelPageType.NextPageFunctionSig)) @Model.Name {
        return @(Model.Name){
        @(modelPageType.FnFieldName): getNextPage,
        @(modelPageType.ResultFieldName): cur,
        }
        }
    </text>
}

@if (Model is IteratorTypeGo iterType)
{
    var itemType = iterType.PageType.ElementType;
    var itemTypeName = iterType.PageType.ReturnTypeName;
    <text>
        // NextWithContext advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        func (iter * @Model.Name) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/@(iterType.AdvancerQualifiedName)")
        defer func() {
        sc := -1
        if iter.Response().Response.Response != nil {
        sc = iter.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        iter.@iterType.IndexField++
        if iter.@iterType.IndexField < len(iter. @(iterType.PageField).Values()) {
        return nil
        }
        err = iter.@(iterType.PageField).NextWithContext(ctx)
        if err != nil {
        iter. @iterType.IndexField--
        return err
        }
        iter.@iterType.IndexField = 0
        return nil
        }

        // Next advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        @WrapComment("// Deprecated: ", "Use NextWithContext() instead.")
        func (iter * @Model.Name) Next() error {
        return iter.NextWithContext(context.Background())
        }
        // NotDone returns true if the enumeration should be started or is not yet complete.
        func (iter @Model.Name) NotDone() bool {
        return iter.@(iterType.PageField).NotDone() && iter.@iterType.IndexField < len(iter. @(iterType.PageField).Values())
        }

        // Response returns the raw server response from the last page request.
        func (iter @Model.Name) Response() @iterType.PageType.ContentType.Name {
        return iter.@(iterType.PageField).Response()
        }

        // Value returns the current value or a zero-initialized value if the
        // iterator has advanced beyond the end of the collection.
        func (iter @Model.Name) Value() @(itemTypeName) {
        if !iter.@(iterType.PageField).NotDone() {
        return @itemType.GetZeroInitExpression()
        }
        return iter.@(iterType.PageField).Values()[iter.@iterType.IndexField]
        }

        // Creates a new instance of the @Model.Name type.
        func New@(Model.Name) (page @(iterType.PageType.Name)) @Model.Name {
        return @(Model.Name){@(iterType.PageField): page}
        }
    </text>
}
