@using AutoRest.Go
@using AutoRest.Core.Model
@using AutoRest.Go.Model
@using AutoRest.Go.Templates
@using AutoRest.Core.Utilities

@inherits AutoRest.Core.Template<AutoRest.Go.Model.CompositeTypeGo>

@WrapComment("// ", string.Format("{0} is {1}", Model.Name, Model.Documentation.ToSentence()))
@if (Model.IsPolymorphic)
{
@:type @(Model.Name) interface {
    foreach (var dt in Model.DerivedTypes)
    {
    @:As@(dt.Name) () (*@(dt.Name), bool)
    }
@:}
}
else
{
@:type @(Model.Name) struct {
@if (Model.IsResponseType)
{
    @:autorest.Response `json:"-"`
}
    @(Model.Fields())
@:}
}

@if (Model.BaseIsPolymorphic && !Model.IsPolymorphic)
{
@:@EmptyLine
@:// MarshalJSON is the custom marshaler for @(Model.Name).
@:func (s @(Model.Name))MarshalJSON() ([]byte, error){
    @:type Alias @(Model.Name)
    @:return json.Marshal(&struct {
        @:Alias
    @:}{
        @:Alias: (Alias)(s),
    @:})
@:}

foreach (var st in Model.SiblingTypes)
{
@:@EmptyLine
@:// As@(st.Name) is the @(Model.BaseModelType.Name) implementation for @(Model.Name).
@:func (s @(Model.Name)) As@(st.Name)() (*@(st.Name), bool) {
    if (st.Equals(Model))
    {
    @:return &s, true
    }
    else
    {
    @:return nil, false
    }
@:}
}
}

@if (!string.IsNullOrEmpty(Model.NextLink) && Model.PreparerNeeded)
{
@:@EmptyLine
@:// @(Model.PreparerMethodName) prepares a request to retrieve the next set of results. It returns
@:// nil if no more results exist.
@:func (client @(Model.Name)) @(Model.PreparerMethodName)() (*http.Request, error) {
    @:if client.@(Model.NextLink) == nil || len(to.String(client.@(Model.NextLink))) <= 0 {
        @:return nil, nil
    @:}
    @:return autorest.Prepare(&http.Request{},
        @:autorest.AsJSON(),
        @:autorest.AsGet(),
        @:autorest.WithBaseURL(to.String(client.@(Model.NextLink))));
@:}
}
