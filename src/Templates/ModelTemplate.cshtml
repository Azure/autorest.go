@using AutoRest.Go
@using AutoRest.Core.Model
@using AutoRest.Go.Model
@using AutoRest.Go.Templates
@using AutoRest.Core.Utilities

@inherits AutoRest.Core.Template<AutoRest.Go.Model.CompositeTypeGo>

@if (Model.HasInterface())
{
@WrapComment("// ", $"{Model.GetInterfaceName()} {Model.Documentation.ToSentence()}")
    <text>
type @(Model.GetInterfaceName()) interface {
    @foreach (var dt in Model.DerivedTypes)
    {
        @:As@(dt.Name) () (*@(dt.Name), bool)
        if (dt.HasInterface())
        {
            @:As@(dt.GetInterfaceName()) () (@(dt.GetInterfaceName()), bool)
        }
    }
    As@(Model.Name) () (*@(Model.Name), bool)
}

@EmptyLine
@WrapComment("// ", $"{Model.Name} {Model.Documentation.ToSentence()}")
type @(Model.Name) struct {
    @(Model.AddHTTPResponse())
    @(Model.Fields())
}

@EmptyLine
func unmarshal@(Model.GetInterfaceName())(body []byte) (@(Model.GetInterfaceName()), error){
    var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
	    return nil, err
	}
    @EmptyLine
    switch m["@(Model.RootType.PolymorphicDiscriminator)"] {
    @foreach (var dt in Model.DerivedTypes)
    {
    <text>
    case string(@(CodeNamerGo.Instance.GetEnumMemberName((dt as CompositeTypeGo).DiscriminatorEnumValue))):
        var @(dt.Name.FixedValue.ToShortName()) @(dt.Name)
        err := json.Unmarshal(body, &@(dt.Name.FixedValue.ToShortName()))
        return @(dt.Name.FixedValue.ToShortName()), err
    </text>
    }
    default:
        var @(Model.Name.FixedValue.ToShortName()) @(Model.Name)
        err := json.Unmarshal(body, &@(Model.Name.FixedValue.ToShortName()))
        return @(Model.Name.FixedValue.ToShortName()), err
    }
}

func unmarshal@(Model.GetInterfaceName())Array(body []byte) ([]@(Model.GetInterfaceName()), error){
    var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
        return nil, err
	}
    @EmptyLine
    @(Model.Name.FixedValue.ToShortName())Array := make([]@(Model.GetInterfaceName()), len(rawMessages))
    @EmptyLine
    for index, rawMessage := range rawMessages {
        @(Model.Name.FixedValue.ToShortName()), err := unmarshal@(Model.GetInterfaceName())(*rawMessage)
	    if err != nil {
		    return nil, err
	    }
        @(Model.Name.FixedValue.ToShortName())Array[index] = @(Model.Name.FixedValue.ToShortName())
    }
    return @(Model.Name.FixedValue.ToShortName())Array, nil
}
</text>
}
else
{
    if (Model is PageTypeGo)
    {
        var pageType = Model as PageTypeGo;
        var itemName = pageType.ItemName;
        var contentType = pageType.ContentType.Name;
        var receiverVar = contentType.FixedValue.ToShortName();

    <text>
@EmptyLine
// IsEmpty returns true if the ListResult contains no values.
func (@receiverVar @contentType) IsEmpty() bool {
    return @(receiverVar).@itemName == nil || len(*@(receiverVar).@itemName) == 0
}
@EmptyLine
    </text>
        if (pageType.PreparerNeeded)
        {
        <text>
// @(pageType.PreparerMethodName) prepares a request to retrieve the next set of results.
// It returns nil if no more results exist.
func (@receiverVar @contentType) @(pageType.PreparerMethodName)() (*http.Request, error) {
    if @(receiverVar).@(pageType.NextLink) == nil || len(to.String(@(receiverVar).@(pageType.NextLink))) < 1 {
        return nil, nil
    }
    return autorest.Prepare(&http.Request{},
    autorest.AsJSON(),
    autorest.AsGet(),
    autorest.WithBaseURL(to.String( @(receiverVar).@(pageType.NextLink))));
}
@EmptyLine
        </text>
        }
    }
<text>
@{ 
    var modelDoc = Model.Documentation.ToSentence();
    if (string.IsNullOrWhiteSpace(modelDoc))
    {
        modelDoc = "...";
    }
}
@WrapComment("// ", $"{Model.Name} {modelDoc}")
type @(Model.Name) struct {
    @(Model.AddHTTPResponse())
    @(Model.Fields())
}
</text>
}

@if (Model.BaseIsPolymorphic || Model.IsPolymorphic)
{
<text>
@EmptyLine
// MarshalJSON is the custom marshaler for @(Model.Name).
func (@(Model.Name.FixedValue.ToShortName()) @(Model.Name))MarshalJSON() ([]byte, error){
    @(Model.Name.FixedValue.ToShortName()).@(Model.PolymorphicProperty) = @(CodeNamerGo.Instance.GetEnumMemberName(Model.DiscriminatorEnumValue))
    type Alias @(Model.Name)
    return json.Marshal(&struct {
        Alias
    }{
        Alias: (Alias)(@(Model.Name.FixedValue.ToShortName())),
    })
}

    @foreach (var st in Model.SiblingTypes)
    {
    <text>
@EmptyLine
// As@(st.Name) is the @(Model.RootType.GetInterfaceName()) implementation for @(Model.Name).
func (@(Model.Name.FixedValue.ToShortName()) @(Model.Name)) As@(st.Name)() (*@(st.Name), bool) {
        @if (st.Equals(Model))
        {
    @:return &@(Model.Name.FixedValue.ToShortName()), true
        }
        else
        {
    @:return nil, false
        }
        }

    @if (st.HasInterface())
    {
        @EmptyLine
        @:// As@(st.GetInterfaceName()) is the @(Model.RootType.GetInterfaceName()) implementation for @(Model.Name).
        @:func(@(Model.Name.FixedValue.ToShortName()) @(Model.Name)) As@(st.GetInterfaceName())()(@(st.GetInterfaceName()), bool) {
        if (st.Equals(Model) || Model.DerivesFrom(st))
        {
            @:return &@(Model.Name.FixedValue.ToShortName()), true
        }
        else
        {
            @:return nil, false
        }
        @:}
        @EmptyLine
    }
    </text>
    }
</text>
}

@if (Model.HasPolymorphicFields || Model.HasFlattenedFields)
{
<text>
// UnmarshalJSON is the custom unmarshaler for @(Model.Name) struct.
func (@(Model.Name.FixedValue.ToShortName()) *@(Model.Name)) UnmarshalJSON(body []byte) error {
    @if (Model.IsWrapperType)
    {
        if (Model.BaseType is SequenceTypeGo sequenceType)
        {
    @:@(sequenceType.ElementType.Name.FixedValue.ToShortName()), err := unmarshal@(sequenceType.ElementType.GetInterfaceName())Array(body)
        }
        else
        {
    @:@(Model.BaseType.Name.FixedValue.ToShortName()), err := unmarshal@(Model.BaseType.GetInterfaceName())(body)
        }
    <text>
	if err != nil {
		return err
	}
    </text>
        if (Model.BaseType is SequenceType type)
        {
            @:@(Model.Name.FixedValue.ToShortName()).Value = &@type.ElementType.Name.FixedValue.ToShortName()
        }
        else
        {
    @:@(Model.Name.FixedValue.ToShortName()).Value = @(Model.BaseType.Name.FixedValue.ToShortName())
        }
    }
    else
    {
    <text>
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}

    var v *json.RawMessage
        @foreach (var p in Model.AllProperties)
        {
            if (p.ModelType is DictionaryTypeGo dictionaryType && dictionaryType.SupportsAdditionalProperties)
            {
                // TODO: codegen for this scenario is broken
                continue;
            }
        <text>
    @EmptyLine
    v = m["@(p.SerializedName)"]
    if v != nil {
            @if (p.ModelType.HasInterface())
            {
        @:@(CodeNamerGo.Instance.GetVariableName(p.SerializedName)), err := unmarshal@(p.ModelType.GetInterfaceName())(*m["@(p.SerializedName)"])
            }
            else if (p.ModelType is SequenceTypeGo sequenceType && sequenceType.ElementType.HasInterface())
            {
        @:@(CodeNamerGo.Instance.GetVariableName(p.SerializedName)), err := unmarshal@(sequenceType.ElementType.GetInterfaceName())Array(*m["@(p.SerializedName)"])
            }
            else
            {
            <text>
        var @(CodeNamerGo.Instance.GetVariableName(p.SerializedName)) @(p.ModelType.Name)
        err = json.Unmarshal(*m["@(p.SerializedName)"], &@(CodeNamerGo.Instance.GetVariableName(p.SerializedName)))
            </text>
            }
        if err != nil {
            return err
        }
            @if (p.ModelType.HasInterface() || p.ModelType is EnumType)
            {
        @:@(Model.Name.FixedValue.ToShortName()).@(p.Name) = @(CodeNamerGo.Instance.GetVariableName(p.SerializedName))
            }
            else
            {
        @:@(Model.Name.FixedValue.ToShortName()).@(p.Name) = &@(CodeNamerGo.Instance.GetVariableName(p.SerializedName))
            }
    }
        </text>
        }
    </text>
    }
    @EmptyLine
    return nil
}
</text>
}

@if (Model is PageTypeGo)
{
    var pageType = (PageTypeGo)Model;
    var itemName = pageType.ItemName;
    var itemType = pageType.ElementType.Name;
<text>
@EmptyLine
// Next advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
func (page * @Model.Name) Next() error {
    next, err := page.@(pageType.FnFieldName)(page.@pageType.ResultFieldName)
    if err != nil {
        return err
    }
    page.@pageType.ResultFieldName = next
    return nil
}

// NotDone returns true if the page enumeration should be started or is not yet complete.
func (page @Model.Name) NotDone() bool {
    return !page.@(pageType.ResultFieldName).IsEmpty()
}

// Response returns the raw server response from the last page request.
func (page @Model.Name) Response() @pageType.ContentType.Name {
    return page.@(pageType.ResultFieldName)
}

// Values returns the slice of values for the current page or nil if there are no values.
func (page @Model.Name) Values() []@(itemType) {
    if page.@(pageType.ResultFieldName).IsEmpty() {
        return nil
    }
    return *page.@(pageType.ResultFieldName).@itemName
}
</text>
}

@if (Model is IteratorTypeGo)
{
    var iterType = (IteratorTypeGo)Model;
    var itemType = iterType.PageType.ElementType;
    var itemTypeName = iterType.PageType.ElementType.Name;
<text>
// Next advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
func (iter * @Model.Name) Next() error {
    iter.@(iterType.IndexField)++
    if iter.@(iterType.IndexField) < len(iter. @(iterType.PageField).Values()) {
        return nil
    }
    err := iter.@(iterType.PageField).Next()
    if err != nil {
        iter. @(iterType.IndexField)--
        return err
    }
    iter.@(iterType.IndexField) = 0
    return nil
}

// NotDone returns true if the enumeration should be started or is not yet complete.
func (iter @Model.Name) NotDone() bool {
    return iter.@(iterType.PageField).NotDone() && iter.@(iterType.IndexField) < len(iter. @(iterType.PageField).Values())
}

// Response returns the raw server response from the last page request.
func (iter @Model.Name) Response() @iterType.PageType.ContentType.Name {
    return iter.@(iterType.PageField).Response()
}

// Value returns the current value or a zero-initialized value if the
// iterator has advanced beyond the end of the collection.
func (iter @Model.Name) Value() @(itemTypeName) {
    if !iter.@(iterType.PageField).NotDone() {
        return @itemType.GetZeroInitExpression()
    }
    return iter.@(iterType.PageField).Values()[iter.@(iterType.IndexField)]
}
</text>
}

@if (Model is FutureTypeGo)
{
    var ftg = Model as FutureTypeGo;
    var resultVar = ftg.ResultTypeName.ToShortName();
    var resultVarTarget = resultVar;
    var futureTypeName = $"{Model.CodeModel.Namespace}.{Model.Name}";
    if (ftg.ResultType is IteratorTypeGo)
    {
        resultVarTarget = $"{resultVarTarget}.{ftg.ResultType.Cast<IteratorTypeGo>().PageField}";
    }
<text>
// Result returns the result of the asynchronous operation.
// If the operation has not completed it will return an error.
func (future @Model.Name) Result(client @ftg.ClientTypeName) (@resultVar @ftg.ResultTypeName, err error) {
    var done bool
    done, err = future.Done(client)
    if err != nil {
        err = autorest.NewErrorWithError(err, "@futureTypeName", "Result", future.Response(), "Polling failure")
        return
    }
    if !done {
        return @resultVar, azure.NewAsyncOpIncompleteError("@futureTypeName")
    }
    if future.PollingMethod() == azure.PollingLocation {
        @resultVarTarget, err = client.@(ftg.ResponderMethodName)(future.Response())
        if err != nil {
            err = autorest.NewErrorWithError(err, "@futureTypeName", "Result", future.Response(), "Failure responding to request")
        }
        return
    }
    var resp *http.Response
    resp, err = autorest.SendWithSender(client, autorest.ChangeToGet(future.req),
        autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
    if err != nil {
        err = autorest.NewErrorWithError(err, "@futureTypeName", "Result", resp, "Failure sending request")
        return
    }
    @resultVarTarget, err = client.@(ftg.ResponderMethodName)(resp)
    if err != nil {
        err = autorest.NewErrorWithError(err, "@futureTypeName", "Result", resp, "Failure responding to request")
    }
    return
}
</text>
}
