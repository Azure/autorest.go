@using System.Collections.Generic
@using System.Linq;
@using System.Text;
@using System;
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.Go
@using AutoRest.Go.Model

@inherits AutoRest.Core.Template<AutoRest.Go.Model.MethodGo>

@WrapComment("// ", Model.Name + " " + Model.Description.ToSentence())
@if (Model.LocalParameters.Count() > 0)
{
<text>
//
@WrapComment("// ", Model.ParametersDocumentation)
</text>
}

func (client @(Model.Owner)) @(Model.MethodSignature) (@Model.MethodReturnSignature()) {
@if ((Model.CodeModel as CodeModelGo).ShouldValidate && !Model.ParameterValidations.IsNullOrEmpty())
{
<text>
    if err := validation.Validate([]validation.Validation{
    @(Model.ParameterValidations)}); err != nil {
        return result, @(Model.ValidationError)
    }
@EmptyLine
</text>
}

    req, err := client.@(Model.PreparerMethodName)(@(Model.HelperInvocationParameters(false)))
    if err != nil {
        err = @(Model.AutorestError("Failure preparing request"))
        return
    }
@EmptyLine
@if (Model.IsLongRunningOperation())
{
<text>
    result, err = client.@(Model.SenderMethodName)(req)
    if err != nil {
        err = @(Model.AutorestError("Failure sending request", "resp", "result.Response()"))
        return
    }
</text>
}
else
{
<text>
    resp, err := client.@(Model.SenderMethodName)(req)
    if err != nil {
        @(Model.Response(false))
        err = @(Model.AutorestError("Failure sending request", "resp"))
        return
    }
@EmptyLine
    result, err = client.@(Model.ResponderMethodName)(resp)
    if err != nil {
        err = @(Model.AutorestError("Failure responding to request", "resp"))
    }
</text>
}
@EmptyLine
    return
}

@EmptyLine
// @(Model.PreparerMethodName) prepares the @(Model.Name) request.
func (client @(Model.Owner)) @(Model.PreparerMethodName)(@(Model.MethodParametersSignature)) (*http.Request, error) {
@if (Model.IsCustomBaseUri && Model.URLParameters.Any())
{
<text>
    @(Model.URLMap)
    @EmptyLine
</text>
}
@if (Model.PathParameters.Any())
{
<text>
    @(Model.PathMap)
    @EmptyLine
</text>
}
@if (Model.QueryParameters.Any())
{
    @if (Model.QueryParameters.Any(p => p.GetParameterName().IsApiVersion())
        && !Model.LocalParameters.Any(p => p.GetParameterName().IsApiVersion())) 
    {
        @:@(string.Format("const APIVersion = \"{0}\"", Model.APIVersion))
    }
    @:@(Model.QueryMap)
    foreach (var p in Model.OptionalQueryParameters)
    {
    @:if @(p.GetEmptyCheck(p.GetParameterName(),false)) {
        @:@(p.AddToMap("queryParameters"))
    @:}
    }
    @:@EmptyLine
}

@if (Model.FormDataParameters.Any())
{
<text>
    @(Model.FormDataMap)
    @EmptyLine
</text>
}

    preparer := autorest.CreatePreparer(
        @(Model.PrepareDecorators.EmitAsArguments()))

@if (Model.BodyParameter != null && !Model.BodyParameter.IsRequired)
{
<text>
    if @(Model.BodyParameter.GetEmptyCheck(Model.BodyParameter.Name, false)) {
        preparer = autorest.DecoratePreparer(preparer,
                            @(string.Format("autorest.WithJSON({0})", Model.BodyParameter.Name)))
    }
</text>
}

@foreach (var p in Model.OptionalHeaderParameters)
{
<text>
    if @(p.GetEmptyCheck(p.GetParameterName(), false)) {
        preparer = autorest.DecoratePreparer(preparer,
                            @(string.Format("autorest.WithHeader(\"{0}\",autorest.String({1}))",
                            p.SerializedName, p.GetParameterName())))
    }
</text>
}
    return preparer.Prepare(&http.Request{})
}

@{ 
    var senderRetType = "*http.Response";
    if (Model.IsLongRunningOperation())
    {
        senderRetType = Model.MethodReturnType;
    }
}

@EmptyLine
// @(Model.SenderMethodName) sends the @(Model.Name) request. The method will close the
// http.Response Body if it receives an error.
func (client @(Model.Owner)) @(Model.SenderMethodName)(req *http.Request) (@senderRetType, error) {
@if (Model.IsLongRunningOperation())
{
<text>
    sender := autorest.DecorateSender(client, @Model.SendDecorators.EmitAsArguments())
    future := azure.NewFuture(req)
    _, err := future.Done(sender)
    f := @(senderRetType){Future: future}
    return f, err
</text>
}
else
{
<text>
    return autorest.SendWithSender(client, req,
        @(Model.SendDecorators.EmitAsArguments()))
</text>
}
}

@EmptyLine
// @(Model.ResponderMethodName) handles the response to the @(Model.Name) request. The method always
// closes the http.Response Body.
func (client @(Model.Owner)) @(Model.ResponderMethodName)(resp *http.Response) (@Model.ResponderReturnSignature()) { 
    @if (Model.ReturnValue().Body.IsStreamType())
    {
    @:result.Value = &resp.Body
    }
    err = autorest.Respond(
        @(Model.RespondDecorators.EmitAsArguments()))

    @(Model.Response(true))
    return
}

@if (Model.IsPageable && !Model.NextAlreadyDefined)
{
<text>
@EmptyLine
// @(Model.NextMethodName) retrieves the next set of results, if any.
func (client @(Model.Owner)) @(Model.NextMethodName)(lastResults @(Model.ReturnValue().Body.Name)) (@Model.MethodReturnSignature()) {
    req, err := lastResults.@((Model.ReturnValue().Body as CompositeTypeGo).PreparerMethodName)()
    if err != nil {
        return result, @(Model.AutorestError("Failure preparing next results request"))
    }
    if req == nil {
        return
    }

    @EmptyLine
    resp, err := client.@(Model.SenderMethodName)(req)
    if err != nil {
        @(Model.Response(false))
        return result, @(Model.AutorestError("Failure sending next results request", "resp"))
    }

    @EmptyLine
    result, err = client.@(Model.ResponderMethodName)(resp)
    if err != nil {
        err = @(Model.AutorestError("Failure responding to next results request", "resp"))
    }

    @EmptyLine
    return
}
</text>
}

@if (Model.IsPageable && !Model.IsNextMethod && Model.ListElement != null)
{
<text>
@EmptyLine
// @(Model.ListCompleteMethodName) gets all elements from the list without paging.
func (client @(Model.Owner)) @(Model.ListCompleteMethodName) @(Model.MethodParametersSignatureComplete) @(Model.MethodReturnSignatureComplete) {
    resultChan := make(chan @((Model.ListElement.ModelType as SequenceTypeGo).GetElement))
    errChan := make(chan error, 1)
    go func() {
        defer func() {
			close(resultChan)
			close(errChan)
		}()
        list, err := client.@(Model.Name)(@(Model.HelperInvocationParameters(false)))
        if err != nil {
            errChan @("<-") err
            return
        }
        if list.@(Model.ListElement.Name) != nil {
            for _, item := range *list.@(Model.ListElement.Name) {
                select {
                case @("<-") cancel:
                    return
                case resultChan @("<-") item:
                    // Intentionally left blank
                }
            }
        }
        for list.@(Model.NextLink) != nil {
    @if (Model.NextAlreadyDefined)
    {
          @:list, err = client.@(Model.NextOperationName)(@(Model.NextMethod.HelperInvocationParameters(true)))
    }
    else
    {
          @:list, err = client.@(Model.NextMethodName)(list)
    }
            if err != nil {
                errChan @("<-") err
                return
            }            
            if list.@(Model.ListElement.Name) != nil {
                for _, item := range *list.@(Model.ListElement.Name) {
                    select {
                        case @("<-") cancel:
                            return
                        case resultChan @("<-") item:
                            // Intentionally left blank
                    }
                }
            }
        }
    }()
    return resultChan, errChan
}
</text>
}
