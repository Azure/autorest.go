@using AutoRest.Go
@using System.Collections.Generic
@using System.Linq

@inherits AutoRest.Core.Template<AutoRest.Go.Model.EnumTypeGo>

@if (Model.Deprecated)
{
    var message = "This type has been deprecated.";
    if (!string.IsNullOrWhiteSpace(Model.DeprecationMessage))
    {
        message = Model.DeprecationMessage;
    }
@:@WrapComment("// Deprecated: ", message)
}
@if (Model.Name.Value.Length >= Settings.MaximumCommentColumns)
{
    <text>
        // @Model.Documentation
    </text>
}
else
{
    <text>
        @WrapComment("// ", Model.Documentation)
    </text>
}
type @Model.Name string

@EmptyLine
@if (Model.Values.Any())
{
    var possibleFuncName = $"Possible{Model.Name}Values";
    var orderedValues = new List<string>();
    <text>
    const (
    @foreach (var v in Model.Values.OrderBy(v => v.Name))
    {
        var comment = string.Empty;
        var memName = CodeNamerGo.Instance.GetEnumMemberName(v.Name);
        orderedValues.Add(memName);

        if (string.IsNullOrWhiteSpace(v.Description))
        {
            comment = $"{CodeNamerGo.Instance.GetEnumMemberName(v.Name)} ...";

            <text>
                // @comment
            </text>
        }
        else
        {
            comment = $"{CodeNamerGo.Instance.GetEnumMemberName(v.Name)} {v.Description}";
            <text>
            @WrapComment("// ", comment)
            </text>
        }
        <text>
        @(memName) @(Model.Name) = "@(v.SerializedName)"
        </text>
    }
    )
    // @possibleFuncName returns an array of possible values for the @Model.Name const type.
    func @(possibleFuncName)() []@Model.Name {
        return []@(Model.Name){@(string.Join(',', orderedValues))}
    }
    </text>
}
