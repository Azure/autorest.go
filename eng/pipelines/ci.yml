trigger:
  branches:
    include:
    - track2

pr:
  branches:
    include:
    - track2

variables:
  NodeVersion: '14.x'
  goTestPath: '$(system.defaultWorkingDirectory)/test'
  GOBIN: '$(system.defaultWorkingDirectory)/bin/go'

jobs:
  - job: 'AutoRest_Go_CI'
    displayName: 'Run AutoRest CI Checks'

    strategy:
      matrix:
        Linux_Go115:
          vm.image: 'ubuntu-18.04'
          go.version: '1.15.11'
        Linux_Go116:
          vm.image: 'ubuntu-18.04'
          go.version: '1.16.3'

    pool:
      vmImage: '$(vm.image)'

    steps:
      - task: NodeTool@0
        displayName: 'Install Node $(NodeVersion)'
        inputs:
          versionSpec: '$(NodeVersion)'

      - script: |
          cd $(Build.SourcesDirectory)
          npm install -g "@microsoft/rush"
          rush update --debug
          npm install -g autorest
        displayName: 'Prepare Generator Environment'

      - script: |
          rush rebuild -v
        displayName: 'Build Generator Sources'

      - script: |
          rush regenerate
          git add -A ./test/.
          git diff --staged -w 1>&2
        displayName: 'Regenerate Autorest Tests'
        failOnStderr: true

      - task: GoTool@0
        inputs:
          version: '$(go.version)'
        displayName: "Select Go Version"

      - script: |
          set -e
          go version
          go get github.com/jstemmer/go-junit-report
        displayName: 'Install Dependencies'
        workingDirectory: '$(goTestPath)'

      - pwsh: |
          $modDirs = (./eng/scripts/get_module_dirs.ps1 -serviceDir $(goTestPath))
          $exit = 0
          foreach ($md in $modDirs) {
            pushd $md
            Write-Host "##[command]Executing go build -v ./... in $md"
            go build -v ./...
            if (!$?) {
              $exit = 1
            }
          }
          exit $exit
        displayName: 'Build'

      - pwsh: |
          $modDirs = (./eng/scripts/get_module_dirs.ps1 -serviceDir $(goTestPath))
          $exit = 0
          foreach ($md in $modDirs) {
            pushd $md
            Write-Host "##[command]Executing go mod tidy in $md"
            go mod tidy
            $diff = (git diff -w .)
            write-host ($diff -join "`n")
            if ($diff.Length -gt 0) {
              $exit = 1
            }
          }
          exit $exit
        displayName: 'Mod Tidy'

      - pwsh: |
          $modDirs = (./eng/scripts/get_module_dirs.ps1 -serviceDir $(goTestPath))
          $exit = 0
          foreach ($md in $modDirs) {
            pushd $md
            Write-Host "##[command]Executing go vet ./... in $md"
            go vet ./...
            if (!$?) {
              $exit = 1
            }
          }
          exit $exit
        displayName: 'Vet'

      - pwsh: |
          pushd ./src/node_modules/@microsoft.azure/autorest.testserver
          npm run start:prod&
          popd
          $testDirs = (./eng/scripts/get_test_dirs.ps1 -serviceDir $(goTestPath))
          foreach ($td in $testDirs) {
            pushd $td
            Write-Host "##[command]Executing go test -run "^Test" -v $td | $(GOBIN)/go-junit-report -set-exit-code > report.xml"
            go test -run "^Test" -v | $(GOBIN)/go-junit-report -set-exit-code > report.xml
            popd
          }
          pushd test
          go run ./autorest/covreport/main.go
          popd
          pushd ./src/node_modules/@microsoft.azure/autorest.testserver
          npm stop
          popd
        displayName: 'Run Acceptance Tests'

      - task: PublishTestResults@2
        inputs:
          testRunner: JUnit
          testResultsFiles: $(goTestPath)/**/report.xml
          failTaskOnFailedTests: true

      - ${{if ne(variables['Build.Reason'], 'PullRequest')}}:
        - pwsh: |
            $currentVersion = node -p -e "require('./src/package.json').version";
            $currentVersion="$currentVersion-$(Build.BuildNumber)";
            cd src/node_modules/@microsoft.azure/autorest.testserver;
            npm run coverage-push -- $(Build.Repository.Name) $(Build.SourceBranch) $(github-token) $(storage-coverage-user) $(storage-coverage-pass) $currentVersion;
          displayName: 'Publish AutoRest Test Server Coverage Report'
