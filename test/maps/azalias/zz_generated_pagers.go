// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azalias

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"reflect"
)

type AliasListPager interface {
	azcore.Pager
	// PageResponse returns the current AliasListResponseEnvelope.
	PageResponse() AliasListResponseEnvelope
}

type aliasListPager struct {
	client    *aliasClient
	current   AliasListResponseEnvelope
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AliasListResponseEnvelope) (*azcore.Request, error)
}

func (p *aliasListPager) Err() error {
	return p.err
}

func (p *aliasListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AliasListResponse.NextLink == nil || len(*p.current.AliasListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *aliasListPager) PageResponse() AliasListResponseEnvelope {
	return p.current
}
