//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package aztables

import (
	"context"
	"encoding/xml"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
	"time"
)

// Client contains the methods for the Table group.
// Don't use this type directly, use NewClient() instead.
type Client struct {
	endpoint string
	version  Enum0
	pl       runtime.Pipeline
}

// NewClient creates a new instance of Client with the specified values.
// endpoint - The URL of the service account or table that is the target of the desired operation.
// version - Specifies the version of the operation to use for this request.
// pl - the pipeline used for sending requests and handling responses.
func NewClient(endpoint string, version Enum0, pl runtime.Pipeline) *Client {
	client := &Client{
		endpoint: endpoint,
		version:  version,
		pl:       pl,
	}
	return client
}

// Create - Creates a new table under the given account.
// If the operation fails it returns the *ServiceError error type.
// dataServiceVersion - Specifies the data service version.
// tableProperties - The Table properties.
// options - TableCreateOptions contains the optional parameters for the Client.Create method.
func (client *Client) Create(ctx context.Context, dataServiceVersion Enum1, tableProperties Properties, options *TableCreateOptions) (TableCreateResponse, error) {
	req, err := client.createCreateRequest(ctx, dataServiceVersion, tableProperties, options)
	if err != nil {
		return TableCreateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return TableCreateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusCreated, http.StatusNoContent) {
		return TableCreateResponse{}, client.createHandleError(resp)
	}
	return client.createHandleResponse(resp)
}

// createCreateRequest creates the Create request.
func (client *Client) createCreateRequest(ctx context.Context, dataServiceVersion Enum1, tableProperties Properties, options *TableCreateOptions) (*policy.Request, error) {
	urlPath := "/Tables"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Format != nil {
		reqQP.Set("$format", string(*options.Format))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("x-ms-version", string(client.version))
	if options != nil && options.RequestID != nil {
		req.Raw().Header.Set("x-ms-client-request-id", *options.RequestID)
	}
	req.Raw().Header.Set("DataServiceVersion", string(dataServiceVersion))
	if options != nil && options.ResponsePreference != nil {
		req.Raw().Header.Set("Prefer", string(*options.ResponsePreference))
	}
	req.Raw().Header.Set("Accept", "application/json;odata=minimalmetadata")
	return req, runtime.MarshalAsJSON(req, tableProperties)
}

// createHandleResponse handles the Create response.
func (client *Client) createHandleResponse(resp *http.Response) (TableCreateResponse, error) {
	result := TableCreateResponse{RawResponse: resp}
	if val := resp.Header.Get("x-ms-client-request-id"); val != "" {
		result.ClientRequestID = &val
	}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.RequestID = &val
	}
	if val := resp.Header.Get("x-ms-version"); val != "" {
		result.Version = &val
	}
	if val := resp.Header.Get("Date"); val != "" {
		date, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return TableCreateResponse{}, err
		}
		result.Date = &date
	}
	if val := resp.Header.Get("Preference-Applied"); val != "" {
		result.PreferenceApplied = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.Response); err != nil {
		return TableCreateResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// createHandleError handles the Create error response.
func (client *Client) createHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ServiceError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Delete - Operation permanently deletes the specified table.
// If the operation fails it returns the *ServiceError error type.
// table - The name of the table.
// options - TableDeleteOptions contains the optional parameters for the Client.Delete method.
func (client *Client) Delete(ctx context.Context, table string, options *TableDeleteOptions) (TableDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, table, options)
	if err != nil {
		return TableDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return TableDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return TableDeleteResponse{}, client.deleteHandleError(resp)
	}
	return client.deleteHandleResponse(resp)
}

// deleteCreateRequest creates the Delete request.
func (client *Client) deleteCreateRequest(ctx context.Context, table string, options *TableDeleteOptions) (*policy.Request, error) {
	urlPath := "/Tables('{table}')"
	if table == "" {
		return nil, errors.New("parameter table cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{table}", url.PathEscape(table))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("x-ms-version", string(client.version))
	if options != nil && options.RequestID != nil {
		req.Raw().Header.Set("x-ms-client-request-id", *options.RequestID)
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleResponse handles the Delete response.
func (client *Client) deleteHandleResponse(resp *http.Response) (TableDeleteResponse, error) {
	result := TableDeleteResponse{RawResponse: resp}
	if val := resp.Header.Get("x-ms-client-request-id"); val != "" {
		result.ClientRequestID = &val
	}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.RequestID = &val
	}
	if val := resp.Header.Get("x-ms-version"); val != "" {
		result.Version = &val
	}
	if val := resp.Header.Get("Date"); val != "" {
		date, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return TableDeleteResponse{}, err
		}
		result.Date = &date
	}
	return result, nil
}

// deleteHandleError handles the Delete error response.
func (client *Client) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ServiceError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// DeleteEntity - Deletes the specified entity in a table.
// If the operation fails it returns the *ServiceError error type.
// dataServiceVersion - Specifies the data service version.
// table - The name of the table.
// partitionKey - The partition key of the entity.
// rowKey - The row key of the entity.
// ifMatch - Match condition for an entity to be deleted. If specified and a matching entity is not found, an error will be
// raised. To force an unconditional delete, set to the wildcard character (*).
// options - TableDeleteEntityOptions contains the optional parameters for the Client.DeleteEntity method.
func (client *Client) DeleteEntity(ctx context.Context, dataServiceVersion Enum1, table string, partitionKey string, rowKey string, ifMatch string, options *TableDeleteEntityOptions) (TableDeleteEntityResponse, error) {
	req, err := client.deleteEntityCreateRequest(ctx, dataServiceVersion, table, partitionKey, rowKey, ifMatch, options)
	if err != nil {
		return TableDeleteEntityResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return TableDeleteEntityResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return TableDeleteEntityResponse{}, client.deleteEntityHandleError(resp)
	}
	return client.deleteEntityHandleResponse(resp)
}

// deleteEntityCreateRequest creates the DeleteEntity request.
func (client *Client) deleteEntityCreateRequest(ctx context.Context, dataServiceVersion Enum1, table string, partitionKey string, rowKey string, ifMatch string, options *TableDeleteEntityOptions) (*policy.Request, error) {
	urlPath := "/{table}(PartitionKey='{partitionKey}',RowKey='{rowKey}')"
	if table == "" {
		return nil, errors.New("parameter table cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{table}", url.PathEscape(table))
	if partitionKey == "" {
		return nil, errors.New("parameter partitionKey cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{partitionKey}", url.PathEscape(partitionKey))
	if rowKey == "" {
		return nil, errors.New("parameter rowKey cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{rowKey}", url.PathEscape(rowKey))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Timeout != nil {
		reqQP.Set("timeout", strconv.FormatInt(int64(*options.Timeout), 10))
	}
	if options != nil && options.Format != nil {
		reqQP.Set("$format", string(*options.Format))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("x-ms-version", string(client.version))
	if options != nil && options.RequestID != nil {
		req.Raw().Header.Set("x-ms-client-request-id", *options.RequestID)
	}
	req.Raw().Header.Set("DataServiceVersion", string(dataServiceVersion))
	req.Raw().Header.Set("If-Match", ifMatch)
	req.Raw().Header.Set("Accept", "application/json;odata=minimalmetadata")
	return req, nil
}

// deleteEntityHandleResponse handles the DeleteEntity response.
func (client *Client) deleteEntityHandleResponse(resp *http.Response) (TableDeleteEntityResponse, error) {
	result := TableDeleteEntityResponse{RawResponse: resp}
	if val := resp.Header.Get("x-ms-client-request-id"); val != "" {
		result.ClientRequestID = &val
	}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.RequestID = &val
	}
	if val := resp.Header.Get("x-ms-version"); val != "" {
		result.Version = &val
	}
	if val := resp.Header.Get("Date"); val != "" {
		date, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return TableDeleteEntityResponse{}, err
		}
		result.Date = &date
	}
	return result, nil
}

// deleteEntityHandleError handles the DeleteEntity error response.
func (client *Client) deleteEntityHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ServiceError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetAccessPolicy - Retrieves details about any stored access policies specified on the table that may be used with Shared
// Access Signatures.
// If the operation fails it returns the *ServiceError error type.
// table - The name of the table.
// comp - Required query string to handle stored access policies for the table that may be used with Shared Access Signatures.
// options - TableGetAccessPolicyOptions contains the optional parameters for the Client.GetAccessPolicy method.
func (client *Client) GetAccessPolicy(ctx context.Context, table string, comp Enum4, options *TableGetAccessPolicyOptions) (TableGetAccessPolicyResponse, error) {
	req, err := client.getAccessPolicyCreateRequest(ctx, table, comp, options)
	if err != nil {
		return TableGetAccessPolicyResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return TableGetAccessPolicyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return TableGetAccessPolicyResponse{}, client.getAccessPolicyHandleError(resp)
	}
	return client.getAccessPolicyHandleResponse(resp)
}

// getAccessPolicyCreateRequest creates the GetAccessPolicy request.
func (client *Client) getAccessPolicyCreateRequest(ctx context.Context, table string, comp Enum4, options *TableGetAccessPolicyOptions) (*policy.Request, error) {
	urlPath := "/{table}"
	if table == "" {
		return nil, errors.New("parameter table cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{table}", url.PathEscape(table))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Timeout != nil {
		reqQP.Set("timeout", strconv.FormatInt(int64(*options.Timeout), 10))
	}
	reqQP.Set("comp", string(comp))
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("x-ms-version", string(client.version))
	if options != nil && options.RequestID != nil {
		req.Raw().Header.Set("x-ms-client-request-id", *options.RequestID)
	}
	req.Raw().Header.Set("Accept", "application/xml")
	return req, nil
}

// getAccessPolicyHandleResponse handles the GetAccessPolicy response.
func (client *Client) getAccessPolicyHandleResponse(resp *http.Response) (TableGetAccessPolicyResponse, error) {
	result := TableGetAccessPolicyResponse{RawResponse: resp}
	if val := resp.Header.Get("x-ms-client-request-id"); val != "" {
		result.ClientRequestID = &val
	}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.RequestID = &val
	}
	if val := resp.Header.Get("x-ms-version"); val != "" {
		result.Version = &val
	}
	if val := resp.Header.Get("Date"); val != "" {
		date, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return TableGetAccessPolicyResponse{}, err
		}
		result.Date = &date
	}
	if err := runtime.UnmarshalAsXML(resp, &result); err != nil {
		return TableGetAccessPolicyResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getAccessPolicyHandleError handles the GetAccessPolicy error response.
func (client *Client) getAccessPolicyHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ServiceError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// InsertEntity - Insert entity in a table.
// If the operation fails it returns the *ServiceError error type.
// dataServiceVersion - Specifies the data service version.
// table - The name of the table.
// options - TableInsertEntityOptions contains the optional parameters for the Client.InsertEntity method.
func (client *Client) InsertEntity(ctx context.Context, dataServiceVersion Enum1, table string, options *TableInsertEntityOptions) (TableInsertEntityResponse, error) {
	req, err := client.insertEntityCreateRequest(ctx, dataServiceVersion, table, options)
	if err != nil {
		return TableInsertEntityResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return TableInsertEntityResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusCreated, http.StatusNoContent) {
		return TableInsertEntityResponse{}, client.insertEntityHandleError(resp)
	}
	return client.insertEntityHandleResponse(resp)
}

// insertEntityCreateRequest creates the InsertEntity request.
func (client *Client) insertEntityCreateRequest(ctx context.Context, dataServiceVersion Enum1, table string, options *TableInsertEntityOptions) (*policy.Request, error) {
	urlPath := "/{table}"
	if table == "" {
		return nil, errors.New("parameter table cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{table}", url.PathEscape(table))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Timeout != nil {
		reqQP.Set("timeout", strconv.FormatInt(int64(*options.Timeout), 10))
	}
	if options != nil && options.Format != nil {
		reqQP.Set("$format", string(*options.Format))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("x-ms-version", string(client.version))
	if options != nil && options.RequestID != nil {
		req.Raw().Header.Set("x-ms-client-request-id", *options.RequestID)
	}
	req.Raw().Header.Set("DataServiceVersion", string(dataServiceVersion))
	if options != nil && options.ResponsePreference != nil {
		req.Raw().Header.Set("Prefer", string(*options.ResponsePreference))
	}
	req.Raw().Header.Set("Accept", "application/json;odata=minimalmetadata")
	if options != nil && options.TableEntityProperties != nil {
		return req, runtime.MarshalAsJSON(req, options.TableEntityProperties)
	}
	return req, nil
}

// insertEntityHandleResponse handles the InsertEntity response.
func (client *Client) insertEntityHandleResponse(resp *http.Response) (TableInsertEntityResponse, error) {
	result := TableInsertEntityResponse{RawResponse: resp}
	if val := resp.Header.Get("x-ms-client-request-id"); val != "" {
		result.ClientRequestID = &val
	}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.RequestID = &val
	}
	if val := resp.Header.Get("x-ms-version"); val != "" {
		result.Version = &val
	}
	if val := resp.Header.Get("Date"); val != "" {
		date, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return TableInsertEntityResponse{}, err
		}
		result.Date = &date
	}
	if val := resp.Header.Get("ETag"); val != "" {
		result.ETag = &val
	}
	if val := resp.Header.Get("Preference-Applied"); val != "" {
		result.PreferenceApplied = &val
	}
	if val := resp.Header.Get("Content-Type"); val != "" {
		result.ContentType = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return TableInsertEntityResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// insertEntityHandleError handles the InsertEntity error response.
func (client *Client) insertEntityHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ServiceError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// MergeEntity - Merge entity in a table.
// If the operation fails it returns the *ServiceError error type.
// dataServiceVersion - Specifies the data service version.
// table - The name of the table.
// partitionKey - The partition key of the entity.
// rowKey - The row key of the entity.
// options - TableMergeEntityOptions contains the optional parameters for the Client.MergeEntity method.
func (client *Client) MergeEntity(ctx context.Context, dataServiceVersion Enum1, table string, partitionKey string, rowKey string, options *TableMergeEntityOptions) (TableMergeEntityResponse, error) {
	req, err := client.mergeEntityCreateRequest(ctx, dataServiceVersion, table, partitionKey, rowKey, options)
	if err != nil {
		return TableMergeEntityResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return TableMergeEntityResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return TableMergeEntityResponse{}, client.mergeEntityHandleError(resp)
	}
	return client.mergeEntityHandleResponse(resp)
}

// mergeEntityCreateRequest creates the MergeEntity request.
func (client *Client) mergeEntityCreateRequest(ctx context.Context, dataServiceVersion Enum1, table string, partitionKey string, rowKey string, options *TableMergeEntityOptions) (*policy.Request, error) {
	urlPath := "/{table}(PartitionKey='{partitionKey}',RowKey='{rowKey}')"
	if table == "" {
		return nil, errors.New("parameter table cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{table}", url.PathEscape(table))
	if partitionKey == "" {
		return nil, errors.New("parameter partitionKey cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{partitionKey}", url.PathEscape(partitionKey))
	if rowKey == "" {
		return nil, errors.New("parameter rowKey cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{rowKey}", url.PathEscape(rowKey))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Timeout != nil {
		reqQP.Set("timeout", strconv.FormatInt(int64(*options.Timeout), 10))
	}
	if options != nil && options.Format != nil {
		reqQP.Set("$format", string(*options.Format))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("x-ms-version", string(client.version))
	if options != nil && options.RequestID != nil {
		req.Raw().Header.Set("x-ms-client-request-id", *options.RequestID)
	}
	req.Raw().Header.Set("DataServiceVersion", string(dataServiceVersion))
	if options != nil && options.IfMatch != nil {
		req.Raw().Header.Set("If-Match", *options.IfMatch)
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.TableEntityProperties != nil {
		return req, runtime.MarshalAsJSON(req, options.TableEntityProperties)
	}
	return req, nil
}

// mergeEntityHandleResponse handles the MergeEntity response.
func (client *Client) mergeEntityHandleResponse(resp *http.Response) (TableMergeEntityResponse, error) {
	result := TableMergeEntityResponse{RawResponse: resp}
	if val := resp.Header.Get("x-ms-client-request-id"); val != "" {
		result.ClientRequestID = &val
	}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.RequestID = &val
	}
	if val := resp.Header.Get("x-ms-version"); val != "" {
		result.Version = &val
	}
	if val := resp.Header.Get("Date"); val != "" {
		date, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return TableMergeEntityResponse{}, err
		}
		result.Date = &date
	}
	if val := resp.Header.Get("ETag"); val != "" {
		result.ETag = &val
	}
	return result, nil
}

// mergeEntityHandleError handles the MergeEntity error response.
func (client *Client) mergeEntityHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ServiceError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Query - Queries tables under the given account.
// If the operation fails it returns a generic error.
// dataServiceVersion - Specifies the data service version.
// options - TableQueryOptions contains the optional parameters for the Client.Query method.
func (client *Client) Query(ctx context.Context, dataServiceVersion Enum1, options *TableQueryOptions) (TableQueryResponse, error) {
	req, err := client.queryCreateRequest(ctx, dataServiceVersion, options)
	if err != nil {
		return TableQueryResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return TableQueryResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return TableQueryResponse{}, client.queryHandleError(resp)
	}
	return client.queryHandleResponse(resp)
}

// queryCreateRequest creates the Query request.
func (client *Client) queryCreateRequest(ctx context.Context, dataServiceVersion Enum1, options *TableQueryOptions) (*policy.Request, error) {
	urlPath := "/Tables"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Format != nil {
		reqQP.Set("$format", string(*options.Format))
	}
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	if options != nil && options.Select != nil {
		reqQP.Set("$select", *options.Select)
	}
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	if options != nil && options.NextTableName != nil {
		reqQP.Set("NextTableName", *options.NextTableName)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("x-ms-version", string(client.version))
	if options != nil && options.RequestID != nil {
		req.Raw().Header.Set("x-ms-client-request-id", *options.RequestID)
	}
	req.Raw().Header.Set("DataServiceVersion", string(dataServiceVersion))
	req.Raw().Header.Set("Accept", "application/json;odata=minimalmetadata")
	return req, nil
}

// queryHandleResponse handles the Query response.
func (client *Client) queryHandleResponse(resp *http.Response) (TableQueryResponse, error) {
	result := TableQueryResponse{RawResponse: resp}
	if val := resp.Header.Get("x-ms-client-request-id"); val != "" {
		result.ClientRequestID = &val
	}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.RequestID = &val
	}
	if val := resp.Header.Get("x-ms-version"); val != "" {
		result.Version = &val
	}
	if val := resp.Header.Get("Date"); val != "" {
		date, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return TableQueryResponse{}, err
		}
		result.Date = &date
	}
	if val := resp.Header.Get("x-ms-continuation-NextTableName"); val != "" {
		result.XMSContinuationNextTableName = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.QueryResponse); err != nil {
		return TableQueryResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// queryHandleError handles the Query error response.
func (client *Client) queryHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// QueryEntities - Queries entities in a table.
// If the operation fails it returns the *ServiceError error type.
// dataServiceVersion - Specifies the data service version.
// table - The name of the table.
// options - TableQueryEntitiesOptions contains the optional parameters for the Client.QueryEntities method.
func (client *Client) QueryEntities(ctx context.Context, dataServiceVersion Enum1, table string, options *TableQueryEntitiesOptions) (TableQueryEntitiesResponse, error) {
	req, err := client.queryEntitiesCreateRequest(ctx, dataServiceVersion, table, options)
	if err != nil {
		return TableQueryEntitiesResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return TableQueryEntitiesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return TableQueryEntitiesResponse{}, client.queryEntitiesHandleError(resp)
	}
	return client.queryEntitiesHandleResponse(resp)
}

// queryEntitiesCreateRequest creates the QueryEntities request.
func (client *Client) queryEntitiesCreateRequest(ctx context.Context, dataServiceVersion Enum1, table string, options *TableQueryEntitiesOptions) (*policy.Request, error) {
	urlPath := "/{table}()"
	if table == "" {
		return nil, errors.New("parameter table cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{table}", url.PathEscape(table))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Timeout != nil {
		reqQP.Set("timeout", strconv.FormatInt(int64(*options.Timeout), 10))
	}
	if options != nil && options.Format != nil {
		reqQP.Set("$format", string(*options.Format))
	}
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	if options != nil && options.Select != nil {
		reqQP.Set("$select", *options.Select)
	}
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	if options != nil && options.NextPartitionKey != nil {
		reqQP.Set("NextPartitionKey", *options.NextPartitionKey)
	}
	if options != nil && options.NextRowKey != nil {
		reqQP.Set("NextRowKey", *options.NextRowKey)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("x-ms-version", string(client.version))
	if options != nil && options.RequestID != nil {
		req.Raw().Header.Set("x-ms-client-request-id", *options.RequestID)
	}
	req.Raw().Header.Set("DataServiceVersion", string(dataServiceVersion))
	req.Raw().Header.Set("Accept", "application/json;odata=minimalmetadata")
	return req, nil
}

// queryEntitiesHandleResponse handles the QueryEntities response.
func (client *Client) queryEntitiesHandleResponse(resp *http.Response) (TableQueryEntitiesResponse, error) {
	result := TableQueryEntitiesResponse{RawResponse: resp}
	if val := resp.Header.Get("x-ms-client-request-id"); val != "" {
		result.ClientRequestID = &val
	}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.RequestID = &val
	}
	if val := resp.Header.Get("x-ms-version"); val != "" {
		result.Version = &val
	}
	if val := resp.Header.Get("Date"); val != "" {
		date, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return TableQueryEntitiesResponse{}, err
		}
		result.Date = &date
	}
	if val := resp.Header.Get("x-ms-continuation-NextPartitionKey"); val != "" {
		result.XMSContinuationNextPartitionKey = &val
	}
	if val := resp.Header.Get("x-ms-continuation-NextRowKey"); val != "" {
		result.XMSContinuationNextRowKey = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.EntityQueryResponse); err != nil {
		return TableQueryEntitiesResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// queryEntitiesHandleError handles the QueryEntities error response.
func (client *Client) queryEntitiesHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ServiceError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// QueryEntityWithPartitionAndRowKey - Queries a single entity in a table.
// If the operation fails it returns the *ServiceError error type.
// dataServiceVersion - Specifies the data service version.
// table - The name of the table.
// partitionKey - The partition key of the entity.
// rowKey - The row key of the entity.
// options - TableQueryEntityWithPartitionAndRowKeyOptions contains the optional parameters for the Client.QueryEntityWithPartitionAndRowKey
// method.
func (client *Client) QueryEntityWithPartitionAndRowKey(ctx context.Context, dataServiceVersion Enum1, table string, partitionKey string, rowKey string, options *TableQueryEntityWithPartitionAndRowKeyOptions) (TableQueryEntityWithPartitionAndRowKeyResponse, error) {
	req, err := client.queryEntityWithPartitionAndRowKeyCreateRequest(ctx, dataServiceVersion, table, partitionKey, rowKey, options)
	if err != nil {
		return TableQueryEntityWithPartitionAndRowKeyResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return TableQueryEntityWithPartitionAndRowKeyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return TableQueryEntityWithPartitionAndRowKeyResponse{}, client.queryEntityWithPartitionAndRowKeyHandleError(resp)
	}
	return client.queryEntityWithPartitionAndRowKeyHandleResponse(resp)
}

// queryEntityWithPartitionAndRowKeyCreateRequest creates the QueryEntityWithPartitionAndRowKey request.
func (client *Client) queryEntityWithPartitionAndRowKeyCreateRequest(ctx context.Context, dataServiceVersion Enum1, table string, partitionKey string, rowKey string, options *TableQueryEntityWithPartitionAndRowKeyOptions) (*policy.Request, error) {
	urlPath := "/{table}(PartitionKey='{partitionKey}',RowKey='{rowKey}')"
	if table == "" {
		return nil, errors.New("parameter table cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{table}", url.PathEscape(table))
	if partitionKey == "" {
		return nil, errors.New("parameter partitionKey cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{partitionKey}", url.PathEscape(partitionKey))
	if rowKey == "" {
		return nil, errors.New("parameter rowKey cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{rowKey}", url.PathEscape(rowKey))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Timeout != nil {
		reqQP.Set("timeout", strconv.FormatInt(int64(*options.Timeout), 10))
	}
	if options != nil && options.Format != nil {
		reqQP.Set("$format", string(*options.Format))
	}
	if options != nil && options.Select != nil {
		reqQP.Set("$select", *options.Select)
	}
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("x-ms-version", string(client.version))
	if options != nil && options.RequestID != nil {
		req.Raw().Header.Set("x-ms-client-request-id", *options.RequestID)
	}
	req.Raw().Header.Set("DataServiceVersion", string(dataServiceVersion))
	req.Raw().Header.Set("Accept", "application/json;odata=minimalmetadata")
	return req, nil
}

// queryEntityWithPartitionAndRowKeyHandleResponse handles the QueryEntityWithPartitionAndRowKey response.
func (client *Client) queryEntityWithPartitionAndRowKeyHandleResponse(resp *http.Response) (TableQueryEntityWithPartitionAndRowKeyResponse, error) {
	result := TableQueryEntityWithPartitionAndRowKeyResponse{RawResponse: resp}
	if val := resp.Header.Get("x-ms-client-request-id"); val != "" {
		result.ClientRequestID = &val
	}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.RequestID = &val
	}
	if val := resp.Header.Get("x-ms-version"); val != "" {
		result.Version = &val
	}
	if val := resp.Header.Get("Date"); val != "" {
		date, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return TableQueryEntityWithPartitionAndRowKeyResponse{}, err
		}
		result.Date = &date
	}
	if val := resp.Header.Get("ETag"); val != "" {
		result.ETag = &val
	}
	if val := resp.Header.Get("x-ms-continuation-NextPartitionKey"); val != "" {
		result.XMSContinuationNextPartitionKey = &val
	}
	if val := resp.Header.Get("x-ms-continuation-NextRowKey"); val != "" {
		result.XMSContinuationNextRowKey = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return TableQueryEntityWithPartitionAndRowKeyResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// queryEntityWithPartitionAndRowKeyHandleError handles the QueryEntityWithPartitionAndRowKey error response.
func (client *Client) queryEntityWithPartitionAndRowKeyHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ServiceError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// SetAccessPolicy - Sets stored access policies for the table that may be used with Shared Access Signatures.
// If the operation fails it returns the *ServiceError error type.
// table - The name of the table.
// comp - Required query string to handle stored access policies for the table that may be used with Shared Access Signatures.
// options - TableSetAccessPolicyOptions contains the optional parameters for the Client.SetAccessPolicy method.
func (client *Client) SetAccessPolicy(ctx context.Context, table string, comp Enum4, options *TableSetAccessPolicyOptions) (TableSetAccessPolicyResponse, error) {
	req, err := client.setAccessPolicyCreateRequest(ctx, table, comp, options)
	if err != nil {
		return TableSetAccessPolicyResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return TableSetAccessPolicyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return TableSetAccessPolicyResponse{}, client.setAccessPolicyHandleError(resp)
	}
	return client.setAccessPolicyHandleResponse(resp)
}

// setAccessPolicyCreateRequest creates the SetAccessPolicy request.
func (client *Client) setAccessPolicyCreateRequest(ctx context.Context, table string, comp Enum4, options *TableSetAccessPolicyOptions) (*policy.Request, error) {
	urlPath := "/{table}"
	if table == "" {
		return nil, errors.New("parameter table cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{table}", url.PathEscape(table))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Timeout != nil {
		reqQP.Set("timeout", strconv.FormatInt(int64(*options.Timeout), 10))
	}
	reqQP.Set("comp", string(comp))
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("x-ms-version", string(client.version))
	if options != nil && options.RequestID != nil {
		req.Raw().Header.Set("x-ms-client-request-id", *options.RequestID)
	}
	req.Raw().Header.Set("Accept", "application/xml")
	type wrapper struct {
		XMLName  xml.Name             `xml:"SignedIdentifiers"`
		TableACL *[]*SignedIdentifier `xml:"SignedIdentifier"`
	}
	if options != nil && options.TableACL != nil {
		return req, runtime.MarshalAsXML(req, wrapper{TableACL: &options.TableACL})
	}
	return req, nil
}

// setAccessPolicyHandleResponse handles the SetAccessPolicy response.
func (client *Client) setAccessPolicyHandleResponse(resp *http.Response) (TableSetAccessPolicyResponse, error) {
	result := TableSetAccessPolicyResponse{RawResponse: resp}
	if val := resp.Header.Get("x-ms-client-request-id"); val != "" {
		result.ClientRequestID = &val
	}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.RequestID = &val
	}
	if val := resp.Header.Get("x-ms-version"); val != "" {
		result.Version = &val
	}
	if val := resp.Header.Get("Date"); val != "" {
		date, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return TableSetAccessPolicyResponse{}, err
		}
		result.Date = &date
	}
	return result, nil
}

// setAccessPolicyHandleError handles the SetAccessPolicy error response.
func (client *Client) setAccessPolicyHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ServiceError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// UpdateEntity - Update entity in a table.
// If the operation fails it returns the *ServiceError error type.
// dataServiceVersion - Specifies the data service version.
// table - The name of the table.
// partitionKey - The partition key of the entity.
// rowKey - The row key of the entity.
// options - TableUpdateEntityOptions contains the optional parameters for the Client.UpdateEntity method.
func (client *Client) UpdateEntity(ctx context.Context, dataServiceVersion Enum1, table string, partitionKey string, rowKey string, options *TableUpdateEntityOptions) (TableUpdateEntityResponse, error) {
	req, err := client.updateEntityCreateRequest(ctx, dataServiceVersion, table, partitionKey, rowKey, options)
	if err != nil {
		return TableUpdateEntityResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return TableUpdateEntityResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return TableUpdateEntityResponse{}, client.updateEntityHandleError(resp)
	}
	return client.updateEntityHandleResponse(resp)
}

// updateEntityCreateRequest creates the UpdateEntity request.
func (client *Client) updateEntityCreateRequest(ctx context.Context, dataServiceVersion Enum1, table string, partitionKey string, rowKey string, options *TableUpdateEntityOptions) (*policy.Request, error) {
	urlPath := "/{table}(PartitionKey='{partitionKey}',RowKey='{rowKey}')"
	if table == "" {
		return nil, errors.New("parameter table cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{table}", url.PathEscape(table))
	if partitionKey == "" {
		return nil, errors.New("parameter partitionKey cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{partitionKey}", url.PathEscape(partitionKey))
	if rowKey == "" {
		return nil, errors.New("parameter rowKey cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{rowKey}", url.PathEscape(rowKey))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Timeout != nil {
		reqQP.Set("timeout", strconv.FormatInt(int64(*options.Timeout), 10))
	}
	if options != nil && options.Format != nil {
		reqQP.Set("$format", string(*options.Format))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("x-ms-version", string(client.version))
	if options != nil && options.RequestID != nil {
		req.Raw().Header.Set("x-ms-client-request-id", *options.RequestID)
	}
	req.Raw().Header.Set("DataServiceVersion", string(dataServiceVersion))
	if options != nil && options.IfMatch != nil {
		req.Raw().Header.Set("If-Match", *options.IfMatch)
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.TableEntityProperties != nil {
		return req, runtime.MarshalAsJSON(req, options.TableEntityProperties)
	}
	return req, nil
}

// updateEntityHandleResponse handles the UpdateEntity response.
func (client *Client) updateEntityHandleResponse(resp *http.Response) (TableUpdateEntityResponse, error) {
	result := TableUpdateEntityResponse{RawResponse: resp}
	if val := resp.Header.Get("x-ms-client-request-id"); val != "" {
		result.ClientRequestID = &val
	}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.RequestID = &val
	}
	if val := resp.Header.Get("x-ms-version"); val != "" {
		result.Version = &val
	}
	if val := resp.Header.Get("Date"); val != "" {
		date, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return TableUpdateEntityResponse{}, err
		}
		result.Date = &date
	}
	if val := resp.Header.Get("ETag"); val != "" {
		result.ETag = &val
	}
	return result, nil
}

// updateEntityHandleError handles the UpdateEntity error response.
func (client *Client) updateEntityHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ServiceError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
