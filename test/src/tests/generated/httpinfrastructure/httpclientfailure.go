package httpinfrastructuregroup

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"net/http"
)

// HTTPClientFailureClient is the test Infrastructure for AutoRest
type HTTPClientFailureClient struct {
	BaseClient
}

// NewHTTPClientFailureClient creates an instance of the HTTPClientFailureClient client.
func NewHTTPClientFailureClient() HTTPClientFailureClient {
	return NewHTTPClientFailureClientWithBaseURI(DefaultBaseURI)
}

// NewHTTPClientFailureClientWithBaseURI creates an instance of the HTTPClientFailureClient client.
func NewHTTPClientFailureClientWithBaseURI(baseURI string) HTTPClientFailureClient {
	return HTTPClientFailureClient{NewWithBaseURI(baseURI)}
}

// Delete400 return 400 status code - should be represented in the client as an error
// Parameters:
// booleanValue - simple boolean value true
func (client HTTPClientFailureClient) Delete400(ctx context.Context, booleanValue *bool) (result Error, err error) {
	req, err := client.Delete400Preparer(ctx, booleanValue)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Delete400", nil, "Failure preparing request")
		return
	}

	resp, err := client.Delete400Sender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Delete400", resp, "Failure sending request")
		return
	}

	result, err = client.Delete400Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Delete400", resp, "Failure responding to request")
	}

	return
}

// Delete400Preparer prepares the Delete400 request.
func (client HTTPClientFailureClient) Delete400Preparer(ctx context.Context, booleanValue *bool) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/failure/client/400"))
	if booleanValue != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(booleanValue))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Delete400Sender sends the Delete400 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPClientFailureClient) Delete400Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Delete400Responder handles the response to the Delete400 request. The method always
// closes the http.Response Body.
func (client HTTPClientFailureClient) Delete400Responder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Delete407 return 407 status code - should be represented in the client as an error
// Parameters:
// booleanValue - simple boolean value true
func (client HTTPClientFailureClient) Delete407(ctx context.Context, booleanValue *bool) (result Error, err error) {
	req, err := client.Delete407Preparer(ctx, booleanValue)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Delete407", nil, "Failure preparing request")
		return
	}

	resp, err := client.Delete407Sender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Delete407", resp, "Failure sending request")
		return
	}

	result, err = client.Delete407Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Delete407", resp, "Failure responding to request")
	}

	return
}

// Delete407Preparer prepares the Delete407 request.
func (client HTTPClientFailureClient) Delete407Preparer(ctx context.Context, booleanValue *bool) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/failure/client/407"))
	if booleanValue != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(booleanValue))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Delete407Sender sends the Delete407 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPClientFailureClient) Delete407Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Delete407Responder handles the response to the Delete407 request. The method always
// closes the http.Response Body.
func (client HTTPClientFailureClient) Delete407Responder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Delete417 return 417 status code - should be represented in the client as an error
// Parameters:
// booleanValue - simple boolean value true
func (client HTTPClientFailureClient) Delete417(ctx context.Context, booleanValue *bool) (result Error, err error) {
	req, err := client.Delete417Preparer(ctx, booleanValue)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Delete417", nil, "Failure preparing request")
		return
	}

	resp, err := client.Delete417Sender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Delete417", resp, "Failure sending request")
		return
	}

	result, err = client.Delete417Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Delete417", resp, "Failure responding to request")
	}

	return
}

// Delete417Preparer prepares the Delete417 request.
func (client HTTPClientFailureClient) Delete417Preparer(ctx context.Context, booleanValue *bool) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/failure/client/417"))
	if booleanValue != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(booleanValue))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Delete417Sender sends the Delete417 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPClientFailureClient) Delete417Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Delete417Responder handles the response to the Delete417 request. The method always
// closes the http.Response Body.
func (client HTTPClientFailureClient) Delete417Responder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get400 return 400 status code - should be represented in the client as an error
func (client HTTPClientFailureClient) Get400(ctx context.Context) (result Error, err error) {
	req, err := client.Get400Preparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Get400", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get400Sender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Get400", resp, "Failure sending request")
		return
	}

	result, err = client.Get400Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Get400", resp, "Failure responding to request")
	}

	return
}

// Get400Preparer prepares the Get400 request.
func (client HTTPClientFailureClient) Get400Preparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/failure/client/400"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get400Sender sends the Get400 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPClientFailureClient) Get400Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Get400Responder handles the response to the Get400 request. The method always
// closes the http.Response Body.
func (client HTTPClientFailureClient) Get400Responder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get402 return 402 status code - should be represented in the client as an error
func (client HTTPClientFailureClient) Get402(ctx context.Context) (result Error, err error) {
	req, err := client.Get402Preparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Get402", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get402Sender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Get402", resp, "Failure sending request")
		return
	}

	result, err = client.Get402Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Get402", resp, "Failure responding to request")
	}

	return
}

// Get402Preparer prepares the Get402 request.
func (client HTTPClientFailureClient) Get402Preparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/failure/client/402"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get402Sender sends the Get402 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPClientFailureClient) Get402Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Get402Responder handles the response to the Get402 request. The method always
// closes the http.Response Body.
func (client HTTPClientFailureClient) Get402Responder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get403 return 403 status code - should be represented in the client as an error
func (client HTTPClientFailureClient) Get403(ctx context.Context) (result Error, err error) {
	req, err := client.Get403Preparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Get403", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get403Sender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Get403", resp, "Failure sending request")
		return
	}

	result, err = client.Get403Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Get403", resp, "Failure responding to request")
	}

	return
}

// Get403Preparer prepares the Get403 request.
func (client HTTPClientFailureClient) Get403Preparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/failure/client/403"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get403Sender sends the Get403 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPClientFailureClient) Get403Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Get403Responder handles the response to the Get403 request. The method always
// closes the http.Response Body.
func (client HTTPClientFailureClient) Get403Responder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get411 return 411 status code - should be represented in the client as an error
func (client HTTPClientFailureClient) Get411(ctx context.Context) (result Error, err error) {
	req, err := client.Get411Preparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Get411", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get411Sender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Get411", resp, "Failure sending request")
		return
	}

	result, err = client.Get411Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Get411", resp, "Failure responding to request")
	}

	return
}

// Get411Preparer prepares the Get411 request.
func (client HTTPClientFailureClient) Get411Preparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/failure/client/411"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get411Sender sends the Get411 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPClientFailureClient) Get411Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Get411Responder handles the response to the Get411 request. The method always
// closes the http.Response Body.
func (client HTTPClientFailureClient) Get411Responder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get412 return 412 status code - should be represented in the client as an error
func (client HTTPClientFailureClient) Get412(ctx context.Context) (result Error, err error) {
	req, err := client.Get412Preparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Get412", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get412Sender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Get412", resp, "Failure sending request")
		return
	}

	result, err = client.Get412Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Get412", resp, "Failure responding to request")
	}

	return
}

// Get412Preparer prepares the Get412 request.
func (client HTTPClientFailureClient) Get412Preparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/failure/client/412"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get412Sender sends the Get412 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPClientFailureClient) Get412Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Get412Responder handles the response to the Get412 request. The method always
// closes the http.Response Body.
func (client HTTPClientFailureClient) Get412Responder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get416 return 416 status code - should be represented in the client as an error
func (client HTTPClientFailureClient) Get416(ctx context.Context) (result Error, err error) {
	req, err := client.Get416Preparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Get416", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get416Sender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Get416", resp, "Failure sending request")
		return
	}

	result, err = client.Get416Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Get416", resp, "Failure responding to request")
	}

	return
}

// Get416Preparer prepares the Get416 request.
func (client HTTPClientFailureClient) Get416Preparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/failure/client/416"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get416Sender sends the Get416 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPClientFailureClient) Get416Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Get416Responder handles the response to the Get416 request. The method always
// closes the http.Response Body.
func (client HTTPClientFailureClient) Get416Responder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Head400 return 400 status code - should be represented in the client as an error
func (client HTTPClientFailureClient) Head400(ctx context.Context) (result Error, err error) {
	req, err := client.Head400Preparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Head400", nil, "Failure preparing request")
		return
	}

	resp, err := client.Head400Sender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Head400", resp, "Failure sending request")
		return
	}

	result, err = client.Head400Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Head400", resp, "Failure responding to request")
	}

	return
}

// Head400Preparer prepares the Head400 request.
func (client HTTPClientFailureClient) Head400Preparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsHead(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/failure/client/400"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Head400Sender sends the Head400 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPClientFailureClient) Head400Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Head400Responder handles the response to the Head400 request. The method always
// closes the http.Response Body.
func (client HTTPClientFailureClient) Head400Responder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Head401 return 401 status code - should be represented in the client as an error
func (client HTTPClientFailureClient) Head401(ctx context.Context) (result Error, err error) {
	req, err := client.Head401Preparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Head401", nil, "Failure preparing request")
		return
	}

	resp, err := client.Head401Sender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Head401", resp, "Failure sending request")
		return
	}

	result, err = client.Head401Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Head401", resp, "Failure responding to request")
	}

	return
}

// Head401Preparer prepares the Head401 request.
func (client HTTPClientFailureClient) Head401Preparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsHead(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/failure/client/401"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Head401Sender sends the Head401 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPClientFailureClient) Head401Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Head401Responder handles the response to the Head401 request. The method always
// closes the http.Response Body.
func (client HTTPClientFailureClient) Head401Responder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Head410 return 410 status code - should be represented in the client as an error
func (client HTTPClientFailureClient) Head410(ctx context.Context) (result Error, err error) {
	req, err := client.Head410Preparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Head410", nil, "Failure preparing request")
		return
	}

	resp, err := client.Head410Sender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Head410", resp, "Failure sending request")
		return
	}

	result, err = client.Head410Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Head410", resp, "Failure responding to request")
	}

	return
}

// Head410Preparer prepares the Head410 request.
func (client HTTPClientFailureClient) Head410Preparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsHead(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/failure/client/410"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Head410Sender sends the Head410 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPClientFailureClient) Head410Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Head410Responder handles the response to the Head410 request. The method always
// closes the http.Response Body.
func (client HTTPClientFailureClient) Head410Responder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Head429 return 429 status code - should be represented in the client as an error
func (client HTTPClientFailureClient) Head429(ctx context.Context) (result Error, err error) {
	req, err := client.Head429Preparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Head429", nil, "Failure preparing request")
		return
	}

	resp, err := client.Head429Sender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Head429", resp, "Failure sending request")
		return
	}

	result, err = client.Head429Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Head429", resp, "Failure responding to request")
	}

	return
}

// Head429Preparer prepares the Head429 request.
func (client HTTPClientFailureClient) Head429Preparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsHead(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/failure/client/429"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Head429Sender sends the Head429 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPClientFailureClient) Head429Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Head429Responder handles the response to the Head429 request. The method always
// closes the http.Response Body.
func (client HTTPClientFailureClient) Head429Responder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Patch400 return 400 status code - should be represented in the client as an error
// Parameters:
// booleanValue - simple boolean value true
func (client HTTPClientFailureClient) Patch400(ctx context.Context, booleanValue *bool) (result Error, err error) {
	req, err := client.Patch400Preparer(ctx, booleanValue)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Patch400", nil, "Failure preparing request")
		return
	}

	resp, err := client.Patch400Sender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Patch400", resp, "Failure sending request")
		return
	}

	result, err = client.Patch400Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Patch400", resp, "Failure responding to request")
	}

	return
}

// Patch400Preparer prepares the Patch400 request.
func (client HTTPClientFailureClient) Patch400Preparer(ctx context.Context, booleanValue *bool) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/failure/client/400"))
	if booleanValue != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(booleanValue))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Patch400Sender sends the Patch400 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPClientFailureClient) Patch400Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Patch400Responder handles the response to the Patch400 request. The method always
// closes the http.Response Body.
func (client HTTPClientFailureClient) Patch400Responder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Patch405 return 405 status code - should be represented in the client as an error
// Parameters:
// booleanValue - simple boolean value true
func (client HTTPClientFailureClient) Patch405(ctx context.Context, booleanValue *bool) (result Error, err error) {
	req, err := client.Patch405Preparer(ctx, booleanValue)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Patch405", nil, "Failure preparing request")
		return
	}

	resp, err := client.Patch405Sender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Patch405", resp, "Failure sending request")
		return
	}

	result, err = client.Patch405Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Patch405", resp, "Failure responding to request")
	}

	return
}

// Patch405Preparer prepares the Patch405 request.
func (client HTTPClientFailureClient) Patch405Preparer(ctx context.Context, booleanValue *bool) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/failure/client/405"))
	if booleanValue != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(booleanValue))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Patch405Sender sends the Patch405 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPClientFailureClient) Patch405Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Patch405Responder handles the response to the Patch405 request. The method always
// closes the http.Response Body.
func (client HTTPClientFailureClient) Patch405Responder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Patch414 return 414 status code - should be represented in the client as an error
// Parameters:
// booleanValue - simple boolean value true
func (client HTTPClientFailureClient) Patch414(ctx context.Context, booleanValue *bool) (result Error, err error) {
	req, err := client.Patch414Preparer(ctx, booleanValue)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Patch414", nil, "Failure preparing request")
		return
	}

	resp, err := client.Patch414Sender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Patch414", resp, "Failure sending request")
		return
	}

	result, err = client.Patch414Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Patch414", resp, "Failure responding to request")
	}

	return
}

// Patch414Preparer prepares the Patch414 request.
func (client HTTPClientFailureClient) Patch414Preparer(ctx context.Context, booleanValue *bool) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/failure/client/414"))
	if booleanValue != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(booleanValue))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Patch414Sender sends the Patch414 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPClientFailureClient) Patch414Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Patch414Responder handles the response to the Patch414 request. The method always
// closes the http.Response Body.
func (client HTTPClientFailureClient) Patch414Responder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Post400 return 400 status code - should be represented in the client as an error
// Parameters:
// booleanValue - simple boolean value true
func (client HTTPClientFailureClient) Post400(ctx context.Context, booleanValue *bool) (result Error, err error) {
	req, err := client.Post400Preparer(ctx, booleanValue)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Post400", nil, "Failure preparing request")
		return
	}

	resp, err := client.Post400Sender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Post400", resp, "Failure sending request")
		return
	}

	result, err = client.Post400Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Post400", resp, "Failure responding to request")
	}

	return
}

// Post400Preparer prepares the Post400 request.
func (client HTTPClientFailureClient) Post400Preparer(ctx context.Context, booleanValue *bool) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/failure/client/400"))
	if booleanValue != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(booleanValue))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Post400Sender sends the Post400 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPClientFailureClient) Post400Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Post400Responder handles the response to the Post400 request. The method always
// closes the http.Response Body.
func (client HTTPClientFailureClient) Post400Responder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Post406 return 406 status code - should be represented in the client as an error
// Parameters:
// booleanValue - simple boolean value true
func (client HTTPClientFailureClient) Post406(ctx context.Context, booleanValue *bool) (result Error, err error) {
	req, err := client.Post406Preparer(ctx, booleanValue)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Post406", nil, "Failure preparing request")
		return
	}

	resp, err := client.Post406Sender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Post406", resp, "Failure sending request")
		return
	}

	result, err = client.Post406Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Post406", resp, "Failure responding to request")
	}

	return
}

// Post406Preparer prepares the Post406 request.
func (client HTTPClientFailureClient) Post406Preparer(ctx context.Context, booleanValue *bool) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/failure/client/406"))
	if booleanValue != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(booleanValue))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Post406Sender sends the Post406 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPClientFailureClient) Post406Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Post406Responder handles the response to the Post406 request. The method always
// closes the http.Response Body.
func (client HTTPClientFailureClient) Post406Responder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Post415 return 415 status code - should be represented in the client as an error
// Parameters:
// booleanValue - simple boolean value true
func (client HTTPClientFailureClient) Post415(ctx context.Context, booleanValue *bool) (result Error, err error) {
	req, err := client.Post415Preparer(ctx, booleanValue)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Post415", nil, "Failure preparing request")
		return
	}

	resp, err := client.Post415Sender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Post415", resp, "Failure sending request")
		return
	}

	result, err = client.Post415Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Post415", resp, "Failure responding to request")
	}

	return
}

// Post415Preparer prepares the Post415 request.
func (client HTTPClientFailureClient) Post415Preparer(ctx context.Context, booleanValue *bool) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/failure/client/415"))
	if booleanValue != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(booleanValue))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Post415Sender sends the Post415 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPClientFailureClient) Post415Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Post415Responder handles the response to the Post415 request. The method always
// closes the http.Response Body.
func (client HTTPClientFailureClient) Post415Responder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Put400 return 400 status code - should be represented in the client as an error
// Parameters:
// booleanValue - simple boolean value true
func (client HTTPClientFailureClient) Put400(ctx context.Context, booleanValue *bool) (result Error, err error) {
	req, err := client.Put400Preparer(ctx, booleanValue)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Put400", nil, "Failure preparing request")
		return
	}

	resp, err := client.Put400Sender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Put400", resp, "Failure sending request")
		return
	}

	result, err = client.Put400Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Put400", resp, "Failure responding to request")
	}

	return
}

// Put400Preparer prepares the Put400 request.
func (client HTTPClientFailureClient) Put400Preparer(ctx context.Context, booleanValue *bool) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/failure/client/400"))
	if booleanValue != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(booleanValue))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Put400Sender sends the Put400 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPClientFailureClient) Put400Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Put400Responder handles the response to the Put400 request. The method always
// closes the http.Response Body.
func (client HTTPClientFailureClient) Put400Responder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Put404 return 404 status code - should be represented in the client as an error
// Parameters:
// booleanValue - simple boolean value true
func (client HTTPClientFailureClient) Put404(ctx context.Context, booleanValue *bool) (result Error, err error) {
	req, err := client.Put404Preparer(ctx, booleanValue)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Put404", nil, "Failure preparing request")
		return
	}

	resp, err := client.Put404Sender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Put404", resp, "Failure sending request")
		return
	}

	result, err = client.Put404Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Put404", resp, "Failure responding to request")
	}

	return
}

// Put404Preparer prepares the Put404 request.
func (client HTTPClientFailureClient) Put404Preparer(ctx context.Context, booleanValue *bool) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/failure/client/404"))
	if booleanValue != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(booleanValue))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Put404Sender sends the Put404 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPClientFailureClient) Put404Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Put404Responder handles the response to the Put404 request. The method always
// closes the http.Response Body.
func (client HTTPClientFailureClient) Put404Responder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Put409 return 409 status code - should be represented in the client as an error
// Parameters:
// booleanValue - simple boolean value true
func (client HTTPClientFailureClient) Put409(ctx context.Context, booleanValue *bool) (result Error, err error) {
	req, err := client.Put409Preparer(ctx, booleanValue)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Put409", nil, "Failure preparing request")
		return
	}

	resp, err := client.Put409Sender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Put409", resp, "Failure sending request")
		return
	}

	result, err = client.Put409Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Put409", resp, "Failure responding to request")
	}

	return
}

// Put409Preparer prepares the Put409 request.
func (client HTTPClientFailureClient) Put409Preparer(ctx context.Context, booleanValue *bool) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/failure/client/409"))
	if booleanValue != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(booleanValue))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Put409Sender sends the Put409 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPClientFailureClient) Put409Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Put409Responder handles the response to the Put409 request. The method always
// closes the http.Response Body.
func (client HTTPClientFailureClient) Put409Responder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Put413 return 413 status code - should be represented in the client as an error
// Parameters:
// booleanValue - simple boolean value true
func (client HTTPClientFailureClient) Put413(ctx context.Context, booleanValue *bool) (result Error, err error) {
	req, err := client.Put413Preparer(ctx, booleanValue)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Put413", nil, "Failure preparing request")
		return
	}

	resp, err := client.Put413Sender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Put413", resp, "Failure sending request")
		return
	}

	result, err = client.Put413Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPClientFailureClient", "Put413", resp, "Failure responding to request")
	}

	return
}

// Put413Preparer prepares the Put413 request.
func (client HTTPClientFailureClient) Put413Preparer(ctx context.Context, booleanValue *bool) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/failure/client/413"))
	if booleanValue != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(booleanValue))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Put413Sender sends the Put413 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPClientFailureClient) Put413Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Put413Responder handles the response to the Put413 request. The method always
// closes the http.Response Body.
func (client HTTPClientFailureClient) Put413Responder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
