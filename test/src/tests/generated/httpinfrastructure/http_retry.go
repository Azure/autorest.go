package httpinfrastructuregroup

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"bytes"
	"context"
	"encoding/json"
	"net/http"
	"tests/pipeline"
)

// HTTPRetryClient is the test Infrastructure for AutoRest
type HTTPRetryClient struct {
	ManagementClient
}

// NewHTTPRetryClient creates an instance of the HTTPRetryClient client.
func NewHTTPRetryClient(p pipeline.Pipeline) HTTPRetryClient {
	return HTTPRetryClient{NewManagementClient(p)}
}

// Delete503 return 503 status code, then 200 after retry
//
// booleanValue is simple boolean value true
func (client HTTPRetryClient) Delete503(ctx context.Context, booleanValue *bool) (*http.Response, error) {
	req, err := client.delete503Preparer(booleanValue)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.delete503Responder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// delete503Preparer prepares the Delete503 request.
func (client HTTPRetryClient) delete503Preparer(booleanValue *bool) (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/retry/503"
	req, err := pipeline.NewRequest("DELETE", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(booleanValue)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// delete503Responder handles the response to the Delete503 request.
func (client HTTPRetryClient) delete503Responder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	return resp, err
}

// Get502 return 502 status code, then 200 after retry
func (client HTTPRetryClient) Get502(ctx context.Context) (*http.Response, error) {
	req, err := client.get502Preparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.get502Responder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// get502Preparer prepares the Get502 request.
func (client HTTPRetryClient) get502Preparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/retry/502"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// get502Responder handles the response to the Get502 request.
func (client HTTPRetryClient) get502Responder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	return resp, err
}

// Head408 return 408 status code, then 200 after retry
func (client HTTPRetryClient) Head408(ctx context.Context) (*http.Response, error) {
	req, err := client.head408Preparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.head408Responder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// head408Preparer prepares the Head408 request.
func (client HTTPRetryClient) head408Preparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/retry/408"
	req, err := pipeline.NewRequest("HEAD", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// head408Responder handles the response to the Head408 request.
func (client HTTPRetryClient) head408Responder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	return resp, err
}

// Patch500 return 500 status code, then 200 after retry
//
// booleanValue is simple boolean value true
func (client HTTPRetryClient) Patch500(ctx context.Context, booleanValue *bool) (*http.Response, error) {
	req, err := client.patch500Preparer(booleanValue)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.patch500Responder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// patch500Preparer prepares the Patch500 request.
func (client HTTPRetryClient) patch500Preparer(booleanValue *bool) (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/retry/500"
	req, err := pipeline.NewRequest("PATCH", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(booleanValue)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// patch500Responder handles the response to the Patch500 request.
func (client HTTPRetryClient) patch500Responder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	return resp, err
}

// Patch504 return 504 status code, then 200 after retry
//
// booleanValue is simple boolean value true
func (client HTTPRetryClient) Patch504(ctx context.Context, booleanValue *bool) (*http.Response, error) {
	req, err := client.patch504Preparer(booleanValue)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.patch504Responder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// patch504Preparer prepares the Patch504 request.
func (client HTTPRetryClient) patch504Preparer(booleanValue *bool) (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/retry/504"
	req, err := pipeline.NewRequest("PATCH", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(booleanValue)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// patch504Responder handles the response to the Patch504 request.
func (client HTTPRetryClient) patch504Responder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	return resp, err
}

// Post503 return 503 status code, then 200 after retry
//
// booleanValue is simple boolean value true
func (client HTTPRetryClient) Post503(ctx context.Context, booleanValue *bool) (*http.Response, error) {
	req, err := client.post503Preparer(booleanValue)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.post503Responder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// post503Preparer prepares the Post503 request.
func (client HTTPRetryClient) post503Preparer(booleanValue *bool) (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/retry/503"
	req, err := pipeline.NewRequest("POST", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(booleanValue)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// post503Responder handles the response to the Post503 request.
func (client HTTPRetryClient) post503Responder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	return resp, err
}

// Put500 return 500 status code, then 200 after retry
//
// booleanValue is simple boolean value true
func (client HTTPRetryClient) Put500(ctx context.Context, booleanValue *bool) (*http.Response, error) {
	req, err := client.put500Preparer(booleanValue)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.put500Responder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// put500Preparer prepares the Put500 request.
func (client HTTPRetryClient) put500Preparer(booleanValue *bool) (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/retry/500"
	req, err := pipeline.NewRequest("PUT", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(booleanValue)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// put500Responder handles the response to the Put500 request.
func (client HTTPRetryClient) put500Responder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	return resp, err
}

// Put504 return 504 status code, then 200 after retry
//
// booleanValue is simple boolean value true
func (client HTTPRetryClient) Put504(ctx context.Context, booleanValue *bool) (*http.Response, error) {
	req, err := client.put504Preparer(booleanValue)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.put504Responder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// put504Preparer prepares the Put504 request.
func (client HTTPRetryClient) put504Preparer(booleanValue *bool) (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/retry/504"
	req, err := pipeline.NewRequest("PUT", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(booleanValue)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// put504Responder handles the response to the Put504 request.
func (client HTTPRetryClient) put504Responder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	return resp, err
}
