package httpinfrastructuregroup

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"encoding/json"
	"github.com/Azure/azure-pipeline-go/pipeline"
	"io"
	"io/ioutil"
	"net/http"
)

// MultipleResponsesClient is the test Infrastructure for AutoRest
type MultipleResponsesClient struct {
	ManagementClient
}

// NewMultipleResponsesClient creates an instance of the MultipleResponsesClient client.
func NewMultipleResponsesClient(p pipeline.Pipeline) MultipleResponsesClient {
	return MultipleResponsesClient{NewManagementClient(p)}
}

// Get200Model201ModelDefaultError200Valid send a 200 response with valid payload: {'statusCode': '200'}
func (client MultipleResponsesClient) Get200Model201ModelDefaultError200Valid(ctx context.Context) (*A, error) {
	req, err := client.get200Model201ModelDefaultError200ValidPreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.get200Model201ModelDefaultError200ValidResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*A), err
}

// get200Model201ModelDefaultError200ValidPreparer prepares the Get200Model201ModelDefaultError200Valid request.
func (client MultipleResponsesClient) get200Model201ModelDefaultError200ValidPreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/200/A/201/B/default/Error/response/200/valid"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// get200Model201ModelDefaultError200ValidResponder handles the response to the Get200Model201ModelDefaultError200Valid request.
func (client MultipleResponsesClient) get200Model201ModelDefaultError200ValidResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusCreated)
	if resp == nil {
		return nil, err
	}
	result := &A{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, err
	}
	if len(b) > 0 {
		b = removeBOM(b)
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Get200Model201ModelDefaultError201Valid send a 201 response with valid payload: {'statusCode': '201',
// 'textStatusCode': 'Created'}
func (client MultipleResponsesClient) Get200Model201ModelDefaultError201Valid(ctx context.Context) (*A, error) {
	req, err := client.get200Model201ModelDefaultError201ValidPreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.get200Model201ModelDefaultError201ValidResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*A), err
}

// get200Model201ModelDefaultError201ValidPreparer prepares the Get200Model201ModelDefaultError201Valid request.
func (client MultipleResponsesClient) get200Model201ModelDefaultError201ValidPreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/200/A/201/B/default/Error/response/201/valid"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// get200Model201ModelDefaultError201ValidResponder handles the response to the Get200Model201ModelDefaultError201Valid request.
func (client MultipleResponsesClient) get200Model201ModelDefaultError201ValidResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusCreated)
	if resp == nil {
		return nil, err
	}
	result := &A{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, err
	}
	if len(b) > 0 {
		b = removeBOM(b)
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Get200Model201ModelDefaultError400Valid send a 400 response with valid payload: {'code': '400', 'message': 'client
// error'}
func (client MultipleResponsesClient) Get200Model201ModelDefaultError400Valid(ctx context.Context) (*A, error) {
	req, err := client.get200Model201ModelDefaultError400ValidPreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.get200Model201ModelDefaultError400ValidResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*A), err
}

// get200Model201ModelDefaultError400ValidPreparer prepares the Get200Model201ModelDefaultError400Valid request.
func (client MultipleResponsesClient) get200Model201ModelDefaultError400ValidPreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/200/A/201/B/default/Error/response/400/valid"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// get200Model201ModelDefaultError400ValidResponder handles the response to the Get200Model201ModelDefaultError400Valid request.
func (client MultipleResponsesClient) get200Model201ModelDefaultError400ValidResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusCreated)
	if resp == nil {
		return nil, err
	}
	result := &A{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, err
	}
	if len(b) > 0 {
		b = removeBOM(b)
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Get200Model204NoModelDefaultError200Valid send a 200 response with valid payload: {'statusCode': '200'}
func (client MultipleResponsesClient) Get200Model204NoModelDefaultError200Valid(ctx context.Context) (*A, error) {
	req, err := client.get200Model204NoModelDefaultError200ValidPreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.get200Model204NoModelDefaultError200ValidResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*A), err
}

// get200Model204NoModelDefaultError200ValidPreparer prepares the Get200Model204NoModelDefaultError200Valid request.
func (client MultipleResponsesClient) get200Model204NoModelDefaultError200ValidPreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/200/A/204/none/default/Error/response/200/valid"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// get200Model204NoModelDefaultError200ValidResponder handles the response to the Get200Model204NoModelDefaultError200Valid request.
func (client MultipleResponsesClient) get200Model204NoModelDefaultError200ValidResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusNoContent)
	if resp == nil {
		return nil, err
	}
	result := &A{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, err
	}
	if len(b) > 0 {
		b = removeBOM(b)
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Get200Model204NoModelDefaultError201Invalid send a 201 response with valid payload: {'statusCode': '201'}
func (client MultipleResponsesClient) Get200Model204NoModelDefaultError201Invalid(ctx context.Context) (*A, error) {
	req, err := client.get200Model204NoModelDefaultError201InvalidPreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.get200Model204NoModelDefaultError201InvalidResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*A), err
}

// get200Model204NoModelDefaultError201InvalidPreparer prepares the Get200Model204NoModelDefaultError201Invalid request.
func (client MultipleResponsesClient) get200Model204NoModelDefaultError201InvalidPreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/200/A/204/none/default/Error/response/201/valid"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// get200Model204NoModelDefaultError201InvalidResponder handles the response to the Get200Model204NoModelDefaultError201Invalid request.
func (client MultipleResponsesClient) get200Model204NoModelDefaultError201InvalidResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusNoContent)
	if resp == nil {
		return nil, err
	}
	result := &A{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, err
	}
	if len(b) > 0 {
		b = removeBOM(b)
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Get200Model204NoModelDefaultError202None send a 202 response with no payload:
func (client MultipleResponsesClient) Get200Model204NoModelDefaultError202None(ctx context.Context) (*A, error) {
	req, err := client.get200Model204NoModelDefaultError202NonePreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.get200Model204NoModelDefaultError202NoneResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*A), err
}

// get200Model204NoModelDefaultError202NonePreparer prepares the Get200Model204NoModelDefaultError202None request.
func (client MultipleResponsesClient) get200Model204NoModelDefaultError202NonePreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/200/A/204/none/default/Error/response/202/none"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// get200Model204NoModelDefaultError202NoneResponder handles the response to the Get200Model204NoModelDefaultError202None request.
func (client MultipleResponsesClient) get200Model204NoModelDefaultError202NoneResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusNoContent)
	if resp == nil {
		return nil, err
	}
	result := &A{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, err
	}
	if len(b) > 0 {
		b = removeBOM(b)
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Get200Model204NoModelDefaultError204Valid send a 204 response with no payload
func (client MultipleResponsesClient) Get200Model204NoModelDefaultError204Valid(ctx context.Context) (*A, error) {
	req, err := client.get200Model204NoModelDefaultError204ValidPreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.get200Model204NoModelDefaultError204ValidResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*A), err
}

// get200Model204NoModelDefaultError204ValidPreparer prepares the Get200Model204NoModelDefaultError204Valid request.
func (client MultipleResponsesClient) get200Model204NoModelDefaultError204ValidPreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/200/A/204/none/default/Error/response/204/none"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// get200Model204NoModelDefaultError204ValidResponder handles the response to the Get200Model204NoModelDefaultError204Valid request.
func (client MultipleResponsesClient) get200Model204NoModelDefaultError204ValidResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusNoContent)
	if resp == nil {
		return nil, err
	}
	result := &A{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, err
	}
	if len(b) > 0 {
		b = removeBOM(b)
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Get200Model204NoModelDefaultError400Valid send a 400 response with valid error payload: {'status': 400, 'message':
// 'client error'}
func (client MultipleResponsesClient) Get200Model204NoModelDefaultError400Valid(ctx context.Context) (*A, error) {
	req, err := client.get200Model204NoModelDefaultError400ValidPreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.get200Model204NoModelDefaultError400ValidResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*A), err
}

// get200Model204NoModelDefaultError400ValidPreparer prepares the Get200Model204NoModelDefaultError400Valid request.
func (client MultipleResponsesClient) get200Model204NoModelDefaultError400ValidPreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/200/A/204/none/default/Error/response/400/valid"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// get200Model204NoModelDefaultError400ValidResponder handles the response to the Get200Model204NoModelDefaultError400Valid request.
func (client MultipleResponsesClient) get200Model204NoModelDefaultError400ValidResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusNoContent)
	if resp == nil {
		return nil, err
	}
	result := &A{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, err
	}
	if len(b) > 0 {
		b = removeBOM(b)
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Get200ModelA200Invalid send a 200 response with invalid payload {'statusCodeInvalid': '200'}
func (client MultipleResponsesClient) Get200ModelA200Invalid(ctx context.Context) (*A, error) {
	req, err := client.get200ModelA200InvalidPreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.get200ModelA200InvalidResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*A), err
}

// get200ModelA200InvalidPreparer prepares the Get200ModelA200Invalid request.
func (client MultipleResponsesClient) get200ModelA200InvalidPreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/200/A/response/200/invalid"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// get200ModelA200InvalidResponder handles the response to the Get200ModelA200Invalid request.
func (client MultipleResponsesClient) get200ModelA200InvalidResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &A{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, err
	}
	if len(b) > 0 {
		b = removeBOM(b)
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Get200ModelA200None send a 200 response with no payload, when a payload is expected - client should return a null
// object of thde type for model A
func (client MultipleResponsesClient) Get200ModelA200None(ctx context.Context) (*A, error) {
	req, err := client.get200ModelA200NonePreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.get200ModelA200NoneResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*A), err
}

// get200ModelA200NonePreparer prepares the Get200ModelA200None request.
func (client MultipleResponsesClient) get200ModelA200NonePreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/200/A/response/200/none"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// get200ModelA200NoneResponder handles the response to the Get200ModelA200None request.
func (client MultipleResponsesClient) get200ModelA200NoneResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &A{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, err
	}
	if len(b) > 0 {
		b = removeBOM(b)
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Get200ModelA200Valid send a 200 response with payload {'statusCode': '200'}
func (client MultipleResponsesClient) Get200ModelA200Valid(ctx context.Context) (*A, error) {
	req, err := client.get200ModelA200ValidPreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.get200ModelA200ValidResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*A), err
}

// get200ModelA200ValidPreparer prepares the Get200ModelA200Valid request.
func (client MultipleResponsesClient) get200ModelA200ValidPreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/200/A/response/200/valid"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// get200ModelA200ValidResponder handles the response to the Get200ModelA200Valid request.
func (client MultipleResponsesClient) get200ModelA200ValidResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &A{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, err
	}
	if len(b) > 0 {
		b = removeBOM(b)
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Get200ModelA201ModelC404ModelDDefaultError200Valid send a 200 response with valid payload: {'statusCode': '200'}
func (client MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError200Valid(ctx context.Context) (*Get200ModelA201ModelC404ModelDDefaultError200ValidResponse, error) {
	req, err := client.get200ModelA201ModelC404ModelDDefaultError200ValidPreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.get200ModelA201ModelC404ModelDDefaultError200ValidResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*Get200ModelA201ModelC404ModelDDefaultError200ValidResponse), err
}

// get200ModelA201ModelC404ModelDDefaultError200ValidPreparer prepares the Get200ModelA201ModelC404ModelDDefaultError200Valid request.
func (client MultipleResponsesClient) get200ModelA201ModelC404ModelDDefaultError200ValidPreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/200/A/201/C/404/D/default/Error/response/200/valid"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// get200ModelA201ModelC404ModelDDefaultError200ValidResponder handles the response to the Get200ModelA201ModelC404ModelDDefaultError200Valid request.
func (client MultipleResponsesClient) get200ModelA201ModelC404ModelDDefaultError200ValidResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusCreated, http.StatusNotFound)
	if resp == nil {
		return nil, err
	}
	result := &Get200ModelA201ModelC404ModelDDefaultError200ValidResponse{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, err
	}
	if len(b) > 0 {
		b = removeBOM(b)
		err = json.Unmarshal(b, &result.Value)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Get200ModelA201ModelC404ModelDDefaultError201Valid send a 200 response with valid payload: {'httpCode': '201'}
func (client MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError201Valid(ctx context.Context) (*Get200ModelA201ModelC404ModelDDefaultError201ValidResponse, error) {
	req, err := client.get200ModelA201ModelC404ModelDDefaultError201ValidPreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.get200ModelA201ModelC404ModelDDefaultError201ValidResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*Get200ModelA201ModelC404ModelDDefaultError201ValidResponse), err
}

// get200ModelA201ModelC404ModelDDefaultError201ValidPreparer prepares the Get200ModelA201ModelC404ModelDDefaultError201Valid request.
func (client MultipleResponsesClient) get200ModelA201ModelC404ModelDDefaultError201ValidPreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/200/A/201/C/404/D/default/Error/response/201/valid"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// get200ModelA201ModelC404ModelDDefaultError201ValidResponder handles the response to the Get200ModelA201ModelC404ModelDDefaultError201Valid request.
func (client MultipleResponsesClient) get200ModelA201ModelC404ModelDDefaultError201ValidResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusCreated, http.StatusNotFound)
	if resp == nil {
		return nil, err
	}
	result := &Get200ModelA201ModelC404ModelDDefaultError201ValidResponse{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, err
	}
	if len(b) > 0 {
		b = removeBOM(b)
		err = json.Unmarshal(b, &result.Value)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Get200ModelA201ModelC404ModelDDefaultError400Valid send a 400 response with valid payload: {'code': '400',
// 'message': 'client error'}
func (client MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError400Valid(ctx context.Context) (*Get200ModelA201ModelC404ModelDDefaultError400ValidResponse, error) {
	req, err := client.get200ModelA201ModelC404ModelDDefaultError400ValidPreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.get200ModelA201ModelC404ModelDDefaultError400ValidResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*Get200ModelA201ModelC404ModelDDefaultError400ValidResponse), err
}

// get200ModelA201ModelC404ModelDDefaultError400ValidPreparer prepares the Get200ModelA201ModelC404ModelDDefaultError400Valid request.
func (client MultipleResponsesClient) get200ModelA201ModelC404ModelDDefaultError400ValidPreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/200/A/201/C/404/D/default/Error/response/400/valid"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// get200ModelA201ModelC404ModelDDefaultError400ValidResponder handles the response to the Get200ModelA201ModelC404ModelDDefaultError400Valid request.
func (client MultipleResponsesClient) get200ModelA201ModelC404ModelDDefaultError400ValidResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusCreated, http.StatusNotFound)
	if resp == nil {
		return nil, err
	}
	result := &Get200ModelA201ModelC404ModelDDefaultError400ValidResponse{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, err
	}
	if len(b) > 0 {
		b = removeBOM(b)
		err = json.Unmarshal(b, &result.Value)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Get200ModelA201ModelC404ModelDDefaultError404Valid send a 200 response with valid payload: {'httpStatusCode': '404'}
func (client MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError404Valid(ctx context.Context) (*Get200ModelA201ModelC404ModelDDefaultError404ValidResponse, error) {
	req, err := client.get200ModelA201ModelC404ModelDDefaultError404ValidPreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.get200ModelA201ModelC404ModelDDefaultError404ValidResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*Get200ModelA201ModelC404ModelDDefaultError404ValidResponse), err
}

// get200ModelA201ModelC404ModelDDefaultError404ValidPreparer prepares the Get200ModelA201ModelC404ModelDDefaultError404Valid request.
func (client MultipleResponsesClient) get200ModelA201ModelC404ModelDDefaultError404ValidPreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/200/A/201/C/404/D/default/Error/response/404/valid"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// get200ModelA201ModelC404ModelDDefaultError404ValidResponder handles the response to the Get200ModelA201ModelC404ModelDDefaultError404Valid request.
func (client MultipleResponsesClient) get200ModelA201ModelC404ModelDDefaultError404ValidResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusCreated, http.StatusNotFound)
	if resp == nil {
		return nil, err
	}
	result := &Get200ModelA201ModelC404ModelDDefaultError404ValidResponse{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, err
	}
	if len(b) > 0 {
		b = removeBOM(b)
		err = json.Unmarshal(b, &result.Value)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Get200ModelA202Valid send a 202 response with payload {'statusCode': '202'}
func (client MultipleResponsesClient) Get200ModelA202Valid(ctx context.Context) (*A, error) {
	req, err := client.get200ModelA202ValidPreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.get200ModelA202ValidResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*A), err
}

// get200ModelA202ValidPreparer prepares the Get200ModelA202Valid request.
func (client MultipleResponsesClient) get200ModelA202ValidPreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/200/A/response/202/valid"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// get200ModelA202ValidResponder handles the response to the Get200ModelA202Valid request.
func (client MultipleResponsesClient) get200ModelA202ValidResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &A{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, err
	}
	if len(b) > 0 {
		b = removeBOM(b)
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Get200ModelA400Invalid send a 200 response with invalid payload {'statusCodeInvalid': '400'}
func (client MultipleResponsesClient) Get200ModelA400Invalid(ctx context.Context) (*A, error) {
	req, err := client.get200ModelA400InvalidPreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.get200ModelA400InvalidResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*A), err
}

// get200ModelA400InvalidPreparer prepares the Get200ModelA400Invalid request.
func (client MultipleResponsesClient) get200ModelA400InvalidPreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/200/A/response/400/invalid"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// get200ModelA400InvalidResponder handles the response to the Get200ModelA400Invalid request.
func (client MultipleResponsesClient) get200ModelA400InvalidResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &A{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, err
	}
	if len(b) > 0 {
		b = removeBOM(b)
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Get200ModelA400None send a 400 response with no payload client should treat as an http error with no error model
func (client MultipleResponsesClient) Get200ModelA400None(ctx context.Context) (*A, error) {
	req, err := client.get200ModelA400NonePreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.get200ModelA400NoneResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*A), err
}

// get200ModelA400NonePreparer prepares the Get200ModelA400None request.
func (client MultipleResponsesClient) get200ModelA400NonePreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/200/A/response/400/none"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// get200ModelA400NoneResponder handles the response to the Get200ModelA400None request.
func (client MultipleResponsesClient) get200ModelA400NoneResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &A{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, err
	}
	if len(b) > 0 {
		b = removeBOM(b)
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Get200ModelA400Valid send a 200 response with payload {'statusCode': '400'}
func (client MultipleResponsesClient) Get200ModelA400Valid(ctx context.Context) (*A, error) {
	req, err := client.get200ModelA400ValidPreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.get200ModelA400ValidResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*A), err
}

// get200ModelA400ValidPreparer prepares the Get200ModelA400Valid request.
func (client MultipleResponsesClient) get200ModelA400ValidPreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/200/A/response/400/valid"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// get200ModelA400ValidResponder handles the response to the Get200ModelA400Valid request.
func (client MultipleResponsesClient) get200ModelA400ValidResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &A{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, err
	}
	if len(b) > 0 {
		b = removeBOM(b)
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Get202None204NoneDefaultError202None send a 202 response with no payload
func (client MultipleResponsesClient) Get202None204NoneDefaultError202None(ctx context.Context) (*http.Response, error) {
	req, err := client.get202None204NoneDefaultError202NonePreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.get202None204NoneDefaultError202NoneResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// get202None204NoneDefaultError202NonePreparer prepares the Get202None204NoneDefaultError202None request.
func (client MultipleResponsesClient) get202None204NoneDefaultError202NonePreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/202/none/204/none/default/Error/response/202/none"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// get202None204NoneDefaultError202NoneResponder handles the response to the Get202None204NoneDefaultError202None request.
func (client MultipleResponsesClient) get202None204NoneDefaultError202NoneResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}

// Get202None204NoneDefaultError204None send a 204 response with no payload
func (client MultipleResponsesClient) Get202None204NoneDefaultError204None(ctx context.Context) (*http.Response, error) {
	req, err := client.get202None204NoneDefaultError204NonePreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.get202None204NoneDefaultError204NoneResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// get202None204NoneDefaultError204NonePreparer prepares the Get202None204NoneDefaultError204None request.
func (client MultipleResponsesClient) get202None204NoneDefaultError204NonePreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/202/none/204/none/default/Error/response/204/none"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// get202None204NoneDefaultError204NoneResponder handles the response to the Get202None204NoneDefaultError204None request.
func (client MultipleResponsesClient) get202None204NoneDefaultError204NoneResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}

// Get202None204NoneDefaultError400Valid send a 400 response with valid payload: {'code': '400', 'message': 'client
// error'}
func (client MultipleResponsesClient) Get202None204NoneDefaultError400Valid(ctx context.Context) (*http.Response, error) {
	req, err := client.get202None204NoneDefaultError400ValidPreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.get202None204NoneDefaultError400ValidResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// get202None204NoneDefaultError400ValidPreparer prepares the Get202None204NoneDefaultError400Valid request.
func (client MultipleResponsesClient) get202None204NoneDefaultError400ValidPreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/202/none/204/none/default/Error/response/400/valid"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// get202None204NoneDefaultError400ValidResponder handles the response to the Get202None204NoneDefaultError400Valid request.
func (client MultipleResponsesClient) get202None204NoneDefaultError400ValidResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}

// Get202None204NoneDefaultNone202Invalid send a 202 response with an unexpected payload {'property': 'value'}
func (client MultipleResponsesClient) Get202None204NoneDefaultNone202Invalid(ctx context.Context) (*http.Response, error) {
	req, err := client.get202None204NoneDefaultNone202InvalidPreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.get202None204NoneDefaultNone202InvalidResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// get202None204NoneDefaultNone202InvalidPreparer prepares the Get202None204NoneDefaultNone202Invalid request.
func (client MultipleResponsesClient) get202None204NoneDefaultNone202InvalidPreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/202/none/204/none/default/none/response/202/invalid"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// get202None204NoneDefaultNone202InvalidResponder handles the response to the Get202None204NoneDefaultNone202Invalid request.
func (client MultipleResponsesClient) get202None204NoneDefaultNone202InvalidResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}

// Get202None204NoneDefaultNone204None send a 204 response with no payload
func (client MultipleResponsesClient) Get202None204NoneDefaultNone204None(ctx context.Context) (*http.Response, error) {
	req, err := client.get202None204NoneDefaultNone204NonePreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.get202None204NoneDefaultNone204NoneResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// get202None204NoneDefaultNone204NonePreparer prepares the Get202None204NoneDefaultNone204None request.
func (client MultipleResponsesClient) get202None204NoneDefaultNone204NonePreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/202/none/204/none/default/none/response/204/none"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// get202None204NoneDefaultNone204NoneResponder handles the response to the Get202None204NoneDefaultNone204None request.
func (client MultipleResponsesClient) get202None204NoneDefaultNone204NoneResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}

// Get202None204NoneDefaultNone400Invalid send a 400 response with an unexpected payload {'property': 'value'}
func (client MultipleResponsesClient) Get202None204NoneDefaultNone400Invalid(ctx context.Context) (*http.Response, error) {
	req, err := client.get202None204NoneDefaultNone400InvalidPreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.get202None204NoneDefaultNone400InvalidResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// get202None204NoneDefaultNone400InvalidPreparer prepares the Get202None204NoneDefaultNone400Invalid request.
func (client MultipleResponsesClient) get202None204NoneDefaultNone400InvalidPreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/202/none/204/none/default/none/response/400/invalid"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// get202None204NoneDefaultNone400InvalidResponder handles the response to the Get202None204NoneDefaultNone400Invalid request.
func (client MultipleResponsesClient) get202None204NoneDefaultNone400InvalidResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}

// Get202None204NoneDefaultNone400None send a 400 response with no payload
func (client MultipleResponsesClient) Get202None204NoneDefaultNone400None(ctx context.Context) (*http.Response, error) {
	req, err := client.get202None204NoneDefaultNone400NonePreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.get202None204NoneDefaultNone400NoneResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// get202None204NoneDefaultNone400NonePreparer prepares the Get202None204NoneDefaultNone400None request.
func (client MultipleResponsesClient) get202None204NoneDefaultNone400NonePreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/202/none/204/none/default/none/response/400/none"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// get202None204NoneDefaultNone400NoneResponder handles the response to the Get202None204NoneDefaultNone400None request.
func (client MultipleResponsesClient) get202None204NoneDefaultNone400NoneResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}

// GetDefaultModelA200None send a 200 response with no payload
func (client MultipleResponsesClient) GetDefaultModelA200None(ctx context.Context) (*A, error) {
	req, err := client.getDefaultModelA200NonePreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getDefaultModelA200NoneResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*A), err
}

// getDefaultModelA200NonePreparer prepares the GetDefaultModelA200None request.
func (client MultipleResponsesClient) getDefaultModelA200NonePreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/default/A/response/200/none"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getDefaultModelA200NoneResponder handles the response to the GetDefaultModelA200None request.
func (client MultipleResponsesClient) getDefaultModelA200NoneResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &A{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, err
	}
	if len(b) > 0 {
		b = removeBOM(b)
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// GetDefaultModelA200Valid send a 200 response with valid payload: {'statusCode': '200'}
func (client MultipleResponsesClient) GetDefaultModelA200Valid(ctx context.Context) (*A, error) {
	req, err := client.getDefaultModelA200ValidPreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getDefaultModelA200ValidResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*A), err
}

// getDefaultModelA200ValidPreparer prepares the GetDefaultModelA200Valid request.
func (client MultipleResponsesClient) getDefaultModelA200ValidPreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/default/A/response/200/valid"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getDefaultModelA200ValidResponder handles the response to the GetDefaultModelA200Valid request.
func (client MultipleResponsesClient) getDefaultModelA200ValidResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &A{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, err
	}
	if len(b) > 0 {
		b = removeBOM(b)
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// GetDefaultModelA400None send a 400 response with no payload
func (client MultipleResponsesClient) GetDefaultModelA400None(ctx context.Context) (*A, error) {
	req, err := client.getDefaultModelA400NonePreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getDefaultModelA400NoneResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*A), err
}

// getDefaultModelA400NonePreparer prepares the GetDefaultModelA400None request.
func (client MultipleResponsesClient) getDefaultModelA400NonePreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/default/A/response/400/none"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getDefaultModelA400NoneResponder handles the response to the GetDefaultModelA400None request.
func (client MultipleResponsesClient) getDefaultModelA400NoneResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &A{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, err
	}
	if len(b) > 0 {
		b = removeBOM(b)
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// GetDefaultModelA400Valid send a 400 response with valid payload: {'statusCode': '400'}
func (client MultipleResponsesClient) GetDefaultModelA400Valid(ctx context.Context) (*A, error) {
	req, err := client.getDefaultModelA400ValidPreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getDefaultModelA400ValidResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*A), err
}

// getDefaultModelA400ValidPreparer prepares the GetDefaultModelA400Valid request.
func (client MultipleResponsesClient) getDefaultModelA400ValidPreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/default/A/response/400/valid"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getDefaultModelA400ValidResponder handles the response to the GetDefaultModelA400Valid request.
func (client MultipleResponsesClient) getDefaultModelA400ValidResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &A{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, err
	}
	if len(b) > 0 {
		b = removeBOM(b)
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// GetDefaultNone200Invalid send a 200 response with invalid payload: {'statusCode': '200'}
func (client MultipleResponsesClient) GetDefaultNone200Invalid(ctx context.Context) (*http.Response, error) {
	req, err := client.getDefaultNone200InvalidPreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getDefaultNone200InvalidResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// getDefaultNone200InvalidPreparer prepares the GetDefaultNone200Invalid request.
func (client MultipleResponsesClient) getDefaultNone200InvalidPreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/default/none/response/200/invalid"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getDefaultNone200InvalidResponder handles the response to the GetDefaultNone200Invalid request.
func (client MultipleResponsesClient) getDefaultNone200InvalidResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}

// GetDefaultNone200None send a 200 response with no payload
func (client MultipleResponsesClient) GetDefaultNone200None(ctx context.Context) (*http.Response, error) {
	req, err := client.getDefaultNone200NonePreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getDefaultNone200NoneResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// getDefaultNone200NonePreparer prepares the GetDefaultNone200None request.
func (client MultipleResponsesClient) getDefaultNone200NonePreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/default/none/response/200/none"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getDefaultNone200NoneResponder handles the response to the GetDefaultNone200None request.
func (client MultipleResponsesClient) getDefaultNone200NoneResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}

// GetDefaultNone400Invalid send a 400 response with valid payload: {'statusCode': '400'}
func (client MultipleResponsesClient) GetDefaultNone400Invalid(ctx context.Context) (*http.Response, error) {
	req, err := client.getDefaultNone400InvalidPreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getDefaultNone400InvalidResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// getDefaultNone400InvalidPreparer prepares the GetDefaultNone400Invalid request.
func (client MultipleResponsesClient) getDefaultNone400InvalidPreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/default/none/response/400/invalid"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getDefaultNone400InvalidResponder handles the response to the GetDefaultNone400Invalid request.
func (client MultipleResponsesClient) getDefaultNone400InvalidResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}

// GetDefaultNone400None send a 400 response with no payload
func (client MultipleResponsesClient) GetDefaultNone400None(ctx context.Context) (*http.Response, error) {
	req, err := client.getDefaultNone400NonePreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getDefaultNone400NoneResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// getDefaultNone400NonePreparer prepares the GetDefaultNone400None request.
func (client MultipleResponsesClient) getDefaultNone400NonePreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/payloads/default/none/response/400/none"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getDefaultNone400NoneResponder handles the response to the GetDefaultNone400None request.
func (client MultipleResponsesClient) getDefaultNone400NoneResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}
