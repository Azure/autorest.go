package httpinfrastructuregroup

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"bytes"
	"context"
	"encoding/json"
	"github.com/Azure/azure-pipeline-go/pipeline"
	"io"
	"io/ioutil"
	"net/http"
)

// HTTPSuccessClient is the test Infrastructure for AutoRest
type HTTPSuccessClient struct {
	ManagementClient
}

// NewHTTPSuccessClient creates an instance of the HTTPSuccessClient client.
func NewHTTPSuccessClient(p pipeline.Pipeline) HTTPSuccessClient {
	return HTTPSuccessClient{NewManagementClient(p)}
}

// Delete200 delete simple boolean value true returns 200
//
// booleanValue is simple boolean value true
func (client HTTPSuccessClient) Delete200(ctx context.Context, booleanValue *bool) (*http.Response, error) {
	req, err := client.delete200Preparer(booleanValue)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.delete200Responder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// delete200Preparer prepares the Delete200 request.
func (client HTTPSuccessClient) delete200Preparer(booleanValue *bool) (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/success/200"
	req, err := pipeline.NewRequest("DELETE", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(booleanValue)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// delete200Responder handles the response to the Delete200 request.
func (client HTTPSuccessClient) delete200Responder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}

// Delete202 delete true Boolean value in request returns 202 (accepted)
//
// booleanValue is simple boolean value true
func (client HTTPSuccessClient) Delete202(ctx context.Context, booleanValue *bool) (*http.Response, error) {
	req, err := client.delete202Preparer(booleanValue)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.delete202Responder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// delete202Preparer prepares the Delete202 request.
func (client HTTPSuccessClient) delete202Preparer(booleanValue *bool) (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/success/202"
	req, err := pipeline.NewRequest("DELETE", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(booleanValue)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// delete202Responder handles the response to the Delete202 request.
func (client HTTPSuccessClient) delete202Responder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusAccepted)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}

// Delete204 delete true Boolean value in request returns 204 (no content)
//
// booleanValue is simple boolean value true
func (client HTTPSuccessClient) Delete204(ctx context.Context, booleanValue *bool) (*http.Response, error) {
	req, err := client.delete204Preparer(booleanValue)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.delete204Responder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// delete204Preparer prepares the Delete204 request.
func (client HTTPSuccessClient) delete204Preparer(booleanValue *bool) (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/success/204"
	req, err := pipeline.NewRequest("DELETE", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(booleanValue)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// delete204Responder handles the response to the Delete204 request.
func (client HTTPSuccessClient) delete204Responder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusNoContent)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}

// Get200 get 200 success
func (client HTTPSuccessClient) Get200(ctx context.Context) (*Get200Response, error) {
	req, err := client.get200Preparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.get200Responder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*Get200Response), err
}

// get200Preparer prepares the Get200 request.
func (client HTTPSuccessClient) get200Preparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/success/200"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// get200Responder handles the response to the Get200 request.
func (client HTTPSuccessClient) get200Responder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &Get200Response{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, err
	}
	if len(b) > 0 {
		b = removeBOM(b)
		err = json.Unmarshal(b, &result.Value)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Head200 return 200 status code if successful
func (client HTTPSuccessClient) Head200(ctx context.Context) (*http.Response, error) {
	req, err := client.head200Preparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.head200Responder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// head200Preparer prepares the Head200 request.
func (client HTTPSuccessClient) head200Preparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/success/200"
	req, err := pipeline.NewRequest("HEAD", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// head200Responder handles the response to the Head200 request.
func (client HTTPSuccessClient) head200Responder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}

// Head204 return 204 status code if successful
func (client HTTPSuccessClient) Head204(ctx context.Context) (*http.Response, error) {
	req, err := client.head204Preparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.head204Responder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// head204Preparer prepares the Head204 request.
func (client HTTPSuccessClient) head204Preparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/success/204"
	req, err := pipeline.NewRequest("HEAD", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// head204Responder handles the response to the Head204 request.
func (client HTTPSuccessClient) head204Responder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusNoContent)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}

// Head404 return 404 status code
func (client HTTPSuccessClient) Head404(ctx context.Context) (*http.Response, error) {
	req, err := client.head404Preparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.head404Responder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// head404Preparer prepares the Head404 request.
func (client HTTPSuccessClient) head404Preparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/success/404"
	req, err := pipeline.NewRequest("HEAD", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// head404Responder handles the response to the Head404 request.
func (client HTTPSuccessClient) head404Responder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusNoContent, http.StatusNotFound)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}

// Patch200 patch true Boolean value in request returning 200
//
// booleanValue is simple boolean value true
func (client HTTPSuccessClient) Patch200(ctx context.Context, booleanValue *bool) (*http.Response, error) {
	req, err := client.patch200Preparer(booleanValue)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.patch200Responder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// patch200Preparer prepares the Patch200 request.
func (client HTTPSuccessClient) patch200Preparer(booleanValue *bool) (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/success/200"
	req, err := pipeline.NewRequest("PATCH", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(booleanValue)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// patch200Responder handles the response to the Patch200 request.
func (client HTTPSuccessClient) patch200Responder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}

// Patch202 patch true Boolean value in request returns 202
//
// booleanValue is simple boolean value true
func (client HTTPSuccessClient) Patch202(ctx context.Context, booleanValue *bool) (*http.Response, error) {
	req, err := client.patch202Preparer(booleanValue)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.patch202Responder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// patch202Preparer prepares the Patch202 request.
func (client HTTPSuccessClient) patch202Preparer(booleanValue *bool) (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/success/202"
	req, err := pipeline.NewRequest("PATCH", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(booleanValue)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// patch202Responder handles the response to the Patch202 request.
func (client HTTPSuccessClient) patch202Responder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusAccepted)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}

// Patch204 patch true Boolean value in request returns 204 (no content)
//
// booleanValue is simple boolean value true
func (client HTTPSuccessClient) Patch204(ctx context.Context, booleanValue *bool) (*http.Response, error) {
	req, err := client.patch204Preparer(booleanValue)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.patch204Responder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// patch204Preparer prepares the Patch204 request.
func (client HTTPSuccessClient) patch204Preparer(booleanValue *bool) (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/success/204"
	req, err := pipeline.NewRequest("PATCH", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(booleanValue)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// patch204Responder handles the response to the Patch204 request.
func (client HTTPSuccessClient) patch204Responder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusNoContent)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}

// Post200 post bollean value true in request that returns a 200
//
// booleanValue is simple boolean value true
func (client HTTPSuccessClient) Post200(ctx context.Context, booleanValue *bool) (*http.Response, error) {
	req, err := client.post200Preparer(booleanValue)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.post200Responder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// post200Preparer prepares the Post200 request.
func (client HTTPSuccessClient) post200Preparer(booleanValue *bool) (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/success/200"
	req, err := pipeline.NewRequest("POST", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(booleanValue)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// post200Responder handles the response to the Post200 request.
func (client HTTPSuccessClient) post200Responder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}

// Post201 post true Boolean value in request returns 201 (Created)
//
// booleanValue is simple boolean value true
func (client HTTPSuccessClient) Post201(ctx context.Context, booleanValue *bool) (*http.Response, error) {
	req, err := client.post201Preparer(booleanValue)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.post201Responder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// post201Preparer prepares the Post201 request.
func (client HTTPSuccessClient) post201Preparer(booleanValue *bool) (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/success/201"
	req, err := pipeline.NewRequest("POST", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(booleanValue)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// post201Responder handles the response to the Post201 request.
func (client HTTPSuccessClient) post201Responder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusCreated)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}

// Post202 post true Boolean value in request returns 202 (Accepted)
//
// booleanValue is simple boolean value true
func (client HTTPSuccessClient) Post202(ctx context.Context, booleanValue *bool) (*http.Response, error) {
	req, err := client.post202Preparer(booleanValue)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.post202Responder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// post202Preparer prepares the Post202 request.
func (client HTTPSuccessClient) post202Preparer(booleanValue *bool) (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/success/202"
	req, err := pipeline.NewRequest("POST", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(booleanValue)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// post202Responder handles the response to the Post202 request.
func (client HTTPSuccessClient) post202Responder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusAccepted)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}

// Post204 post true Boolean value in request returns 204 (no content)
//
// booleanValue is simple boolean value true
func (client HTTPSuccessClient) Post204(ctx context.Context, booleanValue *bool) (*http.Response, error) {
	req, err := client.post204Preparer(booleanValue)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.post204Responder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// post204Preparer prepares the Post204 request.
func (client HTTPSuccessClient) post204Preparer(booleanValue *bool) (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/success/204"
	req, err := pipeline.NewRequest("POST", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(booleanValue)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// post204Responder handles the response to the Post204 request.
func (client HTTPSuccessClient) post204Responder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusNoContent)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}

// Put200 put boolean value true returning 200 success
//
// booleanValue is simple boolean value true
func (client HTTPSuccessClient) Put200(ctx context.Context, booleanValue *bool) (*http.Response, error) {
	req, err := client.put200Preparer(booleanValue)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.put200Responder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// put200Preparer prepares the Put200 request.
func (client HTTPSuccessClient) put200Preparer(booleanValue *bool) (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/success/200"
	req, err := pipeline.NewRequest("PUT", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(booleanValue)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// put200Responder handles the response to the Put200 request.
func (client HTTPSuccessClient) put200Responder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}

// Put201 put true Boolean value in request returns 201
//
// booleanValue is simple boolean value true
func (client HTTPSuccessClient) Put201(ctx context.Context, booleanValue *bool) (*http.Response, error) {
	req, err := client.put201Preparer(booleanValue)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.put201Responder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// put201Preparer prepares the Put201 request.
func (client HTTPSuccessClient) put201Preparer(booleanValue *bool) (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/success/201"
	req, err := pipeline.NewRequest("PUT", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(booleanValue)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// put201Responder handles the response to the Put201 request.
func (client HTTPSuccessClient) put201Responder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusCreated)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}

// Put202 put true Boolean value in request returns 202 (Accepted)
//
// booleanValue is simple boolean value true
func (client HTTPSuccessClient) Put202(ctx context.Context, booleanValue *bool) (*http.Response, error) {
	req, err := client.put202Preparer(booleanValue)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.put202Responder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// put202Preparer prepares the Put202 request.
func (client HTTPSuccessClient) put202Preparer(booleanValue *bool) (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/success/202"
	req, err := pipeline.NewRequest("PUT", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(booleanValue)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// put202Responder handles the response to the Put202 request.
func (client HTTPSuccessClient) put202Responder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusAccepted)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}

// Put204 put true Boolean value in request returns 204 (no content)
//
// booleanValue is simple boolean value true
func (client HTTPSuccessClient) Put204(ctx context.Context, booleanValue *bool) (*http.Response, error) {
	req, err := client.put204Preparer(booleanValue)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.put204Responder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// put204Preparer prepares the Put204 request.
func (client HTTPSuccessClient) put204Preparer(booleanValue *bool) (pipeline.Request, error) {
	u := client.url
	u.Path = "/http/success/204"
	req, err := pipeline.NewRequest("PUT", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(booleanValue)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// put204Responder handles the response to the Put204 request.
func (client HTTPSuccessClient) put204Responder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusNoContent)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}
