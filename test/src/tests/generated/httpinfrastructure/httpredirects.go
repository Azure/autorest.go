package httpinfrastructuregroup

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"net/http"
)

// HTTPRedirectsClient is the test Infrastructure for AutoRest
type HTTPRedirectsClient struct {
	BaseClient
}

// NewHTTPRedirectsClient creates an instance of the HTTPRedirectsClient client.
func NewHTTPRedirectsClient() HTTPRedirectsClient {
	return NewHTTPRedirectsClientWithBaseURI(DefaultBaseURI)
}

// NewHTTPRedirectsClientWithBaseURI creates an instance of the HTTPRedirectsClient client.
func NewHTTPRedirectsClientWithBaseURI(baseURI string) HTTPRedirectsClient {
	return HTTPRedirectsClient{NewWithBaseURI(baseURI)}
}

// Delete307 delete redirected with 307, resulting in a 200 after redirect
// Parameters:
// booleanValue - simple boolean value true
func (client HTTPRedirectsClient) Delete307(ctx context.Context, booleanValue *bool) (result autorest.Response, err error) {
	req, err := client.Delete307Preparer(ctx, booleanValue)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Delete307", nil, "Failure preparing request")
		return
	}

	resp, err := client.Delete307Sender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Delete307", resp, "Failure sending request")
		return
	}

	result, err = client.Delete307Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Delete307", resp, "Failure responding to request")
	}

	return
}

// Delete307Preparer prepares the Delete307 request.
func (client HTTPRedirectsClient) Delete307Preparer(ctx context.Context, booleanValue *bool) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/redirect/307"))
	if booleanValue != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(booleanValue))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Delete307Sender sends the Delete307 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPRedirectsClient) Delete307Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Delete307Responder handles the response to the Delete307 request. The method always
// closes the http.Response Body.
func (client HTTPRedirectsClient) Delete307Responder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusTemporaryRedirect),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Get300 return 300 status code and redirect to /http/success/200
func (client HTTPRedirectsClient) Get300(ctx context.Context) (result ListString, err error) {
	req, err := client.Get300Preparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Get300", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get300Sender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Get300", resp, "Failure sending request")
		return
	}

	result, err = client.Get300Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Get300", resp, "Failure responding to request")
	}

	return
}

// Get300Preparer prepares the Get300 request.
func (client HTTPRedirectsClient) Get300Preparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/redirect/300"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get300Sender sends the Get300 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPRedirectsClient) Get300Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Get300Responder handles the response to the Get300 request. The method always
// closes the http.Response Body.
func (client HTTPRedirectsClient) Get300Responder(resp *http.Response) (result ListString, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusMultipleChoices),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get301 return 301 status code and redirect to /http/success/200
func (client HTTPRedirectsClient) Get301(ctx context.Context) (result autorest.Response, err error) {
	req, err := client.Get301Preparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Get301", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get301Sender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Get301", resp, "Failure sending request")
		return
	}

	result, err = client.Get301Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Get301", resp, "Failure responding to request")
	}

	return
}

// Get301Preparer prepares the Get301 request.
func (client HTTPRedirectsClient) Get301Preparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/redirect/301"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get301Sender sends the Get301 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPRedirectsClient) Get301Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Get301Responder handles the response to the Get301 request. The method always
// closes the http.Response Body.
func (client HTTPRedirectsClient) Get301Responder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusMovedPermanently),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Get302 return 302 status code and redirect to /http/success/200
func (client HTTPRedirectsClient) Get302(ctx context.Context) (result autorest.Response, err error) {
	req, err := client.Get302Preparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Get302", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get302Sender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Get302", resp, "Failure sending request")
		return
	}

	result, err = client.Get302Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Get302", resp, "Failure responding to request")
	}

	return
}

// Get302Preparer prepares the Get302 request.
func (client HTTPRedirectsClient) Get302Preparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/redirect/302"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get302Sender sends the Get302 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPRedirectsClient) Get302Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Get302Responder handles the response to the Get302 request. The method always
// closes the http.Response Body.
func (client HTTPRedirectsClient) Get302Responder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusFound),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Get307 redirect get with 307, resulting in a 200 success
func (client HTTPRedirectsClient) Get307(ctx context.Context) (result autorest.Response, err error) {
	req, err := client.Get307Preparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Get307", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get307Sender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Get307", resp, "Failure sending request")
		return
	}

	result, err = client.Get307Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Get307", resp, "Failure responding to request")
	}

	return
}

// Get307Preparer prepares the Get307 request.
func (client HTTPRedirectsClient) Get307Preparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/redirect/307"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get307Sender sends the Get307 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPRedirectsClient) Get307Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Get307Responder handles the response to the Get307 request. The method always
// closes the http.Response Body.
func (client HTTPRedirectsClient) Get307Responder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusTemporaryRedirect),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Head300 return 300 status code and redirect to /http/success/200
func (client HTTPRedirectsClient) Head300(ctx context.Context) (result autorest.Response, err error) {
	req, err := client.Head300Preparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Head300", nil, "Failure preparing request")
		return
	}

	resp, err := client.Head300Sender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Head300", resp, "Failure sending request")
		return
	}

	result, err = client.Head300Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Head300", resp, "Failure responding to request")
	}

	return
}

// Head300Preparer prepares the Head300 request.
func (client HTTPRedirectsClient) Head300Preparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsHead(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/redirect/300"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Head300Sender sends the Head300 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPRedirectsClient) Head300Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Head300Responder handles the response to the Head300 request. The method always
// closes the http.Response Body.
func (client HTTPRedirectsClient) Head300Responder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusMultipleChoices),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Head301 return 301 status code and redirect to /http/success/200
func (client HTTPRedirectsClient) Head301(ctx context.Context) (result autorest.Response, err error) {
	req, err := client.Head301Preparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Head301", nil, "Failure preparing request")
		return
	}

	resp, err := client.Head301Sender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Head301", resp, "Failure sending request")
		return
	}

	result, err = client.Head301Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Head301", resp, "Failure responding to request")
	}

	return
}

// Head301Preparer prepares the Head301 request.
func (client HTTPRedirectsClient) Head301Preparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsHead(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/redirect/301"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Head301Sender sends the Head301 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPRedirectsClient) Head301Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Head301Responder handles the response to the Head301 request. The method always
// closes the http.Response Body.
func (client HTTPRedirectsClient) Head301Responder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusMovedPermanently),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Head302 return 302 status code and redirect to /http/success/200
func (client HTTPRedirectsClient) Head302(ctx context.Context) (result autorest.Response, err error) {
	req, err := client.Head302Preparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Head302", nil, "Failure preparing request")
		return
	}

	resp, err := client.Head302Sender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Head302", resp, "Failure sending request")
		return
	}

	result, err = client.Head302Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Head302", resp, "Failure responding to request")
	}

	return
}

// Head302Preparer prepares the Head302 request.
func (client HTTPRedirectsClient) Head302Preparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsHead(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/redirect/302"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Head302Sender sends the Head302 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPRedirectsClient) Head302Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Head302Responder handles the response to the Head302 request. The method always
// closes the http.Response Body.
func (client HTTPRedirectsClient) Head302Responder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusFound),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Head307 redirect with 307, resulting in a 200 success
func (client HTTPRedirectsClient) Head307(ctx context.Context) (result autorest.Response, err error) {
	req, err := client.Head307Preparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Head307", nil, "Failure preparing request")
		return
	}

	resp, err := client.Head307Sender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Head307", resp, "Failure sending request")
		return
	}

	result, err = client.Head307Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Head307", resp, "Failure responding to request")
	}

	return
}

// Head307Preparer prepares the Head307 request.
func (client HTTPRedirectsClient) Head307Preparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsHead(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/redirect/307"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Head307Sender sends the Head307 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPRedirectsClient) Head307Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Head307Responder handles the response to the Head307 request. The method always
// closes the http.Response Body.
func (client HTTPRedirectsClient) Head307Responder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusTemporaryRedirect),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Patch302 patch true Boolean value in request returns 302.  This request should not be automatically redirected, but
// should return the received 302 to the caller for evaluation
// Parameters:
// booleanValue - simple boolean value true
func (client HTTPRedirectsClient) Patch302(ctx context.Context, booleanValue *bool) (result autorest.Response, err error) {
	req, err := client.Patch302Preparer(ctx, booleanValue)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Patch302", nil, "Failure preparing request")
		return
	}

	resp, err := client.Patch302Sender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Patch302", resp, "Failure sending request")
		return
	}

	result, err = client.Patch302Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Patch302", resp, "Failure responding to request")
	}

	return
}

// Patch302Preparer prepares the Patch302 request.
func (client HTTPRedirectsClient) Patch302Preparer(ctx context.Context, booleanValue *bool) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/redirect/302"))
	if booleanValue != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(booleanValue))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Patch302Sender sends the Patch302 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPRedirectsClient) Patch302Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Patch302Responder handles the response to the Patch302 request. The method always
// closes the http.Response Body.
func (client HTTPRedirectsClient) Patch302Responder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusFound),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Patch307 patch redirected with 307, resulting in a 200 after redirect
// Parameters:
// booleanValue - simple boolean value true
func (client HTTPRedirectsClient) Patch307(ctx context.Context, booleanValue *bool) (result autorest.Response, err error) {
	req, err := client.Patch307Preparer(ctx, booleanValue)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Patch307", nil, "Failure preparing request")
		return
	}

	resp, err := client.Patch307Sender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Patch307", resp, "Failure sending request")
		return
	}

	result, err = client.Patch307Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Patch307", resp, "Failure responding to request")
	}

	return
}

// Patch307Preparer prepares the Patch307 request.
func (client HTTPRedirectsClient) Patch307Preparer(ctx context.Context, booleanValue *bool) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/redirect/307"))
	if booleanValue != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(booleanValue))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Patch307Sender sends the Patch307 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPRedirectsClient) Patch307Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Patch307Responder handles the response to the Patch307 request. The method always
// closes the http.Response Body.
func (client HTTPRedirectsClient) Patch307Responder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusTemporaryRedirect),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Post303 post true Boolean value in request returns 303.  This request should be automatically redirected usign a
// get, ultimately returning a 200 status code
// Parameters:
// booleanValue - simple boolean value true
func (client HTTPRedirectsClient) Post303(ctx context.Context, booleanValue *bool) (result autorest.Response, err error) {
	req, err := client.Post303Preparer(ctx, booleanValue)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Post303", nil, "Failure preparing request")
		return
	}

	resp, err := client.Post303Sender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Post303", resp, "Failure sending request")
		return
	}

	result, err = client.Post303Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Post303", resp, "Failure responding to request")
	}

	return
}

// Post303Preparer prepares the Post303 request.
func (client HTTPRedirectsClient) Post303Preparer(ctx context.Context, booleanValue *bool) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/redirect/303"))
	if booleanValue != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(booleanValue))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Post303Sender sends the Post303 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPRedirectsClient) Post303Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Post303Responder handles the response to the Post303 request. The method always
// closes the http.Response Body.
func (client HTTPRedirectsClient) Post303Responder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusSeeOther),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Post307 post redirected with 307, resulting in a 200 after redirect
// Parameters:
// booleanValue - simple boolean value true
func (client HTTPRedirectsClient) Post307(ctx context.Context, booleanValue *bool) (result autorest.Response, err error) {
	req, err := client.Post307Preparer(ctx, booleanValue)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Post307", nil, "Failure preparing request")
		return
	}

	resp, err := client.Post307Sender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Post307", resp, "Failure sending request")
		return
	}

	result, err = client.Post307Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Post307", resp, "Failure responding to request")
	}

	return
}

// Post307Preparer prepares the Post307 request.
func (client HTTPRedirectsClient) Post307Preparer(ctx context.Context, booleanValue *bool) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/redirect/307"))
	if booleanValue != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(booleanValue))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Post307Sender sends the Post307 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPRedirectsClient) Post307Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Post307Responder handles the response to the Post307 request. The method always
// closes the http.Response Body.
func (client HTTPRedirectsClient) Post307Responder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusTemporaryRedirect),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Put301 put true Boolean value in request returns 301.  This request should not be automatically redirected, but
// should return the received 301 to the caller for evaluation
// Parameters:
// booleanValue - simple boolean value true
func (client HTTPRedirectsClient) Put301(ctx context.Context, booleanValue *bool) (result autorest.Response, err error) {
	req, err := client.Put301Preparer(ctx, booleanValue)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Put301", nil, "Failure preparing request")
		return
	}

	resp, err := client.Put301Sender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Put301", resp, "Failure sending request")
		return
	}

	result, err = client.Put301Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Put301", resp, "Failure responding to request")
	}

	return
}

// Put301Preparer prepares the Put301 request.
func (client HTTPRedirectsClient) Put301Preparer(ctx context.Context, booleanValue *bool) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/redirect/301"))
	if booleanValue != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(booleanValue))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Put301Sender sends the Put301 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPRedirectsClient) Put301Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Put301Responder handles the response to the Put301 request. The method always
// closes the http.Response Body.
func (client HTTPRedirectsClient) Put301Responder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusMovedPermanently),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Put307 put redirected with 307, resulting in a 200 after redirect
// Parameters:
// booleanValue - simple boolean value true
func (client HTTPRedirectsClient) Put307(ctx context.Context, booleanValue *bool) (result autorest.Response, err error) {
	req, err := client.Put307Preparer(ctx, booleanValue)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Put307", nil, "Failure preparing request")
		return
	}

	resp, err := client.Put307Sender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Put307", resp, "Failure sending request")
		return
	}

	result, err = client.Put307Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.HTTPRedirectsClient", "Put307", resp, "Failure responding to request")
	}

	return
}

// Put307Preparer prepares the Put307 request.
func (client HTTPRedirectsClient) Put307Preparer(ctx context.Context, booleanValue *bool) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/redirect/307"))
	if booleanValue != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(booleanValue))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Put307Sender sends the Put307 request. The method will close the
// http.Response Body if it receives an error.
func (client HTTPRedirectsClient) Put307Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// Put307Responder handles the response to the Put307 request. The method always
// closes the http.Response Body.
func (client HTTPRedirectsClient) Put307Responder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusTemporaryRedirect),
		autorest.ByClosing())
	result.Response = resp
	return
}
