package optionalgroup

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"net/http"
)

// ExplicitClient is the test Infrastructure for AutoRest
type ExplicitClient struct {
	ManagementClient
}

// NewExplicitClient creates an instance of the ExplicitClient client.
func NewExplicitClient(requiredGlobalPath string, requiredGlobalQuery string, optionalGlobalQuery *int32) ExplicitClient {
	return NewExplicitClientWithBaseURI(DefaultBaseURI, requiredGlobalPath, requiredGlobalQuery, optionalGlobalQuery)
}

// NewExplicitClientWithBaseURI creates an instance of the ExplicitClient client.
func NewExplicitClientWithBaseURI(baseURI string, requiredGlobalPath string, requiredGlobalQuery string, optionalGlobalQuery *int32) ExplicitClient {
	return ExplicitClient{NewWithBaseURI(baseURI, requiredGlobalPath, requiredGlobalQuery, optionalGlobalQuery)}
}

// PostOptionalArrayHeader test explicitly optional integer. Please put a header 'headerParameter' => null.
//
func (client ExplicitClient) PostOptionalArrayHeader(headerParameter []string) (result autorest.Response, err error) {
	req, err := client.PostOptionalArrayHeaderPreparer(headerParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalArrayHeader", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostOptionalArrayHeaderSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalArrayHeader", resp, "Failure sending request")
		return
	}

	result, err = client.PostOptionalArrayHeaderResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalArrayHeader", resp, "Failure responding to request")
	}

	return
}

// PostOptionalArrayHeaderPreparer prepares the PostOptionalArrayHeader request.
func (client ExplicitClient) PostOptionalArrayHeaderPreparer(headerParameter []string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/reqopt/optional/array/header"))
	if headerParameter != nil && len(headerParameter) > 0 {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithHeader("headerParameter", autorest.String(headerParameter)))
	}
	return preparer.Prepare(&http.Request{})
}

// PostOptionalArrayHeaderSender sends the PostOptionalArrayHeader request. The method will close the
// http.Response Body if it receives an error.
func (client ExplicitClient) PostOptionalArrayHeaderSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostOptionalArrayHeaderResponder handles the response to the PostOptionalArrayHeader request. The method always
// closes the http.Response Body.
func (client ExplicitClient) PostOptionalArrayHeaderResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PostOptionalArrayParameter test explicitly optional array. Please put null.
//
func (client ExplicitClient) PostOptionalArrayParameter(bodyParameter []string) (result autorest.Response, err error) {
	req, err := client.PostOptionalArrayParameterPreparer(bodyParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalArrayParameter", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostOptionalArrayParameterSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalArrayParameter", resp, "Failure sending request")
		return
	}

	result, err = client.PostOptionalArrayParameterResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalArrayParameter", resp, "Failure responding to request")
	}

	return
}

// PostOptionalArrayParameterPreparer prepares the PostOptionalArrayParameter request.
func (client ExplicitClient) PostOptionalArrayParameterPreparer(bodyParameter []string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/reqopt/optional/array/parameter"))
	if bodyParameter != nil && len(bodyParameter) > 0 {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(bodyParameter))
	}
	return preparer.Prepare(&http.Request{})
}

// PostOptionalArrayParameterSender sends the PostOptionalArrayParameter request. The method will close the
// http.Response Body if it receives an error.
func (client ExplicitClient) PostOptionalArrayParameterSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostOptionalArrayParameterResponder handles the response to the PostOptionalArrayParameter request. The method always
// closes the http.Response Body.
func (client ExplicitClient) PostOptionalArrayParameterResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PostOptionalArrayProperty test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
//
func (client ExplicitClient) PostOptionalArrayProperty(bodyParameter *ArrayOptionalWrapper) (result autorest.Response, err error) {
	req, err := client.PostOptionalArrayPropertyPreparer(bodyParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalArrayProperty", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostOptionalArrayPropertySender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalArrayProperty", resp, "Failure sending request")
		return
	}

	result, err = client.PostOptionalArrayPropertyResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalArrayProperty", resp, "Failure responding to request")
	}

	return
}

// PostOptionalArrayPropertyPreparer prepares the PostOptionalArrayProperty request.
func (client ExplicitClient) PostOptionalArrayPropertyPreparer(bodyParameter *ArrayOptionalWrapper) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/reqopt/optional/array/property"))
	if bodyParameter != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(bodyParameter))
	}
	return preparer.Prepare(&http.Request{})
}

// PostOptionalArrayPropertySender sends the PostOptionalArrayProperty request. The method will close the
// http.Response Body if it receives an error.
func (client ExplicitClient) PostOptionalArrayPropertySender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostOptionalArrayPropertyResponder handles the response to the PostOptionalArrayProperty request. The method always
// closes the http.Response Body.
func (client ExplicitClient) PostOptionalArrayPropertyResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PostOptionalClassParameter test explicitly optional complex object. Please put null.
//
func (client ExplicitClient) PostOptionalClassParameter(bodyParameter *Product) (result autorest.Response, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: bodyParameter,
			Constraints: []validation.Constraint{{Target: "bodyParameter", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "bodyParameter.ID", Name: validation.Null, Rule: true, Chain: nil}}}}}}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "optionalgroup.ExplicitClient", "PostOptionalClassParameter")
	}

	req, err := client.PostOptionalClassParameterPreparer(bodyParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalClassParameter", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostOptionalClassParameterSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalClassParameter", resp, "Failure sending request")
		return
	}

	result, err = client.PostOptionalClassParameterResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalClassParameter", resp, "Failure responding to request")
	}

	return
}

// PostOptionalClassParameterPreparer prepares the PostOptionalClassParameter request.
func (client ExplicitClient) PostOptionalClassParameterPreparer(bodyParameter *Product) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/reqopt/optional/class/parameter"))
	if bodyParameter != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(bodyParameter))
	}
	return preparer.Prepare(&http.Request{})
}

// PostOptionalClassParameterSender sends the PostOptionalClassParameter request. The method will close the
// http.Response Body if it receives an error.
func (client ExplicitClient) PostOptionalClassParameterSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostOptionalClassParameterResponder handles the response to the PostOptionalClassParameter request. The method always
// closes the http.Response Body.
func (client ExplicitClient) PostOptionalClassParameterResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PostOptionalClassProperty test explicitly optional complex object. Please put a valid class-wrapper with 'value' =
// null.
//
func (client ExplicitClient) PostOptionalClassProperty(bodyParameter *ClassOptionalWrapper) (result autorest.Response, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: bodyParameter,
			Constraints: []validation.Constraint{{Target: "bodyParameter", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "bodyParameter.Value", Name: validation.Null, Rule: false,
					Chain: []validation.Constraint{{Target: "bodyParameter.Value.ID", Name: validation.Null, Rule: true, Chain: nil}}},
				}}}}}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "optionalgroup.ExplicitClient", "PostOptionalClassProperty")
	}

	req, err := client.PostOptionalClassPropertyPreparer(bodyParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalClassProperty", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostOptionalClassPropertySender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalClassProperty", resp, "Failure sending request")
		return
	}

	result, err = client.PostOptionalClassPropertyResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalClassProperty", resp, "Failure responding to request")
	}

	return
}

// PostOptionalClassPropertyPreparer prepares the PostOptionalClassProperty request.
func (client ExplicitClient) PostOptionalClassPropertyPreparer(bodyParameter *ClassOptionalWrapper) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/reqopt/optional/class/property"))
	if bodyParameter != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(bodyParameter))
	}
	return preparer.Prepare(&http.Request{})
}

// PostOptionalClassPropertySender sends the PostOptionalClassProperty request. The method will close the
// http.Response Body if it receives an error.
func (client ExplicitClient) PostOptionalClassPropertySender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostOptionalClassPropertyResponder handles the response to the PostOptionalClassProperty request. The method always
// closes the http.Response Body.
func (client ExplicitClient) PostOptionalClassPropertyResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PostOptionalIntegerHeader test explicitly optional integer. Please put a header 'headerParameter' => null.
//
func (client ExplicitClient) PostOptionalIntegerHeader(headerParameter *int32) (result autorest.Response, err error) {
	req, err := client.PostOptionalIntegerHeaderPreparer(headerParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalIntegerHeader", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostOptionalIntegerHeaderSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalIntegerHeader", resp, "Failure sending request")
		return
	}

	result, err = client.PostOptionalIntegerHeaderResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalIntegerHeader", resp, "Failure responding to request")
	}

	return
}

// PostOptionalIntegerHeaderPreparer prepares the PostOptionalIntegerHeader request.
func (client ExplicitClient) PostOptionalIntegerHeaderPreparer(headerParameter *int32) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/reqopt/optional/integer/header"))
	if headerParameter != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithHeader("headerParameter", autorest.String(headerParameter)))
	}
	return preparer.Prepare(&http.Request{})
}

// PostOptionalIntegerHeaderSender sends the PostOptionalIntegerHeader request. The method will close the
// http.Response Body if it receives an error.
func (client ExplicitClient) PostOptionalIntegerHeaderSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostOptionalIntegerHeaderResponder handles the response to the PostOptionalIntegerHeader request. The method always
// closes the http.Response Body.
func (client ExplicitClient) PostOptionalIntegerHeaderResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PostOptionalIntegerParameter test explicitly optional integer. Please put null.
//
func (client ExplicitClient) PostOptionalIntegerParameter(bodyParameter *int32) (result autorest.Response, err error) {
	req, err := client.PostOptionalIntegerParameterPreparer(bodyParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalIntegerParameter", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostOptionalIntegerParameterSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalIntegerParameter", resp, "Failure sending request")
		return
	}

	result, err = client.PostOptionalIntegerParameterResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalIntegerParameter", resp, "Failure responding to request")
	}

	return
}

// PostOptionalIntegerParameterPreparer prepares the PostOptionalIntegerParameter request.
func (client ExplicitClient) PostOptionalIntegerParameterPreparer(bodyParameter *int32) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/reqopt/optional/integer/parameter"))
	if bodyParameter != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(bodyParameter))
	}
	return preparer.Prepare(&http.Request{})
}

// PostOptionalIntegerParameterSender sends the PostOptionalIntegerParameter request. The method will close the
// http.Response Body if it receives an error.
func (client ExplicitClient) PostOptionalIntegerParameterSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostOptionalIntegerParameterResponder handles the response to the PostOptionalIntegerParameter request. The method always
// closes the http.Response Body.
func (client ExplicitClient) PostOptionalIntegerParameterResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PostOptionalIntegerProperty test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
//
func (client ExplicitClient) PostOptionalIntegerProperty(bodyParameter *IntOptionalWrapper) (result autorest.Response, err error) {
	req, err := client.PostOptionalIntegerPropertyPreparer(bodyParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalIntegerProperty", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostOptionalIntegerPropertySender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalIntegerProperty", resp, "Failure sending request")
		return
	}

	result, err = client.PostOptionalIntegerPropertyResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalIntegerProperty", resp, "Failure responding to request")
	}

	return
}

// PostOptionalIntegerPropertyPreparer prepares the PostOptionalIntegerProperty request.
func (client ExplicitClient) PostOptionalIntegerPropertyPreparer(bodyParameter *IntOptionalWrapper) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/reqopt/optional/integer/property"))
	if bodyParameter != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(bodyParameter))
	}
	return preparer.Prepare(&http.Request{})
}

// PostOptionalIntegerPropertySender sends the PostOptionalIntegerProperty request. The method will close the
// http.Response Body if it receives an error.
func (client ExplicitClient) PostOptionalIntegerPropertySender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostOptionalIntegerPropertyResponder handles the response to the PostOptionalIntegerProperty request. The method always
// closes the http.Response Body.
func (client ExplicitClient) PostOptionalIntegerPropertyResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PostOptionalStringHeader test explicitly optional string. Please put a header 'headerParameter' => null.
//
func (client ExplicitClient) PostOptionalStringHeader(bodyParameter string) (result autorest.Response, err error) {
	req, err := client.PostOptionalStringHeaderPreparer(bodyParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalStringHeader", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostOptionalStringHeaderSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalStringHeader", resp, "Failure sending request")
		return
	}

	result, err = client.PostOptionalStringHeaderResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalStringHeader", resp, "Failure responding to request")
	}

	return
}

// PostOptionalStringHeaderPreparer prepares the PostOptionalStringHeader request.
func (client ExplicitClient) PostOptionalStringHeaderPreparer(bodyParameter string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/reqopt/optional/string/header"))
	if len(bodyParameter) > 0 {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithHeader("bodyParameter", autorest.String(bodyParameter)))
	}
	return preparer.Prepare(&http.Request{})
}

// PostOptionalStringHeaderSender sends the PostOptionalStringHeader request. The method will close the
// http.Response Body if it receives an error.
func (client ExplicitClient) PostOptionalStringHeaderSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostOptionalStringHeaderResponder handles the response to the PostOptionalStringHeader request. The method always
// closes the http.Response Body.
func (client ExplicitClient) PostOptionalStringHeaderResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PostOptionalStringParameter test explicitly optional string. Please put null.
//
func (client ExplicitClient) PostOptionalStringParameter(bodyParameter string) (result autorest.Response, err error) {
	req, err := client.PostOptionalStringParameterPreparer(bodyParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalStringParameter", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostOptionalStringParameterSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalStringParameter", resp, "Failure sending request")
		return
	}

	result, err = client.PostOptionalStringParameterResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalStringParameter", resp, "Failure responding to request")
	}

	return
}

// PostOptionalStringParameterPreparer prepares the PostOptionalStringParameter request.
func (client ExplicitClient) PostOptionalStringParameterPreparer(bodyParameter string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/reqopt/optional/string/parameter"))
	if len(bodyParameter) > 0 {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(bodyParameter))
	}
	return preparer.Prepare(&http.Request{})
}

// PostOptionalStringParameterSender sends the PostOptionalStringParameter request. The method will close the
// http.Response Body if it receives an error.
func (client ExplicitClient) PostOptionalStringParameterSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostOptionalStringParameterResponder handles the response to the PostOptionalStringParameter request. The method always
// closes the http.Response Body.
func (client ExplicitClient) PostOptionalStringParameterResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PostOptionalStringProperty test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
//
func (client ExplicitClient) PostOptionalStringProperty(bodyParameter *StringOptionalWrapper) (result autorest.Response, err error) {
	req, err := client.PostOptionalStringPropertyPreparer(bodyParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalStringProperty", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostOptionalStringPropertySender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalStringProperty", resp, "Failure sending request")
		return
	}

	result, err = client.PostOptionalStringPropertyResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostOptionalStringProperty", resp, "Failure responding to request")
	}

	return
}

// PostOptionalStringPropertyPreparer prepares the PostOptionalStringProperty request.
func (client ExplicitClient) PostOptionalStringPropertyPreparer(bodyParameter *StringOptionalWrapper) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/reqopt/optional/string/property"))
	if bodyParameter != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(bodyParameter))
	}
	return preparer.Prepare(&http.Request{})
}

// PostOptionalStringPropertySender sends the PostOptionalStringProperty request. The method will close the
// http.Response Body if it receives an error.
func (client ExplicitClient) PostOptionalStringPropertySender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostOptionalStringPropertyResponder handles the response to the PostOptionalStringProperty request. The method always
// closes the http.Response Body.
func (client ExplicitClient) PostOptionalStringPropertyResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PostRequiredArrayHeader test explicitly required array. Please put a header 'headerParameter' => null and the client
// library should throw before the request is sent.
//
func (client ExplicitClient) PostRequiredArrayHeader(headerParameter []string) (result Error, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: headerParameter,
			Constraints: []validation.Constraint{{Target: "headerParameter", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "optionalgroup.ExplicitClient", "PostRequiredArrayHeader")
	}

	req, err := client.PostRequiredArrayHeaderPreparer(headerParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredArrayHeader", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostRequiredArrayHeaderSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredArrayHeader", resp, "Failure sending request")
		return
	}

	result, err = client.PostRequiredArrayHeaderResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredArrayHeader", resp, "Failure responding to request")
	}

	return
}

// PostRequiredArrayHeaderPreparer prepares the PostRequiredArrayHeader request.
func (client ExplicitClient) PostRequiredArrayHeaderPreparer(headerParameter []string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/reqopt/requied/array/header"),
		autorest.WithHeader("headerParameter", autorest.String(headerParameter)))
	return preparer.Prepare(&http.Request{})
}

// PostRequiredArrayHeaderSender sends the PostRequiredArrayHeader request. The method will close the
// http.Response Body if it receives an error.
func (client ExplicitClient) PostRequiredArrayHeaderSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostRequiredArrayHeaderResponder handles the response to the PostRequiredArrayHeader request. The method always
// closes the http.Response Body.
func (client ExplicitClient) PostRequiredArrayHeaderResponder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PostRequiredArrayParameter test explicitly required array. Please put null and the client library should throw
// before the request is sent.
//
func (client ExplicitClient) PostRequiredArrayParameter(bodyParameter []string) (result Error, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: bodyParameter,
			Constraints: []validation.Constraint{{Target: "bodyParameter", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "optionalgroup.ExplicitClient", "PostRequiredArrayParameter")
	}

	req, err := client.PostRequiredArrayParameterPreparer(bodyParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredArrayParameter", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostRequiredArrayParameterSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredArrayParameter", resp, "Failure sending request")
		return
	}

	result, err = client.PostRequiredArrayParameterResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredArrayParameter", resp, "Failure responding to request")
	}

	return
}

// PostRequiredArrayParameterPreparer prepares the PostRequiredArrayParameter request.
func (client ExplicitClient) PostRequiredArrayParameterPreparer(bodyParameter []string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/reqopt/requied/array/parameter"),
		autorest.WithJSON(bodyParameter))
	return preparer.Prepare(&http.Request{})
}

// PostRequiredArrayParameterSender sends the PostRequiredArrayParameter request. The method will close the
// http.Response Body if it receives an error.
func (client ExplicitClient) PostRequiredArrayParameterSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostRequiredArrayParameterResponder handles the response to the PostRequiredArrayParameter request. The method always
// closes the http.Response Body.
func (client ExplicitClient) PostRequiredArrayParameterResponder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PostRequiredArrayProperty test explicitly required array. Please put a valid array-wrapper with 'value' = null and
// the client library should throw before the request is sent.
//
func (client ExplicitClient) PostRequiredArrayProperty(bodyParameter ArrayWrapper) (result Error, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: bodyParameter,
			Constraints: []validation.Constraint{{Target: "bodyParameter.Value", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "optionalgroup.ExplicitClient", "PostRequiredArrayProperty")
	}

	req, err := client.PostRequiredArrayPropertyPreparer(bodyParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredArrayProperty", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostRequiredArrayPropertySender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredArrayProperty", resp, "Failure sending request")
		return
	}

	result, err = client.PostRequiredArrayPropertyResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredArrayProperty", resp, "Failure responding to request")
	}

	return
}

// PostRequiredArrayPropertyPreparer prepares the PostRequiredArrayProperty request.
func (client ExplicitClient) PostRequiredArrayPropertyPreparer(bodyParameter ArrayWrapper) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/reqopt/requied/array/property"),
		autorest.WithJSON(bodyParameter))
	return preparer.Prepare(&http.Request{})
}

// PostRequiredArrayPropertySender sends the PostRequiredArrayProperty request. The method will close the
// http.Response Body if it receives an error.
func (client ExplicitClient) PostRequiredArrayPropertySender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostRequiredArrayPropertyResponder handles the response to the PostRequiredArrayProperty request. The method always
// closes the http.Response Body.
func (client ExplicitClient) PostRequiredArrayPropertyResponder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PostRequiredClassParameter test explicitly required complex object. Please put null and the client library should
// throw before the request is sent.
//
func (client ExplicitClient) PostRequiredClassParameter(bodyParameter Product) (result Error, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: bodyParameter,
			Constraints: []validation.Constraint{{Target: "bodyParameter.ID", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "optionalgroup.ExplicitClient", "PostRequiredClassParameter")
	}

	req, err := client.PostRequiredClassParameterPreparer(bodyParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredClassParameter", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostRequiredClassParameterSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredClassParameter", resp, "Failure sending request")
		return
	}

	result, err = client.PostRequiredClassParameterResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredClassParameter", resp, "Failure responding to request")
	}

	return
}

// PostRequiredClassParameterPreparer prepares the PostRequiredClassParameter request.
func (client ExplicitClient) PostRequiredClassParameterPreparer(bodyParameter Product) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/reqopt/requied/class/parameter"),
		autorest.WithJSON(bodyParameter))
	return preparer.Prepare(&http.Request{})
}

// PostRequiredClassParameterSender sends the PostRequiredClassParameter request. The method will close the
// http.Response Body if it receives an error.
func (client ExplicitClient) PostRequiredClassParameterSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostRequiredClassParameterResponder handles the response to the PostRequiredClassParameter request. The method always
// closes the http.Response Body.
func (client ExplicitClient) PostRequiredClassParameterResponder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PostRequiredClassProperty test explicitly required complex object. Please put a valid class-wrapper with 'value' =
// null and the client library should throw before the request is sent.
//
func (client ExplicitClient) PostRequiredClassProperty(bodyParameter ClassWrapper) (result Error, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: bodyParameter,
			Constraints: []validation.Constraint{{Target: "bodyParameter.Value", Name: validation.Null, Rule: true,
				Chain: []validation.Constraint{{Target: "bodyParameter.Value.ID", Name: validation.Null, Rule: true, Chain: nil}}}}}}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "optionalgroup.ExplicitClient", "PostRequiredClassProperty")
	}

	req, err := client.PostRequiredClassPropertyPreparer(bodyParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredClassProperty", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostRequiredClassPropertySender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredClassProperty", resp, "Failure sending request")
		return
	}

	result, err = client.PostRequiredClassPropertyResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredClassProperty", resp, "Failure responding to request")
	}

	return
}

// PostRequiredClassPropertyPreparer prepares the PostRequiredClassProperty request.
func (client ExplicitClient) PostRequiredClassPropertyPreparer(bodyParameter ClassWrapper) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/reqopt/requied/class/property"),
		autorest.WithJSON(bodyParameter))
	return preparer.Prepare(&http.Request{})
}

// PostRequiredClassPropertySender sends the PostRequiredClassProperty request. The method will close the
// http.Response Body if it receives an error.
func (client ExplicitClient) PostRequiredClassPropertySender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostRequiredClassPropertyResponder handles the response to the PostRequiredClassProperty request. The method always
// closes the http.Response Body.
func (client ExplicitClient) PostRequiredClassPropertyResponder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PostRequiredIntegerHeader test explicitly required integer. Please put a header 'headerParameter' => null and the
// client library should throw before the request is sent.
//
func (client ExplicitClient) PostRequiredIntegerHeader(headerParameter int32) (result Error, err error) {
	req, err := client.PostRequiredIntegerHeaderPreparer(headerParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredIntegerHeader", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostRequiredIntegerHeaderSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredIntegerHeader", resp, "Failure sending request")
		return
	}

	result, err = client.PostRequiredIntegerHeaderResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredIntegerHeader", resp, "Failure responding to request")
	}

	return
}

// PostRequiredIntegerHeaderPreparer prepares the PostRequiredIntegerHeader request.
func (client ExplicitClient) PostRequiredIntegerHeaderPreparer(headerParameter int32) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/reqopt/requied/integer/header"),
		autorest.WithHeader("headerParameter", autorest.String(headerParameter)))
	return preparer.Prepare(&http.Request{})
}

// PostRequiredIntegerHeaderSender sends the PostRequiredIntegerHeader request. The method will close the
// http.Response Body if it receives an error.
func (client ExplicitClient) PostRequiredIntegerHeaderSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostRequiredIntegerHeaderResponder handles the response to the PostRequiredIntegerHeader request. The method always
// closes the http.Response Body.
func (client ExplicitClient) PostRequiredIntegerHeaderResponder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PostRequiredIntegerParameter test explicitly required integer. Please put null and the client library should throw
// before the request is sent.
//
func (client ExplicitClient) PostRequiredIntegerParameter(bodyParameter int32) (result Error, err error) {
	req, err := client.PostRequiredIntegerParameterPreparer(bodyParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredIntegerParameter", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostRequiredIntegerParameterSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredIntegerParameter", resp, "Failure sending request")
		return
	}

	result, err = client.PostRequiredIntegerParameterResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredIntegerParameter", resp, "Failure responding to request")
	}

	return
}

// PostRequiredIntegerParameterPreparer prepares the PostRequiredIntegerParameter request.
func (client ExplicitClient) PostRequiredIntegerParameterPreparer(bodyParameter int32) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/reqopt/requied/integer/parameter"),
		autorest.WithJSON(bodyParameter))
	return preparer.Prepare(&http.Request{})
}

// PostRequiredIntegerParameterSender sends the PostRequiredIntegerParameter request. The method will close the
// http.Response Body if it receives an error.
func (client ExplicitClient) PostRequiredIntegerParameterSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostRequiredIntegerParameterResponder handles the response to the PostRequiredIntegerParameter request. The method always
// closes the http.Response Body.
func (client ExplicitClient) PostRequiredIntegerParameterResponder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PostRequiredIntegerProperty test explicitly required integer. Please put a valid int-wrapper with 'value' = null and
// the client library should throw before the request is sent.
//
func (client ExplicitClient) PostRequiredIntegerProperty(bodyParameter IntWrapper) (result Error, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: bodyParameter,
			Constraints: []validation.Constraint{{Target: "bodyParameter.Value", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "optionalgroup.ExplicitClient", "PostRequiredIntegerProperty")
	}

	req, err := client.PostRequiredIntegerPropertyPreparer(bodyParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredIntegerProperty", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostRequiredIntegerPropertySender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredIntegerProperty", resp, "Failure sending request")
		return
	}

	result, err = client.PostRequiredIntegerPropertyResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredIntegerProperty", resp, "Failure responding to request")
	}

	return
}

// PostRequiredIntegerPropertyPreparer prepares the PostRequiredIntegerProperty request.
func (client ExplicitClient) PostRequiredIntegerPropertyPreparer(bodyParameter IntWrapper) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/reqopt/requied/integer/property"),
		autorest.WithJSON(bodyParameter))
	return preparer.Prepare(&http.Request{})
}

// PostRequiredIntegerPropertySender sends the PostRequiredIntegerProperty request. The method will close the
// http.Response Body if it receives an error.
func (client ExplicitClient) PostRequiredIntegerPropertySender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostRequiredIntegerPropertyResponder handles the response to the PostRequiredIntegerProperty request. The method always
// closes the http.Response Body.
func (client ExplicitClient) PostRequiredIntegerPropertyResponder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PostRequiredStringHeader test explicitly required string. Please put a header 'headerParameter' => null and the
// client library should throw before the request is sent.
//
func (client ExplicitClient) PostRequiredStringHeader(headerParameter string) (result Error, err error) {
	req, err := client.PostRequiredStringHeaderPreparer(headerParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredStringHeader", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostRequiredStringHeaderSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredStringHeader", resp, "Failure sending request")
		return
	}

	result, err = client.PostRequiredStringHeaderResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredStringHeader", resp, "Failure responding to request")
	}

	return
}

// PostRequiredStringHeaderPreparer prepares the PostRequiredStringHeader request.
func (client ExplicitClient) PostRequiredStringHeaderPreparer(headerParameter string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/reqopt/requied/string/header"),
		autorest.WithHeader("headerParameter", autorest.String(headerParameter)))
	return preparer.Prepare(&http.Request{})
}

// PostRequiredStringHeaderSender sends the PostRequiredStringHeader request. The method will close the
// http.Response Body if it receives an error.
func (client ExplicitClient) PostRequiredStringHeaderSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostRequiredStringHeaderResponder handles the response to the PostRequiredStringHeader request. The method always
// closes the http.Response Body.
func (client ExplicitClient) PostRequiredStringHeaderResponder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PostRequiredStringParameter test explicitly required string. Please put null and the client library should throw
// before the request is sent.
//
func (client ExplicitClient) PostRequiredStringParameter(bodyParameter string) (result Error, err error) {
	req, err := client.PostRequiredStringParameterPreparer(bodyParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredStringParameter", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostRequiredStringParameterSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredStringParameter", resp, "Failure sending request")
		return
	}

	result, err = client.PostRequiredStringParameterResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredStringParameter", resp, "Failure responding to request")
	}

	return
}

// PostRequiredStringParameterPreparer prepares the PostRequiredStringParameter request.
func (client ExplicitClient) PostRequiredStringParameterPreparer(bodyParameter string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/reqopt/requied/string/parameter"),
		autorest.WithJSON(bodyParameter))
	return preparer.Prepare(&http.Request{})
}

// PostRequiredStringParameterSender sends the PostRequiredStringParameter request. The method will close the
// http.Response Body if it receives an error.
func (client ExplicitClient) PostRequiredStringParameterSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostRequiredStringParameterResponder handles the response to the PostRequiredStringParameter request. The method always
// closes the http.Response Body.
func (client ExplicitClient) PostRequiredStringParameterResponder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PostRequiredStringProperty test explicitly required string. Please put a valid string-wrapper with 'value' = null
// and the client library should throw before the request is sent.
//
func (client ExplicitClient) PostRequiredStringProperty(bodyParameter StringWrapper) (result Error, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: bodyParameter,
			Constraints: []validation.Constraint{{Target: "bodyParameter.Value", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "optionalgroup.ExplicitClient", "PostRequiredStringProperty")
	}

	req, err := client.PostRequiredStringPropertyPreparer(bodyParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredStringProperty", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostRequiredStringPropertySender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredStringProperty", resp, "Failure sending request")
		return
	}

	result, err = client.PostRequiredStringPropertyResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "optionalgroup.ExplicitClient", "PostRequiredStringProperty", resp, "Failure responding to request")
	}

	return
}

// PostRequiredStringPropertyPreparer prepares the PostRequiredStringProperty request.
func (client ExplicitClient) PostRequiredStringPropertyPreparer(bodyParameter StringWrapper) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/reqopt/requied/string/property"),
		autorest.WithJSON(bodyParameter))
	return preparer.Prepare(&http.Request{})
}

// PostRequiredStringPropertySender sends the PostRequiredStringProperty request. The method will close the
// http.Response Body if it receives an error.
func (client ExplicitClient) PostRequiredStringPropertySender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostRequiredStringPropertyResponder handles the response to the PostRequiredStringProperty request. The method always
// closes the http.Response Body.
func (client ExplicitClient) PostRequiredStringPropertyResponder(resp *http.Response) (result Error, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
