// Package modelflatteninggroup implements the Azure ARM Modelflatteninggroup service API version 1.0.0.
//
// Resource Flattening for AutoRest
package modelflatteninggroup

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"net/http"
)

const (
	// DefaultBaseURI is the default URI used for the service Modelflatteninggroup
	DefaultBaseURI = "http://localhost"
)

// ManagementClient is the base client for Modelflatteninggroup.
type ManagementClient struct {
	autorest.Client
	BaseURI string
}

// New creates an instance of the ManagementClient client.
func New() ManagementClient {
	return NewWithBaseURI(DefaultBaseURI)
}

// NewWithBaseURI creates an instance of the ManagementClient client.
func NewWithBaseURI(baseURI string) ManagementClient {
	return ManagementClient{
		Client:  autorest.NewClientWithUserAgent(UserAgent()),
		BaseURI: baseURI,
	}
}

// GetArray get External Resource as an Array
func (client ManagementClient) GetArray() (result ListFlattenedProduct, err error) {
	req, err := client.GetArrayPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "GetArray", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetArraySender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "GetArray", resp, "Failure sending request")
		return
	}

	result, err = client.GetArrayResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "GetArray", resp, "Failure responding to request")
	}

	return
}

// GetArrayPreparer prepares the GetArray request.
func (client ManagementClient) GetArrayPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/model-flatten/array"))
	return preparer.Prepare(&http.Request{})
}

// GetArraySender sends the GetArray request. The method will close the
// http.Response Body if it receives an error.
func (client ManagementClient) GetArraySender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetArrayResponder handles the response to the GetArray request. The method always
// closes the http.Response Body.
func (client ManagementClient) GetArrayResponder(resp *http.Response) (result ListFlattenedProduct, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetDictionary get External Resource as a Dictionary
func (client ManagementClient) GetDictionary() (result SetFlattenedProduct, err error) {
	req, err := client.GetDictionaryPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "GetDictionary", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetDictionarySender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "GetDictionary", resp, "Failure sending request")
		return
	}

	result, err = client.GetDictionaryResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "GetDictionary", resp, "Failure responding to request")
	}

	return
}

// GetDictionaryPreparer prepares the GetDictionary request.
func (client ManagementClient) GetDictionaryPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/model-flatten/dictionary"))
	return preparer.Prepare(&http.Request{})
}

// GetDictionarySender sends the GetDictionary request. The method will close the
// http.Response Body if it receives an error.
func (client ManagementClient) GetDictionarySender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetDictionaryResponder handles the response to the GetDictionary request. The method always
// closes the http.Response Body.
func (client ManagementClient) GetDictionaryResponder(resp *http.Response) (result SetFlattenedProduct, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetResourceCollection get External Resource as a ResourceCollection
func (client ManagementClient) GetResourceCollection() (result ResourceCollection, err error) {
	req, err := client.GetResourceCollectionPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "GetResourceCollection", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetResourceCollectionSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "GetResourceCollection", resp, "Failure sending request")
		return
	}

	result, err = client.GetResourceCollectionResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "GetResourceCollection", resp, "Failure responding to request")
	}

	return
}

// GetResourceCollectionPreparer prepares the GetResourceCollection request.
func (client ManagementClient) GetResourceCollectionPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/model-flatten/resourcecollection"))
	return preparer.Prepare(&http.Request{})
}

// GetResourceCollectionSender sends the GetResourceCollection request. The method will close the
// http.Response Body if it receives an error.
func (client ManagementClient) GetResourceCollectionSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetResourceCollectionResponder handles the response to the GetResourceCollection request. The method always
// closes the http.Response Body.
func (client ManagementClient) GetResourceCollectionResponder(resp *http.Response) (result ResourceCollection, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetWrappedArray no need to have a route in Express server for this operation. Used to verify the type flattened is
// not removed if it's referenced in an array
func (client ManagementClient) GetWrappedArray() (result ListProductWrapper, err error) {
	req, err := client.GetWrappedArrayPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "GetWrappedArray", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetWrappedArraySender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "GetWrappedArray", resp, "Failure sending request")
		return
	}

	result, err = client.GetWrappedArrayResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "GetWrappedArray", resp, "Failure responding to request")
	}

	return
}

// GetWrappedArrayPreparer prepares the GetWrappedArray request.
func (client ManagementClient) GetWrappedArrayPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/model-flatten/wrappedarray"))
	return preparer.Prepare(&http.Request{})
}

// GetWrappedArraySender sends the GetWrappedArray request. The method will close the
// http.Response Body if it receives an error.
func (client ManagementClient) GetWrappedArraySender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetWrappedArrayResponder handles the response to the GetWrappedArray request. The method always
// closes the http.Response Body.
func (client ManagementClient) GetWrappedArrayResponder(resp *http.Response) (result ListProductWrapper, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PostFlattenedSimpleProduct put Flattened Simple Product with client flattening true on the parameter
//
// simpleBodyProduct is simple body product to post
func (client ManagementClient) PostFlattenedSimpleProduct(simpleBodyProduct *SimpleProduct) (result SimpleProduct, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: simpleBodyProduct,
			Constraints: []validation.Constraint{{Target: "simpleBodyProduct", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "simpleBodyProduct.SimpleProductProperties", Name: validation.Null, Rule: false,
					Chain: []validation.Constraint{{Target: "simpleBodyProduct.SimpleProductProperties.MaxProductDisplayName", Name: validation.Null, Rule: true, Chain: nil},
						{Target: "simpleBodyProduct.SimpleProductProperties.Capacity", Name: validation.Null, Rule: true, Chain: nil},
					}},
				}}}}}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "modelflatteninggroup.ManagementClient", "PostFlattenedSimpleProduct")
	}

	req, err := client.PostFlattenedSimpleProductPreparer(simpleBodyProduct)
	if err != nil {
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "PostFlattenedSimpleProduct", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostFlattenedSimpleProductSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "PostFlattenedSimpleProduct", resp, "Failure sending request")
		return
	}

	result, err = client.PostFlattenedSimpleProductResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "PostFlattenedSimpleProduct", resp, "Failure responding to request")
	}

	return
}

// PostFlattenedSimpleProductPreparer prepares the PostFlattenedSimpleProduct request.
func (client ManagementClient) PostFlattenedSimpleProductPreparer(simpleBodyProduct *SimpleProduct) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/model-flatten/customFlattening"))
	if simpleBodyProduct != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(simpleBodyProduct))
	}
	return preparer.Prepare(&http.Request{})
}

// PostFlattenedSimpleProductSender sends the PostFlattenedSimpleProduct request. The method will close the
// http.Response Body if it receives an error.
func (client ManagementClient) PostFlattenedSimpleProductSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// PostFlattenedSimpleProductResponder handles the response to the PostFlattenedSimpleProduct request. The method always
// closes the http.Response Body.
func (client ManagementClient) PostFlattenedSimpleProductResponder(resp *http.Response) (result SimpleProduct, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PutArray put External Resource as an Array
//
// resourceArray is external Resource as an Array to put
func (client ManagementClient) PutArray(resourceArray []Resource) (result autorest.Response, err error) {
	req, err := client.PutArrayPreparer(resourceArray)
	if err != nil {
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "PutArray", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutArraySender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "PutArray", resp, "Failure sending request")
		return
	}

	result, err = client.PutArrayResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "PutArray", resp, "Failure responding to request")
	}

	return
}

// PutArrayPreparer prepares the PutArray request.
func (client ManagementClient) PutArrayPreparer(resourceArray []Resource) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/model-flatten/array"))
	if resourceArray != nil && len(resourceArray) > 0 {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(resourceArray))
	}
	return preparer.Prepare(&http.Request{})
}

// PutArraySender sends the PutArray request. The method will close the
// http.Response Body if it receives an error.
func (client ManagementClient) PutArraySender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// PutArrayResponder handles the response to the PutArray request. The method always
// closes the http.Response Body.
func (client ManagementClient) PutArrayResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PutDictionary put External Resource as a Dictionary
//
// resourceDictionary is external Resource as a Dictionary to put
func (client ManagementClient) PutDictionary(resourceDictionary map[string]*FlattenedProduct) (result autorest.Response, err error) {
	req, err := client.PutDictionaryPreparer(resourceDictionary)
	if err != nil {
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "PutDictionary", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutDictionarySender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "PutDictionary", resp, "Failure sending request")
		return
	}

	result, err = client.PutDictionaryResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "PutDictionary", resp, "Failure responding to request")
	}

	return
}

// PutDictionaryPreparer prepares the PutDictionary request.
func (client ManagementClient) PutDictionaryPreparer(resourceDictionary map[string]*FlattenedProduct) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/model-flatten/dictionary"))
	if resourceDictionary != nil && len(resourceDictionary) > 0 {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(resourceDictionary))
	}
	return preparer.Prepare(&http.Request{})
}

// PutDictionarySender sends the PutDictionary request. The method will close the
// http.Response Body if it receives an error.
func (client ManagementClient) PutDictionarySender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// PutDictionaryResponder handles the response to the PutDictionary request. The method always
// closes the http.Response Body.
func (client ManagementClient) PutDictionaryResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PutResourceCollection put External Resource as a ResourceCollection
//
// resourceComplexObject is external Resource as a ResourceCollection to put
func (client ManagementClient) PutResourceCollection(resourceComplexObject *ResourceCollection) (result autorest.Response, err error) {
	req, err := client.PutResourceCollectionPreparer(resourceComplexObject)
	if err != nil {
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "PutResourceCollection", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutResourceCollectionSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "PutResourceCollection", resp, "Failure sending request")
		return
	}

	result, err = client.PutResourceCollectionResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "PutResourceCollection", resp, "Failure responding to request")
	}

	return
}

// PutResourceCollectionPreparer prepares the PutResourceCollection request.
func (client ManagementClient) PutResourceCollectionPreparer(resourceComplexObject *ResourceCollection) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/model-flatten/resourcecollection"))
	if resourceComplexObject != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(resourceComplexObject))
	}
	return preparer.Prepare(&http.Request{})
}

// PutResourceCollectionSender sends the PutResourceCollection request. The method will close the
// http.Response Body if it receives an error.
func (client ManagementClient) PutResourceCollectionSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// PutResourceCollectionResponder handles the response to the PutResourceCollection request. The method always
// closes the http.Response Body.
func (client ManagementClient) PutResourceCollectionResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PutSimpleProduct put Simple Product with client flattening true on the model
//
// simpleBodyProduct is simple body product to put
func (client ManagementClient) PutSimpleProduct(simpleBodyProduct *SimpleProduct) (result SimpleProduct, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: simpleBodyProduct,
			Constraints: []validation.Constraint{{Target: "simpleBodyProduct", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "simpleBodyProduct.SimpleProductProperties", Name: validation.Null, Rule: false,
					Chain: []validation.Constraint{{Target: "simpleBodyProduct.SimpleProductProperties.MaxProductDisplayName", Name: validation.Null, Rule: true, Chain: nil},
						{Target: "simpleBodyProduct.SimpleProductProperties.Capacity", Name: validation.Null, Rule: true, Chain: nil},
					}},
				}}}}}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "modelflatteninggroup.ManagementClient", "PutSimpleProduct")
	}

	req, err := client.PutSimpleProductPreparer(simpleBodyProduct)
	if err != nil {
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "PutSimpleProduct", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutSimpleProductSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "PutSimpleProduct", resp, "Failure sending request")
		return
	}

	result, err = client.PutSimpleProductResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "PutSimpleProduct", resp, "Failure responding to request")
	}

	return
}

// PutSimpleProductPreparer prepares the PutSimpleProduct request.
func (client ManagementClient) PutSimpleProductPreparer(simpleBodyProduct *SimpleProduct) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/model-flatten/customFlattening"))
	if simpleBodyProduct != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(simpleBodyProduct))
	}
	return preparer.Prepare(&http.Request{})
}

// PutSimpleProductSender sends the PutSimpleProduct request. The method will close the
// http.Response Body if it receives an error.
func (client ManagementClient) PutSimpleProductSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// PutSimpleProductResponder handles the response to the PutSimpleProduct request. The method always
// closes the http.Response Body.
func (client ManagementClient) PutSimpleProductResponder(resp *http.Response) (result SimpleProduct, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PutSimpleProductWithGrouping put Simple Product with client flattening true on the model
//
// name is product name with value 'groupproduct' simpleBodyProduct is simple body product to put
func (client ManagementClient) PutSimpleProductWithGrouping(name string, simpleBodyProduct *SimpleProduct) (result SimpleProduct, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: simpleBodyProduct,
			Constraints: []validation.Constraint{{Target: "simpleBodyProduct", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "simpleBodyProduct.SimpleProductProperties", Name: validation.Null, Rule: false,
					Chain: []validation.Constraint{{Target: "simpleBodyProduct.SimpleProductProperties.MaxProductDisplayName", Name: validation.Null, Rule: true, Chain: nil},
						{Target: "simpleBodyProduct.SimpleProductProperties.Capacity", Name: validation.Null, Rule: true, Chain: nil},
					}},
				}}}}}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "modelflatteninggroup.ManagementClient", "PutSimpleProductWithGrouping")
	}

	req, err := client.PutSimpleProductWithGroupingPreparer(name, simpleBodyProduct)
	if err != nil {
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "PutSimpleProductWithGrouping", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutSimpleProductWithGroupingSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "PutSimpleProductWithGrouping", resp, "Failure sending request")
		return
	}

	result, err = client.PutSimpleProductWithGroupingResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "PutSimpleProductWithGrouping", resp, "Failure responding to request")
	}

	return
}

// PutSimpleProductWithGroupingPreparer prepares the PutSimpleProductWithGrouping request.
func (client ManagementClient) PutSimpleProductWithGroupingPreparer(name string, simpleBodyProduct *SimpleProduct) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"name": autorest.Encode("path", name),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/model-flatten/customFlattening/parametergrouping/{name}/", pathParameters))
	if simpleBodyProduct != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(simpleBodyProduct))
	}
	return preparer.Prepare(&http.Request{})
}

// PutSimpleProductWithGroupingSender sends the PutSimpleProductWithGrouping request. The method will close the
// http.Response Body if it receives an error.
func (client ManagementClient) PutSimpleProductWithGroupingSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// PutSimpleProductWithGroupingResponder handles the response to the PutSimpleProductWithGrouping request. The method always
// closes the http.Response Body.
func (client ManagementClient) PutSimpleProductWithGroupingResponder(resp *http.Response) (result SimpleProduct, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PutWrappedArray no need to have a route in Express server for this operation. Used to verify the type flattened is
// not removed if it's referenced in an array
//
// resourceArray is external Resource as an Array to put
func (client ManagementClient) PutWrappedArray(resourceArray []WrappedProduct) (result autorest.Response, err error) {
	req, err := client.PutWrappedArrayPreparer(resourceArray)
	if err != nil {
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "PutWrappedArray", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutWrappedArraySender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "PutWrappedArray", resp, "Failure sending request")
		return
	}

	result, err = client.PutWrappedArrayResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "modelflatteninggroup.ManagementClient", "PutWrappedArray", resp, "Failure responding to request")
	}

	return
}

// PutWrappedArrayPreparer prepares the PutWrappedArray request.
func (client ManagementClient) PutWrappedArrayPreparer(resourceArray []WrappedProduct) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/model-flatten/wrappedarray"))
	if resourceArray != nil && len(resourceArray) > 0 {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(resourceArray))
	}
	return preparer.Prepare(&http.Request{})
}

// PutWrappedArraySender sends the PutWrappedArray request. The method will close the
// http.Response Body if it receives an error.
func (client ManagementClient) PutWrappedArraySender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// PutWrappedArrayResponder handles the response to the PutWrappedArray request. The method always
// closes the http.Response Body.
func (client ManagementClient) PutWrappedArrayResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}
