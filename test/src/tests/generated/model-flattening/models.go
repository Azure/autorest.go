package modelflatteninggroup

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/json"
	"github.com/Azure/go-autorest/autorest"
)

// ProvisioningStateValues enumerates the values for provisioning state values.
type ProvisioningStateValues string

const (
	// Accepted ...
	Accepted ProvisioningStateValues = "Accepted"
	// Canceled ...
	Canceled ProvisioningStateValues = "canceled"
	// Created ...
	Created ProvisioningStateValues = "Created"
	// Creating ...
	Creating ProvisioningStateValues = "Creating"
	// Deleted ...
	Deleted ProvisioningStateValues = "Deleted"
	// Deleting ...
	Deleting ProvisioningStateValues = "Deleting"
	// Failed ...
	Failed ProvisioningStateValues = "Failed"
	// OK ...
	OK ProvisioningStateValues = "OK"
	// Succeeded ...
	Succeeded ProvisioningStateValues = "Succeeded"
	// Updated ...
	Updated ProvisioningStateValues = "Updated"
	// Updating ...
	Updating ProvisioningStateValues = "Updating"
)

// BaseProduct the product documentation.
type BaseProduct struct {
	// ProductID - Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.
	ProductID *string `json:"base_product_id,omitempty"`
	// Description - Description of product.
	Description *string `json:"base_product_description,omitempty"`
}

// Error ...
type Error struct {
	Status  *int32  `json:"status,omitempty"`
	Message *string `json:"message,omitempty"`
	*Error  `json:"parentError,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for Error struct.
func (e *Error) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["status"]
	if v != nil {
		var status int32
		err = json.Unmarshal(*m["status"], &status)
		if err != nil {
			return err
		}
		e.Status = &status
	}

	v = m["message"]
	if v != nil {
		var message string
		err = json.Unmarshal(*m["message"], &message)
		if err != nil {
			return err
		}
		e.Message = &message
	}

	v = m["parentError"]
	if v != nil {
		var parentError Error
		err = json.Unmarshal(*m["parentError"], &parentError)
		if err != nil {
			return err
		}
		e.Error = &parentError
	}

	return nil
}

// FlattenedProduct flattened product.
type FlattenedProduct struct {
	// ID - Resource Id
	ID *string `json:"id,omitempty"`
	// Type - Resource Type
	Type *string             `json:"type,omitempty"`
	Tags *map[string]*string `json:"tags,omitempty"`
	// Location - Resource Location
	Location *string `json:"location,omitempty"`
	// Name - Resource Name
	Name                        *string `json:"name,omitempty"`
	*FlattenedProductProperties `json:"properties,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for FlattenedProduct struct.
func (fp *FlattenedProduct) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["properties"]
	if v != nil {
		var properties FlattenedProductProperties
		err = json.Unmarshal(*m["properties"], &properties)
		if err != nil {
			return err
		}
		fp.FlattenedProductProperties = &properties
	}

	v = m["id"]
	if v != nil {
		var ID string
		err = json.Unmarshal(*m["id"], &ID)
		if err != nil {
			return err
		}
		fp.ID = &ID
	}

	v = m["type"]
	if v != nil {
		var typeVar string
		err = json.Unmarshal(*m["type"], &typeVar)
		if err != nil {
			return err
		}
		fp.Type = &typeVar
	}

	v = m["tags"]
	if v != nil {
		var tags map[string]*string
		err = json.Unmarshal(*m["tags"], &tags)
		if err != nil {
			return err
		}
		fp.Tags = &tags
	}

	v = m["location"]
	if v != nil {
		var location string
		err = json.Unmarshal(*m["location"], &location)
		if err != nil {
			return err
		}
		fp.Location = &location
	}

	v = m["name"]
	if v != nil {
		var name string
		err = json.Unmarshal(*m["name"], &name)
		if err != nil {
			return err
		}
		fp.Name = &name
	}

	return nil
}

// FlattenedProductProperties ...
type FlattenedProductProperties struct {
	PName *string `json:"p.name,omitempty"`
	Type  *string `json:"type,omitempty"`
	// ProvisioningStateValues - Possible values include: 'Succeeded', 'Failed', 'Canceled', 'Accepted', 'Creating', 'Created', 'Updating', 'Updated', 'Deleting', 'Deleted', 'OK'
	ProvisioningStateValues ProvisioningStateValues `json:"provisioningStateValues,omitempty"`
	ProvisioningState       *string                 `json:"provisioningState,omitempty"`
}

// GenericURL the Generic URL.
type GenericURL struct {
	// GenericValue - Generic URL value.
	GenericValue *string `json:"generic_value,omitempty"`
}

// ListFlattenedProduct ...
type ListFlattenedProduct struct {
	autorest.Response `json:"-"`
	Value             *[]FlattenedProduct `json:"value,omitempty"`
}

// ListProductWrapper ...
type ListProductWrapper struct {
	autorest.Response `json:"-"`
	Value             *[]ProductWrapper `json:"value,omitempty"`
}

// ProductURL the product URL.
type ProductURL struct {
	// GenericValue - Generic URL value.
	GenericValue *string `json:"generic_value,omitempty"`
	// OdataValue - URL value.
	OdataValue *string `json:"@odata.value,omitempty"`
}

// ProductWrapper the wrapped produc.
type ProductWrapper struct {
	*WrappedProduct `json:"property,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for ProductWrapper struct.
func (pw *ProductWrapper) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["property"]
	if v != nil {
		var property WrappedProduct
		err = json.Unmarshal(*m["property"], &property)
		if err != nil {
			return err
		}
		pw.WrappedProduct = &property
	}

	return nil
}

// Resource ...
type Resource struct {
	// ID - Resource Id
	ID *string `json:"id,omitempty"`
	// Type - Resource Type
	Type *string             `json:"type,omitempty"`
	Tags *map[string]*string `json:"tags,omitempty"`
	// Location - Resource Location
	Location *string `json:"location,omitempty"`
	// Name - Resource Name
	Name *string `json:"name,omitempty"`
}

// ResourceCollection ...
type ResourceCollection struct {
	autorest.Response     `json:"-"`
	Productresource       *FlattenedProduct             `json:"productresource,omitempty"`
	Arrayofresources      *[]FlattenedProduct           `json:"arrayofresources,omitempty"`
	Dictionaryofresources *map[string]*FlattenedProduct `json:"dictionaryofresources,omitempty"`
}

// SetFlattenedProduct ...
type SetFlattenedProduct struct {
	autorest.Response `json:"-"`
	Value             *map[string]*FlattenedProduct `json:"value,omitempty"`
}

// SimpleProduct the product documentation.
type SimpleProduct struct {
	autorest.Response `json:"-"`
	// ProductID - Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.
	ProductID *string `json:"base_product_id,omitempty"`
	// Description - Description of product.
	Description              *string `json:"base_product_description,omitempty"`
	*SimpleProductProperties `json:"details,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for SimpleProduct struct.
func (sp *SimpleProduct) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["details"]
	if v != nil {
		var details SimpleProductProperties
		err = json.Unmarshal(*m["details"], &details)
		if err != nil {
			return err
		}
		sp.SimpleProductProperties = &details
	}

	v = m["base_product_id"]
	if v != nil {
		var baseProductID string
		err = json.Unmarshal(*m["base_product_id"], &baseProductID)
		if err != nil {
			return err
		}
		sp.ProductID = &baseProductID
	}

	v = m["base_product_description"]
	if v != nil {
		var baseProductDescription string
		err = json.Unmarshal(*m["base_product_description"], &baseProductDescription)
		if err != nil {
			return err
		}
		sp.Description = &baseProductDescription
	}

	return nil
}

// SimpleProductProperties the product documentation.
type SimpleProductProperties struct {
	// MaxProductDisplayName - Display name of product.
	MaxProductDisplayName *string `json:"max_product_display_name,omitempty"`
	// Capacity - Capacity of product. For example, 4 people.
	Capacity    *string `json:"max_product_capacity,omitempty"`
	*ProductURL `json:"max_product_image,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for SimpleProductProperties struct.
func (spp *SimpleProductProperties) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["max_product_display_name"]
	if v != nil {
		var maxProductDisplayName string
		err = json.Unmarshal(*m["max_product_display_name"], &maxProductDisplayName)
		if err != nil {
			return err
		}
		spp.MaxProductDisplayName = &maxProductDisplayName
	}

	v = m["max_product_capacity"]
	if v != nil {
		var maxProductCapacity string
		err = json.Unmarshal(*m["max_product_capacity"], &maxProductCapacity)
		if err != nil {
			return err
		}
		spp.Capacity = &maxProductCapacity
	}

	v = m["max_product_image"]
	if v != nil {
		var maxProductImage ProductURL
		err = json.Unmarshal(*m["max_product_image"], &maxProductImage)
		if err != nil {
			return err
		}
		spp.ProductURL = &maxProductImage
	}

	return nil
}

// WrappedProduct the wrapped produc.
type WrappedProduct struct {
	// Value - the product value
	Value *string `json:"value,omitempty"`
}
