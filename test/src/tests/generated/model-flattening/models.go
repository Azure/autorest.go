package modelflatteninggroup

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
)

// ProvisioningStateValues enumerates the values for provisioning state values.
type ProvisioningStateValues string

const (
	// Accepted ...
	Accepted ProvisioningStateValues = "Accepted"
	// Canceled ...
	Canceled ProvisioningStateValues = "canceled"
	// Created ...
	Created ProvisioningStateValues = "Created"
	// Creating ...
	Creating ProvisioningStateValues = "Creating"
	// Deleted ...
	Deleted ProvisioningStateValues = "Deleted"
	// Deleting ...
	Deleting ProvisioningStateValues = "Deleting"
	// Failed ...
	Failed ProvisioningStateValues = "Failed"
	// OK ...
	OK ProvisioningStateValues = "OK"
	// Succeeded ...
	Succeeded ProvisioningStateValues = "Succeeded"
	// Updated ...
	Updated ProvisioningStateValues = "Updated"
	// Updating ...
	Updating ProvisioningStateValues = "Updating"
)

// BaseProduct the product documentation.
type BaseProduct struct {
	// ProductID - Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.
	ProductID *string `json:"base_product_id,omitempty"`
	// Description - Description of product.
	Description *string `json:"base_product_description,omitempty"`
}

// Error ...
type Error struct {
	Status  *int32  `json:"status,omitempty"`
	Message *string `json:"message,omitempty"`
	*Error  `json:"parentError,omitempty"`
}

// FlattenedProduct flattened product.
type FlattenedProduct struct {
	// ID - Resource Id
	ID *string `json:"id,omitempty"`
	// Type - Resource Type
	Type *string             `json:"type,omitempty"`
	Tags *map[string]*string `json:"tags,omitempty"`
	// Location - Resource Location
	Location *string `json:"location,omitempty"`
	// Name - Resource Name
	Name                        *string `json:"name,omitempty"`
	*FlattenedProductProperties `json:"properties,omitempty"`
}

// FlattenedProductProperties ...
type FlattenedProductProperties struct {
	PName *string `json:"p.name,omitempty"`
	Type  *string `json:"type,omitempty"`
	// ProvisioningStateValues - Possible values include: 'Succeeded', 'Failed', 'Canceled', 'Accepted', 'Creating', 'Created', 'Updating', 'Updated', 'Deleting', 'Deleted', 'OK'
	ProvisioningStateValues ProvisioningStateValues `json:"provisioningStateValues,omitempty"`
	ProvisioningState       *string                 `json:"provisioningState,omitempty"`
}

// GenericURL the Generic URL.
type GenericURL struct {
	// GenericValue - Generic URL value.
	GenericValue *string `json:"generic_value,omitempty"`
}

// ListFlattenedProduct ...
type ListFlattenedProduct struct {
	autorest.Response `json:"-"`
	Value             *[]FlattenedProduct `json:"value,omitempty"`
}

// ListProductWrapper ...
type ListProductWrapper struct {
	autorest.Response `json:"-"`
	Value             *[]ProductWrapper `json:"value,omitempty"`
}

// ProductURL the product URL.
type ProductURL struct {
	// GenericValue - Generic URL value.
	GenericValue *string `json:"generic_value,omitempty"`
	// OdataValue - URL value.
	OdataValue *string `json:"@odata.value,omitempty"`
}

// ProductWrapper the wrapped produc.
type ProductWrapper struct {
	*WrappedProduct `json:"property,omitempty"`
}

// Resource ...
type Resource struct {
	// ID - Resource Id
	ID *string `json:"id,omitempty"`
	// Type - Resource Type
	Type *string             `json:"type,omitempty"`
	Tags *map[string]*string `json:"tags,omitempty"`
	// Location - Resource Location
	Location *string `json:"location,omitempty"`
	// Name - Resource Name
	Name *string `json:"name,omitempty"`
}

// ResourceCollection ...
type ResourceCollection struct {
	autorest.Response     `json:"-"`
	Productresource       *FlattenedProduct             `json:"productresource,omitempty"`
	Arrayofresources      *[]FlattenedProduct           `json:"arrayofresources,omitempty"`
	Dictionaryofresources *map[string]*FlattenedProduct `json:"dictionaryofresources,omitempty"`
}

// SetFlattenedProduct ...
type SetFlattenedProduct struct {
	autorest.Response `json:"-"`
	Value             *map[string]*FlattenedProduct `json:"value,omitempty"`
}

// SimpleProduct the product documentation.
type SimpleProduct struct {
	autorest.Response `json:"-"`
	// ProductID - Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.
	ProductID *string `json:"base_product_id,omitempty"`
	// Description - Description of product.
	Description              *string `json:"base_product_description,omitempty"`
	*SimpleProductProperties `json:"details,omitempty"`
}

// SimpleProductProperties the product documentation.
type SimpleProductProperties struct {
	// MaxProductDisplayName - Display name of product.
	MaxProductDisplayName *string `json:"max_product_display_name,omitempty"`
	// Capacity - Capacity of product. For example, 4 people.
	Capacity    *string `json:"max_product_capacity,omitempty"`
	*ProductURL `json:"max_product_image,omitempty"`
}

// WrappedProduct the wrapped produc.
type WrappedProduct struct {
	// Value - the product value
	Value *string `json:"value,omitempty"`
}
