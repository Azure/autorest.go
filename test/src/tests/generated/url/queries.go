package urlgroup

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/Azure/go-autorest/autorest/validation"
	"net/http"
)

// QueriesClient is the test Infrastructure for AutoRest
type QueriesClient struct {
	ManagementClient
}

// NewQueriesClient creates an instance of the QueriesClient client.
func NewQueriesClient(globalStringPath string, globalStringQuery string) QueriesClient {
	return NewQueriesClientWithBaseURI(DefaultBaseURI, globalStringPath, globalStringQuery)
}

// NewQueriesClientWithBaseURI creates an instance of the QueriesClient client.
func NewQueriesClientWithBaseURI(baseURI string, globalStringPath string, globalStringQuery string) QueriesClient {
	return QueriesClient{NewWithBaseURI(baseURI, globalStringPath, globalStringQuery)}
}

// ArrayStringCsvEmpty get an empty array [] of string using the csv-array format
//
// arrayQuery is an empty array [] of string using the csv-array format
func (client QueriesClient) ArrayStringCsvEmpty(arrayQuery []string) (result autorest.Response, err error) {
	req, err := client.ArrayStringCsvEmptyPreparer(arrayQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "ArrayStringCsvEmpty", nil, "Failure preparing request")
		return
	}

	resp, err := client.ArrayStringCsvEmptySender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "ArrayStringCsvEmpty", resp, "Failure sending request")
		return
	}

	result, err = client.ArrayStringCsvEmptyResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "ArrayStringCsvEmpty", resp, "Failure responding to request")
	}

	return
}

// ArrayStringCsvEmptyPreparer prepares the ArrayStringCsvEmpty request.
func (client QueriesClient) ArrayStringCsvEmptyPreparer(arrayQuery []string) (*http.Request, error) {
	queryParameters := map[string]interface{}{}
	if arrayQuery != nil && len(arrayQuery) > 0 {
		queryParameters["arrayQuery"] = autorest.Encode("query", arrayQuery, ",")
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/array/csv/string/empty"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// ArrayStringCsvEmptySender sends the ArrayStringCsvEmpty request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) ArrayStringCsvEmptySender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// ArrayStringCsvEmptyResponder handles the response to the ArrayStringCsvEmpty request. The method always
// closes the http.Response Body.
func (client QueriesClient) ArrayStringCsvEmptyResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ArrayStringCsvNull get a null array of string using the csv-array format
//
// arrayQuery is a null array of string using the csv-array format
func (client QueriesClient) ArrayStringCsvNull(arrayQuery []string) (result autorest.Response, err error) {
	req, err := client.ArrayStringCsvNullPreparer(arrayQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "ArrayStringCsvNull", nil, "Failure preparing request")
		return
	}

	resp, err := client.ArrayStringCsvNullSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "ArrayStringCsvNull", resp, "Failure sending request")
		return
	}

	result, err = client.ArrayStringCsvNullResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "ArrayStringCsvNull", resp, "Failure responding to request")
	}

	return
}

// ArrayStringCsvNullPreparer prepares the ArrayStringCsvNull request.
func (client QueriesClient) ArrayStringCsvNullPreparer(arrayQuery []string) (*http.Request, error) {
	queryParameters := map[string]interface{}{}
	if arrayQuery != nil && len(arrayQuery) > 0 {
		queryParameters["arrayQuery"] = autorest.Encode("query", arrayQuery, ",")
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/array/csv/string/null"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// ArrayStringCsvNullSender sends the ArrayStringCsvNull request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) ArrayStringCsvNullSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// ArrayStringCsvNullResponder handles the response to the ArrayStringCsvNull request. The method always
// closes the http.Response Body.
func (client QueriesClient) ArrayStringCsvNullResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ArrayStringCsvValid get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the
// csv-array format
//
// arrayQuery is an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the csv-array
// format
func (client QueriesClient) ArrayStringCsvValid(arrayQuery []string) (result autorest.Response, err error) {
	req, err := client.ArrayStringCsvValidPreparer(arrayQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "ArrayStringCsvValid", nil, "Failure preparing request")
		return
	}

	resp, err := client.ArrayStringCsvValidSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "ArrayStringCsvValid", resp, "Failure sending request")
		return
	}

	result, err = client.ArrayStringCsvValidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "ArrayStringCsvValid", resp, "Failure responding to request")
	}

	return
}

// ArrayStringCsvValidPreparer prepares the ArrayStringCsvValid request.
func (client QueriesClient) ArrayStringCsvValidPreparer(arrayQuery []string) (*http.Request, error) {
	queryParameters := map[string]interface{}{}
	if arrayQuery != nil && len(arrayQuery) > 0 {
		queryParameters["arrayQuery"] = autorest.Encode("query", arrayQuery, ",")
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/array/csv/string/valid"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// ArrayStringCsvValidSender sends the ArrayStringCsvValid request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) ArrayStringCsvValidSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// ArrayStringCsvValidResponder handles the response to the ArrayStringCsvValid request. The method always
// closes the http.Response Body.
func (client QueriesClient) ArrayStringCsvValidResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ArrayStringPipesValid get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the
// pipes-array format
//
// arrayQuery is an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the pipes-array
// format
func (client QueriesClient) ArrayStringPipesValid(arrayQuery []string) (result autorest.Response, err error) {
	req, err := client.ArrayStringPipesValidPreparer(arrayQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "ArrayStringPipesValid", nil, "Failure preparing request")
		return
	}

	resp, err := client.ArrayStringPipesValidSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "ArrayStringPipesValid", resp, "Failure sending request")
		return
	}

	result, err = client.ArrayStringPipesValidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "ArrayStringPipesValid", resp, "Failure responding to request")
	}

	return
}

// ArrayStringPipesValidPreparer prepares the ArrayStringPipesValid request.
func (client QueriesClient) ArrayStringPipesValidPreparer(arrayQuery []string) (*http.Request, error) {
	queryParameters := map[string]interface{}{}
	if arrayQuery != nil && len(arrayQuery) > 0 {
		queryParameters["arrayQuery"] = autorest.Encode("query", arrayQuery, "|")
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/array/pipes/string/valid"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// ArrayStringPipesValidSender sends the ArrayStringPipesValid request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) ArrayStringPipesValidSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// ArrayStringPipesValidResponder handles the response to the ArrayStringPipesValid request. The method always
// closes the http.Response Body.
func (client QueriesClient) ArrayStringPipesValidResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ArrayStringSsvValid get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the
// ssv-array format
//
// arrayQuery is an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the ssv-array
// format
func (client QueriesClient) ArrayStringSsvValid(arrayQuery []string) (result autorest.Response, err error) {
	req, err := client.ArrayStringSsvValidPreparer(arrayQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "ArrayStringSsvValid", nil, "Failure preparing request")
		return
	}

	resp, err := client.ArrayStringSsvValidSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "ArrayStringSsvValid", resp, "Failure sending request")
		return
	}

	result, err = client.ArrayStringSsvValidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "ArrayStringSsvValid", resp, "Failure responding to request")
	}

	return
}

// ArrayStringSsvValidPreparer prepares the ArrayStringSsvValid request.
func (client QueriesClient) ArrayStringSsvValidPreparer(arrayQuery []string) (*http.Request, error) {
	queryParameters := map[string]interface{}{}
	if arrayQuery != nil && len(arrayQuery) > 0 {
		queryParameters["arrayQuery"] = autorest.Encode("query", arrayQuery, " ")
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/array/ssv/string/valid"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// ArrayStringSsvValidSender sends the ArrayStringSsvValid request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) ArrayStringSsvValidSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// ArrayStringSsvValidResponder handles the response to the ArrayStringSsvValid request. The method always
// closes the http.Response Body.
func (client QueriesClient) ArrayStringSsvValidResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ArrayStringTsvValid get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the
// tsv-array format
//
// arrayQuery is an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the tsv-array
// format
func (client QueriesClient) ArrayStringTsvValid(arrayQuery []string) (result autorest.Response, err error) {
	req, err := client.ArrayStringTsvValidPreparer(arrayQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "ArrayStringTsvValid", nil, "Failure preparing request")
		return
	}

	resp, err := client.ArrayStringTsvValidSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "ArrayStringTsvValid", resp, "Failure sending request")
		return
	}

	result, err = client.ArrayStringTsvValidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "ArrayStringTsvValid", resp, "Failure responding to request")
	}

	return
}

// ArrayStringTsvValidPreparer prepares the ArrayStringTsvValid request.
func (client QueriesClient) ArrayStringTsvValidPreparer(arrayQuery []string) (*http.Request, error) {
	queryParameters := map[string]interface{}{}
	if arrayQuery != nil && len(arrayQuery) > 0 {
		queryParameters["arrayQuery"] = autorest.Encode("query", arrayQuery, "	")
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/array/tsv/string/valid"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// ArrayStringTsvValidSender sends the ArrayStringTsvValid request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) ArrayStringTsvValidSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// ArrayStringTsvValidResponder handles the response to the ArrayStringTsvValid request. The method always
// closes the http.Response Body.
func (client QueriesClient) ArrayStringTsvValidResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ByteEmpty get '' as byte array
//
// byteQuery is '' as byte array
func (client QueriesClient) ByteEmpty(byteQuery []byte) (result autorest.Response, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: byteQuery,
			Constraints: []validation.Constraint{{Target: "byteQuery", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "urlgroup.QueriesClient", "ByteEmpty")
	}

	req, err := client.ByteEmptyPreparer(byteQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "ByteEmpty", nil, "Failure preparing request")
		return
	}

	resp, err := client.ByteEmptySender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "ByteEmpty", resp, "Failure sending request")
		return
	}

	result, err = client.ByteEmptyResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "ByteEmpty", resp, "Failure responding to request")
	}

	return
}

// ByteEmptyPreparer prepares the ByteEmpty request.
func (client QueriesClient) ByteEmptyPreparer(byteQuery []byte) (*http.Request, error) {
	queryParameters := map[string]interface{}{
		"byteQuery": autorest.Encode("query", byteQuery),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/byte/empty"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// ByteEmptySender sends the ByteEmpty request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) ByteEmptySender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// ByteEmptyResponder handles the response to the ByteEmpty request. The method always
// closes the http.Response Body.
func (client QueriesClient) ByteEmptyResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ByteMultiByte get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
//
// byteQuery is '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
func (client QueriesClient) ByteMultiByte(byteQuery []byte) (result autorest.Response, err error) {
	req, err := client.ByteMultiBytePreparer(byteQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "ByteMultiByte", nil, "Failure preparing request")
		return
	}

	resp, err := client.ByteMultiByteSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "ByteMultiByte", resp, "Failure sending request")
		return
	}

	result, err = client.ByteMultiByteResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "ByteMultiByte", resp, "Failure responding to request")
	}

	return
}

// ByteMultiBytePreparer prepares the ByteMultiByte request.
func (client QueriesClient) ByteMultiBytePreparer(byteQuery []byte) (*http.Request, error) {
	queryParameters := map[string]interface{}{}
	if byteQuery != nil && len(byteQuery) > 0 {
		queryParameters["byteQuery"] = autorest.Encode("query", byteQuery)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/byte/multibyte"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// ByteMultiByteSender sends the ByteMultiByte request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) ByteMultiByteSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// ByteMultiByteResponder handles the response to the ByteMultiByte request. The method always
// closes the http.Response Body.
func (client QueriesClient) ByteMultiByteResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ByteNull get null as byte array (no query parameters in uri)
//
// byteQuery is null as byte array (no query parameters in uri)
func (client QueriesClient) ByteNull(byteQuery []byte) (result autorest.Response, err error) {
	req, err := client.ByteNullPreparer(byteQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "ByteNull", nil, "Failure preparing request")
		return
	}

	resp, err := client.ByteNullSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "ByteNull", resp, "Failure sending request")
		return
	}

	result, err = client.ByteNullResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "ByteNull", resp, "Failure responding to request")
	}

	return
}

// ByteNullPreparer prepares the ByteNull request.
func (client QueriesClient) ByteNullPreparer(byteQuery []byte) (*http.Request, error) {
	queryParameters := map[string]interface{}{}
	if byteQuery != nil && len(byteQuery) > 0 {
		queryParameters["byteQuery"] = autorest.Encode("query", byteQuery)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/byte/null"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// ByteNullSender sends the ByteNull request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) ByteNullSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// ByteNullResponder handles the response to the ByteNull request. The method always
// closes the http.Response Body.
func (client QueriesClient) ByteNullResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// DateNull get null as date - this should result in no query parameters in uri
//
// dateQuery is null as date (no query parameters in uri)
func (client QueriesClient) DateNull(dateQuery *date.Date) (result autorest.Response, err error) {
	req, err := client.DateNullPreparer(dateQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "DateNull", nil, "Failure preparing request")
		return
	}

	resp, err := client.DateNullSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "DateNull", resp, "Failure sending request")
		return
	}

	result, err = client.DateNullResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "DateNull", resp, "Failure responding to request")
	}

	return
}

// DateNullPreparer prepares the DateNull request.
func (client QueriesClient) DateNullPreparer(dateQuery *date.Date) (*http.Request, error) {
	queryParameters := map[string]interface{}{}
	if dateQuery != nil {
		queryParameters["dateQuery"] = autorest.Encode("query", *dateQuery)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/date/null"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// DateNullSender sends the DateNull request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) DateNullSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// DateNullResponder handles the response to the DateNull request. The method always
// closes the http.Response Body.
func (client QueriesClient) DateNullResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// DateTimeNull get null as date-time, should result in no query parameters in uri
//
// dateTimeQuery is null as date-time (no query parameters)
func (client QueriesClient) DateTimeNull(dateTimeQuery *date.Time) (result autorest.Response, err error) {
	req, err := client.DateTimeNullPreparer(dateTimeQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "DateTimeNull", nil, "Failure preparing request")
		return
	}

	resp, err := client.DateTimeNullSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "DateTimeNull", resp, "Failure sending request")
		return
	}

	result, err = client.DateTimeNullResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "DateTimeNull", resp, "Failure responding to request")
	}

	return
}

// DateTimeNullPreparer prepares the DateTimeNull request.
func (client QueriesClient) DateTimeNullPreparer(dateTimeQuery *date.Time) (*http.Request, error) {
	queryParameters := map[string]interface{}{}
	if dateTimeQuery != nil {
		queryParameters["dateTimeQuery"] = autorest.Encode("query", *dateTimeQuery)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/datetime/null"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// DateTimeNullSender sends the DateTimeNull request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) DateTimeNullSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// DateTimeNullResponder handles the response to the DateTimeNull request. The method always
// closes the http.Response Body.
func (client QueriesClient) DateTimeNullResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// DateTimeValid get '2012-01-01T01:01:01Z' as date-time
//
// dateTimeQuery is '2012-01-01T01:01:01Z' as date-time
func (client QueriesClient) DateTimeValid(dateTimeQuery date.Time) (result autorest.Response, err error) {
	req, err := client.DateTimeValidPreparer(dateTimeQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "DateTimeValid", nil, "Failure preparing request")
		return
	}

	resp, err := client.DateTimeValidSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "DateTimeValid", resp, "Failure sending request")
		return
	}

	result, err = client.DateTimeValidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "DateTimeValid", resp, "Failure responding to request")
	}

	return
}

// DateTimeValidPreparer prepares the DateTimeValid request.
func (client QueriesClient) DateTimeValidPreparer(dateTimeQuery date.Time) (*http.Request, error) {
	queryParameters := map[string]interface{}{
		"dateTimeQuery": autorest.Encode("query", dateTimeQuery),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/datetime/2012-01-01T01%3A01%3A01Z"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// DateTimeValidSender sends the DateTimeValid request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) DateTimeValidSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// DateTimeValidResponder handles the response to the DateTimeValid request. The method always
// closes the http.Response Body.
func (client QueriesClient) DateTimeValidResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// DateValid get '2012-01-01' as date
//
// dateQuery is '2012-01-01' as date
func (client QueriesClient) DateValid(dateQuery date.Date) (result autorest.Response, err error) {
	req, err := client.DateValidPreparer(dateQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "DateValid", nil, "Failure preparing request")
		return
	}

	resp, err := client.DateValidSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "DateValid", resp, "Failure sending request")
		return
	}

	result, err = client.DateValidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "DateValid", resp, "Failure responding to request")
	}

	return
}

// DateValidPreparer prepares the DateValid request.
func (client QueriesClient) DateValidPreparer(dateQuery date.Date) (*http.Request, error) {
	queryParameters := map[string]interface{}{
		"dateQuery": autorest.Encode("query", dateQuery),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/date/2012-01-01"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// DateValidSender sends the DateValid request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) DateValidSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// DateValidResponder handles the response to the DateValid request. The method always
// closes the http.Response Body.
func (client QueriesClient) DateValidResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// DoubleDecimalNegative get '-9999999.999' numeric value
//
// doubleQuery is '-9999999.999'numeric value
func (client QueriesClient) DoubleDecimalNegative(doubleQuery float64) (result autorest.Response, err error) {
	req, err := client.DoubleDecimalNegativePreparer(doubleQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "DoubleDecimalNegative", nil, "Failure preparing request")
		return
	}

	resp, err := client.DoubleDecimalNegativeSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "DoubleDecimalNegative", resp, "Failure sending request")
		return
	}

	result, err = client.DoubleDecimalNegativeResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "DoubleDecimalNegative", resp, "Failure responding to request")
	}

	return
}

// DoubleDecimalNegativePreparer prepares the DoubleDecimalNegative request.
func (client QueriesClient) DoubleDecimalNegativePreparer(doubleQuery float64) (*http.Request, error) {
	queryParameters := map[string]interface{}{
		"doubleQuery": autorest.Encode("query", doubleQuery),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/double/-9999999.999"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// DoubleDecimalNegativeSender sends the DoubleDecimalNegative request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) DoubleDecimalNegativeSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// DoubleDecimalNegativeResponder handles the response to the DoubleDecimalNegative request. The method always
// closes the http.Response Body.
func (client QueriesClient) DoubleDecimalNegativeResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// DoubleDecimalPositive get '9999999.999' numeric value
//
// doubleQuery is '9999999.999'numeric value
func (client QueriesClient) DoubleDecimalPositive(doubleQuery float64) (result autorest.Response, err error) {
	req, err := client.DoubleDecimalPositivePreparer(doubleQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "DoubleDecimalPositive", nil, "Failure preparing request")
		return
	}

	resp, err := client.DoubleDecimalPositiveSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "DoubleDecimalPositive", resp, "Failure sending request")
		return
	}

	result, err = client.DoubleDecimalPositiveResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "DoubleDecimalPositive", resp, "Failure responding to request")
	}

	return
}

// DoubleDecimalPositivePreparer prepares the DoubleDecimalPositive request.
func (client QueriesClient) DoubleDecimalPositivePreparer(doubleQuery float64) (*http.Request, error) {
	queryParameters := map[string]interface{}{
		"doubleQuery": autorest.Encode("query", doubleQuery),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/double/9999999.999"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// DoubleDecimalPositiveSender sends the DoubleDecimalPositive request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) DoubleDecimalPositiveSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// DoubleDecimalPositiveResponder handles the response to the DoubleDecimalPositive request. The method always
// closes the http.Response Body.
func (client QueriesClient) DoubleDecimalPositiveResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// DoubleNull get null numeric value (no query parameter)
//
// doubleQuery is null numeric value
func (client QueriesClient) DoubleNull(doubleQuery *float64) (result autorest.Response, err error) {
	req, err := client.DoubleNullPreparer(doubleQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "DoubleNull", nil, "Failure preparing request")
		return
	}

	resp, err := client.DoubleNullSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "DoubleNull", resp, "Failure sending request")
		return
	}

	result, err = client.DoubleNullResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "DoubleNull", resp, "Failure responding to request")
	}

	return
}

// DoubleNullPreparer prepares the DoubleNull request.
func (client QueriesClient) DoubleNullPreparer(doubleQuery *float64) (*http.Request, error) {
	queryParameters := map[string]interface{}{}
	if doubleQuery != nil {
		queryParameters["doubleQuery"] = autorest.Encode("query", *doubleQuery)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/double/null"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// DoubleNullSender sends the DoubleNull request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) DoubleNullSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// DoubleNullResponder handles the response to the DoubleNull request. The method always
// closes the http.Response Body.
func (client QueriesClient) DoubleNullResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// EnumNull get null (no query parameter in url)
//
// enumQuery is null string value
func (client QueriesClient) EnumNull(enumQuery URIColor) (result autorest.Response, err error) {
	req, err := client.EnumNullPreparer(enumQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "EnumNull", nil, "Failure preparing request")
		return
	}

	resp, err := client.EnumNullSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "EnumNull", resp, "Failure sending request")
		return
	}

	result, err = client.EnumNullResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "EnumNull", resp, "Failure responding to request")
	}

	return
}

// EnumNullPreparer prepares the EnumNull request.
func (client QueriesClient) EnumNullPreparer(enumQuery URIColor) (*http.Request, error) {
	queryParameters := map[string]interface{}{}
	if len(string(enumQuery)) > 0 {
		queryParameters["enumQuery"] = autorest.Encode("query", enumQuery)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/enum/null"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// EnumNullSender sends the EnumNull request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) EnumNullSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// EnumNullResponder handles the response to the EnumNull request. The method always
// closes the http.Response Body.
func (client QueriesClient) EnumNullResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// EnumValid get using uri with query parameter 'green color'
//
// enumQuery is 'green color' enum value
func (client QueriesClient) EnumValid(enumQuery URIColor) (result autorest.Response, err error) {
	req, err := client.EnumValidPreparer(enumQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "EnumValid", nil, "Failure preparing request")
		return
	}

	resp, err := client.EnumValidSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "EnumValid", resp, "Failure sending request")
		return
	}

	result, err = client.EnumValidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "EnumValid", resp, "Failure responding to request")
	}

	return
}

// EnumValidPreparer prepares the EnumValid request.
func (client QueriesClient) EnumValidPreparer(enumQuery URIColor) (*http.Request, error) {
	queryParameters := map[string]interface{}{}
	if len(string(enumQuery)) > 0 {
		queryParameters["enumQuery"] = autorest.Encode("query", enumQuery)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/enum/green%20color"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// EnumValidSender sends the EnumValid request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) EnumValidSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// EnumValidResponder handles the response to the EnumValid request. The method always
// closes the http.Response Body.
func (client QueriesClient) EnumValidResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// FloatNull get null numeric value (no query parameter)
//
// floatQuery is null numeric value
func (client QueriesClient) FloatNull(floatQuery *float64) (result autorest.Response, err error) {
	req, err := client.FloatNullPreparer(floatQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "FloatNull", nil, "Failure preparing request")
		return
	}

	resp, err := client.FloatNullSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "FloatNull", resp, "Failure sending request")
		return
	}

	result, err = client.FloatNullResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "FloatNull", resp, "Failure responding to request")
	}

	return
}

// FloatNullPreparer prepares the FloatNull request.
func (client QueriesClient) FloatNullPreparer(floatQuery *float64) (*http.Request, error) {
	queryParameters := map[string]interface{}{}
	if floatQuery != nil {
		queryParameters["floatQuery"] = autorest.Encode("query", *floatQuery)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/float/null"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// FloatNullSender sends the FloatNull request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) FloatNullSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// FloatNullResponder handles the response to the FloatNull request. The method always
// closes the http.Response Body.
func (client QueriesClient) FloatNullResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// FloatScientificNegative get '-1.034E-20' numeric value
//
// floatQuery is '-1.034E-20'numeric value
func (client QueriesClient) FloatScientificNegative(floatQuery float64) (result autorest.Response, err error) {
	req, err := client.FloatScientificNegativePreparer(floatQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "FloatScientificNegative", nil, "Failure preparing request")
		return
	}

	resp, err := client.FloatScientificNegativeSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "FloatScientificNegative", resp, "Failure sending request")
		return
	}

	result, err = client.FloatScientificNegativeResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "FloatScientificNegative", resp, "Failure responding to request")
	}

	return
}

// FloatScientificNegativePreparer prepares the FloatScientificNegative request.
func (client QueriesClient) FloatScientificNegativePreparer(floatQuery float64) (*http.Request, error) {
	queryParameters := map[string]interface{}{
		"floatQuery": autorest.Encode("query", floatQuery),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/float/-1.034E-20"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// FloatScientificNegativeSender sends the FloatScientificNegative request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) FloatScientificNegativeSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// FloatScientificNegativeResponder handles the response to the FloatScientificNegative request. The method always
// closes the http.Response Body.
func (client QueriesClient) FloatScientificNegativeResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// FloatScientificPositive get '1.034E+20' numeric value
//
// floatQuery is '1.034E+20'numeric value
func (client QueriesClient) FloatScientificPositive(floatQuery float64) (result autorest.Response, err error) {
	req, err := client.FloatScientificPositivePreparer(floatQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "FloatScientificPositive", nil, "Failure preparing request")
		return
	}

	resp, err := client.FloatScientificPositiveSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "FloatScientificPositive", resp, "Failure sending request")
		return
	}

	result, err = client.FloatScientificPositiveResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "FloatScientificPositive", resp, "Failure responding to request")
	}

	return
}

// FloatScientificPositivePreparer prepares the FloatScientificPositive request.
func (client QueriesClient) FloatScientificPositivePreparer(floatQuery float64) (*http.Request, error) {
	queryParameters := map[string]interface{}{
		"floatQuery": autorest.Encode("query", floatQuery),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/float/1.034E+20"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// FloatScientificPositiveSender sends the FloatScientificPositive request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) FloatScientificPositiveSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// FloatScientificPositiveResponder handles the response to the FloatScientificPositive request. The method always
// closes the http.Response Body.
func (client QueriesClient) FloatScientificPositiveResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// GetBooleanFalse get false Boolean value on path
//
// boolQuery is false boolean value
func (client QueriesClient) GetBooleanFalse(boolQuery bool) (result autorest.Response, err error) {
	req, err := client.GetBooleanFalsePreparer(boolQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "GetBooleanFalse", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetBooleanFalseSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "GetBooleanFalse", resp, "Failure sending request")
		return
	}

	result, err = client.GetBooleanFalseResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "GetBooleanFalse", resp, "Failure responding to request")
	}

	return
}

// GetBooleanFalsePreparer prepares the GetBooleanFalse request.
func (client QueriesClient) GetBooleanFalsePreparer(boolQuery bool) (*http.Request, error) {
	queryParameters := map[string]interface{}{
		"boolQuery": autorest.Encode("query", boolQuery),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/bool/false"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// GetBooleanFalseSender sends the GetBooleanFalse request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) GetBooleanFalseSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetBooleanFalseResponder handles the response to the GetBooleanFalse request. The method always
// closes the http.Response Body.
func (client QueriesClient) GetBooleanFalseResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// GetBooleanNull get null Boolean value on query (query string should be absent)
//
// boolQuery is null boolean value
func (client QueriesClient) GetBooleanNull(boolQuery *bool) (result autorest.Response, err error) {
	req, err := client.GetBooleanNullPreparer(boolQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "GetBooleanNull", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetBooleanNullSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "GetBooleanNull", resp, "Failure sending request")
		return
	}

	result, err = client.GetBooleanNullResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "GetBooleanNull", resp, "Failure responding to request")
	}

	return
}

// GetBooleanNullPreparer prepares the GetBooleanNull request.
func (client QueriesClient) GetBooleanNullPreparer(boolQuery *bool) (*http.Request, error) {
	queryParameters := map[string]interface{}{}
	if boolQuery != nil {
		queryParameters["boolQuery"] = autorest.Encode("query", *boolQuery)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/bool/null"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// GetBooleanNullSender sends the GetBooleanNull request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) GetBooleanNullSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetBooleanNullResponder handles the response to the GetBooleanNull request. The method always
// closes the http.Response Body.
func (client QueriesClient) GetBooleanNullResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// GetBooleanTrue get true Boolean value on path
//
// boolQuery is true boolean value
func (client QueriesClient) GetBooleanTrue(boolQuery bool) (result autorest.Response, err error) {
	req, err := client.GetBooleanTruePreparer(boolQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "GetBooleanTrue", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetBooleanTrueSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "GetBooleanTrue", resp, "Failure sending request")
		return
	}

	result, err = client.GetBooleanTrueResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "GetBooleanTrue", resp, "Failure responding to request")
	}

	return
}

// GetBooleanTruePreparer prepares the GetBooleanTrue request.
func (client QueriesClient) GetBooleanTruePreparer(boolQuery bool) (*http.Request, error) {
	queryParameters := map[string]interface{}{
		"boolQuery": autorest.Encode("query", boolQuery),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/bool/true"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// GetBooleanTrueSender sends the GetBooleanTrue request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) GetBooleanTrueSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetBooleanTrueResponder handles the response to the GetBooleanTrue request. The method always
// closes the http.Response Body.
func (client QueriesClient) GetBooleanTrueResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// GetIntNegativeOneMillion get '-1000000' integer value
//
// intQuery is '-1000000' integer value
func (client QueriesClient) GetIntNegativeOneMillion(intQuery int32) (result autorest.Response, err error) {
	req, err := client.GetIntNegativeOneMillionPreparer(intQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "GetIntNegativeOneMillion", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetIntNegativeOneMillionSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "GetIntNegativeOneMillion", resp, "Failure sending request")
		return
	}

	result, err = client.GetIntNegativeOneMillionResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "GetIntNegativeOneMillion", resp, "Failure responding to request")
	}

	return
}

// GetIntNegativeOneMillionPreparer prepares the GetIntNegativeOneMillion request.
func (client QueriesClient) GetIntNegativeOneMillionPreparer(intQuery int32) (*http.Request, error) {
	queryParameters := map[string]interface{}{
		"intQuery": autorest.Encode("query", intQuery),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/int/-1000000"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// GetIntNegativeOneMillionSender sends the GetIntNegativeOneMillion request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) GetIntNegativeOneMillionSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetIntNegativeOneMillionResponder handles the response to the GetIntNegativeOneMillion request. The method always
// closes the http.Response Body.
func (client QueriesClient) GetIntNegativeOneMillionResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// GetIntNull get null integer value (no query parameter)
//
// intQuery is null integer value
func (client QueriesClient) GetIntNull(intQuery *int32) (result autorest.Response, err error) {
	req, err := client.GetIntNullPreparer(intQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "GetIntNull", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetIntNullSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "GetIntNull", resp, "Failure sending request")
		return
	}

	result, err = client.GetIntNullResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "GetIntNull", resp, "Failure responding to request")
	}

	return
}

// GetIntNullPreparer prepares the GetIntNull request.
func (client QueriesClient) GetIntNullPreparer(intQuery *int32) (*http.Request, error) {
	queryParameters := map[string]interface{}{}
	if intQuery != nil {
		queryParameters["intQuery"] = autorest.Encode("query", *intQuery)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/int/null"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// GetIntNullSender sends the GetIntNull request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) GetIntNullSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetIntNullResponder handles the response to the GetIntNull request. The method always
// closes the http.Response Body.
func (client QueriesClient) GetIntNullResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// GetIntOneMillion get '1000000' integer value
//
// intQuery is '1000000' integer value
func (client QueriesClient) GetIntOneMillion(intQuery int32) (result autorest.Response, err error) {
	req, err := client.GetIntOneMillionPreparer(intQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "GetIntOneMillion", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetIntOneMillionSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "GetIntOneMillion", resp, "Failure sending request")
		return
	}

	result, err = client.GetIntOneMillionResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "GetIntOneMillion", resp, "Failure responding to request")
	}

	return
}

// GetIntOneMillionPreparer prepares the GetIntOneMillion request.
func (client QueriesClient) GetIntOneMillionPreparer(intQuery int32) (*http.Request, error) {
	queryParameters := map[string]interface{}{
		"intQuery": autorest.Encode("query", intQuery),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/int/1000000"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// GetIntOneMillionSender sends the GetIntOneMillion request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) GetIntOneMillionSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetIntOneMillionResponder handles the response to the GetIntOneMillion request. The method always
// closes the http.Response Body.
func (client QueriesClient) GetIntOneMillionResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// GetLongNull get 'null 64 bit integer value (no query param in uri)
//
// longQuery is null 64 bit integer value
func (client QueriesClient) GetLongNull(longQuery *int64) (result autorest.Response, err error) {
	req, err := client.GetLongNullPreparer(longQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "GetLongNull", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetLongNullSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "GetLongNull", resp, "Failure sending request")
		return
	}

	result, err = client.GetLongNullResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "GetLongNull", resp, "Failure responding to request")
	}

	return
}

// GetLongNullPreparer prepares the GetLongNull request.
func (client QueriesClient) GetLongNullPreparer(longQuery *int64) (*http.Request, error) {
	queryParameters := map[string]interface{}{}
	if longQuery != nil {
		queryParameters["longQuery"] = autorest.Encode("query", *longQuery)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/long/null"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// GetLongNullSender sends the GetLongNull request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) GetLongNullSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetLongNullResponder handles the response to the GetLongNull request. The method always
// closes the http.Response Body.
func (client QueriesClient) GetLongNullResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// GetNegativeTenBillion get '-10000000000' 64 bit integer value
//
// longQuery is '-10000000000' 64 bit integer value
func (client QueriesClient) GetNegativeTenBillion(longQuery int64) (result autorest.Response, err error) {
	req, err := client.GetNegativeTenBillionPreparer(longQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "GetNegativeTenBillion", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetNegativeTenBillionSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "GetNegativeTenBillion", resp, "Failure sending request")
		return
	}

	result, err = client.GetNegativeTenBillionResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "GetNegativeTenBillion", resp, "Failure responding to request")
	}

	return
}

// GetNegativeTenBillionPreparer prepares the GetNegativeTenBillion request.
func (client QueriesClient) GetNegativeTenBillionPreparer(longQuery int64) (*http.Request, error) {
	queryParameters := map[string]interface{}{
		"longQuery": autorest.Encode("query", longQuery),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/long/-10000000000"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// GetNegativeTenBillionSender sends the GetNegativeTenBillion request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) GetNegativeTenBillionSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetNegativeTenBillionResponder handles the response to the GetNegativeTenBillion request. The method always
// closes the http.Response Body.
func (client QueriesClient) GetNegativeTenBillionResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// GetTenBillion get '10000000000' 64 bit integer value
//
// longQuery is '10000000000' 64 bit integer value
func (client QueriesClient) GetTenBillion(longQuery int64) (result autorest.Response, err error) {
	req, err := client.GetTenBillionPreparer(longQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "GetTenBillion", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetTenBillionSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "GetTenBillion", resp, "Failure sending request")
		return
	}

	result, err = client.GetTenBillionResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "GetTenBillion", resp, "Failure responding to request")
	}

	return
}

// GetTenBillionPreparer prepares the GetTenBillion request.
func (client QueriesClient) GetTenBillionPreparer(longQuery int64) (*http.Request, error) {
	queryParameters := map[string]interface{}{
		"longQuery": autorest.Encode("query", longQuery),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/long/10000000000"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// GetTenBillionSender sends the GetTenBillion request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) GetTenBillionSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetTenBillionResponder handles the response to the GetTenBillion request. The method always
// closes the http.Response Body.
func (client QueriesClient) GetTenBillionResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// StringEmpty get ''
//
// stringQuery is '' string value
func (client QueriesClient) StringEmpty(stringQuery string) (result autorest.Response, err error) {
	req, err := client.StringEmptyPreparer(stringQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "StringEmpty", nil, "Failure preparing request")
		return
	}

	resp, err := client.StringEmptySender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "StringEmpty", resp, "Failure sending request")
		return
	}

	result, err = client.StringEmptyResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "StringEmpty", resp, "Failure responding to request")
	}

	return
}

// StringEmptyPreparer prepares the StringEmpty request.
func (client QueriesClient) StringEmptyPreparer(stringQuery string) (*http.Request, error) {
	queryParameters := map[string]interface{}{
		"stringQuery": autorest.Encode("query", stringQuery),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/string/empty"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// StringEmptySender sends the StringEmpty request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) StringEmptySender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// StringEmptyResponder handles the response to the StringEmpty request. The method always
// closes the http.Response Body.
func (client QueriesClient) StringEmptyResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// StringNull get null (no query parameter in url)
//
// stringQuery is null string value
func (client QueriesClient) StringNull(stringQuery string) (result autorest.Response, err error) {
	req, err := client.StringNullPreparer(stringQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "StringNull", nil, "Failure preparing request")
		return
	}

	resp, err := client.StringNullSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "StringNull", resp, "Failure sending request")
		return
	}

	result, err = client.StringNullResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "StringNull", resp, "Failure responding to request")
	}

	return
}

// StringNullPreparer prepares the StringNull request.
func (client QueriesClient) StringNullPreparer(stringQuery string) (*http.Request, error) {
	queryParameters := map[string]interface{}{}
	if len(stringQuery) > 0 {
		queryParameters["stringQuery"] = autorest.Encode("query", stringQuery)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/string/null"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// StringNullSender sends the StringNull request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) StringNullSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// StringNullResponder handles the response to the StringNull request. The method always
// closes the http.Response Body.
func (client QueriesClient) StringNullResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// StringUnicode get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value
//
// stringQuery is '啊齄丂狛狜隣郎隣兀﨩'multi-byte string value
func (client QueriesClient) StringUnicode(stringQuery string) (result autorest.Response, err error) {
	req, err := client.StringUnicodePreparer(stringQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "StringUnicode", nil, "Failure preparing request")
		return
	}

	resp, err := client.StringUnicodeSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "StringUnicode", resp, "Failure sending request")
		return
	}

	result, err = client.StringUnicodeResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "StringUnicode", resp, "Failure responding to request")
	}

	return
}

// StringUnicodePreparer prepares the StringUnicode request.
func (client QueriesClient) StringUnicodePreparer(stringQuery string) (*http.Request, error) {
	queryParameters := map[string]interface{}{
		"stringQuery": autorest.Encode("query", stringQuery),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/string/unicode/"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// StringUnicodeSender sends the StringUnicode request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) StringUnicodeSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// StringUnicodeResponder handles the response to the StringUnicode request. The method always
// closes the http.Response Body.
func (client QueriesClient) StringUnicodeResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// StringURLEncoded get 'begin!*'();:@ &=+$,/?#[]end
//
// stringQuery is 'begin!*'();:@ &=+$,/?#[]end' url encoded string value
func (client QueriesClient) StringURLEncoded(stringQuery string) (result autorest.Response, err error) {
	req, err := client.StringURLEncodedPreparer(stringQuery)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "StringURLEncoded", nil, "Failure preparing request")
		return
	}

	resp, err := client.StringURLEncodedSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "StringURLEncoded", resp, "Failure sending request")
		return
	}

	result, err = client.StringURLEncodedResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "urlgroup.QueriesClient", "StringURLEncoded", resp, "Failure responding to request")
	}

	return
}

// StringURLEncodedPreparer prepares the StringURLEncoded request.
func (client QueriesClient) StringURLEncodedPreparer(stringQuery string) (*http.Request, error) {
	queryParameters := map[string]interface{}{
		"stringQuery": autorest.Encode("query", stringQuery),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/queries/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// StringURLEncodedSender sends the StringURLEncoded request. The method will close the
// http.Response Body if it receives an error.
func (client QueriesClient) StringURLEncodedSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// StringURLEncodedResponder handles the response to the StringURLEncoded request. The method always
// closes the http.Response Body.
func (client QueriesClient) StringURLEncodedResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}
