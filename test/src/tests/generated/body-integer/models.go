package integergroup

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/Azure/go-autorest/autorest/date"
	"net/http"
	"reflect"
	"strings"
)

// concatenates a slice of const values with the specified separator between each item
func joinConst(s interface{}, sep string) string {
	v := reflect.ValueOf(s)
	if v.Kind() != reflect.Slice && v.Kind() != reflect.Array {
		panic("s wasn't a slice or array")
	}
	ss := make([]string, 0, v.Len())
	for i := 0; i < v.Len(); i++ {
		ss = append(ss, v.Index(i).String())
	}
	return strings.Join(ss, sep)
}

// Error ...
type Error struct {
	Status  *int32  `json:"status,omitempty"`
	Message *string `json:"message,omitempty"`
}

// GetInvalidResponse ...
type GetInvalidResponse struct {
	rawResponse *http.Response
	Value       *int32 `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (gir GetInvalidResponse) Response() *http.Response {
	return gir.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (gir GetInvalidResponse) StatusCode() int {
	return gir.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (gir GetInvalidResponse) Status() string {
	return gir.rawResponse.Status
}

// GetInvalidUnixTimeResponse ...
type GetInvalidUnixTimeResponse struct {
	rawResponse *http.Response
	Value       *date.UnixTime `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (giutr GetInvalidUnixTimeResponse) Response() *http.Response {
	return giutr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (giutr GetInvalidUnixTimeResponse) StatusCode() int {
	return giutr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (giutr GetInvalidUnixTimeResponse) Status() string {
	return giutr.rawResponse.Status
}

// GetNullResponse ...
type GetNullResponse struct {
	rawResponse *http.Response
	Value       *int32 `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (gnr GetNullResponse) Response() *http.Response {
	return gnr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (gnr GetNullResponse) StatusCode() int {
	return gnr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (gnr GetNullResponse) Status() string {
	return gnr.rawResponse.Status
}

// GetNullUnixTimeResponse ...
type GetNullUnixTimeResponse struct {
	rawResponse *http.Response
	Value       *date.UnixTime `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (gnutr GetNullUnixTimeResponse) Response() *http.Response {
	return gnutr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (gnutr GetNullUnixTimeResponse) StatusCode() int {
	return gnutr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (gnutr GetNullUnixTimeResponse) Status() string {
	return gnutr.rawResponse.Status
}

// GetOverflowInt32Response ...
type GetOverflowInt32Response struct {
	rawResponse *http.Response
	Value       *int32 `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (goi3r GetOverflowInt32Response) Response() *http.Response {
	return goi3r.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (goi3r GetOverflowInt32Response) StatusCode() int {
	return goi3r.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (goi3r GetOverflowInt32Response) Status() string {
	return goi3r.rawResponse.Status
}

// GetOverflowInt64Response ...
type GetOverflowInt64Response struct {
	rawResponse *http.Response
	Value       *int64 `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (goi6r GetOverflowInt64Response) Response() *http.Response {
	return goi6r.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (goi6r GetOverflowInt64Response) StatusCode() int {
	return goi6r.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (goi6r GetOverflowInt64Response) Status() string {
	return goi6r.rawResponse.Status
}

// GetUnderflowInt32Response ...
type GetUnderflowInt32Response struct {
	rawResponse *http.Response
	Value       *int32 `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (gui3r GetUnderflowInt32Response) Response() *http.Response {
	return gui3r.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (gui3r GetUnderflowInt32Response) StatusCode() int {
	return gui3r.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (gui3r GetUnderflowInt32Response) Status() string {
	return gui3r.rawResponse.Status
}

// GetUnderflowInt64Response ...
type GetUnderflowInt64Response struct {
	rawResponse *http.Response
	Value       *int64 `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (gui6r GetUnderflowInt64Response) Response() *http.Response {
	return gui6r.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (gui6r GetUnderflowInt64Response) StatusCode() int {
	return gui6r.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (gui6r GetUnderflowInt64Response) Status() string {
	return gui6r.rawResponse.Status
}

// GetUnixTimeResponse ...
type GetUnixTimeResponse struct {
	rawResponse *http.Response
	Value       *date.UnixTime `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (gutr GetUnixTimeResponse) Response() *http.Response {
	return gutr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (gutr GetUnixTimeResponse) StatusCode() int {
	return gutr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (gutr GetUnixTimeResponse) Status() string {
	return gutr.rawResponse.Status
}
