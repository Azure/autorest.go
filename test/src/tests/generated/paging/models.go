package paginggroup

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/to"
	"net/http"
)

// Status enumerates the values for status.
type Status string

const (
	// Accepted specifies the accepted state for status.
	Accepted Status = "Accepted"
	// Canceled specifies the canceled state for status.
	Canceled Status = "canceled"
	// Created specifies the created state for status.
	Created Status = "Created"
	// Creating specifies the creating state for status.
	Creating Status = "Creating"
	// Deleted specifies the deleted state for status.
	Deleted Status = "Deleted"
	// Deleting specifies the deleting state for status.
	Deleting Status = "Deleting"
	// Failed specifies the failed state for status.
	Failed Status = "Failed"
	// OK specifies the ok state for status.
	OK Status = "OK"
	// Succeeded specifies the succeeded state for status.
	Succeeded Status = "Succeeded"
	// Updated specifies the updated state for status.
	Updated Status = "Updated"
	// Updating specifies the updating state for status.
	Updating Status = "Updating"
)

// OdataProductResult is
type OdataProductResult struct {
	autorest.Response `json:"-"`
	Values            *[]Product `json:"values,omitempty"`
	OdataNextLink     *string    `json:"odata.nextLink,omitempty"`
}

// OdataProductResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client OdataProductResult) OdataProductResultPreparer() (*http.Request, error) {
	if client.OdataNextLink == nil || len(to.String(client.OdataNextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.OdataNextLink)))
}

// OperationResult is
type OperationResult struct {
	Status Status `json:"status,omitempty"`
}

// Product is
type Product struct {
	Properties *ProductProperties `json:"properties,omitempty"`
}

// ProductProperties is
type ProductProperties struct {
	ID   *int32  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// ProductResult is
type ProductResult struct {
	autorest.Response `json:"-"`
	Values            *[]Product `json:"values,omitempty"`
	NextLink          *string    `json:"nextLink,omitempty"`
}

// ProductResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client ProductResult) ProductResultPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}
