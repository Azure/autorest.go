package complexgroup

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"net/http"
)

// PrimitiveClient is the test Infrastructure for AutoRest
type PrimitiveClient struct {
	ManagementClient
}

// NewPrimitiveClient creates an instance of the PrimitiveClient client.
func NewPrimitiveClient() PrimitiveClient {
	return NewPrimitiveClientWithBaseURI(DefaultBaseURI)
}

// NewPrimitiveClientWithBaseURI creates an instance of the PrimitiveClient client.
func NewPrimitiveClientWithBaseURI(baseURI string) PrimitiveClient {
	return PrimitiveClient{NewWithBaseURI(baseURI)}
}

// GetBool get complex types with bool properties
func (client PrimitiveClient) GetBool() (result BooleanWrapper, err error) {
	req, err := client.GetBoolPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetBool", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetBoolSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetBool", resp, "Failure sending request")
		return
	}

	result, err = client.GetBoolResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetBool", resp, "Failure responding to request")
	}

	return
}

// GetBoolPreparer prepares the GetBool request.
func (client PrimitiveClient) GetBoolPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/complex/primitive/bool"))
	return preparer.Prepare(&http.Request{})
}

// GetBoolSender sends the GetBool request. The method will close the
// http.Response Body if it receives an error.
func (client PrimitiveClient) GetBoolSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetBoolResponder handles the response to the GetBool request. The method always
// closes the http.Response Body.
func (client PrimitiveClient) GetBoolResponder(resp *http.Response) (result BooleanWrapper, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetByte get complex types with byte properties
func (client PrimitiveClient) GetByte() (result ByteWrapper, err error) {
	req, err := client.GetBytePreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetByte", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetByteSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetByte", resp, "Failure sending request")
		return
	}

	result, err = client.GetByteResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetByte", resp, "Failure responding to request")
	}

	return
}

// GetBytePreparer prepares the GetByte request.
func (client PrimitiveClient) GetBytePreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/complex/primitive/byte"))
	return preparer.Prepare(&http.Request{})
}

// GetByteSender sends the GetByte request. The method will close the
// http.Response Body if it receives an error.
func (client PrimitiveClient) GetByteSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetByteResponder handles the response to the GetByte request. The method always
// closes the http.Response Body.
func (client PrimitiveClient) GetByteResponder(resp *http.Response) (result ByteWrapper, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetDate get complex types with date properties
func (client PrimitiveClient) GetDate() (result DateWrapper, err error) {
	req, err := client.GetDatePreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetDate", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetDateSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetDate", resp, "Failure sending request")
		return
	}

	result, err = client.GetDateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetDate", resp, "Failure responding to request")
	}

	return
}

// GetDatePreparer prepares the GetDate request.
func (client PrimitiveClient) GetDatePreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/complex/primitive/date"))
	return preparer.Prepare(&http.Request{})
}

// GetDateSender sends the GetDate request. The method will close the
// http.Response Body if it receives an error.
func (client PrimitiveClient) GetDateSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetDateResponder handles the response to the GetDate request. The method always
// closes the http.Response Body.
func (client PrimitiveClient) GetDateResponder(resp *http.Response) (result DateWrapper, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetDateTime get complex types with datetime properties
func (client PrimitiveClient) GetDateTime() (result DatetimeWrapper, err error) {
	req, err := client.GetDateTimePreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetDateTime", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetDateTimeSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetDateTime", resp, "Failure sending request")
		return
	}

	result, err = client.GetDateTimeResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetDateTime", resp, "Failure responding to request")
	}

	return
}

// GetDateTimePreparer prepares the GetDateTime request.
func (client PrimitiveClient) GetDateTimePreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/complex/primitive/datetime"))
	return preparer.Prepare(&http.Request{})
}

// GetDateTimeSender sends the GetDateTime request. The method will close the
// http.Response Body if it receives an error.
func (client PrimitiveClient) GetDateTimeSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetDateTimeResponder handles the response to the GetDateTime request. The method always
// closes the http.Response Body.
func (client PrimitiveClient) GetDateTimeResponder(resp *http.Response) (result DatetimeWrapper, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetDateTimeRfc1123 get complex types with datetimeRfc1123 properties
func (client PrimitiveClient) GetDateTimeRfc1123() (result Datetimerfc1123Wrapper, err error) {
	req, err := client.GetDateTimeRfc1123Preparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetDateTimeRfc1123", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetDateTimeRfc1123Sender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetDateTimeRfc1123", resp, "Failure sending request")
		return
	}

	result, err = client.GetDateTimeRfc1123Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetDateTimeRfc1123", resp, "Failure responding to request")
	}

	return
}

// GetDateTimeRfc1123Preparer prepares the GetDateTimeRfc1123 request.
func (client PrimitiveClient) GetDateTimeRfc1123Preparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/complex/primitive/datetimerfc1123"))
	return preparer.Prepare(&http.Request{})
}

// GetDateTimeRfc1123Sender sends the GetDateTimeRfc1123 request. The method will close the
// http.Response Body if it receives an error.
func (client PrimitiveClient) GetDateTimeRfc1123Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetDateTimeRfc1123Responder handles the response to the GetDateTimeRfc1123 request. The method always
// closes the http.Response Body.
func (client PrimitiveClient) GetDateTimeRfc1123Responder(resp *http.Response) (result Datetimerfc1123Wrapper, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetDouble get complex types with double properties
func (client PrimitiveClient) GetDouble() (result DoubleWrapper, err error) {
	req, err := client.GetDoublePreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetDouble", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetDoubleSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetDouble", resp, "Failure sending request")
		return
	}

	result, err = client.GetDoubleResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetDouble", resp, "Failure responding to request")
	}

	return
}

// GetDoublePreparer prepares the GetDouble request.
func (client PrimitiveClient) GetDoublePreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/complex/primitive/double"))
	return preparer.Prepare(&http.Request{})
}

// GetDoubleSender sends the GetDouble request. The method will close the
// http.Response Body if it receives an error.
func (client PrimitiveClient) GetDoubleSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetDoubleResponder handles the response to the GetDouble request. The method always
// closes the http.Response Body.
func (client PrimitiveClient) GetDoubleResponder(resp *http.Response) (result DoubleWrapper, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetDuration get complex types with duration properties
func (client PrimitiveClient) GetDuration() (result DurationWrapper, err error) {
	req, err := client.GetDurationPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetDuration", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetDurationSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetDuration", resp, "Failure sending request")
		return
	}

	result, err = client.GetDurationResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetDuration", resp, "Failure responding to request")
	}

	return
}

// GetDurationPreparer prepares the GetDuration request.
func (client PrimitiveClient) GetDurationPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/complex/primitive/duration"))
	return preparer.Prepare(&http.Request{})
}

// GetDurationSender sends the GetDuration request. The method will close the
// http.Response Body if it receives an error.
func (client PrimitiveClient) GetDurationSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetDurationResponder handles the response to the GetDuration request. The method always
// closes the http.Response Body.
func (client PrimitiveClient) GetDurationResponder(resp *http.Response) (result DurationWrapper, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetFloat get complex types with float properties
func (client PrimitiveClient) GetFloat() (result FloatWrapper, err error) {
	req, err := client.GetFloatPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetFloat", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetFloatSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetFloat", resp, "Failure sending request")
		return
	}

	result, err = client.GetFloatResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetFloat", resp, "Failure responding to request")
	}

	return
}

// GetFloatPreparer prepares the GetFloat request.
func (client PrimitiveClient) GetFloatPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/complex/primitive/float"))
	return preparer.Prepare(&http.Request{})
}

// GetFloatSender sends the GetFloat request. The method will close the
// http.Response Body if it receives an error.
func (client PrimitiveClient) GetFloatSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetFloatResponder handles the response to the GetFloat request. The method always
// closes the http.Response Body.
func (client PrimitiveClient) GetFloatResponder(resp *http.Response) (result FloatWrapper, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetInt get complex types with integer properties
func (client PrimitiveClient) GetInt() (result IntWrapper, err error) {
	req, err := client.GetIntPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetInt", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetIntSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetInt", resp, "Failure sending request")
		return
	}

	result, err = client.GetIntResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetInt", resp, "Failure responding to request")
	}

	return
}

// GetIntPreparer prepares the GetInt request.
func (client PrimitiveClient) GetIntPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/complex/primitive/integer"))
	return preparer.Prepare(&http.Request{})
}

// GetIntSender sends the GetInt request. The method will close the
// http.Response Body if it receives an error.
func (client PrimitiveClient) GetIntSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetIntResponder handles the response to the GetInt request. The method always
// closes the http.Response Body.
func (client PrimitiveClient) GetIntResponder(resp *http.Response) (result IntWrapper, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetLong get complex types with long properties
func (client PrimitiveClient) GetLong() (result LongWrapper, err error) {
	req, err := client.GetLongPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetLong", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetLongSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetLong", resp, "Failure sending request")
		return
	}

	result, err = client.GetLongResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetLong", resp, "Failure responding to request")
	}

	return
}

// GetLongPreparer prepares the GetLong request.
func (client PrimitiveClient) GetLongPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/complex/primitive/long"))
	return preparer.Prepare(&http.Request{})
}

// GetLongSender sends the GetLong request. The method will close the
// http.Response Body if it receives an error.
func (client PrimitiveClient) GetLongSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetLongResponder handles the response to the GetLong request. The method always
// closes the http.Response Body.
func (client PrimitiveClient) GetLongResponder(resp *http.Response) (result LongWrapper, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetString get complex types with string properties
func (client PrimitiveClient) GetString() (result StringWrapper, err error) {
	req, err := client.GetStringPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetString", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetStringSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetString", resp, "Failure sending request")
		return
	}

	result, err = client.GetStringResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "GetString", resp, "Failure responding to request")
	}

	return
}

// GetStringPreparer prepares the GetString request.
func (client PrimitiveClient) GetStringPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/complex/primitive/string"))
	return preparer.Prepare(&http.Request{})
}

// GetStringSender sends the GetString request. The method will close the
// http.Response Body if it receives an error.
func (client PrimitiveClient) GetStringSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetStringResponder handles the response to the GetString request. The method always
// closes the http.Response Body.
func (client PrimitiveClient) GetStringResponder(resp *http.Response) (result StringWrapper, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PutBool put complex types with bool properties
//
// complexBody is please put true and false
func (client PrimitiveClient) PutBool(complexBody BooleanWrapper) (result autorest.Response, err error) {
	req, err := client.PutBoolPreparer(complexBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutBool", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutBoolSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutBool", resp, "Failure sending request")
		return
	}

	result, err = client.PutBoolResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutBool", resp, "Failure responding to request")
	}

	return
}

// PutBoolPreparer prepares the PutBool request.
func (client PrimitiveClient) PutBoolPreparer(complexBody BooleanWrapper) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/complex/primitive/bool"),
		autorest.WithJSON(complexBody))
	return preparer.Prepare(&http.Request{})
}

// PutBoolSender sends the PutBool request. The method will close the
// http.Response Body if it receives an error.
func (client PrimitiveClient) PutBoolSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// PutBoolResponder handles the response to the PutBool request. The method always
// closes the http.Response Body.
func (client PrimitiveClient) PutBoolResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PutByte put complex types with byte properties
//
// complexBody is please put non-ascii byte string hex(FF FE FD FC 00 FA F9 F8 F7 F6)
func (client PrimitiveClient) PutByte(complexBody ByteWrapper) (result autorest.Response, err error) {
	req, err := client.PutBytePreparer(complexBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutByte", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutByteSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutByte", resp, "Failure sending request")
		return
	}

	result, err = client.PutByteResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutByte", resp, "Failure responding to request")
	}

	return
}

// PutBytePreparer prepares the PutByte request.
func (client PrimitiveClient) PutBytePreparer(complexBody ByteWrapper) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/complex/primitive/byte"),
		autorest.WithJSON(complexBody))
	return preparer.Prepare(&http.Request{})
}

// PutByteSender sends the PutByte request. The method will close the
// http.Response Body if it receives an error.
func (client PrimitiveClient) PutByteSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// PutByteResponder handles the response to the PutByte request. The method always
// closes the http.Response Body.
func (client PrimitiveClient) PutByteResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PutDate put complex types with date properties
//
// complexBody is please put '0001-01-01' and '2016-02-29'
func (client PrimitiveClient) PutDate(complexBody DateWrapper) (result autorest.Response, err error) {
	req, err := client.PutDatePreparer(complexBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutDate", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutDateSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutDate", resp, "Failure sending request")
		return
	}

	result, err = client.PutDateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutDate", resp, "Failure responding to request")
	}

	return
}

// PutDatePreparer prepares the PutDate request.
func (client PrimitiveClient) PutDatePreparer(complexBody DateWrapper) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/complex/primitive/date"),
		autorest.WithJSON(complexBody))
	return preparer.Prepare(&http.Request{})
}

// PutDateSender sends the PutDate request. The method will close the
// http.Response Body if it receives an error.
func (client PrimitiveClient) PutDateSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// PutDateResponder handles the response to the PutDate request. The method always
// closes the http.Response Body.
func (client PrimitiveClient) PutDateResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PutDateTime put complex types with datetime properties
//
// complexBody is please put '0001-01-01T12:00:00-04:00' and '2015-05-18T11:38:00-08:00'
func (client PrimitiveClient) PutDateTime(complexBody DatetimeWrapper) (result autorest.Response, err error) {
	req, err := client.PutDateTimePreparer(complexBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutDateTime", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutDateTimeSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutDateTime", resp, "Failure sending request")
		return
	}

	result, err = client.PutDateTimeResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutDateTime", resp, "Failure responding to request")
	}

	return
}

// PutDateTimePreparer prepares the PutDateTime request.
func (client PrimitiveClient) PutDateTimePreparer(complexBody DatetimeWrapper) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/complex/primitive/datetime"),
		autorest.WithJSON(complexBody))
	return preparer.Prepare(&http.Request{})
}

// PutDateTimeSender sends the PutDateTime request. The method will close the
// http.Response Body if it receives an error.
func (client PrimitiveClient) PutDateTimeSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// PutDateTimeResponder handles the response to the PutDateTime request. The method always
// closes the http.Response Body.
func (client PrimitiveClient) PutDateTimeResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PutDateTimeRfc1123 put complex types with datetimeRfc1123 properties
//
// complexBody is please put 'Mon, 01 Jan 0001 12:00:00 GMT' and 'Mon, 18 May 2015 11:38:00 GMT'
func (client PrimitiveClient) PutDateTimeRfc1123(complexBody Datetimerfc1123Wrapper) (result autorest.Response, err error) {
	req, err := client.PutDateTimeRfc1123Preparer(complexBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutDateTimeRfc1123", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutDateTimeRfc1123Sender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutDateTimeRfc1123", resp, "Failure sending request")
		return
	}

	result, err = client.PutDateTimeRfc1123Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutDateTimeRfc1123", resp, "Failure responding to request")
	}

	return
}

// PutDateTimeRfc1123Preparer prepares the PutDateTimeRfc1123 request.
func (client PrimitiveClient) PutDateTimeRfc1123Preparer(complexBody Datetimerfc1123Wrapper) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/complex/primitive/datetimerfc1123"),
		autorest.WithJSON(complexBody))
	return preparer.Prepare(&http.Request{})
}

// PutDateTimeRfc1123Sender sends the PutDateTimeRfc1123 request. The method will close the
// http.Response Body if it receives an error.
func (client PrimitiveClient) PutDateTimeRfc1123Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// PutDateTimeRfc1123Responder handles the response to the PutDateTimeRfc1123 request. The method always
// closes the http.Response Body.
func (client PrimitiveClient) PutDateTimeRfc1123Responder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PutDouble put complex types with double properties
//
// complexBody is please put 3e-100 and -0.000000000000000000000000000000000000000000000000000000005
func (client PrimitiveClient) PutDouble(complexBody DoubleWrapper) (result autorest.Response, err error) {
	req, err := client.PutDoublePreparer(complexBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutDouble", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutDoubleSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutDouble", resp, "Failure sending request")
		return
	}

	result, err = client.PutDoubleResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutDouble", resp, "Failure responding to request")
	}

	return
}

// PutDoublePreparer prepares the PutDouble request.
func (client PrimitiveClient) PutDoublePreparer(complexBody DoubleWrapper) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/complex/primitive/double"),
		autorest.WithJSON(complexBody))
	return preparer.Prepare(&http.Request{})
}

// PutDoubleSender sends the PutDouble request. The method will close the
// http.Response Body if it receives an error.
func (client PrimitiveClient) PutDoubleSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// PutDoubleResponder handles the response to the PutDouble request. The method always
// closes the http.Response Body.
func (client PrimitiveClient) PutDoubleResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PutDuration put complex types with duration properties
//
// complexBody is please put 'P123DT22H14M12.011S'
func (client PrimitiveClient) PutDuration(complexBody DurationWrapper) (result autorest.Response, err error) {
	req, err := client.PutDurationPreparer(complexBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutDuration", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutDurationSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutDuration", resp, "Failure sending request")
		return
	}

	result, err = client.PutDurationResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutDuration", resp, "Failure responding to request")
	}

	return
}

// PutDurationPreparer prepares the PutDuration request.
func (client PrimitiveClient) PutDurationPreparer(complexBody DurationWrapper) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/complex/primitive/duration"),
		autorest.WithJSON(complexBody))
	return preparer.Prepare(&http.Request{})
}

// PutDurationSender sends the PutDuration request. The method will close the
// http.Response Body if it receives an error.
func (client PrimitiveClient) PutDurationSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// PutDurationResponder handles the response to the PutDuration request. The method always
// closes the http.Response Body.
func (client PrimitiveClient) PutDurationResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PutFloat put complex types with float properties
//
// complexBody is please put 1.05 and -0.003
func (client PrimitiveClient) PutFloat(complexBody FloatWrapper) (result autorest.Response, err error) {
	req, err := client.PutFloatPreparer(complexBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutFloat", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutFloatSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutFloat", resp, "Failure sending request")
		return
	}

	result, err = client.PutFloatResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutFloat", resp, "Failure responding to request")
	}

	return
}

// PutFloatPreparer prepares the PutFloat request.
func (client PrimitiveClient) PutFloatPreparer(complexBody FloatWrapper) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/complex/primitive/float"),
		autorest.WithJSON(complexBody))
	return preparer.Prepare(&http.Request{})
}

// PutFloatSender sends the PutFloat request. The method will close the
// http.Response Body if it receives an error.
func (client PrimitiveClient) PutFloatSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// PutFloatResponder handles the response to the PutFloat request. The method always
// closes the http.Response Body.
func (client PrimitiveClient) PutFloatResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PutInt put complex types with integer properties
//
// complexBody is please put -1 and 2
func (client PrimitiveClient) PutInt(complexBody IntWrapper) (result autorest.Response, err error) {
	req, err := client.PutIntPreparer(complexBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutInt", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutIntSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutInt", resp, "Failure sending request")
		return
	}

	result, err = client.PutIntResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutInt", resp, "Failure responding to request")
	}

	return
}

// PutIntPreparer prepares the PutInt request.
func (client PrimitiveClient) PutIntPreparer(complexBody IntWrapper) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/complex/primitive/integer"),
		autorest.WithJSON(complexBody))
	return preparer.Prepare(&http.Request{})
}

// PutIntSender sends the PutInt request. The method will close the
// http.Response Body if it receives an error.
func (client PrimitiveClient) PutIntSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// PutIntResponder handles the response to the PutInt request. The method always
// closes the http.Response Body.
func (client PrimitiveClient) PutIntResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PutLong put complex types with long properties
//
// complexBody is please put 1099511627775 and -999511627788
func (client PrimitiveClient) PutLong(complexBody LongWrapper) (result autorest.Response, err error) {
	req, err := client.PutLongPreparer(complexBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutLong", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutLongSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutLong", resp, "Failure sending request")
		return
	}

	result, err = client.PutLongResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutLong", resp, "Failure responding to request")
	}

	return
}

// PutLongPreparer prepares the PutLong request.
func (client PrimitiveClient) PutLongPreparer(complexBody LongWrapper) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/complex/primitive/long"),
		autorest.WithJSON(complexBody))
	return preparer.Prepare(&http.Request{})
}

// PutLongSender sends the PutLong request. The method will close the
// http.Response Body if it receives an error.
func (client PrimitiveClient) PutLongSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// PutLongResponder handles the response to the PutLong request. The method always
// closes the http.Response Body.
func (client PrimitiveClient) PutLongResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PutString put complex types with string properties
//
// complexBody is please put 'goodrequest', '', and null
func (client PrimitiveClient) PutString(complexBody StringWrapper) (result autorest.Response, err error) {
	req, err := client.PutStringPreparer(complexBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutString", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutStringSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutString", resp, "Failure sending request")
		return
	}

	result, err = client.PutStringResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.PrimitiveClient", "PutString", resp, "Failure responding to request")
	}

	return
}

// PutStringPreparer prepares the PutString request.
func (client PrimitiveClient) PutStringPreparer(complexBody StringWrapper) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/complex/primitive/string"),
		autorest.WithJSON(complexBody))
	return preparer.Prepare(&http.Request{})
}

// PutStringSender sends the PutString request. The method will close the
// http.Response Body if it receives an error.
func (client PrimitiveClient) PutStringSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// PutStringResponder handles the response to the PutString request. The method always
// closes the http.Response Body.
func (client PrimitiveClient) PutStringResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}
