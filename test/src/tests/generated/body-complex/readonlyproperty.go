package complexgroup

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"net/http"
)

// ReadonlypropertyClient is the test Infrastructure for AutoRest
type ReadonlypropertyClient struct {
	ManagementClient
}

// NewReadonlypropertyClient creates an instance of the ReadonlypropertyClient client.
func NewReadonlypropertyClient() ReadonlypropertyClient {
	return NewReadonlypropertyClientWithBaseURI(DefaultBaseURI)
}

// NewReadonlypropertyClientWithBaseURI creates an instance of the ReadonlypropertyClient client.
func NewReadonlypropertyClientWithBaseURI(baseURI string) ReadonlypropertyClient {
	return ReadonlypropertyClient{NewWithBaseURI(baseURI)}
}

// GetValid get complex types that have readonly properties
func (client ReadonlypropertyClient) GetValid() (result ReadonlyObj, err error) {
	req, err := client.GetValidPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.ReadonlypropertyClient", "GetValid", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetValidSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "complexgroup.ReadonlypropertyClient", "GetValid", resp, "Failure sending request")
		return
	}

	result, err = client.GetValidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.ReadonlypropertyClient", "GetValid", resp, "Failure responding to request")
	}

	return
}

// GetValidPreparer prepares the GetValid request.
func (client ReadonlypropertyClient) GetValidPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/complex/readonlyproperty/valid"))
	return preparer.Prepare(&http.Request{})
}

// GetValidSender sends the GetValid request. The method will close the
// http.Response Body if it receives an error.
func (client ReadonlypropertyClient) GetValidSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetValidResponder handles the response to the GetValid request. The method always
// closes the http.Response Body.
func (client ReadonlypropertyClient) GetValidResponder(resp *http.Response) (result ReadonlyObj, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PutValid put complex types that have readonly properties
//
func (client ReadonlypropertyClient) PutValid(complexBody ReadonlyObj) (result autorest.Response, err error) {
	req, err := client.PutValidPreparer(complexBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.ReadonlypropertyClient", "PutValid", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutValidSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "complexgroup.ReadonlypropertyClient", "PutValid", resp, "Failure sending request")
		return
	}

	result, err = client.PutValidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "complexgroup.ReadonlypropertyClient", "PutValid", resp, "Failure responding to request")
	}

	return
}

// PutValidPreparer prepares the PutValid request.
func (client ReadonlypropertyClient) PutValidPreparer(complexBody ReadonlyObj) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/complex/readonlyproperty/valid"),
		autorest.WithJSON(complexBody))
	return preparer.Prepare(&http.Request{})
}

// PutValidSender sends the PutValid request. The method will close the
// http.Response Body if it receives an error.
func (client ReadonlypropertyClient) PutValidSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PutValidResponder handles the response to the PutValid request. The method always
// closes the http.Response Body.
func (client ReadonlypropertyClient) PutValidResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}
