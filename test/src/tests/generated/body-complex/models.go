package complexgroup

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/json"
	"errors"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/date"
)

// CMYKColors enumerates the values for cmyk colors.
type CMYKColors string

const (
	// BlacK specifies the blac k state for cmyk colors.
	BlacK CMYKColors = "blacK"
	// Cyan specifies the cyan state for cmyk colors.
	Cyan CMYKColors = "cyan"
	// Magenta specifies the magenta state for cmyk colors.
	Magenta CMYKColors = "Magenta"
	// YELLOW specifies the yellow state for cmyk colors.
	YELLOW CMYKColors = "YELLOW"
)

// Fishtype enumerates the values for fishtype.
type Fishtype string

const (
	// FishtypeCookiecuttershark specifies the fishtype cookiecuttershark state for fishtype.
	FishtypeCookiecuttershark Fishtype = "cookiecuttershark"
	// FishtypeGoblin specifies the fishtype goblin state for fishtype.
	FishtypeGoblin Fishtype = "goblin"
	// FishtypeSalmon specifies the fishtype salmon state for fishtype.
	FishtypeSalmon Fishtype = "salmon"
	// FishtypeSawshark specifies the fishtype sawshark state for fishtype.
	FishtypeSawshark Fishtype = "sawshark"
	// FishtypeShark specifies the fishtype shark state for fishtype.
	FishtypeShark Fishtype = "shark"
	// FishtypeSmartSalmon specifies the fishtype smart salmon state for fishtype.
	FishtypeSmartSalmon Fishtype = "smart_salmon"
)

// ArrayWrapper is
type ArrayWrapper struct {
	autorest.Response `json:"-"`
	Array             *[]string `json:"array,omitempty"`
}

// Basic is
type Basic struct {
	autorest.Response `json:"-"`
	ID                *int32     `json:"id,omitempty"`
	Name              *string    `json:"name,omitempty"`
	Color             CMYKColors `json:"color,omitempty"`
}

// BooleanWrapper is
type BooleanWrapper struct {
	autorest.Response `json:"-"`
	FieldTrue         *bool `json:"field_true,omitempty"`
	FieldFalse        *bool `json:"field_false,omitempty"`
}

// ByteWrapper is
type ByteWrapper struct {
	autorest.Response `json:"-"`
	Field             *[]byte `json:"field,omitempty"`
}

// Cat is
type Cat struct {
	ID    *int32  `json:"id,omitempty"`
	Name  *string `json:"name,omitempty"`
	Color *string `json:"color,omitempty"`
	Hates *[]Dog  `json:"hates,omitempty"`
}

// Cookiecuttershark is
type Cookiecuttershark struct {
	Species  *string    `json:"species,omitempty"`
	Length   *float64   `json:"length,omitempty"`
	Siblings *[]Fish    `json:"siblings,omitempty"`
	Fishtype Fishtype   `json:"fishtype,omitempty"`
	Age      *int32     `json:"age,omitempty"`
	Birthday *date.Time `json:"birthday,omitempty"`
}

// MarshalJSON is the custom marshaler for Cookiecuttershark.
func (c Cookiecuttershark) MarshalJSON() ([]byte, error) {
	c.Fishtype = FishtypeCookiecuttershark
	type Alias Cookiecuttershark
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(c),
	})
}

// AsSawshark is the Shark implementation for Cookiecuttershark.
func (c Cookiecuttershark) AsSawshark() (*Sawshark, bool) {
	return nil, false
}

// AsGoblinshark is the Shark implementation for Cookiecuttershark.
func (c Cookiecuttershark) AsGoblinshark() (*Goblinshark, bool) {
	return nil, false
}

// AsCookiecuttershark is the Shark implementation for Cookiecuttershark.
func (c Cookiecuttershark) AsCookiecuttershark() (*Cookiecuttershark, bool) {
	return &c, true
}

// AsSalmon is the Shark implementation for Cookiecuttershark.
func (c Cookiecuttershark) AsSalmon() (*Salmon, bool) {
	return nil, false
}

// AsSmartSalmon is the Shark implementation for Cookiecuttershark.
func (c Cookiecuttershark) AsSmartSalmon() (*SmartSalmon, bool) {
	return nil, false
}

// AsShark is the Shark implementation for Cookiecuttershark.
func (c Cookiecuttershark) AsShark() (*Shark, bool) {
	return nil, false
}

// UnmarshalJSON is the custom unmarshaler for Cookiecuttershark struct.
func (c *Cookiecuttershark) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["age"]
	if v != nil {
		var age int32
		err = json.Unmarshal(*m["age"], &age)
		if err != nil {
			return err
		}
		c.Age = &age
	}

	v = m["birthday"]
	if v != nil {
		var birthday date.Time
		err = json.Unmarshal(*m["birthday"], &birthday)
		if err != nil {
			return err
		}
		c.Birthday = &birthday
	}

	v = m["species"]
	if v != nil {
		var species string
		err = json.Unmarshal(*m["species"], &species)
		if err != nil {
			return err
		}
		c.Species = &species
	}

	v = m["length"]
	if v != nil {
		var length float64
		err = json.Unmarshal(*m["length"], &length)
		if err != nil {
			return err
		}
		c.Length = &length
	}

	v = m["siblings"]
	if v != nil {
		siblings, err := unmarshalFishArray(*m["siblings"])
		if err != nil {
			return err
		}
		c.Siblings = &siblings
	}

	v = m["fishtype"]
	if v != nil {
		var fishtype Fishtype
		err = json.Unmarshal(*m["fishtype"], &fishtype)
		if err != nil {
			return err
		}
		c.Fishtype = fishtype
	}

	return nil
}

// Datetimerfc1123Wrapper is
type Datetimerfc1123Wrapper struct {
	autorest.Response `json:"-"`
	Field             *date.TimeRFC1123 `json:"field,omitempty"`
	Now               *date.TimeRFC1123 `json:"now,omitempty"`
}

// DatetimeWrapper is
type DatetimeWrapper struct {
	autorest.Response `json:"-"`
	Field             *date.Time `json:"field,omitempty"`
	Now               *date.Time `json:"now,omitempty"`
}

// DateWrapper is
type DateWrapper struct {
	autorest.Response `json:"-"`
	Field             *date.Date `json:"field,omitempty"`
	Leap              *date.Date `json:"leap,omitempty"`
}

// DictionaryWrapper is
type DictionaryWrapper struct {
	autorest.Response `json:"-"`
	DefaultProgram    *map[string]*string `json:"defaultProgram,omitempty"`
}

// Dog is
type Dog struct {
	ID   *int32  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Food *string `json:"food,omitempty"`
}

// DoubleWrapper is
type DoubleWrapper struct {
	autorest.Response                                                               `json:"-"`
	Field1                                                                          *float64 `json:"field1,omitempty"`
	Field56ZerosAfterTheDotAndNegativeZeroBeforeDotAndThisIsALongFieldNameOnPurpose *float64 `json:"field_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose,omitempty"`
}

// DurationWrapper is
type DurationWrapper struct {
	autorest.Response `json:"-"`
	Field             *string `json:"field,omitempty"`
}

// Error is
type Error struct {
	Status  *int32  `json:"status,omitempty"`
	Message *string `json:"message,omitempty"`
}

// Fish is
type Fish interface {
	AsSalmon() (*Salmon, bool)
	AsSmartSalmon() (*SmartSalmon, bool)
	AsShark() (*Shark, bool)
	AsSawshark() (*Sawshark, bool)
	AsGoblinshark() (*Goblinshark, bool)
	AsCookiecuttershark() (*Cookiecuttershark, bool)
}

func unmarshalFish(body []byte) (Fish, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["fishtype"] {
	case string(FishtypeSalmon):
		var s Salmon
		err := json.Unmarshal(body, &s)
		return s, err
	case string(FishtypeSmartSalmon):
		var s SmartSalmon
		err := json.Unmarshal(body, &s)
		return s, err
	case string(FishtypeShark):
		var s Shark
		err := json.Unmarshal(body, &s)
		return s, err
	case string(FishtypeSawshark):
		var s Sawshark
		err := json.Unmarshal(body, &s)
		return s, err
	case string(FishtypeGoblin):
		var g Goblinshark
		err := json.Unmarshal(body, &g)
		return g, err
	case string(FishtypeCookiecuttershark):
		var c Cookiecuttershark
		err := json.Unmarshal(body, &c)
		return c, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalFishArray(body []byte) ([]Fish, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	fArray := make([]Fish, len(rawMessages))

	for index, rawMessage := range rawMessages {
		f, err := unmarshalFish(*rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

// FishModel is
type FishModel struct {
	autorest.Response `json:"-"`
	Value             Fish `json:"value,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for FishModel struct.
func (fm *FishModel) UnmarshalJSON(body []byte) error {
	f, err := unmarshalFish(body)
	if err != nil {
		return err
	}
	fm.Value = f

	return nil
}

// FloatWrapper is
type FloatWrapper struct {
	autorest.Response `json:"-"`
	Field1            *float64 `json:"field1,omitempty"`
	Field2            *float64 `json:"field2,omitempty"`
}

// Goblinshark is
type Goblinshark struct {
	Species  *string    `json:"species,omitempty"`
	Length   *float64   `json:"length,omitempty"`
	Siblings *[]Fish    `json:"siblings,omitempty"`
	Fishtype Fishtype   `json:"fishtype,omitempty"`
	Age      *int32     `json:"age,omitempty"`
	Birthday *date.Time `json:"birthday,omitempty"`
	Jawsize  *int32     `json:"jawsize,omitempty"`
}

// MarshalJSON is the custom marshaler for Goblinshark.
func (g Goblinshark) MarshalJSON() ([]byte, error) {
	g.Fishtype = FishtypeGoblin
	type Alias Goblinshark
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(g),
	})
}

// AsSawshark is the Shark implementation for Goblinshark.
func (g Goblinshark) AsSawshark() (*Sawshark, bool) {
	return nil, false
}

// AsGoblinshark is the Shark implementation for Goblinshark.
func (g Goblinshark) AsGoblinshark() (*Goblinshark, bool) {
	return &g, true
}

// AsCookiecuttershark is the Shark implementation for Goblinshark.
func (g Goblinshark) AsCookiecuttershark() (*Cookiecuttershark, bool) {
	return nil, false
}

// AsSalmon is the Shark implementation for Goblinshark.
func (g Goblinshark) AsSalmon() (*Salmon, bool) {
	return nil, false
}

// AsSmartSalmon is the Shark implementation for Goblinshark.
func (g Goblinshark) AsSmartSalmon() (*SmartSalmon, bool) {
	return nil, false
}

// AsShark is the Shark implementation for Goblinshark.
func (g Goblinshark) AsShark() (*Shark, bool) {
	return nil, false
}

// UnmarshalJSON is the custom unmarshaler for Goblinshark struct.
func (g *Goblinshark) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["jawsize"]
	if v != nil {
		var jawsize int32
		err = json.Unmarshal(*m["jawsize"], &jawsize)
		if err != nil {
			return err
		}
		g.Jawsize = &jawsize
	}

	v = m["age"]
	if v != nil {
		var age int32
		err = json.Unmarshal(*m["age"], &age)
		if err != nil {
			return err
		}
		g.Age = &age
	}

	v = m["birthday"]
	if v != nil {
		var birthday date.Time
		err = json.Unmarshal(*m["birthday"], &birthday)
		if err != nil {
			return err
		}
		g.Birthday = &birthday
	}

	v = m["species"]
	if v != nil {
		var species string
		err = json.Unmarshal(*m["species"], &species)
		if err != nil {
			return err
		}
		g.Species = &species
	}

	v = m["length"]
	if v != nil {
		var length float64
		err = json.Unmarshal(*m["length"], &length)
		if err != nil {
			return err
		}
		g.Length = &length
	}

	v = m["siblings"]
	if v != nil {
		siblings, err := unmarshalFishArray(*m["siblings"])
		if err != nil {
			return err
		}
		g.Siblings = &siblings
	}

	v = m["fishtype"]
	if v != nil {
		var fishtype Fishtype
		err = json.Unmarshal(*m["fishtype"], &fishtype)
		if err != nil {
			return err
		}
		g.Fishtype = fishtype
	}

	return nil
}

// IntWrapper is
type IntWrapper struct {
	autorest.Response `json:"-"`
	Field1            *int32 `json:"field1,omitempty"`
	Field2            *int32 `json:"field2,omitempty"`
}

// LongWrapper is
type LongWrapper struct {
	autorest.Response `json:"-"`
	Field1            *int64 `json:"field1,omitempty"`
	Field2            *int64 `json:"field2,omitempty"`
}

// Pet is
type Pet struct {
	ID   *int32  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// ReadonlyObj is
type ReadonlyObj struct {
	autorest.Response `json:"-"`
	ID                *string `json:"id,omitempty"`
	Size              *int32  `json:"size,omitempty"`
}

// Salmon is
type Salmon struct {
	autorest.Response `json:"-"`
	Species           *string  `json:"species,omitempty"`
	Length            *float64 `json:"length,omitempty"`
	Siblings          *[]Fish  `json:"siblings,omitempty"`
	Fishtype          Fishtype `json:"fishtype,omitempty"`
	Location          *string  `json:"location,omitempty"`
	Iswild            *bool    `json:"iswild,omitempty"`
}

// MarshalJSON is the custom marshaler for Salmon.
func (s Salmon) MarshalJSON() ([]byte, error) {
	s.Fishtype = FishtypeSalmon
	type Alias Salmon
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(s),
	})
}

// AsSalmon is the Fish implementation for Salmon.
func (s Salmon) AsSalmon() (*Salmon, bool) {
	return &s, true
}

// AsSmartSalmon is the Fish implementation for Salmon.
func (s Salmon) AsSmartSalmon() (*SmartSalmon, bool) {
	return nil, false
}

// AsShark is the Fish implementation for Salmon.
func (s Salmon) AsShark() (*Shark, bool) {
	return nil, false
}

// AsSawshark is the Fish implementation for Salmon.
func (s Salmon) AsSawshark() (*Sawshark, bool) {
	return nil, false
}

// AsGoblinshark is the Fish implementation for Salmon.
func (s Salmon) AsGoblinshark() (*Goblinshark, bool) {
	return nil, false
}

// AsCookiecuttershark is the Fish implementation for Salmon.
func (s Salmon) AsCookiecuttershark() (*Cookiecuttershark, bool) {
	return nil, false
}

// UnmarshalJSON is the custom unmarshaler for Salmon struct.
func (s *Salmon) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["location"]
	if v != nil {
		var location string
		err = json.Unmarshal(*m["location"], &location)
		if err != nil {
			return err
		}
		s.Location = &location
	}

	v = m["iswild"]
	if v != nil {
		var iswild bool
		err = json.Unmarshal(*m["iswild"], &iswild)
		if err != nil {
			return err
		}
		s.Iswild = &iswild
	}

	v = m["species"]
	if v != nil {
		var species string
		err = json.Unmarshal(*m["species"], &species)
		if err != nil {
			return err
		}
		s.Species = &species
	}

	v = m["length"]
	if v != nil {
		var length float64
		err = json.Unmarshal(*m["length"], &length)
		if err != nil {
			return err
		}
		s.Length = &length
	}

	v = m["siblings"]
	if v != nil {
		siblings, err := unmarshalFishArray(*m["siblings"])
		if err != nil {
			return err
		}
		s.Siblings = &siblings
	}

	v = m["fishtype"]
	if v != nil {
		var fishtype Fishtype
		err = json.Unmarshal(*m["fishtype"], &fishtype)
		if err != nil {
			return err
		}
		s.Fishtype = fishtype
	}

	return nil
}

// SalmonModel is
type SalmonModel struct {
	autorest.Response `json:"-"`
	Value             *Salmon `json:"value,omitempty"`
}

// Sawshark is
type Sawshark struct {
	Species  *string    `json:"species,omitempty"`
	Length   *float64   `json:"length,omitempty"`
	Siblings *[]Fish    `json:"siblings,omitempty"`
	Fishtype Fishtype   `json:"fishtype,omitempty"`
	Age      *int32     `json:"age,omitempty"`
	Birthday *date.Time `json:"birthday,omitempty"`
	Picture  *[]byte    `json:"picture,omitempty"`
}

// MarshalJSON is the custom marshaler for Sawshark.
func (s Sawshark) MarshalJSON() ([]byte, error) {
	s.Fishtype = FishtypeSawshark
	type Alias Sawshark
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(s),
	})
}

// AsSawshark is the Shark implementation for Sawshark.
func (s Sawshark) AsSawshark() (*Sawshark, bool) {
	return &s, true
}

// AsGoblinshark is the Shark implementation for Sawshark.
func (s Sawshark) AsGoblinshark() (*Goblinshark, bool) {
	return nil, false
}

// AsCookiecuttershark is the Shark implementation for Sawshark.
func (s Sawshark) AsCookiecuttershark() (*Cookiecuttershark, bool) {
	return nil, false
}

// AsSalmon is the Shark implementation for Sawshark.
func (s Sawshark) AsSalmon() (*Salmon, bool) {
	return nil, false
}

// AsSmartSalmon is the Shark implementation for Sawshark.
func (s Sawshark) AsSmartSalmon() (*SmartSalmon, bool) {
	return nil, false
}

// AsShark is the Shark implementation for Sawshark.
func (s Sawshark) AsShark() (*Shark, bool) {
	return nil, false
}

// UnmarshalJSON is the custom unmarshaler for Sawshark struct.
func (s *Sawshark) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["picture"]
	if v != nil {
		var picture []byte
		err = json.Unmarshal(*m["picture"], &picture)
		if err != nil {
			return err
		}
		s.Picture = &picture
	}

	v = m["age"]
	if v != nil {
		var age int32
		err = json.Unmarshal(*m["age"], &age)
		if err != nil {
			return err
		}
		s.Age = &age
	}

	v = m["birthday"]
	if v != nil {
		var birthday date.Time
		err = json.Unmarshal(*m["birthday"], &birthday)
		if err != nil {
			return err
		}
		s.Birthday = &birthday
	}

	v = m["species"]
	if v != nil {
		var species string
		err = json.Unmarshal(*m["species"], &species)
		if err != nil {
			return err
		}
		s.Species = &species
	}

	v = m["length"]
	if v != nil {
		var length float64
		err = json.Unmarshal(*m["length"], &length)
		if err != nil {
			return err
		}
		s.Length = &length
	}

	v = m["siblings"]
	if v != nil {
		siblings, err := unmarshalFishArray(*m["siblings"])
		if err != nil {
			return err
		}
		s.Siblings = &siblings
	}

	v = m["fishtype"]
	if v != nil {
		var fishtype Fishtype
		err = json.Unmarshal(*m["fishtype"], &fishtype)
		if err != nil {
			return err
		}
		s.Fishtype = fishtype
	}

	return nil
}

// Shark is
type Shark struct {
	Species  *string    `json:"species,omitempty"`
	Length   *float64   `json:"length,omitempty"`
	Siblings *[]Fish    `json:"siblings,omitempty"`
	Fishtype Fishtype   `json:"fishtype,omitempty"`
	Age      *int32     `json:"age,omitempty"`
	Birthday *date.Time `json:"birthday,omitempty"`
}

// MarshalJSON is the custom marshaler for Shark.
func (s Shark) MarshalJSON() ([]byte, error) {
	s.Fishtype = FishtypeShark
	type Alias Shark
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(s),
	})
}

// AsSalmon is the Fish implementation for Shark.
func (s Shark) AsSalmon() (*Salmon, bool) {
	return nil, false
}

// AsSmartSalmon is the Fish implementation for Shark.
func (s Shark) AsSmartSalmon() (*SmartSalmon, bool) {
	return nil, false
}

// AsShark is the Fish implementation for Shark.
func (s Shark) AsShark() (*Shark, bool) {
	return &s, true
}

// AsSawshark is the Fish implementation for Shark.
func (s Shark) AsSawshark() (*Sawshark, bool) {
	return nil, false
}

// AsGoblinshark is the Fish implementation for Shark.
func (s Shark) AsGoblinshark() (*Goblinshark, bool) {
	return nil, false
}

// AsCookiecuttershark is the Fish implementation for Shark.
func (s Shark) AsCookiecuttershark() (*Cookiecuttershark, bool) {
	return nil, false
}

// UnmarshalJSON is the custom unmarshaler for Shark struct.
func (s *Shark) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["age"]
	if v != nil {
		var age int32
		err = json.Unmarshal(*m["age"], &age)
		if err != nil {
			return err
		}
		s.Age = &age
	}

	v = m["birthday"]
	if v != nil {
		var birthday date.Time
		err = json.Unmarshal(*m["birthday"], &birthday)
		if err != nil {
			return err
		}
		s.Birthday = &birthday
	}

	v = m["species"]
	if v != nil {
		var species string
		err = json.Unmarshal(*m["species"], &species)
		if err != nil {
			return err
		}
		s.Species = &species
	}

	v = m["length"]
	if v != nil {
		var length float64
		err = json.Unmarshal(*m["length"], &length)
		if err != nil {
			return err
		}
		s.Length = &length
	}

	v = m["siblings"]
	if v != nil {
		siblings, err := unmarshalFishArray(*m["siblings"])
		if err != nil {
			return err
		}
		s.Siblings = &siblings
	}

	v = m["fishtype"]
	if v != nil {
		var fishtype Fishtype
		err = json.Unmarshal(*m["fishtype"], &fishtype)
		if err != nil {
			return err
		}
		s.Fishtype = fishtype
	}

	return nil
}

// Siamese is
type Siamese struct {
	autorest.Response `json:"-"`
	ID                *int32  `json:"id,omitempty"`
	Name              *string `json:"name,omitempty"`
	Color             *string `json:"color,omitempty"`
	Hates             *[]Dog  `json:"hates,omitempty"`
	Breed             *string `json:"breed,omitempty"`
}

// SmartSalmon is
type SmartSalmon struct {
	Species              *string                             `json:"species,omitempty"`
	Length               *float64                            `json:"length,omitempty"`
	Siblings             *[]Fish                             `json:"siblings,omitempty"`
	Fishtype             Fishtype                            `json:"fishtype,omitempty"`
	Location             *string                             `json:"location,omitempty"`
	Iswild               *bool                               `json:"iswild,omitempty"`
	AdditionalProperties *map[string]*map[string]interface{} `json:",omitempty"`
	CollegeDegree        *string                             `json:"college_degree,omitempty"`
}

// MarshalJSON is the custom marshaler for SmartSalmon.
func (s SmartSalmon) MarshalJSON() ([]byte, error) {
	s.Fishtype = FishtypeSmartSalmon
	type Alias SmartSalmon
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(s),
	})
}

// AsSmartSalmon is the Salmon implementation for SmartSalmon.
func (s SmartSalmon) AsSmartSalmon() (*SmartSalmon, bool) {
	return &s, true
}

// AsSalmon is the Salmon implementation for SmartSalmon.
func (s SmartSalmon) AsSalmon() (*Salmon, bool) {
	return nil, false
}

// AsShark is the Salmon implementation for SmartSalmon.
func (s SmartSalmon) AsShark() (*Shark, bool) {
	return nil, false
}

// AsSawshark is the Salmon implementation for SmartSalmon.
func (s SmartSalmon) AsSawshark() (*Sawshark, bool) {
	return nil, false
}

// AsGoblinshark is the Salmon implementation for SmartSalmon.
func (s SmartSalmon) AsGoblinshark() (*Goblinshark, bool) {
	return nil, false
}

// AsCookiecuttershark is the Salmon implementation for SmartSalmon.
func (s SmartSalmon) AsCookiecuttershark() (*Cookiecuttershark, bool) {
	return nil, false
}

// UnmarshalJSON is the custom unmarshaler for SmartSalmon struct.
func (s *SmartSalmon) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["college_degree"]
	if v != nil {
		var collegeDegree string
		err = json.Unmarshal(*m["college_degree"], &collegeDegree)
		if err != nil {
			return err
		}
		s.CollegeDegree = &collegeDegree
	}

	v = m["location"]
	if v != nil {
		var location string
		err = json.Unmarshal(*m["location"], &location)
		if err != nil {
			return err
		}
		s.Location = &location
	}

	v = m["iswild"]
	if v != nil {
		var iswild bool
		err = json.Unmarshal(*m["iswild"], &iswild)
		if err != nil {
			return err
		}
		s.Iswild = &iswild
	}

	v = m["species"]
	if v != nil {
		var species string
		err = json.Unmarshal(*m["species"], &species)
		if err != nil {
			return err
		}
		s.Species = &species
	}

	v = m["length"]
	if v != nil {
		var length float64
		err = json.Unmarshal(*m["length"], &length)
		if err != nil {
			return err
		}
		s.Length = &length
	}

	v = m["siblings"]
	if v != nil {
		siblings, err := unmarshalFishArray(*m["siblings"])
		if err != nil {
			return err
		}
		s.Siblings = &siblings
	}

	v = m["fishtype"]
	if v != nil {
		var fishtype Fishtype
		err = json.Unmarshal(*m["fishtype"], &fishtype)
		if err != nil {
			return err
		}
		s.Fishtype = fishtype
	}

	return nil
}

// StringWrapper is
type StringWrapper struct {
	autorest.Response `json:"-"`
	Field             *string `json:"field,omitempty"`
	Empty             *string `json:"empty,omitempty"`
	Null              *string `json:"null,omitempty"`
}
