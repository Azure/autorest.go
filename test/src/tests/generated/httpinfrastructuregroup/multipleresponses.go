package httpinfrastructuregroup

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// MultipleResponsesClient is the test Infrastructure for AutoRest
type MultipleResponsesClient struct {
	BaseClient
}

// NewMultipleResponsesClient creates an instance of the MultipleResponsesClient client.
func NewMultipleResponsesClient() MultipleResponsesClient {
	return NewMultipleResponsesClientWithBaseURI(DefaultBaseURI)
}

// NewMultipleResponsesClientWithBaseURI creates an instance of the MultipleResponsesClient client using a custom
// endpoint.  Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure
// stack).
func NewMultipleResponsesClientWithBaseURI(baseURI string) MultipleResponsesClient {
	return MultipleResponsesClient{NewWithBaseURI(baseURI)}
}

// Get200Model201ModelDefaultError200Valid send a 200 response with valid payload: {'statusCode': '200'}
func (client MultipleResponsesClient) Get200Model201ModelDefaultError200Valid(ctx context.Context) (result A, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.Get200Model201ModelDefaultError200Valid")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.Get200Model201ModelDefaultError200ValidPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200Model201ModelDefaultError200Valid", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get200Model201ModelDefaultError200ValidSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200Model201ModelDefaultError200Valid", resp, "Failure sending request")
		return
	}

	result, err = client.Get200Model201ModelDefaultError200ValidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200Model201ModelDefaultError200Valid", resp, "Failure responding to request")
	}

	return
}

// Get200Model201ModelDefaultError200ValidPreparer prepares the Get200Model201ModelDefaultError200Valid request.
func (client MultipleResponsesClient) Get200Model201ModelDefaultError200ValidPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/200/A/201/B/default/Error/response/200/valid"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get200Model201ModelDefaultError200ValidSender sends the Get200Model201ModelDefaultError200Valid request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) Get200Model201ModelDefaultError200ValidSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// Get200Model201ModelDefaultError200ValidResponder handles the response to the Get200Model201ModelDefaultError200Valid request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) Get200Model201ModelDefaultError200ValidResponder(resp *http.Response) (result A, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get200Model201ModelDefaultError201Valid send a 201 response with valid payload: {'statusCode': '201',
// 'textStatusCode': 'Created'}
func (client MultipleResponsesClient) Get200Model201ModelDefaultError201Valid(ctx context.Context) (result A, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.Get200Model201ModelDefaultError201Valid")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.Get200Model201ModelDefaultError201ValidPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200Model201ModelDefaultError201Valid", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get200Model201ModelDefaultError201ValidSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200Model201ModelDefaultError201Valid", resp, "Failure sending request")
		return
	}

	result, err = client.Get200Model201ModelDefaultError201ValidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200Model201ModelDefaultError201Valid", resp, "Failure responding to request")
	}

	return
}

// Get200Model201ModelDefaultError201ValidPreparer prepares the Get200Model201ModelDefaultError201Valid request.
func (client MultipleResponsesClient) Get200Model201ModelDefaultError201ValidPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/200/A/201/B/default/Error/response/201/valid"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get200Model201ModelDefaultError201ValidSender sends the Get200Model201ModelDefaultError201Valid request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) Get200Model201ModelDefaultError201ValidSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// Get200Model201ModelDefaultError201ValidResponder handles the response to the Get200Model201ModelDefaultError201Valid request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) Get200Model201ModelDefaultError201ValidResponder(resp *http.Response) (result A, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get200Model201ModelDefaultError400Valid send a 400 response with valid payload: {'code': '400', 'message': 'client
// error'}
func (client MultipleResponsesClient) Get200Model201ModelDefaultError400Valid(ctx context.Context) (result A, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.Get200Model201ModelDefaultError400Valid")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.Get200Model201ModelDefaultError400ValidPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200Model201ModelDefaultError400Valid", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get200Model201ModelDefaultError400ValidSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200Model201ModelDefaultError400Valid", resp, "Failure sending request")
		return
	}

	result, err = client.Get200Model201ModelDefaultError400ValidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200Model201ModelDefaultError400Valid", resp, "Failure responding to request")
	}

	return
}

// Get200Model201ModelDefaultError400ValidPreparer prepares the Get200Model201ModelDefaultError400Valid request.
func (client MultipleResponsesClient) Get200Model201ModelDefaultError400ValidPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/200/A/201/B/default/Error/response/400/valid"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get200Model201ModelDefaultError400ValidSender sends the Get200Model201ModelDefaultError400Valid request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) Get200Model201ModelDefaultError400ValidSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// Get200Model201ModelDefaultError400ValidResponder handles the response to the Get200Model201ModelDefaultError400Valid request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) Get200Model201ModelDefaultError400ValidResponder(resp *http.Response) (result A, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get200Model204NoModelDefaultError200Valid send a 200 response with valid payload: {'statusCode': '200'}
func (client MultipleResponsesClient) Get200Model204NoModelDefaultError200Valid(ctx context.Context) (result A, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.Get200Model204NoModelDefaultError200Valid")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.Get200Model204NoModelDefaultError200ValidPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200Model204NoModelDefaultError200Valid", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get200Model204NoModelDefaultError200ValidSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200Model204NoModelDefaultError200Valid", resp, "Failure sending request")
		return
	}

	result, err = client.Get200Model204NoModelDefaultError200ValidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200Model204NoModelDefaultError200Valid", resp, "Failure responding to request")
	}

	return
}

// Get200Model204NoModelDefaultError200ValidPreparer prepares the Get200Model204NoModelDefaultError200Valid request.
func (client MultipleResponsesClient) Get200Model204NoModelDefaultError200ValidPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/200/A/204/none/default/Error/response/200/valid"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get200Model204NoModelDefaultError200ValidSender sends the Get200Model204NoModelDefaultError200Valid request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) Get200Model204NoModelDefaultError200ValidSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// Get200Model204NoModelDefaultError200ValidResponder handles the response to the Get200Model204NoModelDefaultError200Valid request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) Get200Model204NoModelDefaultError200ValidResponder(resp *http.Response) (result A, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get200Model204NoModelDefaultError201Invalid send a 201 response with valid payload: {'statusCode': '201'}
func (client MultipleResponsesClient) Get200Model204NoModelDefaultError201Invalid(ctx context.Context) (result A, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.Get200Model204NoModelDefaultError201Invalid")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.Get200Model204NoModelDefaultError201InvalidPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200Model204NoModelDefaultError201Invalid", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get200Model204NoModelDefaultError201InvalidSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200Model204NoModelDefaultError201Invalid", resp, "Failure sending request")
		return
	}

	result, err = client.Get200Model204NoModelDefaultError201InvalidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200Model204NoModelDefaultError201Invalid", resp, "Failure responding to request")
	}

	return
}

// Get200Model204NoModelDefaultError201InvalidPreparer prepares the Get200Model204NoModelDefaultError201Invalid request.
func (client MultipleResponsesClient) Get200Model204NoModelDefaultError201InvalidPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/200/A/204/none/default/Error/response/201/valid"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get200Model204NoModelDefaultError201InvalidSender sends the Get200Model204NoModelDefaultError201Invalid request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) Get200Model204NoModelDefaultError201InvalidSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// Get200Model204NoModelDefaultError201InvalidResponder handles the response to the Get200Model204NoModelDefaultError201Invalid request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) Get200Model204NoModelDefaultError201InvalidResponder(resp *http.Response) (result A, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get200Model204NoModelDefaultError202None send a 202 response with no payload:
func (client MultipleResponsesClient) Get200Model204NoModelDefaultError202None(ctx context.Context) (result A, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.Get200Model204NoModelDefaultError202None")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.Get200Model204NoModelDefaultError202NonePreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200Model204NoModelDefaultError202None", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get200Model204NoModelDefaultError202NoneSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200Model204NoModelDefaultError202None", resp, "Failure sending request")
		return
	}

	result, err = client.Get200Model204NoModelDefaultError202NoneResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200Model204NoModelDefaultError202None", resp, "Failure responding to request")
	}

	return
}

// Get200Model204NoModelDefaultError202NonePreparer prepares the Get200Model204NoModelDefaultError202None request.
func (client MultipleResponsesClient) Get200Model204NoModelDefaultError202NonePreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/200/A/204/none/default/Error/response/202/none"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get200Model204NoModelDefaultError202NoneSender sends the Get200Model204NoModelDefaultError202None request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) Get200Model204NoModelDefaultError202NoneSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// Get200Model204NoModelDefaultError202NoneResponder handles the response to the Get200Model204NoModelDefaultError202None request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) Get200Model204NoModelDefaultError202NoneResponder(resp *http.Response) (result A, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get200Model204NoModelDefaultError204Valid send a 204 response with no payload
func (client MultipleResponsesClient) Get200Model204NoModelDefaultError204Valid(ctx context.Context) (result A, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.Get200Model204NoModelDefaultError204Valid")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.Get200Model204NoModelDefaultError204ValidPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200Model204NoModelDefaultError204Valid", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get200Model204NoModelDefaultError204ValidSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200Model204NoModelDefaultError204Valid", resp, "Failure sending request")
		return
	}

	result, err = client.Get200Model204NoModelDefaultError204ValidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200Model204NoModelDefaultError204Valid", resp, "Failure responding to request")
	}

	return
}

// Get200Model204NoModelDefaultError204ValidPreparer prepares the Get200Model204NoModelDefaultError204Valid request.
func (client MultipleResponsesClient) Get200Model204NoModelDefaultError204ValidPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/200/A/204/none/default/Error/response/204/none"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get200Model204NoModelDefaultError204ValidSender sends the Get200Model204NoModelDefaultError204Valid request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) Get200Model204NoModelDefaultError204ValidSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// Get200Model204NoModelDefaultError204ValidResponder handles the response to the Get200Model204NoModelDefaultError204Valid request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) Get200Model204NoModelDefaultError204ValidResponder(resp *http.Response) (result A, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get200Model204NoModelDefaultError400Valid send a 400 response with valid error payload: {'status': 400, 'message':
// 'client error'}
func (client MultipleResponsesClient) Get200Model204NoModelDefaultError400Valid(ctx context.Context) (result A, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.Get200Model204NoModelDefaultError400Valid")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.Get200Model204NoModelDefaultError400ValidPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200Model204NoModelDefaultError400Valid", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get200Model204NoModelDefaultError400ValidSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200Model204NoModelDefaultError400Valid", resp, "Failure sending request")
		return
	}

	result, err = client.Get200Model204NoModelDefaultError400ValidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200Model204NoModelDefaultError400Valid", resp, "Failure responding to request")
	}

	return
}

// Get200Model204NoModelDefaultError400ValidPreparer prepares the Get200Model204NoModelDefaultError400Valid request.
func (client MultipleResponsesClient) Get200Model204NoModelDefaultError400ValidPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/200/A/204/none/default/Error/response/400/valid"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get200Model204NoModelDefaultError400ValidSender sends the Get200Model204NoModelDefaultError400Valid request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) Get200Model204NoModelDefaultError400ValidSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// Get200Model204NoModelDefaultError400ValidResponder handles the response to the Get200Model204NoModelDefaultError400Valid request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) Get200Model204NoModelDefaultError400ValidResponder(resp *http.Response) (result A, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get200ModelA200Invalid send a 200 response with invalid payload {'statusCodeInvalid': '200'}
func (client MultipleResponsesClient) Get200ModelA200Invalid(ctx context.Context) (result A, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.Get200ModelA200Invalid")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.Get200ModelA200InvalidPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA200Invalid", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get200ModelA200InvalidSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA200Invalid", resp, "Failure sending request")
		return
	}

	result, err = client.Get200ModelA200InvalidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA200Invalid", resp, "Failure responding to request")
	}

	return
}

// Get200ModelA200InvalidPreparer prepares the Get200ModelA200Invalid request.
func (client MultipleResponsesClient) Get200ModelA200InvalidPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/200/A/response/200/invalid"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get200ModelA200InvalidSender sends the Get200ModelA200Invalid request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) Get200ModelA200InvalidSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// Get200ModelA200InvalidResponder handles the response to the Get200ModelA200Invalid request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) Get200ModelA200InvalidResponder(resp *http.Response) (result A, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get200ModelA200None send a 200 response with no payload, when a payload is expected - client should return a null
// object of thde type for model A
func (client MultipleResponsesClient) Get200ModelA200None(ctx context.Context) (result A, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.Get200ModelA200None")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.Get200ModelA200NonePreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA200None", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get200ModelA200NoneSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA200None", resp, "Failure sending request")
		return
	}

	result, err = client.Get200ModelA200NoneResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA200None", resp, "Failure responding to request")
	}

	return
}

// Get200ModelA200NonePreparer prepares the Get200ModelA200None request.
func (client MultipleResponsesClient) Get200ModelA200NonePreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/200/A/response/200/none"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get200ModelA200NoneSender sends the Get200ModelA200None request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) Get200ModelA200NoneSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// Get200ModelA200NoneResponder handles the response to the Get200ModelA200None request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) Get200ModelA200NoneResponder(resp *http.Response) (result A, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get200ModelA200Valid send a 200 response with payload {'statusCode': '200'}
func (client MultipleResponsesClient) Get200ModelA200Valid(ctx context.Context) (result A, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.Get200ModelA200Valid")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.Get200ModelA200ValidPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA200Valid", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get200ModelA200ValidSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA200Valid", resp, "Failure sending request")
		return
	}

	result, err = client.Get200ModelA200ValidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA200Valid", resp, "Failure responding to request")
	}

	return
}

// Get200ModelA200ValidPreparer prepares the Get200ModelA200Valid request.
func (client MultipleResponsesClient) Get200ModelA200ValidPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/200/A/response/200/valid"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get200ModelA200ValidSender sends the Get200ModelA200Valid request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) Get200ModelA200ValidSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// Get200ModelA200ValidResponder handles the response to the Get200ModelA200Valid request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) Get200ModelA200ValidResponder(resp *http.Response) (result A, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get200ModelA201ModelC404ModelDDefaultError200Valid send a 200 response with valid payload: {'statusCode': '200'}
func (client MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError200Valid(ctx context.Context) (result SetObject, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.Get200ModelA201ModelC404ModelDDefaultError200Valid")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.Get200ModelA201ModelC404ModelDDefaultError200ValidPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA201ModelC404ModelDDefaultError200Valid", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get200ModelA201ModelC404ModelDDefaultError200ValidSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA201ModelC404ModelDDefaultError200Valid", resp, "Failure sending request")
		return
	}

	result, err = client.Get200ModelA201ModelC404ModelDDefaultError200ValidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA201ModelC404ModelDDefaultError200Valid", resp, "Failure responding to request")
	}

	return
}

// Get200ModelA201ModelC404ModelDDefaultError200ValidPreparer prepares the Get200ModelA201ModelC404ModelDDefaultError200Valid request.
func (client MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError200ValidPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/200/A/201/C/404/D/default/Error/response/200/valid"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get200ModelA201ModelC404ModelDDefaultError200ValidSender sends the Get200ModelA201ModelC404ModelDDefaultError200Valid request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError200ValidSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// Get200ModelA201ModelC404ModelDDefaultError200ValidResponder handles the response to the Get200ModelA201ModelC404ModelDDefaultError200Valid request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError200ValidResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated, http.StatusNotFound),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get200ModelA201ModelC404ModelDDefaultError201Valid send a 200 response with valid payload: {'httpCode': '201'}
func (client MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError201Valid(ctx context.Context) (result SetObject, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.Get200ModelA201ModelC404ModelDDefaultError201Valid")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.Get200ModelA201ModelC404ModelDDefaultError201ValidPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA201ModelC404ModelDDefaultError201Valid", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get200ModelA201ModelC404ModelDDefaultError201ValidSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA201ModelC404ModelDDefaultError201Valid", resp, "Failure sending request")
		return
	}

	result, err = client.Get200ModelA201ModelC404ModelDDefaultError201ValidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA201ModelC404ModelDDefaultError201Valid", resp, "Failure responding to request")
	}

	return
}

// Get200ModelA201ModelC404ModelDDefaultError201ValidPreparer prepares the Get200ModelA201ModelC404ModelDDefaultError201Valid request.
func (client MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError201ValidPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/200/A/201/C/404/D/default/Error/response/201/valid"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get200ModelA201ModelC404ModelDDefaultError201ValidSender sends the Get200ModelA201ModelC404ModelDDefaultError201Valid request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError201ValidSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// Get200ModelA201ModelC404ModelDDefaultError201ValidResponder handles the response to the Get200ModelA201ModelC404ModelDDefaultError201Valid request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError201ValidResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated, http.StatusNotFound),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get200ModelA201ModelC404ModelDDefaultError400Valid send a 400 response with valid payload: {'code': '400',
// 'message': 'client error'}
func (client MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError400Valid(ctx context.Context) (result SetObject, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.Get200ModelA201ModelC404ModelDDefaultError400Valid")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.Get200ModelA201ModelC404ModelDDefaultError400ValidPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA201ModelC404ModelDDefaultError400Valid", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get200ModelA201ModelC404ModelDDefaultError400ValidSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA201ModelC404ModelDDefaultError400Valid", resp, "Failure sending request")
		return
	}

	result, err = client.Get200ModelA201ModelC404ModelDDefaultError400ValidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA201ModelC404ModelDDefaultError400Valid", resp, "Failure responding to request")
	}

	return
}

// Get200ModelA201ModelC404ModelDDefaultError400ValidPreparer prepares the Get200ModelA201ModelC404ModelDDefaultError400Valid request.
func (client MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError400ValidPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/200/A/201/C/404/D/default/Error/response/400/valid"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get200ModelA201ModelC404ModelDDefaultError400ValidSender sends the Get200ModelA201ModelC404ModelDDefaultError400Valid request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError400ValidSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// Get200ModelA201ModelC404ModelDDefaultError400ValidResponder handles the response to the Get200ModelA201ModelC404ModelDDefaultError400Valid request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError400ValidResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated, http.StatusNotFound),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get200ModelA201ModelC404ModelDDefaultError404Valid send a 200 response with valid payload: {'httpStatusCode': '404'}
func (client MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError404Valid(ctx context.Context) (result SetObject, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.Get200ModelA201ModelC404ModelDDefaultError404Valid")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.Get200ModelA201ModelC404ModelDDefaultError404ValidPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA201ModelC404ModelDDefaultError404Valid", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get200ModelA201ModelC404ModelDDefaultError404ValidSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA201ModelC404ModelDDefaultError404Valid", resp, "Failure sending request")
		return
	}

	result, err = client.Get200ModelA201ModelC404ModelDDefaultError404ValidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA201ModelC404ModelDDefaultError404Valid", resp, "Failure responding to request")
	}

	return
}

// Get200ModelA201ModelC404ModelDDefaultError404ValidPreparer prepares the Get200ModelA201ModelC404ModelDDefaultError404Valid request.
func (client MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError404ValidPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/200/A/201/C/404/D/default/Error/response/404/valid"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get200ModelA201ModelC404ModelDDefaultError404ValidSender sends the Get200ModelA201ModelC404ModelDDefaultError404Valid request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError404ValidSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// Get200ModelA201ModelC404ModelDDefaultError404ValidResponder handles the response to the Get200ModelA201ModelC404ModelDDefaultError404Valid request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError404ValidResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated, http.StatusNotFound),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get200ModelA202Valid send a 202 response with payload {'statusCode': '202'}
func (client MultipleResponsesClient) Get200ModelA202Valid(ctx context.Context) (result A, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.Get200ModelA202Valid")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.Get200ModelA202ValidPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA202Valid", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get200ModelA202ValidSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA202Valid", resp, "Failure sending request")
		return
	}

	result, err = client.Get200ModelA202ValidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA202Valid", resp, "Failure responding to request")
	}

	return
}

// Get200ModelA202ValidPreparer prepares the Get200ModelA202Valid request.
func (client MultipleResponsesClient) Get200ModelA202ValidPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/200/A/response/202/valid"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get200ModelA202ValidSender sends the Get200ModelA202Valid request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) Get200ModelA202ValidSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// Get200ModelA202ValidResponder handles the response to the Get200ModelA202Valid request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) Get200ModelA202ValidResponder(resp *http.Response) (result A, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get200ModelA400Invalid send a 200 response with invalid payload {'statusCodeInvalid': '400'}
func (client MultipleResponsesClient) Get200ModelA400Invalid(ctx context.Context) (result A, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.Get200ModelA400Invalid")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.Get200ModelA400InvalidPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA400Invalid", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get200ModelA400InvalidSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA400Invalid", resp, "Failure sending request")
		return
	}

	result, err = client.Get200ModelA400InvalidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA400Invalid", resp, "Failure responding to request")
	}

	return
}

// Get200ModelA400InvalidPreparer prepares the Get200ModelA400Invalid request.
func (client MultipleResponsesClient) Get200ModelA400InvalidPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/200/A/response/400/invalid"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get200ModelA400InvalidSender sends the Get200ModelA400Invalid request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) Get200ModelA400InvalidSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// Get200ModelA400InvalidResponder handles the response to the Get200ModelA400Invalid request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) Get200ModelA400InvalidResponder(resp *http.Response) (result A, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get200ModelA400None send a 400 response with no payload client should treat as an http error with no error model
func (client MultipleResponsesClient) Get200ModelA400None(ctx context.Context) (result A, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.Get200ModelA400None")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.Get200ModelA400NonePreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA400None", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get200ModelA400NoneSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA400None", resp, "Failure sending request")
		return
	}

	result, err = client.Get200ModelA400NoneResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA400None", resp, "Failure responding to request")
	}

	return
}

// Get200ModelA400NonePreparer prepares the Get200ModelA400None request.
func (client MultipleResponsesClient) Get200ModelA400NonePreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/200/A/response/400/none"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get200ModelA400NoneSender sends the Get200ModelA400None request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) Get200ModelA400NoneSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// Get200ModelA400NoneResponder handles the response to the Get200ModelA400None request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) Get200ModelA400NoneResponder(resp *http.Response) (result A, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get200ModelA400Valid send a 200 response with payload {'statusCode': '400'}
func (client MultipleResponsesClient) Get200ModelA400Valid(ctx context.Context) (result A, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.Get200ModelA400Valid")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.Get200ModelA400ValidPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA400Valid", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get200ModelA400ValidSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA400Valid", resp, "Failure sending request")
		return
	}

	result, err = client.Get200ModelA400ValidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get200ModelA400Valid", resp, "Failure responding to request")
	}

	return
}

// Get200ModelA400ValidPreparer prepares the Get200ModelA400Valid request.
func (client MultipleResponsesClient) Get200ModelA400ValidPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/200/A/response/400/valid"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get200ModelA400ValidSender sends the Get200ModelA400Valid request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) Get200ModelA400ValidSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// Get200ModelA400ValidResponder handles the response to the Get200ModelA400Valid request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) Get200ModelA400ValidResponder(resp *http.Response) (result A, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get202None204NoneDefaultError202None send a 202 response with no payload
func (client MultipleResponsesClient) Get202None204NoneDefaultError202None(ctx context.Context) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.Get202None204NoneDefaultError202None")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.Get202None204NoneDefaultError202NonePreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get202None204NoneDefaultError202None", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get202None204NoneDefaultError202NoneSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get202None204NoneDefaultError202None", resp, "Failure sending request")
		return
	}

	result, err = client.Get202None204NoneDefaultError202NoneResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get202None204NoneDefaultError202None", resp, "Failure responding to request")
	}

	return
}

// Get202None204NoneDefaultError202NonePreparer prepares the Get202None204NoneDefaultError202None request.
func (client MultipleResponsesClient) Get202None204NoneDefaultError202NonePreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/202/none/204/none/default/Error/response/202/none"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get202None204NoneDefaultError202NoneSender sends the Get202None204NoneDefaultError202None request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) Get202None204NoneDefaultError202NoneSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// Get202None204NoneDefaultError202NoneResponder handles the response to the Get202None204NoneDefaultError202None request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) Get202None204NoneDefaultError202NoneResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Get202None204NoneDefaultError204None send a 204 response with no payload
func (client MultipleResponsesClient) Get202None204NoneDefaultError204None(ctx context.Context) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.Get202None204NoneDefaultError204None")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.Get202None204NoneDefaultError204NonePreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get202None204NoneDefaultError204None", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get202None204NoneDefaultError204NoneSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get202None204NoneDefaultError204None", resp, "Failure sending request")
		return
	}

	result, err = client.Get202None204NoneDefaultError204NoneResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get202None204NoneDefaultError204None", resp, "Failure responding to request")
	}

	return
}

// Get202None204NoneDefaultError204NonePreparer prepares the Get202None204NoneDefaultError204None request.
func (client MultipleResponsesClient) Get202None204NoneDefaultError204NonePreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/202/none/204/none/default/Error/response/204/none"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get202None204NoneDefaultError204NoneSender sends the Get202None204NoneDefaultError204None request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) Get202None204NoneDefaultError204NoneSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// Get202None204NoneDefaultError204NoneResponder handles the response to the Get202None204NoneDefaultError204None request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) Get202None204NoneDefaultError204NoneResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Get202None204NoneDefaultError400Valid send a 400 response with valid payload: {'code': '400', 'message': 'client
// error'}
func (client MultipleResponsesClient) Get202None204NoneDefaultError400Valid(ctx context.Context) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.Get202None204NoneDefaultError400Valid")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.Get202None204NoneDefaultError400ValidPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get202None204NoneDefaultError400Valid", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get202None204NoneDefaultError400ValidSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get202None204NoneDefaultError400Valid", resp, "Failure sending request")
		return
	}

	result, err = client.Get202None204NoneDefaultError400ValidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get202None204NoneDefaultError400Valid", resp, "Failure responding to request")
	}

	return
}

// Get202None204NoneDefaultError400ValidPreparer prepares the Get202None204NoneDefaultError400Valid request.
func (client MultipleResponsesClient) Get202None204NoneDefaultError400ValidPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/202/none/204/none/default/Error/response/400/valid"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get202None204NoneDefaultError400ValidSender sends the Get202None204NoneDefaultError400Valid request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) Get202None204NoneDefaultError400ValidSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// Get202None204NoneDefaultError400ValidResponder handles the response to the Get202None204NoneDefaultError400Valid request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) Get202None204NoneDefaultError400ValidResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Get202None204NoneDefaultNone202Invalid send a 202 response with an unexpected payload {'property': 'value'}
func (client MultipleResponsesClient) Get202None204NoneDefaultNone202Invalid(ctx context.Context) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.Get202None204NoneDefaultNone202Invalid")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.Get202None204NoneDefaultNone202InvalidPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get202None204NoneDefaultNone202Invalid", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get202None204NoneDefaultNone202InvalidSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get202None204NoneDefaultNone202Invalid", resp, "Failure sending request")
		return
	}

	result, err = client.Get202None204NoneDefaultNone202InvalidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get202None204NoneDefaultNone202Invalid", resp, "Failure responding to request")
	}

	return
}

// Get202None204NoneDefaultNone202InvalidPreparer prepares the Get202None204NoneDefaultNone202Invalid request.
func (client MultipleResponsesClient) Get202None204NoneDefaultNone202InvalidPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/202/none/204/none/default/none/response/202/invalid"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get202None204NoneDefaultNone202InvalidSender sends the Get202None204NoneDefaultNone202Invalid request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) Get202None204NoneDefaultNone202InvalidSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// Get202None204NoneDefaultNone202InvalidResponder handles the response to the Get202None204NoneDefaultNone202Invalid request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) Get202None204NoneDefaultNone202InvalidResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Get202None204NoneDefaultNone204None send a 204 response with no payload
func (client MultipleResponsesClient) Get202None204NoneDefaultNone204None(ctx context.Context) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.Get202None204NoneDefaultNone204None")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.Get202None204NoneDefaultNone204NonePreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get202None204NoneDefaultNone204None", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get202None204NoneDefaultNone204NoneSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get202None204NoneDefaultNone204None", resp, "Failure sending request")
		return
	}

	result, err = client.Get202None204NoneDefaultNone204NoneResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get202None204NoneDefaultNone204None", resp, "Failure responding to request")
	}

	return
}

// Get202None204NoneDefaultNone204NonePreparer prepares the Get202None204NoneDefaultNone204None request.
func (client MultipleResponsesClient) Get202None204NoneDefaultNone204NonePreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/202/none/204/none/default/none/response/204/none"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get202None204NoneDefaultNone204NoneSender sends the Get202None204NoneDefaultNone204None request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) Get202None204NoneDefaultNone204NoneSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// Get202None204NoneDefaultNone204NoneResponder handles the response to the Get202None204NoneDefaultNone204None request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) Get202None204NoneDefaultNone204NoneResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Get202None204NoneDefaultNone400Invalid send a 400 response with an unexpected payload {'property': 'value'}
func (client MultipleResponsesClient) Get202None204NoneDefaultNone400Invalid(ctx context.Context) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.Get202None204NoneDefaultNone400Invalid")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.Get202None204NoneDefaultNone400InvalidPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get202None204NoneDefaultNone400Invalid", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get202None204NoneDefaultNone400InvalidSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get202None204NoneDefaultNone400Invalid", resp, "Failure sending request")
		return
	}

	result, err = client.Get202None204NoneDefaultNone400InvalidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get202None204NoneDefaultNone400Invalid", resp, "Failure responding to request")
	}

	return
}

// Get202None204NoneDefaultNone400InvalidPreparer prepares the Get202None204NoneDefaultNone400Invalid request.
func (client MultipleResponsesClient) Get202None204NoneDefaultNone400InvalidPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/202/none/204/none/default/none/response/400/invalid"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get202None204NoneDefaultNone400InvalidSender sends the Get202None204NoneDefaultNone400Invalid request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) Get202None204NoneDefaultNone400InvalidSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// Get202None204NoneDefaultNone400InvalidResponder handles the response to the Get202None204NoneDefaultNone400Invalid request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) Get202None204NoneDefaultNone400InvalidResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Get202None204NoneDefaultNone400None send a 400 response with no payload
func (client MultipleResponsesClient) Get202None204NoneDefaultNone400None(ctx context.Context) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.Get202None204NoneDefaultNone400None")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.Get202None204NoneDefaultNone400NonePreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get202None204NoneDefaultNone400None", nil, "Failure preparing request")
		return
	}

	resp, err := client.Get202None204NoneDefaultNone400NoneSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get202None204NoneDefaultNone400None", resp, "Failure sending request")
		return
	}

	result, err = client.Get202None204NoneDefaultNone400NoneResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "Get202None204NoneDefaultNone400None", resp, "Failure responding to request")
	}

	return
}

// Get202None204NoneDefaultNone400NonePreparer prepares the Get202None204NoneDefaultNone400None request.
func (client MultipleResponsesClient) Get202None204NoneDefaultNone400NonePreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/202/none/204/none/default/none/response/400/none"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// Get202None204NoneDefaultNone400NoneSender sends the Get202None204NoneDefaultNone400None request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) Get202None204NoneDefaultNone400NoneSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// Get202None204NoneDefaultNone400NoneResponder handles the response to the Get202None204NoneDefaultNone400None request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) Get202None204NoneDefaultNone400NoneResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// GetDefaultModelA200None send a 200 response with no payload
func (client MultipleResponsesClient) GetDefaultModelA200None(ctx context.Context) (result A, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.GetDefaultModelA200None")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetDefaultModelA200NonePreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "GetDefaultModelA200None", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetDefaultModelA200NoneSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "GetDefaultModelA200None", resp, "Failure sending request")
		return
	}

	result, err = client.GetDefaultModelA200NoneResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "GetDefaultModelA200None", resp, "Failure responding to request")
	}

	return
}

// GetDefaultModelA200NonePreparer prepares the GetDefaultModelA200None request.
func (client MultipleResponsesClient) GetDefaultModelA200NonePreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/default/A/response/200/none"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetDefaultModelA200NoneSender sends the GetDefaultModelA200None request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) GetDefaultModelA200NoneSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// GetDefaultModelA200NoneResponder handles the response to the GetDefaultModelA200None request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) GetDefaultModelA200NoneResponder(resp *http.Response) (result A, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetDefaultModelA200Valid send a 200 response with valid payload: {'statusCode': '200'}
func (client MultipleResponsesClient) GetDefaultModelA200Valid(ctx context.Context) (result A, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.GetDefaultModelA200Valid")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetDefaultModelA200ValidPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "GetDefaultModelA200Valid", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetDefaultModelA200ValidSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "GetDefaultModelA200Valid", resp, "Failure sending request")
		return
	}

	result, err = client.GetDefaultModelA200ValidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "GetDefaultModelA200Valid", resp, "Failure responding to request")
	}

	return
}

// GetDefaultModelA200ValidPreparer prepares the GetDefaultModelA200Valid request.
func (client MultipleResponsesClient) GetDefaultModelA200ValidPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/default/A/response/200/valid"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetDefaultModelA200ValidSender sends the GetDefaultModelA200Valid request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) GetDefaultModelA200ValidSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// GetDefaultModelA200ValidResponder handles the response to the GetDefaultModelA200Valid request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) GetDefaultModelA200ValidResponder(resp *http.Response) (result A, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetDefaultModelA400None send a 400 response with no payload
func (client MultipleResponsesClient) GetDefaultModelA400None(ctx context.Context) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.GetDefaultModelA400None")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetDefaultModelA400NonePreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "GetDefaultModelA400None", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetDefaultModelA400NoneSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "GetDefaultModelA400None", resp, "Failure sending request")
		return
	}

	result, err = client.GetDefaultModelA400NoneResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "GetDefaultModelA400None", resp, "Failure responding to request")
	}

	return
}

// GetDefaultModelA400NonePreparer prepares the GetDefaultModelA400None request.
func (client MultipleResponsesClient) GetDefaultModelA400NonePreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/default/A/response/400/none"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetDefaultModelA400NoneSender sends the GetDefaultModelA400None request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) GetDefaultModelA400NoneSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// GetDefaultModelA400NoneResponder handles the response to the GetDefaultModelA400None request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) GetDefaultModelA400NoneResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// GetDefaultModelA400Valid send a 400 response with valid payload: {'statusCode': '400'}
func (client MultipleResponsesClient) GetDefaultModelA400Valid(ctx context.Context) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.GetDefaultModelA400Valid")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetDefaultModelA400ValidPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "GetDefaultModelA400Valid", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetDefaultModelA400ValidSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "GetDefaultModelA400Valid", resp, "Failure sending request")
		return
	}

	result, err = client.GetDefaultModelA400ValidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "GetDefaultModelA400Valid", resp, "Failure responding to request")
	}

	return
}

// GetDefaultModelA400ValidPreparer prepares the GetDefaultModelA400Valid request.
func (client MultipleResponsesClient) GetDefaultModelA400ValidPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/default/A/response/400/valid"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetDefaultModelA400ValidSender sends the GetDefaultModelA400Valid request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) GetDefaultModelA400ValidSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// GetDefaultModelA400ValidResponder handles the response to the GetDefaultModelA400Valid request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) GetDefaultModelA400ValidResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// GetDefaultNone200Invalid send a 200 response with invalid payload: {'statusCode': '200'}
func (client MultipleResponsesClient) GetDefaultNone200Invalid(ctx context.Context) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.GetDefaultNone200Invalid")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetDefaultNone200InvalidPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "GetDefaultNone200Invalid", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetDefaultNone200InvalidSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "GetDefaultNone200Invalid", resp, "Failure sending request")
		return
	}

	result, err = client.GetDefaultNone200InvalidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "GetDefaultNone200Invalid", resp, "Failure responding to request")
	}

	return
}

// GetDefaultNone200InvalidPreparer prepares the GetDefaultNone200Invalid request.
func (client MultipleResponsesClient) GetDefaultNone200InvalidPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/default/none/response/200/invalid"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetDefaultNone200InvalidSender sends the GetDefaultNone200Invalid request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) GetDefaultNone200InvalidSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// GetDefaultNone200InvalidResponder handles the response to the GetDefaultNone200Invalid request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) GetDefaultNone200InvalidResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// GetDefaultNone200None send a 200 response with no payload
func (client MultipleResponsesClient) GetDefaultNone200None(ctx context.Context) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.GetDefaultNone200None")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetDefaultNone200NonePreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "GetDefaultNone200None", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetDefaultNone200NoneSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "GetDefaultNone200None", resp, "Failure sending request")
		return
	}

	result, err = client.GetDefaultNone200NoneResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "GetDefaultNone200None", resp, "Failure responding to request")
	}

	return
}

// GetDefaultNone200NonePreparer prepares the GetDefaultNone200None request.
func (client MultipleResponsesClient) GetDefaultNone200NonePreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/default/none/response/200/none"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetDefaultNone200NoneSender sends the GetDefaultNone200None request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) GetDefaultNone200NoneSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// GetDefaultNone200NoneResponder handles the response to the GetDefaultNone200None request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) GetDefaultNone200NoneResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// GetDefaultNone400Invalid send a 400 response with valid payload: {'statusCode': '400'}
func (client MultipleResponsesClient) GetDefaultNone400Invalid(ctx context.Context) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.GetDefaultNone400Invalid")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetDefaultNone400InvalidPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "GetDefaultNone400Invalid", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetDefaultNone400InvalidSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "GetDefaultNone400Invalid", resp, "Failure sending request")
		return
	}

	result, err = client.GetDefaultNone400InvalidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "GetDefaultNone400Invalid", resp, "Failure responding to request")
	}

	return
}

// GetDefaultNone400InvalidPreparer prepares the GetDefaultNone400Invalid request.
func (client MultipleResponsesClient) GetDefaultNone400InvalidPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/default/none/response/400/invalid"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetDefaultNone400InvalidSender sends the GetDefaultNone400Invalid request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) GetDefaultNone400InvalidSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// GetDefaultNone400InvalidResponder handles the response to the GetDefaultNone400Invalid request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) GetDefaultNone400InvalidResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// GetDefaultNone400None send a 400 response with no payload
func (client MultipleResponsesClient) GetDefaultNone400None(ctx context.Context) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MultipleResponsesClient.GetDefaultNone400None")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetDefaultNone400NonePreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "GetDefaultNone400None", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetDefaultNone400NoneSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "GetDefaultNone400None", resp, "Failure sending request")
		return
	}

	result, err = client.GetDefaultNone400NoneResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "httpinfrastructuregroup.MultipleResponsesClient", "GetDefaultNone400None", resp, "Failure responding to request")
	}

	return
}

// GetDefaultNone400NonePreparer prepares the GetDefaultNone400None request.
func (client MultipleResponsesClient) GetDefaultNone400NonePreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/http/payloads/default/none/response/400/none"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetDefaultNone400NoneSender sends the GetDefaultNone400None request. The method will close the
// http.Response Body if it receives an error.
func (client MultipleResponsesClient) GetDefaultNone400NoneSender(req *http.Request) (*http.Response, error) {
	sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	return autorest.SendWithSender(client, req, sd...)
}

// GetDefaultNone400NoneResponder handles the response to the GetDefaultNone400None request. The method always
// closes the http.Response Body.
func (client MultipleResponsesClient) GetDefaultNone400NoneResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}
