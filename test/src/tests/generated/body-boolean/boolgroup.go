package booleangroup

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"net/http"
)

// BoolGroupClient is the test Infrastructure for AutoRest
type BoolGroupClient struct {
	ManagementClient
}

// NewBoolGroupClient creates an instance of the BoolGroupClient client.
func NewBoolGroupClient() BoolGroupClient {
	return NewBoolGroupClientWithBaseURI(DefaultBaseURI)
}

// NewBoolGroupClientWithBaseURI creates an instance of the BoolGroupClient client.
func NewBoolGroupClientWithBaseURI(baseURI string) BoolGroupClient {
	return BoolGroupClient{NewWithBaseURI(baseURI)}
}

// GetFalse get false Boolean value
func (client BoolGroupClient) GetFalse() (result Bool, err error) {
	req, err := client.GetFalsePreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "booleangroup.BoolGroupClient", "GetFalse", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetFalseSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "booleangroup.BoolGroupClient", "GetFalse", resp, "Failure sending request")
		return
	}

	result, err = client.GetFalseResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "booleangroup.BoolGroupClient", "GetFalse", resp, "Failure responding to request")
	}

	return
}

// GetFalsePreparer prepares the GetFalse request.
func (client BoolGroupClient) GetFalsePreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/bool/false"))
	return preparer.Prepare(&http.Request{})
}

// GetFalseSender sends the GetFalse request. The method will close the
// http.Response Body if it receives an error.
func (client BoolGroupClient) GetFalseSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client,
		req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetFalseResponder handles the response to the GetFalse request. The method always
// closes the http.Response Body.
func (client BoolGroupClient) GetFalseResponder(resp *http.Response) (result Bool, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetInvalid get invalid Boolean value
func (client BoolGroupClient) GetInvalid() (result Bool, err error) {
	req, err := client.GetInvalidPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "booleangroup.BoolGroupClient", "GetInvalid", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetInvalidSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "booleangroup.BoolGroupClient", "GetInvalid", resp, "Failure sending request")
		return
	}

	result, err = client.GetInvalidResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "booleangroup.BoolGroupClient", "GetInvalid", resp, "Failure responding to request")
	}

	return
}

// GetInvalidPreparer prepares the GetInvalid request.
func (client BoolGroupClient) GetInvalidPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/bool/invalid"))
	return preparer.Prepare(&http.Request{})
}

// GetInvalidSender sends the GetInvalid request. The method will close the
// http.Response Body if it receives an error.
func (client BoolGroupClient) GetInvalidSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client,
		req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetInvalidResponder handles the response to the GetInvalid request. The method always
// closes the http.Response Body.
func (client BoolGroupClient) GetInvalidResponder(resp *http.Response) (result Bool, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetNull get null Boolean value
func (client BoolGroupClient) GetNull() (result Bool, err error) {
	req, err := client.GetNullPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "booleangroup.BoolGroupClient", "GetNull", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetNullSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "booleangroup.BoolGroupClient", "GetNull", resp, "Failure sending request")
		return
	}

	result, err = client.GetNullResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "booleangroup.BoolGroupClient", "GetNull", resp, "Failure responding to request")
	}

	return
}

// GetNullPreparer prepares the GetNull request.
func (client BoolGroupClient) GetNullPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/bool/null"))
	return preparer.Prepare(&http.Request{})
}

// GetNullSender sends the GetNull request. The method will close the
// http.Response Body if it receives an error.
func (client BoolGroupClient) GetNullSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client,
		req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetNullResponder handles the response to the GetNull request. The method always
// closes the http.Response Body.
func (client BoolGroupClient) GetNullResponder(resp *http.Response) (result Bool, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetTrue get true Boolean value
func (client BoolGroupClient) GetTrue() (result Bool, err error) {
	req, err := client.GetTruePreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "booleangroup.BoolGroupClient", "GetTrue", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetTrueSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "booleangroup.BoolGroupClient", "GetTrue", resp, "Failure sending request")
		return
	}

	result, err = client.GetTrueResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "booleangroup.BoolGroupClient", "GetTrue", resp, "Failure responding to request")
	}

	return
}

// GetTruePreparer prepares the GetTrue request.
func (client BoolGroupClient) GetTruePreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/bool/true"))
	return preparer.Prepare(&http.Request{})
}

// GetTrueSender sends the GetTrue request. The method will close the
// http.Response Body if it receives an error.
func (client BoolGroupClient) GetTrueSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client,
		req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetTrueResponder handles the response to the GetTrue request. The method always
// closes the http.Response Body.
func (client BoolGroupClient) GetTrueResponder(resp *http.Response) (result Bool, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PutFalse set Boolean value false
//
func (client BoolGroupClient) PutFalse(boolBody bool) (result autorest.Response, err error) {
	req, err := client.PutFalsePreparer(boolBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "booleangroup.BoolGroupClient", "PutFalse", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutFalseSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "booleangroup.BoolGroupClient", "PutFalse", resp, "Failure sending request")
		return
	}

	result, err = client.PutFalseResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "booleangroup.BoolGroupClient", "PutFalse", resp, "Failure responding to request")
	}

	return
}

// PutFalsePreparer prepares the PutFalse request.
func (client BoolGroupClient) PutFalsePreparer(boolBody bool) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/bool/false"),
		autorest.WithJSON(boolBody))
	return preparer.Prepare(&http.Request{})
}

// PutFalseSender sends the PutFalse request. The method will close the
// http.Response Body if it receives an error.
func (client BoolGroupClient) PutFalseSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client,
		req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PutFalseResponder handles the response to the PutFalse request. The method always
// closes the http.Response Body.
func (client BoolGroupClient) PutFalseResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PutTrue set Boolean value true
//
func (client BoolGroupClient) PutTrue(boolBody bool) (result autorest.Response, err error) {
	req, err := client.PutTruePreparer(boolBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "booleangroup.BoolGroupClient", "PutTrue", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutTrueSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "booleangroup.BoolGroupClient", "PutTrue", resp, "Failure sending request")
		return
	}

	result, err = client.PutTrueResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "booleangroup.BoolGroupClient", "PutTrue", resp, "Failure responding to request")
	}

	return
}

// PutTruePreparer prepares the PutTrue request.
func (client BoolGroupClient) PutTruePreparer(boolBody bool) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/bool/true"),
		autorest.WithJSON(boolBody))
	return preparer.Prepare(&http.Request{})
}

// PutTrueSender sends the PutTrue request. The method will close the
// http.Response Body if it receives an error.
func (client BoolGroupClient) PutTrueSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client,
		req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PutTrueResponder handles the response to the PutTrue request. The method always
// closes the http.Response Body.
func (client BoolGroupClient) PutTrueResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}
