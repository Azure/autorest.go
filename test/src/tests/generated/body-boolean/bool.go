package booleangroup

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"bytes"
	"context"
	"encoding/json"
	"github.com/Azure/azure-pipeline-go/pipeline"
	"io"
	"io/ioutil"
	"net/http"
)

// BoolClient is the test Infrastructure for AutoRest
type BoolClient struct {
	ManagementClient
}

// NewBoolClient creates an instance of the BoolClient client.
func NewBoolClient(p pipeline.Pipeline) BoolClient {
	return BoolClient{NewManagementClient(p)}
}

// GetFalse get false Boolean value
func (client BoolClient) GetFalse(ctx context.Context) (*GetFalseResponse, error) {
	req, err := client.getFalsePreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getFalseResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*GetFalseResponse), err
}

// getFalsePreparer prepares the GetFalse request.
func (client BoolClient) getFalsePreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/bool/false"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getFalseResponder handles the response to the GetFalse request.
func (client BoolClient) getFalseResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &GetFalseResponse{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, &result.Value)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// GetInvalid get invalid Boolean value
func (client BoolClient) GetInvalid(ctx context.Context) (*GetInvalidResponse, error) {
	req, err := client.getInvalidPreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getInvalidResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*GetInvalidResponse), err
}

// getInvalidPreparer prepares the GetInvalid request.
func (client BoolClient) getInvalidPreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/bool/invalid"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getInvalidResponder handles the response to the GetInvalid request.
func (client BoolClient) getInvalidResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &GetInvalidResponse{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, &result.Value)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// GetNull get null Boolean value
func (client BoolClient) GetNull(ctx context.Context) (*GetNullResponse, error) {
	req, err := client.getNullPreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getNullResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*GetNullResponse), err
}

// getNullPreparer prepares the GetNull request.
func (client BoolClient) getNullPreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/bool/null"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getNullResponder handles the response to the GetNull request.
func (client BoolClient) getNullResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &GetNullResponse{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, &result.Value)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// GetTrue get true Boolean value
func (client BoolClient) GetTrue(ctx context.Context) (*GetTrueResponse, error) {
	req, err := client.getTruePreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getTrueResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*GetTrueResponse), err
}

// getTruePreparer prepares the GetTrue request.
func (client BoolClient) getTruePreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/bool/true"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getTrueResponder handles the response to the GetTrue request.
func (client BoolClient) getTrueResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &GetTrueResponse{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, &result.Value)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// PutFalse set Boolean value false
//
func (client BoolClient) PutFalse(ctx context.Context, boolBody bool) (*http.Response, error) {
	req, err := client.putFalsePreparer(boolBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.putFalseResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// putFalsePreparer prepares the PutFalse request.
func (client BoolClient) putFalsePreparer(boolBody bool) (pipeline.Request, error) {
	u := client.url
	u.Path = "/bool/false"
	req, err := pipeline.NewRequest("PUT", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(boolBody)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// putFalseResponder handles the response to the PutFalse request.
func (client BoolClient) putFalseResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}

// PutTrue set Boolean value true
//
func (client BoolClient) PutTrue(ctx context.Context, boolBody bool) (*http.Response, error) {
	req, err := client.putTruePreparer(boolBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.putTrueResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// putTruePreparer prepares the PutTrue request.
func (client BoolClient) putTruePreparer(boolBody bool) (pipeline.Request, error) {
	u := client.url
	u.Path = "/bool/true"
	req, err := pipeline.NewRequest("PUT", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(boolBody)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// putTrueResponder handles the response to the PutTrue request.
func (client BoolClient) putTrueResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	io.Copy(ioutil.Discard, resp.Response().Body)
	resp.Response().Body.Close()
	return resp, err
}
