package lrogroup

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/json"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
)

// The package's fully qualified name.
const fqdn = "tests/generated/lrogroup"

// CloudError ...
type CloudError struct {
	Status  *int32  `json:"status,omitempty"`
	Message *string `json:"message,omitempty"`
}

// LRORetrysDelete202Retry200Future an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LRORetrysDelete202Retry200Future struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LRORetrysClient) (autorest.Response, error)
}

// LRORetrysDeleteAsyncRelativeRetrySucceededFuture an abstraction for monitoring and retrieving the
// results of a long-running operation.
type LRORetrysDeleteAsyncRelativeRetrySucceededFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LRORetrysClient) (autorest.Response, error)
}

// LRORetrysDeleteProvisioning202Accepted200SucceededFuture an abstraction for monitoring and retrieving
// the results of a long-running operation.
type LRORetrysDeleteProvisioning202Accepted200SucceededFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LRORetrysClient) (Product, error)
}

// LRORetrysPost202Retry200Future an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LRORetrysPost202Retry200Future struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LRORetrysClient) (autorest.Response, error)
}

// LRORetrysPostAsyncRelativeRetrySucceededFuture an abstraction for monitoring and retrieving the results
// of a long-running operation.
type LRORetrysPostAsyncRelativeRetrySucceededFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LRORetrysClient) (autorest.Response, error)
}

// LRORetrysPut201CreatingSucceeded200Future an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LRORetrysPut201CreatingSucceeded200Future struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LRORetrysClient) (Product, error)
}

// LRORetrysPutAsyncRelativeRetrySucceededFuture an abstraction for monitoring and retrieving the results
// of a long-running operation.
type LRORetrysPutAsyncRelativeRetrySucceededFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LRORetrysClient) (Product, error)
}

// LROSADsDelete202NonRetry400Future an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROSADsDelete202NonRetry400Future struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROSADsClient) (autorest.Response, error)
}

// LROSADsDelete202RetryInvalidHeaderFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROSADsDelete202RetryInvalidHeaderFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROSADsClient) (autorest.Response, error)
}

// LROSADsDelete204SucceededFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROSADsDelete204SucceededFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROSADsClient) (autorest.Response, error)
}

// LROSADsDeleteAsyncRelativeRetry400Future an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROSADsDeleteAsyncRelativeRetry400Future struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROSADsClient) (autorest.Response, error)
}

// LROSADsDeleteAsyncRelativeRetryInvalidHeaderFuture an abstraction for monitoring and retrieving the
// results of a long-running operation.
type LROSADsDeleteAsyncRelativeRetryInvalidHeaderFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROSADsClient) (autorest.Response, error)
}

// LROSADsDeleteAsyncRelativeRetryInvalidJSONPollingFuture an abstraction for monitoring and retrieving the
// results of a long-running operation.
type LROSADsDeleteAsyncRelativeRetryInvalidJSONPollingFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROSADsClient) (autorest.Response, error)
}

// LROSADsDeleteAsyncRelativeRetryNoStatusFuture an abstraction for monitoring and retrieving the results
// of a long-running operation.
type LROSADsDeleteAsyncRelativeRetryNoStatusFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROSADsClient) (autorest.Response, error)
}

// LROSADsDeleteNonRetry400Future an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROSADsDeleteNonRetry400Future struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROSADsClient) (autorest.Response, error)
}

// LROSADsPost202NoLocationFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROSADsPost202NoLocationFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROSADsClient) (autorest.Response, error)
}

// LROSADsPost202NonRetry400Future an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROSADsPost202NonRetry400Future struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROSADsClient) (autorest.Response, error)
}

// LROSADsPost202RetryInvalidHeaderFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROSADsPost202RetryInvalidHeaderFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROSADsClient) (autorest.Response, error)
}

// LROSADsPostAsyncRelativeRetry400Future an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROSADsPostAsyncRelativeRetry400Future struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROSADsClient) (autorest.Response, error)
}

// LROSADsPostAsyncRelativeRetryInvalidHeaderFuture an abstraction for monitoring and retrieving the
// results of a long-running operation.
type LROSADsPostAsyncRelativeRetryInvalidHeaderFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROSADsClient) (autorest.Response, error)
}

// LROSADsPostAsyncRelativeRetryInvalidJSONPollingFuture an abstraction for monitoring and retrieving the
// results of a long-running operation.
type LROSADsPostAsyncRelativeRetryInvalidJSONPollingFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROSADsClient) (autorest.Response, error)
}

// LROSADsPostAsyncRelativeRetryNoPayloadFuture an abstraction for monitoring and retrieving the results of
// a long-running operation.
type LROSADsPostAsyncRelativeRetryNoPayloadFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROSADsClient) (autorest.Response, error)
}

// LROSADsPostNonRetry400Future an abstraction for monitoring and retrieving the results of a long-running
// operation.
type LROSADsPostNonRetry400Future struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROSADsClient) (autorest.Response, error)
}

// LROSADsPut200InvalidJSONFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROSADsPut200InvalidJSONFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROSADsClient) (Product, error)
}

// LROSADsPutAsyncRelativeRetry400Future an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROSADsPutAsyncRelativeRetry400Future struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROSADsClient) (Product, error)
}

// LROSADsPutAsyncRelativeRetryInvalidHeaderFuture an abstraction for monitoring and retrieving the results
// of a long-running operation.
type LROSADsPutAsyncRelativeRetryInvalidHeaderFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROSADsClient) (Product, error)
}

// LROSADsPutAsyncRelativeRetryInvalidJSONPollingFuture an abstraction for monitoring and retrieving the
// results of a long-running operation.
type LROSADsPutAsyncRelativeRetryInvalidJSONPollingFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROSADsClient) (Product, error)
}

// LROSADsPutAsyncRelativeRetryNoStatusFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROSADsPutAsyncRelativeRetryNoStatusFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROSADsClient) (Product, error)
}

// LROSADsPutAsyncRelativeRetryNoStatusPayloadFuture an abstraction for monitoring and retrieving the
// results of a long-running operation.
type LROSADsPutAsyncRelativeRetryNoStatusPayloadFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROSADsClient) (Product, error)
}

// LROSADsPutError201NoProvisioningStatePayloadFuture an abstraction for monitoring and retrieving the
// results of a long-running operation.
type LROSADsPutError201NoProvisioningStatePayloadFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROSADsClient) (Product, error)
}

// LROSADsPutNonRetry201Creating400Future an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROSADsPutNonRetry201Creating400Future struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROSADsClient) (Product, error)
}

// LROSADsPutNonRetry201Creating400InvalidJSONFuture an abstraction for monitoring and retrieving the
// results of a long-running operation.
type LROSADsPutNonRetry201Creating400InvalidJSONFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROSADsClient) (Product, error)
}

// LROSADsPutNonRetry400Future an abstraction for monitoring and retrieving the results of a long-running
// operation.
type LROSADsPutNonRetry400Future struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROSADsClient) (Product, error)
}

// LROsCustomHeaderPost202Retry200Future an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROsCustomHeaderPost202Retry200Future struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsCustomHeaderClient) (autorest.Response, error)
}

// LROsCustomHeaderPostAsyncRetrySucceededFuture an abstraction for monitoring and retrieving the results
// of a long-running operation.
type LROsCustomHeaderPostAsyncRetrySucceededFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsCustomHeaderClient) (autorest.Response, error)
}

// LROsCustomHeaderPut201CreatingSucceeded200Future an abstraction for monitoring and retrieving the
// results of a long-running operation.
type LROsCustomHeaderPut201CreatingSucceeded200Future struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsCustomHeaderClient) (Product, error)
}

// LROsCustomHeaderPutAsyncRetrySucceededFuture an abstraction for monitoring and retrieving the results of
// a long-running operation.
type LROsCustomHeaderPutAsyncRetrySucceededFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsCustomHeaderClient) (Product, error)
}

// LROsDelete202NoRetry204Future an abstraction for monitoring and retrieving the results of a long-running
// operation.
type LROsDelete202NoRetry204Future struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (Product, error)
}

// LROsDelete202Retry200Future an abstraction for monitoring and retrieving the results of a long-running
// operation.
type LROsDelete202Retry200Future struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (Product, error)
}

// LROsDelete204SucceededFuture an abstraction for monitoring and retrieving the results of a long-running
// operation.
type LROsDelete204SucceededFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (autorest.Response, error)
}

// LROsDeleteAsyncNoHeaderInRetryFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROsDeleteAsyncNoHeaderInRetryFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (autorest.Response, error)
}

// LROsDeleteAsyncNoRetrySucceededFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROsDeleteAsyncNoRetrySucceededFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (autorest.Response, error)
}

// LROsDeleteAsyncRetrycanceledFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROsDeleteAsyncRetrycanceledFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (autorest.Response, error)
}

// LROsDeleteAsyncRetryFailedFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROsDeleteAsyncRetryFailedFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (autorest.Response, error)
}

// LROsDeleteAsyncRetrySucceededFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROsDeleteAsyncRetrySucceededFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (autorest.Response, error)
}

// LROsDeleteNoHeaderInRetryFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROsDeleteNoHeaderInRetryFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (autorest.Response, error)
}

// LROsDeleteProvisioning202Accepted200SucceededFuture an abstraction for monitoring and retrieving the
// results of a long-running operation.
type LROsDeleteProvisioning202Accepted200SucceededFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (Product, error)
}

// LROsDeleteProvisioning202Deletingcanceled200Future an abstraction for monitoring and retrieving the
// results of a long-running operation.
type LROsDeleteProvisioning202Deletingcanceled200Future struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (Product, error)
}

// LROsDeleteProvisioning202DeletingFailed200Future an abstraction for monitoring and retrieving the
// results of a long-running operation.
type LROsDeleteProvisioning202DeletingFailed200Future struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (Product, error)
}

// LROsPost200WithPayloadFuture an abstraction for monitoring and retrieving the results of a long-running
// operation.
type LROsPost200WithPayloadFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (Sku, error)
}

// LROsPost202NoRetry204Future an abstraction for monitoring and retrieving the results of a long-running
// operation.
type LROsPost202NoRetry204Future struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (Product, error)
}

// LROsPost202Retry200Future an abstraction for monitoring and retrieving the results of a long-running
// operation.
type LROsPost202Retry200Future struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (autorest.Response, error)
}

// LROsPostAsyncNoRetrySucceededFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROsPostAsyncNoRetrySucceededFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (Product, error)
}

// LROsPostAsyncRetrycanceledFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROsPostAsyncRetrycanceledFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (autorest.Response, error)
}

// LROsPostAsyncRetryFailedFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROsPostAsyncRetryFailedFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (autorest.Response, error)
}

// LROsPostAsyncRetrySucceededFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROsPostAsyncRetrySucceededFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (Product, error)
}

// LROsPostDoubleHeadersFinalAzureHeaderGetDefaultFuture an abstraction for monitoring and retrieving the
// results of a long-running operation.
type LROsPostDoubleHeadersFinalAzureHeaderGetDefaultFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (Product, error)
}

// LROsPostDoubleHeadersFinalAzureHeaderGetFuture an abstraction for monitoring and retrieving the results
// of a long-running operation.
type LROsPostDoubleHeadersFinalAzureHeaderGetFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (Product, error)
}

// LROsPostDoubleHeadersFinalLocationGetFuture an abstraction for monitoring and retrieving the results of
// a long-running operation.
type LROsPostDoubleHeadersFinalLocationGetFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (Product, error)
}

// LROsPut200Acceptedcanceled200Future an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROsPut200Acceptedcanceled200Future struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (Product, error)
}

// LROsPut200SucceededFuture an abstraction for monitoring and retrieving the results of a long-running
// operation.
type LROsPut200SucceededFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (Product, error)
}

// LROsPut200SucceededNoStateFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROsPut200SucceededNoStateFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (Product, error)
}

// LROsPut200UpdatingSucceeded204Future an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROsPut200UpdatingSucceeded204Future struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (Product, error)
}

// LROsPut201CreatingFailed200Future an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROsPut201CreatingFailed200Future struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (Product, error)
}

// LROsPut201CreatingSucceeded200Future an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROsPut201CreatingSucceeded200Future struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (Product, error)
}

// LROsPut202Retry200Future an abstraction for monitoring and retrieving the results of a long-running
// operation.
type LROsPut202Retry200Future struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (Product, error)
}

// LROsPutAsyncNoHeaderInRetryFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROsPutAsyncNoHeaderInRetryFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (Product, error)
}

// LROsPutAsyncNonResourceFuture an abstraction for monitoring and retrieving the results of a long-running
// operation.
type LROsPutAsyncNonResourceFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (Sku, error)
}

// LROsPutAsyncNoRetrycanceledFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROsPutAsyncNoRetrycanceledFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (Product, error)
}

// LROsPutAsyncNoRetrySucceededFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROsPutAsyncNoRetrySucceededFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (Product, error)
}

// LROsPutAsyncRetryFailedFuture an abstraction for monitoring and retrieving the results of a long-running
// operation.
type LROsPutAsyncRetryFailedFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (Product, error)
}

// LROsPutAsyncRetrySucceededFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
type LROsPutAsyncRetrySucceededFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (Product, error)
}

// LROsPutAsyncSubResourceFuture an abstraction for monitoring and retrieving the results of a long-running
// operation.
type LROsPutAsyncSubResourceFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (SubProduct, error)
}

// LROsPutNoHeaderInRetryFuture an abstraction for monitoring and retrieving the results of a long-running
// operation.
type LROsPutNoHeaderInRetryFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (Product, error)
}

// LROsPutNonResourceFuture an abstraction for monitoring and retrieving the results of a long-running
// operation.
type LROsPutNonResourceFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (Sku, error)
}

// LROsPutSubResourceFuture an abstraction for monitoring and retrieving the results of a long-running
// operation.
type LROsPutSubResourceFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(LROsClient) (SubProduct, error)
}

// OperationResult ...
type OperationResult struct {
	// Status - The status of the request. Possible values include: 'StatusSucceeded', 'StatusFailed', 'StatusCanceled', 'StatusAccepted', 'StatusCreating', 'StatusCreated', 'StatusUpdating', 'StatusUpdated', 'StatusDeleting', 'StatusDeleted', 'StatusOK'
	Status Status                `json:"status,omitempty"`
	Error  *OperationResultError `json:"error,omitempty"`
}

// OperationResultError ...
type OperationResultError struct {
	// Code - The error code for an operation failure
	Code *int32 `json:"code,omitempty"`
	// Message - The detailed arror message
	Message *string `json:"message,omitempty"`
}

// Product ...
type Product struct {
	autorest.Response  `json:"-"`
	*ProductProperties `json:"properties,omitempty"`
	// ID - READ-ONLY; Resource Id
	ID *string `json:"id,omitempty"`
	// Type - READ-ONLY; Resource Type
	Type *string            `json:"type,omitempty"`
	Tags map[string]*string `json:"tags"`
	// Location - Resource Location
	Location *string `json:"location,omitempty"`
	// Name - READ-ONLY; Resource Name
	Name *string `json:"name,omitempty"`
}

// MarshalJSON is the custom marshaler for Product.
func (p Product) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if p.ProductProperties != nil {
		objectMap["properties"] = p.ProductProperties
	}
	if p.Tags != nil {
		objectMap["tags"] = p.Tags
	}
	if p.Location != nil {
		objectMap["location"] = p.Location
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for Product struct.
func (p *Product) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "properties":
			if v != nil {
				var productProperties ProductProperties
				err = json.Unmarshal(*v, &productProperties)
				if err != nil {
					return err
				}
				p.ProductProperties = &productProperties
			}
		case "id":
			if v != nil {
				var ID string
				err = json.Unmarshal(*v, &ID)
				if err != nil {
					return err
				}
				p.ID = &ID
			}
		case "type":
			if v != nil {
				var typeVar string
				err = json.Unmarshal(*v, &typeVar)
				if err != nil {
					return err
				}
				p.Type = &typeVar
			}
		case "tags":
			if v != nil {
				var tags map[string]*string
				err = json.Unmarshal(*v, &tags)
				if err != nil {
					return err
				}
				p.Tags = tags
			}
		case "location":
			if v != nil {
				var location string
				err = json.Unmarshal(*v, &location)
				if err != nil {
					return err
				}
				p.Location = &location
			}
		case "name":
			if v != nil {
				var name string
				err = json.Unmarshal(*v, &name)
				if err != nil {
					return err
				}
				p.Name = &name
			}
		}
	}

	return nil
}

// ProductProperties ...
type ProductProperties struct {
	ProvisioningState *string `json:"provisioningState,omitempty"`
	// ProvisioningStateValues - READ-ONLY; Possible values include: 'Succeeded', 'Failed', 'Canceled', 'Accepted', 'Creating', 'Created', 'Updating', 'Updated', 'Deleting', 'Deleted', 'OK'
	ProvisioningStateValues ProvisioningStateValues `json:"provisioningStateValues,omitempty"`
}

// MarshalJSON is the custom marshaler for ProductProperties.
func (p ProductProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if p.ProvisioningState != nil {
		objectMap["provisioningState"] = p.ProvisioningState
	}
	return json.Marshal(objectMap)
}

// Resource ...
type Resource struct {
	// ID - READ-ONLY; Resource Id
	ID *string `json:"id,omitempty"`
	// Type - READ-ONLY; Resource Type
	Type *string            `json:"type,omitempty"`
	Tags map[string]*string `json:"tags"`
	// Location - Resource Location
	Location *string `json:"location,omitempty"`
	// Name - READ-ONLY; Resource Name
	Name *string `json:"name,omitempty"`
}

// MarshalJSON is the custom marshaler for Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if r.Tags != nil {
		objectMap["tags"] = r.Tags
	}
	if r.Location != nil {
		objectMap["location"] = r.Location
	}
	return json.Marshal(objectMap)
}

// Sku ...
type Sku struct {
	autorest.Response `json:"-"`
	Name              *string `json:"name,omitempty"`
	ID                *string `json:"id,omitempty"`
}

// SubProduct ...
type SubProduct struct {
	autorest.Response     `json:"-"`
	*SubProductProperties `json:"properties,omitempty"`
	// ID - READ-ONLY; Sub Resource Id
	ID *string `json:"id,omitempty"`
}

// MarshalJSON is the custom marshaler for SubProduct.
func (sp SubProduct) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if sp.SubProductProperties != nil {
		objectMap["properties"] = sp.SubProductProperties
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for SubProduct struct.
func (sp *SubProduct) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "properties":
			if v != nil {
				var subProductProperties SubProductProperties
				err = json.Unmarshal(*v, &subProductProperties)
				if err != nil {
					return err
				}
				sp.SubProductProperties = &subProductProperties
			}
		case "id":
			if v != nil {
				var ID string
				err = json.Unmarshal(*v, &ID)
				if err != nil {
					return err
				}
				sp.ID = &ID
			}
		}
	}

	return nil
}

// SubProductProperties ...
type SubProductProperties struct {
	ProvisioningState *string `json:"provisioningState,omitempty"`
	// ProvisioningStateValues - READ-ONLY; Possible values include: 'ProvisioningStateValues1Succeeded', 'ProvisioningStateValues1Failed', 'ProvisioningStateValues1Canceled', 'ProvisioningStateValues1Accepted', 'ProvisioningStateValues1Creating', 'ProvisioningStateValues1Created', 'ProvisioningStateValues1Updating', 'ProvisioningStateValues1Updated', 'ProvisioningStateValues1Deleting', 'ProvisioningStateValues1Deleted', 'ProvisioningStateValues1OK'
	ProvisioningStateValues ProvisioningStateValues1 `json:"provisioningStateValues,omitempty"`
}

// MarshalJSON is the custom marshaler for SubProductProperties.
func (sp SubProductProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if sp.ProvisioningState != nil {
		objectMap["provisioningState"] = sp.ProvisioningState
	}
	return json.Marshal(objectMap)
}

// SubResource ...
type SubResource struct {
	// ID - READ-ONLY; Sub Resource Id
	ID *string `json:"id,omitempty"`
}
