package numbergroup

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"net/http"
)

// NumberClient is the test Infrastructure for AutoRest
type NumberClient struct {
	ManagementClient
}

// NewNumberClient creates an instance of the NumberClient client.
func NewNumberClient() NumberClient {
	return NewNumberClientWithBaseURI(DefaultBaseURI)
}

// NewNumberClientWithBaseURI creates an instance of the NumberClient client.
func NewNumberClientWithBaseURI(baseURI string) NumberClient {
	return NumberClient{NewWithBaseURI(baseURI)}
}

// GetBigDouble get big double value 2.5976931e+101
func (client NumberClient) GetBigDouble() (result Float64, err error) {
	req, err := client.GetBigDoublePreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "GetBigDouble", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetBigDoubleSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "GetBigDouble", resp, "Failure sending request")
		return
	}

	result, err = client.GetBigDoubleResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "GetBigDouble", resp, "Failure responding to request")
	}

	return
}

// GetBigDoublePreparer prepares the GetBigDouble request.
func (client NumberClient) GetBigDoublePreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/number/big/double/2.5976931e+101"))
	return preparer.Prepare(&http.Request{})
}

// GetBigDoubleSender sends the GetBigDouble request. The method will close the
// http.Response Body if it receives an error.
func (client NumberClient) GetBigDoubleSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client,
		req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetBigDoubleResponder handles the response to the GetBigDouble request. The method always
// closes the http.Response Body.
func (client NumberClient) GetBigDoubleResponder(resp *http.Response) (result Float64, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetBigDoubleNegativeDecimal get big double value -99999999.99
func (client NumberClient) GetBigDoubleNegativeDecimal() (result Float64, err error) {
	req, err := client.GetBigDoubleNegativeDecimalPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "GetBigDoubleNegativeDecimal", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetBigDoubleNegativeDecimalSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "GetBigDoubleNegativeDecimal", resp, "Failure sending request")
		return
	}

	result, err = client.GetBigDoubleNegativeDecimalResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "GetBigDoubleNegativeDecimal", resp, "Failure responding to request")
	}

	return
}

// GetBigDoubleNegativeDecimalPreparer prepares the GetBigDoubleNegativeDecimal request.
func (client NumberClient) GetBigDoubleNegativeDecimalPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/number/big/double/-99999999.99"))
	return preparer.Prepare(&http.Request{})
}

// GetBigDoubleNegativeDecimalSender sends the GetBigDoubleNegativeDecimal request. The method will close the
// http.Response Body if it receives an error.
func (client NumberClient) GetBigDoubleNegativeDecimalSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client,
		req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetBigDoubleNegativeDecimalResponder handles the response to the GetBigDoubleNegativeDecimal request. The method always
// closes the http.Response Body.
func (client NumberClient) GetBigDoubleNegativeDecimalResponder(resp *http.Response) (result Float64, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetBigDoublePositiveDecimal get big double value 99999999.99
func (client NumberClient) GetBigDoublePositiveDecimal() (result Float64, err error) {
	req, err := client.GetBigDoublePositiveDecimalPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "GetBigDoublePositiveDecimal", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetBigDoublePositiveDecimalSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "GetBigDoublePositiveDecimal", resp, "Failure sending request")
		return
	}

	result, err = client.GetBigDoublePositiveDecimalResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "GetBigDoublePositiveDecimal", resp, "Failure responding to request")
	}

	return
}

// GetBigDoublePositiveDecimalPreparer prepares the GetBigDoublePositiveDecimal request.
func (client NumberClient) GetBigDoublePositiveDecimalPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/number/big/double/99999999.99"))
	return preparer.Prepare(&http.Request{})
}

// GetBigDoublePositiveDecimalSender sends the GetBigDoublePositiveDecimal request. The method will close the
// http.Response Body if it receives an error.
func (client NumberClient) GetBigDoublePositiveDecimalSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client,
		req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetBigDoublePositiveDecimalResponder handles the response to the GetBigDoublePositiveDecimal request. The method always
// closes the http.Response Body.
func (client NumberClient) GetBigDoublePositiveDecimalResponder(resp *http.Response) (result Float64, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetBigFloat get big float value 3.402823e+20
func (client NumberClient) GetBigFloat() (result Float64, err error) {
	req, err := client.GetBigFloatPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "GetBigFloat", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetBigFloatSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "GetBigFloat", resp, "Failure sending request")
		return
	}

	result, err = client.GetBigFloatResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "GetBigFloat", resp, "Failure responding to request")
	}

	return
}

// GetBigFloatPreparer prepares the GetBigFloat request.
func (client NumberClient) GetBigFloatPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/number/big/float/3.402823e+20"))
	return preparer.Prepare(&http.Request{})
}

// GetBigFloatSender sends the GetBigFloat request. The method will close the
// http.Response Body if it receives an error.
func (client NumberClient) GetBigFloatSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client,
		req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetBigFloatResponder handles the response to the GetBigFloat request. The method always
// closes the http.Response Body.
func (client NumberClient) GetBigFloatResponder(resp *http.Response) (result Float64, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetInvalidDouble get invalid double Number value
func (client NumberClient) GetInvalidDouble() (result Float64, err error) {
	req, err := client.GetInvalidDoublePreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "GetInvalidDouble", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetInvalidDoubleSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "GetInvalidDouble", resp, "Failure sending request")
		return
	}

	result, err = client.GetInvalidDoubleResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "GetInvalidDouble", resp, "Failure responding to request")
	}

	return
}

// GetInvalidDoublePreparer prepares the GetInvalidDouble request.
func (client NumberClient) GetInvalidDoublePreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/number/invaliddouble"))
	return preparer.Prepare(&http.Request{})
}

// GetInvalidDoubleSender sends the GetInvalidDouble request. The method will close the
// http.Response Body if it receives an error.
func (client NumberClient) GetInvalidDoubleSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client,
		req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetInvalidDoubleResponder handles the response to the GetInvalidDouble request. The method always
// closes the http.Response Body.
func (client NumberClient) GetInvalidDoubleResponder(resp *http.Response) (result Float64, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetInvalidFloat get invalid float Number value
func (client NumberClient) GetInvalidFloat() (result Float64, err error) {
	req, err := client.GetInvalidFloatPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "GetInvalidFloat", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetInvalidFloatSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "GetInvalidFloat", resp, "Failure sending request")
		return
	}

	result, err = client.GetInvalidFloatResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "GetInvalidFloat", resp, "Failure responding to request")
	}

	return
}

// GetInvalidFloatPreparer prepares the GetInvalidFloat request.
func (client NumberClient) GetInvalidFloatPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/number/invalidfloat"))
	return preparer.Prepare(&http.Request{})
}

// GetInvalidFloatSender sends the GetInvalidFloat request. The method will close the
// http.Response Body if it receives an error.
func (client NumberClient) GetInvalidFloatSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client,
		req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetInvalidFloatResponder handles the response to the GetInvalidFloat request. The method always
// closes the http.Response Body.
func (client NumberClient) GetInvalidFloatResponder(resp *http.Response) (result Float64, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetNull get null Number value
func (client NumberClient) GetNull() (result Float64, err error) {
	req, err := client.GetNullPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "GetNull", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetNullSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "GetNull", resp, "Failure sending request")
		return
	}

	result, err = client.GetNullResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "GetNull", resp, "Failure responding to request")
	}

	return
}

// GetNullPreparer prepares the GetNull request.
func (client NumberClient) GetNullPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/number/null"))
	return preparer.Prepare(&http.Request{})
}

// GetNullSender sends the GetNull request. The method will close the
// http.Response Body if it receives an error.
func (client NumberClient) GetNullSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client,
		req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetNullResponder handles the response to the GetNull request. The method always
// closes the http.Response Body.
func (client NumberClient) GetNullResponder(resp *http.Response) (result Float64, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetSmallDouble get big double value 2.5976931e-101
func (client NumberClient) GetSmallDouble() (result Float64, err error) {
	req, err := client.GetSmallDoublePreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "GetSmallDouble", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSmallDoubleSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "GetSmallDouble", resp, "Failure sending request")
		return
	}

	result, err = client.GetSmallDoubleResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "GetSmallDouble", resp, "Failure responding to request")
	}

	return
}

// GetSmallDoublePreparer prepares the GetSmallDouble request.
func (client NumberClient) GetSmallDoublePreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/number/small/double/2.5976931e-101"))
	return preparer.Prepare(&http.Request{})
}

// GetSmallDoubleSender sends the GetSmallDouble request. The method will close the
// http.Response Body if it receives an error.
func (client NumberClient) GetSmallDoubleSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client,
		req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetSmallDoubleResponder handles the response to the GetSmallDouble request. The method always
// closes the http.Response Body.
func (client NumberClient) GetSmallDoubleResponder(resp *http.Response) (result Float64, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetSmallFloat get big double value 3.402823e-20
func (client NumberClient) GetSmallFloat() (result Float64, err error) {
	req, err := client.GetSmallFloatPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "GetSmallFloat", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSmallFloatSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "GetSmallFloat", resp, "Failure sending request")
		return
	}

	result, err = client.GetSmallFloatResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "GetSmallFloat", resp, "Failure responding to request")
	}

	return
}

// GetSmallFloatPreparer prepares the GetSmallFloat request.
func (client NumberClient) GetSmallFloatPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/number/small/float/3.402823e-20"))
	return preparer.Prepare(&http.Request{})
}

// GetSmallFloatSender sends the GetSmallFloat request. The method will close the
// http.Response Body if it receives an error.
func (client NumberClient) GetSmallFloatSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client,
		req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetSmallFloatResponder handles the response to the GetSmallFloat request. The method always
// closes the http.Response Body.
func (client NumberClient) GetSmallFloatResponder(resp *http.Response) (result Float64, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PutBigDouble put big double value 2.5976931e+101
//
func (client NumberClient) PutBigDouble(numberBody float64) (result autorest.Response, err error) {
	req, err := client.PutBigDoublePreparer(numberBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "PutBigDouble", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutBigDoubleSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "PutBigDouble", resp, "Failure sending request")
		return
	}

	result, err = client.PutBigDoubleResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "PutBigDouble", resp, "Failure responding to request")
	}

	return
}

// PutBigDoublePreparer prepares the PutBigDouble request.
func (client NumberClient) PutBigDoublePreparer(numberBody float64) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/number/big/double/2.5976931e+101"),
		autorest.WithJSON(numberBody))
	return preparer.Prepare(&http.Request{})
}

// PutBigDoubleSender sends the PutBigDouble request. The method will close the
// http.Response Body if it receives an error.
func (client NumberClient) PutBigDoubleSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client,
		req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PutBigDoubleResponder handles the response to the PutBigDouble request. The method always
// closes the http.Response Body.
func (client NumberClient) PutBigDoubleResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PutBigDoubleNegativeDecimal put big double value -99999999.99
//
func (client NumberClient) PutBigDoubleNegativeDecimal(numberBody float64) (result autorest.Response, err error) {
	req, err := client.PutBigDoubleNegativeDecimalPreparer(numberBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "PutBigDoubleNegativeDecimal", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutBigDoubleNegativeDecimalSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "PutBigDoubleNegativeDecimal", resp, "Failure sending request")
		return
	}

	result, err = client.PutBigDoubleNegativeDecimalResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "PutBigDoubleNegativeDecimal", resp, "Failure responding to request")
	}

	return
}

// PutBigDoubleNegativeDecimalPreparer prepares the PutBigDoubleNegativeDecimal request.
func (client NumberClient) PutBigDoubleNegativeDecimalPreparer(numberBody float64) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/number/big/double/-99999999.99"),
		autorest.WithJSON(numberBody))
	return preparer.Prepare(&http.Request{})
}

// PutBigDoubleNegativeDecimalSender sends the PutBigDoubleNegativeDecimal request. The method will close the
// http.Response Body if it receives an error.
func (client NumberClient) PutBigDoubleNegativeDecimalSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client,
		req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PutBigDoubleNegativeDecimalResponder handles the response to the PutBigDoubleNegativeDecimal request. The method always
// closes the http.Response Body.
func (client NumberClient) PutBigDoubleNegativeDecimalResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PutBigDoublePositiveDecimal put big double value 99999999.99
//
func (client NumberClient) PutBigDoublePositiveDecimal(numberBody float64) (result autorest.Response, err error) {
	req, err := client.PutBigDoublePositiveDecimalPreparer(numberBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "PutBigDoublePositiveDecimal", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutBigDoublePositiveDecimalSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "PutBigDoublePositiveDecimal", resp, "Failure sending request")
		return
	}

	result, err = client.PutBigDoublePositiveDecimalResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "PutBigDoublePositiveDecimal", resp, "Failure responding to request")
	}

	return
}

// PutBigDoublePositiveDecimalPreparer prepares the PutBigDoublePositiveDecimal request.
func (client NumberClient) PutBigDoublePositiveDecimalPreparer(numberBody float64) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/number/big/double/99999999.99"),
		autorest.WithJSON(numberBody))
	return preparer.Prepare(&http.Request{})
}

// PutBigDoublePositiveDecimalSender sends the PutBigDoublePositiveDecimal request. The method will close the
// http.Response Body if it receives an error.
func (client NumberClient) PutBigDoublePositiveDecimalSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client,
		req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PutBigDoublePositiveDecimalResponder handles the response to the PutBigDoublePositiveDecimal request. The method always
// closes the http.Response Body.
func (client NumberClient) PutBigDoublePositiveDecimalResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PutBigFloat put big float value 3.402823e+20
//
func (client NumberClient) PutBigFloat(numberBody float64) (result autorest.Response, err error) {
	req, err := client.PutBigFloatPreparer(numberBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "PutBigFloat", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutBigFloatSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "PutBigFloat", resp, "Failure sending request")
		return
	}

	result, err = client.PutBigFloatResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "PutBigFloat", resp, "Failure responding to request")
	}

	return
}

// PutBigFloatPreparer prepares the PutBigFloat request.
func (client NumberClient) PutBigFloatPreparer(numberBody float64) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/number/big/float/3.402823e+20"),
		autorest.WithJSON(numberBody))
	return preparer.Prepare(&http.Request{})
}

// PutBigFloatSender sends the PutBigFloat request. The method will close the
// http.Response Body if it receives an error.
func (client NumberClient) PutBigFloatSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client,
		req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PutBigFloatResponder handles the response to the PutBigFloat request. The method always
// closes the http.Response Body.
func (client NumberClient) PutBigFloatResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PutSmallDouble put small double value 2.5976931e-101
//
func (client NumberClient) PutSmallDouble(numberBody float64) (result autorest.Response, err error) {
	req, err := client.PutSmallDoublePreparer(numberBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "PutSmallDouble", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutSmallDoubleSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "PutSmallDouble", resp, "Failure sending request")
		return
	}

	result, err = client.PutSmallDoubleResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "PutSmallDouble", resp, "Failure responding to request")
	}

	return
}

// PutSmallDoublePreparer prepares the PutSmallDouble request.
func (client NumberClient) PutSmallDoublePreparer(numberBody float64) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/number/small/double/2.5976931e-101"),
		autorest.WithJSON(numberBody))
	return preparer.Prepare(&http.Request{})
}

// PutSmallDoubleSender sends the PutSmallDouble request. The method will close the
// http.Response Body if it receives an error.
func (client NumberClient) PutSmallDoubleSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client,
		req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PutSmallDoubleResponder handles the response to the PutSmallDouble request. The method always
// closes the http.Response Body.
func (client NumberClient) PutSmallDoubleResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PutSmallFloat put small float value 3.402823e-20
//
func (client NumberClient) PutSmallFloat(numberBody float64) (result autorest.Response, err error) {
	req, err := client.PutSmallFloatPreparer(numberBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "PutSmallFloat", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutSmallFloatSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "PutSmallFloat", resp, "Failure sending request")
		return
	}

	result, err = client.PutSmallFloatResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "numbergroup.NumberClient", "PutSmallFloat", resp, "Failure responding to request")
	}

	return
}

// PutSmallFloatPreparer prepares the PutSmallFloat request.
func (client NumberClient) PutSmallFloatPreparer(numberBody float64) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/number/small/float/3.402823e-20"),
		autorest.WithJSON(numberBody))
	return preparer.Prepare(&http.Request{})
}

// PutSmallFloatSender sends the PutSmallFloat request. The method will close the
// http.Response Body if it receives an error.
func (client NumberClient) PutSmallFloatSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client,
		req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PutSmallFloatResponder handles the response to the PutSmallFloat request. The method always
// closes the http.Response Body.
func (client NumberClient) PutSmallFloatResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}
