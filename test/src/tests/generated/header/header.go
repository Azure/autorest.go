package headergroup

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/Azure/go-autorest/autorest/validation"
	"net/http"
)

// HeaderClient is the test Infrastructure for AutoRest
type HeaderClient struct {
	ManagementClient
}

// NewHeaderClient creates an instance of the HeaderClient client.
func NewHeaderClient() HeaderClient {
	return NewHeaderClientWithBaseURI(DefaultBaseURI)
}

// NewHeaderClientWithBaseURI creates an instance of the HeaderClient client.
func NewHeaderClientWithBaseURI(baseURI string) HeaderClient {
	return HeaderClient{NewWithBaseURI(baseURI)}
}

// CustomRequestID send x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the header of the request
func (client HeaderClient) CustomRequestID() (result autorest.Response, err error) {
	req, err := client.CustomRequestIDPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "CustomRequestID", nil, "Failure preparing request")
		return
	}

	resp, err := client.CustomRequestIDSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "CustomRequestID", resp, "Failure sending request")
		return
	}

	result, err = client.CustomRequestIDResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "CustomRequestID", resp, "Failure responding to request")
	}

	return
}

// CustomRequestIDPreparer prepares the CustomRequestID request.
func (client HeaderClient) CustomRequestIDPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/custom/x-ms-client-request-id/9C4D50EE-2D56-4CD3-8152-34347DC9F2B0"))
	return preparer.Prepare(&http.Request{})
}

// CustomRequestIDSender sends the CustomRequestID request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) CustomRequestIDSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CustomRequestIDResponder handles the response to the CustomRequestID request. The method always
// closes the http.Response Body.
func (client HeaderClient) CustomRequestIDResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ParamBool send a post request with header values "scenario": "true", "value": true or "scenario": "false", "value":
// false
//
// scenario is send a post request with header values "scenario": "true" or "false" value is send a post request with
// header values true or false
func (client HeaderClient) ParamBool(scenario string, value bool) (result autorest.Response, err error) {
	req, err := client.ParamBoolPreparer(scenario, value)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamBool", nil, "Failure preparing request")
		return
	}

	resp, err := client.ParamBoolSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamBool", resp, "Failure sending request")
		return
	}

	result, err = client.ParamBoolResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamBool", resp, "Failure responding to request")
	}

	return
}

// ParamBoolPreparer prepares the ParamBool request.
func (client HeaderClient) ParamBoolPreparer(scenario string, value bool) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/param/prim/bool"),
		autorest.WithHeader("scenario", autorest.String(scenario)),
		autorest.WithHeader("value", autorest.String(value)))
	return preparer.Prepare(&http.Request{})
}

// ParamBoolSender sends the ParamBool request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) ParamBoolSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ParamBoolResponder handles the response to the ParamBool request. The method always
// closes the http.Response Body.
func (client HeaderClient) ParamBoolResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ParamByte send a post request with header values "scenario": "valid", "value": "啊齄丂狛狜隣郎隣兀﨩"
//
// scenario is send a post request with header values "scenario": "valid" value is send a post request with header
// values "啊齄丂狛狜隣郎隣兀﨩"
func (client HeaderClient) ParamByte(scenario string, value []byte) (result autorest.Response, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: value,
			Constraints: []validation.Constraint{{Target: "value", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "headergroup.HeaderClient", "ParamByte")
	}

	req, err := client.ParamBytePreparer(scenario, value)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamByte", nil, "Failure preparing request")
		return
	}

	resp, err := client.ParamByteSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamByte", resp, "Failure sending request")
		return
	}

	result, err = client.ParamByteResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamByte", resp, "Failure responding to request")
	}

	return
}

// ParamBytePreparer prepares the ParamByte request.
func (client HeaderClient) ParamBytePreparer(scenario string, value []byte) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/param/prim/byte"),
		autorest.WithHeader("scenario", autorest.String(scenario)),
		autorest.WithHeader("value", autorest.String(value)))
	return preparer.Prepare(&http.Request{})
}

// ParamByteSender sends the ParamByte request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) ParamByteSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ParamByteResponder handles the response to the ParamByte request. The method always
// closes the http.Response Body.
func (client HeaderClient) ParamByteResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ParamDate send a post request with header values "scenario": "valid", "value": "2010-01-01" or "scenario": "min",
// "value": "0001-01-01"
//
// scenario is send a post request with header values "scenario": "valid" or "min" value is send a post request with
// header values "2010-01-01" or "0001-01-01"
func (client HeaderClient) ParamDate(scenario string, value date.Date) (result autorest.Response, err error) {
	req, err := client.ParamDatePreparer(scenario, value)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamDate", nil, "Failure preparing request")
		return
	}

	resp, err := client.ParamDateSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamDate", resp, "Failure sending request")
		return
	}

	result, err = client.ParamDateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamDate", resp, "Failure responding to request")
	}

	return
}

// ParamDatePreparer prepares the ParamDate request.
func (client HeaderClient) ParamDatePreparer(scenario string, value date.Date) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/param/prim/date"),
		autorest.WithHeader("scenario", autorest.String(scenario)),
		autorest.WithHeader("value", autorest.String(value)))
	return preparer.Prepare(&http.Request{})
}

// ParamDateSender sends the ParamDate request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) ParamDateSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ParamDateResponder handles the response to the ParamDate request. The method always
// closes the http.Response Body.
func (client HeaderClient) ParamDateResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ParamDatetime send a post request with header values "scenario": "valid", "value": "2010-01-01T12:34:56Z" or
// "scenario": "min", "value": "0001-01-01T00:00:00Z"
//
// scenario is send a post request with header values "scenario": "valid" or "min" value is send a post request with
// header values "2010-01-01T12:34:56Z" or "0001-01-01T00:00:00Z"
func (client HeaderClient) ParamDatetime(scenario string, value date.Time) (result autorest.Response, err error) {
	req, err := client.ParamDatetimePreparer(scenario, value)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamDatetime", nil, "Failure preparing request")
		return
	}

	resp, err := client.ParamDatetimeSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamDatetime", resp, "Failure sending request")
		return
	}

	result, err = client.ParamDatetimeResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamDatetime", resp, "Failure responding to request")
	}

	return
}

// ParamDatetimePreparer prepares the ParamDatetime request.
func (client HeaderClient) ParamDatetimePreparer(scenario string, value date.Time) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/param/prim/datetime"),
		autorest.WithHeader("scenario", autorest.String(scenario)),
		autorest.WithHeader("value", autorest.String(value)))
	return preparer.Prepare(&http.Request{})
}

// ParamDatetimeSender sends the ParamDatetime request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) ParamDatetimeSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ParamDatetimeResponder handles the response to the ParamDatetime request. The method always
// closes the http.Response Body.
func (client HeaderClient) ParamDatetimeResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ParamDatetimeRfc1123 send a post request with header values "scenario": "valid", "value": "Wed, 01 Jan 2010 12:34:56
// GMT" or "scenario": "min", "value": "Mon, 01 Jan 0001 00:00:00 GMT"
//
// scenario is send a post request with header values "scenario": "valid" or "min" value is send a post request with
// header values "Wed, 01 Jan 2010 12:34:56 GMT" or "Mon, 01 Jan 0001 00:00:00 GMT"
func (client HeaderClient) ParamDatetimeRfc1123(scenario string, value *date.TimeRFC1123) (result autorest.Response, err error) {
	req, err := client.ParamDatetimeRfc1123Preparer(scenario, value)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamDatetimeRfc1123", nil, "Failure preparing request")
		return
	}

	resp, err := client.ParamDatetimeRfc1123Sender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamDatetimeRfc1123", resp, "Failure sending request")
		return
	}

	result, err = client.ParamDatetimeRfc1123Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamDatetimeRfc1123", resp, "Failure responding to request")
	}

	return
}

// ParamDatetimeRfc1123Preparer prepares the ParamDatetimeRfc1123 request.
func (client HeaderClient) ParamDatetimeRfc1123Preparer(scenario string, value *date.TimeRFC1123) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/param/prim/datetimerfc1123"),
		autorest.WithHeader("scenario", autorest.String(scenario)))
	if value != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithHeader("value", autorest.String(value)))
	}
	return preparer.Prepare(&http.Request{})
}

// ParamDatetimeRfc1123Sender sends the ParamDatetimeRfc1123 request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) ParamDatetimeRfc1123Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ParamDatetimeRfc1123Responder handles the response to the ParamDatetimeRfc1123 request. The method always
// closes the http.Response Body.
func (client HeaderClient) ParamDatetimeRfc1123Responder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ParamDouble send a post request with header values "scenario": "positive", "value": 7e120 or "scenario": "negative",
// "value": -3.0
//
// scenario is send a post request with header values "scenario": "positive" or "negative" value is send a post request
// with header values 7e120 or -3.0
func (client HeaderClient) ParamDouble(scenario string, value float64) (result autorest.Response, err error) {
	req, err := client.ParamDoublePreparer(scenario, value)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamDouble", nil, "Failure preparing request")
		return
	}

	resp, err := client.ParamDoubleSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamDouble", resp, "Failure sending request")
		return
	}

	result, err = client.ParamDoubleResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamDouble", resp, "Failure responding to request")
	}

	return
}

// ParamDoublePreparer prepares the ParamDouble request.
func (client HeaderClient) ParamDoublePreparer(scenario string, value float64) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/param/prim/double"),
		autorest.WithHeader("scenario", autorest.String(scenario)),
		autorest.WithHeader("value", autorest.String(value)))
	return preparer.Prepare(&http.Request{})
}

// ParamDoubleSender sends the ParamDouble request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) ParamDoubleSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ParamDoubleResponder handles the response to the ParamDouble request. The method always
// closes the http.Response Body.
func (client HeaderClient) ParamDoubleResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ParamDuration send a post request with header values "scenario": "valid", "value": "P123DT22H14M12.011S"
//
// scenario is send a post request with header values "scenario": "valid" value is send a post request with header
// values "P123DT22H14M12.011S"
func (client HeaderClient) ParamDuration(scenario string, value string) (result autorest.Response, err error) {
	req, err := client.ParamDurationPreparer(scenario, value)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamDuration", nil, "Failure preparing request")
		return
	}

	resp, err := client.ParamDurationSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamDuration", resp, "Failure sending request")
		return
	}

	result, err = client.ParamDurationResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamDuration", resp, "Failure responding to request")
	}

	return
}

// ParamDurationPreparer prepares the ParamDuration request.
func (client HeaderClient) ParamDurationPreparer(scenario string, value string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/param/prim/duration"),
		autorest.WithHeader("scenario", autorest.String(scenario)),
		autorest.WithHeader("value", autorest.String(value)))
	return preparer.Prepare(&http.Request{})
}

// ParamDurationSender sends the ParamDuration request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) ParamDurationSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ParamDurationResponder handles the response to the ParamDuration request. The method always
// closes the http.Response Body.
func (client HeaderClient) ParamDurationResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ParamEnum send a post request with header values "scenario": "valid", "value": "GREY" or "scenario": "null",
// "value": null
//
// scenario is send a post request with header values "scenario": "valid" or "null" or "empty" value is send a post
// request with header values 'GREY'
func (client HeaderClient) ParamEnum(scenario string, value GreyscaleColors) (result autorest.Response, err error) {
	req, err := client.ParamEnumPreparer(scenario, value)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamEnum", nil, "Failure preparing request")
		return
	}

	resp, err := client.ParamEnumSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamEnum", resp, "Failure sending request")
		return
	}

	result, err = client.ParamEnumResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamEnum", resp, "Failure responding to request")
	}

	return
}

// ParamEnumPreparer prepares the ParamEnum request.
func (client HeaderClient) ParamEnumPreparer(scenario string, value GreyscaleColors) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/param/prim/enum"),
		autorest.WithHeader("scenario", autorest.String(scenario)))
	if len(string(value)) > 0 {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithHeader("value", autorest.String(value)))
	}
	return preparer.Prepare(&http.Request{})
}

// ParamEnumSender sends the ParamEnum request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) ParamEnumSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ParamEnumResponder handles the response to the ParamEnum request. The method always
// closes the http.Response Body.
func (client HeaderClient) ParamEnumResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ParamExistingKey send a post request with header value "User-Agent": "overwrite"
//
// userAgent is send a post request with header value "User-Agent": "overwrite"
func (client HeaderClient) ParamExistingKey(userAgent string) (result autorest.Response, err error) {
	req, err := client.ParamExistingKeyPreparer(userAgent)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamExistingKey", nil, "Failure preparing request")
		return
	}

	resp, err := client.ParamExistingKeySender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamExistingKey", resp, "Failure sending request")
		return
	}

	result, err = client.ParamExistingKeyResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamExistingKey", resp, "Failure responding to request")
	}

	return
}

// ParamExistingKeyPreparer prepares the ParamExistingKey request.
func (client HeaderClient) ParamExistingKeyPreparer(userAgent string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/param/existingkey"),
		autorest.WithHeader("User-Agent", autorest.String(userAgent)))
	return preparer.Prepare(&http.Request{})
}

// ParamExistingKeySender sends the ParamExistingKey request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) ParamExistingKeySender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ParamExistingKeyResponder handles the response to the ParamExistingKey request. The method always
// closes the http.Response Body.
func (client HeaderClient) ParamExistingKeyResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ParamFloat send a post request with header values "scenario": "positive", "value": 0.07 or "scenario": "negative",
// "value": -3.0
//
// scenario is send a post request with header values "scenario": "positive" or "negative" value is send a post request
// with header values 0.07 or -3.0
func (client HeaderClient) ParamFloat(scenario string, value float64) (result autorest.Response, err error) {
	req, err := client.ParamFloatPreparer(scenario, value)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamFloat", nil, "Failure preparing request")
		return
	}

	resp, err := client.ParamFloatSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamFloat", resp, "Failure sending request")
		return
	}

	result, err = client.ParamFloatResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamFloat", resp, "Failure responding to request")
	}

	return
}

// ParamFloatPreparer prepares the ParamFloat request.
func (client HeaderClient) ParamFloatPreparer(scenario string, value float64) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/param/prim/float"),
		autorest.WithHeader("scenario", autorest.String(scenario)),
		autorest.WithHeader("value", autorest.String(value)))
	return preparer.Prepare(&http.Request{})
}

// ParamFloatSender sends the ParamFloat request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) ParamFloatSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ParamFloatResponder handles the response to the ParamFloat request. The method always
// closes the http.Response Body.
func (client HeaderClient) ParamFloatResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ParamInteger send a post request with header values "scenario": "positive", "value": 1 or "scenario": "negative",
// "value": -2
//
// scenario is send a post request with header values "scenario": "positive" or "negative" value is send a post request
// with header values 1 or -2
func (client HeaderClient) ParamInteger(scenario string, value int32) (result autorest.Response, err error) {
	req, err := client.ParamIntegerPreparer(scenario, value)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamInteger", nil, "Failure preparing request")
		return
	}

	resp, err := client.ParamIntegerSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamInteger", resp, "Failure sending request")
		return
	}

	result, err = client.ParamIntegerResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamInteger", resp, "Failure responding to request")
	}

	return
}

// ParamIntegerPreparer prepares the ParamInteger request.
func (client HeaderClient) ParamIntegerPreparer(scenario string, value int32) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/param/prim/integer"),
		autorest.WithHeader("scenario", autorest.String(scenario)),
		autorest.WithHeader("value", autorest.String(value)))
	return preparer.Prepare(&http.Request{})
}

// ParamIntegerSender sends the ParamInteger request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) ParamIntegerSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ParamIntegerResponder handles the response to the ParamInteger request. The method always
// closes the http.Response Body.
func (client HeaderClient) ParamIntegerResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ParamLong send a post request with header values "scenario": "positive", "value": 105 or "scenario": "negative",
// "value": -2
//
// scenario is send a post request with header values "scenario": "positive" or "negative" value is send a post request
// with header values 105 or -2
func (client HeaderClient) ParamLong(scenario string, value int64) (result autorest.Response, err error) {
	req, err := client.ParamLongPreparer(scenario, value)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamLong", nil, "Failure preparing request")
		return
	}

	resp, err := client.ParamLongSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamLong", resp, "Failure sending request")
		return
	}

	result, err = client.ParamLongResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamLong", resp, "Failure responding to request")
	}

	return
}

// ParamLongPreparer prepares the ParamLong request.
func (client HeaderClient) ParamLongPreparer(scenario string, value int64) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/param/prim/long"),
		autorest.WithHeader("scenario", autorest.String(scenario)),
		autorest.WithHeader("value", autorest.String(value)))
	return preparer.Prepare(&http.Request{})
}

// ParamLongSender sends the ParamLong request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) ParamLongSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ParamLongResponder handles the response to the ParamLong request. The method always
// closes the http.Response Body.
func (client HeaderClient) ParamLongResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ParamProtectedKey send a post request with header value "Content-Type": "text/html"
//
// contentType is send a post request with header value "Content-Type": "text/html"
func (client HeaderClient) ParamProtectedKey(contentType string) (result autorest.Response, err error) {
	req, err := client.ParamProtectedKeyPreparer(contentType)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamProtectedKey", nil, "Failure preparing request")
		return
	}

	resp, err := client.ParamProtectedKeySender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamProtectedKey", resp, "Failure sending request")
		return
	}

	result, err = client.ParamProtectedKeyResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamProtectedKey", resp, "Failure responding to request")
	}

	return
}

// ParamProtectedKeyPreparer prepares the ParamProtectedKey request.
func (client HeaderClient) ParamProtectedKeyPreparer(contentType string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/param/protectedkey"),
		autorest.WithHeader("Content-Type", autorest.String(contentType)))
	return preparer.Prepare(&http.Request{})
}

// ParamProtectedKeySender sends the ParamProtectedKey request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) ParamProtectedKeySender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ParamProtectedKeyResponder handles the response to the ParamProtectedKey request. The method always
// closes the http.Response Body.
func (client HeaderClient) ParamProtectedKeyResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ParamString send a post request with header values "scenario": "valid", "value": "The quick brown fox jumps over the
// lazy dog" or "scenario": "null", "value": null or "scenario": "empty", "value": ""
//
// scenario is send a post request with header values "scenario": "valid" or "null" or "empty" value is send a post
// request with header values "The quick brown fox jumps over the lazy dog" or null or ""
func (client HeaderClient) ParamString(scenario string, value string) (result autorest.Response, err error) {
	req, err := client.ParamStringPreparer(scenario, value)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamString", nil, "Failure preparing request")
		return
	}

	resp, err := client.ParamStringSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamString", resp, "Failure sending request")
		return
	}

	result, err = client.ParamStringResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ParamString", resp, "Failure responding to request")
	}

	return
}

// ParamStringPreparer prepares the ParamString request.
func (client HeaderClient) ParamStringPreparer(scenario string, value string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/param/prim/string"),
		autorest.WithHeader("scenario", autorest.String(scenario)))
	if len(value) > 0 {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithHeader("value", autorest.String(value)))
	}
	return preparer.Prepare(&http.Request{})
}

// ParamStringSender sends the ParamString request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) ParamStringSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ParamStringResponder handles the response to the ParamString request. The method always
// closes the http.Response Body.
func (client HeaderClient) ParamStringResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ResponseBool get a response with header value "value": true or false
//
// scenario is send a post request with header values "scenario": "true" or "false"
func (client HeaderClient) ResponseBool(scenario string) (result autorest.Response, err error) {
	req, err := client.ResponseBoolPreparer(scenario)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseBool", nil, "Failure preparing request")
		return
	}

	resp, err := client.ResponseBoolSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseBool", resp, "Failure sending request")
		return
	}

	result, err = client.ResponseBoolResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseBool", resp, "Failure responding to request")
	}

	return
}

// ResponseBoolPreparer prepares the ResponseBool request.
func (client HeaderClient) ResponseBoolPreparer(scenario string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/response/prim/bool"),
		autorest.WithHeader("scenario", autorest.String(scenario)))
	return preparer.Prepare(&http.Request{})
}

// ResponseBoolSender sends the ResponseBool request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) ResponseBoolSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ResponseBoolResponder handles the response to the ResponseBool request. The method always
// closes the http.Response Body.
func (client HeaderClient) ResponseBoolResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ResponseByte get a response with header values "啊齄丂狛狜隣郎隣兀﨩"
//
// scenario is send a post request with header values "scenario": "valid"
func (client HeaderClient) ResponseByte(scenario string) (result autorest.Response, err error) {
	req, err := client.ResponseBytePreparer(scenario)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseByte", nil, "Failure preparing request")
		return
	}

	resp, err := client.ResponseByteSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseByte", resp, "Failure sending request")
		return
	}

	result, err = client.ResponseByteResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseByte", resp, "Failure responding to request")
	}

	return
}

// ResponseBytePreparer prepares the ResponseByte request.
func (client HeaderClient) ResponseBytePreparer(scenario string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/response/prim/byte"),
		autorest.WithHeader("scenario", autorest.String(scenario)))
	return preparer.Prepare(&http.Request{})
}

// ResponseByteSender sends the ResponseByte request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) ResponseByteSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ResponseByteResponder handles the response to the ResponseByte request. The method always
// closes the http.Response Body.
func (client HeaderClient) ResponseByteResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ResponseDate get a response with header values "2010-01-01" or "0001-01-01"
//
// scenario is send a post request with header values "scenario": "valid" or "min"
func (client HeaderClient) ResponseDate(scenario string) (result autorest.Response, err error) {
	req, err := client.ResponseDatePreparer(scenario)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseDate", nil, "Failure preparing request")
		return
	}

	resp, err := client.ResponseDateSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseDate", resp, "Failure sending request")
		return
	}

	result, err = client.ResponseDateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseDate", resp, "Failure responding to request")
	}

	return
}

// ResponseDatePreparer prepares the ResponseDate request.
func (client HeaderClient) ResponseDatePreparer(scenario string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/response/prim/date"),
		autorest.WithHeader("scenario", autorest.String(scenario)))
	return preparer.Prepare(&http.Request{})
}

// ResponseDateSender sends the ResponseDate request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) ResponseDateSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ResponseDateResponder handles the response to the ResponseDate request. The method always
// closes the http.Response Body.
func (client HeaderClient) ResponseDateResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ResponseDatetime get a response with header values "2010-01-01T12:34:56Z" or "0001-01-01T00:00:00Z"
//
// scenario is send a post request with header values "scenario": "valid" or "min"
func (client HeaderClient) ResponseDatetime(scenario string) (result autorest.Response, err error) {
	req, err := client.ResponseDatetimePreparer(scenario)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseDatetime", nil, "Failure preparing request")
		return
	}

	resp, err := client.ResponseDatetimeSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseDatetime", resp, "Failure sending request")
		return
	}

	result, err = client.ResponseDatetimeResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseDatetime", resp, "Failure responding to request")
	}

	return
}

// ResponseDatetimePreparer prepares the ResponseDatetime request.
func (client HeaderClient) ResponseDatetimePreparer(scenario string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/response/prim/datetime"),
		autorest.WithHeader("scenario", autorest.String(scenario)))
	return preparer.Prepare(&http.Request{})
}

// ResponseDatetimeSender sends the ResponseDatetime request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) ResponseDatetimeSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ResponseDatetimeResponder handles the response to the ResponseDatetime request. The method always
// closes the http.Response Body.
func (client HeaderClient) ResponseDatetimeResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ResponseDatetimeRfc1123 get a response with header values "Wed, 01 Jan 2010 12:34:56 GMT" or "Mon, 01 Jan 0001
// 00:00:00 GMT"
//
// scenario is send a post request with header values "scenario": "valid" or "min"
func (client HeaderClient) ResponseDatetimeRfc1123(scenario string) (result autorest.Response, err error) {
	req, err := client.ResponseDatetimeRfc1123Preparer(scenario)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseDatetimeRfc1123", nil, "Failure preparing request")
		return
	}

	resp, err := client.ResponseDatetimeRfc1123Sender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseDatetimeRfc1123", resp, "Failure sending request")
		return
	}

	result, err = client.ResponseDatetimeRfc1123Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseDatetimeRfc1123", resp, "Failure responding to request")
	}

	return
}

// ResponseDatetimeRfc1123Preparer prepares the ResponseDatetimeRfc1123 request.
func (client HeaderClient) ResponseDatetimeRfc1123Preparer(scenario string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/response/prim/datetimerfc1123"),
		autorest.WithHeader("scenario", autorest.String(scenario)))
	return preparer.Prepare(&http.Request{})
}

// ResponseDatetimeRfc1123Sender sends the ResponseDatetimeRfc1123 request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) ResponseDatetimeRfc1123Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ResponseDatetimeRfc1123Responder handles the response to the ResponseDatetimeRfc1123 request. The method always
// closes the http.Response Body.
func (client HeaderClient) ResponseDatetimeRfc1123Responder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ResponseDouble get a response with header value "value": 7e120 or -3.0
//
// scenario is send a post request with header values "scenario": "positive" or "negative"
func (client HeaderClient) ResponseDouble(scenario string) (result autorest.Response, err error) {
	req, err := client.ResponseDoublePreparer(scenario)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseDouble", nil, "Failure preparing request")
		return
	}

	resp, err := client.ResponseDoubleSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseDouble", resp, "Failure sending request")
		return
	}

	result, err = client.ResponseDoubleResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseDouble", resp, "Failure responding to request")
	}

	return
}

// ResponseDoublePreparer prepares the ResponseDouble request.
func (client HeaderClient) ResponseDoublePreparer(scenario string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/response/prim/double"),
		autorest.WithHeader("scenario", autorest.String(scenario)))
	return preparer.Prepare(&http.Request{})
}

// ResponseDoubleSender sends the ResponseDouble request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) ResponseDoubleSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ResponseDoubleResponder handles the response to the ResponseDouble request. The method always
// closes the http.Response Body.
func (client HeaderClient) ResponseDoubleResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ResponseDuration get a response with header values "P123DT22H14M12.011S"
//
// scenario is send a post request with header values "scenario": "valid"
func (client HeaderClient) ResponseDuration(scenario string) (result autorest.Response, err error) {
	req, err := client.ResponseDurationPreparer(scenario)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseDuration", nil, "Failure preparing request")
		return
	}

	resp, err := client.ResponseDurationSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseDuration", resp, "Failure sending request")
		return
	}

	result, err = client.ResponseDurationResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseDuration", resp, "Failure responding to request")
	}

	return
}

// ResponseDurationPreparer prepares the ResponseDuration request.
func (client HeaderClient) ResponseDurationPreparer(scenario string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/response/prim/duration"),
		autorest.WithHeader("scenario", autorest.String(scenario)))
	return preparer.Prepare(&http.Request{})
}

// ResponseDurationSender sends the ResponseDuration request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) ResponseDurationSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ResponseDurationResponder handles the response to the ResponseDuration request. The method always
// closes the http.Response Body.
func (client HeaderClient) ResponseDurationResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ResponseEnum get a response with header values "GREY" or null
//
// scenario is send a post request with header values "scenario": "valid" or "null" or "empty"
func (client HeaderClient) ResponseEnum(scenario string) (result autorest.Response, err error) {
	req, err := client.ResponseEnumPreparer(scenario)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseEnum", nil, "Failure preparing request")
		return
	}

	resp, err := client.ResponseEnumSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseEnum", resp, "Failure sending request")
		return
	}

	result, err = client.ResponseEnumResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseEnum", resp, "Failure responding to request")
	}

	return
}

// ResponseEnumPreparer prepares the ResponseEnum request.
func (client HeaderClient) ResponseEnumPreparer(scenario string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/response/prim/enum"),
		autorest.WithHeader("scenario", autorest.String(scenario)))
	return preparer.Prepare(&http.Request{})
}

// ResponseEnumSender sends the ResponseEnum request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) ResponseEnumSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ResponseEnumResponder handles the response to the ResponseEnum request. The method always
// closes the http.Response Body.
func (client HeaderClient) ResponseEnumResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ResponseExistingKey get a response with header value "User-Agent": "overwrite"
func (client HeaderClient) ResponseExistingKey() (result autorest.Response, err error) {
	req, err := client.ResponseExistingKeyPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseExistingKey", nil, "Failure preparing request")
		return
	}

	resp, err := client.ResponseExistingKeySender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseExistingKey", resp, "Failure sending request")
		return
	}

	result, err = client.ResponseExistingKeyResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseExistingKey", resp, "Failure responding to request")
	}

	return
}

// ResponseExistingKeyPreparer prepares the ResponseExistingKey request.
func (client HeaderClient) ResponseExistingKeyPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/response/existingkey"))
	return preparer.Prepare(&http.Request{})
}

// ResponseExistingKeySender sends the ResponseExistingKey request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) ResponseExistingKeySender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ResponseExistingKeyResponder handles the response to the ResponseExistingKey request. The method always
// closes the http.Response Body.
func (client HeaderClient) ResponseExistingKeyResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ResponseFloat get a response with header value "value": 0.07 or -3.0
//
// scenario is send a post request with header values "scenario": "positive" or "negative"
func (client HeaderClient) ResponseFloat(scenario string) (result autorest.Response, err error) {
	req, err := client.ResponseFloatPreparer(scenario)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseFloat", nil, "Failure preparing request")
		return
	}

	resp, err := client.ResponseFloatSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseFloat", resp, "Failure sending request")
		return
	}

	result, err = client.ResponseFloatResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseFloat", resp, "Failure responding to request")
	}

	return
}

// ResponseFloatPreparer prepares the ResponseFloat request.
func (client HeaderClient) ResponseFloatPreparer(scenario string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/response/prim/float"),
		autorest.WithHeader("scenario", autorest.String(scenario)))
	return preparer.Prepare(&http.Request{})
}

// ResponseFloatSender sends the ResponseFloat request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) ResponseFloatSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ResponseFloatResponder handles the response to the ResponseFloat request. The method always
// closes the http.Response Body.
func (client HeaderClient) ResponseFloatResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ResponseInteger get a response with header value "value": 1 or -2
//
// scenario is send a post request with header values "scenario": "positive" or "negative"
func (client HeaderClient) ResponseInteger(scenario string) (result autorest.Response, err error) {
	req, err := client.ResponseIntegerPreparer(scenario)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseInteger", nil, "Failure preparing request")
		return
	}

	resp, err := client.ResponseIntegerSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseInteger", resp, "Failure sending request")
		return
	}

	result, err = client.ResponseIntegerResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseInteger", resp, "Failure responding to request")
	}

	return
}

// ResponseIntegerPreparer prepares the ResponseInteger request.
func (client HeaderClient) ResponseIntegerPreparer(scenario string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/response/prim/integer"),
		autorest.WithHeader("scenario", autorest.String(scenario)))
	return preparer.Prepare(&http.Request{})
}

// ResponseIntegerSender sends the ResponseInteger request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) ResponseIntegerSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ResponseIntegerResponder handles the response to the ResponseInteger request. The method always
// closes the http.Response Body.
func (client HeaderClient) ResponseIntegerResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ResponseLong get a response with header value "value": 105 or -2
//
// scenario is send a post request with header values "scenario": "positive" or "negative"
func (client HeaderClient) ResponseLong(scenario string) (result autorest.Response, err error) {
	req, err := client.ResponseLongPreparer(scenario)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseLong", nil, "Failure preparing request")
		return
	}

	resp, err := client.ResponseLongSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseLong", resp, "Failure sending request")
		return
	}

	result, err = client.ResponseLongResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseLong", resp, "Failure responding to request")
	}

	return
}

// ResponseLongPreparer prepares the ResponseLong request.
func (client HeaderClient) ResponseLongPreparer(scenario string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/response/prim/long"),
		autorest.WithHeader("scenario", autorest.String(scenario)))
	return preparer.Prepare(&http.Request{})
}

// ResponseLongSender sends the ResponseLong request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) ResponseLongSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ResponseLongResponder handles the response to the ResponseLong request. The method always
// closes the http.Response Body.
func (client HeaderClient) ResponseLongResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ResponseProtectedKey get a response with header value "Content-Type": "text/html"
func (client HeaderClient) ResponseProtectedKey() (result autorest.Response, err error) {
	req, err := client.ResponseProtectedKeyPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseProtectedKey", nil, "Failure preparing request")
		return
	}

	resp, err := client.ResponseProtectedKeySender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseProtectedKey", resp, "Failure sending request")
		return
	}

	result, err = client.ResponseProtectedKeyResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseProtectedKey", resp, "Failure responding to request")
	}

	return
}

// ResponseProtectedKeyPreparer prepares the ResponseProtectedKey request.
func (client HeaderClient) ResponseProtectedKeyPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/response/protectedkey"))
	return preparer.Prepare(&http.Request{})
}

// ResponseProtectedKeySender sends the ResponseProtectedKey request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) ResponseProtectedKeySender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ResponseProtectedKeyResponder handles the response to the ResponseProtectedKey request. The method always
// closes the http.Response Body.
func (client HeaderClient) ResponseProtectedKeyResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ResponseString get a response with header values "The quick brown fox jumps over the lazy dog" or null or ""
//
// scenario is send a post request with header values "scenario": "valid" or "null" or "empty"
func (client HeaderClient) ResponseString(scenario string) (result autorest.Response, err error) {
	req, err := client.ResponseStringPreparer(scenario)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseString", nil, "Failure preparing request")
		return
	}

	resp, err := client.ResponseStringSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseString", resp, "Failure sending request")
		return
	}

	result, err = client.ResponseStringResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "headergroup.HeaderClient", "ResponseString", resp, "Failure responding to request")
	}

	return
}

// ResponseStringPreparer prepares the ResponseString request.
func (client HeaderClient) ResponseStringPreparer(scenario string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/header/response/prim/string"),
		autorest.WithHeader("scenario", autorest.String(scenario)))
	return preparer.Prepare(&http.Request{})
}

// ResponseStringSender sends the ResponseString request. The method will close the
// http.Response Body if it receives an error.
func (client HeaderClient) ResponseStringSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ResponseStringResponder handles the response to the ResponseString request. The method always
// closes the http.Response Body.
func (client HeaderClient) ResponseStringResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}
