package stringgroup

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"net/http"
)

// GroupClient is the test Infrastructure for AutoRest Swagger BAT
type GroupClient struct {
	ManagementClient
}

// NewGroupClient creates an instance of the GroupClient client.
func NewGroupClient() GroupClient {
	return NewGroupClientWithBaseURI(DefaultBaseURI)
}

// NewGroupClientWithBaseURI creates an instance of the GroupClient client.
func NewGroupClientWithBaseURI(baseURI string) GroupClient {
	return GroupClient{NewWithBaseURI(baseURI)}
}

// GetBase64Encoded get value that is base64 encoded
func (client GroupClient) GetBase64Encoded() (result Base64URL, err error) {
	req, err := client.GetBase64EncodedPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "GetBase64Encoded", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetBase64EncodedSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "GetBase64Encoded", resp, "Failure sending request")
		return
	}

	result, err = client.GetBase64EncodedResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "GetBase64Encoded", resp, "Failure responding to request")
	}

	return
}

// GetBase64EncodedPreparer prepares the GetBase64Encoded request.
func (client GroupClient) GetBase64EncodedPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/string/base64Encoding"))
	return preparer.Prepare(&http.Request{})
}

// GetBase64EncodedSender sends the GetBase64Encoded request. The method will close the
// http.Response Body if it receives an error.
func (client GroupClient) GetBase64EncodedSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetBase64EncodedResponder handles the response to the GetBase64Encoded request. The method always
// closes the http.Response Body.
func (client GroupClient) GetBase64EncodedResponder(resp *http.Response) (result Base64URL, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetBase64URLEncoded get value that is base64url encoded
func (client GroupClient) GetBase64URLEncoded() (result Base64URL, err error) {
	req, err := client.GetBase64URLEncodedPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "GetBase64URLEncoded", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetBase64URLEncodedSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "GetBase64URLEncoded", resp, "Failure sending request")
		return
	}

	result, err = client.GetBase64URLEncodedResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "GetBase64URLEncoded", resp, "Failure responding to request")
	}

	return
}

// GetBase64URLEncodedPreparer prepares the GetBase64URLEncoded request.
func (client GroupClient) GetBase64URLEncodedPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/string/base64UrlEncoding"))
	return preparer.Prepare(&http.Request{})
}

// GetBase64URLEncodedSender sends the GetBase64URLEncoded request. The method will close the
// http.Response Body if it receives an error.
func (client GroupClient) GetBase64URLEncodedSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetBase64URLEncodedResponder handles the response to the GetBase64URLEncoded request. The method always
// closes the http.Response Body.
func (client GroupClient) GetBase64URLEncodedResponder(resp *http.Response) (result Base64URL, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetEmpty get empty string value value ''
func (client GroupClient) GetEmpty() (result String, err error) {
	req, err := client.GetEmptyPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "GetEmpty", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetEmptySender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "GetEmpty", resp, "Failure sending request")
		return
	}

	result, err = client.GetEmptyResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "GetEmpty", resp, "Failure responding to request")
	}

	return
}

// GetEmptyPreparer prepares the GetEmpty request.
func (client GroupClient) GetEmptyPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/string/empty"))
	return preparer.Prepare(&http.Request{})
}

// GetEmptySender sends the GetEmpty request. The method will close the
// http.Response Body if it receives an error.
func (client GroupClient) GetEmptySender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetEmptyResponder handles the response to the GetEmpty request. The method always
// closes the http.Response Body.
func (client GroupClient) GetEmptyResponder(resp *http.Response) (result String, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetMbcs get mbcs string value '啊齄丂狛狜隣郎隣兀﨩ˊ▇█〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€ '
func (client GroupClient) GetMbcs() (result String, err error) {
	req, err := client.GetMbcsPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "GetMbcs", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetMbcsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "GetMbcs", resp, "Failure sending request")
		return
	}

	result, err = client.GetMbcsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "GetMbcs", resp, "Failure responding to request")
	}

	return
}

// GetMbcsPreparer prepares the GetMbcs request.
func (client GroupClient) GetMbcsPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/string/mbcs"))
	return preparer.Prepare(&http.Request{})
}

// GetMbcsSender sends the GetMbcs request. The method will close the
// http.Response Body if it receives an error.
func (client GroupClient) GetMbcsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetMbcsResponder handles the response to the GetMbcs request. The method always
// closes the http.Response Body.
func (client GroupClient) GetMbcsResponder(resp *http.Response) (result String, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetNotProvided get String value when no string value is sent in response payload
func (client GroupClient) GetNotProvided() (result String, err error) {
	req, err := client.GetNotProvidedPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "GetNotProvided", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetNotProvidedSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "GetNotProvided", resp, "Failure sending request")
		return
	}

	result, err = client.GetNotProvidedResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "GetNotProvided", resp, "Failure responding to request")
	}

	return
}

// GetNotProvidedPreparer prepares the GetNotProvided request.
func (client GroupClient) GetNotProvidedPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/string/notProvided"))
	return preparer.Prepare(&http.Request{})
}

// GetNotProvidedSender sends the GetNotProvided request. The method will close the
// http.Response Body if it receives an error.
func (client GroupClient) GetNotProvidedSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetNotProvidedResponder handles the response to the GetNotProvided request. The method always
// closes the http.Response Body.
func (client GroupClient) GetNotProvidedResponder(resp *http.Response) (result String, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetNull get null string value value
func (client GroupClient) GetNull() (result String, err error) {
	req, err := client.GetNullPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "GetNull", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetNullSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "GetNull", resp, "Failure sending request")
		return
	}

	result, err = client.GetNullResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "GetNull", resp, "Failure responding to request")
	}

	return
}

// GetNullPreparer prepares the GetNull request.
func (client GroupClient) GetNullPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/string/null"))
	return preparer.Prepare(&http.Request{})
}

// GetNullSender sends the GetNull request. The method will close the
// http.Response Body if it receives an error.
func (client GroupClient) GetNullSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetNullResponder handles the response to the GetNull request. The method always
// closes the http.Response Body.
func (client GroupClient) GetNullResponder(resp *http.Response) (result String, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetNullBase64URLEncoded get null value that is expected to be base64url encoded
func (client GroupClient) GetNullBase64URLEncoded() (result Base64URL, err error) {
	req, err := client.GetNullBase64URLEncodedPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "GetNullBase64URLEncoded", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetNullBase64URLEncodedSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "GetNullBase64URLEncoded", resp, "Failure sending request")
		return
	}

	result, err = client.GetNullBase64URLEncodedResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "GetNullBase64URLEncoded", resp, "Failure responding to request")
	}

	return
}

// GetNullBase64URLEncodedPreparer prepares the GetNullBase64URLEncoded request.
func (client GroupClient) GetNullBase64URLEncodedPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/string/nullBase64UrlEncoding"))
	return preparer.Prepare(&http.Request{})
}

// GetNullBase64URLEncodedSender sends the GetNullBase64URLEncoded request. The method will close the
// http.Response Body if it receives an error.
func (client GroupClient) GetNullBase64URLEncodedSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetNullBase64URLEncodedResponder handles the response to the GetNullBase64URLEncoded request. The method always
// closes the http.Response Body.
func (client GroupClient) GetNullBase64URLEncodedResponder(resp *http.Response) (result Base64URL, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetWhitespace get string value with leading and trailing whitespace '<tab><space><space>Now is the time for all good
// men to come to the aid of their country<tab><space><space>'
func (client GroupClient) GetWhitespace() (result String, err error) {
	req, err := client.GetWhitespacePreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "GetWhitespace", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetWhitespaceSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "GetWhitespace", resp, "Failure sending request")
		return
	}

	result, err = client.GetWhitespaceResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "GetWhitespace", resp, "Failure responding to request")
	}

	return
}

// GetWhitespacePreparer prepares the GetWhitespace request.
func (client GroupClient) GetWhitespacePreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/string/whitespace"))
	return preparer.Prepare(&http.Request{})
}

// GetWhitespaceSender sends the GetWhitespace request. The method will close the
// http.Response Body if it receives an error.
func (client GroupClient) GetWhitespaceSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetWhitespaceResponder handles the response to the GetWhitespace request. The method always
// closes the http.Response Body.
func (client GroupClient) GetWhitespaceResponder(resp *http.Response) (result String, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PutBase64URLEncoded put value that is base64url encoded
//
func (client GroupClient) PutBase64URLEncoded(stringBody string) (result autorest.Response, err error) {
	req, err := client.PutBase64URLEncodedPreparer(stringBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "PutBase64URLEncoded", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutBase64URLEncodedSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "PutBase64URLEncoded", resp, "Failure sending request")
		return
	}

	result, err = client.PutBase64URLEncodedResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "PutBase64URLEncoded", resp, "Failure responding to request")
	}

	return
}

// PutBase64URLEncodedPreparer prepares the PutBase64URLEncoded request.
func (client GroupClient) PutBase64URLEncodedPreparer(stringBody string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/string/base64UrlEncoding"),
		autorest.WithJSON(stringBody))
	return preparer.Prepare(&http.Request{})
}

// PutBase64URLEncodedSender sends the PutBase64URLEncoded request. The method will close the
// http.Response Body if it receives an error.
func (client GroupClient) PutBase64URLEncodedSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// PutBase64URLEncodedResponder handles the response to the PutBase64URLEncoded request. The method always
// closes the http.Response Body.
func (client GroupClient) PutBase64URLEncodedResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PutEmpty set string value empty ''
//
// stringBody is
func (client GroupClient) PutEmpty(stringBody string) (result autorest.Response, err error) {
	req, err := client.PutEmptyPreparer(stringBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "PutEmpty", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutEmptySender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "PutEmpty", resp, "Failure sending request")
		return
	}

	result, err = client.PutEmptyResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "PutEmpty", resp, "Failure responding to request")
	}

	return
}

// PutEmptyPreparer prepares the PutEmpty request.
func (client GroupClient) PutEmptyPreparer(stringBody string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/string/empty"),
		autorest.WithJSON(stringBody))
	return preparer.Prepare(&http.Request{})
}

// PutEmptySender sends the PutEmpty request. The method will close the
// http.Response Body if it receives an error.
func (client GroupClient) PutEmptySender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// PutEmptyResponder handles the response to the PutEmpty request. The method always
// closes the http.Response Body.
func (client GroupClient) PutEmptyResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PutMbcs set string value mbcs '啊齄丂狛狜隣郎隣兀﨩ˊ▇█〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€ '
//
// stringBody is
func (client GroupClient) PutMbcs(stringBody string) (result autorest.Response, err error) {
	req, err := client.PutMbcsPreparer(stringBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "PutMbcs", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutMbcsSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "PutMbcs", resp, "Failure sending request")
		return
	}

	result, err = client.PutMbcsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "PutMbcs", resp, "Failure responding to request")
	}

	return
}

// PutMbcsPreparer prepares the PutMbcs request.
func (client GroupClient) PutMbcsPreparer(stringBody string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/string/mbcs"),
		autorest.WithJSON(stringBody))
	return preparer.Prepare(&http.Request{})
}

// PutMbcsSender sends the PutMbcs request. The method will close the
// http.Response Body if it receives an error.
func (client GroupClient) PutMbcsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// PutMbcsResponder handles the response to the PutMbcs request. The method always
// closes the http.Response Body.
func (client GroupClient) PutMbcsResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PutNull set string value null
//
// stringBody is
func (client GroupClient) PutNull(stringBody string) (result autorest.Response, err error) {
	req, err := client.PutNullPreparer(stringBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "PutNull", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutNullSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "PutNull", resp, "Failure sending request")
		return
	}

	result, err = client.PutNullResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "PutNull", resp, "Failure responding to request")
	}

	return
}

// PutNullPreparer prepares the PutNull request.
func (client GroupClient) PutNullPreparer(stringBody string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/string/null"))
	if len(string(stringBody)) > 0 {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(stringBody))
	}
	return preparer.Prepare(&http.Request{})
}

// PutNullSender sends the PutNull request. The method will close the
// http.Response Body if it receives an error.
func (client GroupClient) PutNullSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// PutNullResponder handles the response to the PutNull request. The method always
// closes the http.Response Body.
func (client GroupClient) PutNullResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PutWhitespace set String value with leading and trailing whitespace '<tab><space><space>Now is the time for all good
// men to come to the aid of their country<tab><space><space>'
//
// stringBody is
func (client GroupClient) PutWhitespace(stringBody string) (result autorest.Response, err error) {
	req, err := client.PutWhitespacePreparer(stringBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "PutWhitespace", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutWhitespaceSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "PutWhitespace", resp, "Failure sending request")
		return
	}

	result, err = client.PutWhitespaceResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.GroupClient", "PutWhitespace", resp, "Failure responding to request")
	}

	return
}

// PutWhitespacePreparer prepares the PutWhitespace request.
func (client GroupClient) PutWhitespacePreparer(stringBody string) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/string/whitespace"),
		autorest.WithJSON(stringBody))
	return preparer.Prepare(&http.Request{})
}

// PutWhitespaceSender sends the PutWhitespace request. The method will close the
// http.Response Body if it receives an error.
func (client GroupClient) PutWhitespaceSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// PutWhitespaceResponder handles the response to the PutWhitespace request. The method always
// closes the http.Response Body.
func (client GroupClient) PutWhitespaceResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}
