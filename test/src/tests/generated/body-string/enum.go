package stringgroup

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"net/http"
)

// EnumClient is the test Infrastructure for AutoRest Swagger BAT
type EnumClient struct {
	ManagementClient
}

// NewEnumClient creates an instance of the EnumClient client.
func NewEnumClient() EnumClient {
	return NewEnumClientWithBaseURI(DefaultBaseURI)
}

// NewEnumClientWithBaseURI creates an instance of the EnumClient client.
func NewEnumClientWithBaseURI(baseURI string) EnumClient {
	return EnumClient{NewWithBaseURI(baseURI)}
}

// GetNotExpandable get enum value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'.
func (client EnumClient) GetNotExpandable() (result String, err error) {
	req, err := client.GetNotExpandablePreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.EnumClient", "GetNotExpandable", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetNotExpandableSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "stringgroup.EnumClient", "GetNotExpandable", resp, "Failure sending request")
		return
	}

	result, err = client.GetNotExpandableResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.EnumClient", "GetNotExpandable", resp, "Failure responding to request")
	}

	return
}

// GetNotExpandablePreparer prepares the GetNotExpandable request.
func (client EnumClient) GetNotExpandablePreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/string/enum/notExpandable"))
	return preparer.Prepare(&http.Request{})
}

// GetNotExpandableSender sends the GetNotExpandable request. The method will close the
// http.Response Body if it receives an error.
func (client EnumClient) GetNotExpandableSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetNotExpandableResponder handles the response to the GetNotExpandable request. The method always
// closes the http.Response Body.
func (client EnumClient) GetNotExpandableResponder(resp *http.Response) (result String, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetReferenced get enum value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'.
func (client EnumClient) GetReferenced() (result String, err error) {
	req, err := client.GetReferencedPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.EnumClient", "GetReferenced", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetReferencedSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "stringgroup.EnumClient", "GetReferenced", resp, "Failure sending request")
		return
	}

	result, err = client.GetReferencedResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.EnumClient", "GetReferenced", resp, "Failure responding to request")
	}

	return
}

// GetReferencedPreparer prepares the GetReferenced request.
func (client EnumClient) GetReferencedPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/string/enum/Referenced"))
	return preparer.Prepare(&http.Request{})
}

// GetReferencedSender sends the GetReferenced request. The method will close the
// http.Response Body if it receives an error.
func (client EnumClient) GetReferencedSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetReferencedResponder handles the response to the GetReferenced request. The method always
// closes the http.Response Body.
func (client EnumClient) GetReferencedResponder(resp *http.Response) (result String, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetReferencedConstant get value 'green-color' from the constant.
func (client EnumClient) GetReferencedConstant() (result RefColorConstant, err error) {
	req, err := client.GetReferencedConstantPreparer()
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.EnumClient", "GetReferencedConstant", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetReferencedConstantSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "stringgroup.EnumClient", "GetReferencedConstant", resp, "Failure sending request")
		return
	}

	result, err = client.GetReferencedConstantResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.EnumClient", "GetReferencedConstant", resp, "Failure responding to request")
	}

	return
}

// GetReferencedConstantPreparer prepares the GetReferencedConstant request.
func (client EnumClient) GetReferencedConstantPreparer() (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/string/enum/ReferencedConstant"))
	return preparer.Prepare(&http.Request{})
}

// GetReferencedConstantSender sends the GetReferencedConstant request. The method will close the
// http.Response Body if it receives an error.
func (client EnumClient) GetReferencedConstantSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetReferencedConstantResponder handles the response to the GetReferencedConstant request. The method always
// closes the http.Response Body.
func (client EnumClient) GetReferencedConstantResponder(resp *http.Response) (result RefColorConstant, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PutNotExpandable sends value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'
//
// stringBody is
func (client EnumClient) PutNotExpandable(stringBody Colors) (result autorest.Response, err error) {
	req, err := client.PutNotExpandablePreparer(stringBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.EnumClient", "PutNotExpandable", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutNotExpandableSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "stringgroup.EnumClient", "PutNotExpandable", resp, "Failure sending request")
		return
	}

	result, err = client.PutNotExpandableResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.EnumClient", "PutNotExpandable", resp, "Failure responding to request")
	}

	return
}

// PutNotExpandablePreparer prepares the PutNotExpandable request.
func (client EnumClient) PutNotExpandablePreparer(stringBody Colors) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/string/enum/notExpandable"),
		autorest.WithJSON(stringBody))
	return preparer.Prepare(&http.Request{})
}

// PutNotExpandableSender sends the PutNotExpandable request. The method will close the
// http.Response Body if it receives an error.
func (client EnumClient) PutNotExpandableSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// PutNotExpandableResponder handles the response to the PutNotExpandable request. The method always
// closes the http.Response Body.
func (client EnumClient) PutNotExpandableResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PutReferenced sends value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'
//
// enumStringBody is
func (client EnumClient) PutReferenced(enumStringBody Colors) (result autorest.Response, err error) {
	req, err := client.PutReferencedPreparer(enumStringBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.EnumClient", "PutReferenced", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutReferencedSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "stringgroup.EnumClient", "PutReferenced", resp, "Failure sending request")
		return
	}

	result, err = client.PutReferencedResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.EnumClient", "PutReferenced", resp, "Failure responding to request")
	}

	return
}

// PutReferencedPreparer prepares the PutReferenced request.
func (client EnumClient) PutReferencedPreparer(enumStringBody Colors) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/string/enum/Referenced"),
		autorest.WithJSON(enumStringBody))
	return preparer.Prepare(&http.Request{})
}

// PutReferencedSender sends the PutReferenced request. The method will close the
// http.Response Body if it receives an error.
func (client EnumClient) PutReferencedSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// PutReferencedResponder handles the response to the PutReferenced request. The method always
// closes the http.Response Body.
func (client EnumClient) PutReferencedResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// PutReferencedConstant sends value 'green-color' from a constant
//
func (client EnumClient) PutReferencedConstant(enumStringBody RefColorConstant) (result autorest.Response, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: enumStringBody,
			Constraints: []validation.Constraint{{Target: "enumStringBody.ColorConstant", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "stringgroup.EnumClient", "PutReferencedConstant")
	}

	req, err := client.PutReferencedConstantPreparer(enumStringBody)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.EnumClient", "PutReferencedConstant", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutReferencedConstantSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "stringgroup.EnumClient", "PutReferencedConstant", resp, "Failure sending request")
		return
	}

	result, err = client.PutReferencedConstantResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "stringgroup.EnumClient", "PutReferencedConstant", resp, "Failure responding to request")
	}

	return
}

// PutReferencedConstantPreparer prepares the PutReferencedConstant request.
func (client EnumClient) PutReferencedConstantPreparer(enumStringBody RefColorConstant) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/string/enum/ReferencedConstant"),
		autorest.WithJSON(enumStringBody))
	return preparer.Prepare(&http.Request{})
}

// PutReferencedConstantSender sends the PutReferencedConstant request. The method will close the
// http.Response Body if it receives an error.
func (client EnumClient) PutReferencedConstantSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// PutReferencedConstantResponder handles the response to the PutReferencedConstant request. The method always
// closes the http.Response Body.
func (client EnumClient) PutReferencedConstantResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}
