package stringgroup

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"bytes"
	"context"
	"encoding/json"
	"io/ioutil"
	"net/http"
	"tests/pipeline"
)

// EnumClient is the test Infrastructure for AutoRest Swagger BAT
type EnumClient struct {
	ManagementClient
}

// NewEnumClient creates an instance of the EnumClient client.
func NewEnumClient(p pipeline.Pipeline) EnumClient {
	return EnumClient{NewManagementClient(p)}
}

// GetNotExpandable get enum value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'.
func (client EnumClient) GetNotExpandable(ctx context.Context) (*GetNotExpandableResponse, error) {
	req, err := client.getNotExpandablePreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getNotExpandableResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*GetNotExpandableResponse), err
}

// getNotExpandablePreparer prepares the GetNotExpandable request.
func (client EnumClient) getNotExpandablePreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/string/enum/notExpandable"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getNotExpandableResponder handles the response to the GetNotExpandable request.
func (client EnumClient) getNotExpandableResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &GetNotExpandableResponse{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, &result.Value)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// GetReferenced get enum value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'.
func (client EnumClient) GetReferenced(ctx context.Context) (*GetReferencedResponse, error) {
	req, err := client.getReferencedPreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getReferencedResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*GetReferencedResponse), err
}

// getReferencedPreparer prepares the GetReferenced request.
func (client EnumClient) getReferencedPreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/string/enum/Referenced"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getReferencedResponder handles the response to the GetReferenced request.
func (client EnumClient) getReferencedResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &GetReferencedResponse{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, &result.Value)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// GetReferencedConstant get value 'green-color' from the constant.
func (client EnumClient) GetReferencedConstant(ctx context.Context) (*RefColorConstant, error) {
	req, err := client.getReferencedConstantPreparer()
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getReferencedConstantResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*RefColorConstant), err
}

// getReferencedConstantPreparer prepares the GetReferencedConstant request.
func (client EnumClient) getReferencedConstantPreparer() (pipeline.Request, error) {
	u := client.url
	u.Path = "/string/enum/ReferencedConstant"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getReferencedConstantResponder handles the response to the GetReferencedConstant request.
func (client EnumClient) getReferencedConstantResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &RefColorConstant{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// PutNotExpandable sends value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'
//
// stringBody is
func (client EnumClient) PutNotExpandable(ctx context.Context, stringBody ColorsType) (*http.Response, error) {
	req, err := client.putNotExpandablePreparer(stringBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.putNotExpandableResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// putNotExpandablePreparer prepares the PutNotExpandable request.
func (client EnumClient) putNotExpandablePreparer(stringBody ColorsType) (pipeline.Request, error) {
	u := client.url
	u.Path = "/string/enum/notExpandable"
	req, err := pipeline.NewRequest("PUT", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(stringBody)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// putNotExpandableResponder handles the response to the PutNotExpandable request.
func (client EnumClient) putNotExpandableResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	return resp, err
}

// PutReferenced sends value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'
//
// enumStringBody is
func (client EnumClient) PutReferenced(ctx context.Context, enumStringBody ColorsType) (*http.Response, error) {
	req, err := client.putReferencedPreparer(enumStringBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.putReferencedResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// putReferencedPreparer prepares the PutReferenced request.
func (client EnumClient) putReferencedPreparer(enumStringBody ColorsType) (pipeline.Request, error) {
	u := client.url
	u.Path = "/string/enum/Referenced"
	req, err := pipeline.NewRequest("PUT", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(enumStringBody)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// putReferencedResponder handles the response to the PutReferenced request.
func (client EnumClient) putReferencedResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	return resp, err
}

// PutReferencedConstant sends value 'green-color' from a constant
//
func (client EnumClient) PutReferencedConstant(ctx context.Context, enumStringBody RefColorConstant) (*http.Response, error) {
	if err := validate([]validation{
		{targetValue: enumStringBody,
			constraints: []constraint{{target: "enumStringBody.ColorConstant", name: null, rule: true, chain: nil}}}}); err != nil {
		return nil, err
	}
	req, err := client.putReferencedConstantPreparer(enumStringBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.putReferencedConstantResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// putReferencedConstantPreparer prepares the PutReferencedConstant request.
func (client EnumClient) putReferencedConstantPreparer(enumStringBody RefColorConstant) (pipeline.Request, error) {
	u := client.url
	u.Path = "/string/enum/ReferencedConstant"
	req, err := pipeline.NewRequest("PUT", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(enumStringBody)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// putReferencedConstantResponder handles the response to the PutReferencedConstant request.
func (client EnumClient) putReferencedConstantResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	return resp, err
}
