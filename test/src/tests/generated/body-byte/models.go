package bytegroup

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/base64"
	"encoding/json"
	"net/http"
	"reflect"
	"strings"
	"unsafe"
)

// concatenates a slice of const values with the specified separator between each item
func joinConst(s interface{}, sep string) string {
	v := reflect.ValueOf(s)
	if v.Kind() != reflect.Slice && v.Kind() != reflect.Array {
		panic("s wasn't a slice or array")
	}
	ss := make([]string, 0, v.Len())
	for i := 0; i < v.Len(); i++ {
		ss = append(ss, v.Index(i).String())
	}
	return strings.Join(ss, sep)
}

// Error ...
type Error struct {
	Status  *int32  `json:"status,omitempty"`
	Message *string `json:"message,omitempty"`
}

// GetEmptyResponse ...
type GetEmptyResponse struct {
	rawResponse *http.Response
	Value       []byte `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaler interface for GetEmptyResponse.
func (ger GetEmptyResponse) MarshalJSON() ([]byte, error) {
	if reflect.TypeOf((*GetEmptyResponse)(nil)).Elem().Size() != reflect.TypeOf((*getEmptyResponse)(nil)).Elem().Size() {
		panic("size mismatch between GetEmptyResponse and getEmptyResponse")
	}
	ger2 := (*getEmptyResponse)(unsafe.Pointer(&ger))
	return json.Marshal(*ger2)
}

// UnmarshalJSON implements the json.Unmarshaler interface for GetEmptyResponse.
func (ger *GetEmptyResponse) UnmarshalJSON(b []byte) error {
	if reflect.TypeOf((*GetEmptyResponse)(nil)).Elem().Size() != reflect.TypeOf((*getEmptyResponse)(nil)).Elem().Size() {
		panic("size mismatch between GetEmptyResponse and getEmptyResponse")
	}
	ger2 := (*getEmptyResponse)(unsafe.Pointer(ger))
	return json.Unmarshal(b, ger2)
}

// Response returns the raw HTTP response object.
func (ger GetEmptyResponse) Response() *http.Response {
	return ger.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ger GetEmptyResponse) StatusCode() int {
	return ger.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ger GetEmptyResponse) Status() string {
	return ger.rawResponse.Status
}

// GetInvalidResponse ...
type GetInvalidResponse struct {
	rawResponse *http.Response
	Value       []byte `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaler interface for GetInvalidResponse.
func (gir GetInvalidResponse) MarshalJSON() ([]byte, error) {
	if reflect.TypeOf((*GetInvalidResponse)(nil)).Elem().Size() != reflect.TypeOf((*getInvalidResponse)(nil)).Elem().Size() {
		panic("size mismatch between GetInvalidResponse and getInvalidResponse")
	}
	gir2 := (*getInvalidResponse)(unsafe.Pointer(&gir))
	return json.Marshal(*gir2)
}

// UnmarshalJSON implements the json.Unmarshaler interface for GetInvalidResponse.
func (gir *GetInvalidResponse) UnmarshalJSON(b []byte) error {
	if reflect.TypeOf((*GetInvalidResponse)(nil)).Elem().Size() != reflect.TypeOf((*getInvalidResponse)(nil)).Elem().Size() {
		panic("size mismatch between GetInvalidResponse and getInvalidResponse")
	}
	gir2 := (*getInvalidResponse)(unsafe.Pointer(gir))
	return json.Unmarshal(b, gir2)
}

// Response returns the raw HTTP response object.
func (gir GetInvalidResponse) Response() *http.Response {
	return gir.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (gir GetInvalidResponse) StatusCode() int {
	return gir.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (gir GetInvalidResponse) Status() string {
	return gir.rawResponse.Status
}

// GetNonASCIIResponse ...
type GetNonASCIIResponse struct {
	rawResponse *http.Response
	Value       []byte `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaler interface for GetNonASCIIResponse.
func (gnar GetNonASCIIResponse) MarshalJSON() ([]byte, error) {
	if reflect.TypeOf((*GetNonASCIIResponse)(nil)).Elem().Size() != reflect.TypeOf((*getNonASCIIResponse)(nil)).Elem().Size() {
		panic("size mismatch between GetNonASCIIResponse and getNonASCIIResponse")
	}
	gnar2 := (*getNonASCIIResponse)(unsafe.Pointer(&gnar))
	return json.Marshal(*gnar2)
}

// UnmarshalJSON implements the json.Unmarshaler interface for GetNonASCIIResponse.
func (gnar *GetNonASCIIResponse) UnmarshalJSON(b []byte) error {
	if reflect.TypeOf((*GetNonASCIIResponse)(nil)).Elem().Size() != reflect.TypeOf((*getNonASCIIResponse)(nil)).Elem().Size() {
		panic("size mismatch between GetNonASCIIResponse and getNonASCIIResponse")
	}
	gnar2 := (*getNonASCIIResponse)(unsafe.Pointer(gnar))
	return json.Unmarshal(b, gnar2)
}

// Response returns the raw HTTP response object.
func (gnar GetNonASCIIResponse) Response() *http.Response {
	return gnar.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (gnar GetNonASCIIResponse) StatusCode() int {
	return gnar.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (gnar GetNonASCIIResponse) Status() string {
	return gnar.rawResponse.Status
}

// GetNullResponse ...
type GetNullResponse struct {
	rawResponse *http.Response
	Value       []byte `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaler interface for GetNullResponse.
func (gnr GetNullResponse) MarshalJSON() ([]byte, error) {
	if reflect.TypeOf((*GetNullResponse)(nil)).Elem().Size() != reflect.TypeOf((*getNullResponse)(nil)).Elem().Size() {
		panic("size mismatch between GetNullResponse and getNullResponse")
	}
	gnr2 := (*getNullResponse)(unsafe.Pointer(&gnr))
	return json.Marshal(*gnr2)
}

// UnmarshalJSON implements the json.Unmarshaler interface for GetNullResponse.
func (gnr *GetNullResponse) UnmarshalJSON(b []byte) error {
	if reflect.TypeOf((*GetNullResponse)(nil)).Elem().Size() != reflect.TypeOf((*getNullResponse)(nil)).Elem().Size() {
		panic("size mismatch between GetNullResponse and getNullResponse")
	}
	gnr2 := (*getNullResponse)(unsafe.Pointer(gnr))
	return json.Unmarshal(b, gnr2)
}

// Response returns the raw HTTP response object.
func (gnr GetNullResponse) Response() *http.Response {
	return gnr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (gnr GetNullResponse) StatusCode() int {
	return gnr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (gnr GetNullResponse) Status() string {
	return gnr.rawResponse.Status
}

// internal type used for marshalling base64 encoded strings
type base64Encoded struct {
	b []byte
}

// MarshalText implements the encoding.TextMarshaler interface for base64Encoded.
func (c base64Encoded) MarshalText() ([]byte, error) {
	return []byte(base64.StdEncoding.EncodeToString(c.b)), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for base64Encoded.
func (c *base64Encoded) UnmarshalText(data []byte) error {
	b, err := base64.StdEncoding.DecodeString(string(data))
	if err != nil {
		return err
	}
	c.b = b
	return nil
}

// internal type used for marshalling
type getNullResponse struct {
	Value base64Encoded `json:"value,omitempty"`
}

// internal type used for marshalling
type getEmptyResponse struct {
	Value base64Encoded `json:"value,omitempty"`
}

// internal type used for marshalling
type getNonASCIIResponse struct {
	Value base64Encoded `json:"value,omitempty"`
}

// internal type used for marshalling
type getInvalidResponse struct {
	Value base64Encoded `json:"value,omitempty"`
}
