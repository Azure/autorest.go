package bytegroup

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"net/http"
	"reflect"
	"strings"
)

// concatenates a slice of const values with the specified separator between each item
func joinConst(s interface{}, sep string) string {
	v := reflect.ValueOf(s)
	if v.Kind() != reflect.Slice && v.Kind() != reflect.Array {
		panic("s wasn't a slice or array")
	}
	ss := make([]string, 0, v.Len())
	for i := 0; i < v.Len(); i++ {
		ss = append(ss, v.Index(i).String())
	}
	return strings.Join(ss, sep)
}

// Error ...
type Error struct {
	Status  *int32  `json:"status,omitempty"`
	Message *string `json:"message,omitempty"`
}

// GetEmptyResponse ...
type GetEmptyResponse struct {
	rawResponse *http.Response
	Value       []byte `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (ger GetEmptyResponse) Response() *http.Response {
	return ger.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ger GetEmptyResponse) StatusCode() int {
	return ger.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ger GetEmptyResponse) Status() string {
	return ger.rawResponse.Status
}

// GetInvalidResponse ...
type GetInvalidResponse struct {
	rawResponse *http.Response
	Value       []byte `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (gir GetInvalidResponse) Response() *http.Response {
	return gir.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (gir GetInvalidResponse) StatusCode() int {
	return gir.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (gir GetInvalidResponse) Status() string {
	return gir.rawResponse.Status
}

// GetNonASCIIResponse ...
type GetNonASCIIResponse struct {
	rawResponse *http.Response
	Value       []byte `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (gnar GetNonASCIIResponse) Response() *http.Response {
	return gnar.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (gnar GetNonASCIIResponse) StatusCode() int {
	return gnar.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (gnar GetNonASCIIResponse) Status() string {
	return gnar.rawResponse.Status
}

// GetNullResponse ...
type GetNullResponse struct {
	rawResponse *http.Response
	Value       []byte `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (gnr GetNullResponse) Response() *http.Response {
	return gnr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (gnr GetNullResponse) StatusCode() int {
	return gnr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (gnr GetNullResponse) Status() string {
	return gnr.rawResponse.Status
}
