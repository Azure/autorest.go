// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcompute

import (
	"context"
	"net/http"
	"time"
)

// AvailabilitySetsCreateOrUpdateResponse contains the response from method AvailabilitySets.CreateOrUpdate.
type AvailabilitySetsCreateOrUpdateResponse struct {
	AvailabilitySetsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AvailabilitySetsCreateOrUpdateResult contains the result from method AvailabilitySets.CreateOrUpdate.
type AvailabilitySetsCreateOrUpdateResult struct {
	AvailabilitySet
}

// AvailabilitySetsDeleteResponse contains the response from method AvailabilitySets.Delete.
type AvailabilitySetsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AvailabilitySetsGetResponse contains the response from method AvailabilitySets.Get.
type AvailabilitySetsGetResponse struct {
	AvailabilitySetsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AvailabilitySetsGetResult contains the result from method AvailabilitySets.Get.
type AvailabilitySetsGetResult struct {
	AvailabilitySet
}

// AvailabilitySetsListAvailableSizesResponse contains the response from method AvailabilitySets.ListAvailableSizes.
type AvailabilitySetsListAvailableSizesResponse struct {
	AvailabilitySetsListAvailableSizesResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AvailabilitySetsListAvailableSizesResult contains the result from method AvailabilitySets.ListAvailableSizes.
type AvailabilitySetsListAvailableSizesResult struct {
	VirtualMachineSizeListResult
}

// AvailabilitySetsListBySubscriptionResponse contains the response from method AvailabilitySets.ListBySubscription.
type AvailabilitySetsListBySubscriptionResponse struct {
	AvailabilitySetsListBySubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AvailabilitySetsListBySubscriptionResult contains the result from method AvailabilitySets.ListBySubscription.
type AvailabilitySetsListBySubscriptionResult struct {
	AvailabilitySetListResult
}

// AvailabilitySetsListResponse contains the response from method AvailabilitySets.List.
type AvailabilitySetsListResponse struct {
	AvailabilitySetsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AvailabilitySetsListResult contains the result from method AvailabilitySets.List.
type AvailabilitySetsListResult struct {
	AvailabilitySetListResult
}

// AvailabilitySetsUpdateResponse contains the response from method AvailabilitySets.Update.
type AvailabilitySetsUpdateResponse struct {
	AvailabilitySetsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AvailabilitySetsUpdateResult contains the result from method AvailabilitySets.Update.
type AvailabilitySetsUpdateResult struct {
	AvailabilitySet
}

// ContainerServicesCreateOrUpdatePollerResponse contains the response from method ContainerServices.CreateOrUpdate.
type ContainerServicesCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ContainerServicesCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ContainerServicesCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ContainerServicesCreateOrUpdateResponse, error) {
	respType := ContainerServicesCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ContainerService)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ContainerServicesCreateOrUpdateResponse contains the response from method ContainerServices.CreateOrUpdate.
type ContainerServicesCreateOrUpdateResponse struct {
	ContainerServicesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ContainerServicesCreateOrUpdateResult contains the result from method ContainerServices.CreateOrUpdate.
type ContainerServicesCreateOrUpdateResult struct {
	ContainerService
}

// ContainerServicesDeletePollerResponse contains the response from method ContainerServices.Delete.
type ContainerServicesDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ContainerServicesDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ContainerServicesDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ContainerServicesDeleteResponse, error) {
	respType := ContainerServicesDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ContainerServicesDeleteResponse contains the response from method ContainerServices.Delete.
type ContainerServicesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ContainerServicesGetResponse contains the response from method ContainerServices.Get.
type ContainerServicesGetResponse struct {
	ContainerServicesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ContainerServicesGetResult contains the result from method ContainerServices.Get.
type ContainerServicesGetResult struct {
	ContainerService
}

// ContainerServicesListByResourceGroupResponse contains the response from method ContainerServices.ListByResourceGroup.
type ContainerServicesListByResourceGroupResponse struct {
	ContainerServicesListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ContainerServicesListByResourceGroupResult contains the result from method ContainerServices.ListByResourceGroup.
type ContainerServicesListByResourceGroupResult struct {
	ContainerServiceListResult
}

// ContainerServicesListResponse contains the response from method ContainerServices.List.
type ContainerServicesListResponse struct {
	ContainerServicesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ContainerServicesListResult contains the result from method ContainerServices.List.
type ContainerServicesListResult struct {
	ContainerServiceListResult
}

// DedicatedHostGroupsCreateOrUpdateResponse contains the response from method DedicatedHostGroups.CreateOrUpdate.
type DedicatedHostGroupsCreateOrUpdateResponse struct {
	DedicatedHostGroupsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DedicatedHostGroupsCreateOrUpdateResult contains the result from method DedicatedHostGroups.CreateOrUpdate.
type DedicatedHostGroupsCreateOrUpdateResult struct {
	DedicatedHostGroup
}

// DedicatedHostGroupsDeleteResponse contains the response from method DedicatedHostGroups.Delete.
type DedicatedHostGroupsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DedicatedHostGroupsGetResponse contains the response from method DedicatedHostGroups.Get.
type DedicatedHostGroupsGetResponse struct {
	DedicatedHostGroupsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DedicatedHostGroupsGetResult contains the result from method DedicatedHostGroups.Get.
type DedicatedHostGroupsGetResult struct {
	DedicatedHostGroup
}

// DedicatedHostGroupsListByResourceGroupResponse contains the response from method DedicatedHostGroups.ListByResourceGroup.
type DedicatedHostGroupsListByResourceGroupResponse struct {
	DedicatedHostGroupsListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DedicatedHostGroupsListByResourceGroupResult contains the result from method DedicatedHostGroups.ListByResourceGroup.
type DedicatedHostGroupsListByResourceGroupResult struct {
	DedicatedHostGroupListResult
}

// DedicatedHostGroupsListBySubscriptionResponse contains the response from method DedicatedHostGroups.ListBySubscription.
type DedicatedHostGroupsListBySubscriptionResponse struct {
	DedicatedHostGroupsListBySubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DedicatedHostGroupsListBySubscriptionResult contains the result from method DedicatedHostGroups.ListBySubscription.
type DedicatedHostGroupsListBySubscriptionResult struct {
	DedicatedHostGroupListResult
}

// DedicatedHostGroupsUpdateResponse contains the response from method DedicatedHostGroups.Update.
type DedicatedHostGroupsUpdateResponse struct {
	DedicatedHostGroupsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DedicatedHostGroupsUpdateResult contains the result from method DedicatedHostGroups.Update.
type DedicatedHostGroupsUpdateResult struct {
	DedicatedHostGroup
}

// DedicatedHostsCreateOrUpdatePollerResponse contains the response from method DedicatedHosts.CreateOrUpdate.
type DedicatedHostsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DedicatedHostsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l DedicatedHostsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DedicatedHostsCreateOrUpdateResponse, error) {
	respType := DedicatedHostsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.DedicatedHost)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// DedicatedHostsCreateOrUpdateResponse contains the response from method DedicatedHosts.CreateOrUpdate.
type DedicatedHostsCreateOrUpdateResponse struct {
	DedicatedHostsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DedicatedHostsCreateOrUpdateResult contains the result from method DedicatedHosts.CreateOrUpdate.
type DedicatedHostsCreateOrUpdateResult struct {
	DedicatedHost
}

// DedicatedHostsDeletePollerResponse contains the response from method DedicatedHosts.Delete.
type DedicatedHostsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DedicatedHostsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l DedicatedHostsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DedicatedHostsDeleteResponse, error) {
	respType := DedicatedHostsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// DedicatedHostsDeleteResponse contains the response from method DedicatedHosts.Delete.
type DedicatedHostsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DedicatedHostsGetResponse contains the response from method DedicatedHosts.Get.
type DedicatedHostsGetResponse struct {
	DedicatedHostsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DedicatedHostsGetResult contains the result from method DedicatedHosts.Get.
type DedicatedHostsGetResult struct {
	DedicatedHost
}

// DedicatedHostsListByHostGroupResponse contains the response from method DedicatedHosts.ListByHostGroup.
type DedicatedHostsListByHostGroupResponse struct {
	DedicatedHostsListByHostGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DedicatedHostsListByHostGroupResult contains the result from method DedicatedHosts.ListByHostGroup.
type DedicatedHostsListByHostGroupResult struct {
	DedicatedHostListResult
}

// DedicatedHostsUpdatePollerResponse contains the response from method DedicatedHosts.Update.
type DedicatedHostsUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DedicatedHostsUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l DedicatedHostsUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DedicatedHostsUpdateResponse, error) {
	respType := DedicatedHostsUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.DedicatedHost)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// DedicatedHostsUpdateResponse contains the response from method DedicatedHosts.Update.
type DedicatedHostsUpdateResponse struct {
	DedicatedHostsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DedicatedHostsUpdateResult contains the result from method DedicatedHosts.Update.
type DedicatedHostsUpdateResult struct {
	DedicatedHost
}

// DiskEncryptionSetsCreateOrUpdatePollerResponse contains the response from method DiskEncryptionSets.CreateOrUpdate.
type DiskEncryptionSetsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DiskEncryptionSetsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l DiskEncryptionSetsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DiskEncryptionSetsCreateOrUpdateResponse, error) {
	respType := DiskEncryptionSetsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.DiskEncryptionSet)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// DiskEncryptionSetsCreateOrUpdateResponse contains the response from method DiskEncryptionSets.CreateOrUpdate.
type DiskEncryptionSetsCreateOrUpdateResponse struct {
	DiskEncryptionSetsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DiskEncryptionSetsCreateOrUpdateResult contains the result from method DiskEncryptionSets.CreateOrUpdate.
type DiskEncryptionSetsCreateOrUpdateResult struct {
	DiskEncryptionSet
}

// DiskEncryptionSetsDeletePollerResponse contains the response from method DiskEncryptionSets.Delete.
type DiskEncryptionSetsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DiskEncryptionSetsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l DiskEncryptionSetsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DiskEncryptionSetsDeleteResponse, error) {
	respType := DiskEncryptionSetsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// DiskEncryptionSetsDeleteResponse contains the response from method DiskEncryptionSets.Delete.
type DiskEncryptionSetsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DiskEncryptionSetsGetResponse contains the response from method DiskEncryptionSets.Get.
type DiskEncryptionSetsGetResponse struct {
	DiskEncryptionSetsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DiskEncryptionSetsGetResult contains the result from method DiskEncryptionSets.Get.
type DiskEncryptionSetsGetResult struct {
	DiskEncryptionSet
}

// DiskEncryptionSetsListByResourceGroupResponse contains the response from method DiskEncryptionSets.ListByResourceGroup.
type DiskEncryptionSetsListByResourceGroupResponse struct {
	DiskEncryptionSetsListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DiskEncryptionSetsListByResourceGroupResult contains the result from method DiskEncryptionSets.ListByResourceGroup.
type DiskEncryptionSetsListByResourceGroupResult struct {
	DiskEncryptionSetList
}

// DiskEncryptionSetsListResponse contains the response from method DiskEncryptionSets.List.
type DiskEncryptionSetsListResponse struct {
	DiskEncryptionSetsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DiskEncryptionSetsListResult contains the result from method DiskEncryptionSets.List.
type DiskEncryptionSetsListResult struct {
	DiskEncryptionSetList
}

// DiskEncryptionSetsUpdatePollerResponse contains the response from method DiskEncryptionSets.Update.
type DiskEncryptionSetsUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DiskEncryptionSetsUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l DiskEncryptionSetsUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DiskEncryptionSetsUpdateResponse, error) {
	respType := DiskEncryptionSetsUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.DiskEncryptionSet)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// DiskEncryptionSetsUpdateResponse contains the response from method DiskEncryptionSets.Update.
type DiskEncryptionSetsUpdateResponse struct {
	DiskEncryptionSetsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DiskEncryptionSetsUpdateResult contains the result from method DiskEncryptionSets.Update.
type DiskEncryptionSetsUpdateResult struct {
	DiskEncryptionSet
}

// DisksCreateOrUpdatePollerResponse contains the response from method Disks.CreateOrUpdate.
type DisksCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DisksCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l DisksCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DisksCreateOrUpdateResponse, error) {
	respType := DisksCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Disk)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// DisksCreateOrUpdateResponse contains the response from method Disks.CreateOrUpdate.
type DisksCreateOrUpdateResponse struct {
	DisksCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DisksCreateOrUpdateResult contains the result from method Disks.CreateOrUpdate.
type DisksCreateOrUpdateResult struct {
	Disk
}

// DisksDeletePollerResponse contains the response from method Disks.Delete.
type DisksDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DisksDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l DisksDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DisksDeleteResponse, error) {
	respType := DisksDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// DisksDeleteResponse contains the response from method Disks.Delete.
type DisksDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DisksGetResponse contains the response from method Disks.Get.
type DisksGetResponse struct {
	DisksGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DisksGetResult contains the result from method Disks.Get.
type DisksGetResult struct {
	Disk
}

// DisksGrantAccessPollerResponse contains the response from method Disks.GrantAccess.
type DisksGrantAccessPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DisksGrantAccessPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l DisksGrantAccessPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DisksGrantAccessResponse, error) {
	respType := DisksGrantAccessResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.AccessURI)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// DisksGrantAccessResponse contains the response from method Disks.GrantAccess.
type DisksGrantAccessResponse struct {
	DisksGrantAccessResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DisksGrantAccessResult contains the result from method Disks.GrantAccess.
type DisksGrantAccessResult struct {
	AccessURI
}

// DisksListByResourceGroupResponse contains the response from method Disks.ListByResourceGroup.
type DisksListByResourceGroupResponse struct {
	DisksListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DisksListByResourceGroupResult contains the result from method Disks.ListByResourceGroup.
type DisksListByResourceGroupResult struct {
	DiskList
}

// DisksListResponse contains the response from method Disks.List.
type DisksListResponse struct {
	DisksListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DisksListResult contains the result from method Disks.List.
type DisksListResult struct {
	DiskList
}

// DisksRevokeAccessPollerResponse contains the response from method Disks.RevokeAccess.
type DisksRevokeAccessPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DisksRevokeAccessPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l DisksRevokeAccessPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DisksRevokeAccessResponse, error) {
	respType := DisksRevokeAccessResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// DisksRevokeAccessResponse contains the response from method Disks.RevokeAccess.
type DisksRevokeAccessResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DisksUpdatePollerResponse contains the response from method Disks.Update.
type DisksUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DisksUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l DisksUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DisksUpdateResponse, error) {
	respType := DisksUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Disk)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// DisksUpdateResponse contains the response from method Disks.Update.
type DisksUpdateResponse struct {
	DisksUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DisksUpdateResult contains the result from method Disks.Update.
type DisksUpdateResult struct {
	Disk
}

// GalleriesCreateOrUpdatePollerResponse contains the response from method Galleries.CreateOrUpdate.
type GalleriesCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *GalleriesCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l GalleriesCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (GalleriesCreateOrUpdateResponse, error) {
	respType := GalleriesCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Gallery)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// GalleriesCreateOrUpdateResponse contains the response from method Galleries.CreateOrUpdate.
type GalleriesCreateOrUpdateResponse struct {
	GalleriesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleriesCreateOrUpdateResult contains the result from method Galleries.CreateOrUpdate.
type GalleriesCreateOrUpdateResult struct {
	Gallery
}

// GalleriesDeletePollerResponse contains the response from method Galleries.Delete.
type GalleriesDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *GalleriesDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l GalleriesDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (GalleriesDeleteResponse, error) {
	respType := GalleriesDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// GalleriesDeleteResponse contains the response from method Galleries.Delete.
type GalleriesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleriesGetResponse contains the response from method Galleries.Get.
type GalleriesGetResponse struct {
	GalleriesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleriesGetResult contains the result from method Galleries.Get.
type GalleriesGetResult struct {
	Gallery
}

// GalleriesListByResourceGroupResponse contains the response from method Galleries.ListByResourceGroup.
type GalleriesListByResourceGroupResponse struct {
	GalleriesListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleriesListByResourceGroupResult contains the result from method Galleries.ListByResourceGroup.
type GalleriesListByResourceGroupResult struct {
	GalleryList
}

// GalleriesListResponse contains the response from method Galleries.List.
type GalleriesListResponse struct {
	GalleriesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleriesListResult contains the result from method Galleries.List.
type GalleriesListResult struct {
	GalleryList
}

// GalleriesUpdatePollerResponse contains the response from method Galleries.Update.
type GalleriesUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *GalleriesUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l GalleriesUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (GalleriesUpdateResponse, error) {
	respType := GalleriesUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Gallery)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// GalleriesUpdateResponse contains the response from method Galleries.Update.
type GalleriesUpdateResponse struct {
	GalleriesUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleriesUpdateResult contains the result from method Galleries.Update.
type GalleriesUpdateResult struct {
	Gallery
}

// GalleryApplicationVersionsCreateOrUpdatePollerResponse contains the response from method GalleryApplicationVersions.CreateOrUpdate.
type GalleryApplicationVersionsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *GalleryApplicationVersionsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l GalleryApplicationVersionsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (GalleryApplicationVersionsCreateOrUpdateResponse, error) {
	respType := GalleryApplicationVersionsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.GalleryApplicationVersion)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// GalleryApplicationVersionsCreateOrUpdateResponse contains the response from method GalleryApplicationVersions.CreateOrUpdate.
type GalleryApplicationVersionsCreateOrUpdateResponse struct {
	GalleryApplicationVersionsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleryApplicationVersionsCreateOrUpdateResult contains the result from method GalleryApplicationVersions.CreateOrUpdate.
type GalleryApplicationVersionsCreateOrUpdateResult struct {
	GalleryApplicationVersion
}

// GalleryApplicationVersionsDeletePollerResponse contains the response from method GalleryApplicationVersions.Delete.
type GalleryApplicationVersionsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *GalleryApplicationVersionsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l GalleryApplicationVersionsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (GalleryApplicationVersionsDeleteResponse, error) {
	respType := GalleryApplicationVersionsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// GalleryApplicationVersionsDeleteResponse contains the response from method GalleryApplicationVersions.Delete.
type GalleryApplicationVersionsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleryApplicationVersionsGetResponse contains the response from method GalleryApplicationVersions.Get.
type GalleryApplicationVersionsGetResponse struct {
	GalleryApplicationVersionsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleryApplicationVersionsGetResult contains the result from method GalleryApplicationVersions.Get.
type GalleryApplicationVersionsGetResult struct {
	GalleryApplicationVersion
}

// GalleryApplicationVersionsListByGalleryApplicationResponse contains the response from method GalleryApplicationVersions.ListByGalleryApplication.
type GalleryApplicationVersionsListByGalleryApplicationResponse struct {
	GalleryApplicationVersionsListByGalleryApplicationResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleryApplicationVersionsListByGalleryApplicationResult contains the result from method GalleryApplicationVersions.ListByGalleryApplication.
type GalleryApplicationVersionsListByGalleryApplicationResult struct {
	GalleryApplicationVersionList
}

// GalleryApplicationVersionsUpdatePollerResponse contains the response from method GalleryApplicationVersions.Update.
type GalleryApplicationVersionsUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *GalleryApplicationVersionsUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l GalleryApplicationVersionsUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (GalleryApplicationVersionsUpdateResponse, error) {
	respType := GalleryApplicationVersionsUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.GalleryApplicationVersion)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// GalleryApplicationVersionsUpdateResponse contains the response from method GalleryApplicationVersions.Update.
type GalleryApplicationVersionsUpdateResponse struct {
	GalleryApplicationVersionsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleryApplicationVersionsUpdateResult contains the result from method GalleryApplicationVersions.Update.
type GalleryApplicationVersionsUpdateResult struct {
	GalleryApplicationVersion
}

// GalleryApplicationsCreateOrUpdatePollerResponse contains the response from method GalleryApplications.CreateOrUpdate.
type GalleryApplicationsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *GalleryApplicationsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l GalleryApplicationsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (GalleryApplicationsCreateOrUpdateResponse, error) {
	respType := GalleryApplicationsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.GalleryApplication)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// GalleryApplicationsCreateOrUpdateResponse contains the response from method GalleryApplications.CreateOrUpdate.
type GalleryApplicationsCreateOrUpdateResponse struct {
	GalleryApplicationsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleryApplicationsCreateOrUpdateResult contains the result from method GalleryApplications.CreateOrUpdate.
type GalleryApplicationsCreateOrUpdateResult struct {
	GalleryApplication
}

// GalleryApplicationsDeletePollerResponse contains the response from method GalleryApplications.Delete.
type GalleryApplicationsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *GalleryApplicationsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l GalleryApplicationsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (GalleryApplicationsDeleteResponse, error) {
	respType := GalleryApplicationsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// GalleryApplicationsDeleteResponse contains the response from method GalleryApplications.Delete.
type GalleryApplicationsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleryApplicationsGetResponse contains the response from method GalleryApplications.Get.
type GalleryApplicationsGetResponse struct {
	GalleryApplicationsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleryApplicationsGetResult contains the result from method GalleryApplications.Get.
type GalleryApplicationsGetResult struct {
	GalleryApplication
}

// GalleryApplicationsListByGalleryResponse contains the response from method GalleryApplications.ListByGallery.
type GalleryApplicationsListByGalleryResponse struct {
	GalleryApplicationsListByGalleryResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleryApplicationsListByGalleryResult contains the result from method GalleryApplications.ListByGallery.
type GalleryApplicationsListByGalleryResult struct {
	GalleryApplicationList
}

// GalleryApplicationsUpdatePollerResponse contains the response from method GalleryApplications.Update.
type GalleryApplicationsUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *GalleryApplicationsUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l GalleryApplicationsUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (GalleryApplicationsUpdateResponse, error) {
	respType := GalleryApplicationsUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.GalleryApplication)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// GalleryApplicationsUpdateResponse contains the response from method GalleryApplications.Update.
type GalleryApplicationsUpdateResponse struct {
	GalleryApplicationsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleryApplicationsUpdateResult contains the result from method GalleryApplications.Update.
type GalleryApplicationsUpdateResult struct {
	GalleryApplication
}

// GalleryImageVersionsCreateOrUpdatePollerResponse contains the response from method GalleryImageVersions.CreateOrUpdate.
type GalleryImageVersionsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *GalleryImageVersionsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l GalleryImageVersionsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (GalleryImageVersionsCreateOrUpdateResponse, error) {
	respType := GalleryImageVersionsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.GalleryImageVersion)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// GalleryImageVersionsCreateOrUpdateResponse contains the response from method GalleryImageVersions.CreateOrUpdate.
type GalleryImageVersionsCreateOrUpdateResponse struct {
	GalleryImageVersionsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleryImageVersionsCreateOrUpdateResult contains the result from method GalleryImageVersions.CreateOrUpdate.
type GalleryImageVersionsCreateOrUpdateResult struct {
	GalleryImageVersion
}

// GalleryImageVersionsDeletePollerResponse contains the response from method GalleryImageVersions.Delete.
type GalleryImageVersionsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *GalleryImageVersionsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l GalleryImageVersionsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (GalleryImageVersionsDeleteResponse, error) {
	respType := GalleryImageVersionsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// GalleryImageVersionsDeleteResponse contains the response from method GalleryImageVersions.Delete.
type GalleryImageVersionsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleryImageVersionsGetResponse contains the response from method GalleryImageVersions.Get.
type GalleryImageVersionsGetResponse struct {
	GalleryImageVersionsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleryImageVersionsGetResult contains the result from method GalleryImageVersions.Get.
type GalleryImageVersionsGetResult struct {
	GalleryImageVersion
}

// GalleryImageVersionsListByGalleryImageResponse contains the response from method GalleryImageVersions.ListByGalleryImage.
type GalleryImageVersionsListByGalleryImageResponse struct {
	GalleryImageVersionsListByGalleryImageResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleryImageVersionsListByGalleryImageResult contains the result from method GalleryImageVersions.ListByGalleryImage.
type GalleryImageVersionsListByGalleryImageResult struct {
	GalleryImageVersionList
}

// GalleryImageVersionsUpdatePollerResponse contains the response from method GalleryImageVersions.Update.
type GalleryImageVersionsUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *GalleryImageVersionsUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l GalleryImageVersionsUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (GalleryImageVersionsUpdateResponse, error) {
	respType := GalleryImageVersionsUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.GalleryImageVersion)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// GalleryImageVersionsUpdateResponse contains the response from method GalleryImageVersions.Update.
type GalleryImageVersionsUpdateResponse struct {
	GalleryImageVersionsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleryImageVersionsUpdateResult contains the result from method GalleryImageVersions.Update.
type GalleryImageVersionsUpdateResult struct {
	GalleryImageVersion
}

// GalleryImagesCreateOrUpdatePollerResponse contains the response from method GalleryImages.CreateOrUpdate.
type GalleryImagesCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *GalleryImagesCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l GalleryImagesCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (GalleryImagesCreateOrUpdateResponse, error) {
	respType := GalleryImagesCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.GalleryImage)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// GalleryImagesCreateOrUpdateResponse contains the response from method GalleryImages.CreateOrUpdate.
type GalleryImagesCreateOrUpdateResponse struct {
	GalleryImagesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleryImagesCreateOrUpdateResult contains the result from method GalleryImages.CreateOrUpdate.
type GalleryImagesCreateOrUpdateResult struct {
	GalleryImage
}

// GalleryImagesDeletePollerResponse contains the response from method GalleryImages.Delete.
type GalleryImagesDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *GalleryImagesDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l GalleryImagesDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (GalleryImagesDeleteResponse, error) {
	respType := GalleryImagesDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// GalleryImagesDeleteResponse contains the response from method GalleryImages.Delete.
type GalleryImagesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleryImagesGetResponse contains the response from method GalleryImages.Get.
type GalleryImagesGetResponse struct {
	GalleryImagesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleryImagesGetResult contains the result from method GalleryImages.Get.
type GalleryImagesGetResult struct {
	GalleryImage
}

// GalleryImagesListByGalleryResponse contains the response from method GalleryImages.ListByGallery.
type GalleryImagesListByGalleryResponse struct {
	GalleryImagesListByGalleryResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleryImagesListByGalleryResult contains the result from method GalleryImages.ListByGallery.
type GalleryImagesListByGalleryResult struct {
	GalleryImageList
}

// GalleryImagesUpdatePollerResponse contains the response from method GalleryImages.Update.
type GalleryImagesUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *GalleryImagesUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l GalleryImagesUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (GalleryImagesUpdateResponse, error) {
	respType := GalleryImagesUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.GalleryImage)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// GalleryImagesUpdateResponse contains the response from method GalleryImages.Update.
type GalleryImagesUpdateResponse struct {
	GalleryImagesUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleryImagesUpdateResult contains the result from method GalleryImages.Update.
type GalleryImagesUpdateResult struct {
	GalleryImage
}

// ImagesCreateOrUpdatePollerResponse contains the response from method Images.CreateOrUpdate.
type ImagesCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ImagesCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ImagesCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ImagesCreateOrUpdateResponse, error) {
	respType := ImagesCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Image)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ImagesCreateOrUpdateResponse contains the response from method Images.CreateOrUpdate.
type ImagesCreateOrUpdateResponse struct {
	ImagesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ImagesCreateOrUpdateResult contains the result from method Images.CreateOrUpdate.
type ImagesCreateOrUpdateResult struct {
	Image
}

// ImagesDeletePollerResponse contains the response from method Images.Delete.
type ImagesDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ImagesDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ImagesDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ImagesDeleteResponse, error) {
	respType := ImagesDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ImagesDeleteResponse contains the response from method Images.Delete.
type ImagesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ImagesGetResponse contains the response from method Images.Get.
type ImagesGetResponse struct {
	ImagesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ImagesGetResult contains the result from method Images.Get.
type ImagesGetResult struct {
	Image
}

// ImagesListByResourceGroupResponse contains the response from method Images.ListByResourceGroup.
type ImagesListByResourceGroupResponse struct {
	ImagesListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ImagesListByResourceGroupResult contains the result from method Images.ListByResourceGroup.
type ImagesListByResourceGroupResult struct {
	ImageListResult
}

// ImagesListResponse contains the response from method Images.List.
type ImagesListResponse struct {
	ImagesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ImagesListResult contains the result from method Images.List.
type ImagesListResult struct {
	ImageListResult
}

// ImagesUpdatePollerResponse contains the response from method Images.Update.
type ImagesUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ImagesUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ImagesUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ImagesUpdateResponse, error) {
	respType := ImagesUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Image)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ImagesUpdateResponse contains the response from method Images.Update.
type ImagesUpdateResponse struct {
	ImagesUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ImagesUpdateResult contains the result from method Images.Update.
type ImagesUpdateResult struct {
	Image
}

// LogAnalyticsExportRequestRateByIntervalPollerResponse contains the response from method LogAnalytics.ExportRequestRateByInterval.
type LogAnalyticsExportRequestRateByIntervalPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LogAnalyticsExportRequestRateByIntervalPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LogAnalyticsExportRequestRateByIntervalPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LogAnalyticsExportRequestRateByIntervalResponse, error) {
	respType := LogAnalyticsExportRequestRateByIntervalResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.LogAnalyticsOperationResult)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LogAnalyticsExportRequestRateByIntervalResponse contains the response from method LogAnalytics.ExportRequestRateByInterval.
type LogAnalyticsExportRequestRateByIntervalResponse struct {
	LogAnalyticsExportRequestRateByIntervalResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LogAnalyticsExportRequestRateByIntervalResult contains the result from method LogAnalytics.ExportRequestRateByInterval.
type LogAnalyticsExportRequestRateByIntervalResult struct {
	LogAnalyticsOperationResult
}

// LogAnalyticsExportThrottledRequestsPollerResponse contains the response from method LogAnalytics.ExportThrottledRequests.
type LogAnalyticsExportThrottledRequestsPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LogAnalyticsExportThrottledRequestsPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LogAnalyticsExportThrottledRequestsPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LogAnalyticsExportThrottledRequestsResponse, error) {
	respType := LogAnalyticsExportThrottledRequestsResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.LogAnalyticsOperationResult)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LogAnalyticsExportThrottledRequestsResponse contains the response from method LogAnalytics.ExportThrottledRequests.
type LogAnalyticsExportThrottledRequestsResponse struct {
	LogAnalyticsExportThrottledRequestsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LogAnalyticsExportThrottledRequestsResult contains the result from method LogAnalytics.ExportThrottledRequests.
type LogAnalyticsExportThrottledRequestsResult struct {
	LogAnalyticsOperationResult
}

// OperationsListResponse contains the response from method Operations.List.
type OperationsListResponse struct {
	OperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResult contains the result from method Operations.List.
type OperationsListResult struct {
	ComputeOperationListResult
}

// ProximityPlacementGroupsCreateOrUpdateResponse contains the response from method ProximityPlacementGroups.CreateOrUpdate.
type ProximityPlacementGroupsCreateOrUpdateResponse struct {
	ProximityPlacementGroupsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ProximityPlacementGroupsCreateOrUpdateResult contains the result from method ProximityPlacementGroups.CreateOrUpdate.
type ProximityPlacementGroupsCreateOrUpdateResult struct {
	ProximityPlacementGroup
}

// ProximityPlacementGroupsDeleteResponse contains the response from method ProximityPlacementGroups.Delete.
type ProximityPlacementGroupsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ProximityPlacementGroupsGetResponse contains the response from method ProximityPlacementGroups.Get.
type ProximityPlacementGroupsGetResponse struct {
	ProximityPlacementGroupsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ProximityPlacementGroupsGetResult contains the result from method ProximityPlacementGroups.Get.
type ProximityPlacementGroupsGetResult struct {
	ProximityPlacementGroup
}

// ProximityPlacementGroupsListByResourceGroupResponse contains the response from method ProximityPlacementGroups.ListByResourceGroup.
type ProximityPlacementGroupsListByResourceGroupResponse struct {
	ProximityPlacementGroupsListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ProximityPlacementGroupsListByResourceGroupResult contains the result from method ProximityPlacementGroups.ListByResourceGroup.
type ProximityPlacementGroupsListByResourceGroupResult struct {
	ProximityPlacementGroupListResult
}

// ProximityPlacementGroupsListBySubscriptionResponse contains the response from method ProximityPlacementGroups.ListBySubscription.
type ProximityPlacementGroupsListBySubscriptionResponse struct {
	ProximityPlacementGroupsListBySubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ProximityPlacementGroupsListBySubscriptionResult contains the result from method ProximityPlacementGroups.ListBySubscription.
type ProximityPlacementGroupsListBySubscriptionResult struct {
	ProximityPlacementGroupListResult
}

// ProximityPlacementGroupsUpdateResponse contains the response from method ProximityPlacementGroups.Update.
type ProximityPlacementGroupsUpdateResponse struct {
	ProximityPlacementGroupsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ProximityPlacementGroupsUpdateResult contains the result from method ProximityPlacementGroups.Update.
type ProximityPlacementGroupsUpdateResult struct {
	ProximityPlacementGroup
}

// ResourceSKUsListResponse contains the response from method ResourceSKUs.List.
type ResourceSKUsListResponse struct {
	ResourceSKUsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceSKUsListResult contains the result from method ResourceSKUs.List.
type ResourceSKUsListResult struct {
	ResourceSKUsResult
}

// SSHPublicKeysCreateResponse contains the response from method SSHPublicKeys.Create.
type SSHPublicKeysCreateResponse struct {
	SSHPublicKeysCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SSHPublicKeysCreateResult contains the result from method SSHPublicKeys.Create.
type SSHPublicKeysCreateResult struct {
	SSHPublicKeyResource
}

// SSHPublicKeysDeleteResponse contains the response from method SSHPublicKeys.Delete.
type SSHPublicKeysDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SSHPublicKeysGenerateKeyPairResponse contains the response from method SSHPublicKeys.GenerateKeyPair.
type SSHPublicKeysGenerateKeyPairResponse struct {
	SSHPublicKeysGenerateKeyPairResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SSHPublicKeysGenerateKeyPairResult contains the result from method SSHPublicKeys.GenerateKeyPair.
type SSHPublicKeysGenerateKeyPairResult struct {
	SSHPublicKeyGenerateKeyPairResult
}

// SSHPublicKeysGetResponse contains the response from method SSHPublicKeys.Get.
type SSHPublicKeysGetResponse struct {
	SSHPublicKeysGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SSHPublicKeysGetResult contains the result from method SSHPublicKeys.Get.
type SSHPublicKeysGetResult struct {
	SSHPublicKeyResource
}

// SSHPublicKeysListByResourceGroupResponse contains the response from method SSHPublicKeys.ListByResourceGroup.
type SSHPublicKeysListByResourceGroupResponse struct {
	SSHPublicKeysListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SSHPublicKeysListByResourceGroupResult contains the result from method SSHPublicKeys.ListByResourceGroup.
type SSHPublicKeysListByResourceGroupResult struct {
	SSHPublicKeysGroupListResult
}

// SSHPublicKeysListBySubscriptionResponse contains the response from method SSHPublicKeys.ListBySubscription.
type SSHPublicKeysListBySubscriptionResponse struct {
	SSHPublicKeysListBySubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SSHPublicKeysListBySubscriptionResult contains the result from method SSHPublicKeys.ListBySubscription.
type SSHPublicKeysListBySubscriptionResult struct {
	SSHPublicKeysGroupListResult
}

// SSHPublicKeysUpdateResponse contains the response from method SSHPublicKeys.Update.
type SSHPublicKeysUpdateResponse struct {
	SSHPublicKeysUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SSHPublicKeysUpdateResult contains the result from method SSHPublicKeys.Update.
type SSHPublicKeysUpdateResult struct {
	SSHPublicKeyResource
}

// SnapshotsCreateOrUpdatePollerResponse contains the response from method Snapshots.CreateOrUpdate.
type SnapshotsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SnapshotsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l SnapshotsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SnapshotsCreateOrUpdateResponse, error) {
	respType := SnapshotsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Snapshot)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// SnapshotsCreateOrUpdateResponse contains the response from method Snapshots.CreateOrUpdate.
type SnapshotsCreateOrUpdateResponse struct {
	SnapshotsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SnapshotsCreateOrUpdateResult contains the result from method Snapshots.CreateOrUpdate.
type SnapshotsCreateOrUpdateResult struct {
	Snapshot
}

// SnapshotsDeletePollerResponse contains the response from method Snapshots.Delete.
type SnapshotsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SnapshotsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l SnapshotsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SnapshotsDeleteResponse, error) {
	respType := SnapshotsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// SnapshotsDeleteResponse contains the response from method Snapshots.Delete.
type SnapshotsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SnapshotsGetResponse contains the response from method Snapshots.Get.
type SnapshotsGetResponse struct {
	SnapshotsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SnapshotsGetResult contains the result from method Snapshots.Get.
type SnapshotsGetResult struct {
	Snapshot
}

// SnapshotsGrantAccessPollerResponse contains the response from method Snapshots.GrantAccess.
type SnapshotsGrantAccessPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SnapshotsGrantAccessPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l SnapshotsGrantAccessPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SnapshotsGrantAccessResponse, error) {
	respType := SnapshotsGrantAccessResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.AccessURI)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// SnapshotsGrantAccessResponse contains the response from method Snapshots.GrantAccess.
type SnapshotsGrantAccessResponse struct {
	SnapshotsGrantAccessResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SnapshotsGrantAccessResult contains the result from method Snapshots.GrantAccess.
type SnapshotsGrantAccessResult struct {
	AccessURI
}

// SnapshotsListByResourceGroupResponse contains the response from method Snapshots.ListByResourceGroup.
type SnapshotsListByResourceGroupResponse struct {
	SnapshotsListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SnapshotsListByResourceGroupResult contains the result from method Snapshots.ListByResourceGroup.
type SnapshotsListByResourceGroupResult struct {
	SnapshotList
}

// SnapshotsListResponse contains the response from method Snapshots.List.
type SnapshotsListResponse struct {
	SnapshotsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SnapshotsListResult contains the result from method Snapshots.List.
type SnapshotsListResult struct {
	SnapshotList
}

// SnapshotsRevokeAccessPollerResponse contains the response from method Snapshots.RevokeAccess.
type SnapshotsRevokeAccessPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SnapshotsRevokeAccessPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l SnapshotsRevokeAccessPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SnapshotsRevokeAccessResponse, error) {
	respType := SnapshotsRevokeAccessResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// SnapshotsRevokeAccessResponse contains the response from method Snapshots.RevokeAccess.
type SnapshotsRevokeAccessResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SnapshotsUpdatePollerResponse contains the response from method Snapshots.Update.
type SnapshotsUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SnapshotsUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l SnapshotsUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SnapshotsUpdateResponse, error) {
	respType := SnapshotsUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Snapshot)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// SnapshotsUpdateResponse contains the response from method Snapshots.Update.
type SnapshotsUpdateResponse struct {
	SnapshotsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SnapshotsUpdateResult contains the result from method Snapshots.Update.
type SnapshotsUpdateResult struct {
	Snapshot
}

// UsageListResponse contains the response from method Usage.List.
type UsageListResponse struct {
	UsageListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// UsageListResult contains the result from method Usage.List.
type UsageListResult struct {
	ListUsagesResult
}

// VirtualMachineExtensionImagesGetResponse contains the response from method VirtualMachineExtensionImages.Get.
type VirtualMachineExtensionImagesGetResponse struct {
	VirtualMachineExtensionImagesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineExtensionImagesGetResult contains the result from method VirtualMachineExtensionImages.Get.
type VirtualMachineExtensionImagesGetResult struct {
	VirtualMachineExtensionImage
}

// VirtualMachineExtensionImagesListTypesResponse contains the response from method VirtualMachineExtensionImages.ListTypes.
type VirtualMachineExtensionImagesListTypesResponse struct {
	VirtualMachineExtensionImagesListTypesResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineExtensionImagesListTypesResult contains the result from method VirtualMachineExtensionImages.ListTypes.
type VirtualMachineExtensionImagesListTypesResult struct {
	// Array of VirtualMachineExtensionImage
	VirtualMachineExtensionImageArray []*VirtualMachineExtensionImage
}

// VirtualMachineExtensionImagesListVersionsResponse contains the response from method VirtualMachineExtensionImages.ListVersions.
type VirtualMachineExtensionImagesListVersionsResponse struct {
	VirtualMachineExtensionImagesListVersionsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineExtensionImagesListVersionsResult contains the result from method VirtualMachineExtensionImages.ListVersions.
type VirtualMachineExtensionImagesListVersionsResult struct {
	// Array of VirtualMachineExtensionImage
	VirtualMachineExtensionImageArray []*VirtualMachineExtensionImage
}

// VirtualMachineExtensionsCreateOrUpdatePollerResponse contains the response from method VirtualMachineExtensions.CreateOrUpdate.
type VirtualMachineExtensionsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineExtensionsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineExtensionsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineExtensionsCreateOrUpdateResponse, error) {
	respType := VirtualMachineExtensionsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.VirtualMachineExtension)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineExtensionsCreateOrUpdateResponse contains the response from method VirtualMachineExtensions.CreateOrUpdate.
type VirtualMachineExtensionsCreateOrUpdateResponse struct {
	VirtualMachineExtensionsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineExtensionsCreateOrUpdateResult contains the result from method VirtualMachineExtensions.CreateOrUpdate.
type VirtualMachineExtensionsCreateOrUpdateResult struct {
	VirtualMachineExtension
}

// VirtualMachineExtensionsDeletePollerResponse contains the response from method VirtualMachineExtensions.Delete.
type VirtualMachineExtensionsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineExtensionsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineExtensionsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineExtensionsDeleteResponse, error) {
	respType := VirtualMachineExtensionsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineExtensionsDeleteResponse contains the response from method VirtualMachineExtensions.Delete.
type VirtualMachineExtensionsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineExtensionsGetResponse contains the response from method VirtualMachineExtensions.Get.
type VirtualMachineExtensionsGetResponse struct {
	VirtualMachineExtensionsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineExtensionsGetResult contains the result from method VirtualMachineExtensions.Get.
type VirtualMachineExtensionsGetResult struct {
	VirtualMachineExtension
}

// VirtualMachineExtensionsListResponse contains the response from method VirtualMachineExtensions.List.
type VirtualMachineExtensionsListResponse struct {
	VirtualMachineExtensionsListResultEnvelope
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineExtensionsListResultEnvelope contains the result from method VirtualMachineExtensions.List.
type VirtualMachineExtensionsListResultEnvelope struct {
	VirtualMachineExtensionsListResult
}

// VirtualMachineExtensionsUpdatePollerResponse contains the response from method VirtualMachineExtensions.Update.
type VirtualMachineExtensionsUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineExtensionsUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineExtensionsUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineExtensionsUpdateResponse, error) {
	respType := VirtualMachineExtensionsUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.VirtualMachineExtension)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineExtensionsUpdateResponse contains the response from method VirtualMachineExtensions.Update.
type VirtualMachineExtensionsUpdateResponse struct {
	VirtualMachineExtensionsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineExtensionsUpdateResult contains the result from method VirtualMachineExtensions.Update.
type VirtualMachineExtensionsUpdateResult struct {
	VirtualMachineExtension
}

// VirtualMachineImagesGetResponse contains the response from method VirtualMachineImages.Get.
type VirtualMachineImagesGetResponse struct {
	VirtualMachineImagesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineImagesGetResult contains the result from method VirtualMachineImages.Get.
type VirtualMachineImagesGetResult struct {
	VirtualMachineImage
}

// VirtualMachineImagesListOffersResponse contains the response from method VirtualMachineImages.ListOffers.
type VirtualMachineImagesListOffersResponse struct {
	VirtualMachineImagesListOffersResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineImagesListOffersResult contains the result from method VirtualMachineImages.ListOffers.
type VirtualMachineImagesListOffersResult struct {
	// Array of VirtualMachineImageResource
	VirtualMachineImageResourceArray []*VirtualMachineImageResource
}

// VirtualMachineImagesListPublishersResponse contains the response from method VirtualMachineImages.ListPublishers.
type VirtualMachineImagesListPublishersResponse struct {
	VirtualMachineImagesListPublishersResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineImagesListPublishersResult contains the result from method VirtualMachineImages.ListPublishers.
type VirtualMachineImagesListPublishersResult struct {
	// Array of VirtualMachineImageResource
	VirtualMachineImageResourceArray []*VirtualMachineImageResource
}

// VirtualMachineImagesListResponse contains the response from method VirtualMachineImages.List.
type VirtualMachineImagesListResponse struct {
	VirtualMachineImagesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineImagesListResult contains the result from method VirtualMachineImages.List.
type VirtualMachineImagesListResult struct {
	// Array of VirtualMachineImageResource
	VirtualMachineImageResourceArray []*VirtualMachineImageResource
}

// VirtualMachineImagesListSKUsResponse contains the response from method VirtualMachineImages.ListSKUs.
type VirtualMachineImagesListSKUsResponse struct {
	VirtualMachineImagesListSKUsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineImagesListSKUsResult contains the result from method VirtualMachineImages.ListSKUs.
type VirtualMachineImagesListSKUsResult struct {
	// Array of VirtualMachineImageResource
	VirtualMachineImageResourceArray []*VirtualMachineImageResource
}

// VirtualMachineRunCommandsGetResponse contains the response from method VirtualMachineRunCommands.Get.
type VirtualMachineRunCommandsGetResponse struct {
	VirtualMachineRunCommandsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineRunCommandsGetResult contains the result from method VirtualMachineRunCommands.Get.
type VirtualMachineRunCommandsGetResult struct {
	RunCommandDocument
}

// VirtualMachineRunCommandsListResponse contains the response from method VirtualMachineRunCommands.List.
type VirtualMachineRunCommandsListResponse struct {
	VirtualMachineRunCommandsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineRunCommandsListResult contains the result from method VirtualMachineRunCommands.List.
type VirtualMachineRunCommandsListResult struct {
	RunCommandListResult
}

// VirtualMachineScaleSetExtensionsCreateOrUpdatePollerResponse contains the response from method VirtualMachineScaleSetExtensions.CreateOrUpdate.
type VirtualMachineScaleSetExtensionsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetExtensionsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetExtensionsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetExtensionsCreateOrUpdateResponse, error) {
	respType := VirtualMachineScaleSetExtensionsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.VirtualMachineScaleSetExtension)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetExtensionsCreateOrUpdateResponse contains the response from method VirtualMachineScaleSetExtensions.CreateOrUpdate.
type VirtualMachineScaleSetExtensionsCreateOrUpdateResponse struct {
	VirtualMachineScaleSetExtensionsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetExtensionsCreateOrUpdateResult contains the result from method VirtualMachineScaleSetExtensions.CreateOrUpdate.
type VirtualMachineScaleSetExtensionsCreateOrUpdateResult struct {
	VirtualMachineScaleSetExtension
}

// VirtualMachineScaleSetExtensionsDeletePollerResponse contains the response from method VirtualMachineScaleSetExtensions.Delete.
type VirtualMachineScaleSetExtensionsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetExtensionsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetExtensionsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetExtensionsDeleteResponse, error) {
	respType := VirtualMachineScaleSetExtensionsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetExtensionsDeleteResponse contains the response from method VirtualMachineScaleSetExtensions.Delete.
type VirtualMachineScaleSetExtensionsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetExtensionsGetResponse contains the response from method VirtualMachineScaleSetExtensions.Get.
type VirtualMachineScaleSetExtensionsGetResponse struct {
	VirtualMachineScaleSetExtensionsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetExtensionsGetResult contains the result from method VirtualMachineScaleSetExtensions.Get.
type VirtualMachineScaleSetExtensionsGetResult struct {
	VirtualMachineScaleSetExtension
}

// VirtualMachineScaleSetExtensionsListResponse contains the response from method VirtualMachineScaleSetExtensions.List.
type VirtualMachineScaleSetExtensionsListResponse struct {
	VirtualMachineScaleSetExtensionsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetExtensionsListResult contains the result from method VirtualMachineScaleSetExtensions.List.
type VirtualMachineScaleSetExtensionsListResult struct {
	VirtualMachineScaleSetExtensionListResult
}

// VirtualMachineScaleSetExtensionsUpdatePollerResponse contains the response from method VirtualMachineScaleSetExtensions.Update.
type VirtualMachineScaleSetExtensionsUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetExtensionsUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetExtensionsUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetExtensionsUpdateResponse, error) {
	respType := VirtualMachineScaleSetExtensionsUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.VirtualMachineScaleSetExtension)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetExtensionsUpdateResponse contains the response from method VirtualMachineScaleSetExtensions.Update.
type VirtualMachineScaleSetExtensionsUpdateResponse struct {
	VirtualMachineScaleSetExtensionsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetExtensionsUpdateResult contains the result from method VirtualMachineScaleSetExtensions.Update.
type VirtualMachineScaleSetExtensionsUpdateResult struct {
	VirtualMachineScaleSetExtension
}

// VirtualMachineScaleSetRollingUpgradesCancelPollerResponse contains the response from method VirtualMachineScaleSetRollingUpgrades.Cancel.
type VirtualMachineScaleSetRollingUpgradesCancelPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetRollingUpgradesCancelPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetRollingUpgradesCancelPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetRollingUpgradesCancelResponse, error) {
	respType := VirtualMachineScaleSetRollingUpgradesCancelResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetRollingUpgradesCancelResponse contains the response from method VirtualMachineScaleSetRollingUpgrades.Cancel.
type VirtualMachineScaleSetRollingUpgradesCancelResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetRollingUpgradesGetLatestResponse contains the response from method VirtualMachineScaleSetRollingUpgrades.GetLatest.
type VirtualMachineScaleSetRollingUpgradesGetLatestResponse struct {
	VirtualMachineScaleSetRollingUpgradesGetLatestResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetRollingUpgradesGetLatestResult contains the result from method VirtualMachineScaleSetRollingUpgrades.GetLatest.
type VirtualMachineScaleSetRollingUpgradesGetLatestResult struct {
	RollingUpgradeStatusInfo
}

// VirtualMachineScaleSetRollingUpgradesStartExtensionUpgradePollerResponse contains the response from method VirtualMachineScaleSetRollingUpgrades.StartExtensionUpgrade.
type VirtualMachineScaleSetRollingUpgradesStartExtensionUpgradePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetRollingUpgradesStartExtensionUpgradePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetRollingUpgradesStartExtensionUpgradePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetRollingUpgradesStartExtensionUpgradeResponse, error) {
	respType := VirtualMachineScaleSetRollingUpgradesStartExtensionUpgradeResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetRollingUpgradesStartExtensionUpgradeResponse contains the response from method VirtualMachineScaleSetRollingUpgrades.StartExtensionUpgrade.
type VirtualMachineScaleSetRollingUpgradesStartExtensionUpgradeResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetRollingUpgradesStartOSUpgradePollerResponse contains the response from method VirtualMachineScaleSetRollingUpgrades.StartOSUpgrade.
type VirtualMachineScaleSetRollingUpgradesStartOSUpgradePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetRollingUpgradesStartOSUpgradePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetRollingUpgradesStartOSUpgradePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetRollingUpgradesStartOSUpgradeResponse, error) {
	respType := VirtualMachineScaleSetRollingUpgradesStartOSUpgradeResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetRollingUpgradesStartOSUpgradeResponse contains the response from method VirtualMachineScaleSetRollingUpgrades.StartOSUpgrade.
type VirtualMachineScaleSetRollingUpgradesStartOSUpgradeResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetVMExtensionsCreateOrUpdatePollerResponse contains the response from method VirtualMachineScaleSetVMExtensions.CreateOrUpdate.
type VirtualMachineScaleSetVMExtensionsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetVMExtensionsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetVMExtensionsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetVMExtensionsCreateOrUpdateResponse, error) {
	respType := VirtualMachineScaleSetVMExtensionsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.VirtualMachineExtension)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetVMExtensionsCreateOrUpdateResponse contains the response from method VirtualMachineScaleSetVMExtensions.CreateOrUpdate.
type VirtualMachineScaleSetVMExtensionsCreateOrUpdateResponse struct {
	VirtualMachineScaleSetVMExtensionsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetVMExtensionsCreateOrUpdateResult contains the result from method VirtualMachineScaleSetVMExtensions.CreateOrUpdate.
type VirtualMachineScaleSetVMExtensionsCreateOrUpdateResult struct {
	VirtualMachineExtension
}

// VirtualMachineScaleSetVMExtensionsDeletePollerResponse contains the response from method VirtualMachineScaleSetVMExtensions.Delete.
type VirtualMachineScaleSetVMExtensionsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetVMExtensionsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetVMExtensionsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetVMExtensionsDeleteResponse, error) {
	respType := VirtualMachineScaleSetVMExtensionsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetVMExtensionsDeleteResponse contains the response from method VirtualMachineScaleSetVMExtensions.Delete.
type VirtualMachineScaleSetVMExtensionsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetVMExtensionsGetResponse contains the response from method VirtualMachineScaleSetVMExtensions.Get.
type VirtualMachineScaleSetVMExtensionsGetResponse struct {
	VirtualMachineScaleSetVMExtensionsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetVMExtensionsGetResult contains the result from method VirtualMachineScaleSetVMExtensions.Get.
type VirtualMachineScaleSetVMExtensionsGetResult struct {
	VirtualMachineExtension
}

// VirtualMachineScaleSetVMExtensionsListResponse contains the response from method VirtualMachineScaleSetVMExtensions.List.
type VirtualMachineScaleSetVMExtensionsListResponse struct {
	VirtualMachineScaleSetVMExtensionsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetVMExtensionsListResult contains the result from method VirtualMachineScaleSetVMExtensions.List.
type VirtualMachineScaleSetVMExtensionsListResult struct {
	VirtualMachineExtensionsListResult
}

// VirtualMachineScaleSetVMExtensionsUpdatePollerResponse contains the response from method VirtualMachineScaleSetVMExtensions.Update.
type VirtualMachineScaleSetVMExtensionsUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetVMExtensionsUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetVMExtensionsUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetVMExtensionsUpdateResponse, error) {
	respType := VirtualMachineScaleSetVMExtensionsUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.VirtualMachineExtension)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetVMExtensionsUpdateResponse contains the response from method VirtualMachineScaleSetVMExtensions.Update.
type VirtualMachineScaleSetVMExtensionsUpdateResponse struct {
	VirtualMachineScaleSetVMExtensionsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetVMExtensionsUpdateResult contains the result from method VirtualMachineScaleSetVMExtensions.Update.
type VirtualMachineScaleSetVMExtensionsUpdateResult struct {
	VirtualMachineExtension
}

// VirtualMachineScaleSetVMsDeallocatePollerResponse contains the response from method VirtualMachineScaleSetVMs.Deallocate.
type VirtualMachineScaleSetVMsDeallocatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetVMsDeallocatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetVMsDeallocatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetVMsDeallocateResponse, error) {
	respType := VirtualMachineScaleSetVMsDeallocateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetVMsDeallocateResponse contains the response from method VirtualMachineScaleSetVMs.Deallocate.
type VirtualMachineScaleSetVMsDeallocateResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetVMsDeletePollerResponse contains the response from method VirtualMachineScaleSetVMs.Delete.
type VirtualMachineScaleSetVMsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetVMsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetVMsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetVMsDeleteResponse, error) {
	respType := VirtualMachineScaleSetVMsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetVMsDeleteResponse contains the response from method VirtualMachineScaleSetVMs.Delete.
type VirtualMachineScaleSetVMsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetVMsGetInstanceViewResponse contains the response from method VirtualMachineScaleSetVMs.GetInstanceView.
type VirtualMachineScaleSetVMsGetInstanceViewResponse struct {
	VirtualMachineScaleSetVMsGetInstanceViewResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetVMsGetInstanceViewResult contains the result from method VirtualMachineScaleSetVMs.GetInstanceView.
type VirtualMachineScaleSetVMsGetInstanceViewResult struct {
	VirtualMachineScaleSetVMInstanceView
}

// VirtualMachineScaleSetVMsGetResponse contains the response from method VirtualMachineScaleSetVMs.Get.
type VirtualMachineScaleSetVMsGetResponse struct {
	VirtualMachineScaleSetVMsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetVMsGetResult contains the result from method VirtualMachineScaleSetVMs.Get.
type VirtualMachineScaleSetVMsGetResult struct {
	VirtualMachineScaleSetVM
}

// VirtualMachineScaleSetVMsListResponse contains the response from method VirtualMachineScaleSetVMs.List.
type VirtualMachineScaleSetVMsListResponse struct {
	VirtualMachineScaleSetVMsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetVMsListResult contains the result from method VirtualMachineScaleSetVMs.List.
type VirtualMachineScaleSetVMsListResult struct {
	VirtualMachineScaleSetVMListResult
}

// VirtualMachineScaleSetVMsPerformMaintenancePollerResponse contains the response from method VirtualMachineScaleSetVMs.PerformMaintenance.
type VirtualMachineScaleSetVMsPerformMaintenancePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetVMsPerformMaintenancePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetVMsPerformMaintenancePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetVMsPerformMaintenanceResponse, error) {
	respType := VirtualMachineScaleSetVMsPerformMaintenanceResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetVMsPerformMaintenanceResponse contains the response from method VirtualMachineScaleSetVMs.PerformMaintenance.
type VirtualMachineScaleSetVMsPerformMaintenanceResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetVMsPowerOffPollerResponse contains the response from method VirtualMachineScaleSetVMs.PowerOff.
type VirtualMachineScaleSetVMsPowerOffPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetVMsPowerOffPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetVMsPowerOffPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetVMsPowerOffResponse, error) {
	respType := VirtualMachineScaleSetVMsPowerOffResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetVMsPowerOffResponse contains the response from method VirtualMachineScaleSetVMs.PowerOff.
type VirtualMachineScaleSetVMsPowerOffResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetVMsRedeployPollerResponse contains the response from method VirtualMachineScaleSetVMs.Redeploy.
type VirtualMachineScaleSetVMsRedeployPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetVMsRedeployPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetVMsRedeployPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetVMsRedeployResponse, error) {
	respType := VirtualMachineScaleSetVMsRedeployResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetVMsRedeployResponse contains the response from method VirtualMachineScaleSetVMs.Redeploy.
type VirtualMachineScaleSetVMsRedeployResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetVMsReimageAllPollerResponse contains the response from method VirtualMachineScaleSetVMs.ReimageAll.
type VirtualMachineScaleSetVMsReimageAllPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetVMsReimageAllPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetVMsReimageAllPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetVMsReimageAllResponse, error) {
	respType := VirtualMachineScaleSetVMsReimageAllResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetVMsReimageAllResponse contains the response from method VirtualMachineScaleSetVMs.ReimageAll.
type VirtualMachineScaleSetVMsReimageAllResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetVMsReimagePollerResponse contains the response from method VirtualMachineScaleSetVMs.Reimage.
type VirtualMachineScaleSetVMsReimagePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetVMsReimagePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetVMsReimagePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetVMsReimageResponse, error) {
	respType := VirtualMachineScaleSetVMsReimageResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetVMsReimageResponse contains the response from method VirtualMachineScaleSetVMs.Reimage.
type VirtualMachineScaleSetVMsReimageResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetVMsRestartPollerResponse contains the response from method VirtualMachineScaleSetVMs.Restart.
type VirtualMachineScaleSetVMsRestartPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetVMsRestartPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetVMsRestartPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetVMsRestartResponse, error) {
	respType := VirtualMachineScaleSetVMsRestartResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetVMsRestartResponse contains the response from method VirtualMachineScaleSetVMs.Restart.
type VirtualMachineScaleSetVMsRestartResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetVMsRunCommandPollerResponse contains the response from method VirtualMachineScaleSetVMs.RunCommand.
type VirtualMachineScaleSetVMsRunCommandPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetVMsRunCommandPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetVMsRunCommandPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetVMsRunCommandResponse, error) {
	respType := VirtualMachineScaleSetVMsRunCommandResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.RunCommandResult)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetVMsRunCommandResponse contains the response from method VirtualMachineScaleSetVMs.RunCommand.
type VirtualMachineScaleSetVMsRunCommandResponse struct {
	VirtualMachineScaleSetVMsRunCommandResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetVMsRunCommandResult contains the result from method VirtualMachineScaleSetVMs.RunCommand.
type VirtualMachineScaleSetVMsRunCommandResult struct {
	RunCommandResult
}

// VirtualMachineScaleSetVMsSimulateEvictionResponse contains the response from method VirtualMachineScaleSetVMs.SimulateEviction.
type VirtualMachineScaleSetVMsSimulateEvictionResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetVMsStartPollerResponse contains the response from method VirtualMachineScaleSetVMs.Start.
type VirtualMachineScaleSetVMsStartPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetVMsStartPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetVMsStartPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetVMsStartResponse, error) {
	respType := VirtualMachineScaleSetVMsStartResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetVMsStartResponse contains the response from method VirtualMachineScaleSetVMs.Start.
type VirtualMachineScaleSetVMsStartResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetVMsUpdatePollerResponse contains the response from method VirtualMachineScaleSetVMs.Update.
type VirtualMachineScaleSetVMsUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetVMsUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetVMsUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetVMsUpdateResponse, error) {
	respType := VirtualMachineScaleSetVMsUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.VirtualMachineScaleSetVM)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetVMsUpdateResponse contains the response from method VirtualMachineScaleSetVMs.Update.
type VirtualMachineScaleSetVMsUpdateResponse struct {
	VirtualMachineScaleSetVMsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetVMsUpdateResult contains the result from method VirtualMachineScaleSetVMs.Update.
type VirtualMachineScaleSetVMsUpdateResult struct {
	VirtualMachineScaleSetVM
}

// VirtualMachineScaleSetsConvertToSinglePlacementGroupResponse contains the response from method VirtualMachineScaleSets.ConvertToSinglePlacementGroup.
type VirtualMachineScaleSetsConvertToSinglePlacementGroupResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetsCreateOrUpdatePollerResponse contains the response from method VirtualMachineScaleSets.CreateOrUpdate.
type VirtualMachineScaleSetsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetsCreateOrUpdateResponse, error) {
	respType := VirtualMachineScaleSetsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.VirtualMachineScaleSet)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetsCreateOrUpdateResponse contains the response from method VirtualMachineScaleSets.CreateOrUpdate.
type VirtualMachineScaleSetsCreateOrUpdateResponse struct {
	VirtualMachineScaleSetsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetsCreateOrUpdateResult contains the result from method VirtualMachineScaleSets.CreateOrUpdate.
type VirtualMachineScaleSetsCreateOrUpdateResult struct {
	VirtualMachineScaleSet
}

// VirtualMachineScaleSetsDeallocatePollerResponse contains the response from method VirtualMachineScaleSets.Deallocate.
type VirtualMachineScaleSetsDeallocatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetsDeallocatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetsDeallocatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetsDeallocateResponse, error) {
	respType := VirtualMachineScaleSetsDeallocateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetsDeallocateResponse contains the response from method VirtualMachineScaleSets.Deallocate.
type VirtualMachineScaleSetsDeallocateResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetsDeleteInstancesPollerResponse contains the response from method VirtualMachineScaleSets.DeleteInstances.
type VirtualMachineScaleSetsDeleteInstancesPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetsDeleteInstancesPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetsDeleteInstancesPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetsDeleteInstancesResponse, error) {
	respType := VirtualMachineScaleSetsDeleteInstancesResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetsDeleteInstancesResponse contains the response from method VirtualMachineScaleSets.DeleteInstances.
type VirtualMachineScaleSetsDeleteInstancesResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetsDeletePollerResponse contains the response from method VirtualMachineScaleSets.Delete.
type VirtualMachineScaleSetsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetsDeleteResponse, error) {
	respType := VirtualMachineScaleSetsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetsDeleteResponse contains the response from method VirtualMachineScaleSets.Delete.
type VirtualMachineScaleSetsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalkResponse contains the response from method VirtualMachineScaleSets.ForceRecoveryServiceFabricPlatformUpdateDomainWalk.
type VirtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalkResponse struct {
	VirtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalkResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalkResult contains the result from method VirtualMachineScaleSets.ForceRecoveryServiceFabricPlatformUpdateDomainWalk.
type VirtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalkResult struct {
	RecoveryWalkResponse
}

// VirtualMachineScaleSetsGetInstanceViewResponse contains the response from method VirtualMachineScaleSets.GetInstanceView.
type VirtualMachineScaleSetsGetInstanceViewResponse struct {
	VirtualMachineScaleSetsGetInstanceViewResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetsGetInstanceViewResult contains the result from method VirtualMachineScaleSets.GetInstanceView.
type VirtualMachineScaleSetsGetInstanceViewResult struct {
	VirtualMachineScaleSetInstanceView
}

// VirtualMachineScaleSetsGetOSUpgradeHistoryResponse contains the response from method VirtualMachineScaleSets.GetOSUpgradeHistory.
type VirtualMachineScaleSetsGetOSUpgradeHistoryResponse struct {
	VirtualMachineScaleSetsGetOSUpgradeHistoryResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetsGetOSUpgradeHistoryResult contains the result from method VirtualMachineScaleSets.GetOSUpgradeHistory.
type VirtualMachineScaleSetsGetOSUpgradeHistoryResult struct {
	VirtualMachineScaleSetListOSUpgradeHistory
}

// VirtualMachineScaleSetsGetResponse contains the response from method VirtualMachineScaleSets.Get.
type VirtualMachineScaleSetsGetResponse struct {
	VirtualMachineScaleSetsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetsGetResult contains the result from method VirtualMachineScaleSets.Get.
type VirtualMachineScaleSetsGetResult struct {
	VirtualMachineScaleSet
}

// VirtualMachineScaleSetsListAllResponse contains the response from method VirtualMachineScaleSets.ListAll.
type VirtualMachineScaleSetsListAllResponse struct {
	VirtualMachineScaleSetsListAllResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetsListAllResult contains the result from method VirtualMachineScaleSets.ListAll.
type VirtualMachineScaleSetsListAllResult struct {
	VirtualMachineScaleSetListWithLinkResult
}

// VirtualMachineScaleSetsListResponse contains the response from method VirtualMachineScaleSets.List.
type VirtualMachineScaleSetsListResponse struct {
	VirtualMachineScaleSetsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetsListResult contains the result from method VirtualMachineScaleSets.List.
type VirtualMachineScaleSetsListResult struct {
	VirtualMachineScaleSetListResult
}

// VirtualMachineScaleSetsListSKUsResponse contains the response from method VirtualMachineScaleSets.ListSKUs.
type VirtualMachineScaleSetsListSKUsResponse struct {
	VirtualMachineScaleSetsListSKUsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetsListSKUsResult contains the result from method VirtualMachineScaleSets.ListSKUs.
type VirtualMachineScaleSetsListSKUsResult struct {
	VirtualMachineScaleSetListSKUsResult
}

// VirtualMachineScaleSetsPerformMaintenancePollerResponse contains the response from method VirtualMachineScaleSets.PerformMaintenance.
type VirtualMachineScaleSetsPerformMaintenancePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetsPerformMaintenancePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetsPerformMaintenancePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetsPerformMaintenanceResponse, error) {
	respType := VirtualMachineScaleSetsPerformMaintenanceResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetsPerformMaintenanceResponse contains the response from method VirtualMachineScaleSets.PerformMaintenance.
type VirtualMachineScaleSetsPerformMaintenanceResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetsPowerOffPollerResponse contains the response from method VirtualMachineScaleSets.PowerOff.
type VirtualMachineScaleSetsPowerOffPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetsPowerOffPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetsPowerOffPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetsPowerOffResponse, error) {
	respType := VirtualMachineScaleSetsPowerOffResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetsPowerOffResponse contains the response from method VirtualMachineScaleSets.PowerOff.
type VirtualMachineScaleSetsPowerOffResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetsRedeployPollerResponse contains the response from method VirtualMachineScaleSets.Redeploy.
type VirtualMachineScaleSetsRedeployPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetsRedeployPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetsRedeployPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetsRedeployResponse, error) {
	respType := VirtualMachineScaleSetsRedeployResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetsRedeployResponse contains the response from method VirtualMachineScaleSets.Redeploy.
type VirtualMachineScaleSetsRedeployResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetsReimageAllPollerResponse contains the response from method VirtualMachineScaleSets.ReimageAll.
type VirtualMachineScaleSetsReimageAllPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetsReimageAllPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetsReimageAllPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetsReimageAllResponse, error) {
	respType := VirtualMachineScaleSetsReimageAllResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetsReimageAllResponse contains the response from method VirtualMachineScaleSets.ReimageAll.
type VirtualMachineScaleSetsReimageAllResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetsReimagePollerResponse contains the response from method VirtualMachineScaleSets.Reimage.
type VirtualMachineScaleSetsReimagePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetsReimagePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetsReimagePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetsReimageResponse, error) {
	respType := VirtualMachineScaleSetsReimageResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetsReimageResponse contains the response from method VirtualMachineScaleSets.Reimage.
type VirtualMachineScaleSetsReimageResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetsRestartPollerResponse contains the response from method VirtualMachineScaleSets.Restart.
type VirtualMachineScaleSetsRestartPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetsRestartPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetsRestartPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetsRestartResponse, error) {
	respType := VirtualMachineScaleSetsRestartResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetsRestartResponse contains the response from method VirtualMachineScaleSets.Restart.
type VirtualMachineScaleSetsRestartResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetsSetOrchestrationServiceStatePollerResponse contains the response from method VirtualMachineScaleSets.SetOrchestrationServiceState.
type VirtualMachineScaleSetsSetOrchestrationServiceStatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetsSetOrchestrationServiceStatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetsSetOrchestrationServiceStatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetsSetOrchestrationServiceStateResponse, error) {
	respType := VirtualMachineScaleSetsSetOrchestrationServiceStateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetsSetOrchestrationServiceStateResponse contains the response from method VirtualMachineScaleSets.SetOrchestrationServiceState.
type VirtualMachineScaleSetsSetOrchestrationServiceStateResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetsStartPollerResponse contains the response from method VirtualMachineScaleSets.Start.
type VirtualMachineScaleSetsStartPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetsStartPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetsStartPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetsStartResponse, error) {
	respType := VirtualMachineScaleSetsStartResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetsStartResponse contains the response from method VirtualMachineScaleSets.Start.
type VirtualMachineScaleSetsStartResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetsUpdateInstancesPollerResponse contains the response from method VirtualMachineScaleSets.UpdateInstances.
type VirtualMachineScaleSetsUpdateInstancesPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetsUpdateInstancesPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetsUpdateInstancesPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetsUpdateInstancesResponse, error) {
	respType := VirtualMachineScaleSetsUpdateInstancesResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetsUpdateInstancesResponse contains the response from method VirtualMachineScaleSets.UpdateInstances.
type VirtualMachineScaleSetsUpdateInstancesResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetsUpdatePollerResponse contains the response from method VirtualMachineScaleSets.Update.
type VirtualMachineScaleSetsUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineScaleSetsUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachineScaleSetsUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineScaleSetsUpdateResponse, error) {
	respType := VirtualMachineScaleSetsUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.VirtualMachineScaleSet)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachineScaleSetsUpdateResponse contains the response from method VirtualMachineScaleSets.Update.
type VirtualMachineScaleSetsUpdateResponse struct {
	VirtualMachineScaleSetsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetsUpdateResult contains the result from method VirtualMachineScaleSets.Update.
type VirtualMachineScaleSetsUpdateResult struct {
	VirtualMachineScaleSet
}

// VirtualMachineSizesListResponse contains the response from method VirtualMachineSizes.List.
type VirtualMachineSizesListResponse struct {
	VirtualMachineSizesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineSizesListResult contains the result from method VirtualMachineSizes.List.
type VirtualMachineSizesListResult struct {
	VirtualMachineSizeListResult
}

// VirtualMachinesCapturePollerResponse contains the response from method VirtualMachines.Capture.
type VirtualMachinesCapturePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachinesCapturePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachinesCapturePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachinesCaptureResponse, error) {
	respType := VirtualMachinesCaptureResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.VirtualMachineCaptureResult)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachinesCaptureResponse contains the response from method VirtualMachines.Capture.
type VirtualMachinesCaptureResponse struct {
	VirtualMachinesCaptureResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachinesCaptureResult contains the result from method VirtualMachines.Capture.
type VirtualMachinesCaptureResult struct {
	VirtualMachineCaptureResult
}

// VirtualMachinesConvertToManagedDisksPollerResponse contains the response from method VirtualMachines.ConvertToManagedDisks.
type VirtualMachinesConvertToManagedDisksPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachinesConvertToManagedDisksPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachinesConvertToManagedDisksPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachinesConvertToManagedDisksResponse, error) {
	respType := VirtualMachinesConvertToManagedDisksResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachinesConvertToManagedDisksResponse contains the response from method VirtualMachines.ConvertToManagedDisks.
type VirtualMachinesConvertToManagedDisksResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachinesCreateOrUpdatePollerResponse contains the response from method VirtualMachines.CreateOrUpdate.
type VirtualMachinesCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachinesCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachinesCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachinesCreateOrUpdateResponse, error) {
	respType := VirtualMachinesCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.VirtualMachine)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachinesCreateOrUpdateResponse contains the response from method VirtualMachines.CreateOrUpdate.
type VirtualMachinesCreateOrUpdateResponse struct {
	VirtualMachinesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachinesCreateOrUpdateResult contains the result from method VirtualMachines.CreateOrUpdate.
type VirtualMachinesCreateOrUpdateResult struct {
	VirtualMachine
}

// VirtualMachinesDeallocatePollerResponse contains the response from method VirtualMachines.Deallocate.
type VirtualMachinesDeallocatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachinesDeallocatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachinesDeallocatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachinesDeallocateResponse, error) {
	respType := VirtualMachinesDeallocateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachinesDeallocateResponse contains the response from method VirtualMachines.Deallocate.
type VirtualMachinesDeallocateResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachinesDeletePollerResponse contains the response from method VirtualMachines.Delete.
type VirtualMachinesDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachinesDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachinesDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachinesDeleteResponse, error) {
	respType := VirtualMachinesDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachinesDeleteResponse contains the response from method VirtualMachines.Delete.
type VirtualMachinesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachinesGeneralizeResponse contains the response from method VirtualMachines.Generalize.
type VirtualMachinesGeneralizeResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachinesGetResponse contains the response from method VirtualMachines.Get.
type VirtualMachinesGetResponse struct {
	VirtualMachinesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachinesGetResult contains the result from method VirtualMachines.Get.
type VirtualMachinesGetResult struct {
	VirtualMachine
}

// VirtualMachinesInstanceViewResponse contains the response from method VirtualMachines.InstanceView.
type VirtualMachinesInstanceViewResponse struct {
	VirtualMachinesInstanceViewResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachinesInstanceViewResult contains the result from method VirtualMachines.InstanceView.
type VirtualMachinesInstanceViewResult struct {
	VirtualMachineInstanceView
}

// VirtualMachinesListAllResponse contains the response from method VirtualMachines.ListAll.
type VirtualMachinesListAllResponse struct {
	VirtualMachinesListAllResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachinesListAllResult contains the result from method VirtualMachines.ListAll.
type VirtualMachinesListAllResult struct {
	VirtualMachineListResult
}

// VirtualMachinesListAvailableSizesResponse contains the response from method VirtualMachines.ListAvailableSizes.
type VirtualMachinesListAvailableSizesResponse struct {
	VirtualMachinesListAvailableSizesResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachinesListAvailableSizesResult contains the result from method VirtualMachines.ListAvailableSizes.
type VirtualMachinesListAvailableSizesResult struct {
	VirtualMachineSizeListResult
}

// VirtualMachinesListByLocationResponse contains the response from method VirtualMachines.ListByLocation.
type VirtualMachinesListByLocationResponse struct {
	VirtualMachinesListByLocationResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachinesListByLocationResult contains the result from method VirtualMachines.ListByLocation.
type VirtualMachinesListByLocationResult struct {
	VirtualMachineListResult
}

// VirtualMachinesListResponse contains the response from method VirtualMachines.List.
type VirtualMachinesListResponse struct {
	VirtualMachinesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachinesListResult contains the result from method VirtualMachines.List.
type VirtualMachinesListResult struct {
	VirtualMachineListResult
}

// VirtualMachinesPerformMaintenancePollerResponse contains the response from method VirtualMachines.PerformMaintenance.
type VirtualMachinesPerformMaintenancePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachinesPerformMaintenancePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachinesPerformMaintenancePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachinesPerformMaintenanceResponse, error) {
	respType := VirtualMachinesPerformMaintenanceResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachinesPerformMaintenanceResponse contains the response from method VirtualMachines.PerformMaintenance.
type VirtualMachinesPerformMaintenanceResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachinesPowerOffPollerResponse contains the response from method VirtualMachines.PowerOff.
type VirtualMachinesPowerOffPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachinesPowerOffPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachinesPowerOffPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachinesPowerOffResponse, error) {
	respType := VirtualMachinesPowerOffResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachinesPowerOffResponse contains the response from method VirtualMachines.PowerOff.
type VirtualMachinesPowerOffResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachinesReapplyPollerResponse contains the response from method VirtualMachines.Reapply.
type VirtualMachinesReapplyPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachinesReapplyPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachinesReapplyPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachinesReapplyResponse, error) {
	respType := VirtualMachinesReapplyResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachinesReapplyResponse contains the response from method VirtualMachines.Reapply.
type VirtualMachinesReapplyResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachinesRedeployPollerResponse contains the response from method VirtualMachines.Redeploy.
type VirtualMachinesRedeployPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachinesRedeployPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachinesRedeployPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachinesRedeployResponse, error) {
	respType := VirtualMachinesRedeployResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachinesRedeployResponse contains the response from method VirtualMachines.Redeploy.
type VirtualMachinesRedeployResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachinesReimagePollerResponse contains the response from method VirtualMachines.Reimage.
type VirtualMachinesReimagePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachinesReimagePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachinesReimagePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachinesReimageResponse, error) {
	respType := VirtualMachinesReimageResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachinesReimageResponse contains the response from method VirtualMachines.Reimage.
type VirtualMachinesReimageResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachinesRestartPollerResponse contains the response from method VirtualMachines.Restart.
type VirtualMachinesRestartPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachinesRestartPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachinesRestartPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachinesRestartResponse, error) {
	respType := VirtualMachinesRestartResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachinesRestartResponse contains the response from method VirtualMachines.Restart.
type VirtualMachinesRestartResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachinesRunCommandPollerResponse contains the response from method VirtualMachines.RunCommand.
type VirtualMachinesRunCommandPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachinesRunCommandPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachinesRunCommandPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachinesRunCommandResponse, error) {
	respType := VirtualMachinesRunCommandResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.RunCommandResult)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachinesRunCommandResponse contains the response from method VirtualMachines.RunCommand.
type VirtualMachinesRunCommandResponse struct {
	VirtualMachinesRunCommandResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachinesRunCommandResult contains the result from method VirtualMachines.RunCommand.
type VirtualMachinesRunCommandResult struct {
	RunCommandResult
}

// VirtualMachinesSimulateEvictionResponse contains the response from method VirtualMachines.SimulateEviction.
type VirtualMachinesSimulateEvictionResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachinesStartPollerResponse contains the response from method VirtualMachines.Start.
type VirtualMachinesStartPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachinesStartPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachinesStartPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachinesStartResponse, error) {
	respType := VirtualMachinesStartResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachinesStartResponse contains the response from method VirtualMachines.Start.
type VirtualMachinesStartResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachinesUpdatePollerResponse contains the response from method VirtualMachines.Update.
type VirtualMachinesUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachinesUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualMachinesUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachinesUpdateResponse, error) {
	respType := VirtualMachinesUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.VirtualMachine)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualMachinesUpdateResponse contains the response from method VirtualMachines.Update.
type VirtualMachinesUpdateResponse struct {
	VirtualMachinesUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachinesUpdateResult contains the result from method VirtualMachines.Update.
type VirtualMachinesUpdateResult struct {
	VirtualMachine
}
