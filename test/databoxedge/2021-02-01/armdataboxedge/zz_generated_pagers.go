//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdataboxedge

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// AddonsClientListByRolePager provides operations for iterating over paged responses.
type AddonsClientListByRolePager struct {
	client    *AddonsClient
	current   AddonsClientListByRoleResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AddonsClientListByRoleResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AddonsClientListByRolePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AddonList.NextLink == nil || len(*p.current.AddonList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AddonsClientListByRolePager) NextPage(ctx context.Context) (AddonsClientListByRoleResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AddonsClientListByRoleResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AddonsClientListByRoleResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AddonsClientListByRoleResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AddonsClientListByRoleResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByRoleHandleResponse(resp)
	if err != nil {
		return AddonsClientListByRoleResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// AlertsClientListByDataBoxEdgeDevicePager provides operations for iterating over paged responses.
type AlertsClientListByDataBoxEdgeDevicePager struct {
	client    *AlertsClient
	current   AlertsClientListByDataBoxEdgeDeviceResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AlertsClientListByDataBoxEdgeDeviceResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AlertsClientListByDataBoxEdgeDevicePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AlertList.NextLink == nil || len(*p.current.AlertList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AlertsClientListByDataBoxEdgeDevicePager) NextPage(ctx context.Context) (AlertsClientListByDataBoxEdgeDeviceResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AlertsClientListByDataBoxEdgeDeviceResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AlertsClientListByDataBoxEdgeDeviceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AlertsClientListByDataBoxEdgeDeviceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AlertsClientListByDataBoxEdgeDeviceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByDataBoxEdgeDeviceHandleResponse(resp)
	if err != nil {
		return AlertsClientListByDataBoxEdgeDeviceResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// AvailableSKUsClientListPager provides operations for iterating over paged responses.
type AvailableSKUsClientListPager struct {
	client    *AvailableSKUsClient
	current   AvailableSKUsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AvailableSKUsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AvailableSKUsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SKUList.NextLink == nil || len(*p.current.SKUList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AvailableSKUsClientListPager) NextPage(ctx context.Context) (AvailableSKUsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AvailableSKUsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AvailableSKUsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AvailableSKUsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AvailableSKUsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return AvailableSKUsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// BandwidthSchedulesClientListByDataBoxEdgeDevicePager provides operations for iterating over paged responses.
type BandwidthSchedulesClientListByDataBoxEdgeDevicePager struct {
	client    *BandwidthSchedulesClient
	current   BandwidthSchedulesClientListByDataBoxEdgeDeviceResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BandwidthSchedulesClientListByDataBoxEdgeDeviceResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *BandwidthSchedulesClientListByDataBoxEdgeDevicePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BandwidthSchedulesList.NextLink == nil || len(*p.current.BandwidthSchedulesList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *BandwidthSchedulesClientListByDataBoxEdgeDevicePager) NextPage(ctx context.Context) (BandwidthSchedulesClientListByDataBoxEdgeDeviceResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return BandwidthSchedulesClientListByDataBoxEdgeDeviceResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return BandwidthSchedulesClientListByDataBoxEdgeDeviceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return BandwidthSchedulesClientListByDataBoxEdgeDeviceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return BandwidthSchedulesClientListByDataBoxEdgeDeviceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByDataBoxEdgeDeviceHandleResponse(resp)
	if err != nil {
		return BandwidthSchedulesClientListByDataBoxEdgeDeviceResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ContainersClientListByStorageAccountPager provides operations for iterating over paged responses.
type ContainersClientListByStorageAccountPager struct {
	client    *ContainersClient
	current   ContainersClientListByStorageAccountResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ContainersClientListByStorageAccountResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ContainersClientListByStorageAccountPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ContainerList.NextLink == nil || len(*p.current.ContainerList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ContainersClientListByStorageAccountPager) NextPage(ctx context.Context) (ContainersClientListByStorageAccountResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ContainersClientListByStorageAccountResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ContainersClientListByStorageAccountResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ContainersClientListByStorageAccountResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ContainersClientListByStorageAccountResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByStorageAccountHandleResponse(resp)
	if err != nil {
		return ContainersClientListByStorageAccountResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// DevicesClientListByResourceGroupPager provides operations for iterating over paged responses.
type DevicesClientListByResourceGroupPager struct {
	client    *DevicesClient
	current   DevicesClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DevicesClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DevicesClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeviceList.NextLink == nil || len(*p.current.DeviceList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *DevicesClientListByResourceGroupPager) NextPage(ctx context.Context) (DevicesClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return DevicesClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DevicesClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DevicesClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DevicesClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return DevicesClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// DevicesClientListBySubscriptionPager provides operations for iterating over paged responses.
type DevicesClientListBySubscriptionPager struct {
	client    *DevicesClient
	current   DevicesClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DevicesClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DevicesClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeviceList.NextLink == nil || len(*p.current.DeviceList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *DevicesClientListBySubscriptionPager) NextPage(ctx context.Context) (DevicesClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return DevicesClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DevicesClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DevicesClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DevicesClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return DevicesClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// MonitoringConfigClientListPager provides operations for iterating over paged responses.
type MonitoringConfigClientListPager struct {
	client    *MonitoringConfigClient
	current   MonitoringConfigClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitoringConfigClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *MonitoringConfigClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MonitoringMetricConfigurationList.NextLink == nil || len(*p.current.MonitoringMetricConfigurationList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *MonitoringConfigClientListPager) NextPage(ctx context.Context) (MonitoringConfigClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return MonitoringConfigClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return MonitoringConfigClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return MonitoringConfigClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return MonitoringConfigClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return MonitoringConfigClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// NodesClientListByDataBoxEdgeDevicePager provides operations for iterating over paged responses.
type NodesClientListByDataBoxEdgeDevicePager struct {
	client    *NodesClient
	current   NodesClientListByDataBoxEdgeDeviceResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, NodesClientListByDataBoxEdgeDeviceResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *NodesClientListByDataBoxEdgeDevicePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NodeList.NextLink == nil || len(*p.current.NodeList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *NodesClientListByDataBoxEdgeDevicePager) NextPage(ctx context.Context) (NodesClientListByDataBoxEdgeDeviceResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return NodesClientListByDataBoxEdgeDeviceResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return NodesClientListByDataBoxEdgeDeviceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return NodesClientListByDataBoxEdgeDeviceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return NodesClientListByDataBoxEdgeDeviceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByDataBoxEdgeDeviceHandleResponse(resp)
	if err != nil {
		return NodesClientListByDataBoxEdgeDeviceResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationsList.NextLink == nil || len(*p.current.OperationsList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OrdersClientListByDataBoxEdgeDevicePager provides operations for iterating over paged responses.
type OrdersClientListByDataBoxEdgeDevicePager struct {
	client    *OrdersClient
	current   OrdersClientListByDataBoxEdgeDeviceResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OrdersClientListByDataBoxEdgeDeviceResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OrdersClientListByDataBoxEdgeDevicePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OrderList.NextLink == nil || len(*p.current.OrderList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OrdersClientListByDataBoxEdgeDevicePager) NextPage(ctx context.Context) (OrdersClientListByDataBoxEdgeDeviceResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OrdersClientListByDataBoxEdgeDeviceResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OrdersClientListByDataBoxEdgeDeviceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OrdersClientListByDataBoxEdgeDeviceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OrdersClientListByDataBoxEdgeDeviceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByDataBoxEdgeDeviceHandleResponse(resp)
	if err != nil {
		return OrdersClientListByDataBoxEdgeDeviceResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// RolesClientListByDataBoxEdgeDevicePager provides operations for iterating over paged responses.
type RolesClientListByDataBoxEdgeDevicePager struct {
	client    *RolesClient
	current   RolesClientListByDataBoxEdgeDeviceResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RolesClientListByDataBoxEdgeDeviceResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *RolesClientListByDataBoxEdgeDevicePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RoleList.NextLink == nil || len(*p.current.RoleList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *RolesClientListByDataBoxEdgeDevicePager) NextPage(ctx context.Context) (RolesClientListByDataBoxEdgeDeviceResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return RolesClientListByDataBoxEdgeDeviceResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return RolesClientListByDataBoxEdgeDeviceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return RolesClientListByDataBoxEdgeDeviceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return RolesClientListByDataBoxEdgeDeviceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByDataBoxEdgeDeviceHandleResponse(resp)
	if err != nil {
		return RolesClientListByDataBoxEdgeDeviceResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SharesClientListByDataBoxEdgeDevicePager provides operations for iterating over paged responses.
type SharesClientListByDataBoxEdgeDevicePager struct {
	client    *SharesClient
	current   SharesClientListByDataBoxEdgeDeviceResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SharesClientListByDataBoxEdgeDeviceResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SharesClientListByDataBoxEdgeDevicePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ShareList.NextLink == nil || len(*p.current.ShareList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *SharesClientListByDataBoxEdgeDevicePager) NextPage(ctx context.Context) (SharesClientListByDataBoxEdgeDeviceResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return SharesClientListByDataBoxEdgeDeviceResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SharesClientListByDataBoxEdgeDeviceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SharesClientListByDataBoxEdgeDeviceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SharesClientListByDataBoxEdgeDeviceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByDataBoxEdgeDeviceHandleResponse(resp)
	if err != nil {
		return SharesClientListByDataBoxEdgeDeviceResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// StorageAccountCredentialsClientListByDataBoxEdgeDevicePager provides operations for iterating over paged responses.
type StorageAccountCredentialsClientListByDataBoxEdgeDevicePager struct {
	client    *StorageAccountCredentialsClient
	current   StorageAccountCredentialsClientListByDataBoxEdgeDeviceResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, StorageAccountCredentialsClientListByDataBoxEdgeDeviceResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *StorageAccountCredentialsClientListByDataBoxEdgeDevicePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StorageAccountCredentialList.NextLink == nil || len(*p.current.StorageAccountCredentialList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *StorageAccountCredentialsClientListByDataBoxEdgeDevicePager) NextPage(ctx context.Context) (StorageAccountCredentialsClientListByDataBoxEdgeDeviceResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return StorageAccountCredentialsClientListByDataBoxEdgeDeviceResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return StorageAccountCredentialsClientListByDataBoxEdgeDeviceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return StorageAccountCredentialsClientListByDataBoxEdgeDeviceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return StorageAccountCredentialsClientListByDataBoxEdgeDeviceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByDataBoxEdgeDeviceHandleResponse(resp)
	if err != nil {
		return StorageAccountCredentialsClientListByDataBoxEdgeDeviceResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// StorageAccountsClientListByDataBoxEdgeDevicePager provides operations for iterating over paged responses.
type StorageAccountsClientListByDataBoxEdgeDevicePager struct {
	client    *StorageAccountsClient
	current   StorageAccountsClientListByDataBoxEdgeDeviceResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, StorageAccountsClientListByDataBoxEdgeDeviceResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *StorageAccountsClientListByDataBoxEdgeDevicePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StorageAccountList.NextLink == nil || len(*p.current.StorageAccountList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *StorageAccountsClientListByDataBoxEdgeDevicePager) NextPage(ctx context.Context) (StorageAccountsClientListByDataBoxEdgeDeviceResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return StorageAccountsClientListByDataBoxEdgeDeviceResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return StorageAccountsClientListByDataBoxEdgeDeviceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return StorageAccountsClientListByDataBoxEdgeDeviceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return StorageAccountsClientListByDataBoxEdgeDeviceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByDataBoxEdgeDeviceHandleResponse(resp)
	if err != nil {
		return StorageAccountsClientListByDataBoxEdgeDeviceResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// TriggersClientListByDataBoxEdgeDevicePager provides operations for iterating over paged responses.
type TriggersClientListByDataBoxEdgeDevicePager struct {
	client    *TriggersClient
	current   TriggersClientListByDataBoxEdgeDeviceResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TriggersClientListByDataBoxEdgeDeviceResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *TriggersClientListByDataBoxEdgeDevicePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TriggerList.NextLink == nil || len(*p.current.TriggerList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *TriggersClientListByDataBoxEdgeDevicePager) NextPage(ctx context.Context) (TriggersClientListByDataBoxEdgeDeviceResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return TriggersClientListByDataBoxEdgeDeviceResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return TriggersClientListByDataBoxEdgeDeviceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return TriggersClientListByDataBoxEdgeDeviceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return TriggersClientListByDataBoxEdgeDeviceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByDataBoxEdgeDeviceHandleResponse(resp)
	if err != nil {
		return TriggersClientListByDataBoxEdgeDeviceResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// UsersClientListByDataBoxEdgeDevicePager provides operations for iterating over paged responses.
type UsersClientListByDataBoxEdgeDevicePager struct {
	client    *UsersClient
	current   UsersClientListByDataBoxEdgeDeviceResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, UsersClientListByDataBoxEdgeDeviceResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *UsersClientListByDataBoxEdgeDevicePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.UserList.NextLink == nil || len(*p.current.UserList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *UsersClientListByDataBoxEdgeDevicePager) NextPage(ctx context.Context) (UsersClientListByDataBoxEdgeDeviceResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return UsersClientListByDataBoxEdgeDeviceResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return UsersClientListByDataBoxEdgeDeviceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return UsersClientListByDataBoxEdgeDeviceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return UsersClientListByDataBoxEdgeDeviceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByDataBoxEdgeDeviceHandleResponse(resp)
	if err != nil {
		return UsersClientListByDataBoxEdgeDeviceResponse{}, err
	}
	p.current = result
	return p.current, nil
}
