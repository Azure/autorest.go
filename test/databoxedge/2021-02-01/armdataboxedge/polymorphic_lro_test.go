//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdataboxedge

import (
	"encoding/json"
	"testing"
)

const lroResp = `
{
  "properties": {
    "subscriptionId": "4385cf00-2d3a-425a-832f-f4285b1c9dce",
    "resourceGroupName": "GroupForEdgeAutomation",
    "resourceName": "testedgedevice",
    "resourceLocation": "EastUS",
    "version": "0.2.18",
    "hostPlatform": "Linux",
    "hostPlatformType": "KubernetesCluster",
    "provisioningState": "Created"
  },
  "kind": "ArcForKubernetes",
  "id": "/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourcegroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/addonExamples/roles/kubernetesRole/addons/arcName",
  "name": "arcName",
  "type": "Microsoft.DataBoxEdge/dataBoxEdgeDevices/roles/addons"
}
`

func TestPolymorphicLROResult(t *testing.T) {
	// needs to be kept in sync with AddonsCreateOrUpdatePollerResponse.PollUntilDone
	// TODO: having a recording would be a better way to test this end-to-end
	respType := AddonsClientCreateOrUpdateResponse{}
	err := json.Unmarshal([]byte(lroResp), &respType.AddonsClientCreateOrUpdateResult)
	if err != nil {
		t.Fatal(err)
	}
	arc, ok := respType.AddonClassification.(*ArcAddon)
	if !ok {
		t.Fatalf("unexpected type %T", respType.AddonClassification)
	}
	if hp := *arc.Properties.HostPlatform; hp != PlatformTypeLinux {
		t.Fatalf("unexpected host platform %s", hp)
	}
}
