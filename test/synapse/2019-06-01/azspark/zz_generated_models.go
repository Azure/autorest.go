//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package azspark

import "time"

// BatchClientCancelSparkBatchJobOptions contains the optional parameters for the batchClient.CancelSparkBatchJob method.
type BatchClientCancelSparkBatchJobOptions struct {
	// placeholder for future optional parameters
}

// BatchClientCreateSparkBatchJobOptions contains the optional parameters for the batchClient.CreateSparkBatchJob method.
type BatchClientCreateSparkBatchJobOptions struct {
	// Optional query param specifying whether detailed response is returned beyond plain livy.
	Detailed *bool
}

// BatchClientGetSparkBatchJobOptions contains the optional parameters for the batchClient.GetSparkBatchJob method.
type BatchClientGetSparkBatchJobOptions struct {
	// Optional query param specifying whether detailed response is returned beyond plain livy.
	Detailed *bool
}

// BatchClientGetSparkBatchJobsOptions contains the optional parameters for the batchClient.GetSparkBatchJobs method.
type BatchClientGetSparkBatchJobsOptions struct {
	// Optional query param specifying whether detailed response is returned beyond plain livy.
	Detailed *bool
	// Optional param specifying which index the list should begin from.
	From *int32
	// Optional param specifying the size of the returned list. By default it is 20 and that is the maximum.
	Size *int32
}

type BatchJob struct {
	// REQUIRED; The session Id.
	ID *int32 `json:"id,omitempty"`

	// The application id of this session
	AppID *string `json:"appId,omitempty"`

	// The detailed application info.
	AppInfo map[string]*string `json:"appInfo,omitempty"`

	// The artifact identifier.
	ArtifactID *string `json:"artifactId,omitempty"`

	// The error information.
	Errors []*ServiceError `json:"errorInfo,omitempty"`

	// The job type.
	JobType  *SparkJobType  `json:"jobType,omitempty"`
	LivyInfo *BatchJobState `json:"livyInfo,omitempty"`

	// The log lines.
	LogLines []*string `json:"log,omitempty"`

	// The batch name.
	Name *string `json:"name,omitempty"`

	// The plugin information.
	Plugin *ServicePlugin `json:"pluginInfo,omitempty"`

	// The Spark batch job result.
	Result *SparkBatchJobResultType `json:"result,omitempty"`

	// The scheduler information.
	Scheduler *Scheduler `json:"schedulerInfo,omitempty"`

	// The Spark pool name.
	SparkPoolName *string `json:"sparkPoolName,omitempty"`

	// The batch state
	State *string `json:"state,omitempty"`

	// The submitter identifier.
	SubmitterID *string `json:"submitterId,omitempty"`

	// The submitter name.
	SubmitterName *string `json:"submitterName,omitempty"`

	// The tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// The workspace name.
	WorkspaceName *string `json:"workspaceName,omitempty"`
}

// BatchJobCollection - Response for batch list operation.
type BatchJobCollection struct {
	// REQUIRED; The start index of fetched sessions.
	From *int32 `json:"from,omitempty"`

	// REQUIRED; Number of sessions fetched.
	Total *int32 `json:"total,omitempty"`

	// Batch list
	Sessions []*BatchJob `json:"sessions,omitempty"`
}

type BatchJobOptions struct {
	// REQUIRED
	File *string `json:"file,omitempty"`

	// REQUIRED
	Name       *string   `json:"name,omitempty"`
	Archives   []*string `json:"archives,omitempty"`
	Arguments  []*string `json:"args,omitempty"`
	ArtifactID *string   `json:"artifactId,omitempty"`
	ClassName  *string   `json:"className,omitempty"`

	// Dictionary of
	Configuration  map[string]*string `json:"conf,omitempty"`
	DriverCores    *int32             `json:"driverCores,omitempty"`
	DriverMemory   *string            `json:"driverMemory,omitempty"`
	ExecutorCores  *int32             `json:"executorCores,omitempty"`
	ExecutorCount  *int32             `json:"numExecutors,omitempty"`
	ExecutorMemory *string            `json:"executorMemory,omitempty"`
	Files          []*string          `json:"files,omitempty"`
	Jars           []*string          `json:"jars,omitempty"`
	PythonFiles    []*string          `json:"pyFiles,omitempty"`

	// Dictionary of
	Tags map[string]*string `json:"tags,omitempty"`
}

type BatchJobState struct {
	// the Spark job state.
	CurrentState *string `json:"currentState,omitempty"`

	// time that at which "dead" livy state was first seen.
	DeadAt             *time.Time `json:"deadAt,omitempty"`
	JobCreationRequest *Request   `json:"jobCreationRequest,omitempty"`

	// the time that at which "not_started" livy state was first seen.
	NotStartedAt *time.Time `json:"notStartedAt,omitempty"`

	// the time that at which "recovering" livy state was first seen.
	RecoveringAt *time.Time `json:"recoveringAt,omitempty"`

	// the time that at which "running" livy state was first seen.
	RunningAt *time.Time `json:"runningAt,omitempty"`

	// the time that at which "starting" livy state was first seen.
	StartingAt *time.Time `json:"startingAt,omitempty"`

	// the time that at which "success" livy state was first seen.
	SuccessAt *time.Time `json:"successAt,omitempty"`

	// the time that at which "killed" livy state was first seen.
	TerminatedAt *time.Time `json:"killedAt,omitempty"`
}

type Request struct {
	Archives  []*string `json:"archives,omitempty"`
	Arguments []*string `json:"args,omitempty"`
	ClassName *string   `json:"className,omitempty"`

	// Dictionary of
	Configuration  map[string]*string `json:"conf,omitempty"`
	DriverCores    *int32             `json:"driverCores,omitempty"`
	DriverMemory   *string            `json:"driverMemory,omitempty"`
	ExecutorCores  *int32             `json:"executorCores,omitempty"`
	ExecutorCount  *int32             `json:"numExecutors,omitempty"`
	ExecutorMemory *string            `json:"executorMemory,omitempty"`
	File           *string            `json:"file,omitempty"`
	Files          []*string          `json:"files,omitempty"`
	Jars           []*string          `json:"jars,omitempty"`
	Name           *string            `json:"name,omitempty"`
	PythonFiles    []*string          `json:"pyFiles,omitempty"`
}

type Scheduler struct {
	CancellationRequestedAt *time.Time             `json:"cancellationRequestedAt,omitempty"`
	CurrentState            *SchedulerCurrentState `json:"currentState,omitempty"`
	EndedAt                 *time.Time             `json:"endedAt,omitempty"`
	ScheduledAt             *time.Time             `json:"scheduledAt,omitempty"`
	SubmittedAt             *time.Time             `json:"submittedAt,omitempty"`
}

type ServiceError struct {
	ErrorCode *string           `json:"errorCode,omitempty"`
	Message   *string           `json:"message,omitempty"`
	Source    *SparkErrorSource `json:"source,omitempty"`
}

type ServicePlugin struct {
	CleanupStartedAt             *time.Time          `json:"cleanupStartedAt,omitempty"`
	CurrentState                 *PluginCurrentState `json:"currentState,omitempty"`
	MonitoringStartedAt          *time.Time          `json:"monitoringStartedAt,omitempty"`
	PreparationStartedAt         *time.Time          `json:"preparationStartedAt,omitempty"`
	ResourceAcquisitionStartedAt *time.Time          `json:"resourceAcquisitionStartedAt,omitempty"`
	SubmissionStartedAt          *time.Time          `json:"submissionStartedAt,omitempty"`
}

type Session struct {
	// REQUIRED
	ID    *int32  `json:"id,omitempty"`
	AppID *string `json:"appId,omitempty"`

	// Dictionary of
	AppInfo    map[string]*string `json:"appInfo,omitempty"`
	ArtifactID *string            `json:"artifactId,omitempty"`

	// The error information.
	Errors []*ServiceError `json:"errorInfo,omitempty"`

	// The job type.
	JobType       *SparkJobType           `json:"jobType,omitempty"`
	LivyInfo      *SessionState           `json:"livyInfo,omitempty"`
	LogLines      []*string               `json:"log,omitempty"`
	Name          *string                 `json:"name,omitempty"`
	Plugin        *ServicePlugin          `json:"pluginInfo,omitempty"`
	Result        *SparkSessionResultType `json:"result,omitempty"`
	Scheduler     *Scheduler              `json:"schedulerInfo,omitempty"`
	SparkPoolName *string                 `json:"sparkPoolName,omitempty"`
	State         *string                 `json:"state,omitempty"`
	SubmitterID   *string                 `json:"submitterId,omitempty"`
	SubmitterName *string                 `json:"submitterName,omitempty"`

	// Dictionary of
	Tags          map[string]*string `json:"tags,omitempty"`
	WorkspaceName *string            `json:"workspaceName,omitempty"`
}

// SessionClientCancelSparkSessionOptions contains the optional parameters for the sessionClient.CancelSparkSession method.
type SessionClientCancelSparkSessionOptions struct {
	// placeholder for future optional parameters
}

// SessionClientCancelSparkStatementOptions contains the optional parameters for the sessionClient.CancelSparkStatement method.
type SessionClientCancelSparkStatementOptions struct {
	// placeholder for future optional parameters
}

// SessionClientCreateSparkSessionOptions contains the optional parameters for the sessionClient.CreateSparkSession method.
type SessionClientCreateSparkSessionOptions struct {
	// Optional query param specifying whether detailed response is returned beyond plain livy.
	Detailed *bool
}

// SessionClientCreateSparkStatementOptions contains the optional parameters for the sessionClient.CreateSparkStatement method.
type SessionClientCreateSparkStatementOptions struct {
	// placeholder for future optional parameters
}

// SessionClientGetSparkSessionOptions contains the optional parameters for the sessionClient.GetSparkSession method.
type SessionClientGetSparkSessionOptions struct {
	// Optional query param specifying whether detailed response is returned beyond plain livy.
	Detailed *bool
}

// SessionClientGetSparkSessionsOptions contains the optional parameters for the sessionClient.GetSparkSessions method.
type SessionClientGetSparkSessionsOptions struct {
	// Optional query param specifying whether detailed response is returned beyond plain livy.
	Detailed *bool
	// Optional param specifying which index the list should begin from.
	From *int32
	// Optional param specifying the size of the returned list. By default it is 20 and that is the maximum.
	Size *int32
}

// SessionClientGetSparkStatementOptions contains the optional parameters for the sessionClient.GetSparkStatement method.
type SessionClientGetSparkStatementOptions struct {
	// placeholder for future optional parameters
}

// SessionClientGetSparkStatementsOptions contains the optional parameters for the sessionClient.GetSparkStatements method.
type SessionClientGetSparkStatementsOptions struct {
	// placeholder for future optional parameters
}

// SessionClientResetSparkSessionTimeoutOptions contains the optional parameters for the sessionClient.ResetSparkSessionTimeout
// method.
type SessionClientResetSparkSessionTimeoutOptions struct {
	// placeholder for future optional parameters
}

type SessionCollection struct {
	// REQUIRED
	From *int32 `json:"from,omitempty"`

	// REQUIRED
	Total    *int32     `json:"total,omitempty"`
	Sessions []*Session `json:"sessions,omitempty"`
}

type SessionOptions struct {
	// REQUIRED
	Name       *string   `json:"name,omitempty"`
	Archives   []*string `json:"archives,omitempty"`
	Arguments  []*string `json:"args,omitempty"`
	ArtifactID *string   `json:"artifactId,omitempty"`
	ClassName  *string   `json:"className,omitempty"`

	// Dictionary of
	Configuration  map[string]*string `json:"conf,omitempty"`
	DriverCores    *int32             `json:"driverCores,omitempty"`
	DriverMemory   *string            `json:"driverMemory,omitempty"`
	ExecutorCores  *int32             `json:"executorCores,omitempty"`
	ExecutorCount  *int32             `json:"numExecutors,omitempty"`
	ExecutorMemory *string            `json:"executorMemory,omitempty"`
	File           *string            `json:"file,omitempty"`
	Files          []*string          `json:"files,omitempty"`
	Jars           []*string          `json:"jars,omitempty"`
	PythonFiles    []*string          `json:"pyFiles,omitempty"`

	// Dictionary of
	Tags map[string]*string `json:"tags,omitempty"`
}

type SessionState struct {
	BusyAt             *time.Time `json:"busyAt,omitempty"`
	CurrentState       *string    `json:"currentState,omitempty"`
	DeadAt             *time.Time `json:"deadAt,omitempty"`
	ErrorAt            *time.Time `json:"errorAt,omitempty"`
	IdleAt             *time.Time `json:"idleAt,omitempty"`
	JobCreationRequest *Request   `json:"jobCreationRequest,omitempty"`
	NotStartedAt       *time.Time `json:"notStartedAt,omitempty"`
	RecoveringAt       *time.Time `json:"recoveringAt,omitempty"`
	ShuttingDownAt     *time.Time `json:"shuttingDownAt,omitempty"`
	StartingAt         *time.Time `json:"startingAt,omitempty"`
	TerminatedAt       *time.Time `json:"killedAt,omitempty"`
}

type Statement struct {
	// REQUIRED
	ID     *int32           `json:"id,omitempty"`
	Code   *string          `json:"code,omitempty"`
	Output *StatementOutput `json:"output,omitempty"`
	State  *string          `json:"state,omitempty"`
}

type StatementCancellationResult struct {
	// The msg property from the Livy API. The value is always "canceled".
	Message *string `json:"msg,omitempty"`
}

type StatementCollection struct {
	// REQUIRED
	Total      *int32       `json:"total_statements,omitempty"`
	Statements []*Statement `json:"statements,omitempty"`
}

type StatementOptions struct {
	Code *string                     `json:"code,omitempty"`
	Kind *SparkStatementLanguageType `json:"kind,omitempty"`
}

type StatementOutput struct {
	// REQUIRED
	ExecutionCount *int32 `json:"execution_count,omitempty"`

	// Anything
	Data       any       `json:"data,omitempty"`
	ErrorName  *string   `json:"ename,omitempty"`
	ErrorValue *string   `json:"evalue,omitempty"`
	Status     *string   `json:"status,omitempty"`
	Traceback  []*string `json:"traceback,omitempty"`
}
