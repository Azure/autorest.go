// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azspark

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"io/ioutil"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// SparkSessionOperations contains the methods for the SparkSession group.
type SparkSessionOperations interface {
	// CancelSparkSession - Cancels a running spark session.
	CancelSparkSession(ctx context.Context, sessionId int32) (*http.Response, error)
	// CancelSparkStatement - Kill a statement within a session.
	CancelSparkStatement(ctx context.Context, sessionId int32, statementId int32) (*SparkStatementCancellationResultResponse, error)
	// CreateSparkSession - Create new spark session.
	CreateSparkSession(ctx context.Context, sparkSessionOptions SparkSessionOptions, sparkSessionCreateSparkSessionOptions *SparkSessionCreateSparkSessionOptions) (*SparkSessionResponse, error)
	// CreateSparkStatement - Create statement within a spark session.
	CreateSparkStatement(ctx context.Context, sessionId int32, sparkStatementOptions SparkStatementOptions) (*SparkStatementResponse, error)
	// GetSparkSession - Gets a single spark session.
	GetSparkSession(ctx context.Context, sessionId int32, sparkSessionGetSparkSessionOptions *SparkSessionGetSparkSessionOptions) (*SparkSessionResponse, error)
	// GetSparkSessions - List all spark sessions which are running under a particular spark pool.
	GetSparkSessions(ctx context.Context, sparkSessionGetSparkSessionsOptions *SparkSessionGetSparkSessionsOptions) (*SparkSessionCollectionResponse, error)
	// GetSparkStatement - Gets a single statement within a spark session.
	GetSparkStatement(ctx context.Context, sessionId int32, statementId int32) (*SparkStatementResponse, error)
	// GetSparkStatements - Gets a list of statements within a spark session.
	GetSparkStatements(ctx context.Context, sessionId int32) (*SparkStatementCollectionResponse, error)
	// ResetSparkSessionTimeout - Sends a keep alive call to the current session to reset the session timeout.
	ResetSparkSessionTimeout(ctx context.Context, sessionId int32) (*http.Response, error)
}

// SparkSessionClient implements the SparkSessionOperations interface.
// Don't use this type directly, use NewSparkSessionClient() instead.
type SparkSessionClient struct {
	*Client
}

// NewSparkSessionClient creates a new instance of SparkSessionClient with the specified values.
func NewSparkSessionClient(c *Client) SparkSessionOperations {
	return &SparkSessionClient{Client: c}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *SparkSessionClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// CancelSparkSession - Cancels a running spark session.
func (client *SparkSessionClient) CancelSparkSession(ctx context.Context, sessionId int32) (*http.Response, error) {
	req, err := client.CancelSparkSessionCreateRequest(ctx, sessionId)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.CancelSparkSessionHandleError(resp)
	}
	return resp.Response, nil
}

// CancelSparkSessionCreateRequest creates the CancelSparkSession request.
func (client *SparkSessionClient) CancelSparkSessionCreateRequest(ctx context.Context, sessionId int32) (*azcore.Request, error) {
	urlPath := "/sessions/{sessionId}"
	urlPath = strings.ReplaceAll(urlPath, "{sessionId}", url.PathEscape(strconv.FormatInt(int64(sessionId), 10)))
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// CancelSparkSessionHandleError handles the CancelSparkSession error response.
func (client *SparkSessionClient) CancelSparkSessionHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// CancelSparkStatement - Kill a statement within a session.
func (client *SparkSessionClient) CancelSparkStatement(ctx context.Context, sessionId int32, statementId int32) (*SparkStatementCancellationResultResponse, error) {
	req, err := client.CancelSparkStatementCreateRequest(ctx, sessionId, statementId)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.CancelSparkStatementHandleError(resp)
	}
	result, err := client.CancelSparkStatementHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// CancelSparkStatementCreateRequest creates the CancelSparkStatement request.
func (client *SparkSessionClient) CancelSparkStatementCreateRequest(ctx context.Context, sessionId int32, statementId int32) (*azcore.Request, error) {
	urlPath := "/sessions/{sessionId}/statements/{statementId}/cancel"
	urlPath = strings.ReplaceAll(urlPath, "{sessionId}", url.PathEscape(strconv.FormatInt(int64(sessionId), 10)))
	urlPath = strings.ReplaceAll(urlPath, "{statementId}", url.PathEscape(strconv.FormatInt(int64(statementId), 10)))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// CancelSparkStatementHandleResponse handles the CancelSparkStatement response.
func (client *SparkSessionClient) CancelSparkStatementHandleResponse(resp *azcore.Response) (*SparkStatementCancellationResultResponse, error) {
	result := SparkStatementCancellationResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.SparkStatementCancellationResult)
}

// CancelSparkStatementHandleError handles the CancelSparkStatement error response.
func (client *SparkSessionClient) CancelSparkStatementHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// CreateSparkSession - Create new spark session.
func (client *SparkSessionClient) CreateSparkSession(ctx context.Context, sparkSessionOptions SparkSessionOptions, sparkSessionCreateSparkSessionOptions *SparkSessionCreateSparkSessionOptions) (*SparkSessionResponse, error) {
	req, err := client.CreateSparkSessionCreateRequest(ctx, sparkSessionOptions, sparkSessionCreateSparkSessionOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.CreateSparkSessionHandleError(resp)
	}
	result, err := client.CreateSparkSessionHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// CreateSparkSessionCreateRequest creates the CreateSparkSession request.
func (client *SparkSessionClient) CreateSparkSessionCreateRequest(ctx context.Context, sparkSessionOptions SparkSessionOptions, sparkSessionCreateSparkSessionOptions *SparkSessionCreateSparkSessionOptions) (*azcore.Request, error) {
	urlPath := "/sessions"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	if sparkSessionCreateSparkSessionOptions != nil && sparkSessionCreateSparkSessionOptions.Detailed != nil {
		query.Set("detailed", strconv.FormatBool(*sparkSessionCreateSparkSessionOptions.Detailed))
	}
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(sparkSessionOptions)
}

// CreateSparkSessionHandleResponse handles the CreateSparkSession response.
func (client *SparkSessionClient) CreateSparkSessionHandleResponse(resp *azcore.Response) (*SparkSessionResponse, error) {
	result := SparkSessionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.SparkSession)
}

// CreateSparkSessionHandleError handles the CreateSparkSession error response.
func (client *SparkSessionClient) CreateSparkSessionHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// CreateSparkStatement - Create statement within a spark session.
func (client *SparkSessionClient) CreateSparkStatement(ctx context.Context, sessionId int32, sparkStatementOptions SparkStatementOptions) (*SparkStatementResponse, error) {
	req, err := client.CreateSparkStatementCreateRequest(ctx, sessionId, sparkStatementOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.CreateSparkStatementHandleError(resp)
	}
	result, err := client.CreateSparkStatementHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// CreateSparkStatementCreateRequest creates the CreateSparkStatement request.
func (client *SparkSessionClient) CreateSparkStatementCreateRequest(ctx context.Context, sessionId int32, sparkStatementOptions SparkStatementOptions) (*azcore.Request, error) {
	urlPath := "/sessions/{sessionId}/statements"
	urlPath = strings.ReplaceAll(urlPath, "{sessionId}", url.PathEscape(strconv.FormatInt(int64(sessionId), 10)))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(sparkStatementOptions)
}

// CreateSparkStatementHandleResponse handles the CreateSparkStatement response.
func (client *SparkSessionClient) CreateSparkStatementHandleResponse(resp *azcore.Response) (*SparkStatementResponse, error) {
	result := SparkStatementResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.SparkStatement)
}

// CreateSparkStatementHandleError handles the CreateSparkStatement error response.
func (client *SparkSessionClient) CreateSparkStatementHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// GetSparkSession - Gets a single spark session.
func (client *SparkSessionClient) GetSparkSession(ctx context.Context, sessionId int32, sparkSessionGetSparkSessionOptions *SparkSessionGetSparkSessionOptions) (*SparkSessionResponse, error) {
	req, err := client.GetSparkSessionCreateRequest(ctx, sessionId, sparkSessionGetSparkSessionOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetSparkSessionHandleError(resp)
	}
	result, err := client.GetSparkSessionHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetSparkSessionCreateRequest creates the GetSparkSession request.
func (client *SparkSessionClient) GetSparkSessionCreateRequest(ctx context.Context, sessionId int32, sparkSessionGetSparkSessionOptions *SparkSessionGetSparkSessionOptions) (*azcore.Request, error) {
	urlPath := "/sessions/{sessionId}"
	urlPath = strings.ReplaceAll(urlPath, "{sessionId}", url.PathEscape(strconv.FormatInt(int64(sessionId), 10)))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	if sparkSessionGetSparkSessionOptions != nil && sparkSessionGetSparkSessionOptions.Detailed != nil {
		query.Set("detailed", strconv.FormatBool(*sparkSessionGetSparkSessionOptions.Detailed))
	}
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetSparkSessionHandleResponse handles the GetSparkSession response.
func (client *SparkSessionClient) GetSparkSessionHandleResponse(resp *azcore.Response) (*SparkSessionResponse, error) {
	result := SparkSessionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.SparkSession)
}

// GetSparkSessionHandleError handles the GetSparkSession error response.
func (client *SparkSessionClient) GetSparkSessionHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// GetSparkSessions - List all spark sessions which are running under a particular spark pool.
func (client *SparkSessionClient) GetSparkSessions(ctx context.Context, sparkSessionGetSparkSessionsOptions *SparkSessionGetSparkSessionsOptions) (*SparkSessionCollectionResponse, error) {
	req, err := client.GetSparkSessionsCreateRequest(ctx, sparkSessionGetSparkSessionsOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetSparkSessionsHandleError(resp)
	}
	result, err := client.GetSparkSessionsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetSparkSessionsCreateRequest creates the GetSparkSessions request.
func (client *SparkSessionClient) GetSparkSessionsCreateRequest(ctx context.Context, sparkSessionGetSparkSessionsOptions *SparkSessionGetSparkSessionsOptions) (*azcore.Request, error) {
	urlPath := "/sessions"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	if sparkSessionGetSparkSessionsOptions != nil && sparkSessionGetSparkSessionsOptions.From != nil {
		query.Set("from", strconv.FormatInt(int64(*sparkSessionGetSparkSessionsOptions.From), 10))
	}
	if sparkSessionGetSparkSessionsOptions != nil && sparkSessionGetSparkSessionsOptions.Size != nil {
		query.Set("size", strconv.FormatInt(int64(*sparkSessionGetSparkSessionsOptions.Size), 10))
	}
	if sparkSessionGetSparkSessionsOptions != nil && sparkSessionGetSparkSessionsOptions.Detailed != nil {
		query.Set("detailed", strconv.FormatBool(*sparkSessionGetSparkSessionsOptions.Detailed))
	}
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetSparkSessionsHandleResponse handles the GetSparkSessions response.
func (client *SparkSessionClient) GetSparkSessionsHandleResponse(resp *azcore.Response) (*SparkSessionCollectionResponse, error) {
	result := SparkSessionCollectionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.SparkSessionCollection)
}

// GetSparkSessionsHandleError handles the GetSparkSessions error response.
func (client *SparkSessionClient) GetSparkSessionsHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// GetSparkStatement - Gets a single statement within a spark session.
func (client *SparkSessionClient) GetSparkStatement(ctx context.Context, sessionId int32, statementId int32) (*SparkStatementResponse, error) {
	req, err := client.GetSparkStatementCreateRequest(ctx, sessionId, statementId)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetSparkStatementHandleError(resp)
	}
	result, err := client.GetSparkStatementHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetSparkStatementCreateRequest creates the GetSparkStatement request.
func (client *SparkSessionClient) GetSparkStatementCreateRequest(ctx context.Context, sessionId int32, statementId int32) (*azcore.Request, error) {
	urlPath := "/sessions/{sessionId}/statements/{statementId}"
	urlPath = strings.ReplaceAll(urlPath, "{sessionId}", url.PathEscape(strconv.FormatInt(int64(sessionId), 10)))
	urlPath = strings.ReplaceAll(urlPath, "{statementId}", url.PathEscape(strconv.FormatInt(int64(statementId), 10)))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetSparkStatementHandleResponse handles the GetSparkStatement response.
func (client *SparkSessionClient) GetSparkStatementHandleResponse(resp *azcore.Response) (*SparkStatementResponse, error) {
	result := SparkStatementResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.SparkStatement)
}

// GetSparkStatementHandleError handles the GetSparkStatement error response.
func (client *SparkSessionClient) GetSparkStatementHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// GetSparkStatements - Gets a list of statements within a spark session.
func (client *SparkSessionClient) GetSparkStatements(ctx context.Context, sessionId int32) (*SparkStatementCollectionResponse, error) {
	req, err := client.GetSparkStatementsCreateRequest(ctx, sessionId)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetSparkStatementsHandleError(resp)
	}
	result, err := client.GetSparkStatementsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetSparkStatementsCreateRequest creates the GetSparkStatements request.
func (client *SparkSessionClient) GetSparkStatementsCreateRequest(ctx context.Context, sessionId int32) (*azcore.Request, error) {
	urlPath := "/sessions/{sessionId}/statements"
	urlPath = strings.ReplaceAll(urlPath, "{sessionId}", url.PathEscape(strconv.FormatInt(int64(sessionId), 10)))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetSparkStatementsHandleResponse handles the GetSparkStatements response.
func (client *SparkSessionClient) GetSparkStatementsHandleResponse(resp *azcore.Response) (*SparkStatementCollectionResponse, error) {
	result := SparkStatementCollectionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.SparkStatementCollection)
}

// GetSparkStatementsHandleError handles the GetSparkStatements error response.
func (client *SparkSessionClient) GetSparkStatementsHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// ResetSparkSessionTimeout - Sends a keep alive call to the current session to reset the session timeout.
func (client *SparkSessionClient) ResetSparkSessionTimeout(ctx context.Context, sessionId int32) (*http.Response, error) {
	req, err := client.ResetSparkSessionTimeoutCreateRequest(ctx, sessionId)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.ResetSparkSessionTimeoutHandleError(resp)
	}
	return resp.Response, nil
}

// ResetSparkSessionTimeoutCreateRequest creates the ResetSparkSessionTimeout request.
func (client *SparkSessionClient) ResetSparkSessionTimeoutCreateRequest(ctx context.Context, sessionId int32) (*azcore.Request, error) {
	urlPath := "/sessions/{sessionId}/reset-timeout"
	urlPath = strings.ReplaceAll(urlPath, "{sessionId}", url.PathEscape(strconv.FormatInt(int64(sessionId), 10)))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ResetSparkSessionTimeoutHandleError handles the ResetSparkSessionTimeout error response.
func (client *SparkSessionClient) ResetSparkSessionTimeoutHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}
