// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azspark

import (
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"strings"
)

const telemetryInfo = "azsdk-go-azspark/<version>"

// clientOptions contains configuration settings for the default client's pipeline.
type clientOptions struct {
	// HTTPClient sets the transport for making HTTP requests.
	HTTPClient azcore.Transport
	// Retry configures the built-in retry policy behavior.
	Retry azcore.RetryOptions
	// Telemetry configures the built-in telemetry policy behavior.
	Telemetry azcore.TelemetryOptions
}

// defaultClientOptions creates a clientOptions type initialized with default values.
func defaultClientOptions() clientOptions {
	return clientOptions{
		HTTPClient: azcore.DefaultHTTPClientTransport(),
		Retry:      azcore.DefaultRetryOptions(),
		Telemetry:  azcore.DefaultTelemetryOptions(),
	}
}

func (c *clientOptions) telemetryOptions() *azcore.TelemetryOptions {
	to := c.Telemetry
	if to.Value == "" {
		to.Value = telemetryInfo
	} else {
		to.Value = fmt.Sprintf("%s %s", telemetryInfo, to.Value)
	}
	return &to
}

type client struct {
	u string
	p azcore.Pipeline
}

// newClient creates an instance of the client type with the specified endpoint.
func newClient(endpoint string, livyAPIVersion *string, sparkPoolName string, options *clientOptions) *client {
	if options == nil {
		o := defaultClientOptions()
		options = &o
	}
	p := azcore.NewPipeline(options.HTTPClient,
		azcore.NewTelemetryPolicy(options.telemetryOptions()),
		azcore.NewRetryPolicy(&options.Retry),
		azcore.NewLogPolicy(nil))
	return newClientWithPipeline(endpoint, livyAPIVersion, sparkPoolName, p)
}

// newClientWithPipeline creates an instance of the client type with the specified endpoint and pipeline.
func newClientWithPipeline(endpoint string, livyAPIVersion *string, sparkPoolName string, p azcore.Pipeline) *client {
	hostURL := "{endpoint}/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}"
	hostURL = strings.ReplaceAll(hostURL, "{endpoint}", endpoint)
	if livyAPIVersion == nil {
		defaultValue := "2019-11-01-preview"
		livyAPIVersion = &defaultValue
	}
	hostURL = strings.ReplaceAll(hostURL, "{livyApiVersion}", *livyAPIVersion)
	hostURL = strings.ReplaceAll(hostURL, "{sparkPoolName}", sparkPoolName)
	return &client{u: hostURL, p: p}
}
