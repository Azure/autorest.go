// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"
)

// SparkJobDefinitionOperations contains the methods for the SparkJobDefinition group.
type SparkJobDefinitionOperations interface {
	// CreateOrUpdateSparkJobDefinition - Creates or updates a Spark Job Definition.
	CreateOrUpdateSparkJobDefinition(ctx context.Context, sparkJobDefinitionName string, sparkJobDefinition SparkJobDefinitionResource, sparkJobDefinitionCreateOrUpdateSparkJobDefinitionOptions *SparkJobDefinitionCreateOrUpdateSparkJobDefinitionOptions) (*SparkJobDefinitionResourceResponse, error)
	// BeginDebugSparkJobDefinition - Debug the spark job definition.
	BeginDebugSparkJobDefinition(ctx context.Context, sparkJobDefinitionAzureResource SparkJobDefinitionResource) (*SparkBatchJobPollerResponse, error)
	// ResumeDebugSparkJobDefinition - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeDebugSparkJobDefinition(token string) (SparkBatchJobPoller, error)
	// DeleteSparkJobDefinition - Deletes a Spark Job Definition.
	DeleteSparkJobDefinition(ctx context.Context, sparkJobDefinitionName string) (*http.Response, error)
	// BeginExecuteSparkJobDefinition - Executes the spark job definition.
	BeginExecuteSparkJobDefinition(ctx context.Context, sparkJobDefinitionName string) (*SparkBatchJobPollerResponse, error)
	// ResumeExecuteSparkJobDefinition - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeExecuteSparkJobDefinition(token string) (SparkBatchJobPoller, error)
	// GetSparkJobDefinition - Gets a Spark Job Definition.
	GetSparkJobDefinition(ctx context.Context, sparkJobDefinitionName string, sparkJobDefinitionGetSparkJobDefinitionOptions *SparkJobDefinitionGetSparkJobDefinitionOptions) (*SparkJobDefinitionResourceResponse, error)
	// GetSparkJobDefinitionsByWorkspace - Lists spark job definitions.
	GetSparkJobDefinitionsByWorkspace() (SparkJobDefinitionsListResponsePager, error)
}

// sparkJobDefinitionOperations implements the SparkJobDefinitionOperations interface.
type sparkJobDefinitionOperations struct {
	*Client
}

// CreateOrUpdateSparkJobDefinition - Creates or updates a Spark Job Definition.
func (client *sparkJobDefinitionOperations) CreateOrUpdateSparkJobDefinition(ctx context.Context, sparkJobDefinitionName string, sparkJobDefinition SparkJobDefinitionResource, sparkJobDefinitionCreateOrUpdateSparkJobDefinitionOptions *SparkJobDefinitionCreateOrUpdateSparkJobDefinitionOptions) (*SparkJobDefinitionResourceResponse, error) {
	req, err := client.createOrUpdateSparkJobDefinitionCreateRequest(sparkJobDefinitionName, sparkJobDefinition, sparkJobDefinitionCreateOrUpdateSparkJobDefinitionOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createOrUpdateSparkJobDefinitionHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// createOrUpdateSparkJobDefinitionCreateRequest creates the CreateOrUpdateSparkJobDefinition request.
func (client *sparkJobDefinitionOperations) createOrUpdateSparkJobDefinitionCreateRequest(sparkJobDefinitionName string, sparkJobDefinition SparkJobDefinitionResource, sparkJobDefinitionCreateOrUpdateSparkJobDefinitionOptions *SparkJobDefinitionCreateOrUpdateSparkJobDefinitionOptions) (*azcore.Request, error) {
	urlPath := "/sparkJobDefinitions/{sparkJobDefinitionName}"
	urlPath = strings.ReplaceAll(urlPath, "{sparkJobDefinitionName}", url.PathEscape(sparkJobDefinitionName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	if sparkJobDefinitionCreateOrUpdateSparkJobDefinitionOptions != nil && sparkJobDefinitionCreateOrUpdateSparkJobDefinitionOptions.IfMatch != nil {
		req.Header.Set("If-Match", *sparkJobDefinitionCreateOrUpdateSparkJobDefinitionOptions.IfMatch)
	}
	return req, req.MarshalAsJSON(sparkJobDefinition)
}

// createOrUpdateSparkJobDefinitionHandleResponse handles the CreateOrUpdateSparkJobDefinition response.
func (client *sparkJobDefinitionOperations) createOrUpdateSparkJobDefinitionHandleResponse(resp *azcore.Response) (*SparkJobDefinitionResourceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.createOrUpdateSparkJobDefinitionHandleError(resp)
	}
	result := SparkJobDefinitionResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.SparkJobDefinitionResource)
}

// createOrUpdateSparkJobDefinitionHandleError handles the CreateOrUpdateSparkJobDefinition error response.
func (client *sparkJobDefinitionOperations) createOrUpdateSparkJobDefinitionHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DebugSparkJobDefinition - Debug the spark job definition.
func (client *sparkJobDefinitionOperations) BeginDebugSparkJobDefinition(ctx context.Context, sparkJobDefinitionAzureResource SparkJobDefinitionResource) (*SparkBatchJobPollerResponse, error) {
	req, err := client.debugSparkJobDefinitionCreateRequest(sparkJobDefinitionAzureResource)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.debugSparkJobDefinitionHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	poller := &sparkBatchJobPoller{
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*SparkBatchJobResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *sparkJobDefinitionOperations) ResumeDebugSparkJobDefinition(token string) (SparkBatchJobPoller, error) {
	return nil, nil
}

// debugSparkJobDefinitionCreateRequest creates the DebugSparkJobDefinition request.
func (client *sparkJobDefinitionOperations) debugSparkJobDefinitionCreateRequest(sparkJobDefinitionAzureResource SparkJobDefinitionResource) (*azcore.Request, error) {
	urlPath := "/debugSparkJobDefinition"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(sparkJobDefinitionAzureResource)
}

// debugSparkJobDefinitionHandleResponse handles the DebugSparkJobDefinition response.
func (client *sparkJobDefinitionOperations) debugSparkJobDefinitionHandleResponse(resp *azcore.Response) (*SparkBatchJobPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.debugSparkJobDefinitionHandleError(resp)
	}
	return &SparkBatchJobPollerResponse{RawResponse: resp.Response}, nil
}

// debugSparkJobDefinitionHandleError handles the DebugSparkJobDefinition error response.
func (client *sparkJobDefinitionOperations) debugSparkJobDefinitionHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DeleteSparkJobDefinition - Deletes a Spark Job Definition.
func (client *sparkJobDefinitionOperations) DeleteSparkJobDefinition(ctx context.Context, sparkJobDefinitionName string) (*http.Response, error) {
	req, err := client.deleteSparkJobDefinitionCreateRequest(sparkJobDefinitionName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteSparkJobDefinitionHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// deleteSparkJobDefinitionCreateRequest creates the DeleteSparkJobDefinition request.
func (client *sparkJobDefinitionOperations) deleteSparkJobDefinitionCreateRequest(sparkJobDefinitionName string) (*azcore.Request, error) {
	urlPath := "/sparkJobDefinitions/{sparkJobDefinitionName}"
	urlPath = strings.ReplaceAll(urlPath, "{sparkJobDefinitionName}", url.PathEscape(sparkJobDefinitionName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteSparkJobDefinitionHandleResponse handles the DeleteSparkJobDefinition response.
func (client *sparkJobDefinitionOperations) deleteSparkJobDefinitionHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.deleteSparkJobDefinitionHandleError(resp)
	}
	return resp.Response, nil
}

// deleteSparkJobDefinitionHandleError handles the DeleteSparkJobDefinition error response.
func (client *sparkJobDefinitionOperations) deleteSparkJobDefinitionHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ExecuteSparkJobDefinition - Executes the spark job definition.
func (client *sparkJobDefinitionOperations) BeginExecuteSparkJobDefinition(ctx context.Context, sparkJobDefinitionName string) (*SparkBatchJobPollerResponse, error) {
	req, err := client.executeSparkJobDefinitionCreateRequest(sparkJobDefinitionName)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.executeSparkJobDefinitionHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	poller := &sparkBatchJobPoller{
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*SparkBatchJobResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *sparkJobDefinitionOperations) ResumeExecuteSparkJobDefinition(token string) (SparkBatchJobPoller, error) {
	return nil, nil
}

// executeSparkJobDefinitionCreateRequest creates the ExecuteSparkJobDefinition request.
func (client *sparkJobDefinitionOperations) executeSparkJobDefinitionCreateRequest(sparkJobDefinitionName string) (*azcore.Request, error) {
	urlPath := "/sparkJobDefinitions/{sparkJobDefinitionName}/execute"
	urlPath = strings.ReplaceAll(urlPath, "{sparkJobDefinitionName}", url.PathEscape(sparkJobDefinitionName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// executeSparkJobDefinitionHandleResponse handles the ExecuteSparkJobDefinition response.
func (client *sparkJobDefinitionOperations) executeSparkJobDefinitionHandleResponse(resp *azcore.Response) (*SparkBatchJobPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.executeSparkJobDefinitionHandleError(resp)
	}
	return &SparkBatchJobPollerResponse{RawResponse: resp.Response}, nil
}

// executeSparkJobDefinitionHandleError handles the ExecuteSparkJobDefinition error response.
func (client *sparkJobDefinitionOperations) executeSparkJobDefinitionHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetSparkJobDefinition - Gets a Spark Job Definition.
func (client *sparkJobDefinitionOperations) GetSparkJobDefinition(ctx context.Context, sparkJobDefinitionName string, sparkJobDefinitionGetSparkJobDefinitionOptions *SparkJobDefinitionGetSparkJobDefinitionOptions) (*SparkJobDefinitionResourceResponse, error) {
	req, err := client.getSparkJobDefinitionCreateRequest(sparkJobDefinitionName, sparkJobDefinitionGetSparkJobDefinitionOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getSparkJobDefinitionHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getSparkJobDefinitionCreateRequest creates the GetSparkJobDefinition request.
func (client *sparkJobDefinitionOperations) getSparkJobDefinitionCreateRequest(sparkJobDefinitionName string, sparkJobDefinitionGetSparkJobDefinitionOptions *SparkJobDefinitionGetSparkJobDefinitionOptions) (*azcore.Request, error) {
	urlPath := "/sparkJobDefinitions/{sparkJobDefinitionName}"
	urlPath = strings.ReplaceAll(urlPath, "{sparkJobDefinitionName}", url.PathEscape(sparkJobDefinitionName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	if sparkJobDefinitionGetSparkJobDefinitionOptions != nil && sparkJobDefinitionGetSparkJobDefinitionOptions.IfNoneMatch != nil {
		req.Header.Set("If-None-Match", *sparkJobDefinitionGetSparkJobDefinitionOptions.IfNoneMatch)
	}
	return req, nil
}

// getSparkJobDefinitionHandleResponse handles the GetSparkJobDefinition response.
func (client *sparkJobDefinitionOperations) getSparkJobDefinitionHandleResponse(resp *azcore.Response) (*SparkJobDefinitionResourceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusNotModified) {
		return nil, client.getSparkJobDefinitionHandleError(resp)
	}
	result := SparkJobDefinitionResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.SparkJobDefinitionResource)
}

// getSparkJobDefinitionHandleError handles the GetSparkJobDefinition error response.
func (client *sparkJobDefinitionOperations) getSparkJobDefinitionHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetSparkJobDefinitionsByWorkspace - Lists spark job definitions.
func (client *sparkJobDefinitionOperations) GetSparkJobDefinitionsByWorkspace() (SparkJobDefinitionsListResponsePager, error) {
	req, err := client.getSparkJobDefinitionsByWorkspaceCreateRequest()
	if err != nil {
		return nil, err
	}
	return &sparkJobDefinitionsListResponsePager{
		pipeline:  client.p,
		request:   req,
		responder: client.getSparkJobDefinitionsByWorkspaceHandleResponse,
		advancer: func(resp *SparkJobDefinitionsListResponseResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.SparkJobDefinitionsListResponse.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.SparkJobDefinitionsListResponse.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// getSparkJobDefinitionsByWorkspaceCreateRequest creates the GetSparkJobDefinitionsByWorkspace request.
func (client *sparkJobDefinitionOperations) getSparkJobDefinitionsByWorkspaceCreateRequest() (*azcore.Request, error) {
	urlPath := "/sparkJobDefinitions"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getSparkJobDefinitionsByWorkspaceHandleResponse handles the GetSparkJobDefinitionsByWorkspace response.
func (client *sparkJobDefinitionOperations) getSparkJobDefinitionsByWorkspaceHandleResponse(resp *azcore.Response) (*SparkJobDefinitionsListResponseResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getSparkJobDefinitionsByWorkspaceHandleError(resp)
	}
	result := SparkJobDefinitionsListResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.SparkJobDefinitionsListResponse)
}

// getSparkJobDefinitionsByWorkspaceHandleError handles the GetSparkJobDefinitionsByWorkspace error response.
func (client *sparkJobDefinitionOperations) getSparkJobDefinitionsByWorkspaceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
