// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"
)

// TriggerOperations contains the methods for the Trigger group.
type TriggerOperations interface {
	// BeginCreateOrUpdateTrigger - Creates or updates a trigger.
	BeginCreateOrUpdateTrigger(ctx context.Context, triggerName string, trigger TriggerResource, triggerCreateOrUpdateTriggerOptions *TriggerCreateOrUpdateTriggerOptions) (*TriggerResourcePollerResponse, error)
	// ResumeCreateOrUpdateTrigger - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeCreateOrUpdateTrigger(token string) (TriggerResourcePoller, error)
	// BeginDeleteTrigger - Deletes a trigger.
	BeginDeleteTrigger(ctx context.Context, triggerName string) (*HTTPPollerResponse, error)
	// ResumeDeleteTrigger - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeDeleteTrigger(token string) (HTTPPoller, error)
	// GetEventSubscriptionStatus - Get a trigger's event subscription status.
	GetEventSubscriptionStatus(ctx context.Context, triggerName string) (*TriggerSubscriptionOperationStatusResponse, error)
	// GetTrigger - Gets a trigger.
	GetTrigger(ctx context.Context, triggerName string, triggerGetTriggerOptions *TriggerGetTriggerOptions) (*TriggerResourceResponse, error)
	// GetTriggersByWorkspace - Lists triggers.
	GetTriggersByWorkspace() (TriggerListResponsePager, error)
	// BeginStartTrigger - Starts a trigger.
	BeginStartTrigger(ctx context.Context, triggerName string) (*HTTPPollerResponse, error)
	// ResumeStartTrigger - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeStartTrigger(token string) (HTTPPoller, error)
	// BeginStopTrigger - Stops a trigger.
	BeginStopTrigger(ctx context.Context, triggerName string) (*HTTPPollerResponse, error)
	// ResumeStopTrigger - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeStopTrigger(token string) (HTTPPoller, error)
	// BeginSubscribeTriggerToEvents - Subscribe event trigger to events.
	BeginSubscribeTriggerToEvents(ctx context.Context, triggerName string) (*TriggerSubscriptionOperationStatusPollerResponse, error)
	// ResumeSubscribeTriggerToEvents - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeSubscribeTriggerToEvents(token string) (TriggerSubscriptionOperationStatusPoller, error)
	// BeginUnsubscribeTriggerFromEvents - Unsubscribe event trigger from events.
	BeginUnsubscribeTriggerFromEvents(ctx context.Context, triggerName string) (*TriggerSubscriptionOperationStatusPollerResponse, error)
	// ResumeUnsubscribeTriggerFromEvents - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeUnsubscribeTriggerFromEvents(token string) (TriggerSubscriptionOperationStatusPoller, error)
}

// triggerOperations implements the TriggerOperations interface.
type triggerOperations struct {
	*Client
}

// CreateOrUpdateTrigger - Creates or updates a trigger.
func (client *triggerOperations) BeginCreateOrUpdateTrigger(ctx context.Context, triggerName string, trigger TriggerResource, triggerCreateOrUpdateTriggerOptions *TriggerCreateOrUpdateTriggerOptions) (*TriggerResourcePollerResponse, error) {
	req, err := client.createOrUpdateTriggerCreateRequest(triggerName, trigger, triggerCreateOrUpdateTriggerOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createOrUpdateTriggerHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	poller := &triggerResourcePoller{
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*TriggerResourceResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *triggerOperations) ResumeCreateOrUpdateTrigger(token string) (TriggerResourcePoller, error) {
	return nil, nil
}

// createOrUpdateTriggerCreateRequest creates the CreateOrUpdateTrigger request.
func (client *triggerOperations) createOrUpdateTriggerCreateRequest(triggerName string, trigger TriggerResource, triggerCreateOrUpdateTriggerOptions *TriggerCreateOrUpdateTriggerOptions) (*azcore.Request, error) {
	urlPath := "/triggers/{triggerName}"
	urlPath = strings.ReplaceAll(urlPath, "{triggerName}", url.PathEscape(triggerName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	if triggerCreateOrUpdateTriggerOptions != nil && triggerCreateOrUpdateTriggerOptions.IfMatch != nil {
		req.Header.Set("If-Match", *triggerCreateOrUpdateTriggerOptions.IfMatch)
	}
	return req, req.MarshalAsJSON(trigger)
}

// createOrUpdateTriggerHandleResponse handles the CreateOrUpdateTrigger response.
func (client *triggerOperations) createOrUpdateTriggerHandleResponse(resp *azcore.Response) (*TriggerResourcePollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.createOrUpdateTriggerHandleError(resp)
	}
	return &TriggerResourcePollerResponse{RawResponse: resp.Response}, nil
}

// createOrUpdateTriggerHandleError handles the CreateOrUpdateTrigger error response.
func (client *triggerOperations) createOrUpdateTriggerHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DeleteTrigger - Deletes a trigger.
func (client *triggerOperations) BeginDeleteTrigger(ctx context.Context, triggerName string) (*HTTPPollerResponse, error) {
	req, err := client.deleteTriggerCreateRequest(triggerName)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteTriggerHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	poller := &httpPoller{
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *triggerOperations) ResumeDeleteTrigger(token string) (HTTPPoller, error) {
	return nil, nil
}

// deleteTriggerCreateRequest creates the DeleteTrigger request.
func (client *triggerOperations) deleteTriggerCreateRequest(triggerName string) (*azcore.Request, error) {
	urlPath := "/triggers/{triggerName}"
	urlPath = strings.ReplaceAll(urlPath, "{triggerName}", url.PathEscape(triggerName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteTriggerHandleResponse handles the DeleteTrigger response.
func (client *triggerOperations) deleteTriggerHandleResponse(resp *azcore.Response) (*HTTPPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteTriggerHandleError(resp)
	}
	return &HTTPPollerResponse{RawResponse: resp.Response}, nil
}

// deleteTriggerHandleError handles the DeleteTrigger error response.
func (client *triggerOperations) deleteTriggerHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetEventSubscriptionStatus - Get a trigger's event subscription status.
func (client *triggerOperations) GetEventSubscriptionStatus(ctx context.Context, triggerName string) (*TriggerSubscriptionOperationStatusResponse, error) {
	req, err := client.getEventSubscriptionStatusCreateRequest(triggerName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getEventSubscriptionStatusHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getEventSubscriptionStatusCreateRequest creates the GetEventSubscriptionStatus request.
func (client *triggerOperations) getEventSubscriptionStatusCreateRequest(triggerName string) (*azcore.Request, error) {
	urlPath := "/triggers/{triggerName}/getEventSubscriptionStatus"
	urlPath = strings.ReplaceAll(urlPath, "{triggerName}", url.PathEscape(triggerName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// getEventSubscriptionStatusHandleResponse handles the GetEventSubscriptionStatus response.
func (client *triggerOperations) getEventSubscriptionStatusHandleResponse(resp *azcore.Response) (*TriggerSubscriptionOperationStatusResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getEventSubscriptionStatusHandleError(resp)
	}
	result := TriggerSubscriptionOperationStatusResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.TriggerSubscriptionOperationStatus)
}

// getEventSubscriptionStatusHandleError handles the GetEventSubscriptionStatus error response.
func (client *triggerOperations) getEventSubscriptionStatusHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetTrigger - Gets a trigger.
func (client *triggerOperations) GetTrigger(ctx context.Context, triggerName string, triggerGetTriggerOptions *TriggerGetTriggerOptions) (*TriggerResourceResponse, error) {
	req, err := client.getTriggerCreateRequest(triggerName, triggerGetTriggerOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getTriggerHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getTriggerCreateRequest creates the GetTrigger request.
func (client *triggerOperations) getTriggerCreateRequest(triggerName string, triggerGetTriggerOptions *TriggerGetTriggerOptions) (*azcore.Request, error) {
	urlPath := "/triggers/{triggerName}"
	urlPath = strings.ReplaceAll(urlPath, "{triggerName}", url.PathEscape(triggerName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	if triggerGetTriggerOptions != nil && triggerGetTriggerOptions.IfNoneMatch != nil {
		req.Header.Set("If-None-Match", *triggerGetTriggerOptions.IfNoneMatch)
	}
	return req, nil
}

// getTriggerHandleResponse handles the GetTrigger response.
func (client *triggerOperations) getTriggerHandleResponse(resp *azcore.Response) (*TriggerResourceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusNotModified) {
		return nil, client.getTriggerHandleError(resp)
	}
	result := TriggerResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.TriggerResource)
}

// getTriggerHandleError handles the GetTrigger error response.
func (client *triggerOperations) getTriggerHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetTriggersByWorkspace - Lists triggers.
func (client *triggerOperations) GetTriggersByWorkspace() (TriggerListResponsePager, error) {
	req, err := client.getTriggersByWorkspaceCreateRequest()
	if err != nil {
		return nil, err
	}
	return &triggerListResponsePager{
		pipeline:  client.p,
		request:   req,
		responder: client.getTriggersByWorkspaceHandleResponse,
		advancer: func(resp *TriggerListResponseResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.TriggerListResponse.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.TriggerListResponse.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// getTriggersByWorkspaceCreateRequest creates the GetTriggersByWorkspace request.
func (client *triggerOperations) getTriggersByWorkspaceCreateRequest() (*azcore.Request, error) {
	urlPath := "/triggers"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getTriggersByWorkspaceHandleResponse handles the GetTriggersByWorkspace response.
func (client *triggerOperations) getTriggersByWorkspaceHandleResponse(resp *azcore.Response) (*TriggerListResponseResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getTriggersByWorkspaceHandleError(resp)
	}
	result := TriggerListResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.TriggerListResponse)
}

// getTriggersByWorkspaceHandleError handles the GetTriggersByWorkspace error response.
func (client *triggerOperations) getTriggersByWorkspaceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// StartTrigger - Starts a trigger.
func (client *triggerOperations) BeginStartTrigger(ctx context.Context, triggerName string) (*HTTPPollerResponse, error) {
	req, err := client.startTriggerCreateRequest(triggerName)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.startTriggerHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	poller := &httpPoller{
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *triggerOperations) ResumeStartTrigger(token string) (HTTPPoller, error) {
	return nil, nil
}

// startTriggerCreateRequest creates the StartTrigger request.
func (client *triggerOperations) startTriggerCreateRequest(triggerName string) (*azcore.Request, error) {
	urlPath := "/triggers/{triggerName}/start"
	urlPath = strings.ReplaceAll(urlPath, "{triggerName}", url.PathEscape(triggerName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// startTriggerHandleResponse handles the StartTrigger response.
func (client *triggerOperations) startTriggerHandleResponse(resp *azcore.Response) (*HTTPPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.startTriggerHandleError(resp)
	}
	return &HTTPPollerResponse{RawResponse: resp.Response}, nil
}

// startTriggerHandleError handles the StartTrigger error response.
func (client *triggerOperations) startTriggerHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// StopTrigger - Stops a trigger.
func (client *triggerOperations) BeginStopTrigger(ctx context.Context, triggerName string) (*HTTPPollerResponse, error) {
	req, err := client.stopTriggerCreateRequest(triggerName)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.stopTriggerHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	poller := &httpPoller{
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *triggerOperations) ResumeStopTrigger(token string) (HTTPPoller, error) {
	return nil, nil
}

// stopTriggerCreateRequest creates the StopTrigger request.
func (client *triggerOperations) stopTriggerCreateRequest(triggerName string) (*azcore.Request, error) {
	urlPath := "/triggers/{triggerName}/stop"
	urlPath = strings.ReplaceAll(urlPath, "{triggerName}", url.PathEscape(triggerName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// stopTriggerHandleResponse handles the StopTrigger response.
func (client *triggerOperations) stopTriggerHandleResponse(resp *azcore.Response) (*HTTPPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.stopTriggerHandleError(resp)
	}
	return &HTTPPollerResponse{RawResponse: resp.Response}, nil
}

// stopTriggerHandleError handles the StopTrigger error response.
func (client *triggerOperations) stopTriggerHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// SubscribeTriggerToEvents - Subscribe event trigger to events.
func (client *triggerOperations) BeginSubscribeTriggerToEvents(ctx context.Context, triggerName string) (*TriggerSubscriptionOperationStatusPollerResponse, error) {
	req, err := client.subscribeTriggerToEventsCreateRequest(triggerName)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.subscribeTriggerToEventsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	poller := &triggerSubscriptionOperationStatusPoller{
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*TriggerSubscriptionOperationStatusResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *triggerOperations) ResumeSubscribeTriggerToEvents(token string) (TriggerSubscriptionOperationStatusPoller, error) {
	return nil, nil
}

// subscribeTriggerToEventsCreateRequest creates the SubscribeTriggerToEvents request.
func (client *triggerOperations) subscribeTriggerToEventsCreateRequest(triggerName string) (*azcore.Request, error) {
	urlPath := "/triggers/{triggerName}/subscribeToEvents"
	urlPath = strings.ReplaceAll(urlPath, "{triggerName}", url.PathEscape(triggerName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// subscribeTriggerToEventsHandleResponse handles the SubscribeTriggerToEvents response.
func (client *triggerOperations) subscribeTriggerToEventsHandleResponse(resp *azcore.Response) (*TriggerSubscriptionOperationStatusPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.subscribeTriggerToEventsHandleError(resp)
	}
	return &TriggerSubscriptionOperationStatusPollerResponse{RawResponse: resp.Response}, nil
}

// subscribeTriggerToEventsHandleError handles the SubscribeTriggerToEvents error response.
func (client *triggerOperations) subscribeTriggerToEventsHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// UnsubscribeTriggerFromEvents - Unsubscribe event trigger from events.
func (client *triggerOperations) BeginUnsubscribeTriggerFromEvents(ctx context.Context, triggerName string) (*TriggerSubscriptionOperationStatusPollerResponse, error) {
	req, err := client.unsubscribeTriggerFromEventsCreateRequest(triggerName)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.unsubscribeTriggerFromEventsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	poller := &triggerSubscriptionOperationStatusPoller{
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*TriggerSubscriptionOperationStatusResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *triggerOperations) ResumeUnsubscribeTriggerFromEvents(token string) (TriggerSubscriptionOperationStatusPoller, error) {
	return nil, nil
}

// unsubscribeTriggerFromEventsCreateRequest creates the UnsubscribeTriggerFromEvents request.
func (client *triggerOperations) unsubscribeTriggerFromEventsCreateRequest(triggerName string) (*azcore.Request, error) {
	urlPath := "/triggers/{triggerName}/unsubscribeFromEvents"
	urlPath = strings.ReplaceAll(urlPath, "{triggerName}", url.PathEscape(triggerName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// unsubscribeTriggerFromEventsHandleResponse handles the UnsubscribeTriggerFromEvents response.
func (client *triggerOperations) unsubscribeTriggerFromEventsHandleResponse(resp *azcore.Response) (*TriggerSubscriptionOperationStatusPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.unsubscribeTriggerFromEventsHandleError(resp)
	}
	return &TriggerSubscriptionOperationStatusPollerResponse{RawResponse: resp.Response}, nil
}

// unsubscribeTriggerFromEventsHandleError handles the UnsubscribeTriggerFromEvents error response.
func (client *triggerOperations) unsubscribeTriggerFromEventsHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
