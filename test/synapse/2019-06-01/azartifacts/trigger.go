// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// TriggerOperations contains the methods for the Trigger group.
type TriggerOperations interface {
	// BeginCreateOrUpdateTrigger - Creates or updates a trigger.
	BeginCreateOrUpdateTrigger(ctx context.Context, triggerName string, trigger TriggerResource, triggerCreateOrUpdateTriggerOptions *TriggerCreateOrUpdateTriggerOptions) (*TriggerResourcePollerResponse, error)
	// ResumeCreateOrUpdateTrigger - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeCreateOrUpdateTrigger(token string) (TriggerResourcePoller, error)
	// BeginDeleteTrigger - Deletes a trigger.
	BeginDeleteTrigger(ctx context.Context, triggerName string) (*HTTPPollerResponse, error)
	// ResumeDeleteTrigger - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeDeleteTrigger(token string) (HTTPPoller, error)
	// GetEventSubscriptionStatus - Get a trigger's event subscription status.
	GetEventSubscriptionStatus(ctx context.Context, triggerName string) (*TriggerSubscriptionOperationStatusResponse, error)
	// GetTrigger - Gets a trigger.
	GetTrigger(ctx context.Context, triggerName string, triggerGetTriggerOptions *TriggerGetTriggerOptions) (*TriggerResourceResponse, error)
	// GetTriggersByWorkspace - Lists triggers.
	GetTriggersByWorkspace() TriggerListResponsePager
	// BeginStartTrigger - Starts a trigger.
	BeginStartTrigger(ctx context.Context, triggerName string) (*HTTPPollerResponse, error)
	// ResumeStartTrigger - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeStartTrigger(token string) (HTTPPoller, error)
	// BeginStopTrigger - Stops a trigger.
	BeginStopTrigger(ctx context.Context, triggerName string) (*HTTPPollerResponse, error)
	// ResumeStopTrigger - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeStopTrigger(token string) (HTTPPoller, error)
	// BeginSubscribeTriggerToEvents - Subscribe event trigger to events.
	BeginSubscribeTriggerToEvents(ctx context.Context, triggerName string) (*TriggerSubscriptionOperationStatusPollerResponse, error)
	// ResumeSubscribeTriggerToEvents - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeSubscribeTriggerToEvents(token string) (TriggerSubscriptionOperationStatusPoller, error)
	// BeginUnsubscribeTriggerFromEvents - Unsubscribe event trigger from events.
	BeginUnsubscribeTriggerFromEvents(ctx context.Context, triggerName string) (*TriggerSubscriptionOperationStatusPollerResponse, error)
	// ResumeUnsubscribeTriggerFromEvents - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeUnsubscribeTriggerFromEvents(token string) (TriggerSubscriptionOperationStatusPoller, error)
}

// TriggerClient implements the TriggerOperations interface.
// Don't use this type directly, use NewTriggerClient() instead.
type TriggerClient struct {
	*Client
}

// NewTriggerClient creates a new instance of TriggerClient with the specified values.
func NewTriggerClient(c *Client) TriggerOperations {
	return &TriggerClient{Client: c}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *TriggerClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// CreateOrUpdateTrigger - Creates or updates a trigger.
func (client *TriggerClient) CreateOrUpdateTrigger(ctx context.Context, triggerName string, trigger TriggerResource, triggerCreateOrUpdateTriggerOptions *TriggerCreateOrUpdateTriggerOptions) (*TriggerResourcePollerResponse, error) {
	req, err := client.CreateOrUpdateTriggerCreateRequest(ctx, triggerName, trigger, triggerCreateOrUpdateTriggerOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted) {
		return nil, client.CreateOrUpdateTriggerHandleError(resp)
	}
	return resp, nil
}

// CreateOrUpdateTriggerCreateRequest creates the CreateOrUpdateTrigger request.
func (client *TriggerClient) CreateOrUpdateTriggerCreateRequest(ctx context.Context, triggerName string, trigger TriggerResource, triggerCreateOrUpdateTriggerOptions *TriggerCreateOrUpdateTriggerOptions) (*azcore.Request, error) {
	urlPath := "/triggers/{triggerName}"
	urlPath = strings.ReplaceAll(urlPath, "{triggerName}", url.PathEscape(triggerName))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	if triggerCreateOrUpdateTriggerOptions != nil && triggerCreateOrUpdateTriggerOptions.IfMatch != nil {
		req.Header.Set("If-Match", *triggerCreateOrUpdateTriggerOptions.IfMatch)
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(trigger)
}

// CreateOrUpdateTriggerHandleResponse handles the CreateOrUpdateTrigger response.
func (client *TriggerClient) CreateOrUpdateTriggerHandleResponse(resp *azcore.Response) (*TriggerResourceResponse, error) {
	result := TriggerResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.TriggerResource)
}

// CreateOrUpdateTriggerHandleError handles the CreateOrUpdateTrigger error response.
func (client *TriggerClient) CreateOrUpdateTriggerHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DeleteTrigger - Deletes a trigger.
func (client *TriggerClient) DeleteTrigger(ctx context.Context, triggerName string) (*HTTPPollerResponse, error) {
	req, err := client.DeleteTriggerCreateRequest(ctx, triggerName)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.DeleteTriggerHandleError(resp)
	}
	return resp, nil
}

// DeleteTriggerCreateRequest creates the DeleteTrigger request.
func (client *TriggerClient) DeleteTriggerCreateRequest(ctx context.Context, triggerName string) (*azcore.Request, error) {
	urlPath := "/triggers/{triggerName}"
	urlPath = strings.ReplaceAll(urlPath, "{triggerName}", url.PathEscape(triggerName))
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// DeleteTriggerHandleError handles the DeleteTrigger error response.
func (client *TriggerClient) DeleteTriggerHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetEventSubscriptionStatus - Get a trigger's event subscription status.
func (client *TriggerClient) GetEventSubscriptionStatus(ctx context.Context, triggerName string) (*TriggerSubscriptionOperationStatusResponse, error) {
	req, err := client.GetEventSubscriptionStatusCreateRequest(ctx, triggerName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetEventSubscriptionStatusHandleError(resp)
	}
	result, err := client.GetEventSubscriptionStatusHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetEventSubscriptionStatusCreateRequest creates the GetEventSubscriptionStatus request.
func (client *TriggerClient) GetEventSubscriptionStatusCreateRequest(ctx context.Context, triggerName string) (*azcore.Request, error) {
	urlPath := "/triggers/{triggerName}/getEventSubscriptionStatus"
	urlPath = strings.ReplaceAll(urlPath, "{triggerName}", url.PathEscape(triggerName))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetEventSubscriptionStatusHandleResponse handles the GetEventSubscriptionStatus response.
func (client *TriggerClient) GetEventSubscriptionStatusHandleResponse(resp *azcore.Response) (*TriggerSubscriptionOperationStatusResponse, error) {
	result := TriggerSubscriptionOperationStatusResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.TriggerSubscriptionOperationStatus)
}

// GetEventSubscriptionStatusHandleError handles the GetEventSubscriptionStatus error response.
func (client *TriggerClient) GetEventSubscriptionStatusHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetTrigger - Gets a trigger.
func (client *TriggerClient) GetTrigger(ctx context.Context, triggerName string, triggerGetTriggerOptions *TriggerGetTriggerOptions) (*TriggerResourceResponse, error) {
	req, err := client.GetTriggerCreateRequest(ctx, triggerName, triggerGetTriggerOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusNotModified) {
		return nil, client.GetTriggerHandleError(resp)
	}
	result, err := client.GetTriggerHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetTriggerCreateRequest creates the GetTrigger request.
func (client *TriggerClient) GetTriggerCreateRequest(ctx context.Context, triggerName string, triggerGetTriggerOptions *TriggerGetTriggerOptions) (*azcore.Request, error) {
	urlPath := "/triggers/{triggerName}"
	urlPath = strings.ReplaceAll(urlPath, "{triggerName}", url.PathEscape(triggerName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	if triggerGetTriggerOptions != nil && triggerGetTriggerOptions.IfNoneMatch != nil {
		req.Header.Set("If-None-Match", *triggerGetTriggerOptions.IfNoneMatch)
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetTriggerHandleResponse handles the GetTrigger response.
func (client *TriggerClient) GetTriggerHandleResponse(resp *azcore.Response) (*TriggerResourceResponse, error) {
	result := TriggerResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.TriggerResource)
}

// GetTriggerHandleError handles the GetTrigger error response.
func (client *TriggerClient) GetTriggerHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetTriggersByWorkspace - Lists triggers.
func (client *TriggerClient) GetTriggersByWorkspace() TriggerListResponsePager {
	return &triggerListResponsePager{
		pipeline: client.p,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.GetTriggersByWorkspaceCreateRequest(ctx)
		},
		responder: client.GetTriggersByWorkspaceHandleResponse,
		errorer:   client.GetTriggersByWorkspaceHandleError,
		advancer: func(ctx context.Context, resp *TriggerListResponseResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.TriggerListResponse.NextLink)
		},
	}
}

// GetTriggersByWorkspaceCreateRequest creates the GetTriggersByWorkspace request.
func (client *TriggerClient) GetTriggersByWorkspaceCreateRequest(ctx context.Context) (*azcore.Request, error) {
	urlPath := "/triggers"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetTriggersByWorkspaceHandleResponse handles the GetTriggersByWorkspace response.
func (client *TriggerClient) GetTriggersByWorkspaceHandleResponse(resp *azcore.Response) (*TriggerListResponseResponse, error) {
	result := TriggerListResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.TriggerListResponse)
}

// GetTriggersByWorkspaceHandleError handles the GetTriggersByWorkspace error response.
func (client *TriggerClient) GetTriggersByWorkspaceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// StartTrigger - Starts a trigger.
func (client *TriggerClient) StartTrigger(ctx context.Context, triggerName string) (*HTTPPollerResponse, error) {
	req, err := client.StartTriggerCreateRequest(ctx, triggerName)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.StartTriggerHandleError(resp)
	}
	return resp, nil
}

// StartTriggerCreateRequest creates the StartTrigger request.
func (client *TriggerClient) StartTriggerCreateRequest(ctx context.Context, triggerName string) (*azcore.Request, error) {
	urlPath := "/triggers/{triggerName}/start"
	urlPath = strings.ReplaceAll(urlPath, "{triggerName}", url.PathEscape(triggerName))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// StartTriggerHandleError handles the StartTrigger error response.
func (client *TriggerClient) StartTriggerHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// StopTrigger - Stops a trigger.
func (client *TriggerClient) StopTrigger(ctx context.Context, triggerName string) (*HTTPPollerResponse, error) {
	req, err := client.StopTriggerCreateRequest(ctx, triggerName)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.StopTriggerHandleError(resp)
	}
	return resp, nil
}

// StopTriggerCreateRequest creates the StopTrigger request.
func (client *TriggerClient) StopTriggerCreateRequest(ctx context.Context, triggerName string) (*azcore.Request, error) {
	urlPath := "/triggers/{triggerName}/stop"
	urlPath = strings.ReplaceAll(urlPath, "{triggerName}", url.PathEscape(triggerName))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// StopTriggerHandleError handles the StopTrigger error response.
func (client *TriggerClient) StopTriggerHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// SubscribeTriggerToEvents - Subscribe event trigger to events.
func (client *TriggerClient) SubscribeTriggerToEvents(ctx context.Context, triggerName string) (*TriggerSubscriptionOperationStatusPollerResponse, error) {
	req, err := client.SubscribeTriggerToEventsCreateRequest(ctx, triggerName)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted) {
		return nil, client.SubscribeTriggerToEventsHandleError(resp)
	}
	return resp, nil
}

// SubscribeTriggerToEventsCreateRequest creates the SubscribeTriggerToEvents request.
func (client *TriggerClient) SubscribeTriggerToEventsCreateRequest(ctx context.Context, triggerName string) (*azcore.Request, error) {
	urlPath := "/triggers/{triggerName}/subscribeToEvents"
	urlPath = strings.ReplaceAll(urlPath, "{triggerName}", url.PathEscape(triggerName))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// SubscribeTriggerToEventsHandleResponse handles the SubscribeTriggerToEvents response.
func (client *TriggerClient) SubscribeTriggerToEventsHandleResponse(resp *azcore.Response) (*TriggerSubscriptionOperationStatusResponse, error) {
	result := TriggerSubscriptionOperationStatusResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.TriggerSubscriptionOperationStatus)
}

// SubscribeTriggerToEventsHandleError handles the SubscribeTriggerToEvents error response.
func (client *TriggerClient) SubscribeTriggerToEventsHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// UnsubscribeTriggerFromEvents - Unsubscribe event trigger from events.
func (client *TriggerClient) UnsubscribeTriggerFromEvents(ctx context.Context, triggerName string) (*TriggerSubscriptionOperationStatusPollerResponse, error) {
	req, err := client.UnsubscribeTriggerFromEventsCreateRequest(ctx, triggerName)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted) {
		return nil, client.UnsubscribeTriggerFromEventsHandleError(resp)
	}
	return resp, nil
}

// UnsubscribeTriggerFromEventsCreateRequest creates the UnsubscribeTriggerFromEvents request.
func (client *TriggerClient) UnsubscribeTriggerFromEventsCreateRequest(ctx context.Context, triggerName string) (*azcore.Request, error) {
	urlPath := "/triggers/{triggerName}/unsubscribeFromEvents"
	urlPath = strings.ReplaceAll(urlPath, "{triggerName}", url.PathEscape(triggerName))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// UnsubscribeTriggerFromEventsHandleResponse handles the UnsubscribeTriggerFromEvents response.
func (client *TriggerClient) UnsubscribeTriggerFromEventsHandleResponse(resp *azcore.Response) (*TriggerSubscriptionOperationStatusResponse, error) {
	result := TriggerSubscriptionOperationStatusResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.TriggerSubscriptionOperationStatus)
}

// UnsubscribeTriggerFromEventsHandleError handles the UnsubscribeTriggerFromEvents error response.
func (client *TriggerClient) UnsubscribeTriggerFromEventsHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
