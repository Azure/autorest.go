// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"path"
	"strconv"
	"strings"
	"time"
)

// PipelineOperations contains the methods for the Pipeline group.
type PipelineOperations interface {
	// BeginCreateOrUpdatePipeline - Creates or updates a pipeline.
	BeginCreateOrUpdatePipeline(ctx context.Context, pipelineName string, pipeline PipelineResource, pipelineCreateOrUpdatePipelineOptions *PipelineCreateOrUpdatePipelineOptions) (*PipelineResourcePollerResponse, error)
	// ResumeCreateOrUpdatePipeline - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeCreateOrUpdatePipeline(token string) (PipelineResourcePoller, error)
	// BeginCreatePipelineRun - Creates a run of a pipeline.
	BeginCreatePipelineRun(ctx context.Context, pipelineName string, pipelineCreatePipelineRunOptions *PipelineCreatePipelineRunOptions) (*CreateRunResponsePollerResponse, error)
	// ResumeCreatePipelineRun - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeCreatePipelineRun(token string) (CreateRunResponsePoller, error)
	// BeginDeletePipeline - Deletes a pipeline.
	BeginDeletePipeline(ctx context.Context, pipelineName string) (*HTTPPollerResponse, error)
	// ResumeDeletePipeline - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeDeletePipeline(token string) (HTTPPoller, error)
	// GetPipeline - Gets a pipeline.
	GetPipeline(ctx context.Context, pipelineName string, pipelineGetPipelineOptions *PipelineGetPipelineOptions) (*PipelineResourceResponse, error)
	// GetPipelinesByWorkspace - Lists pipelines.
	GetPipelinesByWorkspace() (PipelineListResponsePager, error)
}

// pipelineOperations implements the PipelineOperations interface.
type pipelineOperations struct {
	*Client
}

// CreateOrUpdatePipeline - Creates or updates a pipeline.
func (client *pipelineOperations) BeginCreateOrUpdatePipeline(ctx context.Context, pipelineName string, pipeline PipelineResource, pipelineCreateOrUpdatePipelineOptions *PipelineCreateOrUpdatePipelineOptions) (*PipelineResourcePollerResponse, error) {
	req, err := client.createOrUpdatePipelineCreateRequest(pipelineName, pipeline, pipelineCreateOrUpdatePipelineOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createOrUpdatePipelineHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	poller := &pipelineResourcePoller{
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*PipelineResourceResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *pipelineOperations) ResumeCreateOrUpdatePipeline(token string) (PipelineResourcePoller, error) {
	return nil, nil
}

// createOrUpdatePipelineCreateRequest creates the CreateOrUpdatePipeline request.
func (client *pipelineOperations) createOrUpdatePipelineCreateRequest(pipelineName string, pipeline PipelineResource, pipelineCreateOrUpdatePipelineOptions *PipelineCreateOrUpdatePipelineOptions) (*azcore.Request, error) {
	urlPath := "/pipelines/{pipelineName}"
	urlPath = strings.ReplaceAll(urlPath, "{pipelineName}", url.PathEscape(pipelineName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	if pipelineCreateOrUpdatePipelineOptions != nil && pipelineCreateOrUpdatePipelineOptions.IfMatch != nil {
		req.Header.Set("If-Match", *pipelineCreateOrUpdatePipelineOptions.IfMatch)
	}
	return req, req.MarshalAsJSON(pipeline)
}

// createOrUpdatePipelineHandleResponse handles the CreateOrUpdatePipeline response.
func (client *pipelineOperations) createOrUpdatePipelineHandleResponse(resp *azcore.Response) (*PipelineResourcePollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.createOrUpdatePipelineHandleError(resp)
	}
	return &PipelineResourcePollerResponse{RawResponse: resp.Response}, nil
}

// createOrUpdatePipelineHandleError handles the CreateOrUpdatePipeline error response.
func (client *pipelineOperations) createOrUpdatePipelineHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// CreatePipelineRun - Creates a run of a pipeline.
func (client *pipelineOperations) BeginCreatePipelineRun(ctx context.Context, pipelineName string, pipelineCreatePipelineRunOptions *PipelineCreatePipelineRunOptions) (*CreateRunResponsePollerResponse, error) {
	req, err := client.createPipelineRunCreateRequest(pipelineName, pipelineCreatePipelineRunOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createPipelineRunHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	poller := &createRunResponsePoller{
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*CreateRunResponseResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *pipelineOperations) ResumeCreatePipelineRun(token string) (CreateRunResponsePoller, error) {
	return nil, nil
}

// createPipelineRunCreateRequest creates the CreatePipelineRun request.
func (client *pipelineOperations) createPipelineRunCreateRequest(pipelineName string, pipelineCreatePipelineRunOptions *PipelineCreatePipelineRunOptions) (*azcore.Request, error) {
	urlPath := "/pipelines/{pipelineName}/createRun"
	urlPath = strings.ReplaceAll(urlPath, "{pipelineName}", url.PathEscape(pipelineName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	if pipelineCreatePipelineRunOptions != nil && pipelineCreatePipelineRunOptions.ReferencePipelineRunId != nil {
		query.Set("referencePipelineRunId", *pipelineCreatePipelineRunOptions.ReferencePipelineRunId)
	}
	if pipelineCreatePipelineRunOptions != nil && pipelineCreatePipelineRunOptions.IsRecovery != nil {
		query.Set("isRecovery", strconv.FormatBool(*pipelineCreatePipelineRunOptions.IsRecovery))
	}
	if pipelineCreatePipelineRunOptions != nil && pipelineCreatePipelineRunOptions.StartActivityName != nil {
		query.Set("startActivityName", *pipelineCreatePipelineRunOptions.StartActivityName)
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	if pipelineCreatePipelineRunOptions != nil {
		return req, req.MarshalAsJSON(pipelineCreatePipelineRunOptions.Parameters)
	}
	return req, nil
}

// createPipelineRunHandleResponse handles the CreatePipelineRun response.
func (client *pipelineOperations) createPipelineRunHandleResponse(resp *azcore.Response) (*CreateRunResponsePollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.createPipelineRunHandleError(resp)
	}
	return &CreateRunResponsePollerResponse{RawResponse: resp.Response}, nil
}

// createPipelineRunHandleError handles the CreatePipelineRun error response.
func (client *pipelineOperations) createPipelineRunHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DeletePipeline - Deletes a pipeline.
func (client *pipelineOperations) BeginDeletePipeline(ctx context.Context, pipelineName string) (*HTTPPollerResponse, error) {
	req, err := client.deletePipelineCreateRequest(pipelineName)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deletePipelineHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	poller := &httpPoller{
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *pipelineOperations) ResumeDeletePipeline(token string) (HTTPPoller, error) {
	return nil, nil
}

// deletePipelineCreateRequest creates the DeletePipeline request.
func (client *pipelineOperations) deletePipelineCreateRequest(pipelineName string) (*azcore.Request, error) {
	urlPath := "/pipelines/{pipelineName}"
	urlPath = strings.ReplaceAll(urlPath, "{pipelineName}", url.PathEscape(pipelineName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deletePipelineHandleResponse handles the DeletePipeline response.
func (client *pipelineOperations) deletePipelineHandleResponse(resp *azcore.Response) (*HTTPPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deletePipelineHandleError(resp)
	}
	return &HTTPPollerResponse{RawResponse: resp.Response}, nil
}

// deletePipelineHandleError handles the DeletePipeline error response.
func (client *pipelineOperations) deletePipelineHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetPipeline - Gets a pipeline.
func (client *pipelineOperations) GetPipeline(ctx context.Context, pipelineName string, pipelineGetPipelineOptions *PipelineGetPipelineOptions) (*PipelineResourceResponse, error) {
	req, err := client.getPipelineCreateRequest(pipelineName, pipelineGetPipelineOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getPipelineHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getPipelineCreateRequest creates the GetPipeline request.
func (client *pipelineOperations) getPipelineCreateRequest(pipelineName string, pipelineGetPipelineOptions *PipelineGetPipelineOptions) (*azcore.Request, error) {
	urlPath := "/pipelines/{pipelineName}"
	urlPath = strings.ReplaceAll(urlPath, "{pipelineName}", url.PathEscape(pipelineName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	if pipelineGetPipelineOptions != nil && pipelineGetPipelineOptions.IfNoneMatch != nil {
		req.Header.Set("If-None-Match", *pipelineGetPipelineOptions.IfNoneMatch)
	}
	return req, nil
}

// getPipelineHandleResponse handles the GetPipeline response.
func (client *pipelineOperations) getPipelineHandleResponse(resp *azcore.Response) (*PipelineResourceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusNotModified) {
		return nil, client.getPipelineHandleError(resp)
	}
	result := PipelineResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.PipelineResource)
}

// getPipelineHandleError handles the GetPipeline error response.
func (client *pipelineOperations) getPipelineHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetPipelinesByWorkspace - Lists pipelines.
func (client *pipelineOperations) GetPipelinesByWorkspace() (PipelineListResponsePager, error) {
	req, err := client.getPipelinesByWorkspaceCreateRequest()
	if err != nil {
		return nil, err
	}
	return &pipelineListResponsePager{
		pipeline:  client.p,
		request:   req,
		responder: client.getPipelinesByWorkspaceHandleResponse,
		advancer: func(resp *PipelineListResponseResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.PipelineListResponse.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.PipelineListResponse.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// getPipelinesByWorkspaceCreateRequest creates the GetPipelinesByWorkspace request.
func (client *pipelineOperations) getPipelinesByWorkspaceCreateRequest() (*azcore.Request, error) {
	urlPath := "/pipelines"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getPipelinesByWorkspaceHandleResponse handles the GetPipelinesByWorkspace response.
func (client *pipelineOperations) getPipelinesByWorkspaceHandleResponse(resp *azcore.Response) (*PipelineListResponseResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getPipelinesByWorkspaceHandleError(resp)
	}
	result := PipelineListResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.PipelineListResponse)
}

// getPipelinesByWorkspaceHandleError handles the GetPipelinesByWorkspace error response.
func (client *pipelineOperations) getPipelinesByWorkspaceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
