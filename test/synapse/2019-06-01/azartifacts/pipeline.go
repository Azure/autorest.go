// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// PipelineOperations contains the methods for the Pipeline group.
type PipelineOperations interface {
	// BeginCreateOrUpdatePipeline - Creates or updates a pipeline.
	BeginCreateOrUpdatePipeline(ctx context.Context, pipelineName string, pipeline PipelineResource, pipelineCreateOrUpdatePipelineOptions *PipelineCreateOrUpdatePipelineOptions) (*PipelineResourcePollerResponse, error)
	// ResumeCreateOrUpdatePipeline - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeCreateOrUpdatePipeline(token string) (PipelineResourcePoller, error)
	// CreatePipelineRun - Creates a run of a pipeline.
	CreatePipelineRun(ctx context.Context, pipelineName string, pipelineCreatePipelineRunOptions *PipelineCreatePipelineRunOptions) (*CreateRunResponseResponse, error)
	// BeginDeletePipeline - Deletes a pipeline.
	BeginDeletePipeline(ctx context.Context, pipelineName string) (*HTTPPollerResponse, error)
	// ResumeDeletePipeline - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeDeletePipeline(token string) (HTTPPoller, error)
	// GetPipeline - Gets a pipeline.
	GetPipeline(ctx context.Context, pipelineName string, pipelineGetPipelineOptions *PipelineGetPipelineOptions) (*PipelineResourceResponse, error)
	// GetPipelinesByWorkspace - Lists pipelines.
	GetPipelinesByWorkspace() PipelineListResponsePager
}

// PipelineClient implements the PipelineOperations interface.
// Don't use this type directly, use NewPipelineClient() instead.
type PipelineClient struct {
	*Client
}

// NewPipelineClient creates a new instance of PipelineClient with the specified values.
func NewPipelineClient(c *Client) PipelineOperations {
	return &PipelineClient{Client: c}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *PipelineClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// CreateOrUpdatePipeline - Creates or updates a pipeline.
func (client *PipelineClient) BeginCreateOrUpdatePipeline(ctx context.Context, pipelineName string, pipeline PipelineResource, pipelineCreateOrUpdatePipelineOptions *PipelineCreateOrUpdatePipelineOptions) (*PipelineResourcePollerResponse, error) {
	return nil, errors.New("NYI")
}

func (client *PipelineClient) ResumeCreateOrUpdatePipeline(token string) (PipelineResourcePoller, error) {
	return nil, nil
}

// CreateOrUpdatePipelineCreateRequest creates the CreateOrUpdatePipeline request.
func (client *PipelineClient) CreateOrUpdatePipelineCreateRequest(ctx context.Context, pipelineName string, pipeline PipelineResource, pipelineCreateOrUpdatePipelineOptions *PipelineCreateOrUpdatePipelineOptions) (*azcore.Request, error) {
	urlPath := "/pipelines/{pipelineName}"
	urlPath = strings.ReplaceAll(urlPath, "{pipelineName}", url.PathEscape(pipelineName))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	if pipelineCreateOrUpdatePipelineOptions != nil && pipelineCreateOrUpdatePipelineOptions.IfMatch != nil {
		req.Header.Set("If-Match", *pipelineCreateOrUpdatePipelineOptions.IfMatch)
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(pipeline)
}

// CreateOrUpdatePipelineHandleResponse handles the CreateOrUpdatePipeline response.
func (client *PipelineClient) CreateOrUpdatePipelineHandleResponse(resp *azcore.Response) (*PipelineResourcePollerResponse, error) {
	return &PipelineResourcePollerResponse{RawResponse: resp.Response}, nil
}

// CreateOrUpdatePipelineHandleError handles the CreateOrUpdatePipeline error response.
func (client *PipelineClient) CreateOrUpdatePipelineHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// CreatePipelineRun - Creates a run of a pipeline.
func (client *PipelineClient) CreatePipelineRun(ctx context.Context, pipelineName string, pipelineCreatePipelineRunOptions *PipelineCreatePipelineRunOptions) (*CreateRunResponseResponse, error) {
	req, err := client.CreatePipelineRunCreateRequest(ctx, pipelineName, pipelineCreatePipelineRunOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted) {
		return nil, client.CreatePipelineRunHandleError(resp)
	}
	result, err := client.CreatePipelineRunHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// CreatePipelineRunCreateRequest creates the CreatePipelineRun request.
func (client *PipelineClient) CreatePipelineRunCreateRequest(ctx context.Context, pipelineName string, pipelineCreatePipelineRunOptions *PipelineCreatePipelineRunOptions) (*azcore.Request, error) {
	urlPath := "/pipelines/{pipelineName}/createRun"
	urlPath = strings.ReplaceAll(urlPath, "{pipelineName}", url.PathEscape(pipelineName))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	if pipelineCreatePipelineRunOptions != nil && pipelineCreatePipelineRunOptions.ReferencePipelineRunId != nil {
		query.Set("referencePipelineRunId", *pipelineCreatePipelineRunOptions.ReferencePipelineRunId)
	}
	if pipelineCreatePipelineRunOptions != nil && pipelineCreatePipelineRunOptions.IsRecovery != nil {
		query.Set("isRecovery", strconv.FormatBool(*pipelineCreatePipelineRunOptions.IsRecovery))
	}
	if pipelineCreatePipelineRunOptions != nil && pipelineCreatePipelineRunOptions.StartActivityName != nil {
		query.Set("startActivityName", *pipelineCreatePipelineRunOptions.StartActivityName)
	}
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	if pipelineCreatePipelineRunOptions != nil {
		return req, req.MarshalAsJSON(pipelineCreatePipelineRunOptions.Parameters)
	}
	return req, nil
}

// CreatePipelineRunHandleResponse handles the CreatePipelineRun response.
func (client *PipelineClient) CreatePipelineRunHandleResponse(resp *azcore.Response) (*CreateRunResponseResponse, error) {
	result := CreateRunResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.CreateRunResponse)
}

// CreatePipelineRunHandleError handles the CreatePipelineRun error response.
func (client *PipelineClient) CreatePipelineRunHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DeletePipeline - Deletes a pipeline.
func (client *PipelineClient) BeginDeletePipeline(ctx context.Context, pipelineName string) (*HTTPPollerResponse, error) {
	return nil, errors.New("NYI")
}

func (client *PipelineClient) ResumeDeletePipeline(token string) (HTTPPoller, error) {
	return nil, nil
}

// DeletePipelineCreateRequest creates the DeletePipeline request.
func (client *PipelineClient) DeletePipelineCreateRequest(ctx context.Context, pipelineName string) (*azcore.Request, error) {
	urlPath := "/pipelines/{pipelineName}"
	urlPath = strings.ReplaceAll(urlPath, "{pipelineName}", url.PathEscape(pipelineName))
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// DeletePipelineHandleResponse handles the DeletePipeline response.
func (client *PipelineClient) DeletePipelineHandleResponse(resp *azcore.Response) (*HTTPPollerResponse, error) {
	return &HTTPPollerResponse{RawResponse: resp.Response}, nil
}

// DeletePipelineHandleError handles the DeletePipeline error response.
func (client *PipelineClient) DeletePipelineHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetPipeline - Gets a pipeline.
func (client *PipelineClient) GetPipeline(ctx context.Context, pipelineName string, pipelineGetPipelineOptions *PipelineGetPipelineOptions) (*PipelineResourceResponse, error) {
	req, err := client.GetPipelineCreateRequest(ctx, pipelineName, pipelineGetPipelineOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusNotModified) {
		return nil, client.GetPipelineHandleError(resp)
	}
	result, err := client.GetPipelineHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetPipelineCreateRequest creates the GetPipeline request.
func (client *PipelineClient) GetPipelineCreateRequest(ctx context.Context, pipelineName string, pipelineGetPipelineOptions *PipelineGetPipelineOptions) (*azcore.Request, error) {
	urlPath := "/pipelines/{pipelineName}"
	urlPath = strings.ReplaceAll(urlPath, "{pipelineName}", url.PathEscape(pipelineName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	if pipelineGetPipelineOptions != nil && pipelineGetPipelineOptions.IfNoneMatch != nil {
		req.Header.Set("If-None-Match", *pipelineGetPipelineOptions.IfNoneMatch)
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetPipelineHandleResponse handles the GetPipeline response.
func (client *PipelineClient) GetPipelineHandleResponse(resp *azcore.Response) (*PipelineResourceResponse, error) {
	result := PipelineResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.PipelineResource)
}

// GetPipelineHandleError handles the GetPipeline error response.
func (client *PipelineClient) GetPipelineHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetPipelinesByWorkspace - Lists pipelines.
func (client *PipelineClient) GetPipelinesByWorkspace() PipelineListResponsePager {
	return &pipelineListResponsePager{
		pipeline: client.p,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.GetPipelinesByWorkspaceCreateRequest(ctx)
		},
		responder: client.GetPipelinesByWorkspaceHandleResponse,
		errorer:   client.GetPipelinesByWorkspaceHandleError,
		advancer: func(ctx context.Context, resp *PipelineListResponseResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.PipelineListResponse.NextLink)
		},
	}
}

// GetPipelinesByWorkspaceCreateRequest creates the GetPipelinesByWorkspace request.
func (client *PipelineClient) GetPipelinesByWorkspaceCreateRequest(ctx context.Context) (*azcore.Request, error) {
	urlPath := "/pipelines"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetPipelinesByWorkspaceHandleResponse handles the GetPipelinesByWorkspace response.
func (client *PipelineClient) GetPipelinesByWorkspaceHandleResponse(resp *azcore.Response) (*PipelineListResponseResponse, error) {
	result := PipelineListResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.PipelineListResponse)
}

// GetPipelinesByWorkspaceHandleError handles the GetPipelinesByWorkspace error response.
func (client *PipelineClient) GetPipelinesByWorkspaceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
