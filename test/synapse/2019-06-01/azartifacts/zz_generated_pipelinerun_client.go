//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

type pipelineRunClient struct {
	endpoint string
	pl       runtime.Pipeline
}

// newPipelineRunClient creates a new instance of pipelineRunClient with the specified values.
func newPipelineRunClient(endpoint string, pl runtime.Pipeline) *pipelineRunClient {
	client := &pipelineRunClient{
		endpoint: endpoint,
		pl:       pl,
	}
	return client
}

// CancelPipelineRun - Cancel a pipeline run by its run ID.
// If the operation fails it returns the *CloudError error type.
func (client *pipelineRunClient) CancelPipelineRun(ctx context.Context, runID string, options *PipelineRunCancelPipelineRunOptions) (PipelineRunCancelPipelineRunResponse, error) {
	req, err := client.cancelPipelineRunCreateRequest(ctx, runID, options)
	if err != nil {
		return PipelineRunCancelPipelineRunResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PipelineRunCancelPipelineRunResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PipelineRunCancelPipelineRunResponse{}, client.cancelPipelineRunHandleError(resp)
	}
	return PipelineRunCancelPipelineRunResponse{RawResponse: resp}, nil
}

// cancelPipelineRunCreateRequest creates the CancelPipelineRun request.
func (client *pipelineRunClient) cancelPipelineRunCreateRequest(ctx context.Context, runID string, options *PipelineRunCancelPipelineRunOptions) (*policy.Request, error) {
	urlPath := "/pipelineruns/{runId}/cancel"
	if runID == "" {
		return nil, errors.New("parameter runID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{runId}", url.PathEscape(runID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.IsRecursive != nil {
		reqQP.Set("isRecursive", strconv.FormatBool(*options.IsRecursive))
	}
	reqQP.Set("api-version", "2019-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// cancelPipelineRunHandleError handles the CancelPipelineRun error response.
func (client *pipelineRunClient) cancelPipelineRunHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType.InnerError); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetPipelineRun - Get a pipeline run by its run ID.
// If the operation fails it returns the *CloudError error type.
func (client *pipelineRunClient) GetPipelineRun(ctx context.Context, runID string, options *PipelineRunGetPipelineRunOptions) (PipelineRunGetPipelineRunResponse, error) {
	req, err := client.getPipelineRunCreateRequest(ctx, runID, options)
	if err != nil {
		return PipelineRunGetPipelineRunResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PipelineRunGetPipelineRunResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PipelineRunGetPipelineRunResponse{}, client.getPipelineRunHandleError(resp)
	}
	return client.getPipelineRunHandleResponse(resp)
}

// getPipelineRunCreateRequest creates the GetPipelineRun request.
func (client *pipelineRunClient) getPipelineRunCreateRequest(ctx context.Context, runID string, options *PipelineRunGetPipelineRunOptions) (*policy.Request, error) {
	urlPath := "/pipelineruns/{runId}"
	if runID == "" {
		return nil, errors.New("parameter runID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{runId}", url.PathEscape(runID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getPipelineRunHandleResponse handles the GetPipelineRun response.
func (client *pipelineRunClient) getPipelineRunHandleResponse(resp *http.Response) (PipelineRunGetPipelineRunResponse, error) {
	result := PipelineRunGetPipelineRunResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PipelineRun); err != nil {
		return PipelineRunGetPipelineRunResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getPipelineRunHandleError handles the GetPipelineRun error response.
func (client *pipelineRunClient) getPipelineRunHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType.InnerError); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// QueryActivityRuns - Query activity runs based on input filter conditions.
// If the operation fails it returns the *CloudError error type.
func (client *pipelineRunClient) QueryActivityRuns(ctx context.Context, pipelineName string, runID string, filterParameters RunFilterParameters, options *PipelineRunQueryActivityRunsOptions) (PipelineRunQueryActivityRunsResponse, error) {
	req, err := client.queryActivityRunsCreateRequest(ctx, pipelineName, runID, filterParameters, options)
	if err != nil {
		return PipelineRunQueryActivityRunsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PipelineRunQueryActivityRunsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PipelineRunQueryActivityRunsResponse{}, client.queryActivityRunsHandleError(resp)
	}
	return client.queryActivityRunsHandleResponse(resp)
}

// queryActivityRunsCreateRequest creates the QueryActivityRuns request.
func (client *pipelineRunClient) queryActivityRunsCreateRequest(ctx context.Context, pipelineName string, runID string, filterParameters RunFilterParameters, options *PipelineRunQueryActivityRunsOptions) (*policy.Request, error) {
	urlPath := "/pipelines/{pipelineName}/pipelineruns/{runId}/queryActivityruns"
	if pipelineName == "" {
		return nil, errors.New("parameter pipelineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{pipelineName}", url.PathEscape(pipelineName))
	if runID == "" {
		return nil, errors.New("parameter runID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{runId}", url.PathEscape(runID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, filterParameters)
}

// queryActivityRunsHandleResponse handles the QueryActivityRuns response.
func (client *pipelineRunClient) queryActivityRunsHandleResponse(resp *http.Response) (PipelineRunQueryActivityRunsResponse, error) {
	result := PipelineRunQueryActivityRunsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ActivityRunsQueryResponse); err != nil {
		return PipelineRunQueryActivityRunsResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// queryActivityRunsHandleError handles the QueryActivityRuns error response.
func (client *pipelineRunClient) queryActivityRunsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType.InnerError); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// QueryPipelineRunsByWorkspace - Query pipeline runs in the workspace based on input filter conditions.
// If the operation fails it returns the *CloudError error type.
func (client *pipelineRunClient) QueryPipelineRunsByWorkspace(ctx context.Context, filterParameters RunFilterParameters, options *PipelineRunQueryPipelineRunsByWorkspaceOptions) (PipelineRunQueryPipelineRunsByWorkspaceResponse, error) {
	req, err := client.queryPipelineRunsByWorkspaceCreateRequest(ctx, filterParameters, options)
	if err != nil {
		return PipelineRunQueryPipelineRunsByWorkspaceResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PipelineRunQueryPipelineRunsByWorkspaceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PipelineRunQueryPipelineRunsByWorkspaceResponse{}, client.queryPipelineRunsByWorkspaceHandleError(resp)
	}
	return client.queryPipelineRunsByWorkspaceHandleResponse(resp)
}

// queryPipelineRunsByWorkspaceCreateRequest creates the QueryPipelineRunsByWorkspace request.
func (client *pipelineRunClient) queryPipelineRunsByWorkspaceCreateRequest(ctx context.Context, filterParameters RunFilterParameters, options *PipelineRunQueryPipelineRunsByWorkspaceOptions) (*policy.Request, error) {
	urlPath := "/queryPipelineRuns"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, filterParameters)
}

// queryPipelineRunsByWorkspaceHandleResponse handles the QueryPipelineRunsByWorkspace response.
func (client *pipelineRunClient) queryPipelineRunsByWorkspaceHandleResponse(resp *http.Response) (PipelineRunQueryPipelineRunsByWorkspaceResponse, error) {
	result := PipelineRunQueryPipelineRunsByWorkspaceResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PipelineRunsQueryResponse); err != nil {
		return PipelineRunQueryPipelineRunsByWorkspaceResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// queryPipelineRunsByWorkspaceHandleError handles the QueryPipelineRunsByWorkspace error response.
func (client *pipelineRunClient) queryPipelineRunsByWorkspaceHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType.InnerError); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
