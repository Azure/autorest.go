// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"path"
	"strconv"
	"strings"
)

// PipelineRunOperations contains the methods for the PipelineRun group.
type PipelineRunOperations interface {
	// CancelPipelineRun - Cancel a pipeline run by its run ID.
	CancelPipelineRun(ctx context.Context, runId string, pipelineRunCancelPipelineRunOptions *PipelineRunCancelPipelineRunOptions) (*http.Response, error)
	// GetPipelineRun - Get a pipeline run by its run ID.
	GetPipelineRun(ctx context.Context, runId string) (*PipelineRunResponse, error)
	// QueryActivityRuns - Query activity runs based on input filter conditions.
	QueryActivityRuns(ctx context.Context, pipelineName string, runId string, filterParameters RunFilterParameters) (*ActivityRunsQueryResponseResponse, error)
	// QueryPipelineRunsByWorkspace - Query pipeline runs in the workspace based on input filter conditions.
	QueryPipelineRunsByWorkspace(ctx context.Context, filterParameters RunFilterParameters) (*PipelineRunsQueryResponseResponse, error)
}

// pipelineRunOperations implements the PipelineRunOperations interface.
type pipelineRunOperations struct {
	*Client
}

// CancelPipelineRun - Cancel a pipeline run by its run ID.
func (client *pipelineRunOperations) CancelPipelineRun(ctx context.Context, runId string, pipelineRunCancelPipelineRunOptions *PipelineRunCancelPipelineRunOptions) (*http.Response, error) {
	req, err := client.cancelPipelineRunCreateRequest(runId, pipelineRunCancelPipelineRunOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.cancelPipelineRunHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// cancelPipelineRunCreateRequest creates the CancelPipelineRun request.
func (client *pipelineRunOperations) cancelPipelineRunCreateRequest(runId string, pipelineRunCancelPipelineRunOptions *PipelineRunCancelPipelineRunOptions) (*azcore.Request, error) {
	urlPath := "/pipelineruns/{runId}/cancel"
	urlPath = strings.ReplaceAll(urlPath, "{runId}", url.PathEscape(runId))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if pipelineRunCancelPipelineRunOptions != nil && pipelineRunCancelPipelineRunOptions.IsRecursive != nil {
		query.Set("isRecursive", strconv.FormatBool(*pipelineRunCancelPipelineRunOptions.IsRecursive))
	}
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// cancelPipelineRunHandleResponse handles the CancelPipelineRun response.
func (client *pipelineRunOperations) cancelPipelineRunHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.cancelPipelineRunHandleError(resp)
	}
	return resp.Response, nil
}

// cancelPipelineRunHandleError handles the CancelPipelineRun error response.
func (client *pipelineRunOperations) cancelPipelineRunHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetPipelineRun - Get a pipeline run by its run ID.
func (client *pipelineRunOperations) GetPipelineRun(ctx context.Context, runId string) (*PipelineRunResponse, error) {
	req, err := client.getPipelineRunCreateRequest(runId)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getPipelineRunHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getPipelineRunCreateRequest creates the GetPipelineRun request.
func (client *pipelineRunOperations) getPipelineRunCreateRequest(runId string) (*azcore.Request, error) {
	urlPath := "/pipelineruns/{runId}"
	urlPath = strings.ReplaceAll(urlPath, "{runId}", url.PathEscape(runId))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getPipelineRunHandleResponse handles the GetPipelineRun response.
func (client *pipelineRunOperations) getPipelineRunHandleResponse(resp *azcore.Response) (*PipelineRunResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getPipelineRunHandleError(resp)
	}
	result := PipelineRunResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.PipelineRun)
}

// getPipelineRunHandleError handles the GetPipelineRun error response.
func (client *pipelineRunOperations) getPipelineRunHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// QueryActivityRuns - Query activity runs based on input filter conditions.
func (client *pipelineRunOperations) QueryActivityRuns(ctx context.Context, pipelineName string, runId string, filterParameters RunFilterParameters) (*ActivityRunsQueryResponseResponse, error) {
	req, err := client.queryActivityRunsCreateRequest(pipelineName, runId, filterParameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.queryActivityRunsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// queryActivityRunsCreateRequest creates the QueryActivityRuns request.
func (client *pipelineRunOperations) queryActivityRunsCreateRequest(pipelineName string, runId string, filterParameters RunFilterParameters) (*azcore.Request, error) {
	urlPath := "/pipelines/{pipelineName}/pipelineruns/{runId}/queryActivityruns"
	urlPath = strings.ReplaceAll(urlPath, "{pipelineName}", url.PathEscape(pipelineName))
	urlPath = strings.ReplaceAll(urlPath, "{runId}", url.PathEscape(runId))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(filterParameters)
}

// queryActivityRunsHandleResponse handles the QueryActivityRuns response.
func (client *pipelineRunOperations) queryActivityRunsHandleResponse(resp *azcore.Response) (*ActivityRunsQueryResponseResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.queryActivityRunsHandleError(resp)
	}
	result := ActivityRunsQueryResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ActivityRunsQueryResponse)
}

// queryActivityRunsHandleError handles the QueryActivityRuns error response.
func (client *pipelineRunOperations) queryActivityRunsHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// QueryPipelineRunsByWorkspace - Query pipeline runs in the workspace based on input filter conditions.
func (client *pipelineRunOperations) QueryPipelineRunsByWorkspace(ctx context.Context, filterParameters RunFilterParameters) (*PipelineRunsQueryResponseResponse, error) {
	req, err := client.queryPipelineRunsByWorkspaceCreateRequest(filterParameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.queryPipelineRunsByWorkspaceHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// queryPipelineRunsByWorkspaceCreateRequest creates the QueryPipelineRunsByWorkspace request.
func (client *pipelineRunOperations) queryPipelineRunsByWorkspaceCreateRequest(filterParameters RunFilterParameters) (*azcore.Request, error) {
	urlPath := "/queryPipelineRuns"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(filterParameters)
}

// queryPipelineRunsByWorkspaceHandleResponse handles the QueryPipelineRunsByWorkspace response.
func (client *pipelineRunOperations) queryPipelineRunsByWorkspaceHandleResponse(resp *azcore.Response) (*PipelineRunsQueryResponseResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.queryPipelineRunsByWorkspaceHandleError(resp)
	}
	result := PipelineRunsQueryResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.PipelineRunsQueryResponse)
}

// queryPipelineRunsByWorkspaceHandleError handles the QueryPipelineRunsByWorkspace error response.
func (client *pipelineRunOperations) queryPipelineRunsByWorkspaceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
