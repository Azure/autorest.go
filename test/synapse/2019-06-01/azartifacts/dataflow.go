// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"path"
	"strings"
)

// DataFlowOperations contains the methods for the DataFlow group.
type DataFlowOperations interface {
	// CreateOrUpdateDataFlow - Creates or updates a data flow.
	CreateOrUpdateDataFlow(ctx context.Context, dataFlowName string, dataFlow DataFlowResource, dataFlowCreateOrUpdateDataFlowOptions *DataFlowCreateOrUpdateDataFlowOptions) (*DataFlowResourceResponse, error)
	// DeleteDataFlow - Deletes a data flow.
	DeleteDataFlow(ctx context.Context, dataFlowName string) (*http.Response, error)
	// GetDataFlow - Gets a data flow.
	GetDataFlow(ctx context.Context, dataFlowName string, dataFlowGetDataFlowOptions *DataFlowGetDataFlowOptions) (*DataFlowResourceResponse, error)
	// GetDataFlowsByWorkspace - Lists data flows.
	GetDataFlowsByWorkspace() (DataFlowListResponsePager, error)
}

// dataFlowOperations implements the DataFlowOperations interface.
type dataFlowOperations struct {
	*Client
}

// CreateOrUpdateDataFlow - Creates or updates a data flow.
func (client *dataFlowOperations) CreateOrUpdateDataFlow(ctx context.Context, dataFlowName string, dataFlow DataFlowResource, dataFlowCreateOrUpdateDataFlowOptions *DataFlowCreateOrUpdateDataFlowOptions) (*DataFlowResourceResponse, error) {
	req, err := client.createOrUpdateDataFlowCreateRequest(dataFlowName, dataFlow, dataFlowCreateOrUpdateDataFlowOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createOrUpdateDataFlowHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// createOrUpdateDataFlowCreateRequest creates the CreateOrUpdateDataFlow request.
func (client *dataFlowOperations) createOrUpdateDataFlowCreateRequest(dataFlowName string, dataFlow DataFlowResource, dataFlowCreateOrUpdateDataFlowOptions *DataFlowCreateOrUpdateDataFlowOptions) (*azcore.Request, error) {
	urlPath := "/dataflows/{dataFlowName}"
	urlPath = strings.ReplaceAll(urlPath, "{dataFlowName}", url.PathEscape(dataFlowName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	if dataFlowCreateOrUpdateDataFlowOptions != nil && dataFlowCreateOrUpdateDataFlowOptions.IfMatch != nil {
		req.Header.Set("If-Match", *dataFlowCreateOrUpdateDataFlowOptions.IfMatch)
	}
	return req, req.MarshalAsJSON(dataFlow)
}

// createOrUpdateDataFlowHandleResponse handles the CreateOrUpdateDataFlow response.
func (client *dataFlowOperations) createOrUpdateDataFlowHandleResponse(resp *azcore.Response) (*DataFlowResourceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.createOrUpdateDataFlowHandleError(resp)
	}
	result := DataFlowResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.DataFlowResource)
}

// createOrUpdateDataFlowHandleError handles the CreateOrUpdateDataFlow error response.
func (client *dataFlowOperations) createOrUpdateDataFlowHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DeleteDataFlow - Deletes a data flow.
func (client *dataFlowOperations) DeleteDataFlow(ctx context.Context, dataFlowName string) (*http.Response, error) {
	req, err := client.deleteDataFlowCreateRequest(dataFlowName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteDataFlowHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// deleteDataFlowCreateRequest creates the DeleteDataFlow request.
func (client *dataFlowOperations) deleteDataFlowCreateRequest(dataFlowName string) (*azcore.Request, error) {
	urlPath := "/dataflows/{dataFlowName}"
	urlPath = strings.ReplaceAll(urlPath, "{dataFlowName}", url.PathEscape(dataFlowName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteDataFlowHandleResponse handles the DeleteDataFlow response.
func (client *dataFlowOperations) deleteDataFlowHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.deleteDataFlowHandleError(resp)
	}
	return resp.Response, nil
}

// deleteDataFlowHandleError handles the DeleteDataFlow error response.
func (client *dataFlowOperations) deleteDataFlowHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDataFlow - Gets a data flow.
func (client *dataFlowOperations) GetDataFlow(ctx context.Context, dataFlowName string, dataFlowGetDataFlowOptions *DataFlowGetDataFlowOptions) (*DataFlowResourceResponse, error) {
	req, err := client.getDataFlowCreateRequest(dataFlowName, dataFlowGetDataFlowOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDataFlowHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDataFlowCreateRequest creates the GetDataFlow request.
func (client *dataFlowOperations) getDataFlowCreateRequest(dataFlowName string, dataFlowGetDataFlowOptions *DataFlowGetDataFlowOptions) (*azcore.Request, error) {
	urlPath := "/dataflows/{dataFlowName}"
	urlPath = strings.ReplaceAll(urlPath, "{dataFlowName}", url.PathEscape(dataFlowName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	if dataFlowGetDataFlowOptions != nil && dataFlowGetDataFlowOptions.IfNoneMatch != nil {
		req.Header.Set("If-None-Match", *dataFlowGetDataFlowOptions.IfNoneMatch)
	}
	return req, nil
}

// getDataFlowHandleResponse handles the GetDataFlow response.
func (client *dataFlowOperations) getDataFlowHandleResponse(resp *azcore.Response) (*DataFlowResourceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDataFlowHandleError(resp)
	}
	result := DataFlowResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.DataFlowResource)
}

// getDataFlowHandleError handles the GetDataFlow error response.
func (client *dataFlowOperations) getDataFlowHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDataFlowsByWorkspace - Lists data flows.
func (client *dataFlowOperations) GetDataFlowsByWorkspace() (DataFlowListResponsePager, error) {
	req, err := client.getDataFlowsByWorkspaceCreateRequest()
	if err != nil {
		return nil, err
	}
	return &dataFlowListResponsePager{
		pipeline:  client.p,
		request:   req,
		responder: client.getDataFlowsByWorkspaceHandleResponse,
		advancer: func(resp *DataFlowListResponseResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.DataFlowListResponse.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.DataFlowListResponse.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// getDataFlowsByWorkspaceCreateRequest creates the GetDataFlowsByWorkspace request.
func (client *dataFlowOperations) getDataFlowsByWorkspaceCreateRequest() (*azcore.Request, error) {
	urlPath := "/dataflows"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDataFlowsByWorkspaceHandleResponse handles the GetDataFlowsByWorkspace response.
func (client *dataFlowOperations) getDataFlowsByWorkspaceHandleResponse(resp *azcore.Response) (*DataFlowListResponseResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDataFlowsByWorkspaceHandleError(resp)
	}
	result := DataFlowListResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.DataFlowListResponse)
}

// getDataFlowsByWorkspaceHandleError handles the GetDataFlowsByWorkspace error response.
func (client *dataFlowOperations) getDataFlowsByWorkspaceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
