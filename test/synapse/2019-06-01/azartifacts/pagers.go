// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
)

// DataFlowListResponsePager provides iteration over DataFlowListResponse pages.
type DataFlowListResponsePager interface {
	// NextPage returns true if the pager advanced to the next page.
	// Returns false if there are no more pages or an error occurred.
	NextPage(context.Context) bool

	// Page returns the current DataFlowListResponseResponse.
	PageResponse() *DataFlowListResponseResponse

	// Err returns the last error encountered while paging.
	Err() error
}

type dataFlowListResponseHandleResponse func(*azcore.Response) (*DataFlowListResponseResponse, error)

type dataFlowListResponseAdvancePage func(*DataFlowListResponseResponse) (*azcore.Request, error)

type dataFlowListResponsePager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// contains the pending request
	request *azcore.Request
	// callback for handling the HTTP response
	responder dataFlowListResponseHandleResponse
	// callback for advancing to the next page
	advancer dataFlowListResponseAdvancePage
	// contains the current response
	current *DataFlowListResponseResponse
	// any error encountered
	err error
}

func (p *dataFlowListResponsePager) Err() error {
	return p.err
}

func (p *dataFlowListResponsePager) NextPage(ctx context.Context) bool {
	if p.current != nil {
		if p.current.DataFlowListResponse.NextLink == nil || len(*p.current.DataFlowListResponse.NextLink) == 0 {
			return false
		}
		req, err := p.advancer(p.current)
		if err != nil {
			p.err = err
			return false
		}
		p.request = req
	}
	resp, err := p.pipeline.Do(ctx, p.request)
	if err != nil {
		p.err = err
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *dataFlowListResponsePager) PageResponse() *DataFlowListResponseResponse {
	return p.current
}

// DatasetListResponsePager provides iteration over DatasetListResponse pages.
type DatasetListResponsePager interface {
	// NextPage returns true if the pager advanced to the next page.
	// Returns false if there are no more pages or an error occurred.
	NextPage(context.Context) bool

	// Page returns the current DatasetListResponseResponse.
	PageResponse() *DatasetListResponseResponse

	// Err returns the last error encountered while paging.
	Err() error
}

type datasetListResponseHandleResponse func(*azcore.Response) (*DatasetListResponseResponse, error)

type datasetListResponseAdvancePage func(*DatasetListResponseResponse) (*azcore.Request, error)

type datasetListResponsePager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// contains the pending request
	request *azcore.Request
	// callback for handling the HTTP response
	responder datasetListResponseHandleResponse
	// callback for advancing to the next page
	advancer datasetListResponseAdvancePage
	// contains the current response
	current *DatasetListResponseResponse
	// any error encountered
	err error
}

func (p *datasetListResponsePager) Err() error {
	return p.err
}

func (p *datasetListResponsePager) NextPage(ctx context.Context) bool {
	if p.current != nil {
		if p.current.DatasetListResponse.NextLink == nil || len(*p.current.DatasetListResponse.NextLink) == 0 {
			return false
		}
		req, err := p.advancer(p.current)
		if err != nil {
			p.err = err
			return false
		}
		p.request = req
	}
	resp, err := p.pipeline.Do(ctx, p.request)
	if err != nil {
		p.err = err
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *datasetListResponsePager) PageResponse() *DatasetListResponseResponse {
	return p.current
}

// LinkedServiceListResponsePager provides iteration over LinkedServiceListResponse pages.
type LinkedServiceListResponsePager interface {
	// NextPage returns true if the pager advanced to the next page.
	// Returns false if there are no more pages or an error occurred.
	NextPage(context.Context) bool

	// Page returns the current LinkedServiceListResponseResponse.
	PageResponse() *LinkedServiceListResponseResponse

	// Err returns the last error encountered while paging.
	Err() error
}

type linkedServiceListResponseHandleResponse func(*azcore.Response) (*LinkedServiceListResponseResponse, error)

type linkedServiceListResponseAdvancePage func(*LinkedServiceListResponseResponse) (*azcore.Request, error)

type linkedServiceListResponsePager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// contains the pending request
	request *azcore.Request
	// callback for handling the HTTP response
	responder linkedServiceListResponseHandleResponse
	// callback for advancing to the next page
	advancer linkedServiceListResponseAdvancePage
	// contains the current response
	current *LinkedServiceListResponseResponse
	// any error encountered
	err error
}

func (p *linkedServiceListResponsePager) Err() error {
	return p.err
}

func (p *linkedServiceListResponsePager) NextPage(ctx context.Context) bool {
	if p.current != nil {
		if p.current.LinkedServiceListResponse.NextLink == nil || len(*p.current.LinkedServiceListResponse.NextLink) == 0 {
			return false
		}
		req, err := p.advancer(p.current)
		if err != nil {
			p.err = err
			return false
		}
		p.request = req
	}
	resp, err := p.pipeline.Do(ctx, p.request)
	if err != nil {
		p.err = err
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *linkedServiceListResponsePager) PageResponse() *LinkedServiceListResponseResponse {
	return p.current
}

// NotebookListResponsePager provides iteration over NotebookListResponse pages.
type NotebookListResponsePager interface {
	// NextPage returns true if the pager advanced to the next page.
	// Returns false if there are no more pages or an error occurred.
	NextPage(context.Context) bool

	// Page returns the current NotebookListResponseResponse.
	PageResponse() *NotebookListResponseResponse

	// Err returns the last error encountered while paging.
	Err() error
}

type notebookListResponseHandleResponse func(*azcore.Response) (*NotebookListResponseResponse, error)

type notebookListResponseAdvancePage func(*NotebookListResponseResponse) (*azcore.Request, error)

type notebookListResponsePager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// contains the pending request
	request *azcore.Request
	// callback for handling the HTTP response
	responder notebookListResponseHandleResponse
	// callback for advancing to the next page
	advancer notebookListResponseAdvancePage
	// contains the current response
	current *NotebookListResponseResponse
	// any error encountered
	err error
}

func (p *notebookListResponsePager) Err() error {
	return p.err
}

func (p *notebookListResponsePager) NextPage(ctx context.Context) bool {
	if p.current != nil {
		if p.current.NotebookListResponse.NextLink == nil || len(*p.current.NotebookListResponse.NextLink) == 0 {
			return false
		}
		req, err := p.advancer(p.current)
		if err != nil {
			p.err = err
			return false
		}
		p.request = req
	}
	resp, err := p.pipeline.Do(ctx, p.request)
	if err != nil {
		p.err = err
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *notebookListResponsePager) PageResponse() *NotebookListResponseResponse {
	return p.current
}

// PipelineListResponsePager provides iteration over PipelineListResponse pages.
type PipelineListResponsePager interface {
	// NextPage returns true if the pager advanced to the next page.
	// Returns false if there are no more pages or an error occurred.
	NextPage(context.Context) bool

	// Page returns the current PipelineListResponseResponse.
	PageResponse() *PipelineListResponseResponse

	// Err returns the last error encountered while paging.
	Err() error
}

type pipelineListResponseHandleResponse func(*azcore.Response) (*PipelineListResponseResponse, error)

type pipelineListResponseAdvancePage func(*PipelineListResponseResponse) (*azcore.Request, error)

type pipelineListResponsePager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// contains the pending request
	request *azcore.Request
	// callback for handling the HTTP response
	responder pipelineListResponseHandleResponse
	// callback for advancing to the next page
	advancer pipelineListResponseAdvancePage
	// contains the current response
	current *PipelineListResponseResponse
	// any error encountered
	err error
}

func (p *pipelineListResponsePager) Err() error {
	return p.err
}

func (p *pipelineListResponsePager) NextPage(ctx context.Context) bool {
	if p.current != nil {
		if p.current.PipelineListResponse.NextLink == nil || len(*p.current.PipelineListResponse.NextLink) == 0 {
			return false
		}
		req, err := p.advancer(p.current)
		if err != nil {
			p.err = err
			return false
		}
		p.request = req
	}
	resp, err := p.pipeline.Do(ctx, p.request)
	if err != nil {
		p.err = err
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *pipelineListResponsePager) PageResponse() *PipelineListResponseResponse {
	return p.current
}

// QueryDataFlowDebugSessionsResponsePager provides iteration over QueryDataFlowDebugSessionsResponse pages.
type QueryDataFlowDebugSessionsResponsePager interface {
	// NextPage returns true if the pager advanced to the next page.
	// Returns false if there are no more pages or an error occurred.
	NextPage(context.Context) bool

	// Page returns the current QueryDataFlowDebugSessionsResponseResponse.
	PageResponse() *QueryDataFlowDebugSessionsResponseResponse

	// Err returns the last error encountered while paging.
	Err() error
}

type queryDataFlowDebugSessionsResponseHandleResponse func(*azcore.Response) (*QueryDataFlowDebugSessionsResponseResponse, error)

type queryDataFlowDebugSessionsResponseAdvancePage func(*QueryDataFlowDebugSessionsResponseResponse) (*azcore.Request, error)

type queryDataFlowDebugSessionsResponsePager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// contains the pending request
	request *azcore.Request
	// callback for handling the HTTP response
	responder queryDataFlowDebugSessionsResponseHandleResponse
	// callback for advancing to the next page
	advancer queryDataFlowDebugSessionsResponseAdvancePage
	// contains the current response
	current *QueryDataFlowDebugSessionsResponseResponse
	// any error encountered
	err error
}

func (p *queryDataFlowDebugSessionsResponsePager) Err() error {
	return p.err
}

func (p *queryDataFlowDebugSessionsResponsePager) NextPage(ctx context.Context) bool {
	if p.current != nil {
		if p.current.QueryDataFlowDebugSessionsResponse.NextLink == nil || len(*p.current.QueryDataFlowDebugSessionsResponse.NextLink) == 0 {
			return false
		}
		req, err := p.advancer(p.current)
		if err != nil {
			p.err = err
			return false
		}
		p.request = req
	}
	resp, err := p.pipeline.Do(ctx, p.request)
	if err != nil {
		p.err = err
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *queryDataFlowDebugSessionsResponsePager) PageResponse() *QueryDataFlowDebugSessionsResponseResponse {
	return p.current
}

// SQLScriptsListResponsePager provides iteration over SQLScriptsListResponse pages.
type SQLScriptsListResponsePager interface {
	// NextPage returns true if the pager advanced to the next page.
	// Returns false if there are no more pages or an error occurred.
	NextPage(context.Context) bool

	// Page returns the current SQLScriptsListResponseResponse.
	PageResponse() *SQLScriptsListResponseResponse

	// Err returns the last error encountered while paging.
	Err() error
}

type sqlScriptsListResponseHandleResponse func(*azcore.Response) (*SQLScriptsListResponseResponse, error)

type sqlScriptsListResponseAdvancePage func(*SQLScriptsListResponseResponse) (*azcore.Request, error)

type sqlScriptsListResponsePager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// contains the pending request
	request *azcore.Request
	// callback for handling the HTTP response
	responder sqlScriptsListResponseHandleResponse
	// callback for advancing to the next page
	advancer sqlScriptsListResponseAdvancePage
	// contains the current response
	current *SQLScriptsListResponseResponse
	// any error encountered
	err error
}

func (p *sqlScriptsListResponsePager) Err() error {
	return p.err
}

func (p *sqlScriptsListResponsePager) NextPage(ctx context.Context) bool {
	if p.current != nil {
		if p.current.SQLScriptsListResponse.NextLink == nil || len(*p.current.SQLScriptsListResponse.NextLink) == 0 {
			return false
		}
		req, err := p.advancer(p.current)
		if err != nil {
			p.err = err
			return false
		}
		p.request = req
	}
	resp, err := p.pipeline.Do(ctx, p.request)
	if err != nil {
		p.err = err
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *sqlScriptsListResponsePager) PageResponse() *SQLScriptsListResponseResponse {
	return p.current
}

// SparkJobDefinitionsListResponsePager provides iteration over SparkJobDefinitionsListResponse pages.
type SparkJobDefinitionsListResponsePager interface {
	// NextPage returns true if the pager advanced to the next page.
	// Returns false if there are no more pages or an error occurred.
	NextPage(context.Context) bool

	// Page returns the current SparkJobDefinitionsListResponseResponse.
	PageResponse() *SparkJobDefinitionsListResponseResponse

	// Err returns the last error encountered while paging.
	Err() error
}

type sparkJobDefinitionsListResponseHandleResponse func(*azcore.Response) (*SparkJobDefinitionsListResponseResponse, error)

type sparkJobDefinitionsListResponseAdvancePage func(*SparkJobDefinitionsListResponseResponse) (*azcore.Request, error)

type sparkJobDefinitionsListResponsePager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// contains the pending request
	request *azcore.Request
	// callback for handling the HTTP response
	responder sparkJobDefinitionsListResponseHandleResponse
	// callback for advancing to the next page
	advancer sparkJobDefinitionsListResponseAdvancePage
	// contains the current response
	current *SparkJobDefinitionsListResponseResponse
	// any error encountered
	err error
}

func (p *sparkJobDefinitionsListResponsePager) Err() error {
	return p.err
}

func (p *sparkJobDefinitionsListResponsePager) NextPage(ctx context.Context) bool {
	if p.current != nil {
		if p.current.SparkJobDefinitionsListResponse.NextLink == nil || len(*p.current.SparkJobDefinitionsListResponse.NextLink) == 0 {
			return false
		}
		req, err := p.advancer(p.current)
		if err != nil {
			p.err = err
			return false
		}
		p.request = req
	}
	resp, err := p.pipeline.Do(ctx, p.request)
	if err != nil {
		p.err = err
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *sparkJobDefinitionsListResponsePager) PageResponse() *SparkJobDefinitionsListResponseResponse {
	return p.current
}

// TriggerListResponsePager provides iteration over TriggerListResponse pages.
type TriggerListResponsePager interface {
	// NextPage returns true if the pager advanced to the next page.
	// Returns false if there are no more pages or an error occurred.
	NextPage(context.Context) bool

	// Page returns the current TriggerListResponseResponse.
	PageResponse() *TriggerListResponseResponse

	// Err returns the last error encountered while paging.
	Err() error
}

type triggerListResponseHandleResponse func(*azcore.Response) (*TriggerListResponseResponse, error)

type triggerListResponseAdvancePage func(*TriggerListResponseResponse) (*azcore.Request, error)

type triggerListResponsePager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// contains the pending request
	request *azcore.Request
	// callback for handling the HTTP response
	responder triggerListResponseHandleResponse
	// callback for advancing to the next page
	advancer triggerListResponseAdvancePage
	// contains the current response
	current *TriggerListResponseResponse
	// any error encountered
	err error
}

func (p *triggerListResponsePager) Err() error {
	return p.err
}

func (p *triggerListResponsePager) NextPage(ctx context.Context) bool {
	if p.current != nil {
		if p.current.TriggerListResponse.NextLink == nil || len(*p.current.TriggerListResponse.NextLink) == 0 {
			return false
		}
		req, err := p.advancer(p.current)
		if err != nil {
			p.err = err
			return false
		}
		p.request = req
	}
	resp, err := p.pipeline.Do(ctx, p.request)
	if err != nil {
		p.err = err
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *triggerListResponsePager) PageResponse() *TriggerListResponseResponse {
	return p.current
}
