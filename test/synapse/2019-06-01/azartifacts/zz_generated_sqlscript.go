// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

type sqlScriptClient struct {
	con *connection
}

// Pipeline returns the pipeline associated with this client.
func (client sqlScriptClient) Pipeline() azcore.Pipeline {
	return client.con.Pipeline()
}

// CreateOrUpdateSQLScript - Creates or updates a Sql Script.
func (client sqlScriptClient) CreateOrUpdateSQLScript(ctx context.Context, sqlScriptName string, sqlScript SQLScriptResource, options *SQLScriptCreateOrUpdateSQLScriptOptions) (SQLScriptResourceResponse, error) {
	req, err := client.createOrUpdateSqlScriptCreateRequest(ctx, sqlScriptName, sqlScript, options)
	if err != nil {
		return SQLScriptResourceResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return SQLScriptResourceResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return SQLScriptResourceResponse{}, client.createOrUpdateSqlScriptHandleError(resp)
	}
	result, err := client.createOrUpdateSqlScriptHandleResponse(resp)
	if err != nil {
		return SQLScriptResourceResponse{}, err
	}
	return result, nil
}

// createOrUpdateSqlScriptCreateRequest creates the CreateOrUpdateSQLScript request.
func (client sqlScriptClient) createOrUpdateSqlScriptCreateRequest(ctx context.Context, sqlScriptName string, sqlScript SQLScriptResource, options *SQLScriptCreateOrUpdateSQLScriptOptions) (*azcore.Request, error) {
	urlPath := "/sqlScripts/{sqlScriptName}"
	urlPath = strings.ReplaceAll(urlPath, "{sqlScriptName}", url.PathEscape(sqlScriptName))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	if options != nil && options.IfMatch != nil {
		req.Header.Set("If-Match", *options.IfMatch)
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(sqlScript)
}

// createOrUpdateSqlScriptHandleResponse handles the CreateOrUpdateSQLScript response.
func (client sqlScriptClient) createOrUpdateSqlScriptHandleResponse(resp *azcore.Response) (SQLScriptResourceResponse, error) {
	result := SQLScriptResourceResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.SQLScriptResource)
	return result, err
}

// createOrUpdateSqlScriptHandleError handles the CreateOrUpdateSQLScript error response.
func (client sqlScriptClient) createOrUpdateSqlScriptHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// DeleteSQLScript - Deletes a Sql Script.
func (client sqlScriptClient) DeleteSQLScript(ctx context.Context, sqlScriptName string, options *SQLScriptDeleteSQLScriptOptions) (*http.Response, error) {
	req, err := client.deleteSqlScriptCreateRequest(ctx, sqlScriptName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.deleteSqlScriptHandleError(resp)
	}
	return resp.Response, nil
}

// deleteSqlScriptCreateRequest creates the DeleteSQLScript request.
func (client sqlScriptClient) deleteSqlScriptCreateRequest(ctx context.Context, sqlScriptName string, options *SQLScriptDeleteSQLScriptOptions) (*azcore.Request, error) {
	urlPath := "/sqlScripts/{sqlScriptName}"
	urlPath = strings.ReplaceAll(urlPath, "{sqlScriptName}", url.PathEscape(sqlScriptName))
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// deleteSqlScriptHandleError handles the DeleteSQLScript error response.
func (client sqlScriptClient) deleteSqlScriptHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetSQLScript - Gets a sql script.
func (client sqlScriptClient) GetSQLScript(ctx context.Context, sqlScriptName string, options *SQLScriptGetSQLScriptOptions) (SQLScriptResourceResponse, error) {
	req, err := client.getSqlScriptCreateRequest(ctx, sqlScriptName, options)
	if err != nil {
		return SQLScriptResourceResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return SQLScriptResourceResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusNotModified) {
		return SQLScriptResourceResponse{}, client.getSqlScriptHandleError(resp)
	}
	result, err := client.getSqlScriptHandleResponse(resp)
	if err != nil {
		return SQLScriptResourceResponse{}, err
	}
	return result, nil
}

// getSqlScriptCreateRequest creates the GetSQLScript request.
func (client sqlScriptClient) getSqlScriptCreateRequest(ctx context.Context, sqlScriptName string, options *SQLScriptGetSQLScriptOptions) (*azcore.Request, error) {
	urlPath := "/sqlScripts/{sqlScriptName}"
	urlPath = strings.ReplaceAll(urlPath, "{sqlScriptName}", url.PathEscape(sqlScriptName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	if options != nil && options.IfNoneMatch != nil {
		req.Header.Set("If-None-Match", *options.IfNoneMatch)
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getSqlScriptHandleResponse handles the GetSQLScript response.
func (client sqlScriptClient) getSqlScriptHandleResponse(resp *azcore.Response) (SQLScriptResourceResponse, error) {
	result := SQLScriptResourceResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.SQLScriptResource)
	return result, err
}

// getSqlScriptHandleError handles the GetSQLScript error response.
func (client sqlScriptClient) getSqlScriptHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetSQLScriptsByWorkspace - Lists sql scripts.
func (client sqlScriptClient) GetSQLScriptsByWorkspace(options *SQLScriptGetSQLScriptsByWorkspaceOptions) SQLScriptsListResponsePager {
	return &sqlScriptsListResponsePager{
		pipeline: client.con.Pipeline(),
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.getSqlScriptsByWorkspaceCreateRequest(ctx, options)
		},
		responder: client.getSqlScriptsByWorkspaceHandleResponse,
		errorer:   client.getSqlScriptsByWorkspaceHandleError,
		advancer: func(ctx context.Context, resp SQLScriptsListResponseResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.SQLScriptsListResponse.NextLink)
		},
		statusCodes: []int{http.StatusOK},
	}
}

// getSqlScriptsByWorkspaceCreateRequest creates the GetSQLScriptsByWorkspace request.
func (client sqlScriptClient) getSqlScriptsByWorkspaceCreateRequest(ctx context.Context, options *SQLScriptGetSQLScriptsByWorkspaceOptions) (*azcore.Request, error) {
	urlPath := "/sqlScripts"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getSqlScriptsByWorkspaceHandleResponse handles the GetSQLScriptsByWorkspace response.
func (client sqlScriptClient) getSqlScriptsByWorkspaceHandleResponse(resp *azcore.Response) (SQLScriptsListResponseResponse, error) {
	result := SQLScriptsListResponseResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.SQLScriptsListResponse)
	return result, err
}

// getSqlScriptsByWorkspaceHandleError handles the GetSQLScriptsByWorkspace error response.
func (client sqlScriptClient) getSqlScriptsByWorkspaceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// RenameSQLScript - Renames a sqlScript.
func (client sqlScriptClient) RenameSQLScript(ctx context.Context, sqlScriptName string, request ArtifactRenameRequest, options *SQLScriptRenameSQLScriptOptions) (*azcore.Response, error) {
	req, err := client.renameSqlScriptCreateRequest(ctx, sqlScriptName, request, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted) {
		return nil, client.renameSqlScriptHandleError(resp)
	}
	return resp, nil
}

// renameSqlScriptCreateRequest creates the RenameSQLScript request.
func (client sqlScriptClient) renameSqlScriptCreateRequest(ctx context.Context, sqlScriptName string, request ArtifactRenameRequest, options *SQLScriptRenameSQLScriptOptions) (*azcore.Request, error) {
	urlPath := "/sqlScripts/{sqlScriptName}/rename"
	urlPath = strings.ReplaceAll(urlPath, "{sqlScriptName}", url.PathEscape(sqlScriptName))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(request)
}

// renameSqlScriptHandleError handles the RenameSQLScript error response.
func (client sqlScriptClient) renameSqlScriptHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}
