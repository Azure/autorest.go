//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

type workspaceClient struct {
	endpoint string
	pl       runtime.Pipeline
}

// newWorkspaceClient creates a new instance of workspaceClient with the specified values.
// endpoint - The workspace development endpoint, for example https://myworkspace.dev.azuresynapse.net.
// pl - the pipeline used for sending requests and handling responses.
func newWorkspaceClient(endpoint string, pl runtime.Pipeline) *workspaceClient {
	client := &workspaceClient{
		endpoint: endpoint,
		pl:       pl,
	}
	return client
}

// Get - Get Workspace
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2019-06-01-preview
// options - workspaceClientGetOptions contains the optional parameters for the workspaceClient.Get method.
func (client *workspaceClient) Get(ctx context.Context, options *workspaceClientGetOptions) (WorkspaceClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, options)
	if err != nil {
		return WorkspaceClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return WorkspaceClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return WorkspaceClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *workspaceClient) getCreateRequest(ctx context.Context, options *workspaceClientGetOptions) (*policy.Request, error) {
	urlPath := "/workspace"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *workspaceClient) getHandleResponse(resp *http.Response) (WorkspaceClientGetResponse, error) {
	result := WorkspaceClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Workspace); err != nil {
		return WorkspaceClientGetResponse{}, err
	}
	return result, nil
}
