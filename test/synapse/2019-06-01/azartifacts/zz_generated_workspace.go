// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

type workspaceClient struct {
	*client
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *workspaceClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// Get - Get Workspace
func (client *workspaceClient) Get(ctx context.Context) (*WorkspaceResponse, error) {
	req, err := client.GetCreateRequest(ctx)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetHandleError(resp)
	}
	result, err := client.GetHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetCreateRequest creates the Get request.
func (client *workspaceClient) GetCreateRequest(ctx context.Context) (*azcore.Request, error) {
	urlPath := "/workspace"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetHandleResponse handles the Get response.
func (client *workspaceClient) GetHandleResponse(resp *azcore.Response) (*WorkspaceResponse, error) {
	result := WorkspaceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Workspace)
}

// GetHandleError handles the Get error response.
func (client *workspaceClient) GetHandleError(resp *azcore.Response) error {
	var err ErrorContract
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
