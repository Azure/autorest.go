//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

type dataFlowDebugSessionClient struct {
	endpoint string
	pl       runtime.Pipeline
}

// newDataFlowDebugSessionClient creates a new instance of dataFlowDebugSessionClient with the specified values.
// endpoint - The workspace development endpoint, for example https://myworkspace.dev.azuresynapse.net.
// pl - the pipeline used for sending requests and handling responses.
func newDataFlowDebugSessionClient(endpoint string, pl runtime.Pipeline) *dataFlowDebugSessionClient {
	client := &dataFlowDebugSessionClient{
		endpoint: endpoint,
		pl:       pl,
	}
	return client
}

// AddDataFlow - Add a data flow into debug session.
// If the operation fails it returns an *azcore.ResponseError type.
// request - Data flow debug session definition with debug content.
// options - dataFlowDebugSessionClientAddDataFlowOptions contains the optional parameters for the dataFlowDebugSessionClient.AddDataFlow
// method.
func (client *dataFlowDebugSessionClient) AddDataFlow(ctx context.Context, request DataFlowDebugPackage, options *dataFlowDebugSessionClientAddDataFlowOptions) (dataFlowDebugSessionClientAddDataFlowResponse, error) {
	req, err := client.addDataFlowCreateRequest(ctx, request, options)
	if err != nil {
		return dataFlowDebugSessionClientAddDataFlowResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return dataFlowDebugSessionClientAddDataFlowResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return dataFlowDebugSessionClientAddDataFlowResponse{}, runtime.NewResponseError(resp)
	}
	return client.addDataFlowHandleResponse(resp)
}

// addDataFlowCreateRequest creates the AddDataFlow request.
func (client *dataFlowDebugSessionClient) addDataFlowCreateRequest(ctx context.Context, request DataFlowDebugPackage, options *dataFlowDebugSessionClientAddDataFlowOptions) (*policy.Request, error) {
	urlPath := "/addDataFlowToDebugSession"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, request)
}

// addDataFlowHandleResponse handles the AddDataFlow response.
func (client *dataFlowDebugSessionClient) addDataFlowHandleResponse(resp *http.Response) (dataFlowDebugSessionClientAddDataFlowResponse, error) {
	result := dataFlowDebugSessionClientAddDataFlowResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AddDataFlowToDebugSessionResponse); err != nil {
		return dataFlowDebugSessionClientAddDataFlowResponse{}, err
	}
	return result, nil
}

// BeginCreateDataFlowDebugSession - Creates a data flow debug session.
// If the operation fails it returns an *azcore.ResponseError type.
// request - Data flow debug session definition
// options - dataFlowDebugSessionClientBeginCreateDataFlowDebugSessionOptions contains the optional parameters for the dataFlowDebugSessionClient.BeginCreateDataFlowDebugSession
// method.
func (client *dataFlowDebugSessionClient) BeginCreateDataFlowDebugSession(ctx context.Context, request CreateDataFlowDebugSessionRequest, options *dataFlowDebugSessionClientBeginCreateDataFlowDebugSessionOptions) (*runtime.Poller[dataFlowDebugSessionClientCreateDataFlowDebugSessionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createDataFlowDebugSession(ctx, request, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller[dataFlowDebugSessionClientCreateDataFlowDebugSessionResponse]("dataFlowDebugSessionClient.CreateDataFlowDebugSession", resp, client.pl, nil)
	} else {
		return runtime.NewPollerFromResumeToken[dataFlowDebugSessionClientCreateDataFlowDebugSessionResponse]("dataFlowDebugSessionClient.CreateDataFlowDebugSession", options.ResumeToken, client.pl, nil)
	}
}

// CreateDataFlowDebugSession - Creates a data flow debug session.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *dataFlowDebugSessionClient) createDataFlowDebugSession(ctx context.Context, request CreateDataFlowDebugSessionRequest, options *dataFlowDebugSessionClientBeginCreateDataFlowDebugSessionOptions) (*http.Response, error) {
	req, err := client.createDataFlowDebugSessionCreateRequest(ctx, request, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// createDataFlowDebugSessionCreateRequest creates the CreateDataFlowDebugSession request.
func (client *dataFlowDebugSessionClient) createDataFlowDebugSessionCreateRequest(ctx context.Context, request CreateDataFlowDebugSessionRequest, options *dataFlowDebugSessionClientBeginCreateDataFlowDebugSessionOptions) (*policy.Request, error) {
	urlPath := "/createDataFlowDebugSession"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, request)
}

// DeleteDataFlowDebugSession - Deletes a data flow debug session.
// If the operation fails it returns an *azcore.ResponseError type.
// request - Data flow debug session definition for deletion
// options - dataFlowDebugSessionClientDeleteDataFlowDebugSessionOptions contains the optional parameters for the dataFlowDebugSessionClient.DeleteDataFlowDebugSession
// method.
func (client *dataFlowDebugSessionClient) DeleteDataFlowDebugSession(ctx context.Context, request DeleteDataFlowDebugSessionRequest, options *dataFlowDebugSessionClientDeleteDataFlowDebugSessionOptions) (dataFlowDebugSessionClientDeleteDataFlowDebugSessionResponse, error) {
	req, err := client.deleteDataFlowDebugSessionCreateRequest(ctx, request, options)
	if err != nil {
		return dataFlowDebugSessionClientDeleteDataFlowDebugSessionResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return dataFlowDebugSessionClientDeleteDataFlowDebugSessionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return dataFlowDebugSessionClientDeleteDataFlowDebugSessionResponse{}, runtime.NewResponseError(resp)
	}
	return dataFlowDebugSessionClientDeleteDataFlowDebugSessionResponse{}, nil
}

// deleteDataFlowDebugSessionCreateRequest creates the DeleteDataFlowDebugSession request.
func (client *dataFlowDebugSessionClient) deleteDataFlowDebugSessionCreateRequest(ctx context.Context, request DeleteDataFlowDebugSessionRequest, options *dataFlowDebugSessionClientDeleteDataFlowDebugSessionOptions) (*policy.Request, error) {
	urlPath := "/deleteDataFlowDebugSession"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, request)
}

// BeginExecuteCommand - Execute a data flow debug command.
// If the operation fails it returns an *azcore.ResponseError type.
// request - Data flow debug command definition.
// options - dataFlowDebugSessionClientBeginExecuteCommandOptions contains the optional parameters for the dataFlowDebugSessionClient.BeginExecuteCommand
// method.
func (client *dataFlowDebugSessionClient) BeginExecuteCommand(ctx context.Context, request DataFlowDebugCommandRequest, options *dataFlowDebugSessionClientBeginExecuteCommandOptions) (*runtime.Poller[dataFlowDebugSessionClientExecuteCommandResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.executeCommand(ctx, request, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller[dataFlowDebugSessionClientExecuteCommandResponse]("dataFlowDebugSessionClient.ExecuteCommand", resp, client.pl, nil)
	} else {
		return runtime.NewPollerFromResumeToken[dataFlowDebugSessionClientExecuteCommandResponse]("dataFlowDebugSessionClient.ExecuteCommand", options.ResumeToken, client.pl, nil)
	}
}

// ExecuteCommand - Execute a data flow debug command.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *dataFlowDebugSessionClient) executeCommand(ctx context.Context, request DataFlowDebugCommandRequest, options *dataFlowDebugSessionClientBeginExecuteCommandOptions) (*http.Response, error) {
	req, err := client.executeCommandCreateRequest(ctx, request, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// executeCommandCreateRequest creates the ExecuteCommand request.
func (client *dataFlowDebugSessionClient) executeCommandCreateRequest(ctx context.Context, request DataFlowDebugCommandRequest, options *dataFlowDebugSessionClientBeginExecuteCommandOptions) (*policy.Request, error) {
	urlPath := "/executeDataFlowDebugCommand"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, request)
}

// QueryDataFlowDebugSessionsByWorkspace - Query all active data flow debug sessions.
// If the operation fails it returns an *azcore.ResponseError type.
// options - dataFlowDebugSessionClientQueryDataFlowDebugSessionsByWorkspaceOptions contains the optional parameters for the
// dataFlowDebugSessionClient.QueryDataFlowDebugSessionsByWorkspace method.
func (client *dataFlowDebugSessionClient) QueryDataFlowDebugSessionsByWorkspace(options *dataFlowDebugSessionClientQueryDataFlowDebugSessionsByWorkspaceOptions) *runtime.Pager[dataFlowDebugSessionClientQueryDataFlowDebugSessionsByWorkspaceResponse] {
	return runtime.NewPager(runtime.PageProcessor[dataFlowDebugSessionClientQueryDataFlowDebugSessionsByWorkspaceResponse]{
		More: func(page dataFlowDebugSessionClientQueryDataFlowDebugSessionsByWorkspaceResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *dataFlowDebugSessionClientQueryDataFlowDebugSessionsByWorkspaceResponse) (dataFlowDebugSessionClientQueryDataFlowDebugSessionsByWorkspaceResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.queryDataFlowDebugSessionsByWorkspaceCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return dataFlowDebugSessionClientQueryDataFlowDebugSessionsByWorkspaceResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return dataFlowDebugSessionClientQueryDataFlowDebugSessionsByWorkspaceResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return dataFlowDebugSessionClientQueryDataFlowDebugSessionsByWorkspaceResponse{}, runtime.NewResponseError(resp)
			}
			return client.queryDataFlowDebugSessionsByWorkspaceHandleResponse(resp)
		},
	})
}

// queryDataFlowDebugSessionsByWorkspaceCreateRequest creates the QueryDataFlowDebugSessionsByWorkspace request.
func (client *dataFlowDebugSessionClient) queryDataFlowDebugSessionsByWorkspaceCreateRequest(ctx context.Context, options *dataFlowDebugSessionClientQueryDataFlowDebugSessionsByWorkspaceOptions) (*policy.Request, error) {
	urlPath := "/queryDataFlowDebugSessions"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// queryDataFlowDebugSessionsByWorkspaceHandleResponse handles the QueryDataFlowDebugSessionsByWorkspace response.
func (client *dataFlowDebugSessionClient) queryDataFlowDebugSessionsByWorkspaceHandleResponse(resp *http.Response) (dataFlowDebugSessionClientQueryDataFlowDebugSessionsByWorkspaceResponse, error) {
	result := dataFlowDebugSessionClientQueryDataFlowDebugSessionsByWorkspaceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.QueryDataFlowDebugSessionsResponse); err != nil {
		return dataFlowDebugSessionClientQueryDataFlowDebugSessionsByWorkspaceResponse{}, err
	}
	return result, nil
}
