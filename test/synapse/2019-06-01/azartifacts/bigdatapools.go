// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// BigDataPoolsOperations contains the methods for the BigDataPools group.
type BigDataPoolsOperations interface {
	// Get - Get Big Data Pool
	Get(ctx context.Context, bigDataPoolName string) (*BigDataPoolResourceInfoResponse, error)
	// List - List Big Data Pools
	List(ctx context.Context) (*BigDataPoolResourceInfoListResultResponse, error)
}

// BigDataPoolsClient implements the BigDataPoolsOperations interface.
// Don't use this type directly, use NewBigDataPoolsClient() instead.
type BigDataPoolsClient struct {
	*Client
}

// NewBigDataPoolsClient creates a new instance of BigDataPoolsClient with the specified values.
func NewBigDataPoolsClient(c *Client) BigDataPoolsOperations {
	return &BigDataPoolsClient{Client: c}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *BigDataPoolsClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// Get - Get Big Data Pool
func (client *BigDataPoolsClient) Get(ctx context.Context, bigDataPoolName string) (*BigDataPoolResourceInfoResponse, error) {
	req, err := client.GetCreateRequest(ctx, bigDataPoolName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetHandleError(resp)
	}
	result, err := client.GetHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetCreateRequest creates the Get request.
func (client *BigDataPoolsClient) GetCreateRequest(ctx context.Context, bigDataPoolName string) (*azcore.Request, error) {
	urlPath := "/bigDataPools/{bigDataPoolName}"
	urlPath = strings.ReplaceAll(urlPath, "{bigDataPoolName}", url.PathEscape(bigDataPoolName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetHandleResponse handles the Get response.
func (client *BigDataPoolsClient) GetHandleResponse(resp *azcore.Response) (*BigDataPoolResourceInfoResponse, error) {
	result := BigDataPoolResourceInfoResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.BigDataPoolResourceInfo)
}

// GetHandleError handles the Get error response.
func (client *BigDataPoolsClient) GetHandleError(resp *azcore.Response) error {
	var err ErrorContract
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// List - List Big Data Pools
func (client *BigDataPoolsClient) List(ctx context.Context) (*BigDataPoolResourceInfoListResultResponse, error) {
	req, err := client.ListCreateRequest(ctx)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.ListHandleError(resp)
	}
	result, err := client.ListHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ListCreateRequest creates the List request.
func (client *BigDataPoolsClient) ListCreateRequest(ctx context.Context) (*azcore.Request, error) {
	urlPath := "/bigDataPools"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// ListHandleResponse handles the List response.
func (client *BigDataPoolsClient) ListHandleResponse(resp *azcore.Response) (*BigDataPoolResourceInfoListResultResponse, error) {
	result := BigDataPoolResourceInfoListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.BigDataPoolResourceInfoListResult)
}

// ListHandleError handles the List error response.
func (client *BigDataPoolsClient) ListHandleError(resp *azcore.Response) error {
	var err ErrorContract
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
