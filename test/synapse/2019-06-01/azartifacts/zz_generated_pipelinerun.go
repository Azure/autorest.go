// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

type pipelineRunClient struct {
	*client
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *pipelineRunClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// CancelPipelineRun - Cancel a pipeline run by its run ID.
func (client *pipelineRunClient) CancelPipelineRun(ctx context.Context, runId string, pipelineRunCancelPipelineRunOptions *PipelineRunCancelPipelineRunOptions) (*http.Response, error) {
	req, err := client.CancelPipelineRunCreateRequest(ctx, runId, pipelineRunCancelPipelineRunOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.CancelPipelineRunHandleError(resp)
	}
	return resp.Response, nil
}

// CancelPipelineRunCreateRequest creates the CancelPipelineRun request.
func (client *pipelineRunClient) CancelPipelineRunCreateRequest(ctx context.Context, runId string, pipelineRunCancelPipelineRunOptions *PipelineRunCancelPipelineRunOptions) (*azcore.Request, error) {
	urlPath := "/pipelineruns/{runId}/cancel"
	urlPath = strings.ReplaceAll(urlPath, "{runId}", url.PathEscape(runId))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	if pipelineRunCancelPipelineRunOptions != nil && pipelineRunCancelPipelineRunOptions.IsRecursive != nil {
		query.Set("isRecursive", strconv.FormatBool(*pipelineRunCancelPipelineRunOptions.IsRecursive))
	}
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// CancelPipelineRunHandleError handles the CancelPipelineRun error response.
func (client *pipelineRunClient) CancelPipelineRunHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetPipelineRun - Get a pipeline run by its run ID.
func (client *pipelineRunClient) GetPipelineRun(ctx context.Context, runId string) (*PipelineRunResponse, error) {
	req, err := client.GetPipelineRunCreateRequest(ctx, runId)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetPipelineRunHandleError(resp)
	}
	result, err := client.GetPipelineRunHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetPipelineRunCreateRequest creates the GetPipelineRun request.
func (client *pipelineRunClient) GetPipelineRunCreateRequest(ctx context.Context, runId string) (*azcore.Request, error) {
	urlPath := "/pipelineruns/{runId}"
	urlPath = strings.ReplaceAll(urlPath, "{runId}", url.PathEscape(runId))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetPipelineRunHandleResponse handles the GetPipelineRun response.
func (client *pipelineRunClient) GetPipelineRunHandleResponse(resp *azcore.Response) (*PipelineRunResponse, error) {
	result := PipelineRunResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.PipelineRun)
}

// GetPipelineRunHandleError handles the GetPipelineRun error response.
func (client *pipelineRunClient) GetPipelineRunHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// QueryActivityRuns - Query activity runs based on input filter conditions.
func (client *pipelineRunClient) QueryActivityRuns(ctx context.Context, pipelineName string, runId string, filterParameters RunFilterParameters) (*ActivityRunsQueryResponseResponse, error) {
	req, err := client.QueryActivityRunsCreateRequest(ctx, pipelineName, runId, filterParameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.QueryActivityRunsHandleError(resp)
	}
	result, err := client.QueryActivityRunsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// QueryActivityRunsCreateRequest creates the QueryActivityRuns request.
func (client *pipelineRunClient) QueryActivityRunsCreateRequest(ctx context.Context, pipelineName string, runId string, filterParameters RunFilterParameters) (*azcore.Request, error) {
	urlPath := "/pipelines/{pipelineName}/pipelineruns/{runId}/queryActivityruns"
	urlPath = strings.ReplaceAll(urlPath, "{pipelineName}", url.PathEscape(pipelineName))
	urlPath = strings.ReplaceAll(urlPath, "{runId}", url.PathEscape(runId))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(filterParameters)
}

// QueryActivityRunsHandleResponse handles the QueryActivityRuns response.
func (client *pipelineRunClient) QueryActivityRunsHandleResponse(resp *azcore.Response) (*ActivityRunsQueryResponseResponse, error) {
	result := ActivityRunsQueryResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ActivityRunsQueryResponse)
}

// QueryActivityRunsHandleError handles the QueryActivityRuns error response.
func (client *pipelineRunClient) QueryActivityRunsHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// QueryPipelineRunsByWorkspace - Query pipeline runs in the workspace based on input filter conditions.
func (client *pipelineRunClient) QueryPipelineRunsByWorkspace(ctx context.Context, filterParameters RunFilterParameters) (*PipelineRunsQueryResponseResponse, error) {
	req, err := client.QueryPipelineRunsByWorkspaceCreateRequest(ctx, filterParameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.QueryPipelineRunsByWorkspaceHandleError(resp)
	}
	result, err := client.QueryPipelineRunsByWorkspaceHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// QueryPipelineRunsByWorkspaceCreateRequest creates the QueryPipelineRunsByWorkspace request.
func (client *pipelineRunClient) QueryPipelineRunsByWorkspaceCreateRequest(ctx context.Context, filterParameters RunFilterParameters) (*azcore.Request, error) {
	urlPath := "/queryPipelineRuns"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(filterParameters)
}

// QueryPipelineRunsByWorkspaceHandleResponse handles the QueryPipelineRunsByWorkspace response.
func (client *pipelineRunClient) QueryPipelineRunsByWorkspaceHandleResponse(resp *azcore.Response) (*PipelineRunsQueryResponseResponse, error) {
	result := PipelineRunsQueryResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.PipelineRunsQueryResponse)
}

// QueryPipelineRunsByWorkspaceHandleError handles the QueryPipelineRunsByWorkspace error response.
func (client *pipelineRunClient) QueryPipelineRunsByWorkspaceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}
