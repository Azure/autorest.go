// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"path"
	"time"
)

// DataFlowDebugSessionOperations contains the methods for the DataFlowDebugSession group.
type DataFlowDebugSessionOperations interface {
	// AddDataFlow - Add a data flow into debug session.
	AddDataFlow(ctx context.Context, request DataFlowDebugPackage) (*AddDataFlowToDebugSessionResponseResponse, error)
	// BeginCreateDataFlowDebugSession - Creates a data flow debug session.
	BeginCreateDataFlowDebugSession(ctx context.Context, request CreateDataFlowDebugSessionRequest) (*CreateDataFlowDebugSessionResponsePollerResponse, error)
	// ResumeCreateDataFlowDebugSession - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeCreateDataFlowDebugSession(token string) (CreateDataFlowDebugSessionResponsePoller, error)
	// DeleteDataFlowDebugSession - Deletes a data flow debug session.
	DeleteDataFlowDebugSession(ctx context.Context, request DeleteDataFlowDebugSessionRequest) (*http.Response, error)
	// BeginExecuteCommand - Execute a data flow debug command.
	BeginExecuteCommand(ctx context.Context, request DataFlowDebugCommandRequest) (*DataFlowDebugCommandResponsePollerResponse, error)
	// ResumeExecuteCommand - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeExecuteCommand(token string) (DataFlowDebugCommandResponsePoller, error)
	// QueryDataFlowDebugSessionsByWorkspace - Query all active data flow debug sessions.
	QueryDataFlowDebugSessionsByWorkspace() (QueryDataFlowDebugSessionsResponsePager, error)
}

// dataFlowDebugSessionOperations implements the DataFlowDebugSessionOperations interface.
type dataFlowDebugSessionOperations struct {
	*Client
}

// AddDataFlow - Add a data flow into debug session.
func (client *dataFlowDebugSessionOperations) AddDataFlow(ctx context.Context, request DataFlowDebugPackage) (*AddDataFlowToDebugSessionResponseResponse, error) {
	req, err := client.addDataFlowCreateRequest(request)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.addDataFlowHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// addDataFlowCreateRequest creates the AddDataFlow request.
func (client *dataFlowDebugSessionOperations) addDataFlowCreateRequest(request DataFlowDebugPackage) (*azcore.Request, error) {
	urlPath := "/addDataFlowToDebugSession"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(request)
}

// addDataFlowHandleResponse handles the AddDataFlow response.
func (client *dataFlowDebugSessionOperations) addDataFlowHandleResponse(resp *azcore.Response) (*AddDataFlowToDebugSessionResponseResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.addDataFlowHandleError(resp)
	}
	result := AddDataFlowToDebugSessionResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.AddDataFlowToDebugSessionResponse)
}

// addDataFlowHandleError handles the AddDataFlow error response.
func (client *dataFlowDebugSessionOperations) addDataFlowHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// CreateDataFlowDebugSession - Creates a data flow debug session.
func (client *dataFlowDebugSessionOperations) BeginCreateDataFlowDebugSession(ctx context.Context, request CreateDataFlowDebugSessionRequest) (*CreateDataFlowDebugSessionResponsePollerResponse, error) {
	req, err := client.createDataFlowDebugSessionCreateRequest(request)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createDataFlowDebugSessionHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	poller := &createDataFlowDebugSessionResponsePoller{
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*CreateDataFlowDebugSessionResponseResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *dataFlowDebugSessionOperations) ResumeCreateDataFlowDebugSession(token string) (CreateDataFlowDebugSessionResponsePoller, error) {
	return nil, nil
}

// createDataFlowDebugSessionCreateRequest creates the CreateDataFlowDebugSession request.
func (client *dataFlowDebugSessionOperations) createDataFlowDebugSessionCreateRequest(request CreateDataFlowDebugSessionRequest) (*azcore.Request, error) {
	urlPath := "/createDataFlowDebugSession"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(request)
}

// createDataFlowDebugSessionHandleResponse handles the CreateDataFlowDebugSession response.
func (client *dataFlowDebugSessionOperations) createDataFlowDebugSessionHandleResponse(resp *azcore.Response) (*CreateDataFlowDebugSessionResponsePollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.createDataFlowDebugSessionHandleError(resp)
	}
	return &CreateDataFlowDebugSessionResponsePollerResponse{RawResponse: resp.Response}, nil
}

// createDataFlowDebugSessionHandleError handles the CreateDataFlowDebugSession error response.
func (client *dataFlowDebugSessionOperations) createDataFlowDebugSessionHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DeleteDataFlowDebugSession - Deletes a data flow debug session.
func (client *dataFlowDebugSessionOperations) DeleteDataFlowDebugSession(ctx context.Context, request DeleteDataFlowDebugSessionRequest) (*http.Response, error) {
	req, err := client.deleteDataFlowDebugSessionCreateRequest(request)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteDataFlowDebugSessionHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// deleteDataFlowDebugSessionCreateRequest creates the DeleteDataFlowDebugSession request.
func (client *dataFlowDebugSessionOperations) deleteDataFlowDebugSessionCreateRequest(request DeleteDataFlowDebugSessionRequest) (*azcore.Request, error) {
	urlPath := "/deleteDataFlowDebugSession"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(request)
}

// deleteDataFlowDebugSessionHandleResponse handles the DeleteDataFlowDebugSession response.
func (client *dataFlowDebugSessionOperations) deleteDataFlowDebugSessionHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.deleteDataFlowDebugSessionHandleError(resp)
	}
	return resp.Response, nil
}

// deleteDataFlowDebugSessionHandleError handles the DeleteDataFlowDebugSession error response.
func (client *dataFlowDebugSessionOperations) deleteDataFlowDebugSessionHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ExecuteCommand - Execute a data flow debug command.
func (client *dataFlowDebugSessionOperations) BeginExecuteCommand(ctx context.Context, request DataFlowDebugCommandRequest) (*DataFlowDebugCommandResponsePollerResponse, error) {
	req, err := client.executeCommandCreateRequest(request)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.executeCommandHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	poller := &dataFlowDebugCommandResponsePoller{
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*DataFlowDebugCommandResponseResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *dataFlowDebugSessionOperations) ResumeExecuteCommand(token string) (DataFlowDebugCommandResponsePoller, error) {
	return nil, nil
}

// executeCommandCreateRequest creates the ExecuteCommand request.
func (client *dataFlowDebugSessionOperations) executeCommandCreateRequest(request DataFlowDebugCommandRequest) (*azcore.Request, error) {
	urlPath := "/executeDataFlowDebugCommand"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(request)
}

// executeCommandHandleResponse handles the ExecuteCommand response.
func (client *dataFlowDebugSessionOperations) executeCommandHandleResponse(resp *azcore.Response) (*DataFlowDebugCommandResponsePollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.executeCommandHandleError(resp)
	}
	return &DataFlowDebugCommandResponsePollerResponse{RawResponse: resp.Response}, nil
}

// executeCommandHandleError handles the ExecuteCommand error response.
func (client *dataFlowDebugSessionOperations) executeCommandHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// QueryDataFlowDebugSessionsByWorkspace - Query all active data flow debug sessions.
func (client *dataFlowDebugSessionOperations) QueryDataFlowDebugSessionsByWorkspace() (QueryDataFlowDebugSessionsResponsePager, error) {
	req, err := client.queryDataFlowDebugSessionsByWorkspaceCreateRequest()
	if err != nil {
		return nil, err
	}
	return &queryDataFlowDebugSessionsResponsePager{
		pipeline:  client.p,
		request:   req,
		responder: client.queryDataFlowDebugSessionsByWorkspaceHandleResponse,
		advancer: func(resp *QueryDataFlowDebugSessionsResponseResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.QueryDataFlowDebugSessionsResponse.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.QueryDataFlowDebugSessionsResponse.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// queryDataFlowDebugSessionsByWorkspaceCreateRequest creates the QueryDataFlowDebugSessionsByWorkspace request.
func (client *dataFlowDebugSessionOperations) queryDataFlowDebugSessionsByWorkspaceCreateRequest() (*azcore.Request, error) {
	urlPath := "/queryDataFlowDebugSessions"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// queryDataFlowDebugSessionsByWorkspaceHandleResponse handles the QueryDataFlowDebugSessionsByWorkspace response.
func (client *dataFlowDebugSessionOperations) queryDataFlowDebugSessionsByWorkspaceHandleResponse(resp *azcore.Response) (*QueryDataFlowDebugSessionsResponseResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.queryDataFlowDebugSessionsByWorkspaceHandleError(resp)
	}
	result := QueryDataFlowDebugSessionsResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.QueryDataFlowDebugSessionsResponse)
}

// queryDataFlowDebugSessionsByWorkspaceHandleError handles the QueryDataFlowDebugSessionsByWorkspace error response.
func (client *dataFlowDebugSessionOperations) queryDataFlowDebugSessionsByWorkspaceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
