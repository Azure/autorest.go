// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// DataFlowDebugSessionOperations contains the methods for the DataFlowDebugSession group.
type DataFlowDebugSessionOperations interface {
	// AddDataFlow - Add a data flow into debug session.
	AddDataFlow(ctx context.Context, request DataFlowDebugPackage) (*AddDataFlowToDebugSessionResponseResponse, error)
	// BeginCreateDataFlowDebugSession - Creates a data flow debug session.
	BeginCreateDataFlowDebugSession(ctx context.Context, request CreateDataFlowDebugSessionRequest) (*CreateDataFlowDebugSessionResponsePollerResponse, error)
	// ResumeCreateDataFlowDebugSession - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeCreateDataFlowDebugSession(token string) (CreateDataFlowDebugSessionResponsePoller, error)
	// DeleteDataFlowDebugSession - Deletes a data flow debug session.
	DeleteDataFlowDebugSession(ctx context.Context, request DeleteDataFlowDebugSessionRequest) (*http.Response, error)
	// BeginExecuteCommand - Execute a data flow debug command.
	BeginExecuteCommand(ctx context.Context, request DataFlowDebugCommandRequest) (*DataFlowDebugCommandResponsePollerResponse, error)
	// ResumeExecuteCommand - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeExecuteCommand(token string) (DataFlowDebugCommandResponsePoller, error)
	// QueryDataFlowDebugSessionsByWorkspace - Query all active data flow debug sessions.
	QueryDataFlowDebugSessionsByWorkspace() QueryDataFlowDebugSessionsResponsePager
}

// DataFlowDebugSessionClient implements the DataFlowDebugSessionOperations interface.
// Don't use this type directly, use NewDataFlowDebugSessionClient() instead.
type DataFlowDebugSessionClient struct {
	*Client
}

// NewDataFlowDebugSessionClient creates a new instance of DataFlowDebugSessionClient with the specified values.
func NewDataFlowDebugSessionClient(c *Client) DataFlowDebugSessionOperations {
	return &DataFlowDebugSessionClient{Client: c}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *DataFlowDebugSessionClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// AddDataFlow - Add a data flow into debug session.
func (client *DataFlowDebugSessionClient) AddDataFlow(ctx context.Context, request DataFlowDebugPackage) (*AddDataFlowToDebugSessionResponseResponse, error) {
	req, err := client.AddDataFlowCreateRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.AddDataFlowHandleError(resp)
	}
	result, err := client.AddDataFlowHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// AddDataFlowCreateRequest creates the AddDataFlow request.
func (client *DataFlowDebugSessionClient) AddDataFlowCreateRequest(ctx context.Context, request DataFlowDebugPackage) (*azcore.Request, error) {
	urlPath := "/addDataFlowToDebugSession"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(request)
}

// AddDataFlowHandleResponse handles the AddDataFlow response.
func (client *DataFlowDebugSessionClient) AddDataFlowHandleResponse(resp *azcore.Response) (*AddDataFlowToDebugSessionResponseResponse, error) {
	result := AddDataFlowToDebugSessionResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.AddDataFlowToDebugSessionResponse)
}

// AddDataFlowHandleError handles the AddDataFlow error response.
func (client *DataFlowDebugSessionClient) AddDataFlowHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// CreateDataFlowDebugSession - Creates a data flow debug session.
func (client *DataFlowDebugSessionClient) BeginCreateDataFlowDebugSession(ctx context.Context, request CreateDataFlowDebugSessionRequest) (*CreateDataFlowDebugSessionResponsePollerResponse, error) {
	return nil, errors.New("NYI")
}

func (client *DataFlowDebugSessionClient) ResumeCreateDataFlowDebugSession(token string) (CreateDataFlowDebugSessionResponsePoller, error) {
	return nil, nil
}

// CreateDataFlowDebugSessionCreateRequest creates the CreateDataFlowDebugSession request.
func (client *DataFlowDebugSessionClient) CreateDataFlowDebugSessionCreateRequest(ctx context.Context, request CreateDataFlowDebugSessionRequest) (*azcore.Request, error) {
	urlPath := "/createDataFlowDebugSession"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(request)
}

// CreateDataFlowDebugSessionHandleResponse handles the CreateDataFlowDebugSession response.
func (client *DataFlowDebugSessionClient) CreateDataFlowDebugSessionHandleResponse(resp *azcore.Response) (*CreateDataFlowDebugSessionResponsePollerResponse, error) {
	return &CreateDataFlowDebugSessionResponsePollerResponse{RawResponse: resp.Response}, nil
}

// CreateDataFlowDebugSessionHandleError handles the CreateDataFlowDebugSession error response.
func (client *DataFlowDebugSessionClient) CreateDataFlowDebugSessionHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DeleteDataFlowDebugSession - Deletes a data flow debug session.
func (client *DataFlowDebugSessionClient) DeleteDataFlowDebugSession(ctx context.Context, request DeleteDataFlowDebugSessionRequest) (*http.Response, error) {
	req, err := client.DeleteDataFlowDebugSessionCreateRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.DeleteDataFlowDebugSessionHandleError(resp)
	}
	return resp.Response, nil
}

// DeleteDataFlowDebugSessionCreateRequest creates the DeleteDataFlowDebugSession request.
func (client *DataFlowDebugSessionClient) DeleteDataFlowDebugSessionCreateRequest(ctx context.Context, request DeleteDataFlowDebugSessionRequest) (*azcore.Request, error) {
	urlPath := "/deleteDataFlowDebugSession"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(request)
}

// DeleteDataFlowDebugSessionHandleError handles the DeleteDataFlowDebugSession error response.
func (client *DataFlowDebugSessionClient) DeleteDataFlowDebugSessionHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ExecuteCommand - Execute a data flow debug command.
func (client *DataFlowDebugSessionClient) BeginExecuteCommand(ctx context.Context, request DataFlowDebugCommandRequest) (*DataFlowDebugCommandResponsePollerResponse, error) {
	return nil, errors.New("NYI")
}

func (client *DataFlowDebugSessionClient) ResumeExecuteCommand(token string) (DataFlowDebugCommandResponsePoller, error) {
	return nil, nil
}

// ExecuteCommandCreateRequest creates the ExecuteCommand request.
func (client *DataFlowDebugSessionClient) ExecuteCommandCreateRequest(ctx context.Context, request DataFlowDebugCommandRequest) (*azcore.Request, error) {
	urlPath := "/executeDataFlowDebugCommand"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(request)
}

// ExecuteCommandHandleResponse handles the ExecuteCommand response.
func (client *DataFlowDebugSessionClient) ExecuteCommandHandleResponse(resp *azcore.Response) (*DataFlowDebugCommandResponsePollerResponse, error) {
	return &DataFlowDebugCommandResponsePollerResponse{RawResponse: resp.Response}, nil
}

// ExecuteCommandHandleError handles the ExecuteCommand error response.
func (client *DataFlowDebugSessionClient) ExecuteCommandHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// QueryDataFlowDebugSessionsByWorkspace - Query all active data flow debug sessions.
func (client *DataFlowDebugSessionClient) QueryDataFlowDebugSessionsByWorkspace() QueryDataFlowDebugSessionsResponsePager {
	return &queryDataFlowDebugSessionsResponsePager{
		pipeline: client.p,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.QueryDataFlowDebugSessionsByWorkspaceCreateRequest(ctx)
		},
		responder: client.QueryDataFlowDebugSessionsByWorkspaceHandleResponse,
		errorer:   client.QueryDataFlowDebugSessionsByWorkspaceHandleError,
		advancer: func(ctx context.Context, resp *QueryDataFlowDebugSessionsResponseResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.QueryDataFlowDebugSessionsResponse.NextLink)
		},
	}
}

// QueryDataFlowDebugSessionsByWorkspaceCreateRequest creates the QueryDataFlowDebugSessionsByWorkspace request.
func (client *DataFlowDebugSessionClient) QueryDataFlowDebugSessionsByWorkspaceCreateRequest(ctx context.Context) (*azcore.Request, error) {
	urlPath := "/queryDataFlowDebugSessions"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// QueryDataFlowDebugSessionsByWorkspaceHandleResponse handles the QueryDataFlowDebugSessionsByWorkspace response.
func (client *DataFlowDebugSessionClient) QueryDataFlowDebugSessionsByWorkspaceHandleResponse(resp *azcore.Response) (*QueryDataFlowDebugSessionsResponseResponse, error) {
	result := QueryDataFlowDebugSessionsResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.QueryDataFlowDebugSessionsResponse)
}

// QueryDataFlowDebugSessionsByWorkspaceHandleError handles the QueryDataFlowDebugSessionsByWorkspace error response.
func (client *DataFlowDebugSessionClient) QueryDataFlowDebugSessionsByWorkspaceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
