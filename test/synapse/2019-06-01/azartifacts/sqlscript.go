// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"path"
	"strings"
)

// SQLScriptOperations contains the methods for the SQLScript group.
type SQLScriptOperations interface {
	// CreateOrUpdateSQLScript - Creates or updates a Sql Script.
	CreateOrUpdateSQLScript(ctx context.Context, sqlScriptName string, sqlScript SQLScriptResource, sqlScriptCreateOrUpdateSqlscriptOptions *SQLScriptCreateOrUpdateSQLScriptOptions) (*SQLScriptResourceResponse, error)
	// DeleteSQLScript - Deletes a Sql Script.
	DeleteSQLScript(ctx context.Context, sqlScriptName string) (*http.Response, error)
	// GetSQLScript - Gets a sql script.
	GetSQLScript(ctx context.Context, sqlScriptName string, sqlScriptGetSqlscriptOptions *SQLScriptGetSQLScriptOptions) (*SQLScriptResourceResponse, error)
	// GetSQLScriptsByWorkspace - Lists sql scripts.
	GetSQLScriptsByWorkspace() (SQLScriptsListResponsePager, error)
}

// sqlScriptOperations implements the SQLScriptOperations interface.
type sqlScriptOperations struct {
	*Client
}

// CreateOrUpdateSQLScript - Creates or updates a Sql Script.
func (client *sqlScriptOperations) CreateOrUpdateSQLScript(ctx context.Context, sqlScriptName string, sqlScript SQLScriptResource, sqlScriptCreateOrUpdateSqlscriptOptions *SQLScriptCreateOrUpdateSQLScriptOptions) (*SQLScriptResourceResponse, error) {
	req, err := client.createOrUpdateSqlScriptCreateRequest(sqlScriptName, sqlScript, sqlScriptCreateOrUpdateSqlscriptOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createOrUpdateSqlScriptHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// createOrUpdateSqlScriptCreateRequest creates the CreateOrUpdateSQLScript request.
func (client *sqlScriptOperations) createOrUpdateSqlScriptCreateRequest(sqlScriptName string, sqlScript SQLScriptResource, sqlScriptCreateOrUpdateSqlscriptOptions *SQLScriptCreateOrUpdateSQLScriptOptions) (*azcore.Request, error) {
	urlPath := "/sqlScripts/{sqlScriptName}"
	urlPath = strings.ReplaceAll(urlPath, "{sqlScriptName}", url.PathEscape(sqlScriptName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	if sqlScriptCreateOrUpdateSqlscriptOptions != nil && sqlScriptCreateOrUpdateSqlscriptOptions.IfMatch != nil {
		req.Header.Set("If-Match", *sqlScriptCreateOrUpdateSqlscriptOptions.IfMatch)
	}
	return req, req.MarshalAsJSON(sqlScript)
}

// createOrUpdateSqlScriptHandleResponse handles the CreateOrUpdateSQLScript response.
func (client *sqlScriptOperations) createOrUpdateSqlScriptHandleResponse(resp *azcore.Response) (*SQLScriptResourceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.createOrUpdateSqlScriptHandleError(resp)
	}
	result := SQLScriptResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.SQLScriptResource)
}

// createOrUpdateSqlScriptHandleError handles the CreateOrUpdateSQLScript error response.
func (client *sqlScriptOperations) createOrUpdateSqlScriptHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DeleteSQLScript - Deletes a Sql Script.
func (client *sqlScriptOperations) DeleteSQLScript(ctx context.Context, sqlScriptName string) (*http.Response, error) {
	req, err := client.deleteSqlScriptCreateRequest(sqlScriptName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteSqlScriptHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// deleteSqlScriptCreateRequest creates the DeleteSQLScript request.
func (client *sqlScriptOperations) deleteSqlScriptCreateRequest(sqlScriptName string) (*azcore.Request, error) {
	urlPath := "/sqlScripts/{sqlScriptName}"
	urlPath = strings.ReplaceAll(urlPath, "{sqlScriptName}", url.PathEscape(sqlScriptName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteSqlScriptHandleResponse handles the DeleteSQLScript response.
func (client *sqlScriptOperations) deleteSqlScriptHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.deleteSqlScriptHandleError(resp)
	}
	return resp.Response, nil
}

// deleteSqlScriptHandleError handles the DeleteSQLScript error response.
func (client *sqlScriptOperations) deleteSqlScriptHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetSQLScript - Gets a sql script.
func (client *sqlScriptOperations) GetSQLScript(ctx context.Context, sqlScriptName string, sqlScriptGetSqlscriptOptions *SQLScriptGetSQLScriptOptions) (*SQLScriptResourceResponse, error) {
	req, err := client.getSqlScriptCreateRequest(sqlScriptName, sqlScriptGetSqlscriptOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getSqlScriptHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getSqlScriptCreateRequest creates the GetSQLScript request.
func (client *sqlScriptOperations) getSqlScriptCreateRequest(sqlScriptName string, sqlScriptGetSqlscriptOptions *SQLScriptGetSQLScriptOptions) (*azcore.Request, error) {
	urlPath := "/sqlScripts/{sqlScriptName}"
	urlPath = strings.ReplaceAll(urlPath, "{sqlScriptName}", url.PathEscape(sqlScriptName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	if sqlScriptGetSqlscriptOptions != nil && sqlScriptGetSqlscriptOptions.IfNoneMatch != nil {
		req.Header.Set("If-None-Match", *sqlScriptGetSqlscriptOptions.IfNoneMatch)
	}
	return req, nil
}

// getSqlScriptHandleResponse handles the GetSQLScript response.
func (client *sqlScriptOperations) getSqlScriptHandleResponse(resp *azcore.Response) (*SQLScriptResourceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusNotModified) {
		return nil, client.getSqlScriptHandleError(resp)
	}
	result := SQLScriptResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.SQLScriptResource)
}

// getSqlScriptHandleError handles the GetSQLScript error response.
func (client *sqlScriptOperations) getSqlScriptHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetSQLScriptsByWorkspace - Lists sql scripts.
func (client *sqlScriptOperations) GetSQLScriptsByWorkspace() (SQLScriptsListResponsePager, error) {
	req, err := client.getSqlScriptsByWorkspaceCreateRequest()
	if err != nil {
		return nil, err
	}
	return &sqlScriptsListResponsePager{
		pipeline:  client.p,
		request:   req,
		responder: client.getSqlScriptsByWorkspaceHandleResponse,
		advancer: func(resp *SQLScriptsListResponseResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.SQLScriptsListResponse.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.SQLScriptsListResponse.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// getSqlScriptsByWorkspaceCreateRequest creates the GetSQLScriptsByWorkspace request.
func (client *sqlScriptOperations) getSqlScriptsByWorkspaceCreateRequest() (*azcore.Request, error) {
	urlPath := "/sqlScripts"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getSqlScriptsByWorkspaceHandleResponse handles the GetSQLScriptsByWorkspace response.
func (client *sqlScriptOperations) getSqlScriptsByWorkspaceHandleResponse(resp *azcore.Response) (*SQLScriptsListResponseResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getSqlScriptsByWorkspaceHandleError(resp)
	}
	result := SQLScriptsListResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.SQLScriptsListResponse)
}

// getSqlScriptsByWorkspaceHandleError handles the GetSQLScriptsByWorkspace error response.
func (client *sqlScriptOperations) getSqlScriptsByWorkspaceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
