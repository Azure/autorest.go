// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

type AvroCompressionCodec string

const (
	AvroCompressionCodecBzip2   AvroCompressionCodec = "bzip2"
	AvroCompressionCodecDeflate AvroCompressionCodec = "deflate"
	AvroCompressionCodecNone    AvroCompressionCodec = "none"
	AvroCompressionCodecSnappy  AvroCompressionCodec = "snappy"
	AvroCompressionCodecXz      AvroCompressionCodec = "xz"
)

func PossibleAvroCompressionCodecValues() []AvroCompressionCodec {
	return []AvroCompressionCodec{
		AvroCompressionCodecBzip2,
		AvroCompressionCodecDeflate,
		AvroCompressionCodecNone,
		AvroCompressionCodecSnappy,
		AvroCompressionCodecXz,
	}
}

func (c AvroCompressionCodec) ToPtr() *AvroCompressionCodec {
	return &c
}

// AzureFunctionActivityMethod - The list of HTTP methods supported by a AzureFunctionActivity.
type AzureFunctionActivityMethod string

const (
	AzureFunctionActivityMethodDelete  AzureFunctionActivityMethod = "DELETE"
	AzureFunctionActivityMethodGet     AzureFunctionActivityMethod = "GET"
	AzureFunctionActivityMethodHead    AzureFunctionActivityMethod = "HEAD"
	AzureFunctionActivityMethodOptions AzureFunctionActivityMethod = "OPTIONS"
	AzureFunctionActivityMethodPost    AzureFunctionActivityMethod = "POST"
	AzureFunctionActivityMethodPut     AzureFunctionActivityMethod = "PUT"
	AzureFunctionActivityMethodTrace   AzureFunctionActivityMethod = "TRACE"
)

func PossibleAzureFunctionActivityMethodValues() []AzureFunctionActivityMethod {
	return []AzureFunctionActivityMethod{
		AzureFunctionActivityMethodDelete,
		AzureFunctionActivityMethodGet,
		AzureFunctionActivityMethodHead,
		AzureFunctionActivityMethodOptions,
		AzureFunctionActivityMethodPost,
		AzureFunctionActivityMethodPut,
		AzureFunctionActivityMethodTrace,
	}
}

func (c AzureFunctionActivityMethod) ToPtr() *AzureFunctionActivityMethod {
	return &c
}

// CellOutputType - Execution, display, or stream outputs.
type CellOutputType string

const (
	CellOutputTypeDisplayData   CellOutputType = "display_data"
	CellOutputTypeError         CellOutputType = "error"
	CellOutputTypeExecuteResult CellOutputType = "execute_result"
	CellOutputTypeStream        CellOutputType = "stream"
)

func PossibleCellOutputTypeValues() []CellOutputType {
	return []CellOutputType{
		CellOutputTypeDisplayData,
		CellOutputTypeError,
		CellOutputTypeExecuteResult,
		CellOutputTypeStream,
	}
}

func (c CellOutputType) ToPtr() *CellOutputType {
	return &c
}

// DataFlowComputeType - Compute type of the cluster which will execute data flow job.
type DataFlowComputeType string

const (
	DataFlowComputeTypeComputeOptimized DataFlowComputeType = "ComputeOptimized"
	DataFlowComputeTypeGeneral          DataFlowComputeType = "General"
	DataFlowComputeTypeMemoryOptimized  DataFlowComputeType = "MemoryOptimized"
)

func PossibleDataFlowComputeTypeValues() []DataFlowComputeType {
	return []DataFlowComputeType{
		DataFlowComputeTypeComputeOptimized,
		DataFlowComputeTypeGeneral,
		DataFlowComputeTypeMemoryOptimized,
	}
}

func (c DataFlowComputeType) ToPtr() *DataFlowComputeType {
	return &c
}

// DatasetCompressionLevel - All available compression levels.
type DatasetCompressionLevel string

const (
	DatasetCompressionLevelFastest DatasetCompressionLevel = "Fastest"
	DatasetCompressionLevelOptimal DatasetCompressionLevel = "Optimal"
)

func PossibleDatasetCompressionLevelValues() []DatasetCompressionLevel {
	return []DatasetCompressionLevel{
		DatasetCompressionLevelFastest,
		DatasetCompressionLevelOptimal,
	}
}

func (c DatasetCompressionLevel) ToPtr() *DatasetCompressionLevel {
	return &c
}

type DelimitedTextCompressionCodec string

const (
	DelimitedTextCompressionCodecBzip2      DelimitedTextCompressionCodec = "bzip2"
	DelimitedTextCompressionCodecDeflate    DelimitedTextCompressionCodec = "deflate"
	DelimitedTextCompressionCodecGzip       DelimitedTextCompressionCodec = "gzip"
	DelimitedTextCompressionCodecLz4        DelimitedTextCompressionCodec = "lz4"
	DelimitedTextCompressionCodecSnappy     DelimitedTextCompressionCodec = "snappy"
	DelimitedTextCompressionCodecZipDeflate DelimitedTextCompressionCodec = "zipDeflate"
)

func PossibleDelimitedTextCompressionCodecValues() []DelimitedTextCompressionCodec {
	return []DelimitedTextCompressionCodec{
		DelimitedTextCompressionCodecBzip2,
		DelimitedTextCompressionCodecDeflate,
		DelimitedTextCompressionCodecGzip,
		DelimitedTextCompressionCodecLz4,
		DelimitedTextCompressionCodecSnappy,
		DelimitedTextCompressionCodecZipDeflate,
	}
}

func (c DelimitedTextCompressionCodec) ToPtr() *DelimitedTextCompressionCodec {
	return &c
}

type DependencyCondition string

const (
	DependencyConditionCompleted DependencyCondition = "Completed"
	DependencyConditionFailed    DependencyCondition = "Failed"
	DependencyConditionSkipped   DependencyCondition = "Skipped"
	DependencyConditionSucceeded DependencyCondition = "Succeeded"
)

func PossibleDependencyConditionValues() []DependencyCondition {
	return []DependencyCondition{
		DependencyConditionCompleted,
		DependencyConditionFailed,
		DependencyConditionSkipped,
		DependencyConditionSucceeded,
	}
}

func (c DependencyCondition) ToPtr() *DependencyCondition {
	return &c
}

// DynamicsAuthenticationType - The authentication type to connect to Dynamics server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
type DynamicsAuthenticationType string

const (
	DynamicsAuthenticationTypeAadServicePrincipal DynamicsAuthenticationType = "AADServicePrincipal"
	DynamicsAuthenticationTypeIfd                 DynamicsAuthenticationType = "Ifd"
	DynamicsAuthenticationTypeOffice365           DynamicsAuthenticationType = "Office365"
)

func PossibleDynamicsAuthenticationTypeValues() []DynamicsAuthenticationType {
	return []DynamicsAuthenticationType{
		DynamicsAuthenticationTypeAadServicePrincipal,
		DynamicsAuthenticationTypeIfd,
		DynamicsAuthenticationTypeOffice365,
	}
}

func (c DynamicsAuthenticationType) ToPtr() *DynamicsAuthenticationType {
	return &c
}

// DynamicsDeploymentType - The deployment type of the Dynamics instance. 'Online' for Dynamics Online and 'OnPremisesWithIfd' for Dynamics on-premises with Ifd. Type: string (or Expression with resultType string).
type DynamicsDeploymentType string

const (
	DynamicsDeploymentTypeOnPremisesWithIfd DynamicsDeploymentType = "OnPremisesWithIfd"
	DynamicsDeploymentTypeOnline            DynamicsDeploymentType = "Online"
)

func PossibleDynamicsDeploymentTypeValues() []DynamicsDeploymentType {
	return []DynamicsDeploymentType{
		DynamicsDeploymentTypeOnPremisesWithIfd,
		DynamicsDeploymentTypeOnline,
	}
}

func (c DynamicsDeploymentType) ToPtr() *DynamicsDeploymentType {
	return &c
}

// DynamicsServicePrincipalCredentialType - The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
type DynamicsServicePrincipalCredentialType string

const (
	DynamicsServicePrincipalCredentialTypeServicePrincipalCert DynamicsServicePrincipalCredentialType = "ServicePrincipalCert"
	DynamicsServicePrincipalCredentialTypeServicePrincipalKey  DynamicsServicePrincipalCredentialType = "ServicePrincipalKey"
)

func PossibleDynamicsServicePrincipalCredentialTypeValues() []DynamicsServicePrincipalCredentialType {
	return []DynamicsServicePrincipalCredentialType{
		DynamicsServicePrincipalCredentialTypeServicePrincipalCert,
		DynamicsServicePrincipalCredentialTypeServicePrincipalKey,
	}
}

func (c DynamicsServicePrincipalCredentialType) ToPtr() *DynamicsServicePrincipalCredentialType {
	return &c
}

// EventSubscriptionStatus - Event Subscription Status.
type EventSubscriptionStatus string

const (
	EventSubscriptionStatusDeprovisioning EventSubscriptionStatus = "Deprovisioning"
	EventSubscriptionStatusDisabled       EventSubscriptionStatus = "Disabled"
	EventSubscriptionStatusEnabled        EventSubscriptionStatus = "Enabled"
	EventSubscriptionStatusProvisioning   EventSubscriptionStatus = "Provisioning"
	EventSubscriptionStatusUnknown        EventSubscriptionStatus = "Unknown"
)

func PossibleEventSubscriptionStatusValues() []EventSubscriptionStatus {
	return []EventSubscriptionStatus{
		EventSubscriptionStatusDeprovisioning,
		EventSubscriptionStatusDisabled,
		EventSubscriptionStatusEnabled,
		EventSubscriptionStatusProvisioning,
		EventSubscriptionStatusUnknown,
	}
}

func (c EventSubscriptionStatus) ToPtr() *EventSubscriptionStatus {
	return &c
}

// FtpAuthenticationType - The authentication type to be used to connect to the FTP server.
type FtpAuthenticationType string

const (
	FtpAuthenticationTypeAnonymous FtpAuthenticationType = "Anonymous"
	FtpAuthenticationTypeBasic     FtpAuthenticationType = "Basic"
)

func PossibleFtpAuthenticationTypeValues() []FtpAuthenticationType {
	return []FtpAuthenticationType{
		FtpAuthenticationTypeAnonymous,
		FtpAuthenticationTypeBasic,
	}
}

func (c FtpAuthenticationType) ToPtr() *FtpAuthenticationType {
	return &c
}

// GoogleAdWordsAuthenticationType - The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
type GoogleAdWordsAuthenticationType string

const (
	GoogleAdWordsAuthenticationTypeServiceAuthentication GoogleAdWordsAuthenticationType = "ServiceAuthentication"
	GoogleAdWordsAuthenticationTypeUserAuthentication    GoogleAdWordsAuthenticationType = "UserAuthentication"
)

func PossibleGoogleAdWordsAuthenticationTypeValues() []GoogleAdWordsAuthenticationType {
	return []GoogleAdWordsAuthenticationType{
		GoogleAdWordsAuthenticationTypeServiceAuthentication,
		GoogleAdWordsAuthenticationTypeUserAuthentication,
	}
}

func (c GoogleAdWordsAuthenticationType) ToPtr() *GoogleAdWordsAuthenticationType {
	return &c
}

// GoogleBigQueryAuthenticationType - The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
type GoogleBigQueryAuthenticationType string

const (
	GoogleBigQueryAuthenticationTypeServiceAuthentication GoogleBigQueryAuthenticationType = "ServiceAuthentication"
	GoogleBigQueryAuthenticationTypeUserAuthentication    GoogleBigQueryAuthenticationType = "UserAuthentication"
)

func PossibleGoogleBigQueryAuthenticationTypeValues() []GoogleBigQueryAuthenticationType {
	return []GoogleBigQueryAuthenticationType{
		GoogleBigQueryAuthenticationTypeServiceAuthentication,
		GoogleBigQueryAuthenticationTypeUserAuthentication,
	}
}

func (c GoogleBigQueryAuthenticationType) ToPtr() *GoogleBigQueryAuthenticationType {
	return &c
}

// HBaseAuthenticationType - The authentication mechanism to use to connect to the HBase server.
type HBaseAuthenticationType string

const (
	HBaseAuthenticationTypeAnonymous HBaseAuthenticationType = "Anonymous"
	HBaseAuthenticationTypeBasic     HBaseAuthenticationType = "Basic"
)

func PossibleHBaseAuthenticationTypeValues() []HBaseAuthenticationType {
	return []HBaseAuthenticationType{
		HBaseAuthenticationTypeAnonymous,
		HBaseAuthenticationTypeBasic,
	}
}

func (c HBaseAuthenticationType) ToPtr() *HBaseAuthenticationType {
	return &c
}

// HDInsightActivityDebugInfoOption - The HDInsightActivityDebugInfoOption settings to use.
type HDInsightActivityDebugInfoOption string

const (
	HDInsightActivityDebugInfoOptionAlways  HDInsightActivityDebugInfoOption = "Always"
	HDInsightActivityDebugInfoOptionFailure HDInsightActivityDebugInfoOption = "Failure"
	HDInsightActivityDebugInfoOptionNone    HDInsightActivityDebugInfoOption = "None"
)

func PossibleHDInsightActivityDebugInfoOptionValues() []HDInsightActivityDebugInfoOption {
	return []HDInsightActivityDebugInfoOption{
		HDInsightActivityDebugInfoOptionAlways,
		HDInsightActivityDebugInfoOptionFailure,
		HDInsightActivityDebugInfoOptionNone,
	}
}

func (c HDInsightActivityDebugInfoOption) ToPtr() *HDInsightActivityDebugInfoOption {
	return &c
}

// HdiNodeTypes - The node types on which the script action should be executed.
type HdiNodeTypes string

const (
	HdiNodeTypesHeadnode   HdiNodeTypes = "Headnode"
	HdiNodeTypesWorkernode HdiNodeTypes = "Workernode"
	HdiNodeTypesZookeeper  HdiNodeTypes = "Zookeeper"
)

func PossibleHdiNodeTypesValues() []HdiNodeTypes {
	return []HdiNodeTypes{
		HdiNodeTypesHeadnode,
		HdiNodeTypesWorkernode,
		HdiNodeTypesZookeeper,
	}
}

func (c HdiNodeTypes) ToPtr() *HdiNodeTypes {
	return &c
}

// HiveAuthenticationType - The authentication method used to access the Hive server.
type HiveAuthenticationType string

const (
	HiveAuthenticationTypeAnonymous                    HiveAuthenticationType = "Anonymous"
	HiveAuthenticationTypeUsername                     HiveAuthenticationType = "Username"
	HiveAuthenticationTypeUsernameAndPassword          HiveAuthenticationType = "UsernameAndPassword"
	HiveAuthenticationTypeWindowsAzureHdInsightService HiveAuthenticationType = "WindowsAzureHDInsightService"
)

func PossibleHiveAuthenticationTypeValues() []HiveAuthenticationType {
	return []HiveAuthenticationType{
		HiveAuthenticationTypeAnonymous,
		HiveAuthenticationTypeUsername,
		HiveAuthenticationTypeUsernameAndPassword,
		HiveAuthenticationTypeWindowsAzureHdInsightService,
	}
}

func (c HiveAuthenticationType) ToPtr() *HiveAuthenticationType {
	return &c
}

// HiveServerType - The type of Hive server.
type HiveServerType string

const (
	HiveServerTypeHiveServer1      HiveServerType = "HiveServer1"
	HiveServerTypeHiveServer2      HiveServerType = "HiveServer2"
	HiveServerTypeHiveThriftServer HiveServerType = "HiveThriftServer"
)

func PossibleHiveServerTypeValues() []HiveServerType {
	return []HiveServerType{
		HiveServerTypeHiveServer1,
		HiveServerTypeHiveServer2,
		HiveServerTypeHiveThriftServer,
	}
}

func (c HiveServerType) ToPtr() *HiveServerType {
	return &c
}

// HiveThriftTransportProtocol - The transport protocol to use in the Thrift layer.
type HiveThriftTransportProtocol string

const (
	HiveThriftTransportProtocolBinary HiveThriftTransportProtocol = "Binary"
	HiveThriftTransportProtocolHTTP   HiveThriftTransportProtocol = "HTTP "
	HiveThriftTransportProtocolSasl   HiveThriftTransportProtocol = "SASL"
)

func PossibleHiveThriftTransportProtocolValues() []HiveThriftTransportProtocol {
	return []HiveThriftTransportProtocol{
		HiveThriftTransportProtocolBinary,
		HiveThriftTransportProtocolHTTP,
		HiveThriftTransportProtocolSasl,
	}
}

func (c HiveThriftTransportProtocol) ToPtr() *HiveThriftTransportProtocol {
	return &c
}

// HttpAuthenticationType - The authentication type to be used to connect to the HTTP server.
type HttpAuthenticationType string

const (
	HttpAuthenticationTypeAnonymous         HttpAuthenticationType = "Anonymous"
	HttpAuthenticationTypeBasic             HttpAuthenticationType = "Basic"
	HttpAuthenticationTypeClientCertificate HttpAuthenticationType = "ClientCertificate"
	HttpAuthenticationTypeDigest            HttpAuthenticationType = "Digest"
	HttpAuthenticationTypeWindows           HttpAuthenticationType = "Windows"
)

func PossibleHttpAuthenticationTypeValues() []HttpAuthenticationType {
	return []HttpAuthenticationType{
		HttpAuthenticationTypeAnonymous,
		HttpAuthenticationTypeBasic,
		HttpAuthenticationTypeClientCertificate,
		HttpAuthenticationTypeDigest,
		HttpAuthenticationTypeWindows,
	}
}

func (c HttpAuthenticationType) ToPtr() *HttpAuthenticationType {
	return &c
}

// ImpalaAuthenticationType - The authentication type to use.
type ImpalaAuthenticationType string

const (
	ImpalaAuthenticationTypeAnonymous           ImpalaAuthenticationType = "Anonymous"
	ImpalaAuthenticationTypeSaslUsername        ImpalaAuthenticationType = "SASLUsername"
	ImpalaAuthenticationTypeUsernameAndPassword ImpalaAuthenticationType = "UsernameAndPassword"
)

func PossibleImpalaAuthenticationTypeValues() []ImpalaAuthenticationType {
	return []ImpalaAuthenticationType{
		ImpalaAuthenticationTypeAnonymous,
		ImpalaAuthenticationTypeSaslUsername,
		ImpalaAuthenticationTypeUsernameAndPassword,
	}
}

func (c ImpalaAuthenticationType) ToPtr() *ImpalaAuthenticationType {
	return &c
}

// MongoDbAuthenticationType - The authentication type to be used to connect to the MongoDB database.
type MongoDbAuthenticationType string

const (
	MongoDbAuthenticationTypeAnonymous MongoDbAuthenticationType = "Anonymous"
	MongoDbAuthenticationTypeBasic     MongoDbAuthenticationType = "Basic"
)

func PossibleMongoDbAuthenticationTypeValues() []MongoDbAuthenticationType {
	return []MongoDbAuthenticationType{
		MongoDbAuthenticationTypeAnonymous,
		MongoDbAuthenticationTypeBasic,
	}
}

func (c MongoDbAuthenticationType) ToPtr() *MongoDbAuthenticationType {
	return &c
}

// ODataAadServicePrincipalCredentialType - Specify the credential type (key or cert) is used for service principal.
type ODataAadServicePrincipalCredentialType string

const (
	ODataAadServicePrincipalCredentialTypeServicePrincipalCert ODataAadServicePrincipalCredentialType = "ServicePrincipalCert"
	ODataAadServicePrincipalCredentialTypeServicePrincipalKey  ODataAadServicePrincipalCredentialType = "ServicePrincipalKey"
)

func PossibleODataAadServicePrincipalCredentialTypeValues() []ODataAadServicePrincipalCredentialType {
	return []ODataAadServicePrincipalCredentialType{
		ODataAadServicePrincipalCredentialTypeServicePrincipalCert,
		ODataAadServicePrincipalCredentialTypeServicePrincipalKey,
	}
}

func (c ODataAadServicePrincipalCredentialType) ToPtr() *ODataAadServicePrincipalCredentialType {
	return &c
}

// ODataAuthenticationType - Type of authentication used to connect to the OData service.
type ODataAuthenticationType string

const (
	ODataAuthenticationTypeAadServicePrincipal    ODataAuthenticationType = "AadServicePrincipal"
	ODataAuthenticationTypeAnonymous              ODataAuthenticationType = "Anonymous"
	ODataAuthenticationTypeBasic                  ODataAuthenticationType = "Basic"
	ODataAuthenticationTypeManagedServiceIDentity ODataAuthenticationType = "ManagedServiceIdentity"
	ODataAuthenticationTypeWindows                ODataAuthenticationType = "Windows"
)

func PossibleODataAuthenticationTypeValues() []ODataAuthenticationType {
	return []ODataAuthenticationType{
		ODataAuthenticationTypeAadServicePrincipal,
		ODataAuthenticationTypeAnonymous,
		ODataAuthenticationTypeBasic,
		ODataAuthenticationTypeManagedServiceIDentity,
		ODataAuthenticationTypeWindows,
	}
}

func (c ODataAuthenticationType) ToPtr() *ODataAuthenticationType {
	return &c
}

type OrcCompressionCodec string

const (
	OrcCompressionCodecNone   OrcCompressionCodec = "none"
	OrcCompressionCodecSnappy OrcCompressionCodec = "snappy"
	OrcCompressionCodecZlib   OrcCompressionCodec = "zlib"
)

func PossibleOrcCompressionCodecValues() []OrcCompressionCodec {
	return []OrcCompressionCodec{
		OrcCompressionCodecNone,
		OrcCompressionCodecSnappy,
		OrcCompressionCodecZlib,
	}
}

func (c OrcCompressionCodec) ToPtr() *OrcCompressionCodec {
	return &c
}

// ParameterType - Parameter type.
type ParameterType string

const (
	ParameterTypeArray        ParameterType = "Array"
	ParameterTypeBool         ParameterType = "Bool"
	ParameterTypeFloat        ParameterType = "Float"
	ParameterTypeInt          ParameterType = "Int"
	ParameterTypeObject       ParameterType = "Object"
	ParameterTypeSecureString ParameterType = "SecureString"
	ParameterTypeString       ParameterType = "String"
)

func PossibleParameterTypeValues() []ParameterType {
	return []ParameterType{
		ParameterTypeArray,
		ParameterTypeBool,
		ParameterTypeFloat,
		ParameterTypeInt,
		ParameterTypeObject,
		ParameterTypeSecureString,
		ParameterTypeString,
	}
}

func (c ParameterType) ToPtr() *ParameterType {
	return &c
}

type ParquetCompressionCodec string

const (
	ParquetCompressionCodecGzip   ParquetCompressionCodec = "gzip"
	ParquetCompressionCodecLzo    ParquetCompressionCodec = "lzo"
	ParquetCompressionCodecNone   ParquetCompressionCodec = "none"
	ParquetCompressionCodecSnappy ParquetCompressionCodec = "snappy"
)

func PossibleParquetCompressionCodecValues() []ParquetCompressionCodec {
	return []ParquetCompressionCodec{
		ParquetCompressionCodecGzip,
		ParquetCompressionCodecLzo,
		ParquetCompressionCodecNone,
		ParquetCompressionCodecSnappy,
	}
}

func (c ParquetCompressionCodec) ToPtr() *ParquetCompressionCodec {
	return &c
}

// PhoenixAuthenticationType - The authentication mechanism used to connect to the Phoenix server.
type PhoenixAuthenticationType string

const (
	PhoenixAuthenticationTypeAnonymous                    PhoenixAuthenticationType = "Anonymous"
	PhoenixAuthenticationTypeUsernameAndPassword          PhoenixAuthenticationType = "UsernameAndPassword"
	PhoenixAuthenticationTypeWindowsAzureHdInsightService PhoenixAuthenticationType = "WindowsAzureHDInsightService"
)

func PossiblePhoenixAuthenticationTypeValues() []PhoenixAuthenticationType {
	return []PhoenixAuthenticationType{
		PhoenixAuthenticationTypeAnonymous,
		PhoenixAuthenticationTypeUsernameAndPassword,
		PhoenixAuthenticationTypeWindowsAzureHdInsightService,
	}
}

func (c PhoenixAuthenticationType) ToPtr() *PhoenixAuthenticationType {
	return &c
}

type PluginCurrentState string

const (
	PluginCurrentStateCleanup             PluginCurrentState = "Cleanup"
	PluginCurrentStateEnded               PluginCurrentState = "Ended"
	PluginCurrentStateMonitoring          PluginCurrentState = "Monitoring"
	PluginCurrentStatePreparation         PluginCurrentState = "Preparation"
	PluginCurrentStateQueued              PluginCurrentState = "Queued"
	PluginCurrentStateResourceAcquisition PluginCurrentState = "ResourceAcquisition"
	PluginCurrentStateSubmission          PluginCurrentState = "Submission"
)

func PossiblePluginCurrentStateValues() []PluginCurrentState {
	return []PluginCurrentState{
		PluginCurrentStateCleanup,
		PluginCurrentStateEnded,
		PluginCurrentStateMonitoring,
		PluginCurrentStatePreparation,
		PluginCurrentStateQueued,
		PluginCurrentStateResourceAcquisition,
		PluginCurrentStateSubmission,
	}
}

func (c PluginCurrentState) ToPtr() *PluginCurrentState {
	return &c
}

// PrestoAuthenticationType - The authentication mechanism used to connect to the Presto server.
type PrestoAuthenticationType string

const (
	PrestoAuthenticationTypeAnonymous PrestoAuthenticationType = "Anonymous"
	PrestoAuthenticationTypeLdap      PrestoAuthenticationType = "LDAP"
)

func PossiblePrestoAuthenticationTypeValues() []PrestoAuthenticationType {
	return []PrestoAuthenticationType{
		PrestoAuthenticationTypeAnonymous,
		PrestoAuthenticationTypeLdap,
	}
}

func (c PrestoAuthenticationType) ToPtr() *PrestoAuthenticationType {
	return &c
}

// RestServiceAuthenticationType - Type of authentication used to connect to the REST service.
type RestServiceAuthenticationType string

const (
	RestServiceAuthenticationTypeAadServicePrincipal    RestServiceAuthenticationType = "AadServicePrincipal"
	RestServiceAuthenticationTypeAnonymous              RestServiceAuthenticationType = "Anonymous"
	RestServiceAuthenticationTypeBasic                  RestServiceAuthenticationType = "Basic"
	RestServiceAuthenticationTypeManagedServiceIDentity RestServiceAuthenticationType = "ManagedServiceIdentity"
)

func PossibleRestServiceAuthenticationTypeValues() []RestServiceAuthenticationType {
	return []RestServiceAuthenticationType{
		RestServiceAuthenticationTypeAadServicePrincipal,
		RestServiceAuthenticationTypeAnonymous,
		RestServiceAuthenticationTypeBasic,
		RestServiceAuthenticationTypeManagedServiceIDentity,
	}
}

func (c RestServiceAuthenticationType) ToPtr() *RestServiceAuthenticationType {
	return &c
}

// RunQueryFilterOperand - Parameter name to be used for filter. The allowed operands to query pipeline runs are PipelineName, RunStart, RunEnd and Status; to query activity runs are ActivityName, ActivityRunStart, ActivityRunEnd, ActivityType and Status, and to query trigger runs are TriggerName, TriggerRunTimestamp and Status.
type RunQueryFilterOperand string

const (
	RunQueryFilterOperandActivityName        RunQueryFilterOperand = "ActivityName"
	RunQueryFilterOperandActivityRunEnd      RunQueryFilterOperand = "ActivityRunEnd"
	RunQueryFilterOperandActivityRunStart    RunQueryFilterOperand = "ActivityRunStart"
	RunQueryFilterOperandActivityType        RunQueryFilterOperand = "ActivityType"
	RunQueryFilterOperandLatestOnly          RunQueryFilterOperand = "LatestOnly"
	RunQueryFilterOperandPipelineName        RunQueryFilterOperand = "PipelineName"
	RunQueryFilterOperandRunEnd              RunQueryFilterOperand = "RunEnd"
	RunQueryFilterOperandRunGroupID          RunQueryFilterOperand = "RunGroupId"
	RunQueryFilterOperandRunStart            RunQueryFilterOperand = "RunStart"
	RunQueryFilterOperandStatus              RunQueryFilterOperand = "Status"
	RunQueryFilterOperandTriggerName         RunQueryFilterOperand = "TriggerName"
	RunQueryFilterOperandTriggerRunTimestamp RunQueryFilterOperand = "TriggerRunTimestamp"
)

func PossibleRunQueryFilterOperandValues() []RunQueryFilterOperand {
	return []RunQueryFilterOperand{
		RunQueryFilterOperandActivityName,
		RunQueryFilterOperandActivityRunEnd,
		RunQueryFilterOperandActivityRunStart,
		RunQueryFilterOperandActivityType,
		RunQueryFilterOperandLatestOnly,
		RunQueryFilterOperandPipelineName,
		RunQueryFilterOperandRunEnd,
		RunQueryFilterOperandRunGroupID,
		RunQueryFilterOperandRunStart,
		RunQueryFilterOperandStatus,
		RunQueryFilterOperandTriggerName,
		RunQueryFilterOperandTriggerRunTimestamp,
	}
}

func (c RunQueryFilterOperand) ToPtr() *RunQueryFilterOperand {
	return &c
}

// RunQueryFilterOperator - Operator to be used for filter.
type RunQueryFilterOperator string

const (
	RunQueryFilterOperatorEquals    RunQueryFilterOperator = "Equals"
	RunQueryFilterOperatorIn        RunQueryFilterOperator = "In"
	RunQueryFilterOperatorNotEquals RunQueryFilterOperator = "NotEquals"
	RunQueryFilterOperatorNotIn     RunQueryFilterOperator = "NotIn"
)

func PossibleRunQueryFilterOperatorValues() []RunQueryFilterOperator {
	return []RunQueryFilterOperator{
		RunQueryFilterOperatorEquals,
		RunQueryFilterOperatorIn,
		RunQueryFilterOperatorNotEquals,
		RunQueryFilterOperatorNotIn,
	}
}

func (c RunQueryFilterOperator) ToPtr() *RunQueryFilterOperator {
	return &c
}

// RunQueryOrder - Sorting order of the parameter.
type RunQueryOrder string

const (
	RunQueryOrderAsc  RunQueryOrder = "ASC"
	RunQueryOrderDesc RunQueryOrder = "DESC"
)

func PossibleRunQueryOrderValues() []RunQueryOrder {
	return []RunQueryOrder{
		RunQueryOrderAsc,
		RunQueryOrderDesc,
	}
}

func (c RunQueryOrder) ToPtr() *RunQueryOrder {
	return &c
}

// RunQueryOrderByField - Parameter name to be used for order by. The allowed parameters to order by for pipeline runs are PipelineName, RunStart, RunEnd and Status; for activity runs are ActivityName, ActivityRunStart, ActivityRunEnd and Status; for trigger runs are TriggerName, TriggerRunTimestamp and Status.
type RunQueryOrderByField string

const (
	RunQueryOrderByFieldActivityName        RunQueryOrderByField = "ActivityName"
	RunQueryOrderByFieldActivityRunEnd      RunQueryOrderByField = "ActivityRunEnd"
	RunQueryOrderByFieldActivityRunStart    RunQueryOrderByField = "ActivityRunStart"
	RunQueryOrderByFieldPipelineName        RunQueryOrderByField = "PipelineName"
	RunQueryOrderByFieldRunEnd              RunQueryOrderByField = "RunEnd"
	RunQueryOrderByFieldRunStart            RunQueryOrderByField = "RunStart"
	RunQueryOrderByFieldStatus              RunQueryOrderByField = "Status"
	RunQueryOrderByFieldTriggerName         RunQueryOrderByField = "TriggerName"
	RunQueryOrderByFieldTriggerRunTimestamp RunQueryOrderByField = "TriggerRunTimestamp"
)

func PossibleRunQueryOrderByFieldValues() []RunQueryOrderByField {
	return []RunQueryOrderByField{
		RunQueryOrderByFieldActivityName,
		RunQueryOrderByFieldActivityRunEnd,
		RunQueryOrderByFieldActivityRunStart,
		RunQueryOrderByFieldPipelineName,
		RunQueryOrderByFieldRunEnd,
		RunQueryOrderByFieldRunStart,
		RunQueryOrderByFieldStatus,
		RunQueryOrderByFieldTriggerName,
		RunQueryOrderByFieldTriggerRunTimestamp,
	}
}

func (c RunQueryOrderByField) ToPtr() *RunQueryOrderByField {
	return &c
}

// SapHanaAuthenticationType - The authentication type to be used to connect to the SAP HANA server.
type SapHanaAuthenticationType string

const (
	SapHanaAuthenticationTypeBasic   SapHanaAuthenticationType = "Basic"
	SapHanaAuthenticationTypeWindows SapHanaAuthenticationType = "Windows"
)

func PossibleSapHanaAuthenticationTypeValues() []SapHanaAuthenticationType {
	return []SapHanaAuthenticationType{
		SapHanaAuthenticationTypeBasic,
		SapHanaAuthenticationTypeWindows,
	}
}

func (c SapHanaAuthenticationType) ToPtr() *SapHanaAuthenticationType {
	return &c
}

type SchedulerCurrentState string

const (
	SchedulerCurrentStateEnded     SchedulerCurrentState = "Ended"
	SchedulerCurrentStateQueued    SchedulerCurrentState = "Queued"
	SchedulerCurrentStateScheduled SchedulerCurrentState = "Scheduled"
)

func PossibleSchedulerCurrentStateValues() []SchedulerCurrentState {
	return []SchedulerCurrentState{
		SchedulerCurrentStateEnded,
		SchedulerCurrentStateQueued,
		SchedulerCurrentStateScheduled,
	}
}

func (c SchedulerCurrentState) ToPtr() *SchedulerCurrentState {
	return &c
}

// ServiceNowAuthenticationType - The authentication type to use.
type ServiceNowAuthenticationType string

const (
	ServiceNowAuthenticationTypeBasic  ServiceNowAuthenticationType = "Basic"
	ServiceNowAuthenticationTypeOAuth2 ServiceNowAuthenticationType = "OAuth2"
)

func PossibleServiceNowAuthenticationTypeValues() []ServiceNowAuthenticationType {
	return []ServiceNowAuthenticationType{
		ServiceNowAuthenticationTypeBasic,
		ServiceNowAuthenticationTypeOAuth2,
	}
}

func (c ServiceNowAuthenticationType) ToPtr() *ServiceNowAuthenticationType {
	return &c
}

// SftpAuthenticationType - The authentication type to be used to connect to the FTP server.
type SftpAuthenticationType string

const (
	SftpAuthenticationTypeBasic        SftpAuthenticationType = "Basic"
	SftpAuthenticationTypeSSHPublicKey SftpAuthenticationType = "SshPublicKey"
)

func PossibleSftpAuthenticationTypeValues() []SftpAuthenticationType {
	return []SftpAuthenticationType{
		SftpAuthenticationTypeBasic,
		SftpAuthenticationTypeSSHPublicKey,
	}
}

func (c SftpAuthenticationType) ToPtr() *SftpAuthenticationType {
	return &c
}

// SparkAuthenticationType - The authentication method used to access the Spark server.
type SparkAuthenticationType string

const (
	SparkAuthenticationTypeAnonymous                    SparkAuthenticationType = "Anonymous"
	SparkAuthenticationTypeUsername                     SparkAuthenticationType = "Username"
	SparkAuthenticationTypeUsernameAndPassword          SparkAuthenticationType = "UsernameAndPassword"
	SparkAuthenticationTypeWindowsAzureHdInsightService SparkAuthenticationType = "WindowsAzureHDInsightService"
)

func PossibleSparkAuthenticationTypeValues() []SparkAuthenticationType {
	return []SparkAuthenticationType{
		SparkAuthenticationTypeAnonymous,
		SparkAuthenticationTypeUsername,
		SparkAuthenticationTypeUsernameAndPassword,
		SparkAuthenticationTypeWindowsAzureHdInsightService,
	}
}

func (c SparkAuthenticationType) ToPtr() *SparkAuthenticationType {
	return &c
}

// SparkBatchJobResultType - The Spark batch job result.
type SparkBatchJobResultType string

const (
	SparkBatchJobResultTypeCancelled SparkBatchJobResultType = "Cancelled"
	SparkBatchJobResultTypeFailed    SparkBatchJobResultType = "Failed"
	SparkBatchJobResultTypeSucceeded SparkBatchJobResultType = "Succeeded"
	SparkBatchJobResultTypeUncertain SparkBatchJobResultType = "Uncertain"
)

func PossibleSparkBatchJobResultTypeValues() []SparkBatchJobResultType {
	return []SparkBatchJobResultType{
		SparkBatchJobResultTypeCancelled,
		SparkBatchJobResultTypeFailed,
		SparkBatchJobResultTypeSucceeded,
		SparkBatchJobResultTypeUncertain,
	}
}

func (c SparkBatchJobResultType) ToPtr() *SparkBatchJobResultType {
	return &c
}

type SparkErrorSource string

const (
	SparkErrorSourceDependency SparkErrorSource = "Dependency"
	SparkErrorSourceSystem     SparkErrorSource = "System"
	SparkErrorSourceUnknown    SparkErrorSource = "Unknown"
	SparkErrorSourceUser       SparkErrorSource = "User"
)

func PossibleSparkErrorSourceValues() []SparkErrorSource {
	return []SparkErrorSource{
		SparkErrorSourceDependency,
		SparkErrorSourceSystem,
		SparkErrorSourceUnknown,
		SparkErrorSourceUser,
	}
}

func (c SparkErrorSource) ToPtr() *SparkErrorSource {
	return &c
}

// SparkJobType - The job type.
type SparkJobType string

const (
	SparkJobTypeSparkBatch   SparkJobType = "SparkBatch"
	SparkJobTypeSparkSession SparkJobType = "SparkSession"
)

func PossibleSparkJobTypeValues() []SparkJobType {
	return []SparkJobType{
		SparkJobTypeSparkBatch,
		SparkJobTypeSparkSession,
	}
}

func (c SparkJobType) ToPtr() *SparkJobType {
	return &c
}

// SparkServerType - The type of Spark server.
type SparkServerType string

const (
	SparkServerTypeSharkServer       SparkServerType = "SharkServer"
	SparkServerTypeSharkServer2      SparkServerType = "SharkServer2"
	SparkServerTypeSparkThriftServer SparkServerType = "SparkThriftServer"
)

func PossibleSparkServerTypeValues() []SparkServerType {
	return []SparkServerType{
		SparkServerTypeSharkServer,
		SparkServerTypeSharkServer2,
		SparkServerTypeSparkThriftServer,
	}
}

func (c SparkServerType) ToPtr() *SparkServerType {
	return &c
}

// SparkThriftTransportProtocol - The transport protocol to use in the Thrift layer.
type SparkThriftTransportProtocol string

const (
	SparkThriftTransportProtocolBinary SparkThriftTransportProtocol = "Binary"
	SparkThriftTransportProtocolHTTP   SparkThriftTransportProtocol = "HTTP "
	SparkThriftTransportProtocolSasl   SparkThriftTransportProtocol = "SASL"
)

func PossibleSparkThriftTransportProtocolValues() []SparkThriftTransportProtocol {
	return []SparkThriftTransportProtocol{
		SparkThriftTransportProtocolBinary,
		SparkThriftTransportProtocolHTTP,
		SparkThriftTransportProtocolSasl,
	}
}

func (c SparkThriftTransportProtocol) ToPtr() *SparkThriftTransportProtocol {
	return &c
}

// SqlConnectionType - The type of the connection.
type SqlConnectionType string

const (
	SqlConnectionTypeSQLOnDemand SqlConnectionType = "SqlOnDemand"
	SqlConnectionTypeSQLPool     SqlConnectionType = "SqlPool"
)

func PossibleSqlConnectionTypeValues() []SqlConnectionType {
	return []SqlConnectionType{
		SqlConnectionTypeSQLOnDemand,
		SqlConnectionTypeSQLPool,
	}
}

func (c SqlConnectionType) ToPtr() *SqlConnectionType {
	return &c
}

// SsisPackageLocationType - The type of SSIS package location.
type SsisPackageLocationType string

const (
	SsisPackageLocationTypeFile          SsisPackageLocationType = "File"
	SsisPackageLocationTypeInlinePackage SsisPackageLocationType = "InlinePackage"
	SsisPackageLocationTypeSsisdb        SsisPackageLocationType = "SSISDB"
)

func PossibleSsisPackageLocationTypeValues() []SsisPackageLocationType {
	return []SsisPackageLocationType{
		SsisPackageLocationTypeFile,
		SsisPackageLocationTypeInlinePackage,
		SsisPackageLocationTypeSsisdb,
	}
}

func (c SsisPackageLocationType) ToPtr() *SsisPackageLocationType {
	return &c
}

// StoredProcedureParameterType - Stored procedure parameter type.
type StoredProcedureParameterType string

const (
	StoredProcedureParameterTypeBoolean StoredProcedureParameterType = "Boolean"
	StoredProcedureParameterTypeDate    StoredProcedureParameterType = "Date"
	StoredProcedureParameterTypeDecimal StoredProcedureParameterType = "Decimal"
	StoredProcedureParameterTypeGUID    StoredProcedureParameterType = "Guid"
	StoredProcedureParameterTypeInt     StoredProcedureParameterType = "Int"
	StoredProcedureParameterTypeInt64   StoredProcedureParameterType = "Int64"
	StoredProcedureParameterTypeString  StoredProcedureParameterType = "String"
)

func PossibleStoredProcedureParameterTypeValues() []StoredProcedureParameterType {
	return []StoredProcedureParameterType{
		StoredProcedureParameterTypeBoolean,
		StoredProcedureParameterTypeDate,
		StoredProcedureParameterTypeDecimal,
		StoredProcedureParameterTypeGUID,
		StoredProcedureParameterTypeInt,
		StoredProcedureParameterTypeInt64,
		StoredProcedureParameterTypeString,
	}
}

func (c StoredProcedureParameterType) ToPtr() *StoredProcedureParameterType {
	return &c
}

// SybaseAuthenticationType - AuthenticationType to be used for connection.
type SybaseAuthenticationType string

const (
	SybaseAuthenticationTypeBasic   SybaseAuthenticationType = "Basic"
	SybaseAuthenticationTypeWindows SybaseAuthenticationType = "Windows"
)

func PossibleSybaseAuthenticationTypeValues() []SybaseAuthenticationType {
	return []SybaseAuthenticationType{
		SybaseAuthenticationTypeBasic,
		SybaseAuthenticationTypeWindows,
	}
}

func (c SybaseAuthenticationType) ToPtr() *SybaseAuthenticationType {
	return &c
}

// TeradataAuthenticationType - AuthenticationType to be used for connection.
type TeradataAuthenticationType string

const (
	TeradataAuthenticationTypeBasic   TeradataAuthenticationType = "Basic"
	TeradataAuthenticationTypeWindows TeradataAuthenticationType = "Windows"
)

func PossibleTeradataAuthenticationTypeValues() []TeradataAuthenticationType {
	return []TeradataAuthenticationType{
		TeradataAuthenticationTypeBasic,
		TeradataAuthenticationTypeWindows,
	}
}

func (c TeradataAuthenticationType) ToPtr() *TeradataAuthenticationType {
	return &c
}

// TriggerRunStatus - Trigger run status.
type TriggerRunStatus string

const (
	TriggerRunStatusFailed     TriggerRunStatus = "Failed"
	TriggerRunStatusInprogress TriggerRunStatus = "Inprogress"
	TriggerRunStatusSucceeded  TriggerRunStatus = "Succeeded"
)

func PossibleTriggerRunStatusValues() []TriggerRunStatus {
	return []TriggerRunStatus{
		TriggerRunStatusFailed,
		TriggerRunStatusInprogress,
		TriggerRunStatusSucceeded,
	}
}

func (c TriggerRunStatus) ToPtr() *TriggerRunStatus {
	return &c
}

// TriggerRuntimeState - Enumerates possible state of Triggers.
type TriggerRuntimeState string

const (
	TriggerRuntimeStateDisabled TriggerRuntimeState = "Disabled"
	TriggerRuntimeStateStarted  TriggerRuntimeState = "Started"
	TriggerRuntimeStateStopped  TriggerRuntimeState = "Stopped"
)

func PossibleTriggerRuntimeStateValues() []TriggerRuntimeState {
	return []TriggerRuntimeState{
		TriggerRuntimeStateDisabled,
		TriggerRuntimeStateStarted,
		TriggerRuntimeStateStopped,
	}
}

func (c TriggerRuntimeState) ToPtr() *TriggerRuntimeState {
	return &c
}

// VariableType - Variable type.
type VariableType string

const (
	VariableTypeArray   VariableType = "Array"
	VariableTypeBool    VariableType = "Bool"
	VariableTypeBoolean VariableType = "Boolean"
	VariableTypeString  VariableType = "String"
)

func PossibleVariableTypeValues() []VariableType {
	return []VariableType{
		VariableTypeArray,
		VariableTypeBool,
		VariableTypeBoolean,
		VariableTypeString,
	}
}

func (c VariableType) ToPtr() *VariableType {
	return &c
}

// WebActivityMethod - The list of HTTP methods supported by a WebActivity.
type WebActivityMethod string

const (
	WebActivityMethodDelete WebActivityMethod = "DELETE"
	WebActivityMethodGet    WebActivityMethod = "GET"
	WebActivityMethodPost   WebActivityMethod = "POST"
	WebActivityMethodPut    WebActivityMethod = "PUT"
)

func PossibleWebActivityMethodValues() []WebActivityMethod {
	return []WebActivityMethod{
		WebActivityMethodDelete,
		WebActivityMethodGet,
		WebActivityMethodPost,
		WebActivityMethodPut,
	}
}

func (c WebActivityMethod) ToPtr() *WebActivityMethod {
	return &c
}

// WebAuthenticationType - Type of authentication used to connect to the web table source.
type WebAuthenticationType string

const (
	WebAuthenticationTypeAnonymous         WebAuthenticationType = "Anonymous"
	WebAuthenticationTypeBasic             WebAuthenticationType = "Basic"
	WebAuthenticationTypeClientCertificate WebAuthenticationType = "ClientCertificate"
)

func PossibleWebAuthenticationTypeValues() []WebAuthenticationType {
	return []WebAuthenticationType{
		WebAuthenticationTypeAnonymous,
		WebAuthenticationTypeBasic,
		WebAuthenticationTypeClientCertificate,
	}
}

func (c WebAuthenticationType) ToPtr() *WebAuthenticationType {
	return &c
}
