// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"path"
	"strings"
)

// NotebookOperations contains the methods for the Notebook group.
type NotebookOperations interface {
	// CreateOrUpdateNotebook - Creates or updates a Note Book.
	CreateOrUpdateNotebook(ctx context.Context, notebookName string, notebook NotebookResource, notebookCreateOrUpdateNotebookOptions *NotebookCreateOrUpdateNotebookOptions) (*NotebookResourceResponse, error)
	// DeleteNotebook - Deletes a Note book.
	DeleteNotebook(ctx context.Context, notebookName string) (*http.Response, error)
	// GetNotebook - Gets a Note Book.
	GetNotebook(ctx context.Context, notebookName string, notebookGetNotebookOptions *NotebookGetNotebookOptions) (*NotebookResourceResponse, error)
	// GetNotebookSummaryByWorkSpace - Lists a summary of Notebooks.
	GetNotebookSummaryByWorkSpace() (NotebookListResponsePager, error)
	// GetNotebooksByWorkspace - Lists Notebooks.
	GetNotebooksByWorkspace() (NotebookListResponsePager, error)
}

// notebookOperations implements the NotebookOperations interface.
type notebookOperations struct {
	*Client
}

// CreateOrUpdateNotebook - Creates or updates a Note Book.
func (client *notebookOperations) CreateOrUpdateNotebook(ctx context.Context, notebookName string, notebook NotebookResource, notebookCreateOrUpdateNotebookOptions *NotebookCreateOrUpdateNotebookOptions) (*NotebookResourceResponse, error) {
	req, err := client.createOrUpdateNotebookCreateRequest(notebookName, notebook, notebookCreateOrUpdateNotebookOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createOrUpdateNotebookHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// createOrUpdateNotebookCreateRequest creates the CreateOrUpdateNotebook request.
func (client *notebookOperations) createOrUpdateNotebookCreateRequest(notebookName string, notebook NotebookResource, notebookCreateOrUpdateNotebookOptions *NotebookCreateOrUpdateNotebookOptions) (*azcore.Request, error) {
	urlPath := "/notebooks/{notebookName}"
	urlPath = strings.ReplaceAll(urlPath, "{notebookName}", url.PathEscape(notebookName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	if notebookCreateOrUpdateNotebookOptions != nil && notebookCreateOrUpdateNotebookOptions.IfMatch != nil {
		req.Header.Set("If-Match", *notebookCreateOrUpdateNotebookOptions.IfMatch)
	}
	return req, req.MarshalAsJSON(notebook)
}

// createOrUpdateNotebookHandleResponse handles the CreateOrUpdateNotebook response.
func (client *notebookOperations) createOrUpdateNotebookHandleResponse(resp *azcore.Response) (*NotebookResourceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.createOrUpdateNotebookHandleError(resp)
	}
	result := NotebookResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.NotebookResource)
}

// createOrUpdateNotebookHandleError handles the CreateOrUpdateNotebook error response.
func (client *notebookOperations) createOrUpdateNotebookHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DeleteNotebook - Deletes a Note book.
func (client *notebookOperations) DeleteNotebook(ctx context.Context, notebookName string) (*http.Response, error) {
	req, err := client.deleteNotebookCreateRequest(notebookName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteNotebookHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// deleteNotebookCreateRequest creates the DeleteNotebook request.
func (client *notebookOperations) deleteNotebookCreateRequest(notebookName string) (*azcore.Request, error) {
	urlPath := "/notebooks/{notebookName}"
	urlPath = strings.ReplaceAll(urlPath, "{notebookName}", url.PathEscape(notebookName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteNotebookHandleResponse handles the DeleteNotebook response.
func (client *notebookOperations) deleteNotebookHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.deleteNotebookHandleError(resp)
	}
	return resp.Response, nil
}

// deleteNotebookHandleError handles the DeleteNotebook error response.
func (client *notebookOperations) deleteNotebookHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetNotebook - Gets a Note Book.
func (client *notebookOperations) GetNotebook(ctx context.Context, notebookName string, notebookGetNotebookOptions *NotebookGetNotebookOptions) (*NotebookResourceResponse, error) {
	req, err := client.getNotebookCreateRequest(notebookName, notebookGetNotebookOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getNotebookHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getNotebookCreateRequest creates the GetNotebook request.
func (client *notebookOperations) getNotebookCreateRequest(notebookName string, notebookGetNotebookOptions *NotebookGetNotebookOptions) (*azcore.Request, error) {
	urlPath := "/notebooks/{notebookName}"
	urlPath = strings.ReplaceAll(urlPath, "{notebookName}", url.PathEscape(notebookName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	if notebookGetNotebookOptions != nil && notebookGetNotebookOptions.IfNoneMatch != nil {
		req.Header.Set("If-None-Match", *notebookGetNotebookOptions.IfNoneMatch)
	}
	return req, nil
}

// getNotebookHandleResponse handles the GetNotebook response.
func (client *notebookOperations) getNotebookHandleResponse(resp *azcore.Response) (*NotebookResourceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusNotModified) {
		return nil, client.getNotebookHandleError(resp)
	}
	result := NotebookResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.NotebookResource)
}

// getNotebookHandleError handles the GetNotebook error response.
func (client *notebookOperations) getNotebookHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetNotebookSummaryByWorkSpace - Lists a summary of Notebooks.
func (client *notebookOperations) GetNotebookSummaryByWorkSpace() (NotebookListResponsePager, error) {
	req, err := client.getNotebookSummaryByWorkSpaceCreateRequest()
	if err != nil {
		return nil, err
	}
	return &notebookListResponsePager{
		pipeline:  client.p,
		request:   req,
		responder: client.getNotebookSummaryByWorkSpaceHandleResponse,
		advancer: func(resp *NotebookListResponseResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.NotebookListResponse.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.NotebookListResponse.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// getNotebookSummaryByWorkSpaceCreateRequest creates the GetNotebookSummaryByWorkSpace request.
func (client *notebookOperations) getNotebookSummaryByWorkSpaceCreateRequest() (*azcore.Request, error) {
	urlPath := "/notebooks/summary"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getNotebookSummaryByWorkSpaceHandleResponse handles the GetNotebookSummaryByWorkSpace response.
func (client *notebookOperations) getNotebookSummaryByWorkSpaceHandleResponse(resp *azcore.Response) (*NotebookListResponseResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getNotebookSummaryByWorkSpaceHandleError(resp)
	}
	result := NotebookListResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.NotebookListResponse)
}

// getNotebookSummaryByWorkSpaceHandleError handles the GetNotebookSummaryByWorkSpace error response.
func (client *notebookOperations) getNotebookSummaryByWorkSpaceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetNotebooksByWorkspace - Lists Notebooks.
func (client *notebookOperations) GetNotebooksByWorkspace() (NotebookListResponsePager, error) {
	req, err := client.getNotebooksByWorkspaceCreateRequest()
	if err != nil {
		return nil, err
	}
	return &notebookListResponsePager{
		pipeline:  client.p,
		request:   req,
		responder: client.getNotebooksByWorkspaceHandleResponse,
		advancer: func(resp *NotebookListResponseResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.NotebookListResponse.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.NotebookListResponse.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// getNotebooksByWorkspaceCreateRequest creates the GetNotebooksByWorkspace request.
func (client *notebookOperations) getNotebooksByWorkspaceCreateRequest() (*azcore.Request, error) {
	urlPath := "/notebooks"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getNotebooksByWorkspaceHandleResponse handles the GetNotebooksByWorkspace response.
func (client *notebookOperations) getNotebooksByWorkspaceHandleResponse(resp *azcore.Response) (*NotebookListResponseResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getNotebooksByWorkspaceHandleError(resp)
	}
	result := NotebookListResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.NotebookListResponse)
}

// getNotebooksByWorkspaceHandleError handles the GetNotebooksByWorkspace error response.
func (client *notebookOperations) getNotebooksByWorkspaceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
