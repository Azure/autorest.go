// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

type DatasetClient struct {
	*Client
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *DatasetClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// CreateOrUpdateDataset - Creates or updates a dataset.
func (client *DatasetClient) CreateOrUpdateDataset(ctx context.Context, datasetName string, dataset DatasetResource, datasetCreateOrUpdateDatasetOptions *DatasetCreateOrUpdateDatasetOptions) (*azcore.Response, error) {
	req, err := client.CreateOrUpdateDatasetCreateRequest(ctx, datasetName, dataset, datasetCreateOrUpdateDatasetOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted) {
		return nil, client.CreateOrUpdateDatasetHandleError(resp)
	}
	return resp, nil
}

// CreateOrUpdateDatasetCreateRequest creates the CreateOrUpdateDataset request.
func (client *DatasetClient) CreateOrUpdateDatasetCreateRequest(ctx context.Context, datasetName string, dataset DatasetResource, datasetCreateOrUpdateDatasetOptions *DatasetCreateOrUpdateDatasetOptions) (*azcore.Request, error) {
	urlPath := "/datasets/{datasetName}"
	urlPath = strings.ReplaceAll(urlPath, "{datasetName}", url.PathEscape(datasetName))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	if datasetCreateOrUpdateDatasetOptions != nil && datasetCreateOrUpdateDatasetOptions.IfMatch != nil {
		req.Header.Set("If-Match", *datasetCreateOrUpdateDatasetOptions.IfMatch)
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(dataset)
}

// CreateOrUpdateDatasetHandleResponse handles the CreateOrUpdateDataset response.
func (client *DatasetClient) CreateOrUpdateDatasetHandleResponse(resp *azcore.Response) (*DatasetResourceResponse, error) {
	result := DatasetResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.DatasetResource)
}

// CreateOrUpdateDatasetHandleError handles the CreateOrUpdateDataset error response.
func (client *DatasetClient) CreateOrUpdateDatasetHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DeleteDataset - Deletes a dataset.
func (client *DatasetClient) DeleteDataset(ctx context.Context, datasetName string) (*azcore.Response, error) {
	req, err := client.DeleteDatasetCreateRequest(ctx, datasetName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.DeleteDatasetHandleError(resp)
	}
	return resp, nil
}

// DeleteDatasetCreateRequest creates the DeleteDataset request.
func (client *DatasetClient) DeleteDatasetCreateRequest(ctx context.Context, datasetName string) (*azcore.Request, error) {
	urlPath := "/datasets/{datasetName}"
	urlPath = strings.ReplaceAll(urlPath, "{datasetName}", url.PathEscape(datasetName))
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// DeleteDatasetHandleError handles the DeleteDataset error response.
func (client *DatasetClient) DeleteDatasetHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDataset - Gets a dataset.
func (client *DatasetClient) GetDataset(ctx context.Context, datasetName string, datasetGetDatasetOptions *DatasetGetDatasetOptions) (*DatasetResourceResponse, error) {
	req, err := client.GetDatasetCreateRequest(ctx, datasetName, datasetGetDatasetOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusNotModified) {
		return nil, client.GetDatasetHandleError(resp)
	}
	result, err := client.GetDatasetHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetDatasetCreateRequest creates the GetDataset request.
func (client *DatasetClient) GetDatasetCreateRequest(ctx context.Context, datasetName string, datasetGetDatasetOptions *DatasetGetDatasetOptions) (*azcore.Request, error) {
	urlPath := "/datasets/{datasetName}"
	urlPath = strings.ReplaceAll(urlPath, "{datasetName}", url.PathEscape(datasetName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	if datasetGetDatasetOptions != nil && datasetGetDatasetOptions.IfNoneMatch != nil {
		req.Header.Set("If-None-Match", *datasetGetDatasetOptions.IfNoneMatch)
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetDatasetHandleResponse handles the GetDataset response.
func (client *DatasetClient) GetDatasetHandleResponse(resp *azcore.Response) (*DatasetResourceResponse, error) {
	result := DatasetResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.DatasetResource)
}

// GetDatasetHandleError handles the GetDataset error response.
func (client *DatasetClient) GetDatasetHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDatasetsByWorkspace - Lists datasets.
func (client *DatasetClient) GetDatasetsByWorkspace() DatasetListResponsePager {
	return &datasetListResponsePager{
		pipeline: client.p,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.GetDatasetsByWorkspaceCreateRequest(ctx)
		},
		responder: client.GetDatasetsByWorkspaceHandleResponse,
		errorer:   client.GetDatasetsByWorkspaceHandleError,
		advancer: func(ctx context.Context, resp *DatasetListResponseResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.DatasetListResponse.NextLink)
		},
	}
}

// GetDatasetsByWorkspaceCreateRequest creates the GetDatasetsByWorkspace request.
func (client *DatasetClient) GetDatasetsByWorkspaceCreateRequest(ctx context.Context) (*azcore.Request, error) {
	urlPath := "/datasets"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetDatasetsByWorkspaceHandleResponse handles the GetDatasetsByWorkspace response.
func (client *DatasetClient) GetDatasetsByWorkspaceHandleResponse(resp *azcore.Response) (*DatasetListResponseResponse, error) {
	result := DatasetListResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.DatasetListResponse)
}

// GetDatasetsByWorkspaceHandleError handles the GetDatasetsByWorkspace error response.
func (client *DatasetClient) GetDatasetsByWorkspaceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
