// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// LinkedServiceOperations contains the methods for the LinkedService group.
type LinkedServiceOperations interface {
	// BeginCreateOrUpdateLinkedService - Creates or updates a linked service.
	BeginCreateOrUpdateLinkedService(ctx context.Context, linkedServiceName string, linkedService LinkedServiceResource, linkedServiceCreateOrUpdateLinkedServiceOptions *LinkedServiceCreateOrUpdateLinkedServiceOptions) (*LinkedServiceResourcePollerResponse, error)
	// ResumeCreateOrUpdateLinkedService - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeCreateOrUpdateLinkedService(token string) (LinkedServiceResourcePoller, error)
	// BeginDeleteLinkedService - Deletes a linked service.
	BeginDeleteLinkedService(ctx context.Context, linkedServiceName string) (*HTTPPollerResponse, error)
	// ResumeDeleteLinkedService - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeDeleteLinkedService(token string) (HTTPPoller, error)
	// GetLinkedService - Gets a linked service.
	GetLinkedService(ctx context.Context, linkedServiceName string, linkedServiceGetLinkedServiceOptions *LinkedServiceGetLinkedServiceOptions) (*LinkedServiceResourceResponse, error)
	// GetLinkedServicesByWorkspace - Lists linked services.
	GetLinkedServicesByWorkspace() LinkedServiceListResponsePager
}

// LinkedServiceClient implements the LinkedServiceOperations interface.
// Don't use this type directly, use NewLinkedServiceClient() instead.
type LinkedServiceClient struct {
	*Client
}

// NewLinkedServiceClient creates a new instance of LinkedServiceClient with the specified values.
func NewLinkedServiceClient(c *Client) LinkedServiceOperations {
	return &LinkedServiceClient{Client: c}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *LinkedServiceClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// CreateOrUpdateLinkedService - Creates or updates a linked service.
func (client *LinkedServiceClient) BeginCreateOrUpdateLinkedService(ctx context.Context, linkedServiceName string, linkedService LinkedServiceResource, linkedServiceCreateOrUpdateLinkedServiceOptions *LinkedServiceCreateOrUpdateLinkedServiceOptions) (*LinkedServiceResourcePollerResponse, error) {
	return nil, errors.New("NYI")
}

func (client *LinkedServiceClient) ResumeCreateOrUpdateLinkedService(token string) (LinkedServiceResourcePoller, error) {
	return nil, nil
}

// CreateOrUpdateLinkedServiceCreateRequest creates the CreateOrUpdateLinkedService request.
func (client *LinkedServiceClient) CreateOrUpdateLinkedServiceCreateRequest(ctx context.Context, linkedServiceName string, linkedService LinkedServiceResource, linkedServiceCreateOrUpdateLinkedServiceOptions *LinkedServiceCreateOrUpdateLinkedServiceOptions) (*azcore.Request, error) {
	urlPath := "/linkedservices/{linkedServiceName}"
	urlPath = strings.ReplaceAll(urlPath, "{linkedServiceName}", url.PathEscape(linkedServiceName))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	if linkedServiceCreateOrUpdateLinkedServiceOptions != nil && linkedServiceCreateOrUpdateLinkedServiceOptions.IfMatch != nil {
		req.Header.Set("If-Match", *linkedServiceCreateOrUpdateLinkedServiceOptions.IfMatch)
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(linkedService)
}

// CreateOrUpdateLinkedServiceHandleResponse handles the CreateOrUpdateLinkedService response.
func (client *LinkedServiceClient) CreateOrUpdateLinkedServiceHandleResponse(resp *azcore.Response) (*LinkedServiceResourcePollerResponse, error) {
	return &LinkedServiceResourcePollerResponse{RawResponse: resp.Response}, nil
}

// CreateOrUpdateLinkedServiceHandleError handles the CreateOrUpdateLinkedService error response.
func (client *LinkedServiceClient) CreateOrUpdateLinkedServiceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DeleteLinkedService - Deletes a linked service.
func (client *LinkedServiceClient) BeginDeleteLinkedService(ctx context.Context, linkedServiceName string) (*HTTPPollerResponse, error) {
	return nil, errors.New("NYI")
}

func (client *LinkedServiceClient) ResumeDeleteLinkedService(token string) (HTTPPoller, error) {
	return nil, nil
}

// DeleteLinkedServiceCreateRequest creates the DeleteLinkedService request.
func (client *LinkedServiceClient) DeleteLinkedServiceCreateRequest(ctx context.Context, linkedServiceName string) (*azcore.Request, error) {
	urlPath := "/linkedservices/{linkedServiceName}"
	urlPath = strings.ReplaceAll(urlPath, "{linkedServiceName}", url.PathEscape(linkedServiceName))
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// DeleteLinkedServiceHandleResponse handles the DeleteLinkedService response.
func (client *LinkedServiceClient) DeleteLinkedServiceHandleResponse(resp *azcore.Response) (*HTTPPollerResponse, error) {
	return &HTTPPollerResponse{RawResponse: resp.Response}, nil
}

// DeleteLinkedServiceHandleError handles the DeleteLinkedService error response.
func (client *LinkedServiceClient) DeleteLinkedServiceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetLinkedService - Gets a linked service.
func (client *LinkedServiceClient) GetLinkedService(ctx context.Context, linkedServiceName string, linkedServiceGetLinkedServiceOptions *LinkedServiceGetLinkedServiceOptions) (*LinkedServiceResourceResponse, error) {
	req, err := client.GetLinkedServiceCreateRequest(ctx, linkedServiceName, linkedServiceGetLinkedServiceOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusNotModified) {
		return nil, client.GetLinkedServiceHandleError(resp)
	}
	result, err := client.GetLinkedServiceHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetLinkedServiceCreateRequest creates the GetLinkedService request.
func (client *LinkedServiceClient) GetLinkedServiceCreateRequest(ctx context.Context, linkedServiceName string, linkedServiceGetLinkedServiceOptions *LinkedServiceGetLinkedServiceOptions) (*azcore.Request, error) {
	urlPath := "/linkedservices/{linkedServiceName}"
	urlPath = strings.ReplaceAll(urlPath, "{linkedServiceName}", url.PathEscape(linkedServiceName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	if linkedServiceGetLinkedServiceOptions != nil && linkedServiceGetLinkedServiceOptions.IfNoneMatch != nil {
		req.Header.Set("If-None-Match", *linkedServiceGetLinkedServiceOptions.IfNoneMatch)
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetLinkedServiceHandleResponse handles the GetLinkedService response.
func (client *LinkedServiceClient) GetLinkedServiceHandleResponse(resp *azcore.Response) (*LinkedServiceResourceResponse, error) {
	result := LinkedServiceResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.LinkedServiceResource)
}

// GetLinkedServiceHandleError handles the GetLinkedService error response.
func (client *LinkedServiceClient) GetLinkedServiceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetLinkedServicesByWorkspace - Lists linked services.
func (client *LinkedServiceClient) GetLinkedServicesByWorkspace() LinkedServiceListResponsePager {
	return &linkedServiceListResponsePager{
		pipeline: client.p,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.GetLinkedServicesByWorkspaceCreateRequest(ctx)
		},
		responder: client.GetLinkedServicesByWorkspaceHandleResponse,
		errorer:   client.GetLinkedServicesByWorkspaceHandleError,
		advancer: func(ctx context.Context, resp *LinkedServiceListResponseResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.LinkedServiceListResponse.NextLink)
		},
	}
}

// GetLinkedServicesByWorkspaceCreateRequest creates the GetLinkedServicesByWorkspace request.
func (client *LinkedServiceClient) GetLinkedServicesByWorkspaceCreateRequest(ctx context.Context) (*azcore.Request, error) {
	urlPath := "/linkedservices"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetLinkedServicesByWorkspaceHandleResponse handles the GetLinkedServicesByWorkspace response.
func (client *LinkedServiceClient) GetLinkedServicesByWorkspaceHandleResponse(resp *azcore.Response) (*LinkedServiceListResponseResponse, error) {
	result := LinkedServiceListResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.LinkedServiceListResponse)
}

// GetLinkedServicesByWorkspaceHandleError handles the GetLinkedServicesByWorkspace error response.
func (client *LinkedServiceClient) GetLinkedServicesByWorkspaceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
