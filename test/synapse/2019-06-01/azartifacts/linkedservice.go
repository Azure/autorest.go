// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"path"
	"strings"
)

// LinkedServiceOperations contains the methods for the LinkedService group.
type LinkedServiceOperations interface {
	// CreateOrUpdateLinkedService - Creates or updates a linked service.
	CreateOrUpdateLinkedService(ctx context.Context, linkedServiceName string, linkedService LinkedServiceResource, linkedServiceCreateOrUpdateLinkedServiceOptions *LinkedServiceCreateOrUpdateLinkedServiceOptions) (*LinkedServiceResourceResponse, error)
	// DeleteLinkedService - Deletes a linked service.
	DeleteLinkedService(ctx context.Context, linkedServiceName string) (*http.Response, error)
	// GetLinkedService - Gets a linked service.
	GetLinkedService(ctx context.Context, linkedServiceName string, linkedServiceGetLinkedServiceOptions *LinkedServiceGetLinkedServiceOptions) (*LinkedServiceResourceResponse, error)
	// GetLinkedServicesByWorkspace - Lists linked services.
	GetLinkedServicesByWorkspace() (LinkedServiceListResponsePager, error)
}

// linkedServiceOperations implements the LinkedServiceOperations interface.
type linkedServiceOperations struct {
	*Client
}

// CreateOrUpdateLinkedService - Creates or updates a linked service.
func (client *linkedServiceOperations) CreateOrUpdateLinkedService(ctx context.Context, linkedServiceName string, linkedService LinkedServiceResource, linkedServiceCreateOrUpdateLinkedServiceOptions *LinkedServiceCreateOrUpdateLinkedServiceOptions) (*LinkedServiceResourceResponse, error) {
	req, err := client.createOrUpdateLinkedServiceCreateRequest(linkedServiceName, linkedService, linkedServiceCreateOrUpdateLinkedServiceOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createOrUpdateLinkedServiceHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// createOrUpdateLinkedServiceCreateRequest creates the CreateOrUpdateLinkedService request.
func (client *linkedServiceOperations) createOrUpdateLinkedServiceCreateRequest(linkedServiceName string, linkedService LinkedServiceResource, linkedServiceCreateOrUpdateLinkedServiceOptions *LinkedServiceCreateOrUpdateLinkedServiceOptions) (*azcore.Request, error) {
	urlPath := "/linkedservices/{linkedServiceName}"
	urlPath = strings.ReplaceAll(urlPath, "{linkedServiceName}", url.PathEscape(linkedServiceName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	if linkedServiceCreateOrUpdateLinkedServiceOptions != nil && linkedServiceCreateOrUpdateLinkedServiceOptions.IfMatch != nil {
		req.Header.Set("If-Match", *linkedServiceCreateOrUpdateLinkedServiceOptions.IfMatch)
	}
	return req, req.MarshalAsJSON(linkedService)
}

// createOrUpdateLinkedServiceHandleResponse handles the CreateOrUpdateLinkedService response.
func (client *linkedServiceOperations) createOrUpdateLinkedServiceHandleResponse(resp *azcore.Response) (*LinkedServiceResourceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.createOrUpdateLinkedServiceHandleError(resp)
	}
	result := LinkedServiceResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.LinkedServiceResource)
}

// createOrUpdateLinkedServiceHandleError handles the CreateOrUpdateLinkedService error response.
func (client *linkedServiceOperations) createOrUpdateLinkedServiceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DeleteLinkedService - Deletes a linked service.
func (client *linkedServiceOperations) DeleteLinkedService(ctx context.Context, linkedServiceName string) (*http.Response, error) {
	req, err := client.deleteLinkedServiceCreateRequest(linkedServiceName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteLinkedServiceHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// deleteLinkedServiceCreateRequest creates the DeleteLinkedService request.
func (client *linkedServiceOperations) deleteLinkedServiceCreateRequest(linkedServiceName string) (*azcore.Request, error) {
	urlPath := "/linkedservices/{linkedServiceName}"
	urlPath = strings.ReplaceAll(urlPath, "{linkedServiceName}", url.PathEscape(linkedServiceName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteLinkedServiceHandleResponse handles the DeleteLinkedService response.
func (client *linkedServiceOperations) deleteLinkedServiceHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.deleteLinkedServiceHandleError(resp)
	}
	return resp.Response, nil
}

// deleteLinkedServiceHandleError handles the DeleteLinkedService error response.
func (client *linkedServiceOperations) deleteLinkedServiceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetLinkedService - Gets a linked service.
func (client *linkedServiceOperations) GetLinkedService(ctx context.Context, linkedServiceName string, linkedServiceGetLinkedServiceOptions *LinkedServiceGetLinkedServiceOptions) (*LinkedServiceResourceResponse, error) {
	req, err := client.getLinkedServiceCreateRequest(linkedServiceName, linkedServiceGetLinkedServiceOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getLinkedServiceHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getLinkedServiceCreateRequest creates the GetLinkedService request.
func (client *linkedServiceOperations) getLinkedServiceCreateRequest(linkedServiceName string, linkedServiceGetLinkedServiceOptions *LinkedServiceGetLinkedServiceOptions) (*azcore.Request, error) {
	urlPath := "/linkedservices/{linkedServiceName}"
	urlPath = strings.ReplaceAll(urlPath, "{linkedServiceName}", url.PathEscape(linkedServiceName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	if linkedServiceGetLinkedServiceOptions != nil && linkedServiceGetLinkedServiceOptions.IfNoneMatch != nil {
		req.Header.Set("If-None-Match", *linkedServiceGetLinkedServiceOptions.IfNoneMatch)
	}
	return req, nil
}

// getLinkedServiceHandleResponse handles the GetLinkedService response.
func (client *linkedServiceOperations) getLinkedServiceHandleResponse(resp *azcore.Response) (*LinkedServiceResourceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusNotModified) {
		return nil, client.getLinkedServiceHandleError(resp)
	}
	result := LinkedServiceResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.LinkedServiceResource)
}

// getLinkedServiceHandleError handles the GetLinkedService error response.
func (client *linkedServiceOperations) getLinkedServiceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetLinkedServicesByWorkspace - Lists linked services.
func (client *linkedServiceOperations) GetLinkedServicesByWorkspace() (LinkedServiceListResponsePager, error) {
	req, err := client.getLinkedServicesByWorkspaceCreateRequest()
	if err != nil {
		return nil, err
	}
	return &linkedServiceListResponsePager{
		pipeline:  client.p,
		request:   req,
		responder: client.getLinkedServicesByWorkspaceHandleResponse,
		advancer: func(resp *LinkedServiceListResponseResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.LinkedServiceListResponse.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.LinkedServiceListResponse.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// getLinkedServicesByWorkspaceCreateRequest creates the GetLinkedServicesByWorkspace request.
func (client *linkedServiceOperations) getLinkedServicesByWorkspaceCreateRequest() (*azcore.Request, error) {
	urlPath := "/linkedservices"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getLinkedServicesByWorkspaceHandleResponse handles the GetLinkedServicesByWorkspace response.
func (client *linkedServiceOperations) getLinkedServicesByWorkspaceHandleResponse(resp *azcore.Response) (*LinkedServiceListResponseResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getLinkedServicesByWorkspaceHandleError(resp)
	}
	result := LinkedServiceListResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.LinkedServiceListResponse)
}

// getLinkedServicesByWorkspaceHandleError handles the GetLinkedServicesByWorkspace error response.
func (client *linkedServiceOperations) getLinkedServicesByWorkspaceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
