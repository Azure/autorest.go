// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

type AvroCompressionCodec string

const (
	AvroCompressionCodecBzip2   AvroCompressionCodec = "bzip2"
	AvroCompressionCodecDeflate AvroCompressionCodec = "deflate"
	AvroCompressionCodecNone    AvroCompressionCodec = "none"
	AvroCompressionCodecSnappy  AvroCompressionCodec = "snappy"
	AvroCompressionCodecXz      AvroCompressionCodec = "xz"
)

// PossibleAvroCompressionCodecValues returns the possible values for the AvroCompressionCodec const type.
func PossibleAvroCompressionCodecValues() []AvroCompressionCodec {
	return []AvroCompressionCodec{
		AvroCompressionCodecBzip2,
		AvroCompressionCodecDeflate,
		AvroCompressionCodecNone,
		AvroCompressionCodecSnappy,
		AvroCompressionCodecXz,
	}
}

func (c AvroCompressionCodec) ToPtr() *AvroCompressionCodec {
	return &c
}

// AzureFunctionActivityMethod - The list of HTTP methods supported by a AzureFunctionActivity.
type AzureFunctionActivityMethod string

const (
	AzureFunctionActivityMethodDelete  AzureFunctionActivityMethod = "DELETE"
	AzureFunctionActivityMethodGet     AzureFunctionActivityMethod = "GET"
	AzureFunctionActivityMethodHead    AzureFunctionActivityMethod = "HEAD"
	AzureFunctionActivityMethodOptions AzureFunctionActivityMethod = "OPTIONS"
	AzureFunctionActivityMethodPost    AzureFunctionActivityMethod = "POST"
	AzureFunctionActivityMethodPut     AzureFunctionActivityMethod = "PUT"
	AzureFunctionActivityMethodTrace   AzureFunctionActivityMethod = "TRACE"
)

// PossibleAzureFunctionActivityMethodValues returns the possible values for the AzureFunctionActivityMethod const type.
func PossibleAzureFunctionActivityMethodValues() []AzureFunctionActivityMethod {
	return []AzureFunctionActivityMethod{
		AzureFunctionActivityMethodDelete,
		AzureFunctionActivityMethodGet,
		AzureFunctionActivityMethodHead,
		AzureFunctionActivityMethodOptions,
		AzureFunctionActivityMethodPost,
		AzureFunctionActivityMethodPut,
		AzureFunctionActivityMethodTrace,
	}
}

func (c AzureFunctionActivityMethod) ToPtr() *AzureFunctionActivityMethod {
	return &c
}

// AzureSearchIndexWriteBehaviorType - Specify the write behavior when upserting documents into Azure Search Index.
type AzureSearchIndexWriteBehaviorType string

const (
	AzureSearchIndexWriteBehaviorTypeMerge  AzureSearchIndexWriteBehaviorType = "Merge"
	AzureSearchIndexWriteBehaviorTypeUpload AzureSearchIndexWriteBehaviorType = "Upload"
)

// PossibleAzureSearchIndexWriteBehaviorTypeValues returns the possible values for the AzureSearchIndexWriteBehaviorType const type.
func PossibleAzureSearchIndexWriteBehaviorTypeValues() []AzureSearchIndexWriteBehaviorType {
	return []AzureSearchIndexWriteBehaviorType{
		AzureSearchIndexWriteBehaviorTypeMerge,
		AzureSearchIndexWriteBehaviorTypeUpload,
	}
}

func (c AzureSearchIndexWriteBehaviorType) ToPtr() *AzureSearchIndexWriteBehaviorType {
	return &c
}

// BigDataPoolReferenceType - Big data pool reference type.
type BigDataPoolReferenceType string

const (
	BigDataPoolReferenceTypeBigDataPoolReference BigDataPoolReferenceType = "BigDataPoolReference"
)

// PossibleBigDataPoolReferenceTypeValues returns the possible values for the BigDataPoolReferenceType const type.
func PossibleBigDataPoolReferenceTypeValues() []BigDataPoolReferenceType {
	return []BigDataPoolReferenceType{
		BigDataPoolReferenceTypeBigDataPoolReference,
	}
}

func (c BigDataPoolReferenceType) ToPtr() *BigDataPoolReferenceType {
	return &c
}

type BlobEventType string

const (
	BlobEventTypeMicrosoftStorageBlobCreated BlobEventType = "Microsoft.Storage.BlobCreated"
	BlobEventTypeMicrosoftStorageBlobDeleted BlobEventType = "Microsoft.Storage.BlobDeleted"
)

// PossibleBlobEventTypeValues returns the possible values for the BlobEventType const type.
func PossibleBlobEventTypeValues() []BlobEventType {
	return []BlobEventType{
		BlobEventTypeMicrosoftStorageBlobCreated,
		BlobEventTypeMicrosoftStorageBlobDeleted,
	}
}

func (c BlobEventType) ToPtr() *BlobEventType {
	return &c
}

// CassandraSourceReadConsistencyLevels - The consistency level specifies how many Cassandra servers must respond to a read request before returning data
// to the client application. Cassandra checks the specified number of Cassandra servers
// for data to satisfy the read request. Must be one of cassandraSourceReadConsistencyLevels. The default value is 'ONE'. It is case-insensitive.
type CassandraSourceReadConsistencyLevels string

const (
	CassandraSourceReadConsistencyLevelsAll         CassandraSourceReadConsistencyLevels = "ALL"
	CassandraSourceReadConsistencyLevelsEachQuorum  CassandraSourceReadConsistencyLevels = "EACH_QUORUM"
	CassandraSourceReadConsistencyLevelsLocalOne    CassandraSourceReadConsistencyLevels = "LOCAL_ONE"
	CassandraSourceReadConsistencyLevelsLocalQuorum CassandraSourceReadConsistencyLevels = "LOCAL_QUORUM"
	CassandraSourceReadConsistencyLevelsLocalSerial CassandraSourceReadConsistencyLevels = "LOCAL_SERIAL"
	CassandraSourceReadConsistencyLevelsOne         CassandraSourceReadConsistencyLevels = "ONE"
	CassandraSourceReadConsistencyLevelsQuorum      CassandraSourceReadConsistencyLevels = "QUORUM"
	CassandraSourceReadConsistencyLevelsSerial      CassandraSourceReadConsistencyLevels = "SERIAL"
	CassandraSourceReadConsistencyLevelsThree       CassandraSourceReadConsistencyLevels = "THREE"
	CassandraSourceReadConsistencyLevelsTwo         CassandraSourceReadConsistencyLevels = "TWO"
)

// PossibleCassandraSourceReadConsistencyLevelsValues returns the possible values for the CassandraSourceReadConsistencyLevels const type.
func PossibleCassandraSourceReadConsistencyLevelsValues() []CassandraSourceReadConsistencyLevels {
	return []CassandraSourceReadConsistencyLevels{
		CassandraSourceReadConsistencyLevelsAll,
		CassandraSourceReadConsistencyLevelsEachQuorum,
		CassandraSourceReadConsistencyLevelsLocalOne,
		CassandraSourceReadConsistencyLevelsLocalQuorum,
		CassandraSourceReadConsistencyLevelsLocalSerial,
		CassandraSourceReadConsistencyLevelsOne,
		CassandraSourceReadConsistencyLevelsQuorum,
		CassandraSourceReadConsistencyLevelsSerial,
		CassandraSourceReadConsistencyLevelsThree,
		CassandraSourceReadConsistencyLevelsTwo,
	}
}

func (c CassandraSourceReadConsistencyLevels) ToPtr() *CassandraSourceReadConsistencyLevels {
	return &c
}

// CellOutputType - Execution, display, or stream outputs.
type CellOutputType string

const (
	CellOutputTypeDisplayData   CellOutputType = "display_data"
	CellOutputTypeError         CellOutputType = "error"
	CellOutputTypeExecuteResult CellOutputType = "execute_result"
	CellOutputTypeStream        CellOutputType = "stream"
)

// PossibleCellOutputTypeValues returns the possible values for the CellOutputType const type.
func PossibleCellOutputTypeValues() []CellOutputType {
	return []CellOutputType{
		CellOutputTypeDisplayData,
		CellOutputTypeError,
		CellOutputTypeExecuteResult,
		CellOutputTypeStream,
	}
}

func (c CellOutputType) ToPtr() *CellOutputType {
	return &c
}

// CopyBehaviorType - All available types of copy behavior.
type CopyBehaviorType string

const (
	CopyBehaviorTypeFlattenHierarchy  CopyBehaviorType = "FlattenHierarchy"
	CopyBehaviorTypeMergeFiles        CopyBehaviorType = "MergeFiles"
	CopyBehaviorTypePreserveHierarchy CopyBehaviorType = "PreserveHierarchy"
)

// PossibleCopyBehaviorTypeValues returns the possible values for the CopyBehaviorType const type.
func PossibleCopyBehaviorTypeValues() []CopyBehaviorType {
	return []CopyBehaviorType{
		CopyBehaviorTypeFlattenHierarchy,
		CopyBehaviorTypeMergeFiles,
		CopyBehaviorTypePreserveHierarchy,
	}
}

func (c CopyBehaviorType) ToPtr() *CopyBehaviorType {
	return &c
}

// DataFlowComputeType - Compute type of the cluster which will execute data flow job.
type DataFlowComputeType string

const (
	DataFlowComputeTypeComputeOptimized DataFlowComputeType = "ComputeOptimized"
	DataFlowComputeTypeGeneral          DataFlowComputeType = "General"
	DataFlowComputeTypeMemoryOptimized  DataFlowComputeType = "MemoryOptimized"
)

// PossibleDataFlowComputeTypeValues returns the possible values for the DataFlowComputeType const type.
func PossibleDataFlowComputeTypeValues() []DataFlowComputeType {
	return []DataFlowComputeType{
		DataFlowComputeTypeComputeOptimized,
		DataFlowComputeTypeGeneral,
		DataFlowComputeTypeMemoryOptimized,
	}
}

func (c DataFlowComputeType) ToPtr() *DataFlowComputeType {
	return &c
}

// DataFlowReferenceType - Data flow reference type.
type DataFlowReferenceType string

const (
	DataFlowReferenceTypeDataFlowReference DataFlowReferenceType = "DataFlowReference"
)

// PossibleDataFlowReferenceTypeValues returns the possible values for the DataFlowReferenceType const type.
func PossibleDataFlowReferenceTypeValues() []DataFlowReferenceType {
	return []DataFlowReferenceType{
		DataFlowReferenceTypeDataFlowReference,
	}
}

func (c DataFlowReferenceType) ToPtr() *DataFlowReferenceType {
	return &c
}

// DatasetCompressionLevel - All available compression levels.
type DatasetCompressionLevel string

const (
	DatasetCompressionLevelFastest DatasetCompressionLevel = "Fastest"
	DatasetCompressionLevelOptimal DatasetCompressionLevel = "Optimal"
)

// PossibleDatasetCompressionLevelValues returns the possible values for the DatasetCompressionLevel const type.
func PossibleDatasetCompressionLevelValues() []DatasetCompressionLevel {
	return []DatasetCompressionLevel{
		DatasetCompressionLevelFastest,
		DatasetCompressionLevelOptimal,
	}
}

func (c DatasetCompressionLevel) ToPtr() *DatasetCompressionLevel {
	return &c
}

// DatasetReferenceType - Dataset reference type.
type DatasetReferenceType string

const (
	DatasetReferenceTypeDatasetReference DatasetReferenceType = "DatasetReference"
)

// PossibleDatasetReferenceTypeValues returns the possible values for the DatasetReferenceType const type.
func PossibleDatasetReferenceTypeValues() []DatasetReferenceType {
	return []DatasetReferenceType{
		DatasetReferenceTypeDatasetReference,
	}
}

func (c DatasetReferenceType) ToPtr() *DatasetReferenceType {
	return &c
}

type DayOfWeek string

const (
	DayOfWeekSunday    DayOfWeek = "Sunday"
	DayOfWeekMonday    DayOfWeek = "Monday"
	DayOfWeekTuesday   DayOfWeek = "Tuesday"
	DayOfWeekWednesday DayOfWeek = "Wednesday"
	DayOfWeekThursday  DayOfWeek = "Thursday"
	DayOfWeekFriday    DayOfWeek = "Friday"
	DayOfWeekSaturday  DayOfWeek = "Saturday"
)

// PossibleDayOfWeekValues returns the possible values for the DayOfWeek const type.
func PossibleDayOfWeekValues() []DayOfWeek {
	return []DayOfWeek{
		DayOfWeekSunday,
		DayOfWeekMonday,
		DayOfWeekTuesday,
		DayOfWeekWednesday,
		DayOfWeekThursday,
		DayOfWeekFriday,
		DayOfWeekSaturday,
	}
}

func (c DayOfWeek) ToPtr() *DayOfWeek {
	return &c
}

// Db2AuthenticationType - AuthenticationType to be used for connection.
type Db2AuthenticationType string

const (
	Db2AuthenticationTypeBasic Db2AuthenticationType = "Basic"
)

// PossibleDb2AuthenticationTypeValues returns the possible values for the Db2AuthenticationType const type.
func PossibleDb2AuthenticationTypeValues() []Db2AuthenticationType {
	return []Db2AuthenticationType{
		Db2AuthenticationTypeBasic,
	}
}

func (c Db2AuthenticationType) ToPtr() *Db2AuthenticationType {
	return &c
}

type DelimitedTextCompressionCodec string

const (
	DelimitedTextCompressionCodecBzip2      DelimitedTextCompressionCodec = "bzip2"
	DelimitedTextCompressionCodecDeflate    DelimitedTextCompressionCodec = "deflate"
	DelimitedTextCompressionCodecGzip       DelimitedTextCompressionCodec = "gzip"
	DelimitedTextCompressionCodecLz4        DelimitedTextCompressionCodec = "lz4"
	DelimitedTextCompressionCodecSnappy     DelimitedTextCompressionCodec = "snappy"
	DelimitedTextCompressionCodecZipDeflate DelimitedTextCompressionCodec = "zipDeflate"
)

// PossibleDelimitedTextCompressionCodecValues returns the possible values for the DelimitedTextCompressionCodec const type.
func PossibleDelimitedTextCompressionCodecValues() []DelimitedTextCompressionCodec {
	return []DelimitedTextCompressionCodec{
		DelimitedTextCompressionCodecBzip2,
		DelimitedTextCompressionCodecDeflate,
		DelimitedTextCompressionCodecGzip,
		DelimitedTextCompressionCodecLz4,
		DelimitedTextCompressionCodecSnappy,
		DelimitedTextCompressionCodecZipDeflate,
	}
}

func (c DelimitedTextCompressionCodec) ToPtr() *DelimitedTextCompressionCodec {
	return &c
}

type DependencyCondition string

const (
	DependencyConditionCompleted DependencyCondition = "Completed"
	DependencyConditionFailed    DependencyCondition = "Failed"
	DependencyConditionSkipped   DependencyCondition = "Skipped"
	DependencyConditionSucceeded DependencyCondition = "Succeeded"
)

// PossibleDependencyConditionValues returns the possible values for the DependencyCondition const type.
func PossibleDependencyConditionValues() []DependencyCondition {
	return []DependencyCondition{
		DependencyConditionCompleted,
		DependencyConditionFailed,
		DependencyConditionSkipped,
		DependencyConditionSucceeded,
	}
}

func (c DependencyCondition) ToPtr() *DependencyCondition {
	return &c
}

// DynamicsAuthenticationType - The authentication type to connect to Dynamics server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario,
// 'AADServicePrincipal' for Server-To-Server authentication in online
// scenario. Type: string (or Expression with resultType string).
type DynamicsAuthenticationType string

const (
	DynamicsAuthenticationTypeAadServicePrincipal DynamicsAuthenticationType = "AADServicePrincipal"
	DynamicsAuthenticationTypeIfd                 DynamicsAuthenticationType = "Ifd"
	DynamicsAuthenticationTypeOffice365           DynamicsAuthenticationType = "Office365"
)

// PossibleDynamicsAuthenticationTypeValues returns the possible values for the DynamicsAuthenticationType const type.
func PossibleDynamicsAuthenticationTypeValues() []DynamicsAuthenticationType {
	return []DynamicsAuthenticationType{
		DynamicsAuthenticationTypeAadServicePrincipal,
		DynamicsAuthenticationTypeIfd,
		DynamicsAuthenticationTypeOffice365,
	}
}

func (c DynamicsAuthenticationType) ToPtr() *DynamicsAuthenticationType {
	return &c
}

// DynamicsDeploymentType - The deployment type of the Dynamics instance. 'Online' for Dynamics Online and 'OnPremisesWithIfd' for Dynamics on-premises
// with Ifd. Type: string (or Expression with resultType string).
type DynamicsDeploymentType string

const (
	DynamicsDeploymentTypeOnPremisesWithIfd DynamicsDeploymentType = "OnPremisesWithIfd"
	DynamicsDeploymentTypeOnline            DynamicsDeploymentType = "Online"
)

// PossibleDynamicsDeploymentTypeValues returns the possible values for the DynamicsDeploymentType const type.
func PossibleDynamicsDeploymentTypeValues() []DynamicsDeploymentType {
	return []DynamicsDeploymentType{
		DynamicsDeploymentTypeOnPremisesWithIfd,
		DynamicsDeploymentTypeOnline,
	}
}

func (c DynamicsDeploymentType) ToPtr() *DynamicsDeploymentType {
	return &c
}

// DynamicsServicePrincipalCredentialType - The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret,
// 'ServicePrincipalCert' for certificate. Type: string (or Expression with
// resultType string).
type DynamicsServicePrincipalCredentialType string

const (
	DynamicsServicePrincipalCredentialTypeServicePrincipalCert DynamicsServicePrincipalCredentialType = "ServicePrincipalCert"
	DynamicsServicePrincipalCredentialTypeServicePrincipalKey  DynamicsServicePrincipalCredentialType = "ServicePrincipalKey"
)

// PossibleDynamicsServicePrincipalCredentialTypeValues returns the possible values for the DynamicsServicePrincipalCredentialType const type.
func PossibleDynamicsServicePrincipalCredentialTypeValues() []DynamicsServicePrincipalCredentialType {
	return []DynamicsServicePrincipalCredentialType{
		DynamicsServicePrincipalCredentialTypeServicePrincipalCert,
		DynamicsServicePrincipalCredentialTypeServicePrincipalKey,
	}
}

func (c DynamicsServicePrincipalCredentialType) ToPtr() *DynamicsServicePrincipalCredentialType {
	return &c
}

// DynamicsSinkWriteBehavior - The write behavior for the operation.
type DynamicsSinkWriteBehavior string

const (
	DynamicsSinkWriteBehaviorUpsert DynamicsSinkWriteBehavior = "Upsert"
)

// PossibleDynamicsSinkWriteBehaviorValues returns the possible values for the DynamicsSinkWriteBehavior const type.
func PossibleDynamicsSinkWriteBehaviorValues() []DynamicsSinkWriteBehavior {
	return []DynamicsSinkWriteBehavior{
		DynamicsSinkWriteBehaviorUpsert,
	}
}

func (c DynamicsSinkWriteBehavior) ToPtr() *DynamicsSinkWriteBehavior {
	return &c
}

// EventSubscriptionStatus - Event Subscription Status.
type EventSubscriptionStatus string

const (
	EventSubscriptionStatusDeprovisioning EventSubscriptionStatus = "Deprovisioning"
	EventSubscriptionStatusDisabled       EventSubscriptionStatus = "Disabled"
	EventSubscriptionStatusEnabled        EventSubscriptionStatus = "Enabled"
	EventSubscriptionStatusProvisioning   EventSubscriptionStatus = "Provisioning"
	EventSubscriptionStatusUnknown        EventSubscriptionStatus = "Unknown"
)

// PossibleEventSubscriptionStatusValues returns the possible values for the EventSubscriptionStatus const type.
func PossibleEventSubscriptionStatusValues() []EventSubscriptionStatus {
	return []EventSubscriptionStatus{
		EventSubscriptionStatusDeprovisioning,
		EventSubscriptionStatusDisabled,
		EventSubscriptionStatusEnabled,
		EventSubscriptionStatusProvisioning,
		EventSubscriptionStatusUnknown,
	}
}

func (c EventSubscriptionStatus) ToPtr() *EventSubscriptionStatus {
	return &c
}

// ExpressionType - Expression type.
type ExpressionType string

const (
	ExpressionTypeExpression ExpressionType = "Expression"
)

// PossibleExpressionTypeValues returns the possible values for the ExpressionType const type.
func PossibleExpressionTypeValues() []ExpressionType {
	return []ExpressionType{
		ExpressionTypeExpression,
	}
}

func (c ExpressionType) ToPtr() *ExpressionType {
	return &c
}

// FtpAuthenticationType - The authentication type to be used to connect to the FTP server.
type FtpAuthenticationType string

const (
	FtpAuthenticationTypeAnonymous FtpAuthenticationType = "Anonymous"
	FtpAuthenticationTypeBasic     FtpAuthenticationType = "Basic"
)

// PossibleFtpAuthenticationTypeValues returns the possible values for the FtpAuthenticationType const type.
func PossibleFtpAuthenticationTypeValues() []FtpAuthenticationType {
	return []FtpAuthenticationType{
		FtpAuthenticationTypeAnonymous,
		FtpAuthenticationTypeBasic,
	}
}

func (c FtpAuthenticationType) ToPtr() *FtpAuthenticationType {
	return &c
}

// GoogleAdWordsAuthenticationType - The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted
// IR.
type GoogleAdWordsAuthenticationType string

const (
	GoogleAdWordsAuthenticationTypeServiceAuthentication GoogleAdWordsAuthenticationType = "ServiceAuthentication"
	GoogleAdWordsAuthenticationTypeUserAuthentication    GoogleAdWordsAuthenticationType = "UserAuthentication"
)

// PossibleGoogleAdWordsAuthenticationTypeValues returns the possible values for the GoogleAdWordsAuthenticationType const type.
func PossibleGoogleAdWordsAuthenticationTypeValues() []GoogleAdWordsAuthenticationType {
	return []GoogleAdWordsAuthenticationType{
		GoogleAdWordsAuthenticationTypeServiceAuthentication,
		GoogleAdWordsAuthenticationTypeUserAuthentication,
	}
}

func (c GoogleAdWordsAuthenticationType) ToPtr() *GoogleAdWordsAuthenticationType {
	return &c
}

// GoogleBigQueryAuthenticationType - The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted
// IR.
type GoogleBigQueryAuthenticationType string

const (
	GoogleBigQueryAuthenticationTypeServiceAuthentication GoogleBigQueryAuthenticationType = "ServiceAuthentication"
	GoogleBigQueryAuthenticationTypeUserAuthentication    GoogleBigQueryAuthenticationType = "UserAuthentication"
)

// PossibleGoogleBigQueryAuthenticationTypeValues returns the possible values for the GoogleBigQueryAuthenticationType const type.
func PossibleGoogleBigQueryAuthenticationTypeValues() []GoogleBigQueryAuthenticationType {
	return []GoogleBigQueryAuthenticationType{
		GoogleBigQueryAuthenticationTypeServiceAuthentication,
		GoogleBigQueryAuthenticationTypeUserAuthentication,
	}
}

func (c GoogleBigQueryAuthenticationType) ToPtr() *GoogleBigQueryAuthenticationType {
	return &c
}

// HBaseAuthenticationType - The authentication mechanism to use to connect to the HBase server.
type HBaseAuthenticationType string

const (
	HBaseAuthenticationTypeAnonymous HBaseAuthenticationType = "Anonymous"
	HBaseAuthenticationTypeBasic     HBaseAuthenticationType = "Basic"
)

// PossibleHBaseAuthenticationTypeValues returns the possible values for the HBaseAuthenticationType const type.
func PossibleHBaseAuthenticationTypeValues() []HBaseAuthenticationType {
	return []HBaseAuthenticationType{
		HBaseAuthenticationTypeAnonymous,
		HBaseAuthenticationTypeBasic,
	}
}

func (c HBaseAuthenticationType) ToPtr() *HBaseAuthenticationType {
	return &c
}

// HDInsightActivityDebugInfoOption - The HDInsightActivityDebugInfoOption settings to use.
type HDInsightActivityDebugInfoOption string

const (
	HDInsightActivityDebugInfoOptionAlways  HDInsightActivityDebugInfoOption = "Always"
	HDInsightActivityDebugInfoOptionFailure HDInsightActivityDebugInfoOption = "Failure"
	HDInsightActivityDebugInfoOptionNone    HDInsightActivityDebugInfoOption = "None"
)

// PossibleHDInsightActivityDebugInfoOptionValues returns the possible values for the HDInsightActivityDebugInfoOption const type.
func PossibleHDInsightActivityDebugInfoOptionValues() []HDInsightActivityDebugInfoOption {
	return []HDInsightActivityDebugInfoOption{
		HDInsightActivityDebugInfoOptionAlways,
		HDInsightActivityDebugInfoOptionFailure,
		HDInsightActivityDebugInfoOptionNone,
	}
}

func (c HDInsightActivityDebugInfoOption) ToPtr() *HDInsightActivityDebugInfoOption {
	return &c
}

// HTTPAuthenticationType - The authentication type to be used to connect to the HTTP server.
type HTTPAuthenticationType string

const (
	HTTPAuthenticationTypeAnonymous         HTTPAuthenticationType = "Anonymous"
	HTTPAuthenticationTypeBasic             HTTPAuthenticationType = "Basic"
	HTTPAuthenticationTypeClientCertificate HTTPAuthenticationType = "ClientCertificate"
	HTTPAuthenticationTypeDigest            HTTPAuthenticationType = "Digest"
	HTTPAuthenticationTypeWindows           HTTPAuthenticationType = "Windows"
)

// PossibleHTTPAuthenticationTypeValues returns the possible values for the HTTPAuthenticationType const type.
func PossibleHTTPAuthenticationTypeValues() []HTTPAuthenticationType {
	return []HTTPAuthenticationType{
		HTTPAuthenticationTypeAnonymous,
		HTTPAuthenticationTypeBasic,
		HTTPAuthenticationTypeClientCertificate,
		HTTPAuthenticationTypeDigest,
		HTTPAuthenticationTypeWindows,
	}
}

func (c HTTPAuthenticationType) ToPtr() *HTTPAuthenticationType {
	return &c
}

// HdiNodeTypes - The node types on which the script action should be executed.
type HdiNodeTypes string

const (
	HdiNodeTypesHeadnode   HdiNodeTypes = "Headnode"
	HdiNodeTypesWorkernode HdiNodeTypes = "Workernode"
	HdiNodeTypesZookeeper  HdiNodeTypes = "Zookeeper"
)

// PossibleHdiNodeTypesValues returns the possible values for the HdiNodeTypes const type.
func PossibleHdiNodeTypesValues() []HdiNodeTypes {
	return []HdiNodeTypes{
		HdiNodeTypesHeadnode,
		HdiNodeTypesWorkernode,
		HdiNodeTypesZookeeper,
	}
}

func (c HdiNodeTypes) ToPtr() *HdiNodeTypes {
	return &c
}

// HiveAuthenticationType - The authentication method used to access the Hive server.
type HiveAuthenticationType string

const (
	HiveAuthenticationTypeAnonymous                    HiveAuthenticationType = "Anonymous"
	HiveAuthenticationTypeUsername                     HiveAuthenticationType = "Username"
	HiveAuthenticationTypeUsernameAndPassword          HiveAuthenticationType = "UsernameAndPassword"
	HiveAuthenticationTypeWindowsAzureHdInsightService HiveAuthenticationType = "WindowsAzureHDInsightService"
)

// PossibleHiveAuthenticationTypeValues returns the possible values for the HiveAuthenticationType const type.
func PossibleHiveAuthenticationTypeValues() []HiveAuthenticationType {
	return []HiveAuthenticationType{
		HiveAuthenticationTypeAnonymous,
		HiveAuthenticationTypeUsername,
		HiveAuthenticationTypeUsernameAndPassword,
		HiveAuthenticationTypeWindowsAzureHdInsightService,
	}
}

func (c HiveAuthenticationType) ToPtr() *HiveAuthenticationType {
	return &c
}

// HiveServerType - The type of Hive server.
type HiveServerType string

const (
	HiveServerTypeHiveServer1      HiveServerType = "HiveServer1"
	HiveServerTypeHiveServer2      HiveServerType = "HiveServer2"
	HiveServerTypeHiveThriftServer HiveServerType = "HiveThriftServer"
)

// PossibleHiveServerTypeValues returns the possible values for the HiveServerType const type.
func PossibleHiveServerTypeValues() []HiveServerType {
	return []HiveServerType{
		HiveServerTypeHiveServer1,
		HiveServerTypeHiveServer2,
		HiveServerTypeHiveThriftServer,
	}
}

func (c HiveServerType) ToPtr() *HiveServerType {
	return &c
}

// HiveThriftTransportProtocol - The transport protocol to use in the Thrift layer.
type HiveThriftTransportProtocol string

const (
	HiveThriftTransportProtocolBinary HiveThriftTransportProtocol = "Binary"
	HiveThriftTransportProtocolHTTP   HiveThriftTransportProtocol = "HTTP "
	HiveThriftTransportProtocolSasl   HiveThriftTransportProtocol = "SASL"
)

// PossibleHiveThriftTransportProtocolValues returns the possible values for the HiveThriftTransportProtocol const type.
func PossibleHiveThriftTransportProtocolValues() []HiveThriftTransportProtocol {
	return []HiveThriftTransportProtocol{
		HiveThriftTransportProtocolBinary,
		HiveThriftTransportProtocolHTTP,
		HiveThriftTransportProtocolSasl,
	}
}

func (c HiveThriftTransportProtocol) ToPtr() *HiveThriftTransportProtocol {
	return &c
}

// ImpalaAuthenticationType - The authentication type to use.
type ImpalaAuthenticationType string

const (
	ImpalaAuthenticationTypeAnonymous           ImpalaAuthenticationType = "Anonymous"
	ImpalaAuthenticationTypeSaslUsername        ImpalaAuthenticationType = "SASLUsername"
	ImpalaAuthenticationTypeUsernameAndPassword ImpalaAuthenticationType = "UsernameAndPassword"
)

// PossibleImpalaAuthenticationTypeValues returns the possible values for the ImpalaAuthenticationType const type.
func PossibleImpalaAuthenticationTypeValues() []ImpalaAuthenticationType {
	return []ImpalaAuthenticationType{
		ImpalaAuthenticationTypeAnonymous,
		ImpalaAuthenticationTypeSaslUsername,
		ImpalaAuthenticationTypeUsernameAndPassword,
	}
}

func (c ImpalaAuthenticationType) ToPtr() *ImpalaAuthenticationType {
	return &c
}

// IntegrationRuntimeEdition - The edition for the SSIS Integration Runtime
type IntegrationRuntimeEdition string

const (
	IntegrationRuntimeEditionEnterprise IntegrationRuntimeEdition = "Enterprise"
	IntegrationRuntimeEditionStandard   IntegrationRuntimeEdition = "Standard"
)

// PossibleIntegrationRuntimeEditionValues returns the possible values for the IntegrationRuntimeEdition const type.
func PossibleIntegrationRuntimeEditionValues() []IntegrationRuntimeEdition {
	return []IntegrationRuntimeEdition{
		IntegrationRuntimeEditionEnterprise,
		IntegrationRuntimeEditionStandard,
	}
}

func (c IntegrationRuntimeEdition) ToPtr() *IntegrationRuntimeEdition {
	return &c
}

// IntegrationRuntimeEntityReferenceType - The type of this referenced entity.
type IntegrationRuntimeEntityReferenceType string

const (
	IntegrationRuntimeEntityReferenceTypeIntegrationRuntimeReference IntegrationRuntimeEntityReferenceType = "IntegrationRuntimeReference"
	IntegrationRuntimeEntityReferenceTypeLinkedServiceReference      IntegrationRuntimeEntityReferenceType = "LinkedServiceReference"
)

// PossibleIntegrationRuntimeEntityReferenceTypeValues returns the possible values for the IntegrationRuntimeEntityReferenceType const type.
func PossibleIntegrationRuntimeEntityReferenceTypeValues() []IntegrationRuntimeEntityReferenceType {
	return []IntegrationRuntimeEntityReferenceType{
		IntegrationRuntimeEntityReferenceTypeIntegrationRuntimeReference,
		IntegrationRuntimeEntityReferenceTypeLinkedServiceReference,
	}
}

func (c IntegrationRuntimeEntityReferenceType) ToPtr() *IntegrationRuntimeEntityReferenceType {
	return &c
}

// IntegrationRuntimeLicenseType - License type for bringing your own license scenario.
type IntegrationRuntimeLicenseType string

const (
	IntegrationRuntimeLicenseTypeBasePrice       IntegrationRuntimeLicenseType = "BasePrice"
	IntegrationRuntimeLicenseTypeLicenseIncluded IntegrationRuntimeLicenseType = "LicenseIncluded"
)

// PossibleIntegrationRuntimeLicenseTypeValues returns the possible values for the IntegrationRuntimeLicenseType const type.
func PossibleIntegrationRuntimeLicenseTypeValues() []IntegrationRuntimeLicenseType {
	return []IntegrationRuntimeLicenseType{
		IntegrationRuntimeLicenseTypeBasePrice,
		IntegrationRuntimeLicenseTypeLicenseIncluded,
	}
}

func (c IntegrationRuntimeLicenseType) ToPtr() *IntegrationRuntimeLicenseType {
	return &c
}

// IntegrationRuntimeReferenceType - Type of integration runtime.
type IntegrationRuntimeReferenceType string

const (
	IntegrationRuntimeReferenceTypeIntegrationRuntimeReference IntegrationRuntimeReferenceType = "IntegrationRuntimeReference"
)

// PossibleIntegrationRuntimeReferenceTypeValues returns the possible values for the IntegrationRuntimeReferenceType const type.
func PossibleIntegrationRuntimeReferenceTypeValues() []IntegrationRuntimeReferenceType {
	return []IntegrationRuntimeReferenceType{
		IntegrationRuntimeReferenceTypeIntegrationRuntimeReference,
	}
}

func (c IntegrationRuntimeReferenceType) ToPtr() *IntegrationRuntimeReferenceType {
	return &c
}

// IntegrationRuntimeSsisCatalogPricingTier - The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
type IntegrationRuntimeSsisCatalogPricingTier string

const (
	IntegrationRuntimeSsisCatalogPricingTierBasic     IntegrationRuntimeSsisCatalogPricingTier = "Basic"
	IntegrationRuntimeSsisCatalogPricingTierPremium   IntegrationRuntimeSsisCatalogPricingTier = "Premium"
	IntegrationRuntimeSsisCatalogPricingTierPremiumRs IntegrationRuntimeSsisCatalogPricingTier = "PremiumRS"
	IntegrationRuntimeSsisCatalogPricingTierStandard  IntegrationRuntimeSsisCatalogPricingTier = "Standard"
)

// PossibleIntegrationRuntimeSsisCatalogPricingTierValues returns the possible values for the IntegrationRuntimeSsisCatalogPricingTier const type.
func PossibleIntegrationRuntimeSsisCatalogPricingTierValues() []IntegrationRuntimeSsisCatalogPricingTier {
	return []IntegrationRuntimeSsisCatalogPricingTier{
		IntegrationRuntimeSsisCatalogPricingTierBasic,
		IntegrationRuntimeSsisCatalogPricingTierPremium,
		IntegrationRuntimeSsisCatalogPricingTierPremiumRs,
		IntegrationRuntimeSsisCatalogPricingTierStandard,
	}
}

func (c IntegrationRuntimeSsisCatalogPricingTier) ToPtr() *IntegrationRuntimeSsisCatalogPricingTier {
	return &c
}

// IntegrationRuntimeState - The state of integration runtime.
type IntegrationRuntimeState string

const (
	IntegrationRuntimeStateAccessDenied     IntegrationRuntimeState = "AccessDenied"
	IntegrationRuntimeStateInitial          IntegrationRuntimeState = "Initial"
	IntegrationRuntimeStateLimited          IntegrationRuntimeState = "Limited"
	IntegrationRuntimeStateNeedRegistration IntegrationRuntimeState = "NeedRegistration"
	IntegrationRuntimeStateOffline          IntegrationRuntimeState = "Offline"
	IntegrationRuntimeStateOnline           IntegrationRuntimeState = "Online"
	IntegrationRuntimeStateStarted          IntegrationRuntimeState = "Started"
	IntegrationRuntimeStateStarting         IntegrationRuntimeState = "Starting"
	IntegrationRuntimeStateStopped          IntegrationRuntimeState = "Stopped"
	IntegrationRuntimeStateStopping         IntegrationRuntimeState = "Stopping"
)

// PossibleIntegrationRuntimeStateValues returns the possible values for the IntegrationRuntimeState const type.
func PossibleIntegrationRuntimeStateValues() []IntegrationRuntimeState {
	return []IntegrationRuntimeState{
		IntegrationRuntimeStateAccessDenied,
		IntegrationRuntimeStateInitial,
		IntegrationRuntimeStateLimited,
		IntegrationRuntimeStateNeedRegistration,
		IntegrationRuntimeStateOffline,
		IntegrationRuntimeStateOnline,
		IntegrationRuntimeStateStarted,
		IntegrationRuntimeStateStarting,
		IntegrationRuntimeStateStopped,
		IntegrationRuntimeStateStopping,
	}
}

func (c IntegrationRuntimeState) ToPtr() *IntegrationRuntimeState {
	return &c
}

// IntegrationRuntimeType - The type of integration runtime.
type IntegrationRuntimeType string

const (
	IntegrationRuntimeTypeManaged    IntegrationRuntimeType = "Managed"
	IntegrationRuntimeTypeSelfHosted IntegrationRuntimeType = "SelfHosted"
)

// PossibleIntegrationRuntimeTypeValues returns the possible values for the IntegrationRuntimeType const type.
func PossibleIntegrationRuntimeTypeValues() []IntegrationRuntimeType {
	return []IntegrationRuntimeType{
		IntegrationRuntimeTypeManaged,
		IntegrationRuntimeTypeSelfHosted,
	}
}

func (c IntegrationRuntimeType) ToPtr() *IntegrationRuntimeType {
	return &c
}

// JSONFormatFilePattern - JSON format file pattern. A property of JsonFormat.
type JSONFormatFilePattern string

const (
	JSONFormatFilePatternArrayOfObjects JSONFormatFilePattern = "arrayOfObjects"
	JSONFormatFilePatternSetOfObjects   JSONFormatFilePattern = "setOfObjects"
)

// PossibleJSONFormatFilePatternValues returns the possible values for the JSONFormatFilePattern const type.
func PossibleJSONFormatFilePatternValues() []JSONFormatFilePattern {
	return []JSONFormatFilePattern{
		JSONFormatFilePatternArrayOfObjects,
		JSONFormatFilePatternSetOfObjects,
	}
}

func (c JSONFormatFilePattern) ToPtr() *JSONFormatFilePattern {
	return &c
}

// JSONWriteFilePattern - File pattern of JSON. This setting controls the way a collection of JSON objects will be treated. The default value is 'setOfObjects'.
// It is case-sensitive.
type JSONWriteFilePattern string

const (
	JSONWriteFilePatternArrayOfObjects JSONWriteFilePattern = "arrayOfObjects"
	JSONWriteFilePatternSetOfObjects   JSONWriteFilePattern = "setOfObjects"
)

// PossibleJSONWriteFilePatternValues returns the possible values for the JSONWriteFilePattern const type.
func PossibleJSONWriteFilePatternValues() []JSONWriteFilePattern {
	return []JSONWriteFilePattern{
		JSONWriteFilePatternArrayOfObjects,
		JSONWriteFilePatternSetOfObjects,
	}
}

func (c JSONWriteFilePattern) ToPtr() *JSONWriteFilePattern {
	return &c
}

// MongoDbAuthenticationType - The authentication type to be used to connect to the MongoDB database.
type MongoDbAuthenticationType string

const (
	MongoDbAuthenticationTypeAnonymous MongoDbAuthenticationType = "Anonymous"
	MongoDbAuthenticationTypeBasic     MongoDbAuthenticationType = "Basic"
)

// PossibleMongoDbAuthenticationTypeValues returns the possible values for the MongoDbAuthenticationType const type.
func PossibleMongoDbAuthenticationTypeValues() []MongoDbAuthenticationType {
	return []MongoDbAuthenticationType{
		MongoDbAuthenticationTypeAnonymous,
		MongoDbAuthenticationTypeBasic,
	}
}

func (c MongoDbAuthenticationType) ToPtr() *MongoDbAuthenticationType {
	return &c
}

// NetezzaPartitionOption - The partition mechanism that will be used for Netezza read in parallel.
type NetezzaPartitionOption string

const (
	NetezzaPartitionOptionDataSlice    NetezzaPartitionOption = "DataSlice"
	NetezzaPartitionOptionDynamicRange NetezzaPartitionOption = "DynamicRange"
	NetezzaPartitionOptionNone         NetezzaPartitionOption = "None"
)

// PossibleNetezzaPartitionOptionValues returns the possible values for the NetezzaPartitionOption const type.
func PossibleNetezzaPartitionOptionValues() []NetezzaPartitionOption {
	return []NetezzaPartitionOption{
		NetezzaPartitionOptionDataSlice,
		NetezzaPartitionOptionDynamicRange,
		NetezzaPartitionOptionNone,
	}
}

func (c NetezzaPartitionOption) ToPtr() *NetezzaPartitionOption {
	return &c
}

// NodeSize - The level of compute power that each node in the Big Data pool has.
type NodeSize string

const (
	NodeSizeLarge    NodeSize = "Large"
	NodeSizeMedium   NodeSize = "Medium"
	NodeSizeNone     NodeSize = "None"
	NodeSizeSmall    NodeSize = "Small"
	NodeSizeXLarge   NodeSize = "XLarge"
	NodeSizeXxLarge  NodeSize = "XXLarge"
	NodeSizeXxxLarge NodeSize = "XXXLarge"
)

// PossibleNodeSizeValues returns the possible values for the NodeSize const type.
func PossibleNodeSizeValues() []NodeSize {
	return []NodeSize{
		NodeSizeLarge,
		NodeSizeMedium,
		NodeSizeNone,
		NodeSizeSmall,
		NodeSizeXLarge,
		NodeSizeXxLarge,
		NodeSizeXxxLarge,
	}
}

func (c NodeSize) ToPtr() *NodeSize {
	return &c
}

// NodeSizeFamily - The kind of nodes that the Big Data pool provides.
type NodeSizeFamily string

const (
	NodeSizeFamilyMemoryOptimized NodeSizeFamily = "MemoryOptimized"
	NodeSizeFamilyNone            NodeSizeFamily = "None"
)

// PossibleNodeSizeFamilyValues returns the possible values for the NodeSizeFamily const type.
func PossibleNodeSizeFamilyValues() []NodeSizeFamily {
	return []NodeSizeFamily{
		NodeSizeFamilyMemoryOptimized,
		NodeSizeFamilyNone,
	}
}

func (c NodeSizeFamily) ToPtr() *NodeSizeFamily {
	return &c
}

// NotebookReferenceType - Synapse notebook reference type.
type NotebookReferenceType string

const (
	NotebookReferenceTypeNotebookReference NotebookReferenceType = "NotebookReference"
)

// PossibleNotebookReferenceTypeValues returns the possible values for the NotebookReferenceType const type.
func PossibleNotebookReferenceTypeValues() []NotebookReferenceType {
	return []NotebookReferenceType{
		NotebookReferenceTypeNotebookReference,
	}
}

func (c NotebookReferenceType) ToPtr() *NotebookReferenceType {
	return &c
}

// ODataAadServicePrincipalCredentialType - Specify the credential type (key or cert) is used for service principal.
type ODataAadServicePrincipalCredentialType string

const (
	ODataAadServicePrincipalCredentialTypeServicePrincipalCert ODataAadServicePrincipalCredentialType = "ServicePrincipalCert"
	ODataAadServicePrincipalCredentialTypeServicePrincipalKey  ODataAadServicePrincipalCredentialType = "ServicePrincipalKey"
)

// PossibleODataAadServicePrincipalCredentialTypeValues returns the possible values for the ODataAadServicePrincipalCredentialType const type.
func PossibleODataAadServicePrincipalCredentialTypeValues() []ODataAadServicePrincipalCredentialType {
	return []ODataAadServicePrincipalCredentialType{
		ODataAadServicePrincipalCredentialTypeServicePrincipalCert,
		ODataAadServicePrincipalCredentialTypeServicePrincipalKey,
	}
}

func (c ODataAadServicePrincipalCredentialType) ToPtr() *ODataAadServicePrincipalCredentialType {
	return &c
}

// ODataAuthenticationType - Type of authentication used to connect to the OData service.
type ODataAuthenticationType string

const (
	ODataAuthenticationTypeAadServicePrincipal    ODataAuthenticationType = "AadServicePrincipal"
	ODataAuthenticationTypeAnonymous              ODataAuthenticationType = "Anonymous"
	ODataAuthenticationTypeBasic                  ODataAuthenticationType = "Basic"
	ODataAuthenticationTypeManagedServiceIDentity ODataAuthenticationType = "ManagedServiceIdentity"
	ODataAuthenticationTypeWindows                ODataAuthenticationType = "Windows"
)

// PossibleODataAuthenticationTypeValues returns the possible values for the ODataAuthenticationType const type.
func PossibleODataAuthenticationTypeValues() []ODataAuthenticationType {
	return []ODataAuthenticationType{
		ODataAuthenticationTypeAadServicePrincipal,
		ODataAuthenticationTypeAnonymous,
		ODataAuthenticationTypeBasic,
		ODataAuthenticationTypeManagedServiceIDentity,
		ODataAuthenticationTypeWindows,
	}
}

func (c ODataAuthenticationType) ToPtr() *ODataAuthenticationType {
	return &c
}

// OraclePartitionOption - The partition mechanism that will be used for Oracle read in parallel.
type OraclePartitionOption string

const (
	OraclePartitionOptionDynamicRange              OraclePartitionOption = "DynamicRange"
	OraclePartitionOptionNone                      OraclePartitionOption = "None"
	OraclePartitionOptionPhysicalPartitionsOfTable OraclePartitionOption = "PhysicalPartitionsOfTable"
)

// PossibleOraclePartitionOptionValues returns the possible values for the OraclePartitionOption const type.
func PossibleOraclePartitionOptionValues() []OraclePartitionOption {
	return []OraclePartitionOption{
		OraclePartitionOptionDynamicRange,
		OraclePartitionOptionNone,
		OraclePartitionOptionPhysicalPartitionsOfTable,
	}
}

func (c OraclePartitionOption) ToPtr() *OraclePartitionOption {
	return &c
}

type OrcCompressionCodec string

const (
	OrcCompressionCodecNone   OrcCompressionCodec = "none"
	OrcCompressionCodecSnappy OrcCompressionCodec = "snappy"
	OrcCompressionCodecZlib   OrcCompressionCodec = "zlib"
)

// PossibleOrcCompressionCodecValues returns the possible values for the OrcCompressionCodec const type.
func PossibleOrcCompressionCodecValues() []OrcCompressionCodec {
	return []OrcCompressionCodec{
		OrcCompressionCodecNone,
		OrcCompressionCodecSnappy,
		OrcCompressionCodecZlib,
	}
}

func (c OrcCompressionCodec) ToPtr() *OrcCompressionCodec {
	return &c
}

// ParameterType - Parameter type.
type ParameterType string

const (
	ParameterTypeArray        ParameterType = "Array"
	ParameterTypeBool         ParameterType = "Bool"
	ParameterTypeFloat        ParameterType = "Float"
	ParameterTypeInt          ParameterType = "Int"
	ParameterTypeObject       ParameterType = "Object"
	ParameterTypeSecureString ParameterType = "SecureString"
	ParameterTypeString       ParameterType = "String"
)

// PossibleParameterTypeValues returns the possible values for the ParameterType const type.
func PossibleParameterTypeValues() []ParameterType {
	return []ParameterType{
		ParameterTypeArray,
		ParameterTypeBool,
		ParameterTypeFloat,
		ParameterTypeInt,
		ParameterTypeObject,
		ParameterTypeSecureString,
		ParameterTypeString,
	}
}

func (c ParameterType) ToPtr() *ParameterType {
	return &c
}

type ParquetCompressionCodec string

const (
	ParquetCompressionCodecGzip   ParquetCompressionCodec = "gzip"
	ParquetCompressionCodecLzo    ParquetCompressionCodec = "lzo"
	ParquetCompressionCodecNone   ParquetCompressionCodec = "none"
	ParquetCompressionCodecSnappy ParquetCompressionCodec = "snappy"
)

// PossibleParquetCompressionCodecValues returns the possible values for the ParquetCompressionCodec const type.
func PossibleParquetCompressionCodecValues() []ParquetCompressionCodec {
	return []ParquetCompressionCodec{
		ParquetCompressionCodecGzip,
		ParquetCompressionCodecLzo,
		ParquetCompressionCodecNone,
		ParquetCompressionCodecSnappy,
	}
}

func (c ParquetCompressionCodec) ToPtr() *ParquetCompressionCodec {
	return &c
}

// PhoenixAuthenticationType - The authentication mechanism used to connect to the Phoenix server.
type PhoenixAuthenticationType string

const (
	PhoenixAuthenticationTypeAnonymous                    PhoenixAuthenticationType = "Anonymous"
	PhoenixAuthenticationTypeUsernameAndPassword          PhoenixAuthenticationType = "UsernameAndPassword"
	PhoenixAuthenticationTypeWindowsAzureHdInsightService PhoenixAuthenticationType = "WindowsAzureHDInsightService"
)

// PossiblePhoenixAuthenticationTypeValues returns the possible values for the PhoenixAuthenticationType const type.
func PossiblePhoenixAuthenticationTypeValues() []PhoenixAuthenticationType {
	return []PhoenixAuthenticationType{
		PhoenixAuthenticationTypeAnonymous,
		PhoenixAuthenticationTypeUsernameAndPassword,
		PhoenixAuthenticationTypeWindowsAzureHdInsightService,
	}
}

func (c PhoenixAuthenticationType) ToPtr() *PhoenixAuthenticationType {
	return &c
}

// PipelineReferenceType - Pipeline reference type.
type PipelineReferenceType string

const (
	PipelineReferenceTypePipelineReference PipelineReferenceType = "PipelineReference"
)

// PossiblePipelineReferenceTypeValues returns the possible values for the PipelineReferenceType const type.
func PossiblePipelineReferenceTypeValues() []PipelineReferenceType {
	return []PipelineReferenceType{
		PipelineReferenceTypePipelineReference,
	}
}

func (c PipelineReferenceType) ToPtr() *PipelineReferenceType {
	return &c
}

type PluginCurrentState string

const (
	PluginCurrentStateCleanup             PluginCurrentState = "Cleanup"
	PluginCurrentStateEnded               PluginCurrentState = "Ended"
	PluginCurrentStateMonitoring          PluginCurrentState = "Monitoring"
	PluginCurrentStatePreparation         PluginCurrentState = "Preparation"
	PluginCurrentStateQueued              PluginCurrentState = "Queued"
	PluginCurrentStateResourceAcquisition PluginCurrentState = "ResourceAcquisition"
	PluginCurrentStateSubmission          PluginCurrentState = "Submission"
)

// PossiblePluginCurrentStateValues returns the possible values for the PluginCurrentState const type.
func PossiblePluginCurrentStateValues() []PluginCurrentState {
	return []PluginCurrentState{
		PluginCurrentStateCleanup,
		PluginCurrentStateEnded,
		PluginCurrentStateMonitoring,
		PluginCurrentStatePreparation,
		PluginCurrentStateQueued,
		PluginCurrentStateResourceAcquisition,
		PluginCurrentStateSubmission,
	}
}

func (c PluginCurrentState) ToPtr() *PluginCurrentState {
	return &c
}

// PolybaseSettingsRejectType - Indicates whether the RejectValue property is specified as a literal value or a percentage.
type PolybaseSettingsRejectType string

const (
	PolybaseSettingsRejectTypePercentage PolybaseSettingsRejectType = "percentage"
	PolybaseSettingsRejectTypeValue      PolybaseSettingsRejectType = "value"
)

// PossiblePolybaseSettingsRejectTypeValues returns the possible values for the PolybaseSettingsRejectType const type.
func PossiblePolybaseSettingsRejectTypeValues() []PolybaseSettingsRejectType {
	return []PolybaseSettingsRejectType{
		PolybaseSettingsRejectTypePercentage,
		PolybaseSettingsRejectTypeValue,
	}
}

func (c PolybaseSettingsRejectType) ToPtr() *PolybaseSettingsRejectType {
	return &c
}

// PrestoAuthenticationType - The authentication mechanism used to connect to the Presto server.
type PrestoAuthenticationType string

const (
	PrestoAuthenticationTypeAnonymous PrestoAuthenticationType = "Anonymous"
	PrestoAuthenticationTypeLdap      PrestoAuthenticationType = "LDAP"
)

// PossiblePrestoAuthenticationTypeValues returns the possible values for the PrestoAuthenticationType const type.
func PossiblePrestoAuthenticationTypeValues() []PrestoAuthenticationType {
	return []PrestoAuthenticationType{
		PrestoAuthenticationTypeAnonymous,
		PrestoAuthenticationTypeLdap,
	}
}

func (c PrestoAuthenticationType) ToPtr() *PrestoAuthenticationType {
	return &c
}

// RecurrenceFrequency - Enumerates possible frequency option for the schedule trigger.
type RecurrenceFrequency string

const (
	RecurrenceFrequencyDay          RecurrenceFrequency = "Day"
	RecurrenceFrequencyHour         RecurrenceFrequency = "Hour"
	RecurrenceFrequencyMinute       RecurrenceFrequency = "Minute"
	RecurrenceFrequencyMonth        RecurrenceFrequency = "Month"
	RecurrenceFrequencyNotSpecified RecurrenceFrequency = "NotSpecified"
	RecurrenceFrequencyWeek         RecurrenceFrequency = "Week"
	RecurrenceFrequencyYear         RecurrenceFrequency = "Year"
)

// PossibleRecurrenceFrequencyValues returns the possible values for the RecurrenceFrequency const type.
func PossibleRecurrenceFrequencyValues() []RecurrenceFrequency {
	return []RecurrenceFrequency{
		RecurrenceFrequencyDay,
		RecurrenceFrequencyHour,
		RecurrenceFrequencyMinute,
		RecurrenceFrequencyMonth,
		RecurrenceFrequencyNotSpecified,
		RecurrenceFrequencyWeek,
		RecurrenceFrequencyYear,
	}
}

func (c RecurrenceFrequency) ToPtr() *RecurrenceFrequency {
	return &c
}

// ResourceIDentityType - The type of managed identity for the workspace
type ResourceIDentityType string

const (
	ResourceIDentityTypeNone           ResourceIDentityType = "None"
	ResourceIDentityTypeSystemAssigned ResourceIDentityType = "SystemAssigned"
)

// PossibleResourceIDentityTypeValues returns the possible values for the ResourceIDentityType const type.
func PossibleResourceIDentityTypeValues() []ResourceIDentityType {
	return []ResourceIDentityType{
		ResourceIDentityTypeNone,
		ResourceIDentityTypeSystemAssigned,
	}
}

func (c ResourceIDentityType) ToPtr() *ResourceIDentityType {
	return &c
}

// RestServiceAuthenticationType - Type of authentication used to connect to the REST service.
type RestServiceAuthenticationType string

const (
	RestServiceAuthenticationTypeAadServicePrincipal    RestServiceAuthenticationType = "AadServicePrincipal"
	RestServiceAuthenticationTypeAnonymous              RestServiceAuthenticationType = "Anonymous"
	RestServiceAuthenticationTypeBasic                  RestServiceAuthenticationType = "Basic"
	RestServiceAuthenticationTypeManagedServiceIDentity RestServiceAuthenticationType = "ManagedServiceIdentity"
)

// PossibleRestServiceAuthenticationTypeValues returns the possible values for the RestServiceAuthenticationType const type.
func PossibleRestServiceAuthenticationTypeValues() []RestServiceAuthenticationType {
	return []RestServiceAuthenticationType{
		RestServiceAuthenticationTypeAadServicePrincipal,
		RestServiceAuthenticationTypeAnonymous,
		RestServiceAuthenticationTypeBasic,
		RestServiceAuthenticationTypeManagedServiceIDentity,
	}
}

func (c RestServiceAuthenticationType) ToPtr() *RestServiceAuthenticationType {
	return &c
}

// RunQueryFilterOperand - Parameter name to be used for filter. The allowed operands to query pipeline runs are PipelineName, RunStart, RunEnd and Status;
// to query activity runs are ActivityName, ActivityRunStart,
// ActivityRunEnd, ActivityType and Status, and to query trigger runs are TriggerName, TriggerRunTimestamp and Status.
type RunQueryFilterOperand string

const (
	RunQueryFilterOperandActivityName        RunQueryFilterOperand = "ActivityName"
	RunQueryFilterOperandActivityRunEnd      RunQueryFilterOperand = "ActivityRunEnd"
	RunQueryFilterOperandActivityRunStart    RunQueryFilterOperand = "ActivityRunStart"
	RunQueryFilterOperandActivityType        RunQueryFilterOperand = "ActivityType"
	RunQueryFilterOperandLatestOnly          RunQueryFilterOperand = "LatestOnly"
	RunQueryFilterOperandPipelineName        RunQueryFilterOperand = "PipelineName"
	RunQueryFilterOperandRunEnd              RunQueryFilterOperand = "RunEnd"
	RunQueryFilterOperandRunGroupID          RunQueryFilterOperand = "RunGroupId"
	RunQueryFilterOperandRunStart            RunQueryFilterOperand = "RunStart"
	RunQueryFilterOperandStatus              RunQueryFilterOperand = "Status"
	RunQueryFilterOperandTriggerName         RunQueryFilterOperand = "TriggerName"
	RunQueryFilterOperandTriggerRunTimestamp RunQueryFilterOperand = "TriggerRunTimestamp"
)

// PossibleRunQueryFilterOperandValues returns the possible values for the RunQueryFilterOperand const type.
func PossibleRunQueryFilterOperandValues() []RunQueryFilterOperand {
	return []RunQueryFilterOperand{
		RunQueryFilterOperandActivityName,
		RunQueryFilterOperandActivityRunEnd,
		RunQueryFilterOperandActivityRunStart,
		RunQueryFilterOperandActivityType,
		RunQueryFilterOperandLatestOnly,
		RunQueryFilterOperandPipelineName,
		RunQueryFilterOperandRunEnd,
		RunQueryFilterOperandRunGroupID,
		RunQueryFilterOperandRunStart,
		RunQueryFilterOperandStatus,
		RunQueryFilterOperandTriggerName,
		RunQueryFilterOperandTriggerRunTimestamp,
	}
}

func (c RunQueryFilterOperand) ToPtr() *RunQueryFilterOperand {
	return &c
}

// RunQueryFilterOperator - Operator to be used for filter.
type RunQueryFilterOperator string

const (
	RunQueryFilterOperatorEquals    RunQueryFilterOperator = "Equals"
	RunQueryFilterOperatorIn        RunQueryFilterOperator = "In"
	RunQueryFilterOperatorNotEquals RunQueryFilterOperator = "NotEquals"
	RunQueryFilterOperatorNotIn     RunQueryFilterOperator = "NotIn"
)

// PossibleRunQueryFilterOperatorValues returns the possible values for the RunQueryFilterOperator const type.
func PossibleRunQueryFilterOperatorValues() []RunQueryFilterOperator {
	return []RunQueryFilterOperator{
		RunQueryFilterOperatorEquals,
		RunQueryFilterOperatorIn,
		RunQueryFilterOperatorNotEquals,
		RunQueryFilterOperatorNotIn,
	}
}

func (c RunQueryFilterOperator) ToPtr() *RunQueryFilterOperator {
	return &c
}

// RunQueryOrder - Sorting order of the parameter.
type RunQueryOrder string

const (
	RunQueryOrderAsc  RunQueryOrder = "ASC"
	RunQueryOrderDesc RunQueryOrder = "DESC"
)

// PossibleRunQueryOrderValues returns the possible values for the RunQueryOrder const type.
func PossibleRunQueryOrderValues() []RunQueryOrder {
	return []RunQueryOrder{
		RunQueryOrderAsc,
		RunQueryOrderDesc,
	}
}

func (c RunQueryOrder) ToPtr() *RunQueryOrder {
	return &c
}

// RunQueryOrderByField - Parameter name to be used for order by. The allowed parameters to order by for pipeline runs are PipelineName, RunStart, RunEnd
// and Status; for activity runs are ActivityName, ActivityRunStart,
// ActivityRunEnd and Status; for trigger runs are TriggerName, TriggerRunTimestamp and Status.
type RunQueryOrderByField string

const (
	RunQueryOrderByFieldActivityName        RunQueryOrderByField = "ActivityName"
	RunQueryOrderByFieldActivityRunEnd      RunQueryOrderByField = "ActivityRunEnd"
	RunQueryOrderByFieldActivityRunStart    RunQueryOrderByField = "ActivityRunStart"
	RunQueryOrderByFieldPipelineName        RunQueryOrderByField = "PipelineName"
	RunQueryOrderByFieldRunEnd              RunQueryOrderByField = "RunEnd"
	RunQueryOrderByFieldRunStart            RunQueryOrderByField = "RunStart"
	RunQueryOrderByFieldStatus              RunQueryOrderByField = "Status"
	RunQueryOrderByFieldTriggerName         RunQueryOrderByField = "TriggerName"
	RunQueryOrderByFieldTriggerRunTimestamp RunQueryOrderByField = "TriggerRunTimestamp"
)

// PossibleRunQueryOrderByFieldValues returns the possible values for the RunQueryOrderByField const type.
func PossibleRunQueryOrderByFieldValues() []RunQueryOrderByField {
	return []RunQueryOrderByField{
		RunQueryOrderByFieldActivityName,
		RunQueryOrderByFieldActivityRunEnd,
		RunQueryOrderByFieldActivityRunStart,
		RunQueryOrderByFieldPipelineName,
		RunQueryOrderByFieldRunEnd,
		RunQueryOrderByFieldRunStart,
		RunQueryOrderByFieldStatus,
		RunQueryOrderByFieldTriggerName,
		RunQueryOrderByFieldTriggerRunTimestamp,
	}
}

func (c RunQueryOrderByField) ToPtr() *RunQueryOrderByField {
	return &c
}

// SQLConnectionType - The type of the connection.
type SQLConnectionType string

const (
	SQLConnectionTypeSQLOnDemand SQLConnectionType = "SqlOnDemand"
	SQLConnectionTypeSQLPool     SQLConnectionType = "SqlPool"
)

// PossibleSQLConnectionTypeValues returns the possible values for the SQLConnectionType const type.
func PossibleSQLConnectionTypeValues() []SQLConnectionType {
	return []SQLConnectionType{
		SQLConnectionTypeSQLOnDemand,
		SQLConnectionTypeSQLPool,
	}
}

func (c SQLConnectionType) ToPtr() *SQLConnectionType {
	return &c
}

// SQLPoolReferenceType - SQL pool reference type.
type SQLPoolReferenceType string

const (
	SQLPoolReferenceTypeSQLPoolReference SQLPoolReferenceType = "SqlPoolReference"
)

// PossibleSQLPoolReferenceTypeValues returns the possible values for the SQLPoolReferenceType const type.
func PossibleSQLPoolReferenceTypeValues() []SQLPoolReferenceType {
	return []SQLPoolReferenceType{
		SQLPoolReferenceTypeSQLPoolReference,
	}
}

func (c SQLPoolReferenceType) ToPtr() *SQLPoolReferenceType {
	return &c
}

// SQLScriptType - The type of the SQL script.
type SQLScriptType string

const (
	SQLScriptTypeSQLQuery SQLScriptType = "SqlQuery"
)

// PossibleSQLScriptTypeValues returns the possible values for the SQLScriptType const type.
func PossibleSQLScriptTypeValues() []SQLScriptType {
	return []SQLScriptType{
		SQLScriptTypeSQLQuery,
	}
}

func (c SQLScriptType) ToPtr() *SQLScriptType {
	return &c
}

// SalesforceSinkWriteBehavior - The write behavior for the operation. Default is Insert.
type SalesforceSinkWriteBehavior string

const (
	SalesforceSinkWriteBehaviorInsert SalesforceSinkWriteBehavior = "Insert"
	SalesforceSinkWriteBehaviorUpsert SalesforceSinkWriteBehavior = "Upsert"
)

// PossibleSalesforceSinkWriteBehaviorValues returns the possible values for the SalesforceSinkWriteBehavior const type.
func PossibleSalesforceSinkWriteBehaviorValues() []SalesforceSinkWriteBehavior {
	return []SalesforceSinkWriteBehavior{
		SalesforceSinkWriteBehaviorInsert,
		SalesforceSinkWriteBehaviorUpsert,
	}
}

func (c SalesforceSinkWriteBehavior) ToPtr() *SalesforceSinkWriteBehavior {
	return &c
}

// SalesforceSourceReadBehavior - The read behavior for the operation. Default is Query.
type SalesforceSourceReadBehavior string

const (
	SalesforceSourceReadBehaviorQuery    SalesforceSourceReadBehavior = "Query"
	SalesforceSourceReadBehaviorQueryAll SalesforceSourceReadBehavior = "QueryAll"
)

// PossibleSalesforceSourceReadBehaviorValues returns the possible values for the SalesforceSourceReadBehavior const type.
func PossibleSalesforceSourceReadBehaviorValues() []SalesforceSourceReadBehavior {
	return []SalesforceSourceReadBehavior{
		SalesforceSourceReadBehaviorQuery,
		SalesforceSourceReadBehaviorQueryAll,
	}
}

func (c SalesforceSourceReadBehavior) ToPtr() *SalesforceSourceReadBehavior {
	return &c
}

// SapCloudForCustomerSinkWriteBehavior - The write behavior for the operation. Default is 'Insert'.
type SapCloudForCustomerSinkWriteBehavior string

const (
	SapCloudForCustomerSinkWriteBehaviorInsert SapCloudForCustomerSinkWriteBehavior = "Insert"
	SapCloudForCustomerSinkWriteBehaviorUpdate SapCloudForCustomerSinkWriteBehavior = "Update"
)

// PossibleSapCloudForCustomerSinkWriteBehaviorValues returns the possible values for the SapCloudForCustomerSinkWriteBehavior const type.
func PossibleSapCloudForCustomerSinkWriteBehaviorValues() []SapCloudForCustomerSinkWriteBehavior {
	return []SapCloudForCustomerSinkWriteBehavior{
		SapCloudForCustomerSinkWriteBehaviorInsert,
		SapCloudForCustomerSinkWriteBehaviorUpdate,
	}
}

func (c SapCloudForCustomerSinkWriteBehavior) ToPtr() *SapCloudForCustomerSinkWriteBehavior {
	return &c
}

// SapHanaAuthenticationType - The authentication type to be used to connect to the SAP HANA server.
type SapHanaAuthenticationType string

const (
	SapHanaAuthenticationTypeBasic   SapHanaAuthenticationType = "Basic"
	SapHanaAuthenticationTypeWindows SapHanaAuthenticationType = "Windows"
)

// PossibleSapHanaAuthenticationTypeValues returns the possible values for the SapHanaAuthenticationType const type.
func PossibleSapHanaAuthenticationTypeValues() []SapHanaAuthenticationType {
	return []SapHanaAuthenticationType{
		SapHanaAuthenticationTypeBasic,
		SapHanaAuthenticationTypeWindows,
	}
}

func (c SapHanaAuthenticationType) ToPtr() *SapHanaAuthenticationType {
	return &c
}

// SapHanaPartitionOption - The partition mechanism that will be used for SAP HANA read in parallel.
type SapHanaPartitionOption string

const (
	SapHanaPartitionOptionNone                      SapHanaPartitionOption = "None"
	SapHanaPartitionOptionPhysicalPartitionsOfTable SapHanaPartitionOption = "PhysicalPartitionsOfTable"
	SapHanaPartitionOptionSapHanaDynamicRange       SapHanaPartitionOption = "SapHanaDynamicRange"
)

// PossibleSapHanaPartitionOptionValues returns the possible values for the SapHanaPartitionOption const type.
func PossibleSapHanaPartitionOptionValues() []SapHanaPartitionOption {
	return []SapHanaPartitionOption{
		SapHanaPartitionOptionNone,
		SapHanaPartitionOptionPhysicalPartitionsOfTable,
		SapHanaPartitionOptionSapHanaDynamicRange,
	}
}

func (c SapHanaPartitionOption) ToPtr() *SapHanaPartitionOption {
	return &c
}

// SapTablePartitionOption - The partition mechanism that will be used for SAP table read in parallel.
type SapTablePartitionOption string

const (
	SapTablePartitionOptionNone                     SapTablePartitionOption = "None"
	SapTablePartitionOptionPartitionOnCalendarDate  SapTablePartitionOption = "PartitionOnCalendarDate"
	SapTablePartitionOptionPartitionOnCalendarMonth SapTablePartitionOption = "PartitionOnCalendarMonth"
	SapTablePartitionOptionPartitionOnCalendarYear  SapTablePartitionOption = "PartitionOnCalendarYear"
	SapTablePartitionOptionPartitionOnInt           SapTablePartitionOption = "PartitionOnInt"
	SapTablePartitionOptionPartitionOnTime          SapTablePartitionOption = "PartitionOnTime"
)

// PossibleSapTablePartitionOptionValues returns the possible values for the SapTablePartitionOption const type.
func PossibleSapTablePartitionOptionValues() []SapTablePartitionOption {
	return []SapTablePartitionOption{
		SapTablePartitionOptionNone,
		SapTablePartitionOptionPartitionOnCalendarDate,
		SapTablePartitionOptionPartitionOnCalendarMonth,
		SapTablePartitionOptionPartitionOnCalendarYear,
		SapTablePartitionOptionPartitionOnInt,
		SapTablePartitionOptionPartitionOnTime,
	}
}

func (c SapTablePartitionOption) ToPtr() *SapTablePartitionOption {
	return &c
}

type SchedulerCurrentState string

const (
	SchedulerCurrentStateEnded     SchedulerCurrentState = "Ended"
	SchedulerCurrentStateQueued    SchedulerCurrentState = "Queued"
	SchedulerCurrentStateScheduled SchedulerCurrentState = "Scheduled"
)

// PossibleSchedulerCurrentStateValues returns the possible values for the SchedulerCurrentState const type.
func PossibleSchedulerCurrentStateValues() []SchedulerCurrentState {
	return []SchedulerCurrentState{
		SchedulerCurrentStateEnded,
		SchedulerCurrentStateQueued,
		SchedulerCurrentStateScheduled,
	}
}

func (c SchedulerCurrentState) ToPtr() *SchedulerCurrentState {
	return &c
}

// ServiceNowAuthenticationType - The authentication type to use.
type ServiceNowAuthenticationType string

const (
	ServiceNowAuthenticationTypeBasic  ServiceNowAuthenticationType = "Basic"
	ServiceNowAuthenticationTypeOAuth2 ServiceNowAuthenticationType = "OAuth2"
)

// PossibleServiceNowAuthenticationTypeValues returns the possible values for the ServiceNowAuthenticationType const type.
func PossibleServiceNowAuthenticationTypeValues() []ServiceNowAuthenticationType {
	return []ServiceNowAuthenticationType{
		ServiceNowAuthenticationTypeBasic,
		ServiceNowAuthenticationTypeOAuth2,
	}
}

func (c ServiceNowAuthenticationType) ToPtr() *ServiceNowAuthenticationType {
	return &c
}

// SftpAuthenticationType - The authentication type to be used to connect to the FTP server.
type SftpAuthenticationType string

const (
	SftpAuthenticationTypeBasic        SftpAuthenticationType = "Basic"
	SftpAuthenticationTypeSSHPublicKey SftpAuthenticationType = "SshPublicKey"
)

// PossibleSftpAuthenticationTypeValues returns the possible values for the SftpAuthenticationType const type.
func PossibleSftpAuthenticationTypeValues() []SftpAuthenticationType {
	return []SftpAuthenticationType{
		SftpAuthenticationTypeBasic,
		SftpAuthenticationTypeSSHPublicKey,
	}
}

func (c SftpAuthenticationType) ToPtr() *SftpAuthenticationType {
	return &c
}

// SparkAuthenticationType - The authentication method used to access the Spark server.
type SparkAuthenticationType string

const (
	SparkAuthenticationTypeAnonymous                    SparkAuthenticationType = "Anonymous"
	SparkAuthenticationTypeUsername                     SparkAuthenticationType = "Username"
	SparkAuthenticationTypeUsernameAndPassword          SparkAuthenticationType = "UsernameAndPassword"
	SparkAuthenticationTypeWindowsAzureHdInsightService SparkAuthenticationType = "WindowsAzureHDInsightService"
)

// PossibleSparkAuthenticationTypeValues returns the possible values for the SparkAuthenticationType const type.
func PossibleSparkAuthenticationTypeValues() []SparkAuthenticationType {
	return []SparkAuthenticationType{
		SparkAuthenticationTypeAnonymous,
		SparkAuthenticationTypeUsername,
		SparkAuthenticationTypeUsernameAndPassword,
		SparkAuthenticationTypeWindowsAzureHdInsightService,
	}
}

func (c SparkAuthenticationType) ToPtr() *SparkAuthenticationType {
	return &c
}

// SparkBatchJobResultType - The Spark batch job result.
type SparkBatchJobResultType string

const (
	SparkBatchJobResultTypeCancelled SparkBatchJobResultType = "Cancelled"
	SparkBatchJobResultTypeFailed    SparkBatchJobResultType = "Failed"
	SparkBatchJobResultTypeSucceeded SparkBatchJobResultType = "Succeeded"
	SparkBatchJobResultTypeUncertain SparkBatchJobResultType = "Uncertain"
)

// PossibleSparkBatchJobResultTypeValues returns the possible values for the SparkBatchJobResultType const type.
func PossibleSparkBatchJobResultTypeValues() []SparkBatchJobResultType {
	return []SparkBatchJobResultType{
		SparkBatchJobResultTypeCancelled,
		SparkBatchJobResultTypeFailed,
		SparkBatchJobResultTypeSucceeded,
		SparkBatchJobResultTypeUncertain,
	}
}

func (c SparkBatchJobResultType) ToPtr() *SparkBatchJobResultType {
	return &c
}

type SparkErrorSource string

const (
	SparkErrorSourceDependency SparkErrorSource = "Dependency"
	SparkErrorSourceSystem     SparkErrorSource = "System"
	SparkErrorSourceUnknown    SparkErrorSource = "Unknown"
	SparkErrorSourceUser       SparkErrorSource = "User"
)

// PossibleSparkErrorSourceValues returns the possible values for the SparkErrorSource const type.
func PossibleSparkErrorSourceValues() []SparkErrorSource {
	return []SparkErrorSource{
		SparkErrorSourceDependency,
		SparkErrorSourceSystem,
		SparkErrorSourceUnknown,
		SparkErrorSourceUser,
	}
}

func (c SparkErrorSource) ToPtr() *SparkErrorSource {
	return &c
}

// SparkJobReferenceType - Synapse spark job reference type.
type SparkJobReferenceType string

const (
	SparkJobReferenceTypeSparkJobDefinitionReference SparkJobReferenceType = "SparkJobDefinitionReference"
)

// PossibleSparkJobReferenceTypeValues returns the possible values for the SparkJobReferenceType const type.
func PossibleSparkJobReferenceTypeValues() []SparkJobReferenceType {
	return []SparkJobReferenceType{
		SparkJobReferenceTypeSparkJobDefinitionReference,
	}
}

func (c SparkJobReferenceType) ToPtr() *SparkJobReferenceType {
	return &c
}

// SparkJobType - The job type.
type SparkJobType string

const (
	SparkJobTypeSparkBatch   SparkJobType = "SparkBatch"
	SparkJobTypeSparkSession SparkJobType = "SparkSession"
)

// PossibleSparkJobTypeValues returns the possible values for the SparkJobType const type.
func PossibleSparkJobTypeValues() []SparkJobType {
	return []SparkJobType{
		SparkJobTypeSparkBatch,
		SparkJobTypeSparkSession,
	}
}

func (c SparkJobType) ToPtr() *SparkJobType {
	return &c
}

// SparkServerType - The type of Spark server.
type SparkServerType string

const (
	SparkServerTypeSharkServer       SparkServerType = "SharkServer"
	SparkServerTypeSharkServer2      SparkServerType = "SharkServer2"
	SparkServerTypeSparkThriftServer SparkServerType = "SparkThriftServer"
)

// PossibleSparkServerTypeValues returns the possible values for the SparkServerType const type.
func PossibleSparkServerTypeValues() []SparkServerType {
	return []SparkServerType{
		SparkServerTypeSharkServer,
		SparkServerTypeSharkServer2,
		SparkServerTypeSparkThriftServer,
	}
}

func (c SparkServerType) ToPtr() *SparkServerType {
	return &c
}

// SparkThriftTransportProtocol - The transport protocol to use in the Thrift layer.
type SparkThriftTransportProtocol string

const (
	SparkThriftTransportProtocolBinary SparkThriftTransportProtocol = "Binary"
	SparkThriftTransportProtocolHTTP   SparkThriftTransportProtocol = "HTTP "
	SparkThriftTransportProtocolSasl   SparkThriftTransportProtocol = "SASL"
)

// PossibleSparkThriftTransportProtocolValues returns the possible values for the SparkThriftTransportProtocol const type.
func PossibleSparkThriftTransportProtocolValues() []SparkThriftTransportProtocol {
	return []SparkThriftTransportProtocol{
		SparkThriftTransportProtocolBinary,
		SparkThriftTransportProtocolHTTP,
		SparkThriftTransportProtocolSasl,
	}
}

func (c SparkThriftTransportProtocol) ToPtr() *SparkThriftTransportProtocol {
	return &c
}

// SsisLogLocationType - The type of SSIS log location.
type SsisLogLocationType string

const (
	SsisLogLocationTypeFile SsisLogLocationType = "File"
)

// PossibleSsisLogLocationTypeValues returns the possible values for the SsisLogLocationType const type.
func PossibleSsisLogLocationTypeValues() []SsisLogLocationType {
	return []SsisLogLocationType{
		SsisLogLocationTypeFile,
	}
}

func (c SsisLogLocationType) ToPtr() *SsisLogLocationType {
	return &c
}

// SsisPackageLocationType - The type of SSIS package location.
type SsisPackageLocationType string

const (
	SsisPackageLocationTypeFile          SsisPackageLocationType = "File"
	SsisPackageLocationTypeInlinePackage SsisPackageLocationType = "InlinePackage"
	SsisPackageLocationTypeSsisdb        SsisPackageLocationType = "SSISDB"
)

// PossibleSsisPackageLocationTypeValues returns the possible values for the SsisPackageLocationType const type.
func PossibleSsisPackageLocationTypeValues() []SsisPackageLocationType {
	return []SsisPackageLocationType{
		SsisPackageLocationTypeFile,
		SsisPackageLocationTypeInlinePackage,
		SsisPackageLocationTypeSsisdb,
	}
}

func (c SsisPackageLocationType) ToPtr() *SsisPackageLocationType {
	return &c
}

// StoredProcedureParameterType - Stored procedure parameter type.
type StoredProcedureParameterType string

const (
	StoredProcedureParameterTypeBoolean StoredProcedureParameterType = "Boolean"
	StoredProcedureParameterTypeDate    StoredProcedureParameterType = "Date"
	StoredProcedureParameterTypeDecimal StoredProcedureParameterType = "Decimal"
	StoredProcedureParameterTypeGUID    StoredProcedureParameterType = "Guid"
	StoredProcedureParameterTypeInt     StoredProcedureParameterType = "Int"
	StoredProcedureParameterTypeInt64   StoredProcedureParameterType = "Int64"
	StoredProcedureParameterTypeString  StoredProcedureParameterType = "String"
)

// PossibleStoredProcedureParameterTypeValues returns the possible values for the StoredProcedureParameterType const type.
func PossibleStoredProcedureParameterTypeValues() []StoredProcedureParameterType {
	return []StoredProcedureParameterType{
		StoredProcedureParameterTypeBoolean,
		StoredProcedureParameterTypeDate,
		StoredProcedureParameterTypeDecimal,
		StoredProcedureParameterTypeGUID,
		StoredProcedureParameterTypeInt,
		StoredProcedureParameterTypeInt64,
		StoredProcedureParameterTypeString,
	}
}

func (c StoredProcedureParameterType) ToPtr() *StoredProcedureParameterType {
	return &c
}

// SybaseAuthenticationType - AuthenticationType to be used for connection.
type SybaseAuthenticationType string

const (
	SybaseAuthenticationTypeBasic   SybaseAuthenticationType = "Basic"
	SybaseAuthenticationTypeWindows SybaseAuthenticationType = "Windows"
)

// PossibleSybaseAuthenticationTypeValues returns the possible values for the SybaseAuthenticationType const type.
func PossibleSybaseAuthenticationTypeValues() []SybaseAuthenticationType {
	return []SybaseAuthenticationType{
		SybaseAuthenticationTypeBasic,
		SybaseAuthenticationTypeWindows,
	}
}

func (c SybaseAuthenticationType) ToPtr() *SybaseAuthenticationType {
	return &c
}

// TeradataAuthenticationType - AuthenticationType to be used for connection.
type TeradataAuthenticationType string

const (
	TeradataAuthenticationTypeBasic   TeradataAuthenticationType = "Basic"
	TeradataAuthenticationTypeWindows TeradataAuthenticationType = "Windows"
)

// PossibleTeradataAuthenticationTypeValues returns the possible values for the TeradataAuthenticationType const type.
func PossibleTeradataAuthenticationTypeValues() []TeradataAuthenticationType {
	return []TeradataAuthenticationType{
		TeradataAuthenticationTypeBasic,
		TeradataAuthenticationTypeWindows,
	}
}

func (c TeradataAuthenticationType) ToPtr() *TeradataAuthenticationType {
	return &c
}

// TeradataPartitionOption - The partition mechanism that will be used for teradata read in parallel.
type TeradataPartitionOption string

const (
	TeradataPartitionOptionDynamicRange TeradataPartitionOption = "DynamicRange"
	TeradataPartitionOptionHash         TeradataPartitionOption = "Hash"
	TeradataPartitionOptionNone         TeradataPartitionOption = "None"
)

// PossibleTeradataPartitionOptionValues returns the possible values for the TeradataPartitionOption const type.
func PossibleTeradataPartitionOptionValues() []TeradataPartitionOption {
	return []TeradataPartitionOption{
		TeradataPartitionOptionDynamicRange,
		TeradataPartitionOptionHash,
		TeradataPartitionOptionNone,
	}
}

func (c TeradataPartitionOption) ToPtr() *TeradataPartitionOption {
	return &c
}

// TriggerReferenceType - Trigger reference type.
type TriggerReferenceType string

const (
	TriggerReferenceTypeTriggerReference TriggerReferenceType = "TriggerReference"
)

// PossibleTriggerReferenceTypeValues returns the possible values for the TriggerReferenceType const type.
func PossibleTriggerReferenceTypeValues() []TriggerReferenceType {
	return []TriggerReferenceType{
		TriggerReferenceTypeTriggerReference,
	}
}

func (c TriggerReferenceType) ToPtr() *TriggerReferenceType {
	return &c
}

// TriggerRunStatus - Trigger run status.
type TriggerRunStatus string

const (
	TriggerRunStatusFailed     TriggerRunStatus = "Failed"
	TriggerRunStatusInprogress TriggerRunStatus = "Inprogress"
	TriggerRunStatusSucceeded  TriggerRunStatus = "Succeeded"
)

// PossibleTriggerRunStatusValues returns the possible values for the TriggerRunStatus const type.
func PossibleTriggerRunStatusValues() []TriggerRunStatus {
	return []TriggerRunStatus{
		TriggerRunStatusFailed,
		TriggerRunStatusInprogress,
		TriggerRunStatusSucceeded,
	}
}

func (c TriggerRunStatus) ToPtr() *TriggerRunStatus {
	return &c
}

// TriggerRuntimeState - Enumerates possible state of Triggers.
type TriggerRuntimeState string

const (
	TriggerRuntimeStateDisabled TriggerRuntimeState = "Disabled"
	TriggerRuntimeStateStarted  TriggerRuntimeState = "Started"
	TriggerRuntimeStateStopped  TriggerRuntimeState = "Stopped"
)

// PossibleTriggerRuntimeStateValues returns the possible values for the TriggerRuntimeState const type.
func PossibleTriggerRuntimeStateValues() []TriggerRuntimeState {
	return []TriggerRuntimeState{
		TriggerRuntimeStateDisabled,
		TriggerRuntimeStateStarted,
		TriggerRuntimeStateStopped,
	}
}

func (c TriggerRuntimeState) ToPtr() *TriggerRuntimeState {
	return &c
}

// TumblingWindowFrequency - Enumerates possible frequency option for the tumbling window trigger.
type TumblingWindowFrequency string

const (
	TumblingWindowFrequencyHour   TumblingWindowFrequency = "Hour"
	TumblingWindowFrequencyMinute TumblingWindowFrequency = "Minute"
)

// PossibleTumblingWindowFrequencyValues returns the possible values for the TumblingWindowFrequency const type.
func PossibleTumblingWindowFrequencyValues() []TumblingWindowFrequency {
	return []TumblingWindowFrequency{
		TumblingWindowFrequencyHour,
		TumblingWindowFrequencyMinute,
	}
}

func (c TumblingWindowFrequency) ToPtr() *TumblingWindowFrequency {
	return &c
}

// Type - Linked service reference type.
type Type string

const (
	TypeLinkedServiceReference Type = "LinkedServiceReference"
)

// PossibleTypeValues returns the possible values for the Type const type.
func PossibleTypeValues() []Type {
	return []Type{
		TypeLinkedServiceReference,
	}
}

func (c Type) ToPtr() *Type {
	return &c
}

// VariableType - Variable type.
type VariableType string

const (
	VariableTypeArray   VariableType = "Array"
	VariableTypeBool    VariableType = "Bool"
	VariableTypeBoolean VariableType = "Boolean"
	VariableTypeString  VariableType = "String"
)

// PossibleVariableTypeValues returns the possible values for the VariableType const type.
func PossibleVariableTypeValues() []VariableType {
	return []VariableType{
		VariableTypeArray,
		VariableTypeBool,
		VariableTypeBoolean,
		VariableTypeString,
	}
}

func (c VariableType) ToPtr() *VariableType {
	return &c
}

// WebActivityMethod - The list of HTTP methods supported by a WebActivity.
type WebActivityMethod string

const (
	WebActivityMethodDelete WebActivityMethod = "DELETE"
	WebActivityMethodGet    WebActivityMethod = "GET"
	WebActivityMethodPost   WebActivityMethod = "POST"
	WebActivityMethodPut    WebActivityMethod = "PUT"
)

// PossibleWebActivityMethodValues returns the possible values for the WebActivityMethod const type.
func PossibleWebActivityMethodValues() []WebActivityMethod {
	return []WebActivityMethod{
		WebActivityMethodDelete,
		WebActivityMethodGet,
		WebActivityMethodPost,
		WebActivityMethodPut,
	}
}

func (c WebActivityMethod) ToPtr() *WebActivityMethod {
	return &c
}

// WebAuthenticationType - Type of authentication used to connect to the web table source.
type WebAuthenticationType string

const (
	WebAuthenticationTypeAnonymous         WebAuthenticationType = "Anonymous"
	WebAuthenticationTypeBasic             WebAuthenticationType = "Basic"
	WebAuthenticationTypeClientCertificate WebAuthenticationType = "ClientCertificate"
)

// PossibleWebAuthenticationTypeValues returns the possible values for the WebAuthenticationType const type.
func PossibleWebAuthenticationTypeValues() []WebAuthenticationType {
	return []WebAuthenticationType{
		WebAuthenticationTypeAnonymous,
		WebAuthenticationTypeBasic,
		WebAuthenticationTypeClientCertificate,
	}
}

func (c WebAuthenticationType) ToPtr() *WebAuthenticationType {
	return &c
}

// WebHookActivityMethod - The list of HTTP methods supported by a WebHook activity.
type WebHookActivityMethod string

const (
	WebHookActivityMethodPost WebHookActivityMethod = "POST"
)

// PossibleWebHookActivityMethodValues returns the possible values for the WebHookActivityMethod const type.
func PossibleWebHookActivityMethodValues() []WebHookActivityMethod {
	return []WebHookActivityMethod{
		WebHookActivityMethodPost,
	}
}

func (c WebHookActivityMethod) ToPtr() *WebHookActivityMethod {
	return &c
}
