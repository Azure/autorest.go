// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"path"
	"strings"
)

// DatasetOperations contains the methods for the Dataset group.
type DatasetOperations interface {
	// CreateOrUpdateDataset - Creates or updates a dataset.
	CreateOrUpdateDataset(ctx context.Context, datasetName string, dataset DatasetResource, datasetCreateOrUpdateDatasetOptions *DatasetCreateOrUpdateDatasetOptions) (*DatasetResourceResponse, error)
	// DeleteDataset - Deletes a dataset.
	DeleteDataset(ctx context.Context, datasetName string) (*http.Response, error)
	// GetDataset - Gets a dataset.
	GetDataset(ctx context.Context, datasetName string, datasetGetDatasetOptions *DatasetGetDatasetOptions) (*DatasetResourceResponse, error)
	// GetDatasetsByWorkspace - Lists datasets.
	GetDatasetsByWorkspace() (DatasetListResponsePager, error)
}

// datasetOperations implements the DatasetOperations interface.
type datasetOperations struct {
	*Client
}

// CreateOrUpdateDataset - Creates or updates a dataset.
func (client *datasetOperations) CreateOrUpdateDataset(ctx context.Context, datasetName string, dataset DatasetResource, datasetCreateOrUpdateDatasetOptions *DatasetCreateOrUpdateDatasetOptions) (*DatasetResourceResponse, error) {
	req, err := client.createOrUpdateDatasetCreateRequest(datasetName, dataset, datasetCreateOrUpdateDatasetOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createOrUpdateDatasetHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// createOrUpdateDatasetCreateRequest creates the CreateOrUpdateDataset request.
func (client *datasetOperations) createOrUpdateDatasetCreateRequest(datasetName string, dataset DatasetResource, datasetCreateOrUpdateDatasetOptions *DatasetCreateOrUpdateDatasetOptions) (*azcore.Request, error) {
	urlPath := "/datasets/{datasetName}"
	urlPath = strings.ReplaceAll(urlPath, "{datasetName}", url.PathEscape(datasetName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	if datasetCreateOrUpdateDatasetOptions != nil && datasetCreateOrUpdateDatasetOptions.IfMatch != nil {
		req.Header.Set("If-Match", *datasetCreateOrUpdateDatasetOptions.IfMatch)
	}
	return req, req.MarshalAsJSON(dataset)
}

// createOrUpdateDatasetHandleResponse handles the CreateOrUpdateDataset response.
func (client *datasetOperations) createOrUpdateDatasetHandleResponse(resp *azcore.Response) (*DatasetResourceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.createOrUpdateDatasetHandleError(resp)
	}
	result := DatasetResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.DatasetResource)
}

// createOrUpdateDatasetHandleError handles the CreateOrUpdateDataset error response.
func (client *datasetOperations) createOrUpdateDatasetHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DeleteDataset - Deletes a dataset.
func (client *datasetOperations) DeleteDataset(ctx context.Context, datasetName string) (*http.Response, error) {
	req, err := client.deleteDatasetCreateRequest(datasetName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteDatasetHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// deleteDatasetCreateRequest creates the DeleteDataset request.
func (client *datasetOperations) deleteDatasetCreateRequest(datasetName string) (*azcore.Request, error) {
	urlPath := "/datasets/{datasetName}"
	urlPath = strings.ReplaceAll(urlPath, "{datasetName}", url.PathEscape(datasetName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteDatasetHandleResponse handles the DeleteDataset response.
func (client *datasetOperations) deleteDatasetHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.deleteDatasetHandleError(resp)
	}
	return resp.Response, nil
}

// deleteDatasetHandleError handles the DeleteDataset error response.
func (client *datasetOperations) deleteDatasetHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDataset - Gets a dataset.
func (client *datasetOperations) GetDataset(ctx context.Context, datasetName string, datasetGetDatasetOptions *DatasetGetDatasetOptions) (*DatasetResourceResponse, error) {
	req, err := client.getDatasetCreateRequest(datasetName, datasetGetDatasetOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDatasetHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDatasetCreateRequest creates the GetDataset request.
func (client *datasetOperations) getDatasetCreateRequest(datasetName string, datasetGetDatasetOptions *DatasetGetDatasetOptions) (*azcore.Request, error) {
	urlPath := "/datasets/{datasetName}"
	urlPath = strings.ReplaceAll(urlPath, "{datasetName}", url.PathEscape(datasetName))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	if datasetGetDatasetOptions != nil && datasetGetDatasetOptions.IfNoneMatch != nil {
		req.Header.Set("If-None-Match", *datasetGetDatasetOptions.IfNoneMatch)
	}
	return req, nil
}

// getDatasetHandleResponse handles the GetDataset response.
func (client *datasetOperations) getDatasetHandleResponse(resp *azcore.Response) (*DatasetResourceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusNotModified) {
		return nil, client.getDatasetHandleError(resp)
	}
	result := DatasetResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.DatasetResource)
}

// getDatasetHandleError handles the GetDataset error response.
func (client *datasetOperations) getDatasetHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDatasetsByWorkspace - Lists datasets.
func (client *datasetOperations) GetDatasetsByWorkspace() (DatasetListResponsePager, error) {
	req, err := client.getDatasetsByWorkspaceCreateRequest()
	if err != nil {
		return nil, err
	}
	return &datasetListResponsePager{
		pipeline:  client.p,
		request:   req,
		responder: client.getDatasetsByWorkspaceHandleResponse,
		advancer: func(resp *DatasetListResponseResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.DatasetListResponse.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.DatasetListResponse.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// getDatasetsByWorkspaceCreateRequest creates the GetDatasetsByWorkspace request.
func (client *datasetOperations) getDatasetsByWorkspaceCreateRequest() (*azcore.Request, error) {
	urlPath := "/datasets"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDatasetsByWorkspaceHandleResponse handles the GetDatasetsByWorkspace response.
func (client *datasetOperations) getDatasetsByWorkspaceHandleResponse(resp *azcore.Response) (*DatasetListResponseResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDatasetsByWorkspaceHandleError(resp)
	}
	result := DatasetListResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.DatasetListResponse)
}

// getDatasetsByWorkspaceHandleError handles the GetDatasetsByWorkspace error response.
func (client *datasetOperations) getDatasetsByWorkspaceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
