// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

type integrationRuntimesClient struct {
	con *connection
}

// Pipeline returns the pipeline associated with this client.
func (client *integrationRuntimesClient) Pipeline() azcore.Pipeline {
	return client.con.Pipeline()
}

// Get - Get Integration Runtime
func (client *integrationRuntimesClient) Get(ctx context.Context, integrationRuntimeName string, options *IntegrationRuntimesGetOptions) (*IntegrationRuntimeResourceResponse, error) {
	req, err := client.GetCreateRequest(ctx, integrationRuntimeName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetHandleError(resp)
	}
	result, err := client.GetHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetCreateRequest creates the Get request.
func (client *integrationRuntimesClient) GetCreateRequest(ctx context.Context, integrationRuntimeName string, options *IntegrationRuntimesGetOptions) (*azcore.Request, error) {
	urlPath := "/integrationRuntimes/{integrationRuntimeName}"
	urlPath = strings.ReplaceAll(urlPath, "{integrationRuntimeName}", url.PathEscape(integrationRuntimeName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetHandleResponse handles the Get response.
func (client *integrationRuntimesClient) GetHandleResponse(resp *azcore.Response) (*IntegrationRuntimeResourceResponse, error) {
	result := IntegrationRuntimeResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.IntegrationRuntimeResource)
}

// GetHandleError handles the Get error response.
func (client *integrationRuntimesClient) GetHandleError(resp *azcore.Response) error {
	var err ErrorContract
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// List - List Integration Runtimes
func (client *integrationRuntimesClient) List(ctx context.Context, options *IntegrationRuntimesListOptions) (*IntegrationRuntimeListResponseResponse, error) {
	req, err := client.ListCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.ListHandleError(resp)
	}
	result, err := client.ListHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ListCreateRequest creates the List request.
func (client *integrationRuntimesClient) ListCreateRequest(ctx context.Context, options *IntegrationRuntimesListOptions) (*azcore.Request, error) {
	urlPath := "/integrationRuntimes"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// ListHandleResponse handles the List response.
func (client *integrationRuntimesClient) ListHandleResponse(resp *azcore.Response) (*IntegrationRuntimeListResponseResponse, error) {
	result := IntegrationRuntimeListResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.IntegrationRuntimeListResponse)
}

// ListHandleError handles the List error response.
func (client *integrationRuntimesClient) ListHandleError(resp *azcore.Response) error {
	var err ErrorContract
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}
