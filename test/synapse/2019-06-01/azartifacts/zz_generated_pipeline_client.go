//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

type pipelineClient struct {
	endpoint string
	pl       runtime.Pipeline
}

// newPipelineClient creates a new instance of pipelineClient with the specified values.
// endpoint - The workspace development endpoint, for example https://myworkspace.dev.azuresynapse.net.
// pl - the pipeline used for sending requests and handling responses.
func newPipelineClient(endpoint string, pl runtime.Pipeline) *pipelineClient {
	client := &pipelineClient{
		endpoint: endpoint,
		pl:       pl,
	}
	return client
}

// BeginCreateOrUpdatePipeline - Creates or updates a pipeline.
// If the operation fails it returns an *azcore.ResponseError type.
// pipelineName - The pipeline name.
// pipeline - Pipeline resource definition.
// options - pipelineClientBeginCreateOrUpdatePipelineOptions contains the optional parameters for the pipelineClient.BeginCreateOrUpdatePipeline
// method.
func (client *pipelineClient) BeginCreateOrUpdatePipeline(ctx context.Context, pipelineName string, pipeline PipelineResource, options *pipelineClientBeginCreateOrUpdatePipelineOptions) (pipelineClientCreateOrUpdatePipelinePollerResponse, error) {
	resp, err := client.createOrUpdatePipeline(ctx, pipelineName, pipeline, options)
	if err != nil {
		return pipelineClientCreateOrUpdatePipelinePollerResponse{}, err
	}
	result := pipelineClientCreateOrUpdatePipelinePollerResponse{}
	pt, err := runtime.NewPoller("pipelineClient.CreateOrUpdatePipeline", resp, client.pl)
	if err != nil {
		return pipelineClientCreateOrUpdatePipelinePollerResponse{}, err
	}
	result.Poller = &pipelineClientCreateOrUpdatePipelinePoller{
		pt: pt,
	}
	return result, nil
}

// CreateOrUpdatePipeline - Creates or updates a pipeline.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *pipelineClient) createOrUpdatePipeline(ctx context.Context, pipelineName string, pipeline PipelineResource, options *pipelineClientBeginCreateOrUpdatePipelineOptions) (*http.Response, error) {
	req, err := client.createOrUpdatePipelineCreateRequest(ctx, pipelineName, pipeline, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// createOrUpdatePipelineCreateRequest creates the CreateOrUpdatePipeline request.
func (client *pipelineClient) createOrUpdatePipelineCreateRequest(ctx context.Context, pipelineName string, pipeline PipelineResource, options *pipelineClientBeginCreateOrUpdatePipelineOptions) (*policy.Request, error) {
	urlPath := "/pipelines/{pipelineName}"
	if pipelineName == "" {
		return nil, errors.New("parameter pipelineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{pipelineName}", url.PathEscape(pipelineName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	if options != nil && options.IfMatch != nil {
		req.Raw().Header.Set("If-Match", *options.IfMatch)
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, pipeline)
}

// CreatePipelineRun - Creates a run of a pipeline.
// If the operation fails it returns an *azcore.ResponseError type.
// pipelineName - The pipeline name.
// options - pipelineClientCreatePipelineRunOptions contains the optional parameters for the pipelineClient.CreatePipelineRun
// method.
func (client *pipelineClient) CreatePipelineRun(ctx context.Context, pipelineName string, options *pipelineClientCreatePipelineRunOptions) (pipelineClientCreatePipelineRunResponse, error) {
	req, err := client.createPipelineRunCreateRequest(ctx, pipelineName, options)
	if err != nil {
		return pipelineClientCreatePipelineRunResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return pipelineClientCreatePipelineRunResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return pipelineClientCreatePipelineRunResponse{}, runtime.NewResponseError(resp)
	}
	return client.createPipelineRunHandleResponse(resp)
}

// createPipelineRunCreateRequest creates the CreatePipelineRun request.
func (client *pipelineClient) createPipelineRunCreateRequest(ctx context.Context, pipelineName string, options *pipelineClientCreatePipelineRunOptions) (*policy.Request, error) {
	urlPath := "/pipelines/{pipelineName}/createRun"
	if pipelineName == "" {
		return nil, errors.New("parameter pipelineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{pipelineName}", url.PathEscape(pipelineName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-06-01-preview")
	if options != nil && options.ReferencePipelineRunID != nil {
		reqQP.Set("referencePipelineRunId", *options.ReferencePipelineRunID)
	}
	if options != nil && options.IsRecovery != nil {
		reqQP.Set("isRecovery", strconv.FormatBool(*options.IsRecovery))
	}
	if options != nil && options.StartActivityName != nil {
		reqQP.Set("startActivityName", *options.StartActivityName)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Parameters != nil {
		return req, runtime.MarshalAsJSON(req, options.Parameters)
	}
	return req, nil
}

// createPipelineRunHandleResponse handles the CreatePipelineRun response.
func (client *pipelineClient) createPipelineRunHandleResponse(resp *http.Response) (pipelineClientCreatePipelineRunResponse, error) {
	result := pipelineClientCreatePipelineRunResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CreateRunResponse); err != nil {
		return pipelineClientCreatePipelineRunResponse{}, err
	}
	return result, nil
}

// BeginDeletePipeline - Deletes a pipeline.
// If the operation fails it returns an *azcore.ResponseError type.
// pipelineName - The pipeline name.
// options - pipelineClientBeginDeletePipelineOptions contains the optional parameters for the pipelineClient.BeginDeletePipeline
// method.
func (client *pipelineClient) BeginDeletePipeline(ctx context.Context, pipelineName string, options *pipelineClientBeginDeletePipelineOptions) (pipelineClientDeletePipelinePollerResponse, error) {
	resp, err := client.deletePipeline(ctx, pipelineName, options)
	if err != nil {
		return pipelineClientDeletePipelinePollerResponse{}, err
	}
	result := pipelineClientDeletePipelinePollerResponse{}
	pt, err := runtime.NewPoller("pipelineClient.DeletePipeline", resp, client.pl)
	if err != nil {
		return pipelineClientDeletePipelinePollerResponse{}, err
	}
	result.Poller = &pipelineClientDeletePipelinePoller{
		pt: pt,
	}
	return result, nil
}

// DeletePipeline - Deletes a pipeline.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *pipelineClient) deletePipeline(ctx context.Context, pipelineName string, options *pipelineClientBeginDeletePipelineOptions) (*http.Response, error) {
	req, err := client.deletePipelineCreateRequest(ctx, pipelineName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// deletePipelineCreateRequest creates the DeletePipeline request.
func (client *pipelineClient) deletePipelineCreateRequest(ctx context.Context, pipelineName string, options *pipelineClientBeginDeletePipelineOptions) (*policy.Request, error) {
	urlPath := "/pipelines/{pipelineName}"
	if pipelineName == "" {
		return nil, errors.New("parameter pipelineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{pipelineName}", url.PathEscape(pipelineName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// GetPipeline - Gets a pipeline.
// If the operation fails it returns an *azcore.ResponseError type.
// pipelineName - The pipeline name.
// options - pipelineClientGetPipelineOptions contains the optional parameters for the pipelineClient.GetPipeline method.
func (client *pipelineClient) GetPipeline(ctx context.Context, pipelineName string, options *pipelineClientGetPipelineOptions) (pipelineClientGetPipelineResponse, error) {
	req, err := client.getPipelineCreateRequest(ctx, pipelineName, options)
	if err != nil {
		return pipelineClientGetPipelineResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return pipelineClientGetPipelineResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNotModified) {
		return pipelineClientGetPipelineResponse{}, runtime.NewResponseError(resp)
	}
	return client.getPipelineHandleResponse(resp)
}

// getPipelineCreateRequest creates the GetPipeline request.
func (client *pipelineClient) getPipelineCreateRequest(ctx context.Context, pipelineName string, options *pipelineClientGetPipelineOptions) (*policy.Request, error) {
	urlPath := "/pipelines/{pipelineName}"
	if pipelineName == "" {
		return nil, errors.New("parameter pipelineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{pipelineName}", url.PathEscape(pipelineName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	if options != nil && options.IfNoneMatch != nil {
		req.Raw().Header.Set("If-None-Match", *options.IfNoneMatch)
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getPipelineHandleResponse handles the GetPipeline response.
func (client *pipelineClient) getPipelineHandleResponse(resp *http.Response) (pipelineClientGetPipelineResponse, error) {
	result := pipelineClientGetPipelineResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PipelineResource); err != nil {
		return pipelineClientGetPipelineResponse{}, err
	}
	return result, nil
}

// GetPipelinesByWorkspace - Lists pipelines.
// If the operation fails it returns an *azcore.ResponseError type.
// options - pipelineClientGetPipelinesByWorkspaceOptions contains the optional parameters for the pipelineClient.GetPipelinesByWorkspace
// method.
func (client *pipelineClient) GetPipelinesByWorkspace(options *pipelineClientGetPipelinesByWorkspaceOptions) *pipelineClientGetPipelinesByWorkspacePager {
	return &pipelineClientGetPipelinesByWorkspacePager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.getPipelinesByWorkspaceCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp pipelineClientGetPipelinesByWorkspaceResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.PipelineListResponse.NextLink)
		},
	}
}

// getPipelinesByWorkspaceCreateRequest creates the GetPipelinesByWorkspace request.
func (client *pipelineClient) getPipelinesByWorkspaceCreateRequest(ctx context.Context, options *pipelineClientGetPipelinesByWorkspaceOptions) (*policy.Request, error) {
	urlPath := "/pipelines"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getPipelinesByWorkspaceHandleResponse handles the GetPipelinesByWorkspace response.
func (client *pipelineClient) getPipelinesByWorkspaceHandleResponse(resp *http.Response) (pipelineClientGetPipelinesByWorkspaceResponse, error) {
	result := pipelineClientGetPipelinesByWorkspaceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PipelineListResponse); err != nil {
		return pipelineClientGetPipelinesByWorkspaceResponse{}, err
	}
	return result, nil
}

// BeginRenamePipeline - Renames a pipeline.
// If the operation fails it returns an *azcore.ResponseError type.
// pipelineName - The pipeline name.
// request - proposed new name.
// options - pipelineClientBeginRenamePipelineOptions contains the optional parameters for the pipelineClient.BeginRenamePipeline
// method.
func (client *pipelineClient) BeginRenamePipeline(ctx context.Context, pipelineName string, request ArtifactRenameRequest, options *pipelineClientBeginRenamePipelineOptions) (pipelineClientRenamePipelinePollerResponse, error) {
	resp, err := client.renamePipeline(ctx, pipelineName, request, options)
	if err != nil {
		return pipelineClientRenamePipelinePollerResponse{}, err
	}
	result := pipelineClientRenamePipelinePollerResponse{}
	pt, err := runtime.NewPoller("pipelineClient.RenamePipeline", resp, client.pl)
	if err != nil {
		return pipelineClientRenamePipelinePollerResponse{}, err
	}
	result.Poller = &pipelineClientRenamePipelinePoller{
		pt: pt,
	}
	return result, nil
}

// RenamePipeline - Renames a pipeline.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *pipelineClient) renamePipeline(ctx context.Context, pipelineName string, request ArtifactRenameRequest, options *pipelineClientBeginRenamePipelineOptions) (*http.Response, error) {
	req, err := client.renamePipelineCreateRequest(ctx, pipelineName, request, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// renamePipelineCreateRequest creates the RenamePipeline request.
func (client *pipelineClient) renamePipelineCreateRequest(ctx context.Context, pipelineName string, request ArtifactRenameRequest, options *pipelineClientBeginRenamePipelineOptions) (*policy.Request, error) {
	urlPath := "/pipelines/{pipelineName}/rename"
	if pipelineName == "" {
		return nil, errors.New("parameter pipelineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{pipelineName}", url.PathEscape(pipelineName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, request)
}
