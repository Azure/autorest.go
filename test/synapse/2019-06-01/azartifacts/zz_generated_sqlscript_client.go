//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

type sqlScriptClient struct {
	endpoint string
	pl       runtime.Pipeline
}

// newSQLScriptClient creates a new instance of sqlScriptClient with the specified values.
// endpoint - The workspace development endpoint, for example https://myworkspace.dev.azuresynapse.net.
// pl - the pipeline used for sending requests and handling responses.
func newSQLScriptClient(endpoint string, pl runtime.Pipeline) *sqlScriptClient {
	client := &sqlScriptClient{
		endpoint: endpoint,
		pl:       pl,
	}
	return client
}

// BeginCreateOrUpdateSQLScript - Creates or updates a Sql Script.
// If the operation fails it returns an *azcore.ResponseError type.
// sqlScriptName - The sql script name.
// sqlScript - Sql Script resource definition.
// options - sqlScriptClientBeginCreateOrUpdateSQLScriptOptions contains the optional parameters for the sqlScriptClient.BeginCreateOrUpdateSQLScript
// method.
func (client *sqlScriptClient) BeginCreateOrUpdateSQLScript(ctx context.Context, sqlScriptName string, sqlScript SQLScriptResource, options *sqlScriptClientBeginCreateOrUpdateSQLScriptOptions) (sqlScriptClientCreateOrUpdateSQLScriptPollerResponse, error) {
	resp, err := client.createOrUpdateSQLScript(ctx, sqlScriptName, sqlScript, options)
	if err != nil {
		return sqlScriptClientCreateOrUpdateSQLScriptPollerResponse{}, err
	}
	result := sqlScriptClientCreateOrUpdateSQLScriptPollerResponse{}
	pt, err := runtime.NewPoller("sqlScriptClient.CreateOrUpdateSQLScript", resp, client.pl)
	if err != nil {
		return sqlScriptClientCreateOrUpdateSQLScriptPollerResponse{}, err
	}
	result.Poller = &sqlScriptClientCreateOrUpdateSQLScriptPoller{
		pt: pt,
	}
	return result, nil
}

// CreateOrUpdateSQLScript - Creates or updates a Sql Script.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *sqlScriptClient) createOrUpdateSQLScript(ctx context.Context, sqlScriptName string, sqlScript SQLScriptResource, options *sqlScriptClientBeginCreateOrUpdateSQLScriptOptions) (*http.Response, error) {
	req, err := client.createOrUpdateSQLScriptCreateRequest(ctx, sqlScriptName, sqlScript, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// createOrUpdateSQLScriptCreateRequest creates the CreateOrUpdateSQLScript request.
func (client *sqlScriptClient) createOrUpdateSQLScriptCreateRequest(ctx context.Context, sqlScriptName string, sqlScript SQLScriptResource, options *sqlScriptClientBeginCreateOrUpdateSQLScriptOptions) (*policy.Request, error) {
	urlPath := "/sqlScripts/{sqlScriptName}"
	if sqlScriptName == "" {
		return nil, errors.New("parameter sqlScriptName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlScriptName}", url.PathEscape(sqlScriptName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	if options != nil && options.IfMatch != nil {
		req.Raw().Header.Set("If-Match", *options.IfMatch)
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, sqlScript)
}

// BeginDeleteSQLScript - Deletes a Sql Script.
// If the operation fails it returns an *azcore.ResponseError type.
// sqlScriptName - The sql script name.
// options - sqlScriptClientBeginDeleteSQLScriptOptions contains the optional parameters for the sqlScriptClient.BeginDeleteSQLScript
// method.
func (client *sqlScriptClient) BeginDeleteSQLScript(ctx context.Context, sqlScriptName string, options *sqlScriptClientBeginDeleteSQLScriptOptions) (sqlScriptClientDeleteSQLScriptPollerResponse, error) {
	resp, err := client.deleteSQLScript(ctx, sqlScriptName, options)
	if err != nil {
		return sqlScriptClientDeleteSQLScriptPollerResponse{}, err
	}
	result := sqlScriptClientDeleteSQLScriptPollerResponse{}
	pt, err := runtime.NewPoller("sqlScriptClient.DeleteSQLScript", resp, client.pl)
	if err != nil {
		return sqlScriptClientDeleteSQLScriptPollerResponse{}, err
	}
	result.Poller = &sqlScriptClientDeleteSQLScriptPoller{
		pt: pt,
	}
	return result, nil
}

// DeleteSQLScript - Deletes a Sql Script.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *sqlScriptClient) deleteSQLScript(ctx context.Context, sqlScriptName string, options *sqlScriptClientBeginDeleteSQLScriptOptions) (*http.Response, error) {
	req, err := client.deleteSQLScriptCreateRequest(ctx, sqlScriptName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// deleteSQLScriptCreateRequest creates the DeleteSQLScript request.
func (client *sqlScriptClient) deleteSQLScriptCreateRequest(ctx context.Context, sqlScriptName string, options *sqlScriptClientBeginDeleteSQLScriptOptions) (*policy.Request, error) {
	urlPath := "/sqlScripts/{sqlScriptName}"
	if sqlScriptName == "" {
		return nil, errors.New("parameter sqlScriptName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlScriptName}", url.PathEscape(sqlScriptName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// GetSQLScript - Gets a sql script.
// If the operation fails it returns an *azcore.ResponseError type.
// sqlScriptName - The sql script name.
// options - sqlScriptClientGetSQLScriptOptions contains the optional parameters for the sqlScriptClient.GetSQLScript method.
func (client *sqlScriptClient) GetSQLScript(ctx context.Context, sqlScriptName string, options *sqlScriptClientGetSQLScriptOptions) (sqlScriptClientGetSQLScriptResponse, error) {
	req, err := client.getSQLScriptCreateRequest(ctx, sqlScriptName, options)
	if err != nil {
		return sqlScriptClientGetSQLScriptResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return sqlScriptClientGetSQLScriptResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNotModified) {
		return sqlScriptClientGetSQLScriptResponse{}, runtime.NewResponseError(resp)
	}
	return client.getSQLScriptHandleResponse(resp)
}

// getSQLScriptCreateRequest creates the GetSQLScript request.
func (client *sqlScriptClient) getSQLScriptCreateRequest(ctx context.Context, sqlScriptName string, options *sqlScriptClientGetSQLScriptOptions) (*policy.Request, error) {
	urlPath := "/sqlScripts/{sqlScriptName}"
	if sqlScriptName == "" {
		return nil, errors.New("parameter sqlScriptName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlScriptName}", url.PathEscape(sqlScriptName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	if options != nil && options.IfNoneMatch != nil {
		req.Raw().Header.Set("If-None-Match", *options.IfNoneMatch)
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getSQLScriptHandleResponse handles the GetSQLScript response.
func (client *sqlScriptClient) getSQLScriptHandleResponse(resp *http.Response) (sqlScriptClientGetSQLScriptResponse, error) {
	result := sqlScriptClientGetSQLScriptResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLScriptResource); err != nil {
		return sqlScriptClientGetSQLScriptResponse{}, err
	}
	return result, nil
}

// GetSQLScriptsByWorkspace - Lists sql scripts.
// If the operation fails it returns an *azcore.ResponseError type.
// options - sqlScriptClientGetSQLScriptsByWorkspaceOptions contains the optional parameters for the sqlScriptClient.GetSQLScriptsByWorkspace
// method.
func (client *sqlScriptClient) GetSQLScriptsByWorkspace(options *sqlScriptClientGetSQLScriptsByWorkspaceOptions) *sqlScriptClientGetSQLScriptsByWorkspacePager {
	return &sqlScriptClientGetSQLScriptsByWorkspacePager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.getSQLScriptsByWorkspaceCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp sqlScriptClientGetSQLScriptsByWorkspaceResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.SQLScriptsListResponse.NextLink)
		},
	}
}

// getSQLScriptsByWorkspaceCreateRequest creates the GetSQLScriptsByWorkspace request.
func (client *sqlScriptClient) getSQLScriptsByWorkspaceCreateRequest(ctx context.Context, options *sqlScriptClientGetSQLScriptsByWorkspaceOptions) (*policy.Request, error) {
	urlPath := "/sqlScripts"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getSQLScriptsByWorkspaceHandleResponse handles the GetSQLScriptsByWorkspace response.
func (client *sqlScriptClient) getSQLScriptsByWorkspaceHandleResponse(resp *http.Response) (sqlScriptClientGetSQLScriptsByWorkspaceResponse, error) {
	result := sqlScriptClientGetSQLScriptsByWorkspaceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SQLScriptsListResponse); err != nil {
		return sqlScriptClientGetSQLScriptsByWorkspaceResponse{}, err
	}
	return result, nil
}

// BeginRenameSQLScript - Renames a sqlScript.
// If the operation fails it returns an *azcore.ResponseError type.
// sqlScriptName - The sql script name.
// request - proposed new name.
// options - sqlScriptClientBeginRenameSQLScriptOptions contains the optional parameters for the sqlScriptClient.BeginRenameSQLScript
// method.
func (client *sqlScriptClient) BeginRenameSQLScript(ctx context.Context, sqlScriptName string, request ArtifactRenameRequest, options *sqlScriptClientBeginRenameSQLScriptOptions) (sqlScriptClientRenameSQLScriptPollerResponse, error) {
	resp, err := client.renameSQLScript(ctx, sqlScriptName, request, options)
	if err != nil {
		return sqlScriptClientRenameSQLScriptPollerResponse{}, err
	}
	result := sqlScriptClientRenameSQLScriptPollerResponse{}
	pt, err := runtime.NewPoller("sqlScriptClient.RenameSQLScript", resp, client.pl)
	if err != nil {
		return sqlScriptClientRenameSQLScriptPollerResponse{}, err
	}
	result.Poller = &sqlScriptClientRenameSQLScriptPoller{
		pt: pt,
	}
	return result, nil
}

// RenameSQLScript - Renames a sqlScript.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *sqlScriptClient) renameSQLScript(ctx context.Context, sqlScriptName string, request ArtifactRenameRequest, options *sqlScriptClientBeginRenameSQLScriptOptions) (*http.Response, error) {
	req, err := client.renameSQLScriptCreateRequest(ctx, sqlScriptName, request, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// renameSQLScriptCreateRequest creates the RenameSQLScript request.
func (client *sqlScriptClient) renameSQLScriptCreateRequest(ctx context.Context, sqlScriptName string, request ArtifactRenameRequest, options *sqlScriptClientBeginRenameSQLScriptOptions) (*policy.Request, error) {
	urlPath := "/sqlScripts/{sqlScriptName}/rename"
	if sqlScriptName == "" {
		return nil, errors.New("parameter sqlScriptName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sqlScriptName}", url.PathEscape(sqlScriptName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, request)
}
