// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// TriggerRunOperations contains the methods for the TriggerRun group.
type TriggerRunOperations interface {
	// CancelTriggerInstance - Cancel single trigger instance by runId.
	CancelTriggerInstance(ctx context.Context, triggerName string, runId string) (*http.Response, error)
	// QueryTriggerRunsByWorkspace - Query trigger runs.
	QueryTriggerRunsByWorkspace(ctx context.Context, filterParameters RunFilterParameters) (*TriggerRunsQueryResponseResponse, error)
	// RerunTriggerInstance - Rerun single trigger instance by runId.
	RerunTriggerInstance(ctx context.Context, triggerName string, runId string) (*http.Response, error)
}

// TriggerRunClient implements the TriggerRunOperations interface.
// Don't use this type directly, use NewTriggerRunClient() instead.
type TriggerRunClient struct {
	*Client
}

// NewTriggerRunClient creates a new instance of TriggerRunClient with the specified values.
func NewTriggerRunClient(c *Client) TriggerRunOperations {
	return &TriggerRunClient{Client: c}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *TriggerRunClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// CancelTriggerInstance - Cancel single trigger instance by runId.
func (client *TriggerRunClient) CancelTriggerInstance(ctx context.Context, triggerName string, runId string) (*http.Response, error) {
	req, err := client.CancelTriggerInstanceCreateRequest(ctx, triggerName, runId)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.CancelTriggerInstanceHandleError(resp)
	}
	return resp.Response, nil
}

// CancelTriggerInstanceCreateRequest creates the CancelTriggerInstance request.
func (client *TriggerRunClient) CancelTriggerInstanceCreateRequest(ctx context.Context, triggerName string, runId string) (*azcore.Request, error) {
	urlPath := "/triggers/{triggerName}/triggerRuns/{runId}/cancel"
	urlPath = strings.ReplaceAll(urlPath, "{triggerName}", url.PathEscape(triggerName))
	urlPath = strings.ReplaceAll(urlPath, "{runId}", url.PathEscape(runId))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// CancelTriggerInstanceHandleError handles the CancelTriggerInstance error response.
func (client *TriggerRunClient) CancelTriggerInstanceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// QueryTriggerRunsByWorkspace - Query trigger runs.
func (client *TriggerRunClient) QueryTriggerRunsByWorkspace(ctx context.Context, filterParameters RunFilterParameters) (*TriggerRunsQueryResponseResponse, error) {
	req, err := client.QueryTriggerRunsByWorkspaceCreateRequest(ctx, filterParameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.QueryTriggerRunsByWorkspaceHandleError(resp)
	}
	result, err := client.QueryTriggerRunsByWorkspaceHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// QueryTriggerRunsByWorkspaceCreateRequest creates the QueryTriggerRunsByWorkspace request.
func (client *TriggerRunClient) QueryTriggerRunsByWorkspaceCreateRequest(ctx context.Context, filterParameters RunFilterParameters) (*azcore.Request, error) {
	urlPath := "/queryTriggerRuns"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(filterParameters)
}

// QueryTriggerRunsByWorkspaceHandleResponse handles the QueryTriggerRunsByWorkspace response.
func (client *TriggerRunClient) QueryTriggerRunsByWorkspaceHandleResponse(resp *azcore.Response) (*TriggerRunsQueryResponseResponse, error) {
	result := TriggerRunsQueryResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.TriggerRunsQueryResponse)
}

// QueryTriggerRunsByWorkspaceHandleError handles the QueryTriggerRunsByWorkspace error response.
func (client *TriggerRunClient) QueryTriggerRunsByWorkspaceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// RerunTriggerInstance - Rerun single trigger instance by runId.
func (client *TriggerRunClient) RerunTriggerInstance(ctx context.Context, triggerName string, runId string) (*http.Response, error) {
	req, err := client.RerunTriggerInstanceCreateRequest(ctx, triggerName, runId)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.RerunTriggerInstanceHandleError(resp)
	}
	return resp.Response, nil
}

// RerunTriggerInstanceCreateRequest creates the RerunTriggerInstance request.
func (client *TriggerRunClient) RerunTriggerInstanceCreateRequest(ctx context.Context, triggerName string, runId string) (*azcore.Request, error) {
	urlPath := "/triggers/{triggerName}/triggerRuns/{runId}/rerun"
	urlPath = strings.ReplaceAll(urlPath, "{triggerName}", url.PathEscape(triggerName))
	urlPath = strings.ReplaceAll(urlPath, "{runId}", url.PathEscape(runId))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01-preview")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// RerunTriggerInstanceHandleError handles the RerunTriggerInstance error response.
func (client *TriggerRunClient) RerunTriggerInstanceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
