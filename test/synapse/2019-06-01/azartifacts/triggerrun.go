// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"path"
	"strings"
)

// TriggerRunOperations contains the methods for the TriggerRun group.
type TriggerRunOperations interface {
	// CancelTriggerInstance - Cancel single trigger instance by runId.
	CancelTriggerInstance(ctx context.Context, triggerName string, runId string) (*http.Response, error)
	// QueryTriggerRunsByWorkspace - Query trigger runs.
	QueryTriggerRunsByWorkspace(ctx context.Context, filterParameters RunFilterParameters) (*TriggerRunsQueryResponseResponse, error)
	// RerunTriggerInstance - Rerun single trigger instance by runId.
	RerunTriggerInstance(ctx context.Context, triggerName string, runId string) (*http.Response, error)
}

// triggerRunOperations implements the TriggerRunOperations interface.
type triggerRunOperations struct {
	*Client
}

// CancelTriggerInstance - Cancel single trigger instance by runId.
func (client *triggerRunOperations) CancelTriggerInstance(ctx context.Context, triggerName string, runId string) (*http.Response, error) {
	req, err := client.cancelTriggerInstanceCreateRequest(triggerName, runId)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.cancelTriggerInstanceHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// cancelTriggerInstanceCreateRequest creates the CancelTriggerInstance request.
func (client *triggerRunOperations) cancelTriggerInstanceCreateRequest(triggerName string, runId string) (*azcore.Request, error) {
	urlPath := "/triggers/{triggerName}/triggerRuns/{runId}/cancel"
	urlPath = strings.ReplaceAll(urlPath, "{triggerName}", url.PathEscape(triggerName))
	urlPath = strings.ReplaceAll(urlPath, "{runId}", url.PathEscape(runId))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// cancelTriggerInstanceHandleResponse handles the CancelTriggerInstance response.
func (client *triggerRunOperations) cancelTriggerInstanceHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.cancelTriggerInstanceHandleError(resp)
	}
	return resp.Response, nil
}

// cancelTriggerInstanceHandleError handles the CancelTriggerInstance error response.
func (client *triggerRunOperations) cancelTriggerInstanceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// QueryTriggerRunsByWorkspace - Query trigger runs.
func (client *triggerRunOperations) QueryTriggerRunsByWorkspace(ctx context.Context, filterParameters RunFilterParameters) (*TriggerRunsQueryResponseResponse, error) {
	req, err := client.queryTriggerRunsByWorkspaceCreateRequest(filterParameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.queryTriggerRunsByWorkspaceHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// queryTriggerRunsByWorkspaceCreateRequest creates the QueryTriggerRunsByWorkspace request.
func (client *triggerRunOperations) queryTriggerRunsByWorkspaceCreateRequest(filterParameters RunFilterParameters) (*azcore.Request, error) {
	urlPath := "/queryTriggerRuns"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(filterParameters)
}

// queryTriggerRunsByWorkspaceHandleResponse handles the QueryTriggerRunsByWorkspace response.
func (client *triggerRunOperations) queryTriggerRunsByWorkspaceHandleResponse(resp *azcore.Response) (*TriggerRunsQueryResponseResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.queryTriggerRunsByWorkspaceHandleError(resp)
	}
	result := TriggerRunsQueryResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.TriggerRunsQueryResponse)
}

// queryTriggerRunsByWorkspaceHandleError handles the QueryTriggerRunsByWorkspace error response.
func (client *triggerRunOperations) queryTriggerRunsByWorkspaceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// RerunTriggerInstance - Rerun single trigger instance by runId.
func (client *triggerRunOperations) RerunTriggerInstance(ctx context.Context, triggerName string, runId string) (*http.Response, error) {
	req, err := client.rerunTriggerInstanceCreateRequest(triggerName, runId)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.rerunTriggerInstanceHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// rerunTriggerInstanceCreateRequest creates the RerunTriggerInstance request.
func (client *triggerRunOperations) rerunTriggerInstanceCreateRequest(triggerName string, runId string) (*azcore.Request, error) {
	urlPath := "/triggers/{triggerName}/triggerRuns/{runId}/rerun"
	urlPath = strings.ReplaceAll(urlPath, "{triggerName}", url.PathEscape(triggerName))
	urlPath = strings.ReplaceAll(urlPath, "{runId}", url.PathEscape(runId))
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// rerunTriggerInstanceHandleResponse handles the RerunTriggerInstance response.
func (client *triggerRunOperations) rerunTriggerInstanceHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.rerunTriggerInstanceHandleError(resp)
	}
	return resp.Response, nil
}

// rerunTriggerInstanceHandleError handles the RerunTriggerInstance error response.
func (client *triggerRunOperations) rerunTriggerInstanceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
