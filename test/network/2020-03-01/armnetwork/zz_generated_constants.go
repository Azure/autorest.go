//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armnetwork

const (
	moduleName    = "armnetwork"
	moduleVersion = "v0.1.0"
)

// Access - Access to be allowed or denied.
type Access string

const (
	AccessAllow Access = "Allow"
	AccessDeny  Access = "Deny"
)

// PossibleAccessValues returns the possible values for the Access const type.
func PossibleAccessValues() []Access {
	return []Access{
		AccessAllow,
		AccessDeny,
	}
}

// ApplicationGatewayBackendHealthServerHealth - Health of backend server.
type ApplicationGatewayBackendHealthServerHealth string

const (
	ApplicationGatewayBackendHealthServerHealthDown     ApplicationGatewayBackendHealthServerHealth = "Down"
	ApplicationGatewayBackendHealthServerHealthDraining ApplicationGatewayBackendHealthServerHealth = "Draining"
	ApplicationGatewayBackendHealthServerHealthPartial  ApplicationGatewayBackendHealthServerHealth = "Partial"
	ApplicationGatewayBackendHealthServerHealthUnknown  ApplicationGatewayBackendHealthServerHealth = "Unknown"
	ApplicationGatewayBackendHealthServerHealthUp       ApplicationGatewayBackendHealthServerHealth = "Up"
)

// PossibleApplicationGatewayBackendHealthServerHealthValues returns the possible values for the ApplicationGatewayBackendHealthServerHealth const type.
func PossibleApplicationGatewayBackendHealthServerHealthValues() []ApplicationGatewayBackendHealthServerHealth {
	return []ApplicationGatewayBackendHealthServerHealth{
		ApplicationGatewayBackendHealthServerHealthDown,
		ApplicationGatewayBackendHealthServerHealthDraining,
		ApplicationGatewayBackendHealthServerHealthPartial,
		ApplicationGatewayBackendHealthServerHealthUnknown,
		ApplicationGatewayBackendHealthServerHealthUp,
	}
}

// ApplicationGatewayCookieBasedAffinity - Cookie based affinity.
type ApplicationGatewayCookieBasedAffinity string

const (
	ApplicationGatewayCookieBasedAffinityDisabled ApplicationGatewayCookieBasedAffinity = "Disabled"
	ApplicationGatewayCookieBasedAffinityEnabled  ApplicationGatewayCookieBasedAffinity = "Enabled"
)

// PossibleApplicationGatewayCookieBasedAffinityValues returns the possible values for the ApplicationGatewayCookieBasedAffinity const type.
func PossibleApplicationGatewayCookieBasedAffinityValues() []ApplicationGatewayCookieBasedAffinity {
	return []ApplicationGatewayCookieBasedAffinity{
		ApplicationGatewayCookieBasedAffinityDisabled,
		ApplicationGatewayCookieBasedAffinityEnabled,
	}
}

// ApplicationGatewayCustomErrorStatusCode - Status code of the application gateway customer error.
type ApplicationGatewayCustomErrorStatusCode string

const (
	ApplicationGatewayCustomErrorStatusCodeHTTPStatus403 ApplicationGatewayCustomErrorStatusCode = "HttpStatus403"
	ApplicationGatewayCustomErrorStatusCodeHTTPStatus502 ApplicationGatewayCustomErrorStatusCode = "HttpStatus502"
)

// PossibleApplicationGatewayCustomErrorStatusCodeValues returns the possible values for the ApplicationGatewayCustomErrorStatusCode const type.
func PossibleApplicationGatewayCustomErrorStatusCodeValues() []ApplicationGatewayCustomErrorStatusCode {
	return []ApplicationGatewayCustomErrorStatusCode{
		ApplicationGatewayCustomErrorStatusCodeHTTPStatus403,
		ApplicationGatewayCustomErrorStatusCodeHTTPStatus502,
	}
}

// ApplicationGatewayFirewallMode - Web application firewall mode.
type ApplicationGatewayFirewallMode string

const (
	ApplicationGatewayFirewallModeDetection  ApplicationGatewayFirewallMode = "Detection"
	ApplicationGatewayFirewallModePrevention ApplicationGatewayFirewallMode = "Prevention"
)

// PossibleApplicationGatewayFirewallModeValues returns the possible values for the ApplicationGatewayFirewallMode const type.
func PossibleApplicationGatewayFirewallModeValues() []ApplicationGatewayFirewallMode {
	return []ApplicationGatewayFirewallMode{
		ApplicationGatewayFirewallModeDetection,
		ApplicationGatewayFirewallModePrevention,
	}
}

// ApplicationGatewayOperationalState - Operational state of the application gateway resource.
type ApplicationGatewayOperationalState string

const (
	ApplicationGatewayOperationalStateRunning  ApplicationGatewayOperationalState = "Running"
	ApplicationGatewayOperationalStateStarting ApplicationGatewayOperationalState = "Starting"
	ApplicationGatewayOperationalStateStopped  ApplicationGatewayOperationalState = "Stopped"
	ApplicationGatewayOperationalStateStopping ApplicationGatewayOperationalState = "Stopping"
)

// PossibleApplicationGatewayOperationalStateValues returns the possible values for the ApplicationGatewayOperationalState const type.
func PossibleApplicationGatewayOperationalStateValues() []ApplicationGatewayOperationalState {
	return []ApplicationGatewayOperationalState{
		ApplicationGatewayOperationalStateRunning,
		ApplicationGatewayOperationalStateStarting,
		ApplicationGatewayOperationalStateStopped,
		ApplicationGatewayOperationalStateStopping,
	}
}

// ApplicationGatewayProtocol - Application Gateway protocol.
type ApplicationGatewayProtocol string

const (
	ApplicationGatewayProtocolHTTP  ApplicationGatewayProtocol = "Http"
	ApplicationGatewayProtocolHTTPS ApplicationGatewayProtocol = "Https"
)

// PossibleApplicationGatewayProtocolValues returns the possible values for the ApplicationGatewayProtocol const type.
func PossibleApplicationGatewayProtocolValues() []ApplicationGatewayProtocol {
	return []ApplicationGatewayProtocol{
		ApplicationGatewayProtocolHTTP,
		ApplicationGatewayProtocolHTTPS,
	}
}

// ApplicationGatewayRedirectType - Redirect type enum.
type ApplicationGatewayRedirectType string

const (
	ApplicationGatewayRedirectTypeFound     ApplicationGatewayRedirectType = "Found"
	ApplicationGatewayRedirectTypePermanent ApplicationGatewayRedirectType = "Permanent"
	ApplicationGatewayRedirectTypeSeeOther  ApplicationGatewayRedirectType = "SeeOther"
	ApplicationGatewayRedirectTypeTemporary ApplicationGatewayRedirectType = "Temporary"
)

// PossibleApplicationGatewayRedirectTypeValues returns the possible values for the ApplicationGatewayRedirectType const type.
func PossibleApplicationGatewayRedirectTypeValues() []ApplicationGatewayRedirectType {
	return []ApplicationGatewayRedirectType{
		ApplicationGatewayRedirectTypeFound,
		ApplicationGatewayRedirectTypePermanent,
		ApplicationGatewayRedirectTypeSeeOther,
		ApplicationGatewayRedirectTypeTemporary,
	}
}

// ApplicationGatewayRequestRoutingRuleType - Rule type.
type ApplicationGatewayRequestRoutingRuleType string

const (
	ApplicationGatewayRequestRoutingRuleTypeBasic            ApplicationGatewayRequestRoutingRuleType = "Basic"
	ApplicationGatewayRequestRoutingRuleTypePathBasedRouting ApplicationGatewayRequestRoutingRuleType = "PathBasedRouting"
)

// PossibleApplicationGatewayRequestRoutingRuleTypeValues returns the possible values for the ApplicationGatewayRequestRoutingRuleType const type.
func PossibleApplicationGatewayRequestRoutingRuleTypeValues() []ApplicationGatewayRequestRoutingRuleType {
	return []ApplicationGatewayRequestRoutingRuleType{
		ApplicationGatewayRequestRoutingRuleTypeBasic,
		ApplicationGatewayRequestRoutingRuleTypePathBasedRouting,
	}
}

// ApplicationGatewaySKUName - Name of an application gateway SKU.
type ApplicationGatewaySKUName string

const (
	ApplicationGatewaySKUNameStandardLarge  ApplicationGatewaySKUName = "Standard_Large"
	ApplicationGatewaySKUNameStandardMedium ApplicationGatewaySKUName = "Standard_Medium"
	ApplicationGatewaySKUNameStandardSmall  ApplicationGatewaySKUName = "Standard_Small"
	ApplicationGatewaySKUNameStandardV2     ApplicationGatewaySKUName = "Standard_v2"
	ApplicationGatewaySKUNameWAFLarge       ApplicationGatewaySKUName = "WAF_Large"
	ApplicationGatewaySKUNameWAFMedium      ApplicationGatewaySKUName = "WAF_Medium"
	ApplicationGatewaySKUNameWAFV2          ApplicationGatewaySKUName = "WAF_v2"
)

// PossibleApplicationGatewaySKUNameValues returns the possible values for the ApplicationGatewaySKUName const type.
func PossibleApplicationGatewaySKUNameValues() []ApplicationGatewaySKUName {
	return []ApplicationGatewaySKUName{
		ApplicationGatewaySKUNameStandardLarge,
		ApplicationGatewaySKUNameStandardMedium,
		ApplicationGatewaySKUNameStandardSmall,
		ApplicationGatewaySKUNameStandardV2,
		ApplicationGatewaySKUNameWAFLarge,
		ApplicationGatewaySKUNameWAFMedium,
		ApplicationGatewaySKUNameWAFV2,
	}
}

// ApplicationGatewaySSLCipherSuite - Ssl cipher suites enums.
type ApplicationGatewaySSLCipherSuite string

const (
	ApplicationGatewaySSLCipherSuiteTLSDHEDSSWITH3DESEDECBCSHA       ApplicationGatewaySSLCipherSuite = "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA"
	ApplicationGatewaySSLCipherSuiteTLSDHEDSSWITHAES128CBCSHA        ApplicationGatewaySSLCipherSuite = "TLS_DHE_DSS_WITH_AES_128_CBC_SHA"
	ApplicationGatewaySSLCipherSuiteTLSDHEDSSWITHAES128CBCSHA256     ApplicationGatewaySSLCipherSuite = "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256"
	ApplicationGatewaySSLCipherSuiteTLSDHEDSSWITHAES256CBCSHA        ApplicationGatewaySSLCipherSuite = "TLS_DHE_DSS_WITH_AES_256_CBC_SHA"
	ApplicationGatewaySSLCipherSuiteTLSDHEDSSWITHAES256CBCSHA256     ApplicationGatewaySSLCipherSuite = "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256"
	ApplicationGatewaySSLCipherSuiteTLSDHERSAWITHAES128CBCSHA        ApplicationGatewaySSLCipherSuite = "TLS_DHE_RSA_WITH_AES_128_CBC_SHA"
	ApplicationGatewaySSLCipherSuiteTLSDHERSAWITHAES128GCMSHA256     ApplicationGatewaySSLCipherSuite = "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256"
	ApplicationGatewaySSLCipherSuiteTLSDHERSAWITHAES256CBCSHA        ApplicationGatewaySSLCipherSuite = "TLS_DHE_RSA_WITH_AES_256_CBC_SHA"
	ApplicationGatewaySSLCipherSuiteTLSDHERSAWITHAES256GCMSHA384     ApplicationGatewaySSLCipherSuite = "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384"
	ApplicationGatewaySSLCipherSuiteTLSECDHEECDSAWITHAES128CBCSHA    ApplicationGatewaySSLCipherSuite = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA"
	ApplicationGatewaySSLCipherSuiteTLSECDHEECDSAWITHAES128CBCSHA256 ApplicationGatewaySSLCipherSuite = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256"
	ApplicationGatewaySSLCipherSuiteTLSECDHEECDSAWITHAES128GCMSHA256 ApplicationGatewaySSLCipherSuite = "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"
	ApplicationGatewaySSLCipherSuiteTLSECDHEECDSAWITHAES256CBCSHA    ApplicationGatewaySSLCipherSuite = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA"
	ApplicationGatewaySSLCipherSuiteTLSECDHEECDSAWITHAES256CBCSHA384 ApplicationGatewaySSLCipherSuite = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384"
	ApplicationGatewaySSLCipherSuiteTLSECDHEECDSAWITHAES256GCMSHA384 ApplicationGatewaySSLCipherSuite = "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"
	ApplicationGatewaySSLCipherSuiteTLSECDHERSAWITHAES128CBCSHA      ApplicationGatewaySSLCipherSuite = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"
	ApplicationGatewaySSLCipherSuiteTLSECDHERSAWITHAES128CBCSHA256   ApplicationGatewaySSLCipherSuite = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"
	ApplicationGatewaySSLCipherSuiteTLSECDHERSAWITHAES128GCMSHA256   ApplicationGatewaySSLCipherSuite = "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
	ApplicationGatewaySSLCipherSuiteTLSECDHERSAWITHAES256CBCSHA      ApplicationGatewaySSLCipherSuite = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"
	ApplicationGatewaySSLCipherSuiteTLSECDHERSAWITHAES256CBCSHA384   ApplicationGatewaySSLCipherSuite = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384"
	ApplicationGatewaySSLCipherSuiteTLSECDHERSAWITHAES256GCMSHA384   ApplicationGatewaySSLCipherSuite = "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
	ApplicationGatewaySSLCipherSuiteTLSRSAWITH3DESEDECBCSHA          ApplicationGatewaySSLCipherSuite = "TLS_RSA_WITH_3DES_EDE_CBC_SHA"
	ApplicationGatewaySSLCipherSuiteTLSRSAWITHAES128CBCSHA           ApplicationGatewaySSLCipherSuite = "TLS_RSA_WITH_AES_128_CBC_SHA"
	ApplicationGatewaySSLCipherSuiteTLSRSAWITHAES128CBCSHA256        ApplicationGatewaySSLCipherSuite = "TLS_RSA_WITH_AES_128_CBC_SHA256"
	ApplicationGatewaySSLCipherSuiteTLSRSAWITHAES128GCMSHA256        ApplicationGatewaySSLCipherSuite = "TLS_RSA_WITH_AES_128_GCM_SHA256"
	ApplicationGatewaySSLCipherSuiteTLSRSAWITHAES256CBCSHA           ApplicationGatewaySSLCipherSuite = "TLS_RSA_WITH_AES_256_CBC_SHA"
	ApplicationGatewaySSLCipherSuiteTLSRSAWITHAES256CBCSHA256        ApplicationGatewaySSLCipherSuite = "TLS_RSA_WITH_AES_256_CBC_SHA256"
	ApplicationGatewaySSLCipherSuiteTLSRSAWITHAES256GCMSHA384        ApplicationGatewaySSLCipherSuite = "TLS_RSA_WITH_AES_256_GCM_SHA384"
)

// PossibleApplicationGatewaySSLCipherSuiteValues returns the possible values for the ApplicationGatewaySSLCipherSuite const type.
func PossibleApplicationGatewaySSLCipherSuiteValues() []ApplicationGatewaySSLCipherSuite {
	return []ApplicationGatewaySSLCipherSuite{
		ApplicationGatewaySSLCipherSuiteTLSDHEDSSWITH3DESEDECBCSHA,
		ApplicationGatewaySSLCipherSuiteTLSDHEDSSWITHAES128CBCSHA,
		ApplicationGatewaySSLCipherSuiteTLSDHEDSSWITHAES128CBCSHA256,
		ApplicationGatewaySSLCipherSuiteTLSDHEDSSWITHAES256CBCSHA,
		ApplicationGatewaySSLCipherSuiteTLSDHEDSSWITHAES256CBCSHA256,
		ApplicationGatewaySSLCipherSuiteTLSDHERSAWITHAES128CBCSHA,
		ApplicationGatewaySSLCipherSuiteTLSDHERSAWITHAES128GCMSHA256,
		ApplicationGatewaySSLCipherSuiteTLSDHERSAWITHAES256CBCSHA,
		ApplicationGatewaySSLCipherSuiteTLSDHERSAWITHAES256GCMSHA384,
		ApplicationGatewaySSLCipherSuiteTLSECDHEECDSAWITHAES128CBCSHA,
		ApplicationGatewaySSLCipherSuiteTLSECDHEECDSAWITHAES128CBCSHA256,
		ApplicationGatewaySSLCipherSuiteTLSECDHEECDSAWITHAES128GCMSHA256,
		ApplicationGatewaySSLCipherSuiteTLSECDHEECDSAWITHAES256CBCSHA,
		ApplicationGatewaySSLCipherSuiteTLSECDHEECDSAWITHAES256CBCSHA384,
		ApplicationGatewaySSLCipherSuiteTLSECDHEECDSAWITHAES256GCMSHA384,
		ApplicationGatewaySSLCipherSuiteTLSECDHERSAWITHAES128CBCSHA,
		ApplicationGatewaySSLCipherSuiteTLSECDHERSAWITHAES128CBCSHA256,
		ApplicationGatewaySSLCipherSuiteTLSECDHERSAWITHAES128GCMSHA256,
		ApplicationGatewaySSLCipherSuiteTLSECDHERSAWITHAES256CBCSHA,
		ApplicationGatewaySSLCipherSuiteTLSECDHERSAWITHAES256CBCSHA384,
		ApplicationGatewaySSLCipherSuiteTLSECDHERSAWITHAES256GCMSHA384,
		ApplicationGatewaySSLCipherSuiteTLSRSAWITH3DESEDECBCSHA,
		ApplicationGatewaySSLCipherSuiteTLSRSAWITHAES128CBCSHA,
		ApplicationGatewaySSLCipherSuiteTLSRSAWITHAES128CBCSHA256,
		ApplicationGatewaySSLCipherSuiteTLSRSAWITHAES128GCMSHA256,
		ApplicationGatewaySSLCipherSuiteTLSRSAWITHAES256CBCSHA,
		ApplicationGatewaySSLCipherSuiteTLSRSAWITHAES256CBCSHA256,
		ApplicationGatewaySSLCipherSuiteTLSRSAWITHAES256GCMSHA384,
	}
}

// ApplicationGatewaySSLPolicyName - Ssl predefined policy name enums.
type ApplicationGatewaySSLPolicyName string

const (
	ApplicationGatewaySSLPolicyNameAppGwSSLPolicy20150501  ApplicationGatewaySSLPolicyName = "AppGwSslPolicy20150501"
	ApplicationGatewaySSLPolicyNameAppGwSSLPolicy20170401  ApplicationGatewaySSLPolicyName = "AppGwSslPolicy20170401"
	ApplicationGatewaySSLPolicyNameAppGwSSLPolicy20170401S ApplicationGatewaySSLPolicyName = "AppGwSslPolicy20170401S"
)

// PossibleApplicationGatewaySSLPolicyNameValues returns the possible values for the ApplicationGatewaySSLPolicyName const type.
func PossibleApplicationGatewaySSLPolicyNameValues() []ApplicationGatewaySSLPolicyName {
	return []ApplicationGatewaySSLPolicyName{
		ApplicationGatewaySSLPolicyNameAppGwSSLPolicy20150501,
		ApplicationGatewaySSLPolicyNameAppGwSSLPolicy20170401,
		ApplicationGatewaySSLPolicyNameAppGwSSLPolicy20170401S,
	}
}

// ApplicationGatewaySSLPolicyType - Type of Ssl Policy.
type ApplicationGatewaySSLPolicyType string

const (
	ApplicationGatewaySSLPolicyTypeCustom     ApplicationGatewaySSLPolicyType = "Custom"
	ApplicationGatewaySSLPolicyTypePredefined ApplicationGatewaySSLPolicyType = "Predefined"
)

// PossibleApplicationGatewaySSLPolicyTypeValues returns the possible values for the ApplicationGatewaySSLPolicyType const type.
func PossibleApplicationGatewaySSLPolicyTypeValues() []ApplicationGatewaySSLPolicyType {
	return []ApplicationGatewaySSLPolicyType{
		ApplicationGatewaySSLPolicyTypeCustom,
		ApplicationGatewaySSLPolicyTypePredefined,
	}
}

// ApplicationGatewaySSLProtocol - Ssl protocol enums.
type ApplicationGatewaySSLProtocol string

const (
	ApplicationGatewaySSLProtocolTLSv10 ApplicationGatewaySSLProtocol = "TLSv1_0"
	ApplicationGatewaySSLProtocolTLSv11 ApplicationGatewaySSLProtocol = "TLSv1_1"
	ApplicationGatewaySSLProtocolTLSv12 ApplicationGatewaySSLProtocol = "TLSv1_2"
)

// PossibleApplicationGatewaySSLProtocolValues returns the possible values for the ApplicationGatewaySSLProtocol const type.
func PossibleApplicationGatewaySSLProtocolValues() []ApplicationGatewaySSLProtocol {
	return []ApplicationGatewaySSLProtocol{
		ApplicationGatewaySSLProtocolTLSv10,
		ApplicationGatewaySSLProtocolTLSv11,
		ApplicationGatewaySSLProtocolTLSv12,
	}
}

// ApplicationGatewayTier - Tier of an application gateway.
type ApplicationGatewayTier string

const (
	ApplicationGatewayTierStandard   ApplicationGatewayTier = "Standard"
	ApplicationGatewayTierStandardV2 ApplicationGatewayTier = "Standard_v2"
	ApplicationGatewayTierWAF        ApplicationGatewayTier = "WAF"
	ApplicationGatewayTierWAFV2      ApplicationGatewayTier = "WAF_v2"
)

// PossibleApplicationGatewayTierValues returns the possible values for the ApplicationGatewayTier const type.
func PossibleApplicationGatewayTierValues() []ApplicationGatewayTier {
	return []ApplicationGatewayTier{
		ApplicationGatewayTierStandard,
		ApplicationGatewayTierStandardV2,
		ApplicationGatewayTierWAF,
		ApplicationGatewayTierWAFV2,
	}
}

// AssociationType - The association type of the child resource to the parent resource.
type AssociationType string

const (
	AssociationTypeAssociated AssociationType = "Associated"
	AssociationTypeContains   AssociationType = "Contains"
)

// PossibleAssociationTypeValues returns the possible values for the AssociationType const type.
func PossibleAssociationTypeValues() []AssociationType {
	return []AssociationType{
		AssociationTypeAssociated,
		AssociationTypeContains,
	}
}

// AuthenticationMethod - VPN client authentication method.
type AuthenticationMethod string

const (
	AuthenticationMethodEAPMSCHAPv2 AuthenticationMethod = "EAPMSCHAPv2"
	AuthenticationMethodEAPTLS      AuthenticationMethod = "EAPTLS"
)

// PossibleAuthenticationMethodValues returns the possible values for the AuthenticationMethod const type.
func PossibleAuthenticationMethodValues() []AuthenticationMethod {
	return []AuthenticationMethod{
		AuthenticationMethodEAPMSCHAPv2,
		AuthenticationMethodEAPTLS,
	}
}

// AuthorizationUseStatus - The authorization use status.
type AuthorizationUseStatus string

const (
	AuthorizationUseStatusAvailable AuthorizationUseStatus = "Available"
	AuthorizationUseStatusInUse     AuthorizationUseStatus = "InUse"
)

// PossibleAuthorizationUseStatusValues returns the possible values for the AuthorizationUseStatus const type.
func PossibleAuthorizationUseStatusValues() []AuthorizationUseStatus {
	return []AuthorizationUseStatus{
		AuthorizationUseStatusAvailable,
		AuthorizationUseStatusInUse,
	}
}

// AzureFirewallApplicationRuleProtocolType - The protocol type of a Application Rule resource.
type AzureFirewallApplicationRuleProtocolType string

const (
	AzureFirewallApplicationRuleProtocolTypeHTTP  AzureFirewallApplicationRuleProtocolType = "Http"
	AzureFirewallApplicationRuleProtocolTypeHTTPS AzureFirewallApplicationRuleProtocolType = "Https"
	AzureFirewallApplicationRuleProtocolTypeMssql AzureFirewallApplicationRuleProtocolType = "Mssql"
)

// PossibleAzureFirewallApplicationRuleProtocolTypeValues returns the possible values for the AzureFirewallApplicationRuleProtocolType const type.
func PossibleAzureFirewallApplicationRuleProtocolTypeValues() []AzureFirewallApplicationRuleProtocolType {
	return []AzureFirewallApplicationRuleProtocolType{
		AzureFirewallApplicationRuleProtocolTypeHTTP,
		AzureFirewallApplicationRuleProtocolTypeHTTPS,
		AzureFirewallApplicationRuleProtocolTypeMssql,
	}
}

// AzureFirewallNatRCActionType - The action type of a NAT rule collection.
type AzureFirewallNatRCActionType string

const (
	AzureFirewallNatRCActionTypeDnat AzureFirewallNatRCActionType = "Dnat"
	AzureFirewallNatRCActionTypeSnat AzureFirewallNatRCActionType = "Snat"
)

// PossibleAzureFirewallNatRCActionTypeValues returns the possible values for the AzureFirewallNatRCActionType const type.
func PossibleAzureFirewallNatRCActionTypeValues() []AzureFirewallNatRCActionType {
	return []AzureFirewallNatRCActionType{
		AzureFirewallNatRCActionTypeDnat,
		AzureFirewallNatRCActionTypeSnat,
	}
}

// AzureFirewallNetworkRuleProtocol - The protocol of a Network Rule resource.
type AzureFirewallNetworkRuleProtocol string

const (
	AzureFirewallNetworkRuleProtocolAny  AzureFirewallNetworkRuleProtocol = "Any"
	AzureFirewallNetworkRuleProtocolICMP AzureFirewallNetworkRuleProtocol = "ICMP"
	AzureFirewallNetworkRuleProtocolTCP  AzureFirewallNetworkRuleProtocol = "TCP"
	AzureFirewallNetworkRuleProtocolUDP  AzureFirewallNetworkRuleProtocol = "UDP"
)

// PossibleAzureFirewallNetworkRuleProtocolValues returns the possible values for the AzureFirewallNetworkRuleProtocol const type.
func PossibleAzureFirewallNetworkRuleProtocolValues() []AzureFirewallNetworkRuleProtocol {
	return []AzureFirewallNetworkRuleProtocol{
		AzureFirewallNetworkRuleProtocolAny,
		AzureFirewallNetworkRuleProtocolICMP,
		AzureFirewallNetworkRuleProtocolTCP,
		AzureFirewallNetworkRuleProtocolUDP,
	}
}

// AzureFirewallRCActionType - The action type of a rule collection.
type AzureFirewallRCActionType string

const (
	AzureFirewallRCActionTypeAllow AzureFirewallRCActionType = "Allow"
	AzureFirewallRCActionTypeDeny  AzureFirewallRCActionType = "Deny"
)

// PossibleAzureFirewallRCActionTypeValues returns the possible values for the AzureFirewallRCActionType const type.
func PossibleAzureFirewallRCActionTypeValues() []AzureFirewallRCActionType {
	return []AzureFirewallRCActionType{
		AzureFirewallRCActionTypeAllow,
		AzureFirewallRCActionTypeDeny,
	}
}

// AzureFirewallSKUName - Name of an Azure Firewall SKU.
type AzureFirewallSKUName string

const (
	AzureFirewallSKUNameAZFWHub  AzureFirewallSKUName = "AZFW_Hub"
	AzureFirewallSKUNameAZFWVnet AzureFirewallSKUName = "AZFW_VNet"
)

// PossibleAzureFirewallSKUNameValues returns the possible values for the AzureFirewallSKUName const type.
func PossibleAzureFirewallSKUNameValues() []AzureFirewallSKUName {
	return []AzureFirewallSKUName{
		AzureFirewallSKUNameAZFWHub,
		AzureFirewallSKUNameAZFWVnet,
	}
}

// AzureFirewallSKUTier - Tier of an Azure Firewall.
type AzureFirewallSKUTier string

const (
	AzureFirewallSKUTierStandard AzureFirewallSKUTier = "Standard"
)

// PossibleAzureFirewallSKUTierValues returns the possible values for the AzureFirewallSKUTier const type.
func PossibleAzureFirewallSKUTierValues() []AzureFirewallSKUTier {
	return []AzureFirewallSKUTier{
		AzureFirewallSKUTierStandard,
	}
}

// AzureFirewallThreatIntelMode - The operation mode for Threat Intel.
type AzureFirewallThreatIntelMode string

const (
	AzureFirewallThreatIntelModeAlert AzureFirewallThreatIntelMode = "Alert"
	AzureFirewallThreatIntelModeDeny  AzureFirewallThreatIntelMode = "Deny"
	AzureFirewallThreatIntelModeOff   AzureFirewallThreatIntelMode = "Off"
)

// PossibleAzureFirewallThreatIntelModeValues returns the possible values for the AzureFirewallThreatIntelMode const type.
func PossibleAzureFirewallThreatIntelModeValues() []AzureFirewallThreatIntelMode {
	return []AzureFirewallThreatIntelMode{
		AzureFirewallThreatIntelModeAlert,
		AzureFirewallThreatIntelModeDeny,
		AzureFirewallThreatIntelModeOff,
	}
}

// BastionConnectProtocol - The protocol used to connect to the target.
type BastionConnectProtocol string

const (
	BastionConnectProtocolRDP BastionConnectProtocol = "RDP"
	BastionConnectProtocolSSH BastionConnectProtocol = "SSH"
)

// PossibleBastionConnectProtocolValues returns the possible values for the BastionConnectProtocol const type.
func PossibleBastionConnectProtocolValues() []BastionConnectProtocol {
	return []BastionConnectProtocol{
		BastionConnectProtocolRDP,
		BastionConnectProtocolSSH,
	}
}

// BgpPeerState - The BGP peer state.
type BgpPeerState string

const (
	BgpPeerStateConnected  BgpPeerState = "Connected"
	BgpPeerStateConnecting BgpPeerState = "Connecting"
	BgpPeerStateIdle       BgpPeerState = "Idle"
	BgpPeerStateStopped    BgpPeerState = "Stopped"
	BgpPeerStateUnknown    BgpPeerState = "Unknown"
)

// PossibleBgpPeerStateValues returns the possible values for the BgpPeerState const type.
func PossibleBgpPeerStateValues() []BgpPeerState {
	return []BgpPeerState{
		BgpPeerStateConnected,
		BgpPeerStateConnecting,
		BgpPeerStateIdle,
		BgpPeerStateStopped,
		BgpPeerStateUnknown,
	}
}

// CircuitConnectionStatus - Express Route Circuit connection state.
type CircuitConnectionStatus string

const (
	CircuitConnectionStatusConnected    CircuitConnectionStatus = "Connected"
	CircuitConnectionStatusConnecting   CircuitConnectionStatus = "Connecting"
	CircuitConnectionStatusDisconnected CircuitConnectionStatus = "Disconnected"
)

// PossibleCircuitConnectionStatusValues returns the possible values for the CircuitConnectionStatus const type.
func PossibleCircuitConnectionStatusValues() []CircuitConnectionStatus {
	return []CircuitConnectionStatus{
		CircuitConnectionStatusConnected,
		CircuitConnectionStatusConnecting,
		CircuitConnectionStatusDisconnected,
	}
}

// ConnectionMonitorEndpointFilterItemType - The type of item included in the filter. Currently only 'AgentAddress' is supported.
type ConnectionMonitorEndpointFilterItemType string

const (
	ConnectionMonitorEndpointFilterItemTypeAgentAddress ConnectionMonitorEndpointFilterItemType = "AgentAddress"
)

// PossibleConnectionMonitorEndpointFilterItemTypeValues returns the possible values for the ConnectionMonitorEndpointFilterItemType const type.
func PossibleConnectionMonitorEndpointFilterItemTypeValues() []ConnectionMonitorEndpointFilterItemType {
	return []ConnectionMonitorEndpointFilterItemType{
		ConnectionMonitorEndpointFilterItemTypeAgentAddress,
	}
}

// ConnectionMonitorEndpointFilterType - The behavior of the endpoint filter. Currently only 'Include' is supported.
type ConnectionMonitorEndpointFilterType string

const (
	ConnectionMonitorEndpointFilterTypeInclude ConnectionMonitorEndpointFilterType = "Include"
)

// PossibleConnectionMonitorEndpointFilterTypeValues returns the possible values for the ConnectionMonitorEndpointFilterType const type.
func PossibleConnectionMonitorEndpointFilterTypeValues() []ConnectionMonitorEndpointFilterType {
	return []ConnectionMonitorEndpointFilterType{
		ConnectionMonitorEndpointFilterTypeInclude,
	}
}

// ConnectionMonitorSourceStatus - Status of connection monitor source.
type ConnectionMonitorSourceStatus string

const (
	ConnectionMonitorSourceStatusActive   ConnectionMonitorSourceStatus = "Active"
	ConnectionMonitorSourceStatusInactive ConnectionMonitorSourceStatus = "Inactive"
	ConnectionMonitorSourceStatusUnknown  ConnectionMonitorSourceStatus = "Unknown"
)

// PossibleConnectionMonitorSourceStatusValues returns the possible values for the ConnectionMonitorSourceStatus const type.
func PossibleConnectionMonitorSourceStatusValues() []ConnectionMonitorSourceStatus {
	return []ConnectionMonitorSourceStatus{
		ConnectionMonitorSourceStatusActive,
		ConnectionMonitorSourceStatusInactive,
		ConnectionMonitorSourceStatusUnknown,
	}
}

// ConnectionMonitorTestConfigurationProtocol - The protocol to use in test evaluation.
type ConnectionMonitorTestConfigurationProtocol string

const (
	ConnectionMonitorTestConfigurationProtocolHTTP ConnectionMonitorTestConfigurationProtocol = "Http"
	ConnectionMonitorTestConfigurationProtocolIcmp ConnectionMonitorTestConfigurationProtocol = "Icmp"
	ConnectionMonitorTestConfigurationProtocolTCP  ConnectionMonitorTestConfigurationProtocol = "Tcp"
)

// PossibleConnectionMonitorTestConfigurationProtocolValues returns the possible values for the ConnectionMonitorTestConfigurationProtocol const type.
func PossibleConnectionMonitorTestConfigurationProtocolValues() []ConnectionMonitorTestConfigurationProtocol {
	return []ConnectionMonitorTestConfigurationProtocol{
		ConnectionMonitorTestConfigurationProtocolHTTP,
		ConnectionMonitorTestConfigurationProtocolIcmp,
		ConnectionMonitorTestConfigurationProtocolTCP,
	}
}

// ConnectionMonitorType - Type of connection monitor.
type ConnectionMonitorType string

const (
	ConnectionMonitorTypeMultiEndpoint           ConnectionMonitorType = "MultiEndpoint"
	ConnectionMonitorTypeSingleSourceDestination ConnectionMonitorType = "SingleSourceDestination"
)

// PossibleConnectionMonitorTypeValues returns the possible values for the ConnectionMonitorType const type.
func PossibleConnectionMonitorTypeValues() []ConnectionMonitorType {
	return []ConnectionMonitorType{
		ConnectionMonitorTypeMultiEndpoint,
		ConnectionMonitorTypeSingleSourceDestination,
	}
}

// ConnectionState - The connection state.
type ConnectionState string

const (
	ConnectionStateReachable   ConnectionState = "Reachable"
	ConnectionStateUnknown     ConnectionState = "Unknown"
	ConnectionStateUnreachable ConnectionState = "Unreachable"
)

// PossibleConnectionStateValues returns the possible values for the ConnectionState const type.
func PossibleConnectionStateValues() []ConnectionState {
	return []ConnectionState{
		ConnectionStateReachable,
		ConnectionStateUnknown,
		ConnectionStateUnreachable,
	}
}

// ConnectionStatus - The connection status.
type ConnectionStatus string

const (
	ConnectionStatusConnected    ConnectionStatus = "Connected"
	ConnectionStatusDegraded     ConnectionStatus = "Degraded"
	ConnectionStatusDisconnected ConnectionStatus = "Disconnected"
	ConnectionStatusUnknown      ConnectionStatus = "Unknown"
)

// PossibleConnectionStatusValues returns the possible values for the ConnectionStatus const type.
func PossibleConnectionStatusValues() []ConnectionStatus {
	return []ConnectionStatus{
		ConnectionStatusConnected,
		ConnectionStatusDegraded,
		ConnectionStatusDisconnected,
		ConnectionStatusUnknown,
	}
}

// DdosCustomPolicyProtocol - The protocol for which the DDoS protection policy is being customized.
type DdosCustomPolicyProtocol string

const (
	DdosCustomPolicyProtocolSyn DdosCustomPolicyProtocol = "Syn"
	DdosCustomPolicyProtocolTCP DdosCustomPolicyProtocol = "Tcp"
	DdosCustomPolicyProtocolUDP DdosCustomPolicyProtocol = "Udp"
)

// PossibleDdosCustomPolicyProtocolValues returns the possible values for the DdosCustomPolicyProtocol const type.
func PossibleDdosCustomPolicyProtocolValues() []DdosCustomPolicyProtocol {
	return []DdosCustomPolicyProtocol{
		DdosCustomPolicyProtocolSyn,
		DdosCustomPolicyProtocolTCP,
		DdosCustomPolicyProtocolUDP,
	}
}

// DdosCustomPolicyTriggerSensitivityOverride - The customized DDoS protection trigger rate sensitivity degrees. High: Trigger
// rate set with most sensitivity w.r.t. normal traffic. Default: Trigger rate set with moderate sensitivity w.r.t. normal
// traffic. Low: Trigger rate set with less sensitivity w.r.t. normal traffic. Relaxed: Trigger rate set with least sensitivity
// w.r.t. normal traffic.
type DdosCustomPolicyTriggerSensitivityOverride string

const (
	DdosCustomPolicyTriggerSensitivityOverrideDefault DdosCustomPolicyTriggerSensitivityOverride = "Default"
	DdosCustomPolicyTriggerSensitivityOverrideHigh    DdosCustomPolicyTriggerSensitivityOverride = "High"
	DdosCustomPolicyTriggerSensitivityOverrideLow     DdosCustomPolicyTriggerSensitivityOverride = "Low"
	DdosCustomPolicyTriggerSensitivityOverrideRelaxed DdosCustomPolicyTriggerSensitivityOverride = "Relaxed"
)

// PossibleDdosCustomPolicyTriggerSensitivityOverrideValues returns the possible values for the DdosCustomPolicyTriggerSensitivityOverride const type.
func PossibleDdosCustomPolicyTriggerSensitivityOverrideValues() []DdosCustomPolicyTriggerSensitivityOverride {
	return []DdosCustomPolicyTriggerSensitivityOverride{
		DdosCustomPolicyTriggerSensitivityOverrideDefault,
		DdosCustomPolicyTriggerSensitivityOverrideHigh,
		DdosCustomPolicyTriggerSensitivityOverrideLow,
		DdosCustomPolicyTriggerSensitivityOverrideRelaxed,
	}
}

// DdosSettingsProtectionCoverage - The DDoS protection policy customizability of the public IP. Only standard coverage will
// have the ability to be customized.
type DdosSettingsProtectionCoverage string

const (
	DdosSettingsProtectionCoverageBasic    DdosSettingsProtectionCoverage = "Basic"
	DdosSettingsProtectionCoverageStandard DdosSettingsProtectionCoverage = "Standard"
)

// PossibleDdosSettingsProtectionCoverageValues returns the possible values for the DdosSettingsProtectionCoverage const type.
func PossibleDdosSettingsProtectionCoverageValues() []DdosSettingsProtectionCoverage {
	return []DdosSettingsProtectionCoverage{
		DdosSettingsProtectionCoverageBasic,
		DdosSettingsProtectionCoverageStandard,
	}
}

// DhGroup - The DH Groups used in IKE Phase 1 for initial SA.
type DhGroup string

const (
	DhGroupDHGroup1    DhGroup = "DHGroup1"
	DhGroupDHGroup14   DhGroup = "DHGroup14"
	DhGroupDHGroup2    DhGroup = "DHGroup2"
	DhGroupDHGroup2048 DhGroup = "DHGroup2048"
	DhGroupDHGroup24   DhGroup = "DHGroup24"
	DhGroupECP256      DhGroup = "ECP256"
	DhGroupECP384      DhGroup = "ECP384"
	DhGroupNone        DhGroup = "None"
)

// PossibleDhGroupValues returns the possible values for the DhGroup const type.
func PossibleDhGroupValues() []DhGroup {
	return []DhGroup{
		DhGroupDHGroup1,
		DhGroupDHGroup14,
		DhGroupDHGroup2,
		DhGroupDHGroup2048,
		DhGroupDHGroup24,
		DhGroupECP256,
		DhGroupECP384,
		DhGroupNone,
	}
}

// Direction - The direction of the traffic.
type Direction string

const (
	DirectionInbound  Direction = "Inbound"
	DirectionOutbound Direction = "Outbound"
)

// PossibleDirectionValues returns the possible values for the Direction const type.
func PossibleDirectionValues() []Direction {
	return []Direction{
		DirectionInbound,
		DirectionOutbound,
	}
}

// EffectiveRouteSource - Who created the route.
type EffectiveRouteSource string

const (
	EffectiveRouteSourceDefault               EffectiveRouteSource = "Default"
	EffectiveRouteSourceUnknown               EffectiveRouteSource = "Unknown"
	EffectiveRouteSourceUser                  EffectiveRouteSource = "User"
	EffectiveRouteSourceVirtualNetworkGateway EffectiveRouteSource = "VirtualNetworkGateway"
)

// PossibleEffectiveRouteSourceValues returns the possible values for the EffectiveRouteSource const type.
func PossibleEffectiveRouteSourceValues() []EffectiveRouteSource {
	return []EffectiveRouteSource{
		EffectiveRouteSourceDefault,
		EffectiveRouteSourceUnknown,
		EffectiveRouteSourceUser,
		EffectiveRouteSourceVirtualNetworkGateway,
	}
}

// EffectiveRouteState - The value of effective route.
type EffectiveRouteState string

const (
	EffectiveRouteStateActive  EffectiveRouteState = "Active"
	EffectiveRouteStateInvalid EffectiveRouteState = "Invalid"
)

// PossibleEffectiveRouteStateValues returns the possible values for the EffectiveRouteState const type.
func PossibleEffectiveRouteStateValues() []EffectiveRouteState {
	return []EffectiveRouteState{
		EffectiveRouteStateActive,
		EffectiveRouteStateInvalid,
	}
}

// EffectiveSecurityRuleProtocol - The network protocol this rule applies to.
type EffectiveSecurityRuleProtocol string

const (
	EffectiveSecurityRuleProtocolAll EffectiveSecurityRuleProtocol = "All"
	EffectiveSecurityRuleProtocolTCP EffectiveSecurityRuleProtocol = "Tcp"
	EffectiveSecurityRuleProtocolUDP EffectiveSecurityRuleProtocol = "Udp"
)

// PossibleEffectiveSecurityRuleProtocolValues returns the possible values for the EffectiveSecurityRuleProtocol const type.
func PossibleEffectiveSecurityRuleProtocolValues() []EffectiveSecurityRuleProtocol {
	return []EffectiveSecurityRuleProtocol{
		EffectiveSecurityRuleProtocolAll,
		EffectiveSecurityRuleProtocolTCP,
		EffectiveSecurityRuleProtocolUDP,
	}
}

// EvaluationState - Connectivity analysis evaluation state.
type EvaluationState string

const (
	EvaluationStateCompleted  EvaluationState = "Completed"
	EvaluationStateInProgress EvaluationState = "InProgress"
	EvaluationStateNotStarted EvaluationState = "NotStarted"
)

// PossibleEvaluationStateValues returns the possible values for the EvaluationState const type.
func PossibleEvaluationStateValues() []EvaluationState {
	return []EvaluationState{
		EvaluationStateCompleted,
		EvaluationStateInProgress,
		EvaluationStateNotStarted,
	}
}

// ExpressRouteCircuitPeeringAdvertisedPublicPrefixState - The advertised public prefix state of the Peering resource.
type ExpressRouteCircuitPeeringAdvertisedPublicPrefixState string

const (
	ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateConfigured       ExpressRouteCircuitPeeringAdvertisedPublicPrefixState = "Configured"
	ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateConfiguring      ExpressRouteCircuitPeeringAdvertisedPublicPrefixState = "Configuring"
	ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateNotConfigured    ExpressRouteCircuitPeeringAdvertisedPublicPrefixState = "NotConfigured"
	ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateValidationNeeded ExpressRouteCircuitPeeringAdvertisedPublicPrefixState = "ValidationNeeded"
)

// PossibleExpressRouteCircuitPeeringAdvertisedPublicPrefixStateValues returns the possible values for the ExpressRouteCircuitPeeringAdvertisedPublicPrefixState const type.
func PossibleExpressRouteCircuitPeeringAdvertisedPublicPrefixStateValues() []ExpressRouteCircuitPeeringAdvertisedPublicPrefixState {
	return []ExpressRouteCircuitPeeringAdvertisedPublicPrefixState{
		ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateConfigured,
		ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateConfiguring,
		ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateNotConfigured,
		ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateValidationNeeded,
	}
}

// ExpressRouteCircuitPeeringState - The state of peering.
type ExpressRouteCircuitPeeringState string

const (
	ExpressRouteCircuitPeeringStateDisabled ExpressRouteCircuitPeeringState = "Disabled"
	ExpressRouteCircuitPeeringStateEnabled  ExpressRouteCircuitPeeringState = "Enabled"
)

// PossibleExpressRouteCircuitPeeringStateValues returns the possible values for the ExpressRouteCircuitPeeringState const type.
func PossibleExpressRouteCircuitPeeringStateValues() []ExpressRouteCircuitPeeringState {
	return []ExpressRouteCircuitPeeringState{
		ExpressRouteCircuitPeeringStateDisabled,
		ExpressRouteCircuitPeeringStateEnabled,
	}
}

// ExpressRouteCircuitSKUFamily - The family of the SKU.
type ExpressRouteCircuitSKUFamily string

const (
	ExpressRouteCircuitSKUFamilyMeteredData   ExpressRouteCircuitSKUFamily = "MeteredData"
	ExpressRouteCircuitSKUFamilyUnlimitedData ExpressRouteCircuitSKUFamily = "UnlimitedData"
)

// PossibleExpressRouteCircuitSKUFamilyValues returns the possible values for the ExpressRouteCircuitSKUFamily const type.
func PossibleExpressRouteCircuitSKUFamilyValues() []ExpressRouteCircuitSKUFamily {
	return []ExpressRouteCircuitSKUFamily{
		ExpressRouteCircuitSKUFamilyMeteredData,
		ExpressRouteCircuitSKUFamilyUnlimitedData,
	}
}

// ExpressRouteCircuitSKUTier - The tier of the SKU.
type ExpressRouteCircuitSKUTier string

const (
	ExpressRouteCircuitSKUTierBasic    ExpressRouteCircuitSKUTier = "Basic"
	ExpressRouteCircuitSKUTierLocal    ExpressRouteCircuitSKUTier = "Local"
	ExpressRouteCircuitSKUTierPremium  ExpressRouteCircuitSKUTier = "Premium"
	ExpressRouteCircuitSKUTierStandard ExpressRouteCircuitSKUTier = "Standard"
)

// PossibleExpressRouteCircuitSKUTierValues returns the possible values for the ExpressRouteCircuitSKUTier const type.
func PossibleExpressRouteCircuitSKUTierValues() []ExpressRouteCircuitSKUTier {
	return []ExpressRouteCircuitSKUTier{
		ExpressRouteCircuitSKUTierBasic,
		ExpressRouteCircuitSKUTierLocal,
		ExpressRouteCircuitSKUTierPremium,
		ExpressRouteCircuitSKUTierStandard,
	}
}

// ExpressRouteLinkAdminState - Administrative state of the physical port.
type ExpressRouteLinkAdminState string

const (
	ExpressRouteLinkAdminStateDisabled ExpressRouteLinkAdminState = "Disabled"
	ExpressRouteLinkAdminStateEnabled  ExpressRouteLinkAdminState = "Enabled"
)

// PossibleExpressRouteLinkAdminStateValues returns the possible values for the ExpressRouteLinkAdminState const type.
func PossibleExpressRouteLinkAdminStateValues() []ExpressRouteLinkAdminState {
	return []ExpressRouteLinkAdminState{
		ExpressRouteLinkAdminStateDisabled,
		ExpressRouteLinkAdminStateEnabled,
	}
}

// ExpressRouteLinkConnectorType - Physical fiber port type.
type ExpressRouteLinkConnectorType string

const (
	ExpressRouteLinkConnectorTypeLC ExpressRouteLinkConnectorType = "LC"
	ExpressRouteLinkConnectorTypeSC ExpressRouteLinkConnectorType = "SC"
)

// PossibleExpressRouteLinkConnectorTypeValues returns the possible values for the ExpressRouteLinkConnectorType const type.
func PossibleExpressRouteLinkConnectorTypeValues() []ExpressRouteLinkConnectorType {
	return []ExpressRouteLinkConnectorType{
		ExpressRouteLinkConnectorTypeLC,
		ExpressRouteLinkConnectorTypeSC,
	}
}

// ExpressRouteLinkMacSecCipher - Mac security cipher.
type ExpressRouteLinkMacSecCipher string

const (
	ExpressRouteLinkMacSecCipherGCMAES128 ExpressRouteLinkMacSecCipher = "gcm-aes-128"
	ExpressRouteLinkMacSecCipherGCMAES256 ExpressRouteLinkMacSecCipher = "gcm-aes-256"
)

// PossibleExpressRouteLinkMacSecCipherValues returns the possible values for the ExpressRouteLinkMacSecCipher const type.
func PossibleExpressRouteLinkMacSecCipherValues() []ExpressRouteLinkMacSecCipher {
	return []ExpressRouteLinkMacSecCipher{
		ExpressRouteLinkMacSecCipherGCMAES128,
		ExpressRouteLinkMacSecCipherGCMAES256,
	}
}

// ExpressRoutePeeringState - The state of peering.
type ExpressRoutePeeringState string

const (
	ExpressRoutePeeringStateDisabled ExpressRoutePeeringState = "Disabled"
	ExpressRoutePeeringStateEnabled  ExpressRoutePeeringState = "Enabled"
)

// PossibleExpressRoutePeeringStateValues returns the possible values for the ExpressRoutePeeringState const type.
func PossibleExpressRoutePeeringStateValues() []ExpressRoutePeeringState {
	return []ExpressRoutePeeringState{
		ExpressRoutePeeringStateDisabled,
		ExpressRoutePeeringStateEnabled,
	}
}

// ExpressRoutePeeringType - The peering type.
type ExpressRoutePeeringType string

const (
	ExpressRoutePeeringTypeAzurePrivatePeering ExpressRoutePeeringType = "AzurePrivatePeering"
	ExpressRoutePeeringTypeAzurePublicPeering  ExpressRoutePeeringType = "AzurePublicPeering"
	ExpressRoutePeeringTypeMicrosoftPeering    ExpressRoutePeeringType = "MicrosoftPeering"
)

// PossibleExpressRoutePeeringTypeValues returns the possible values for the ExpressRoutePeeringType const type.
func PossibleExpressRoutePeeringTypeValues() []ExpressRoutePeeringType {
	return []ExpressRoutePeeringType{
		ExpressRoutePeeringTypeAzurePrivatePeering,
		ExpressRoutePeeringTypeAzurePublicPeering,
		ExpressRoutePeeringTypeMicrosoftPeering,
	}
}

// ExpressRoutePortsEncapsulation - Encapsulation method on physical ports.
type ExpressRoutePortsEncapsulation string

const (
	ExpressRoutePortsEncapsulationDot1Q ExpressRoutePortsEncapsulation = "Dot1Q"
	ExpressRoutePortsEncapsulationQinQ  ExpressRoutePortsEncapsulation = "QinQ"
)

// PossibleExpressRoutePortsEncapsulationValues returns the possible values for the ExpressRoutePortsEncapsulation const type.
func PossibleExpressRoutePortsEncapsulationValues() []ExpressRoutePortsEncapsulation {
	return []ExpressRoutePortsEncapsulation{
		ExpressRoutePortsEncapsulationDot1Q,
		ExpressRoutePortsEncapsulationQinQ,
	}
}

// FirewallPolicyFilterRuleActionType - The action type of a rule.
type FirewallPolicyFilterRuleActionType string

const (
	FirewallPolicyFilterRuleActionTypeAllow FirewallPolicyFilterRuleActionType = "Allow"
	FirewallPolicyFilterRuleActionTypeDeny  FirewallPolicyFilterRuleActionType = "Deny"
)

// PossibleFirewallPolicyFilterRuleActionTypeValues returns the possible values for the FirewallPolicyFilterRuleActionType const type.
func PossibleFirewallPolicyFilterRuleActionTypeValues() []FirewallPolicyFilterRuleActionType {
	return []FirewallPolicyFilterRuleActionType{
		FirewallPolicyFilterRuleActionTypeAllow,
		FirewallPolicyFilterRuleActionTypeDeny,
	}
}

// FirewallPolicyNatRuleActionType - The action type of a rule.
type FirewallPolicyNatRuleActionType string

const (
	FirewallPolicyNatRuleActionTypeDNAT FirewallPolicyNatRuleActionType = "DNAT"
)

// PossibleFirewallPolicyNatRuleActionTypeValues returns the possible values for the FirewallPolicyNatRuleActionType const type.
func PossibleFirewallPolicyNatRuleActionTypeValues() []FirewallPolicyNatRuleActionType {
	return []FirewallPolicyNatRuleActionType{
		FirewallPolicyNatRuleActionTypeDNAT,
	}
}

// FirewallPolicyRuleConditionApplicationProtocolType - The application protocol type of a Rule condition.
type FirewallPolicyRuleConditionApplicationProtocolType string

const (
	FirewallPolicyRuleConditionApplicationProtocolTypeHTTP  FirewallPolicyRuleConditionApplicationProtocolType = "Http"
	FirewallPolicyRuleConditionApplicationProtocolTypeHTTPS FirewallPolicyRuleConditionApplicationProtocolType = "Https"
)

// PossibleFirewallPolicyRuleConditionApplicationProtocolTypeValues returns the possible values for the FirewallPolicyRuleConditionApplicationProtocolType const type.
func PossibleFirewallPolicyRuleConditionApplicationProtocolTypeValues() []FirewallPolicyRuleConditionApplicationProtocolType {
	return []FirewallPolicyRuleConditionApplicationProtocolType{
		FirewallPolicyRuleConditionApplicationProtocolTypeHTTP,
		FirewallPolicyRuleConditionApplicationProtocolTypeHTTPS,
	}
}

// FirewallPolicyRuleConditionNetworkProtocol - The Network protocol of a Rule condition.
type FirewallPolicyRuleConditionNetworkProtocol string

const (
	FirewallPolicyRuleConditionNetworkProtocolAny  FirewallPolicyRuleConditionNetworkProtocol = "Any"
	FirewallPolicyRuleConditionNetworkProtocolICMP FirewallPolicyRuleConditionNetworkProtocol = "ICMP"
	FirewallPolicyRuleConditionNetworkProtocolTCP  FirewallPolicyRuleConditionNetworkProtocol = "TCP"
	FirewallPolicyRuleConditionNetworkProtocolUDP  FirewallPolicyRuleConditionNetworkProtocol = "UDP"
)

// PossibleFirewallPolicyRuleConditionNetworkProtocolValues returns the possible values for the FirewallPolicyRuleConditionNetworkProtocol const type.
func PossibleFirewallPolicyRuleConditionNetworkProtocolValues() []FirewallPolicyRuleConditionNetworkProtocol {
	return []FirewallPolicyRuleConditionNetworkProtocol{
		FirewallPolicyRuleConditionNetworkProtocolAny,
		FirewallPolicyRuleConditionNetworkProtocolICMP,
		FirewallPolicyRuleConditionNetworkProtocolTCP,
		FirewallPolicyRuleConditionNetworkProtocolUDP,
	}
}

// FirewallPolicyRuleConditionType - Rule Condition Type.
type FirewallPolicyRuleConditionType string

const (
	FirewallPolicyRuleConditionTypeApplicationRuleCondition FirewallPolicyRuleConditionType = "ApplicationRuleCondition"
	FirewallPolicyRuleConditionTypeNatRuleCondition         FirewallPolicyRuleConditionType = "NatRuleCondition"
	FirewallPolicyRuleConditionTypeNetworkRuleCondition     FirewallPolicyRuleConditionType = "NetworkRuleCondition"
)

// PossibleFirewallPolicyRuleConditionTypeValues returns the possible values for the FirewallPolicyRuleConditionType const type.
func PossibleFirewallPolicyRuleConditionTypeValues() []FirewallPolicyRuleConditionType {
	return []FirewallPolicyRuleConditionType{
		FirewallPolicyRuleConditionTypeApplicationRuleCondition,
		FirewallPolicyRuleConditionTypeNatRuleCondition,
		FirewallPolicyRuleConditionTypeNetworkRuleCondition,
	}
}

// FirewallPolicyRuleType - The type of the rule.
type FirewallPolicyRuleType string

const (
	FirewallPolicyRuleTypeFirewallPolicyFilterRule FirewallPolicyRuleType = "FirewallPolicyFilterRule"
	FirewallPolicyRuleTypeFirewallPolicyNatRule    FirewallPolicyRuleType = "FirewallPolicyNatRule"
)

// PossibleFirewallPolicyRuleTypeValues returns the possible values for the FirewallPolicyRuleType const type.
func PossibleFirewallPolicyRuleTypeValues() []FirewallPolicyRuleType {
	return []FirewallPolicyRuleType{
		FirewallPolicyRuleTypeFirewallPolicyFilterRule,
		FirewallPolicyRuleTypeFirewallPolicyNatRule,
	}
}

// FlowLogFormatType - The file type of flow log.
type FlowLogFormatType string

const (
	FlowLogFormatTypeJSON FlowLogFormatType = "JSON"
)

// PossibleFlowLogFormatTypeValues returns the possible values for the FlowLogFormatType const type.
func PossibleFlowLogFormatTypeValues() []FlowLogFormatType {
	return []FlowLogFormatType{
		FlowLogFormatTypeJSON,
	}
}

// HTTPConfigurationMethod - The HTTP method to use.
type HTTPConfigurationMethod string

const (
	HTTPConfigurationMethodGet  HTTPConfigurationMethod = "Get"
	HTTPConfigurationMethodPost HTTPConfigurationMethod = "Post"
)

// PossibleHTTPConfigurationMethodValues returns the possible values for the HTTPConfigurationMethod const type.
func PossibleHTTPConfigurationMethodValues() []HTTPConfigurationMethod {
	return []HTTPConfigurationMethod{
		HTTPConfigurationMethodGet,
		HTTPConfigurationMethodPost,
	}
}

// HTTPMethod - HTTP method.
type HTTPMethod string

const (
	HTTPMethodGet HTTPMethod = "Get"
)

// PossibleHTTPMethodValues returns the possible values for the HTTPMethod const type.
func PossibleHTTPMethodValues() []HTTPMethod {
	return []HTTPMethod{
		HTTPMethodGet,
	}
}

// IPAllocationMethod - IP address allocation method.
type IPAllocationMethod string

const (
	IPAllocationMethodDynamic IPAllocationMethod = "Dynamic"
	IPAllocationMethodStatic  IPAllocationMethod = "Static"
)

// PossibleIPAllocationMethodValues returns the possible values for the IPAllocationMethod const type.
func PossibleIPAllocationMethodValues() []IPAllocationMethod {
	return []IPAllocationMethod{
		IPAllocationMethodDynamic,
		IPAllocationMethodStatic,
	}
}

// IPAllocationType - IpAllocation type.
type IPAllocationType string

const (
	IPAllocationTypeHypernet  IPAllocationType = "Hypernet"
	IPAllocationTypeUndefined IPAllocationType = "Undefined"
)

// PossibleIPAllocationTypeValues returns the possible values for the IPAllocationType const type.
func PossibleIPAllocationTypeValues() []IPAllocationType {
	return []IPAllocationType{
		IPAllocationTypeHypernet,
		IPAllocationTypeUndefined,
	}
}

// IPFlowProtocol - Protocol to be verified on.
type IPFlowProtocol string

const (
	IPFlowProtocolTCP IPFlowProtocol = "TCP"
	IPFlowProtocolUDP IPFlowProtocol = "UDP"
)

// PossibleIPFlowProtocolValues returns the possible values for the IPFlowProtocol const type.
func PossibleIPFlowProtocolValues() []IPFlowProtocol {
	return []IPFlowProtocol{
		IPFlowProtocolTCP,
		IPFlowProtocolUDP,
	}
}

// IPSecEncryption - The IPSec encryption algorithm (IKE phase 1).
type IPSecEncryption string

const (
	IPSecEncryptionAES128    IPSecEncryption = "AES128"
	IPSecEncryptionAES192    IPSecEncryption = "AES192"
	IPSecEncryptionAES256    IPSecEncryption = "AES256"
	IPSecEncryptionDES       IPSecEncryption = "DES"
	IPSecEncryptionDES3      IPSecEncryption = "DES3"
	IPSecEncryptionGCMAES128 IPSecEncryption = "GCMAES128"
	IPSecEncryptionGCMAES192 IPSecEncryption = "GCMAES192"
	IPSecEncryptionGCMAES256 IPSecEncryption = "GCMAES256"
	IPSecEncryptionNone      IPSecEncryption = "None"
)

// PossibleIPSecEncryptionValues returns the possible values for the IPSecEncryption const type.
func PossibleIPSecEncryptionValues() []IPSecEncryption {
	return []IPSecEncryption{
		IPSecEncryptionAES128,
		IPSecEncryptionAES192,
		IPSecEncryptionAES256,
		IPSecEncryptionDES,
		IPSecEncryptionDES3,
		IPSecEncryptionGCMAES128,
		IPSecEncryptionGCMAES192,
		IPSecEncryptionGCMAES256,
		IPSecEncryptionNone,
	}
}

// IPSecIntegrity - The IPSec integrity algorithm (IKE phase 1).
type IPSecIntegrity string

const (
	IPSecIntegrityGCMAES128 IPSecIntegrity = "GCMAES128"
	IPSecIntegrityGCMAES192 IPSecIntegrity = "GCMAES192"
	IPSecIntegrityGCMAES256 IPSecIntegrity = "GCMAES256"
	IPSecIntegrityMD5       IPSecIntegrity = "MD5"
	IPSecIntegritySHA1      IPSecIntegrity = "SHA1"
	IPSecIntegritySHA256    IPSecIntegrity = "SHA256"
)

// PossibleIPSecIntegrityValues returns the possible values for the IPSecIntegrity const type.
func PossibleIPSecIntegrityValues() []IPSecIntegrity {
	return []IPSecIntegrity{
		IPSecIntegrityGCMAES128,
		IPSecIntegrityGCMAES192,
		IPSecIntegrityGCMAES256,
		IPSecIntegrityMD5,
		IPSecIntegritySHA1,
		IPSecIntegritySHA256,
	}
}

// IPVersion - IP address version.
type IPVersion string

const (
	IPVersionIPv4 IPVersion = "IPv4"
	IPVersionIPv6 IPVersion = "IPv6"
)

// PossibleIPVersionValues returns the possible values for the IPVersion const type.
func PossibleIPVersionValues() []IPVersion {
	return []IPVersion{
		IPVersionIPv4,
		IPVersionIPv6,
	}
}

// IkeEncryption - The IKE encryption algorithm (IKE phase 2).
type IkeEncryption string

const (
	IkeEncryptionAES128    IkeEncryption = "AES128"
	IkeEncryptionAES192    IkeEncryption = "AES192"
	IkeEncryptionAES256    IkeEncryption = "AES256"
	IkeEncryptionDES       IkeEncryption = "DES"
	IkeEncryptionDES3      IkeEncryption = "DES3"
	IkeEncryptionGCMAES128 IkeEncryption = "GCMAES128"
	IkeEncryptionGCMAES256 IkeEncryption = "GCMAES256"
)

// PossibleIkeEncryptionValues returns the possible values for the IkeEncryption const type.
func PossibleIkeEncryptionValues() []IkeEncryption {
	return []IkeEncryption{
		IkeEncryptionAES128,
		IkeEncryptionAES192,
		IkeEncryptionAES256,
		IkeEncryptionDES,
		IkeEncryptionDES3,
		IkeEncryptionGCMAES128,
		IkeEncryptionGCMAES256,
	}
}

// IkeIntegrity - The IKE integrity algorithm (IKE phase 2).
type IkeIntegrity string

const (
	IkeIntegrityGCMAES128 IkeIntegrity = "GCMAES128"
	IkeIntegrityGCMAES256 IkeIntegrity = "GCMAES256"
	IkeIntegrityMD5       IkeIntegrity = "MD5"
	IkeIntegritySHA1      IkeIntegrity = "SHA1"
	IkeIntegritySHA256    IkeIntegrity = "SHA256"
	IkeIntegritySHA384    IkeIntegrity = "SHA384"
)

// PossibleIkeIntegrityValues returns the possible values for the IkeIntegrity const type.
func PossibleIkeIntegrityValues() []IkeIntegrity {
	return []IkeIntegrity{
		IkeIntegrityGCMAES128,
		IkeIntegrityGCMAES256,
		IkeIntegrityMD5,
		IkeIntegritySHA1,
		IkeIntegritySHA256,
		IkeIntegritySHA384,
	}
}

// IssueType - The type of issue.
type IssueType string

const (
	IssueTypeAgentStopped        IssueType = "AgentStopped"
	IssueTypeDNSResolution       IssueType = "DnsResolution"
	IssueTypeGuestFirewall       IssueType = "GuestFirewall"
	IssueTypeNetworkSecurityRule IssueType = "NetworkSecurityRule"
	IssueTypePlatform            IssueType = "Platform"
	IssueTypePortThrottled       IssueType = "PortThrottled"
	IssueTypeSocketBind          IssueType = "SocketBind"
	IssueTypeUnknown             IssueType = "Unknown"
	IssueTypeUserDefinedRoute    IssueType = "UserDefinedRoute"
)

// PossibleIssueTypeValues returns the possible values for the IssueType const type.
func PossibleIssueTypeValues() []IssueType {
	return []IssueType{
		IssueTypeAgentStopped,
		IssueTypeDNSResolution,
		IssueTypeGuestFirewall,
		IssueTypeNetworkSecurityRule,
		IssueTypePlatform,
		IssueTypePortThrottled,
		IssueTypeSocketBind,
		IssueTypeUnknown,
		IssueTypeUserDefinedRoute,
	}
}

// LoadBalancerOutboundRuleProtocol - The protocol for the outbound rule in load balancer.
type LoadBalancerOutboundRuleProtocol string

const (
	LoadBalancerOutboundRuleProtocolAll LoadBalancerOutboundRuleProtocol = "All"
	LoadBalancerOutboundRuleProtocolTCP LoadBalancerOutboundRuleProtocol = "Tcp"
	LoadBalancerOutboundRuleProtocolUDP LoadBalancerOutboundRuleProtocol = "Udp"
)

// PossibleLoadBalancerOutboundRuleProtocolValues returns the possible values for the LoadBalancerOutboundRuleProtocol const type.
func PossibleLoadBalancerOutboundRuleProtocolValues() []LoadBalancerOutboundRuleProtocol {
	return []LoadBalancerOutboundRuleProtocol{
		LoadBalancerOutboundRuleProtocolAll,
		LoadBalancerOutboundRuleProtocolTCP,
		LoadBalancerOutboundRuleProtocolUDP,
	}
}

// LoadBalancerSKUName - Name of a load balancer SKU.
type LoadBalancerSKUName string

const (
	LoadBalancerSKUNameBasic    LoadBalancerSKUName = "Basic"
	LoadBalancerSKUNameStandard LoadBalancerSKUName = "Standard"
)

// PossibleLoadBalancerSKUNameValues returns the possible values for the LoadBalancerSKUName const type.
func PossibleLoadBalancerSKUNameValues() []LoadBalancerSKUName {
	return []LoadBalancerSKUName{
		LoadBalancerSKUNameBasic,
		LoadBalancerSKUNameStandard,
	}
}

// LoadDistribution - The load distribution policy for this rule.
type LoadDistribution string

const (
	LoadDistributionDefault          LoadDistribution = "Default"
	LoadDistributionSourceIP         LoadDistribution = "SourceIP"
	LoadDistributionSourceIPProtocol LoadDistribution = "SourceIPProtocol"
)

// PossibleLoadDistributionValues returns the possible values for the LoadDistribution const type.
func PossibleLoadDistributionValues() []LoadDistribution {
	return []LoadDistribution{
		LoadDistributionDefault,
		LoadDistributionSourceIP,
		LoadDistributionSourceIPProtocol,
	}
}

// ManagedRuleEnabledState - The state of the managed rule. Defaults to Disabled if not specified.
type ManagedRuleEnabledState string

const (
	ManagedRuleEnabledStateDisabled ManagedRuleEnabledState = "Disabled"
)

// PossibleManagedRuleEnabledStateValues returns the possible values for the ManagedRuleEnabledState const type.
func PossibleManagedRuleEnabledStateValues() []ManagedRuleEnabledState {
	return []ManagedRuleEnabledState{
		ManagedRuleEnabledStateDisabled,
	}
}

// NatGatewaySKUName - Name of Nat Gateway SKU.
type NatGatewaySKUName string

const (
	NatGatewaySKUNameStandard NatGatewaySKUName = "Standard"
)

// PossibleNatGatewaySKUNameValues returns the possible values for the NatGatewaySKUName const type.
func PossibleNatGatewaySKUNameValues() []NatGatewaySKUName {
	return []NatGatewaySKUName{
		NatGatewaySKUNameStandard,
	}
}

// NextHopType - Next hop type.
type NextHopType string

const (
	NextHopTypeHyperNetGateway       NextHopType = "HyperNetGateway"
	NextHopTypeInternet              NextHopType = "Internet"
	NextHopTypeNone                  NextHopType = "None"
	NextHopTypeVirtualAppliance      NextHopType = "VirtualAppliance"
	NextHopTypeVirtualNetworkGateway NextHopType = "VirtualNetworkGateway"
	NextHopTypeVnetLocal             NextHopType = "VnetLocal"
)

// PossibleNextHopTypeValues returns the possible values for the NextHopType const type.
func PossibleNextHopTypeValues() []NextHopType {
	return []NextHopType{
		NextHopTypeHyperNetGateway,
		NextHopTypeInternet,
		NextHopTypeNone,
		NextHopTypeVirtualAppliance,
		NextHopTypeVirtualNetworkGateway,
		NextHopTypeVnetLocal,
	}
}

// OfficeTrafficCategory - The office traffic category.
type OfficeTrafficCategory string

const (
	OfficeTrafficCategoryAll              OfficeTrafficCategory = "All"
	OfficeTrafficCategoryNone             OfficeTrafficCategory = "None"
	OfficeTrafficCategoryOptimize         OfficeTrafficCategory = "Optimize"
	OfficeTrafficCategoryOptimizeAndAllow OfficeTrafficCategory = "OptimizeAndAllow"
)

// PossibleOfficeTrafficCategoryValues returns the possible values for the OfficeTrafficCategory const type.
func PossibleOfficeTrafficCategoryValues() []OfficeTrafficCategory {
	return []OfficeTrafficCategory{
		OfficeTrafficCategoryAll,
		OfficeTrafficCategoryNone,
		OfficeTrafficCategoryOptimize,
		OfficeTrafficCategoryOptimizeAndAllow,
	}
}

// Origin - The origin of the issue.
type Origin string

const (
	OriginInbound  Origin = "Inbound"
	OriginLocal    Origin = "Local"
	OriginOutbound Origin = "Outbound"
)

// PossibleOriginValues returns the possible values for the Origin const type.
func PossibleOriginValues() []Origin {
	return []Origin{
		OriginInbound,
		OriginLocal,
		OriginOutbound,
	}
}

// OutputType - Connection monitor output destination type. Currently, only "Workspace" is supported.
type OutputType string

const (
	OutputTypeWorkspace OutputType = "Workspace"
)

// PossibleOutputTypeValues returns the possible values for the OutputType const type.
func PossibleOutputTypeValues() []OutputType {
	return []OutputType{
		OutputTypeWorkspace,
	}
}

// OwaspCrsExclusionEntryMatchVariable - The variable to be excluded.
type OwaspCrsExclusionEntryMatchVariable string

const (
	OwaspCrsExclusionEntryMatchVariableRequestArgNames    OwaspCrsExclusionEntryMatchVariable = "RequestArgNames"
	OwaspCrsExclusionEntryMatchVariableRequestCookieNames OwaspCrsExclusionEntryMatchVariable = "RequestCookieNames"
	OwaspCrsExclusionEntryMatchVariableRequestHeaderNames OwaspCrsExclusionEntryMatchVariable = "RequestHeaderNames"
)

// PossibleOwaspCrsExclusionEntryMatchVariableValues returns the possible values for the OwaspCrsExclusionEntryMatchVariable const type.
func PossibleOwaspCrsExclusionEntryMatchVariableValues() []OwaspCrsExclusionEntryMatchVariable {
	return []OwaspCrsExclusionEntryMatchVariable{
		OwaspCrsExclusionEntryMatchVariableRequestArgNames,
		OwaspCrsExclusionEntryMatchVariableRequestCookieNames,
		OwaspCrsExclusionEntryMatchVariableRequestHeaderNames,
	}
}

// OwaspCrsExclusionEntrySelectorMatchOperator - When matchVariable is a collection, operate on the selector to specify which
// elements in the collection this exclusion applies to.
type OwaspCrsExclusionEntrySelectorMatchOperator string

const (
	OwaspCrsExclusionEntrySelectorMatchOperatorContains   OwaspCrsExclusionEntrySelectorMatchOperator = "Contains"
	OwaspCrsExclusionEntrySelectorMatchOperatorEndsWith   OwaspCrsExclusionEntrySelectorMatchOperator = "EndsWith"
	OwaspCrsExclusionEntrySelectorMatchOperatorEquals     OwaspCrsExclusionEntrySelectorMatchOperator = "Equals"
	OwaspCrsExclusionEntrySelectorMatchOperatorEqualsAny  OwaspCrsExclusionEntrySelectorMatchOperator = "EqualsAny"
	OwaspCrsExclusionEntrySelectorMatchOperatorStartsWith OwaspCrsExclusionEntrySelectorMatchOperator = "StartsWith"
)

// PossibleOwaspCrsExclusionEntrySelectorMatchOperatorValues returns the possible values for the OwaspCrsExclusionEntrySelectorMatchOperator const type.
func PossibleOwaspCrsExclusionEntrySelectorMatchOperatorValues() []OwaspCrsExclusionEntrySelectorMatchOperator {
	return []OwaspCrsExclusionEntrySelectorMatchOperator{
		OwaspCrsExclusionEntrySelectorMatchOperatorContains,
		OwaspCrsExclusionEntrySelectorMatchOperatorEndsWith,
		OwaspCrsExclusionEntrySelectorMatchOperatorEquals,
		OwaspCrsExclusionEntrySelectorMatchOperatorEqualsAny,
		OwaspCrsExclusionEntrySelectorMatchOperatorStartsWith,
	}
}

type PcError string

const (
	PcErrorAgentStopped    PcError = "AgentStopped"
	PcErrorCaptureFailed   PcError = "CaptureFailed"
	PcErrorInternalError   PcError = "InternalError"
	PcErrorLocalFileFailed PcError = "LocalFileFailed"
	PcErrorStorageFailed   PcError = "StorageFailed"
)

// PossiblePcErrorValues returns the possible values for the PcError const type.
func PossiblePcErrorValues() []PcError {
	return []PcError{
		PcErrorAgentStopped,
		PcErrorCaptureFailed,
		PcErrorInternalError,
		PcErrorLocalFileFailed,
		PcErrorStorageFailed,
	}
}

// PcProtocol - Protocol to be filtered on.
type PcProtocol string

const (
	PcProtocolAny PcProtocol = "Any"
	PcProtocolTCP PcProtocol = "TCP"
	PcProtocolUDP PcProtocol = "UDP"
)

// PossiblePcProtocolValues returns the possible values for the PcProtocol const type.
func PossiblePcProtocolValues() []PcProtocol {
	return []PcProtocol{
		PcProtocolAny,
		PcProtocolTCP,
		PcProtocolUDP,
	}
}

// PcStatus - The status of the packet capture session.
type PcStatus string

const (
	PcStatusError      PcStatus = "Error"
	PcStatusNotStarted PcStatus = "NotStarted"
	PcStatusRunning    PcStatus = "Running"
	PcStatusStopped    PcStatus = "Stopped"
	PcStatusUnknown    PcStatus = "Unknown"
)

// PossiblePcStatusValues returns the possible values for the PcStatus const type.
func PossiblePcStatusValues() []PcStatus {
	return []PcStatus{
		PcStatusError,
		PcStatusNotStarted,
		PcStatusRunning,
		PcStatusStopped,
		PcStatusUnknown,
	}
}

// PfsGroup - The Pfs Groups used in IKE Phase 2 for new child SA.
type PfsGroup string

const (
	PfsGroupECP256  PfsGroup = "ECP256"
	PfsGroupECP384  PfsGroup = "ECP384"
	PfsGroupNone    PfsGroup = "None"
	PfsGroupPFS1    PfsGroup = "PFS1"
	PfsGroupPFS14   PfsGroup = "PFS14"
	PfsGroupPFS2    PfsGroup = "PFS2"
	PfsGroupPFS2048 PfsGroup = "PFS2048"
	PfsGroupPFS24   PfsGroup = "PFS24"
	PfsGroupPFSMM   PfsGroup = "PFSMM"
)

// PossiblePfsGroupValues returns the possible values for the PfsGroup const type.
func PossiblePfsGroupValues() []PfsGroup {
	return []PfsGroup{
		PfsGroupECP256,
		PfsGroupECP384,
		PfsGroupNone,
		PfsGroupPFS1,
		PfsGroupPFS14,
		PfsGroupPFS2,
		PfsGroupPFS2048,
		PfsGroupPFS24,
		PfsGroupPFSMM,
	}
}

// PreferredIPVersion - The preferred IP version to use in test evaluation. The connection monitor may choose to use a different
// version depending on other parameters.
type PreferredIPVersion string

const (
	PreferredIPVersionIPv4 PreferredIPVersion = "IPv4"
	PreferredIPVersionIPv6 PreferredIPVersion = "IPv6"
)

// PossiblePreferredIPVersionValues returns the possible values for the PreferredIPVersion const type.
func PossiblePreferredIPVersionValues() []PreferredIPVersion {
	return []PreferredIPVersion{
		PreferredIPVersionIPv4,
		PreferredIPVersionIPv6,
	}
}

// ProbeProtocol - The protocol of the end point. If 'Tcp' is specified, a received ACK is required for the probe to be successful.
// If 'Http' or 'Https' is specified, a 200 OK response from the specifies URI is required
// for the probe to be successful.
type ProbeProtocol string

const (
	ProbeProtocolHTTP  ProbeProtocol = "Http"
	ProbeProtocolHTTPS ProbeProtocol = "Https"
	ProbeProtocolTCP   ProbeProtocol = "Tcp"
)

// PossibleProbeProtocolValues returns the possible values for the ProbeProtocol const type.
func PossibleProbeProtocolValues() []ProbeProtocol {
	return []ProbeProtocol{
		ProbeProtocolHTTP,
		ProbeProtocolHTTPS,
		ProbeProtocolTCP,
	}
}

// ProcessorArchitecture - VPN client Processor Architecture.
type ProcessorArchitecture string

const (
	ProcessorArchitectureAmd64 ProcessorArchitecture = "Amd64"
	ProcessorArchitectureX86   ProcessorArchitecture = "X86"
)

// PossibleProcessorArchitectureValues returns the possible values for the ProcessorArchitecture const type.
func PossibleProcessorArchitectureValues() []ProcessorArchitecture {
	return []ProcessorArchitecture{
		ProcessorArchitectureAmd64,
		ProcessorArchitectureX86,
	}
}

// Protocol - Network protocol.
type Protocol string

const (
	ProtocolHTTP  Protocol = "Http"
	ProtocolHTTPS Protocol = "Https"
	ProtocolIcmp  Protocol = "Icmp"
	ProtocolTCP   Protocol = "Tcp"
)

// PossibleProtocolValues returns the possible values for the Protocol const type.
func PossibleProtocolValues() []Protocol {
	return []Protocol{
		ProtocolHTTP,
		ProtocolHTTPS,
		ProtocolIcmp,
		ProtocolTCP,
	}
}

// ProvisioningState - The current provisioning state.
type ProvisioningState string

const (
	ProvisioningStateDeleting  ProvisioningState = "Deleting"
	ProvisioningStateFailed    ProvisioningState = "Failed"
	ProvisioningStateSucceeded ProvisioningState = "Succeeded"
	ProvisioningStateUpdating  ProvisioningState = "Updating"
)

// PossibleProvisioningStateValues returns the possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{
		ProvisioningStateDeleting,
		ProvisioningStateFailed,
		ProvisioningStateSucceeded,
		ProvisioningStateUpdating,
	}
}

// PublicIPAddressSKUName - Name of a public IP address SKU.
type PublicIPAddressSKUName string

const (
	PublicIPAddressSKUNameBasic    PublicIPAddressSKUName = "Basic"
	PublicIPAddressSKUNameStandard PublicIPAddressSKUName = "Standard"
)

// PossiblePublicIPAddressSKUNameValues returns the possible values for the PublicIPAddressSKUName const type.
func PossiblePublicIPAddressSKUNameValues() []PublicIPAddressSKUName {
	return []PublicIPAddressSKUName{
		PublicIPAddressSKUNameBasic,
		PublicIPAddressSKUNameStandard,
	}
}

// PublicIPPrefixSKUName - Name of a public IP prefix SKU.
type PublicIPPrefixSKUName string

const (
	PublicIPPrefixSKUNameStandard PublicIPPrefixSKUName = "Standard"
)

// PossiblePublicIPPrefixSKUNameValues returns the possible values for the PublicIPPrefixSKUName const type.
func PossiblePublicIPPrefixSKUNameValues() []PublicIPPrefixSKUName {
	return []PublicIPPrefixSKUName{
		PublicIPPrefixSKUNameStandard,
	}
}

// ResourceIdentityType - The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both
// an implicitly created identity and a set of user assigned identities. The type 'None' will remove any
// identities from the virtual machine.
type ResourceIdentityType string

const (
	ResourceIdentityTypeSystemAssigned             ResourceIdentityType = "SystemAssigned"
	ResourceIdentityTypeUserAssigned               ResourceIdentityType = "UserAssigned"
	ResourceIdentityTypeSystemAssignedUserAssigned ResourceIdentityType = "SystemAssigned, UserAssigned"
	ResourceIdentityTypeNone                       ResourceIdentityType = "None"
)

// PossibleResourceIdentityTypeValues returns the possible values for the ResourceIdentityType const type.
func PossibleResourceIdentityTypeValues() []ResourceIdentityType {
	return []ResourceIdentityType{
		ResourceIdentityTypeSystemAssigned,
		ResourceIdentityTypeUserAssigned,
		ResourceIdentityTypeSystemAssignedUserAssigned,
		ResourceIdentityTypeNone,
	}
}

// RouteFilterRuleType - The rule type of the rule.
type RouteFilterRuleType string

const (
	RouteFilterRuleTypeCommunity RouteFilterRuleType = "Community"
)

// PossibleRouteFilterRuleTypeValues returns the possible values for the RouteFilterRuleType const type.
func PossibleRouteFilterRuleTypeValues() []RouteFilterRuleType {
	return []RouteFilterRuleType{
		RouteFilterRuleTypeCommunity,
	}
}

// RouteNextHopType - The type of Azure hop the packet should be sent to.
type RouteNextHopType string

const (
	RouteNextHopTypeInternet              RouteNextHopType = "Internet"
	RouteNextHopTypeNone                  RouteNextHopType = "None"
	RouteNextHopTypeVirtualAppliance      RouteNextHopType = "VirtualAppliance"
	RouteNextHopTypeVirtualNetworkGateway RouteNextHopType = "VirtualNetworkGateway"
	RouteNextHopTypeVnetLocal             RouteNextHopType = "VnetLocal"
)

// PossibleRouteNextHopTypeValues returns the possible values for the RouteNextHopType const type.
func PossibleRouteNextHopTypeValues() []RouteNextHopType {
	return []RouteNextHopType{
		RouteNextHopTypeInternet,
		RouteNextHopTypeNone,
		RouteNextHopTypeVirtualAppliance,
		RouteNextHopTypeVirtualNetworkGateway,
		RouteNextHopTypeVnetLocal,
	}
}

// SecurityPartnerProviderConnectionStatus - The current state of the connection with Security Partner Provider.
type SecurityPartnerProviderConnectionStatus string

const (
	SecurityPartnerProviderConnectionStatusConnected          SecurityPartnerProviderConnectionStatus = "Connected"
	SecurityPartnerProviderConnectionStatusNotConnected       SecurityPartnerProviderConnectionStatus = "NotConnected"
	SecurityPartnerProviderConnectionStatusPartiallyConnected SecurityPartnerProviderConnectionStatus = "PartiallyConnected"
	SecurityPartnerProviderConnectionStatusUnknown            SecurityPartnerProviderConnectionStatus = "Unknown"
)

// PossibleSecurityPartnerProviderConnectionStatusValues returns the possible values for the SecurityPartnerProviderConnectionStatus const type.
func PossibleSecurityPartnerProviderConnectionStatusValues() []SecurityPartnerProviderConnectionStatus {
	return []SecurityPartnerProviderConnectionStatus{
		SecurityPartnerProviderConnectionStatusConnected,
		SecurityPartnerProviderConnectionStatusNotConnected,
		SecurityPartnerProviderConnectionStatusPartiallyConnected,
		SecurityPartnerProviderConnectionStatusUnknown,
	}
}

// SecurityProviderName - The Security Providers.
type SecurityProviderName string

const (
	SecurityProviderNameCheckpoint SecurityProviderName = "Checkpoint"
	SecurityProviderNameIBoss      SecurityProviderName = "IBoss"
	SecurityProviderNameZScaler    SecurityProviderName = "ZScaler"
)

// PossibleSecurityProviderNameValues returns the possible values for the SecurityProviderName const type.
func PossibleSecurityProviderNameValues() []SecurityProviderName {
	return []SecurityProviderName{
		SecurityProviderNameCheckpoint,
		SecurityProviderNameIBoss,
		SecurityProviderNameZScaler,
	}
}

// SecurityRuleAccess - Whether network traffic is allowed or denied.
type SecurityRuleAccess string

const (
	SecurityRuleAccessAllow SecurityRuleAccess = "Allow"
	SecurityRuleAccessDeny  SecurityRuleAccess = "Deny"
)

// PossibleSecurityRuleAccessValues returns the possible values for the SecurityRuleAccess const type.
func PossibleSecurityRuleAccessValues() []SecurityRuleAccess {
	return []SecurityRuleAccess{
		SecurityRuleAccessAllow,
		SecurityRuleAccessDeny,
	}
}

// SecurityRuleDirection - The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing
// traffic.
type SecurityRuleDirection string

const (
	SecurityRuleDirectionInbound  SecurityRuleDirection = "Inbound"
	SecurityRuleDirectionOutbound SecurityRuleDirection = "Outbound"
)

// PossibleSecurityRuleDirectionValues returns the possible values for the SecurityRuleDirection const type.
func PossibleSecurityRuleDirectionValues() []SecurityRuleDirection {
	return []SecurityRuleDirection{
		SecurityRuleDirectionInbound,
		SecurityRuleDirectionOutbound,
	}
}

// SecurityRuleProtocol - Network protocol this rule applies to.
type SecurityRuleProtocol string

const (
	SecurityRuleProtocolAh       SecurityRuleProtocol = "Ah"
	SecurityRuleProtocolAsterisk SecurityRuleProtocol = "*"
	SecurityRuleProtocolEsp      SecurityRuleProtocol = "Esp"
	SecurityRuleProtocolIcmp     SecurityRuleProtocol = "Icmp"
	SecurityRuleProtocolTCP      SecurityRuleProtocol = "Tcp"
	SecurityRuleProtocolUDP      SecurityRuleProtocol = "Udp"
)

// PossibleSecurityRuleProtocolValues returns the possible values for the SecurityRuleProtocol const type.
func PossibleSecurityRuleProtocolValues() []SecurityRuleProtocol {
	return []SecurityRuleProtocol{
		SecurityRuleProtocolAh,
		SecurityRuleProtocolAsterisk,
		SecurityRuleProtocolEsp,
		SecurityRuleProtocolIcmp,
		SecurityRuleProtocolTCP,
		SecurityRuleProtocolUDP,
	}
}

// ServiceProviderProvisioningState - The ServiceProviderProvisioningState state of the resource.
type ServiceProviderProvisioningState string

const (
	ServiceProviderProvisioningStateDeprovisioning ServiceProviderProvisioningState = "Deprovisioning"
	ServiceProviderProvisioningStateNotProvisioned ServiceProviderProvisioningState = "NotProvisioned"
	ServiceProviderProvisioningStateProvisioned    ServiceProviderProvisioningState = "Provisioned"
	ServiceProviderProvisioningStateProvisioning   ServiceProviderProvisioningState = "Provisioning"
)

// PossibleServiceProviderProvisioningStateValues returns the possible values for the ServiceProviderProvisioningState const type.
func PossibleServiceProviderProvisioningStateValues() []ServiceProviderProvisioningState {
	return []ServiceProviderProvisioningState{
		ServiceProviderProvisioningStateDeprovisioning,
		ServiceProviderProvisioningStateNotProvisioned,
		ServiceProviderProvisioningStateProvisioned,
		ServiceProviderProvisioningStateProvisioning,
	}
}

// Severity - The severity of the issue.
type Severity string

const (
	SeverityError   Severity = "Error"
	SeverityWarning Severity = "Warning"
)

// PossibleSeverityValues returns the possible values for the Severity const type.
func PossibleSeverityValues() []Severity {
	return []Severity{
		SeverityError,
		SeverityWarning,
	}
}

// TransportProtocol - The transport protocol for the endpoint.
type TransportProtocol string

const (
	TransportProtocolAll TransportProtocol = "All"
	TransportProtocolTCP TransportProtocol = "Tcp"
	TransportProtocolUDP TransportProtocol = "Udp"
)

// PossibleTransportProtocolValues returns the possible values for the TransportProtocol const type.
func PossibleTransportProtocolValues() []TransportProtocol {
	return []TransportProtocol{
		TransportProtocolAll,
		TransportProtocolTCP,
		TransportProtocolUDP,
	}
}

// UsageUnit - An enum describing the unit of measurement.
type UsageUnit string

const (
	UsageUnitCount UsageUnit = "Count"
)

// PossibleUsageUnitValues returns the possible values for the UsageUnit const type.
func PossibleUsageUnitValues() []UsageUnit {
	return []UsageUnit{
		UsageUnitCount,
	}
}

// VPNAuthenticationType - VPN authentication types enabled for the VpnServerConfiguration.
type VPNAuthenticationType string

const (
	VPNAuthenticationTypeAAD         VPNAuthenticationType = "AAD"
	VPNAuthenticationTypeCertificate VPNAuthenticationType = "Certificate"
	VPNAuthenticationTypeRadius      VPNAuthenticationType = "Radius"
)

// PossibleVPNAuthenticationTypeValues returns the possible values for the VPNAuthenticationType const type.
func PossibleVPNAuthenticationTypeValues() []VPNAuthenticationType {
	return []VPNAuthenticationType{
		VPNAuthenticationTypeAAD,
		VPNAuthenticationTypeCertificate,
		VPNAuthenticationTypeRadius,
	}
}

// VPNClientProtocol - VPN client protocol enabled for the virtual network gateway.
type VPNClientProtocol string

const (
	VPNClientProtocolIkeV2   VPNClientProtocol = "IkeV2"
	VPNClientProtocolOpenVPN VPNClientProtocol = "OpenVPN"
	VPNClientProtocolSSTP    VPNClientProtocol = "SSTP"
)

// PossibleVPNClientProtocolValues returns the possible values for the VPNClientProtocol const type.
func PossibleVPNClientProtocolValues() []VPNClientProtocol {
	return []VPNClientProtocol{
		VPNClientProtocolIkeV2,
		VPNClientProtocolOpenVPN,
		VPNClientProtocolSSTP,
	}
}

// VPNConnectionStatus - The current state of the vpn connection.
type VPNConnectionStatus string

const (
	VPNConnectionStatusConnected    VPNConnectionStatus = "Connected"
	VPNConnectionStatusConnecting   VPNConnectionStatus = "Connecting"
	VPNConnectionStatusNotConnected VPNConnectionStatus = "NotConnected"
	VPNConnectionStatusUnknown      VPNConnectionStatus = "Unknown"
)

// PossibleVPNConnectionStatusValues returns the possible values for the VPNConnectionStatus const type.
func PossibleVPNConnectionStatusValues() []VPNConnectionStatus {
	return []VPNConnectionStatus{
		VPNConnectionStatusConnected,
		VPNConnectionStatusConnecting,
		VPNConnectionStatusNotConnected,
		VPNConnectionStatusUnknown,
	}
}

// VPNGatewayGeneration - The generation for this VirtualNetworkGateway. Must be None if gatewayType is not VPN.
type VPNGatewayGeneration string

const (
	VPNGatewayGenerationGeneration1 VPNGatewayGeneration = "Generation1"
	VPNGatewayGenerationGeneration2 VPNGatewayGeneration = "Generation2"
	VPNGatewayGenerationNone        VPNGatewayGeneration = "None"
)

// PossibleVPNGatewayGenerationValues returns the possible values for the VPNGatewayGeneration const type.
func PossibleVPNGatewayGenerationValues() []VPNGatewayGeneration {
	return []VPNGatewayGeneration{
		VPNGatewayGenerationGeneration1,
		VPNGatewayGenerationGeneration2,
		VPNGatewayGenerationNone,
	}
}

// VPNGatewayTunnelingProtocol - VPN protocol enabled for the VpnServerConfiguration.
type VPNGatewayTunnelingProtocol string

const (
	VPNGatewayTunnelingProtocolIkeV2   VPNGatewayTunnelingProtocol = "IkeV2"
	VPNGatewayTunnelingProtocolOpenVPN VPNGatewayTunnelingProtocol = "OpenVPN"
)

// PossibleVPNGatewayTunnelingProtocolValues returns the possible values for the VPNGatewayTunnelingProtocol const type.
func PossibleVPNGatewayTunnelingProtocolValues() []VPNGatewayTunnelingProtocol {
	return []VPNGatewayTunnelingProtocol{
		VPNGatewayTunnelingProtocolIkeV2,
		VPNGatewayTunnelingProtocolOpenVPN,
	}
}

// VPNType - The type of this virtual network gateway.
type VPNType string

const (
	VPNTypePolicyBased VPNType = "PolicyBased"
	VPNTypeRouteBased  VPNType = "RouteBased"
)

// PossibleVPNTypeValues returns the possible values for the VPNType const type.
func PossibleVPNTypeValues() []VPNType {
	return []VPNType{
		VPNTypePolicyBased,
		VPNTypeRouteBased,
	}
}

// VerbosityLevel - Verbosity level.
type VerbosityLevel string

const (
	VerbosityLevelFull    VerbosityLevel = "Full"
	VerbosityLevelMinimum VerbosityLevel = "Minimum"
	VerbosityLevelNormal  VerbosityLevel = "Normal"
)

// PossibleVerbosityLevelValues returns the possible values for the VerbosityLevel const type.
func PossibleVerbosityLevelValues() []VerbosityLevel {
	return []VerbosityLevel{
		VerbosityLevelFull,
		VerbosityLevelMinimum,
		VerbosityLevelNormal,
	}
}

// VirtualNetworkGatewayConnectionProtocol - Gateway connection protocol.
type VirtualNetworkGatewayConnectionProtocol string

const (
	VirtualNetworkGatewayConnectionProtocolIKEv1 VirtualNetworkGatewayConnectionProtocol = "IKEv1"
	VirtualNetworkGatewayConnectionProtocolIKEv2 VirtualNetworkGatewayConnectionProtocol = "IKEv2"
)

// PossibleVirtualNetworkGatewayConnectionProtocolValues returns the possible values for the VirtualNetworkGatewayConnectionProtocol const type.
func PossibleVirtualNetworkGatewayConnectionProtocolValues() []VirtualNetworkGatewayConnectionProtocol {
	return []VirtualNetworkGatewayConnectionProtocol{
		VirtualNetworkGatewayConnectionProtocolIKEv1,
		VirtualNetworkGatewayConnectionProtocolIKEv2,
	}
}

// VirtualNetworkGatewayConnectionStatus - Virtual Network Gateway connection status.
type VirtualNetworkGatewayConnectionStatus string

const (
	VirtualNetworkGatewayConnectionStatusConnected    VirtualNetworkGatewayConnectionStatus = "Connected"
	VirtualNetworkGatewayConnectionStatusConnecting   VirtualNetworkGatewayConnectionStatus = "Connecting"
	VirtualNetworkGatewayConnectionStatusNotConnected VirtualNetworkGatewayConnectionStatus = "NotConnected"
	VirtualNetworkGatewayConnectionStatusUnknown      VirtualNetworkGatewayConnectionStatus = "Unknown"
)

// PossibleVirtualNetworkGatewayConnectionStatusValues returns the possible values for the VirtualNetworkGatewayConnectionStatus const type.
func PossibleVirtualNetworkGatewayConnectionStatusValues() []VirtualNetworkGatewayConnectionStatus {
	return []VirtualNetworkGatewayConnectionStatus{
		VirtualNetworkGatewayConnectionStatusConnected,
		VirtualNetworkGatewayConnectionStatusConnecting,
		VirtualNetworkGatewayConnectionStatusNotConnected,
		VirtualNetworkGatewayConnectionStatusUnknown,
	}
}

// VirtualNetworkGatewayConnectionType - Gateway connection type.
type VirtualNetworkGatewayConnectionType string

const (
	VirtualNetworkGatewayConnectionTypeExpressRoute VirtualNetworkGatewayConnectionType = "ExpressRoute"
	VirtualNetworkGatewayConnectionTypeIPsec        VirtualNetworkGatewayConnectionType = "IPsec"
	VirtualNetworkGatewayConnectionTypeVPNClient    VirtualNetworkGatewayConnectionType = "VPNClient"
	VirtualNetworkGatewayConnectionTypeVnet2Vnet    VirtualNetworkGatewayConnectionType = "Vnet2Vnet"
)

// PossibleVirtualNetworkGatewayConnectionTypeValues returns the possible values for the VirtualNetworkGatewayConnectionType const type.
func PossibleVirtualNetworkGatewayConnectionTypeValues() []VirtualNetworkGatewayConnectionType {
	return []VirtualNetworkGatewayConnectionType{
		VirtualNetworkGatewayConnectionTypeExpressRoute,
		VirtualNetworkGatewayConnectionTypeIPsec,
		VirtualNetworkGatewayConnectionTypeVPNClient,
		VirtualNetworkGatewayConnectionTypeVnet2Vnet,
	}
}

// VirtualNetworkGatewaySKUName - Gateway SKU name.
type VirtualNetworkGatewaySKUName string

const (
	VirtualNetworkGatewaySKUNameBasic            VirtualNetworkGatewaySKUName = "Basic"
	VirtualNetworkGatewaySKUNameErGw1AZ          VirtualNetworkGatewaySKUName = "ErGw1AZ"
	VirtualNetworkGatewaySKUNameErGw2AZ          VirtualNetworkGatewaySKUName = "ErGw2AZ"
	VirtualNetworkGatewaySKUNameErGw3AZ          VirtualNetworkGatewaySKUName = "ErGw3AZ"
	VirtualNetworkGatewaySKUNameHighPerformance  VirtualNetworkGatewaySKUName = "HighPerformance"
	VirtualNetworkGatewaySKUNameStandard         VirtualNetworkGatewaySKUName = "Standard"
	VirtualNetworkGatewaySKUNameUltraPerformance VirtualNetworkGatewaySKUName = "UltraPerformance"
	VirtualNetworkGatewaySKUNameVPNGw1           VirtualNetworkGatewaySKUName = "VpnGw1"
	VirtualNetworkGatewaySKUNameVPNGw1AZ         VirtualNetworkGatewaySKUName = "VpnGw1AZ"
	VirtualNetworkGatewaySKUNameVPNGw2           VirtualNetworkGatewaySKUName = "VpnGw2"
	VirtualNetworkGatewaySKUNameVPNGw2AZ         VirtualNetworkGatewaySKUName = "VpnGw2AZ"
	VirtualNetworkGatewaySKUNameVPNGw3           VirtualNetworkGatewaySKUName = "VpnGw3"
	VirtualNetworkGatewaySKUNameVPNGw3AZ         VirtualNetworkGatewaySKUName = "VpnGw3AZ"
	VirtualNetworkGatewaySKUNameVPNGw4           VirtualNetworkGatewaySKUName = "VpnGw4"
	VirtualNetworkGatewaySKUNameVPNGw4AZ         VirtualNetworkGatewaySKUName = "VpnGw4AZ"
	VirtualNetworkGatewaySKUNameVPNGw5           VirtualNetworkGatewaySKUName = "VpnGw5"
	VirtualNetworkGatewaySKUNameVPNGw5AZ         VirtualNetworkGatewaySKUName = "VpnGw5AZ"
)

// PossibleVirtualNetworkGatewaySKUNameValues returns the possible values for the VirtualNetworkGatewaySKUName const type.
func PossibleVirtualNetworkGatewaySKUNameValues() []VirtualNetworkGatewaySKUName {
	return []VirtualNetworkGatewaySKUName{
		VirtualNetworkGatewaySKUNameBasic,
		VirtualNetworkGatewaySKUNameErGw1AZ,
		VirtualNetworkGatewaySKUNameErGw2AZ,
		VirtualNetworkGatewaySKUNameErGw3AZ,
		VirtualNetworkGatewaySKUNameHighPerformance,
		VirtualNetworkGatewaySKUNameStandard,
		VirtualNetworkGatewaySKUNameUltraPerformance,
		VirtualNetworkGatewaySKUNameVPNGw1,
		VirtualNetworkGatewaySKUNameVPNGw1AZ,
		VirtualNetworkGatewaySKUNameVPNGw2,
		VirtualNetworkGatewaySKUNameVPNGw2AZ,
		VirtualNetworkGatewaySKUNameVPNGw3,
		VirtualNetworkGatewaySKUNameVPNGw3AZ,
		VirtualNetworkGatewaySKUNameVPNGw4,
		VirtualNetworkGatewaySKUNameVPNGw4AZ,
		VirtualNetworkGatewaySKUNameVPNGw5,
		VirtualNetworkGatewaySKUNameVPNGw5AZ,
	}
}

// VirtualNetworkGatewaySKUTier - Gateway SKU tier.
type VirtualNetworkGatewaySKUTier string

const (
	VirtualNetworkGatewaySKUTierBasic            VirtualNetworkGatewaySKUTier = "Basic"
	VirtualNetworkGatewaySKUTierErGw1AZ          VirtualNetworkGatewaySKUTier = "ErGw1AZ"
	VirtualNetworkGatewaySKUTierErGw2AZ          VirtualNetworkGatewaySKUTier = "ErGw2AZ"
	VirtualNetworkGatewaySKUTierErGw3AZ          VirtualNetworkGatewaySKUTier = "ErGw3AZ"
	VirtualNetworkGatewaySKUTierHighPerformance  VirtualNetworkGatewaySKUTier = "HighPerformance"
	VirtualNetworkGatewaySKUTierStandard         VirtualNetworkGatewaySKUTier = "Standard"
	VirtualNetworkGatewaySKUTierUltraPerformance VirtualNetworkGatewaySKUTier = "UltraPerformance"
	VirtualNetworkGatewaySKUTierVPNGw1           VirtualNetworkGatewaySKUTier = "VpnGw1"
	VirtualNetworkGatewaySKUTierVPNGw1AZ         VirtualNetworkGatewaySKUTier = "VpnGw1AZ"
	VirtualNetworkGatewaySKUTierVPNGw2           VirtualNetworkGatewaySKUTier = "VpnGw2"
	VirtualNetworkGatewaySKUTierVPNGw2AZ         VirtualNetworkGatewaySKUTier = "VpnGw2AZ"
	VirtualNetworkGatewaySKUTierVPNGw3           VirtualNetworkGatewaySKUTier = "VpnGw3"
	VirtualNetworkGatewaySKUTierVPNGw3AZ         VirtualNetworkGatewaySKUTier = "VpnGw3AZ"
	VirtualNetworkGatewaySKUTierVPNGw4           VirtualNetworkGatewaySKUTier = "VpnGw4"
	VirtualNetworkGatewaySKUTierVPNGw4AZ         VirtualNetworkGatewaySKUTier = "VpnGw4AZ"
	VirtualNetworkGatewaySKUTierVPNGw5           VirtualNetworkGatewaySKUTier = "VpnGw5"
	VirtualNetworkGatewaySKUTierVPNGw5AZ         VirtualNetworkGatewaySKUTier = "VpnGw5AZ"
)

// PossibleVirtualNetworkGatewaySKUTierValues returns the possible values for the VirtualNetworkGatewaySKUTier const type.
func PossibleVirtualNetworkGatewaySKUTierValues() []VirtualNetworkGatewaySKUTier {
	return []VirtualNetworkGatewaySKUTier{
		VirtualNetworkGatewaySKUTierBasic,
		VirtualNetworkGatewaySKUTierErGw1AZ,
		VirtualNetworkGatewaySKUTierErGw2AZ,
		VirtualNetworkGatewaySKUTierErGw3AZ,
		VirtualNetworkGatewaySKUTierHighPerformance,
		VirtualNetworkGatewaySKUTierStandard,
		VirtualNetworkGatewaySKUTierUltraPerformance,
		VirtualNetworkGatewaySKUTierVPNGw1,
		VirtualNetworkGatewaySKUTierVPNGw1AZ,
		VirtualNetworkGatewaySKUTierVPNGw2,
		VirtualNetworkGatewaySKUTierVPNGw2AZ,
		VirtualNetworkGatewaySKUTierVPNGw3,
		VirtualNetworkGatewaySKUTierVPNGw3AZ,
		VirtualNetworkGatewaySKUTierVPNGw4,
		VirtualNetworkGatewaySKUTierVPNGw4AZ,
		VirtualNetworkGatewaySKUTierVPNGw5,
		VirtualNetworkGatewaySKUTierVPNGw5AZ,
	}
}

// VirtualNetworkGatewayType - The type of this virtual network gateway.
type VirtualNetworkGatewayType string

const (
	VirtualNetworkGatewayTypeExpressRoute VirtualNetworkGatewayType = "ExpressRoute"
	VirtualNetworkGatewayTypeVPN          VirtualNetworkGatewayType = "Vpn"
)

// PossibleVirtualNetworkGatewayTypeValues returns the possible values for the VirtualNetworkGatewayType const type.
func PossibleVirtualNetworkGatewayTypeValues() []VirtualNetworkGatewayType {
	return []VirtualNetworkGatewayType{
		VirtualNetworkGatewayTypeExpressRoute,
		VirtualNetworkGatewayTypeVPN,
	}
}

// VirtualNetworkPeeringState - The status of the virtual network peering.
type VirtualNetworkPeeringState string

const (
	VirtualNetworkPeeringStateConnected    VirtualNetworkPeeringState = "Connected"
	VirtualNetworkPeeringStateDisconnected VirtualNetworkPeeringState = "Disconnected"
	VirtualNetworkPeeringStateInitiated    VirtualNetworkPeeringState = "Initiated"
)

// PossibleVirtualNetworkPeeringStateValues returns the possible values for the VirtualNetworkPeeringState const type.
func PossibleVirtualNetworkPeeringStateValues() []VirtualNetworkPeeringState {
	return []VirtualNetworkPeeringState{
		VirtualNetworkPeeringStateConnected,
		VirtualNetworkPeeringStateDisconnected,
		VirtualNetworkPeeringStateInitiated,
	}
}

// VirtualWanSecurityProviderType - The virtual wan security provider type.
type VirtualWanSecurityProviderType string

const (
	VirtualWanSecurityProviderTypeExternal VirtualWanSecurityProviderType = "External"
	VirtualWanSecurityProviderTypeNative   VirtualWanSecurityProviderType = "Native"
)

// PossibleVirtualWanSecurityProviderTypeValues returns the possible values for the VirtualWanSecurityProviderType const type.
func PossibleVirtualWanSecurityProviderTypeValues() []VirtualWanSecurityProviderType {
	return []VirtualWanSecurityProviderType{
		VirtualWanSecurityProviderTypeExternal,
		VirtualWanSecurityProviderTypeNative,
	}
}

// WebApplicationFirewallAction - Type of Actions.
type WebApplicationFirewallAction string

const (
	WebApplicationFirewallActionAllow WebApplicationFirewallAction = "Allow"
	WebApplicationFirewallActionBlock WebApplicationFirewallAction = "Block"
	WebApplicationFirewallActionLog   WebApplicationFirewallAction = "Log"
)

// PossibleWebApplicationFirewallActionValues returns the possible values for the WebApplicationFirewallAction const type.
func PossibleWebApplicationFirewallActionValues() []WebApplicationFirewallAction {
	return []WebApplicationFirewallAction{
		WebApplicationFirewallActionAllow,
		WebApplicationFirewallActionBlock,
		WebApplicationFirewallActionLog,
	}
}

// WebApplicationFirewallEnabledState - The state of the policy.
type WebApplicationFirewallEnabledState string

const (
	WebApplicationFirewallEnabledStateDisabled WebApplicationFirewallEnabledState = "Disabled"
	WebApplicationFirewallEnabledStateEnabled  WebApplicationFirewallEnabledState = "Enabled"
)

// PossibleWebApplicationFirewallEnabledStateValues returns the possible values for the WebApplicationFirewallEnabledState const type.
func PossibleWebApplicationFirewallEnabledStateValues() []WebApplicationFirewallEnabledState {
	return []WebApplicationFirewallEnabledState{
		WebApplicationFirewallEnabledStateDisabled,
		WebApplicationFirewallEnabledStateEnabled,
	}
}

// WebApplicationFirewallMatchVariable - Match Variable.
type WebApplicationFirewallMatchVariable string

const (
	WebApplicationFirewallMatchVariablePostArgs       WebApplicationFirewallMatchVariable = "PostArgs"
	WebApplicationFirewallMatchVariableQueryString    WebApplicationFirewallMatchVariable = "QueryString"
	WebApplicationFirewallMatchVariableRemoteAddr     WebApplicationFirewallMatchVariable = "RemoteAddr"
	WebApplicationFirewallMatchVariableRequestBody    WebApplicationFirewallMatchVariable = "RequestBody"
	WebApplicationFirewallMatchVariableRequestCookies WebApplicationFirewallMatchVariable = "RequestCookies"
	WebApplicationFirewallMatchVariableRequestHeaders WebApplicationFirewallMatchVariable = "RequestHeaders"
	WebApplicationFirewallMatchVariableRequestMethod  WebApplicationFirewallMatchVariable = "RequestMethod"
	WebApplicationFirewallMatchVariableRequestURI     WebApplicationFirewallMatchVariable = "RequestUri"
)

// PossibleWebApplicationFirewallMatchVariableValues returns the possible values for the WebApplicationFirewallMatchVariable const type.
func PossibleWebApplicationFirewallMatchVariableValues() []WebApplicationFirewallMatchVariable {
	return []WebApplicationFirewallMatchVariable{
		WebApplicationFirewallMatchVariablePostArgs,
		WebApplicationFirewallMatchVariableQueryString,
		WebApplicationFirewallMatchVariableRemoteAddr,
		WebApplicationFirewallMatchVariableRequestBody,
		WebApplicationFirewallMatchVariableRequestCookies,
		WebApplicationFirewallMatchVariableRequestHeaders,
		WebApplicationFirewallMatchVariableRequestMethod,
		WebApplicationFirewallMatchVariableRequestURI,
	}
}

// WebApplicationFirewallMode - The mode of the policy.
type WebApplicationFirewallMode string

const (
	WebApplicationFirewallModeDetection  WebApplicationFirewallMode = "Detection"
	WebApplicationFirewallModePrevention WebApplicationFirewallMode = "Prevention"
)

// PossibleWebApplicationFirewallModeValues returns the possible values for the WebApplicationFirewallMode const type.
func PossibleWebApplicationFirewallModeValues() []WebApplicationFirewallMode {
	return []WebApplicationFirewallMode{
		WebApplicationFirewallModeDetection,
		WebApplicationFirewallModePrevention,
	}
}

// WebApplicationFirewallOperator - The operator to be matched.
type WebApplicationFirewallOperator string

const (
	WebApplicationFirewallOperatorBeginsWith         WebApplicationFirewallOperator = "BeginsWith"
	WebApplicationFirewallOperatorContains           WebApplicationFirewallOperator = "Contains"
	WebApplicationFirewallOperatorEndsWith           WebApplicationFirewallOperator = "EndsWith"
	WebApplicationFirewallOperatorEqual              WebApplicationFirewallOperator = "Equal"
	WebApplicationFirewallOperatorGeoMatch           WebApplicationFirewallOperator = "GeoMatch"
	WebApplicationFirewallOperatorGreaterThan        WebApplicationFirewallOperator = "GreaterThan"
	WebApplicationFirewallOperatorGreaterThanOrEqual WebApplicationFirewallOperator = "GreaterThanOrEqual"
	WebApplicationFirewallOperatorIPMatch            WebApplicationFirewallOperator = "IPMatch"
	WebApplicationFirewallOperatorLessThan           WebApplicationFirewallOperator = "LessThan"
	WebApplicationFirewallOperatorLessThanOrEqual    WebApplicationFirewallOperator = "LessThanOrEqual"
	WebApplicationFirewallOperatorRegex              WebApplicationFirewallOperator = "Regex"
)

// PossibleWebApplicationFirewallOperatorValues returns the possible values for the WebApplicationFirewallOperator const type.
func PossibleWebApplicationFirewallOperatorValues() []WebApplicationFirewallOperator {
	return []WebApplicationFirewallOperator{
		WebApplicationFirewallOperatorBeginsWith,
		WebApplicationFirewallOperatorContains,
		WebApplicationFirewallOperatorEndsWith,
		WebApplicationFirewallOperatorEqual,
		WebApplicationFirewallOperatorGeoMatch,
		WebApplicationFirewallOperatorGreaterThan,
		WebApplicationFirewallOperatorGreaterThanOrEqual,
		WebApplicationFirewallOperatorIPMatch,
		WebApplicationFirewallOperatorLessThan,
		WebApplicationFirewallOperatorLessThanOrEqual,
		WebApplicationFirewallOperatorRegex,
	}
}

// WebApplicationFirewallPolicyResourceState - Resource status of the policy.
type WebApplicationFirewallPolicyResourceState string

const (
	WebApplicationFirewallPolicyResourceStateCreating  WebApplicationFirewallPolicyResourceState = "Creating"
	WebApplicationFirewallPolicyResourceStateDeleting  WebApplicationFirewallPolicyResourceState = "Deleting"
	WebApplicationFirewallPolicyResourceStateDisabled  WebApplicationFirewallPolicyResourceState = "Disabled"
	WebApplicationFirewallPolicyResourceStateDisabling WebApplicationFirewallPolicyResourceState = "Disabling"
	WebApplicationFirewallPolicyResourceStateEnabled   WebApplicationFirewallPolicyResourceState = "Enabled"
	WebApplicationFirewallPolicyResourceStateEnabling  WebApplicationFirewallPolicyResourceState = "Enabling"
)

// PossibleWebApplicationFirewallPolicyResourceStateValues returns the possible values for the WebApplicationFirewallPolicyResourceState const type.
func PossibleWebApplicationFirewallPolicyResourceStateValues() []WebApplicationFirewallPolicyResourceState {
	return []WebApplicationFirewallPolicyResourceState{
		WebApplicationFirewallPolicyResourceStateCreating,
		WebApplicationFirewallPolicyResourceStateDeleting,
		WebApplicationFirewallPolicyResourceStateDisabled,
		WebApplicationFirewallPolicyResourceStateDisabling,
		WebApplicationFirewallPolicyResourceStateEnabled,
		WebApplicationFirewallPolicyResourceStateEnabling,
	}
}

// WebApplicationFirewallRuleType - The rule type.
type WebApplicationFirewallRuleType string

const (
	WebApplicationFirewallRuleTypeInvalid   WebApplicationFirewallRuleType = "Invalid"
	WebApplicationFirewallRuleTypeMatchRule WebApplicationFirewallRuleType = "MatchRule"
)

// PossibleWebApplicationFirewallRuleTypeValues returns the possible values for the WebApplicationFirewallRuleType const type.
func PossibleWebApplicationFirewallRuleTypeValues() []WebApplicationFirewallRuleType {
	return []WebApplicationFirewallRuleType{
		WebApplicationFirewallRuleTypeInvalid,
		WebApplicationFirewallRuleTypeMatchRule,
	}
}

// WebApplicationFirewallTransform - Transforms applied before matching.
type WebApplicationFirewallTransform string

const (
	WebApplicationFirewallTransformHTMLEntityDecode WebApplicationFirewallTransform = "HtmlEntityDecode"
	WebApplicationFirewallTransformLowercase        WebApplicationFirewallTransform = "Lowercase"
	WebApplicationFirewallTransformRemoveNulls      WebApplicationFirewallTransform = "RemoveNulls"
	WebApplicationFirewallTransformTrim             WebApplicationFirewallTransform = "Trim"
	WebApplicationFirewallTransformURLDecode        WebApplicationFirewallTransform = "UrlDecode"
	WebApplicationFirewallTransformURLEncode        WebApplicationFirewallTransform = "UrlEncode"
)

// PossibleWebApplicationFirewallTransformValues returns the possible values for the WebApplicationFirewallTransform const type.
func PossibleWebApplicationFirewallTransformValues() []WebApplicationFirewallTransform {
	return []WebApplicationFirewallTransform{
		WebApplicationFirewallTransformHTMLEntityDecode,
		WebApplicationFirewallTransformLowercase,
		WebApplicationFirewallTransformRemoveNulls,
		WebApplicationFirewallTransformTrim,
		WebApplicationFirewallTransformURLDecode,
		WebApplicationFirewallTransformURLEncode,
	}
}
