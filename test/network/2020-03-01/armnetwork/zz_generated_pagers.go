// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetwork

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"reflect"
)

type ApplicationGatewaysListAllPager interface {
	azcore.Pager
	// PageResponse returns the current ApplicationGatewaysListAllResponse.
	PageResponse() ApplicationGatewaysListAllResponse
}

type applicationGatewaysListAllPager struct {
	client    *ApplicationGatewaysClient
	current   ApplicationGatewaysListAllResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ApplicationGatewaysListAllResponse) (*azcore.Request, error)
}

func (p *applicationGatewaysListAllPager) Err() error {
	return p.err
}

func (p *applicationGatewaysListAllPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ApplicationGatewayListResult.NextLink == nil || len(*p.current.ApplicationGatewayListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAllHandleError(resp)
		return false
	}
	result, err := p.client.listAllHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *applicationGatewaysListAllPager) PageResponse() ApplicationGatewaysListAllResponse {
	return p.current
}

type ApplicationGatewaysListAvailableSSLPredefinedPoliciesPager interface {
	azcore.Pager
	// PageResponse returns the current ApplicationGatewaysListAvailableSSLPredefinedPoliciesResponse.
	PageResponse() ApplicationGatewaysListAvailableSSLPredefinedPoliciesResponse
}

type applicationGatewaysListAvailableSSLPredefinedPoliciesPager struct {
	client    *ApplicationGatewaysClient
	current   ApplicationGatewaysListAvailableSSLPredefinedPoliciesResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ApplicationGatewaysListAvailableSSLPredefinedPoliciesResponse) (*azcore.Request, error)
}

func (p *applicationGatewaysListAvailableSSLPredefinedPoliciesPager) Err() error {
	return p.err
}

func (p *applicationGatewaysListAvailableSSLPredefinedPoliciesPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ApplicationGatewayAvailableSSLPredefinedPolicies.NextLink == nil || len(*p.current.ApplicationGatewayAvailableSSLPredefinedPolicies.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAvailableSSLPredefinedPoliciesHandleError(resp)
		return false
	}
	result, err := p.client.listAvailableSSLPredefinedPoliciesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *applicationGatewaysListAvailableSSLPredefinedPoliciesPager) PageResponse() ApplicationGatewaysListAvailableSSLPredefinedPoliciesResponse {
	return p.current
}

type ApplicationGatewaysListPager interface {
	azcore.Pager
	// PageResponse returns the current ApplicationGatewaysListResponse.
	PageResponse() ApplicationGatewaysListResponse
}

type applicationGatewaysListPager struct {
	client    *ApplicationGatewaysClient
	current   ApplicationGatewaysListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ApplicationGatewaysListResponse) (*azcore.Request, error)
}

func (p *applicationGatewaysListPager) Err() error {
	return p.err
}

func (p *applicationGatewaysListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ApplicationGatewayListResult.NextLink == nil || len(*p.current.ApplicationGatewayListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *applicationGatewaysListPager) PageResponse() ApplicationGatewaysListResponse {
	return p.current
}

type ApplicationSecurityGroupsListAllPager interface {
	azcore.Pager
	// PageResponse returns the current ApplicationSecurityGroupsListAllResponse.
	PageResponse() ApplicationSecurityGroupsListAllResponse
}

type applicationSecurityGroupsListAllPager struct {
	client    *ApplicationSecurityGroupsClient
	current   ApplicationSecurityGroupsListAllResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ApplicationSecurityGroupsListAllResponse) (*azcore.Request, error)
}

func (p *applicationSecurityGroupsListAllPager) Err() error {
	return p.err
}

func (p *applicationSecurityGroupsListAllPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ApplicationSecurityGroupListResult.NextLink == nil || len(*p.current.ApplicationSecurityGroupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAllHandleError(resp)
		return false
	}
	result, err := p.client.listAllHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *applicationSecurityGroupsListAllPager) PageResponse() ApplicationSecurityGroupsListAllResponse {
	return p.current
}

type ApplicationSecurityGroupsListPager interface {
	azcore.Pager
	// PageResponse returns the current ApplicationSecurityGroupsListResponse.
	PageResponse() ApplicationSecurityGroupsListResponse
}

type applicationSecurityGroupsListPager struct {
	client    *ApplicationSecurityGroupsClient
	current   ApplicationSecurityGroupsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ApplicationSecurityGroupsListResponse) (*azcore.Request, error)
}

func (p *applicationSecurityGroupsListPager) Err() error {
	return p.err
}

func (p *applicationSecurityGroupsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ApplicationSecurityGroupListResult.NextLink == nil || len(*p.current.ApplicationSecurityGroupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *applicationSecurityGroupsListPager) PageResponse() ApplicationSecurityGroupsListResponse {
	return p.current
}

type AvailableDelegationsListPager interface {
	azcore.Pager
	// PageResponse returns the current AvailableDelegationsListResponse.
	PageResponse() AvailableDelegationsListResponse
}

type availableDelegationsListPager struct {
	client    *AvailableDelegationsClient
	current   AvailableDelegationsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AvailableDelegationsListResponse) (*azcore.Request, error)
}

func (p *availableDelegationsListPager) Err() error {
	return p.err
}

func (p *availableDelegationsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AvailableDelegationsResult.NextLink == nil || len(*p.current.AvailableDelegationsResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *availableDelegationsListPager) PageResponse() AvailableDelegationsListResponse {
	return p.current
}

type AvailableEndpointServicesListPager interface {
	azcore.Pager
	// PageResponse returns the current AvailableEndpointServicesListResponse.
	PageResponse() AvailableEndpointServicesListResponse
}

type availableEndpointServicesListPager struct {
	client    *AvailableEndpointServicesClient
	current   AvailableEndpointServicesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AvailableEndpointServicesListResponse) (*azcore.Request, error)
}

func (p *availableEndpointServicesListPager) Err() error {
	return p.err
}

func (p *availableEndpointServicesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EndpointServicesListResult.NextLink == nil || len(*p.current.EndpointServicesListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *availableEndpointServicesListPager) PageResponse() AvailableEndpointServicesListResponse {
	return p.current
}

type AvailablePrivateEndpointTypesListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current AvailablePrivateEndpointTypesListByResourceGroupResponse.
	PageResponse() AvailablePrivateEndpointTypesListByResourceGroupResponse
}

type availablePrivateEndpointTypesListByResourceGroupPager struct {
	client    *AvailablePrivateEndpointTypesClient
	current   AvailablePrivateEndpointTypesListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AvailablePrivateEndpointTypesListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *availablePrivateEndpointTypesListByResourceGroupPager) Err() error {
	return p.err
}

func (p *availablePrivateEndpointTypesListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AvailablePrivateEndpointTypesResult.NextLink == nil || len(*p.current.AvailablePrivateEndpointTypesResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *availablePrivateEndpointTypesListByResourceGroupPager) PageResponse() AvailablePrivateEndpointTypesListByResourceGroupResponse {
	return p.current
}

type AvailablePrivateEndpointTypesListPager interface {
	azcore.Pager
	// PageResponse returns the current AvailablePrivateEndpointTypesListResponse.
	PageResponse() AvailablePrivateEndpointTypesListResponse
}

type availablePrivateEndpointTypesListPager struct {
	client    *AvailablePrivateEndpointTypesClient
	current   AvailablePrivateEndpointTypesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AvailablePrivateEndpointTypesListResponse) (*azcore.Request, error)
}

func (p *availablePrivateEndpointTypesListPager) Err() error {
	return p.err
}

func (p *availablePrivateEndpointTypesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AvailablePrivateEndpointTypesResult.NextLink == nil || len(*p.current.AvailablePrivateEndpointTypesResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *availablePrivateEndpointTypesListPager) PageResponse() AvailablePrivateEndpointTypesListResponse {
	return p.current
}

type AvailableResourceGroupDelegationsListPager interface {
	azcore.Pager
	// PageResponse returns the current AvailableResourceGroupDelegationsListResponse.
	PageResponse() AvailableResourceGroupDelegationsListResponse
}

type availableResourceGroupDelegationsListPager struct {
	client    *AvailableResourceGroupDelegationsClient
	current   AvailableResourceGroupDelegationsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AvailableResourceGroupDelegationsListResponse) (*azcore.Request, error)
}

func (p *availableResourceGroupDelegationsListPager) Err() error {
	return p.err
}

func (p *availableResourceGroupDelegationsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AvailableDelegationsResult.NextLink == nil || len(*p.current.AvailableDelegationsResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *availableResourceGroupDelegationsListPager) PageResponse() AvailableResourceGroupDelegationsListResponse {
	return p.current
}

type AvailableServiceAliasesListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current AvailableServiceAliasesListByResourceGroupResponse.
	PageResponse() AvailableServiceAliasesListByResourceGroupResponse
}

type availableServiceAliasesListByResourceGroupPager struct {
	client    *AvailableServiceAliasesClient
	current   AvailableServiceAliasesListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AvailableServiceAliasesListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *availableServiceAliasesListByResourceGroupPager) Err() error {
	return p.err
}

func (p *availableServiceAliasesListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AvailableServiceAliasesResult.NextLink == nil || len(*p.current.AvailableServiceAliasesResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *availableServiceAliasesListByResourceGroupPager) PageResponse() AvailableServiceAliasesListByResourceGroupResponse {
	return p.current
}

type AvailableServiceAliasesListPager interface {
	azcore.Pager
	// PageResponse returns the current AvailableServiceAliasesListResponse.
	PageResponse() AvailableServiceAliasesListResponse
}

type availableServiceAliasesListPager struct {
	client    *AvailableServiceAliasesClient
	current   AvailableServiceAliasesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AvailableServiceAliasesListResponse) (*azcore.Request, error)
}

func (p *availableServiceAliasesListPager) Err() error {
	return p.err
}

func (p *availableServiceAliasesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AvailableServiceAliasesResult.NextLink == nil || len(*p.current.AvailableServiceAliasesResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *availableServiceAliasesListPager) PageResponse() AvailableServiceAliasesListResponse {
	return p.current
}

type AzureFirewallFqdnTagsListAllPager interface {
	azcore.Pager
	// PageResponse returns the current AzureFirewallFqdnTagsListAllResponse.
	PageResponse() AzureFirewallFqdnTagsListAllResponse
}

type azureFirewallFqdnTagsListAllPager struct {
	client    *AzureFirewallFqdnTagsClient
	current   AzureFirewallFqdnTagsListAllResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AzureFirewallFqdnTagsListAllResponse) (*azcore.Request, error)
}

func (p *azureFirewallFqdnTagsListAllPager) Err() error {
	return p.err
}

func (p *azureFirewallFqdnTagsListAllPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AzureFirewallFqdnTagListResult.NextLink == nil || len(*p.current.AzureFirewallFqdnTagListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAllHandleError(resp)
		return false
	}
	result, err := p.client.listAllHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *azureFirewallFqdnTagsListAllPager) PageResponse() AzureFirewallFqdnTagsListAllResponse {
	return p.current
}

type AzureFirewallsListAllPager interface {
	azcore.Pager
	// PageResponse returns the current AzureFirewallsListAllResponse.
	PageResponse() AzureFirewallsListAllResponse
}

type azureFirewallsListAllPager struct {
	client    *AzureFirewallsClient
	current   AzureFirewallsListAllResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AzureFirewallsListAllResponse) (*azcore.Request, error)
}

func (p *azureFirewallsListAllPager) Err() error {
	return p.err
}

func (p *azureFirewallsListAllPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AzureFirewallListResult.NextLink == nil || len(*p.current.AzureFirewallListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAllHandleError(resp)
		return false
	}
	result, err := p.client.listAllHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *azureFirewallsListAllPager) PageResponse() AzureFirewallsListAllResponse {
	return p.current
}

type AzureFirewallsListPager interface {
	azcore.Pager
	// PageResponse returns the current AzureFirewallsListResponse.
	PageResponse() AzureFirewallsListResponse
}

type azureFirewallsListPager struct {
	client    *AzureFirewallsClient
	current   AzureFirewallsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AzureFirewallsListResponse) (*azcore.Request, error)
}

func (p *azureFirewallsListPager) Err() error {
	return p.err
}

func (p *azureFirewallsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AzureFirewallListResult.NextLink == nil || len(*p.current.AzureFirewallListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *azureFirewallsListPager) PageResponse() AzureFirewallsListResponse {
	return p.current
}

type BastionHostsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current BastionHostsListByResourceGroupResponse.
	PageResponse() BastionHostsListByResourceGroupResponse
}

type bastionHostsListByResourceGroupPager struct {
	client    *BastionHostsClient
	current   BastionHostsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, BastionHostsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *bastionHostsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *bastionHostsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BastionHostListResult.NextLink == nil || len(*p.current.BastionHostListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *bastionHostsListByResourceGroupPager) PageResponse() BastionHostsListByResourceGroupResponse {
	return p.current
}

type BastionHostsListPager interface {
	azcore.Pager
	// PageResponse returns the current BastionHostsListResponse.
	PageResponse() BastionHostsListResponse
}

type bastionHostsListPager struct {
	client    *BastionHostsClient
	current   BastionHostsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, BastionHostsListResponse) (*azcore.Request, error)
}

func (p *bastionHostsListPager) Err() error {
	return p.err
}

func (p *bastionHostsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BastionHostListResult.NextLink == nil || len(*p.current.BastionHostListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *bastionHostsListPager) PageResponse() BastionHostsListResponse {
	return p.current
}

type BgpServiceCommunitiesListPager interface {
	azcore.Pager
	// PageResponse returns the current BgpServiceCommunitiesListResponse.
	PageResponse() BgpServiceCommunitiesListResponse
}

type bgpServiceCommunitiesListPager struct {
	client    *BgpServiceCommunitiesClient
	current   BgpServiceCommunitiesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, BgpServiceCommunitiesListResponse) (*azcore.Request, error)
}

func (p *bgpServiceCommunitiesListPager) Err() error {
	return p.err
}

func (p *bgpServiceCommunitiesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BgpServiceCommunityListResult.NextLink == nil || len(*p.current.BgpServiceCommunityListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *bgpServiceCommunitiesListPager) PageResponse() BgpServiceCommunitiesListResponse {
	return p.current
}

type DdosProtectionPlansListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current DdosProtectionPlansListByResourceGroupResponse.
	PageResponse() DdosProtectionPlansListByResourceGroupResponse
}

type ddosProtectionPlansListByResourceGroupPager struct {
	client    *DdosProtectionPlansClient
	current   DdosProtectionPlansListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DdosProtectionPlansListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *ddosProtectionPlansListByResourceGroupPager) Err() error {
	return p.err
}

func (p *ddosProtectionPlansListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DdosProtectionPlanListResult.NextLink == nil || len(*p.current.DdosProtectionPlanListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *ddosProtectionPlansListByResourceGroupPager) PageResponse() DdosProtectionPlansListByResourceGroupResponse {
	return p.current
}

type DdosProtectionPlansListPager interface {
	azcore.Pager
	// PageResponse returns the current DdosProtectionPlansListResponse.
	PageResponse() DdosProtectionPlansListResponse
}

type ddosProtectionPlansListPager struct {
	client    *DdosProtectionPlansClient
	current   DdosProtectionPlansListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DdosProtectionPlansListResponse) (*azcore.Request, error)
}

func (p *ddosProtectionPlansListPager) Err() error {
	return p.err
}

func (p *ddosProtectionPlansListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DdosProtectionPlanListResult.NextLink == nil || len(*p.current.DdosProtectionPlanListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *ddosProtectionPlansListPager) PageResponse() DdosProtectionPlansListResponse {
	return p.current
}

type DefaultSecurityRulesListPager interface {
	azcore.Pager
	// PageResponse returns the current DefaultSecurityRulesListResponse.
	PageResponse() DefaultSecurityRulesListResponse
}

type defaultSecurityRulesListPager struct {
	client    *DefaultSecurityRulesClient
	current   DefaultSecurityRulesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DefaultSecurityRulesListResponse) (*azcore.Request, error)
}

func (p *defaultSecurityRulesListPager) Err() error {
	return p.err
}

func (p *defaultSecurityRulesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SecurityRuleListResult.NextLink == nil || len(*p.current.SecurityRuleListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *defaultSecurityRulesListPager) PageResponse() DefaultSecurityRulesListResponse {
	return p.current
}

type ExpressRouteCircuitAuthorizationsListPager interface {
	azcore.Pager
	// PageResponse returns the current ExpressRouteCircuitAuthorizationsListResponse.
	PageResponse() ExpressRouteCircuitAuthorizationsListResponse
}

type expressRouteCircuitAuthorizationsListPager struct {
	client    *ExpressRouteCircuitAuthorizationsClient
	current   ExpressRouteCircuitAuthorizationsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ExpressRouteCircuitAuthorizationsListResponse) (*azcore.Request, error)
}

func (p *expressRouteCircuitAuthorizationsListPager) Err() error {
	return p.err
}

func (p *expressRouteCircuitAuthorizationsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AuthorizationListResult.NextLink == nil || len(*p.current.AuthorizationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *expressRouteCircuitAuthorizationsListPager) PageResponse() ExpressRouteCircuitAuthorizationsListResponse {
	return p.current
}

type ExpressRouteCircuitConnectionsListPager interface {
	azcore.Pager
	// PageResponse returns the current ExpressRouteCircuitConnectionsListResponse.
	PageResponse() ExpressRouteCircuitConnectionsListResponse
}

type expressRouteCircuitConnectionsListPager struct {
	client    *ExpressRouteCircuitConnectionsClient
	current   ExpressRouteCircuitConnectionsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ExpressRouteCircuitConnectionsListResponse) (*azcore.Request, error)
}

func (p *expressRouteCircuitConnectionsListPager) Err() error {
	return p.err
}

func (p *expressRouteCircuitConnectionsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExpressRouteCircuitConnectionListResult.NextLink == nil || len(*p.current.ExpressRouteCircuitConnectionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *expressRouteCircuitConnectionsListPager) PageResponse() ExpressRouteCircuitConnectionsListResponse {
	return p.current
}

type ExpressRouteCircuitPeeringsListPager interface {
	azcore.Pager
	// PageResponse returns the current ExpressRouteCircuitPeeringsListResponse.
	PageResponse() ExpressRouteCircuitPeeringsListResponse
}

type expressRouteCircuitPeeringsListPager struct {
	client    *ExpressRouteCircuitPeeringsClient
	current   ExpressRouteCircuitPeeringsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ExpressRouteCircuitPeeringsListResponse) (*azcore.Request, error)
}

func (p *expressRouteCircuitPeeringsListPager) Err() error {
	return p.err
}

func (p *expressRouteCircuitPeeringsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExpressRouteCircuitPeeringListResult.NextLink == nil || len(*p.current.ExpressRouteCircuitPeeringListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *expressRouteCircuitPeeringsListPager) PageResponse() ExpressRouteCircuitPeeringsListResponse {
	return p.current
}

type ExpressRouteCircuitsListAllPager interface {
	azcore.Pager
	// PageResponse returns the current ExpressRouteCircuitsListAllResponse.
	PageResponse() ExpressRouteCircuitsListAllResponse
}

type expressRouteCircuitsListAllPager struct {
	client    *ExpressRouteCircuitsClient
	current   ExpressRouteCircuitsListAllResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ExpressRouteCircuitsListAllResponse) (*azcore.Request, error)
}

func (p *expressRouteCircuitsListAllPager) Err() error {
	return p.err
}

func (p *expressRouteCircuitsListAllPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExpressRouteCircuitListResult.NextLink == nil || len(*p.current.ExpressRouteCircuitListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAllHandleError(resp)
		return false
	}
	result, err := p.client.listAllHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *expressRouteCircuitsListAllPager) PageResponse() ExpressRouteCircuitsListAllResponse {
	return p.current
}

type ExpressRouteCircuitsListPager interface {
	azcore.Pager
	// PageResponse returns the current ExpressRouteCircuitsListResponse.
	PageResponse() ExpressRouteCircuitsListResponse
}

type expressRouteCircuitsListPager struct {
	client    *ExpressRouteCircuitsClient
	current   ExpressRouteCircuitsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ExpressRouteCircuitsListResponse) (*azcore.Request, error)
}

func (p *expressRouteCircuitsListPager) Err() error {
	return p.err
}

func (p *expressRouteCircuitsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExpressRouteCircuitListResult.NextLink == nil || len(*p.current.ExpressRouteCircuitListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *expressRouteCircuitsListPager) PageResponse() ExpressRouteCircuitsListResponse {
	return p.current
}

type ExpressRouteCrossConnectionPeeringsListPager interface {
	azcore.Pager
	// PageResponse returns the current ExpressRouteCrossConnectionPeeringsListResponse.
	PageResponse() ExpressRouteCrossConnectionPeeringsListResponse
}

type expressRouteCrossConnectionPeeringsListPager struct {
	client    *ExpressRouteCrossConnectionPeeringsClient
	current   ExpressRouteCrossConnectionPeeringsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ExpressRouteCrossConnectionPeeringsListResponse) (*azcore.Request, error)
}

func (p *expressRouteCrossConnectionPeeringsListPager) Err() error {
	return p.err
}

func (p *expressRouteCrossConnectionPeeringsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExpressRouteCrossConnectionPeeringList.NextLink == nil || len(*p.current.ExpressRouteCrossConnectionPeeringList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *expressRouteCrossConnectionPeeringsListPager) PageResponse() ExpressRouteCrossConnectionPeeringsListResponse {
	return p.current
}

type ExpressRouteCrossConnectionsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current ExpressRouteCrossConnectionsListByResourceGroupResponse.
	PageResponse() ExpressRouteCrossConnectionsListByResourceGroupResponse
}

type expressRouteCrossConnectionsListByResourceGroupPager struct {
	client    *ExpressRouteCrossConnectionsClient
	current   ExpressRouteCrossConnectionsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ExpressRouteCrossConnectionsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *expressRouteCrossConnectionsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *expressRouteCrossConnectionsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExpressRouteCrossConnectionListResult.NextLink == nil || len(*p.current.ExpressRouteCrossConnectionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *expressRouteCrossConnectionsListByResourceGroupPager) PageResponse() ExpressRouteCrossConnectionsListByResourceGroupResponse {
	return p.current
}

type ExpressRouteCrossConnectionsListPager interface {
	azcore.Pager
	// PageResponse returns the current ExpressRouteCrossConnectionsListResponse.
	PageResponse() ExpressRouteCrossConnectionsListResponse
}

type expressRouteCrossConnectionsListPager struct {
	client    *ExpressRouteCrossConnectionsClient
	current   ExpressRouteCrossConnectionsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ExpressRouteCrossConnectionsListResponse) (*azcore.Request, error)
}

func (p *expressRouteCrossConnectionsListPager) Err() error {
	return p.err
}

func (p *expressRouteCrossConnectionsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExpressRouteCrossConnectionListResult.NextLink == nil || len(*p.current.ExpressRouteCrossConnectionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *expressRouteCrossConnectionsListPager) PageResponse() ExpressRouteCrossConnectionsListResponse {
	return p.current
}

type ExpressRouteLinksListPager interface {
	azcore.Pager
	// PageResponse returns the current ExpressRouteLinksListResponse.
	PageResponse() ExpressRouteLinksListResponse
}

type expressRouteLinksListPager struct {
	client    *ExpressRouteLinksClient
	current   ExpressRouteLinksListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ExpressRouteLinksListResponse) (*azcore.Request, error)
}

func (p *expressRouteLinksListPager) Err() error {
	return p.err
}

func (p *expressRouteLinksListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExpressRouteLinkListResult.NextLink == nil || len(*p.current.ExpressRouteLinkListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *expressRouteLinksListPager) PageResponse() ExpressRouteLinksListResponse {
	return p.current
}

type ExpressRoutePortsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current ExpressRoutePortsListByResourceGroupResponse.
	PageResponse() ExpressRoutePortsListByResourceGroupResponse
}

type expressRoutePortsListByResourceGroupPager struct {
	client    *ExpressRoutePortsClient
	current   ExpressRoutePortsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ExpressRoutePortsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *expressRoutePortsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *expressRoutePortsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExpressRoutePortListResult.NextLink == nil || len(*p.current.ExpressRoutePortListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *expressRoutePortsListByResourceGroupPager) PageResponse() ExpressRoutePortsListByResourceGroupResponse {
	return p.current
}

type ExpressRoutePortsListPager interface {
	azcore.Pager
	// PageResponse returns the current ExpressRoutePortsListResponse.
	PageResponse() ExpressRoutePortsListResponse
}

type expressRoutePortsListPager struct {
	client    *ExpressRoutePortsClient
	current   ExpressRoutePortsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ExpressRoutePortsListResponse) (*azcore.Request, error)
}

func (p *expressRoutePortsListPager) Err() error {
	return p.err
}

func (p *expressRoutePortsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExpressRoutePortListResult.NextLink == nil || len(*p.current.ExpressRoutePortListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *expressRoutePortsListPager) PageResponse() ExpressRoutePortsListResponse {
	return p.current
}

type ExpressRoutePortsLocationsListPager interface {
	azcore.Pager
	// PageResponse returns the current ExpressRoutePortsLocationsListResponse.
	PageResponse() ExpressRoutePortsLocationsListResponse
}

type expressRoutePortsLocationsListPager struct {
	client    *ExpressRoutePortsLocationsClient
	current   ExpressRoutePortsLocationsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ExpressRoutePortsLocationsListResponse) (*azcore.Request, error)
}

func (p *expressRoutePortsLocationsListPager) Err() error {
	return p.err
}

func (p *expressRoutePortsLocationsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExpressRoutePortsLocationListResult.NextLink == nil || len(*p.current.ExpressRoutePortsLocationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *expressRoutePortsLocationsListPager) PageResponse() ExpressRoutePortsLocationsListResponse {
	return p.current
}

type ExpressRouteServiceProvidersListPager interface {
	azcore.Pager
	// PageResponse returns the current ExpressRouteServiceProvidersListResponse.
	PageResponse() ExpressRouteServiceProvidersListResponse
}

type expressRouteServiceProvidersListPager struct {
	client    *ExpressRouteServiceProvidersClient
	current   ExpressRouteServiceProvidersListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ExpressRouteServiceProvidersListResponse) (*azcore.Request, error)
}

func (p *expressRouteServiceProvidersListPager) Err() error {
	return p.err
}

func (p *expressRouteServiceProvidersListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExpressRouteServiceProviderListResult.NextLink == nil || len(*p.current.ExpressRouteServiceProviderListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *expressRouteServiceProvidersListPager) PageResponse() ExpressRouteServiceProvidersListResponse {
	return p.current
}

type FirewallPoliciesListAllPager interface {
	azcore.Pager
	// PageResponse returns the current FirewallPoliciesListAllResponse.
	PageResponse() FirewallPoliciesListAllResponse
}

type firewallPoliciesListAllPager struct {
	client    *FirewallPoliciesClient
	current   FirewallPoliciesListAllResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, FirewallPoliciesListAllResponse) (*azcore.Request, error)
}

func (p *firewallPoliciesListAllPager) Err() error {
	return p.err
}

func (p *firewallPoliciesListAllPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FirewallPolicyListResult.NextLink == nil || len(*p.current.FirewallPolicyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAllHandleError(resp)
		return false
	}
	result, err := p.client.listAllHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *firewallPoliciesListAllPager) PageResponse() FirewallPoliciesListAllResponse {
	return p.current
}

type FirewallPoliciesListPager interface {
	azcore.Pager
	// PageResponse returns the current FirewallPoliciesListResponse.
	PageResponse() FirewallPoliciesListResponse
}

type firewallPoliciesListPager struct {
	client    *FirewallPoliciesClient
	current   FirewallPoliciesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, FirewallPoliciesListResponse) (*azcore.Request, error)
}

func (p *firewallPoliciesListPager) Err() error {
	return p.err
}

func (p *firewallPoliciesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FirewallPolicyListResult.NextLink == nil || len(*p.current.FirewallPolicyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *firewallPoliciesListPager) PageResponse() FirewallPoliciesListResponse {
	return p.current
}

type FirewallPolicyRuleGroupsListPager interface {
	azcore.Pager
	// PageResponse returns the current FirewallPolicyRuleGroupsListResponse.
	PageResponse() FirewallPolicyRuleGroupsListResponse
}

type firewallPolicyRuleGroupsListPager struct {
	client    *FirewallPolicyRuleGroupsClient
	current   FirewallPolicyRuleGroupsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, FirewallPolicyRuleGroupsListResponse) (*azcore.Request, error)
}

func (p *firewallPolicyRuleGroupsListPager) Err() error {
	return p.err
}

func (p *firewallPolicyRuleGroupsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FirewallPolicyRuleGroupListResult.NextLink == nil || len(*p.current.FirewallPolicyRuleGroupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *firewallPolicyRuleGroupsListPager) PageResponse() FirewallPolicyRuleGroupsListResponse {
	return p.current
}

type FlowLogsListPager interface {
	azcore.Pager
	// PageResponse returns the current FlowLogsListResponse.
	PageResponse() FlowLogsListResponse
}

type flowLogsListPager struct {
	client    *FlowLogsClient
	current   FlowLogsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, FlowLogsListResponse) (*azcore.Request, error)
}

func (p *flowLogsListPager) Err() error {
	return p.err
}

func (p *flowLogsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FlowLogListResult.NextLink == nil || len(*p.current.FlowLogListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *flowLogsListPager) PageResponse() FlowLogsListResponse {
	return p.current
}

type HubVirtualNetworkConnectionsListPager interface {
	azcore.Pager
	// PageResponse returns the current HubVirtualNetworkConnectionsListResponse.
	PageResponse() HubVirtualNetworkConnectionsListResponse
}

type hubVirtualNetworkConnectionsListPager struct {
	client    *HubVirtualNetworkConnectionsClient
	current   HubVirtualNetworkConnectionsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, HubVirtualNetworkConnectionsListResponse) (*azcore.Request, error)
}

func (p *hubVirtualNetworkConnectionsListPager) Err() error {
	return p.err
}

func (p *hubVirtualNetworkConnectionsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListHubVirtualNetworkConnectionsResult.NextLink == nil || len(*p.current.ListHubVirtualNetworkConnectionsResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *hubVirtualNetworkConnectionsListPager) PageResponse() HubVirtualNetworkConnectionsListResponse {
	return p.current
}

type IPAllocationsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current IPAllocationsListByResourceGroupResponse.
	PageResponse() IPAllocationsListByResourceGroupResponse
}

type ipAllocationsListByResourceGroupPager struct {
	client    *IPAllocationsClient
	current   IPAllocationsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, IPAllocationsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *ipAllocationsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *ipAllocationsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IPAllocationListResult.NextLink == nil || len(*p.current.IPAllocationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *ipAllocationsListByResourceGroupPager) PageResponse() IPAllocationsListByResourceGroupResponse {
	return p.current
}

type IPAllocationsListPager interface {
	azcore.Pager
	// PageResponse returns the current IPAllocationsListResponse.
	PageResponse() IPAllocationsListResponse
}

type ipAllocationsListPager struct {
	client    *IPAllocationsClient
	current   IPAllocationsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, IPAllocationsListResponse) (*azcore.Request, error)
}

func (p *ipAllocationsListPager) Err() error {
	return p.err
}

func (p *ipAllocationsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IPAllocationListResult.NextLink == nil || len(*p.current.IPAllocationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *ipAllocationsListPager) PageResponse() IPAllocationsListResponse {
	return p.current
}

type IPGroupsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current IPGroupsListByResourceGroupResponse.
	PageResponse() IPGroupsListByResourceGroupResponse
}

type ipGroupsListByResourceGroupPager struct {
	client    *IPGroupsClient
	current   IPGroupsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, IPGroupsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *ipGroupsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *ipGroupsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IPGroupListResult.NextLink == nil || len(*p.current.IPGroupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *ipGroupsListByResourceGroupPager) PageResponse() IPGroupsListByResourceGroupResponse {
	return p.current
}

type IPGroupsListPager interface {
	azcore.Pager
	// PageResponse returns the current IPGroupsListResponse.
	PageResponse() IPGroupsListResponse
}

type ipGroupsListPager struct {
	client    *IPGroupsClient
	current   IPGroupsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, IPGroupsListResponse) (*azcore.Request, error)
}

func (p *ipGroupsListPager) Err() error {
	return p.err
}

func (p *ipGroupsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IPGroupListResult.NextLink == nil || len(*p.current.IPGroupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *ipGroupsListPager) PageResponse() IPGroupsListResponse {
	return p.current
}

type InboundNatRulesListPager interface {
	azcore.Pager
	// PageResponse returns the current InboundNatRulesListResponse.
	PageResponse() InboundNatRulesListResponse
}

type inboundNatRulesListPager struct {
	client    *InboundNatRulesClient
	current   InboundNatRulesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, InboundNatRulesListResponse) (*azcore.Request, error)
}

func (p *inboundNatRulesListPager) Err() error {
	return p.err
}

func (p *inboundNatRulesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.InboundNatRuleListResult.NextLink == nil || len(*p.current.InboundNatRuleListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *inboundNatRulesListPager) PageResponse() InboundNatRulesListResponse {
	return p.current
}

type LoadBalancerBackendAddressPoolsListPager interface {
	azcore.Pager
	// PageResponse returns the current LoadBalancerBackendAddressPoolsListResponse.
	PageResponse() LoadBalancerBackendAddressPoolsListResponse
}

type loadBalancerBackendAddressPoolsListPager struct {
	client    *LoadBalancerBackendAddressPoolsClient
	current   LoadBalancerBackendAddressPoolsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, LoadBalancerBackendAddressPoolsListResponse) (*azcore.Request, error)
}

func (p *loadBalancerBackendAddressPoolsListPager) Err() error {
	return p.err
}

func (p *loadBalancerBackendAddressPoolsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LoadBalancerBackendAddressPoolListResult.NextLink == nil || len(*p.current.LoadBalancerBackendAddressPoolListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *loadBalancerBackendAddressPoolsListPager) PageResponse() LoadBalancerBackendAddressPoolsListResponse {
	return p.current
}

type LoadBalancerFrontendIPConfigurationsListPager interface {
	azcore.Pager
	// PageResponse returns the current LoadBalancerFrontendIPConfigurationsListResponse.
	PageResponse() LoadBalancerFrontendIPConfigurationsListResponse
}

type loadBalancerFrontendIPConfigurationsListPager struct {
	client    *LoadBalancerFrontendIPConfigurationsClient
	current   LoadBalancerFrontendIPConfigurationsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, LoadBalancerFrontendIPConfigurationsListResponse) (*azcore.Request, error)
}

func (p *loadBalancerFrontendIPConfigurationsListPager) Err() error {
	return p.err
}

func (p *loadBalancerFrontendIPConfigurationsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LoadBalancerFrontendIPConfigurationListResult.NextLink == nil || len(*p.current.LoadBalancerFrontendIPConfigurationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *loadBalancerFrontendIPConfigurationsListPager) PageResponse() LoadBalancerFrontendIPConfigurationsListResponse {
	return p.current
}

type LoadBalancerLoadBalancingRulesListPager interface {
	azcore.Pager
	// PageResponse returns the current LoadBalancerLoadBalancingRulesListResponse.
	PageResponse() LoadBalancerLoadBalancingRulesListResponse
}

type loadBalancerLoadBalancingRulesListPager struct {
	client    *LoadBalancerLoadBalancingRulesClient
	current   LoadBalancerLoadBalancingRulesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, LoadBalancerLoadBalancingRulesListResponse) (*azcore.Request, error)
}

func (p *loadBalancerLoadBalancingRulesListPager) Err() error {
	return p.err
}

func (p *loadBalancerLoadBalancingRulesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LoadBalancerLoadBalancingRuleListResult.NextLink == nil || len(*p.current.LoadBalancerLoadBalancingRuleListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *loadBalancerLoadBalancingRulesListPager) PageResponse() LoadBalancerLoadBalancingRulesListResponse {
	return p.current
}

type LoadBalancerNetworkInterfacesListPager interface {
	azcore.Pager
	// PageResponse returns the current LoadBalancerNetworkInterfacesListResponse.
	PageResponse() LoadBalancerNetworkInterfacesListResponse
}

type loadBalancerNetworkInterfacesListPager struct {
	client    *LoadBalancerNetworkInterfacesClient
	current   LoadBalancerNetworkInterfacesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, LoadBalancerNetworkInterfacesListResponse) (*azcore.Request, error)
}

func (p *loadBalancerNetworkInterfacesListPager) Err() error {
	return p.err
}

func (p *loadBalancerNetworkInterfacesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkInterfaceListResult.NextLink == nil || len(*p.current.NetworkInterfaceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *loadBalancerNetworkInterfacesListPager) PageResponse() LoadBalancerNetworkInterfacesListResponse {
	return p.current
}

type LoadBalancerOutboundRulesListPager interface {
	azcore.Pager
	// PageResponse returns the current LoadBalancerOutboundRulesListResponse.
	PageResponse() LoadBalancerOutboundRulesListResponse
}

type loadBalancerOutboundRulesListPager struct {
	client    *LoadBalancerOutboundRulesClient
	current   LoadBalancerOutboundRulesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, LoadBalancerOutboundRulesListResponse) (*azcore.Request, error)
}

func (p *loadBalancerOutboundRulesListPager) Err() error {
	return p.err
}

func (p *loadBalancerOutboundRulesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LoadBalancerOutboundRuleListResult.NextLink == nil || len(*p.current.LoadBalancerOutboundRuleListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *loadBalancerOutboundRulesListPager) PageResponse() LoadBalancerOutboundRulesListResponse {
	return p.current
}

type LoadBalancerProbesListPager interface {
	azcore.Pager
	// PageResponse returns the current LoadBalancerProbesListResponse.
	PageResponse() LoadBalancerProbesListResponse
}

type loadBalancerProbesListPager struct {
	client    *LoadBalancerProbesClient
	current   LoadBalancerProbesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, LoadBalancerProbesListResponse) (*azcore.Request, error)
}

func (p *loadBalancerProbesListPager) Err() error {
	return p.err
}

func (p *loadBalancerProbesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LoadBalancerProbeListResult.NextLink == nil || len(*p.current.LoadBalancerProbeListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *loadBalancerProbesListPager) PageResponse() LoadBalancerProbesListResponse {
	return p.current
}

type LoadBalancersListAllPager interface {
	azcore.Pager
	// PageResponse returns the current LoadBalancersListAllResponse.
	PageResponse() LoadBalancersListAllResponse
}

type loadBalancersListAllPager struct {
	client    *LoadBalancersClient
	current   LoadBalancersListAllResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, LoadBalancersListAllResponse) (*azcore.Request, error)
}

func (p *loadBalancersListAllPager) Err() error {
	return p.err
}

func (p *loadBalancersListAllPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LoadBalancerListResult.NextLink == nil || len(*p.current.LoadBalancerListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAllHandleError(resp)
		return false
	}
	result, err := p.client.listAllHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *loadBalancersListAllPager) PageResponse() LoadBalancersListAllResponse {
	return p.current
}

type LoadBalancersListPager interface {
	azcore.Pager
	// PageResponse returns the current LoadBalancersListResponse.
	PageResponse() LoadBalancersListResponse
}

type loadBalancersListPager struct {
	client    *LoadBalancersClient
	current   LoadBalancersListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, LoadBalancersListResponse) (*azcore.Request, error)
}

func (p *loadBalancersListPager) Err() error {
	return p.err
}

func (p *loadBalancersListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LoadBalancerListResult.NextLink == nil || len(*p.current.LoadBalancerListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *loadBalancersListPager) PageResponse() LoadBalancersListResponse {
	return p.current
}

type LocalNetworkGatewaysListPager interface {
	azcore.Pager
	// PageResponse returns the current LocalNetworkGatewaysListResponse.
	PageResponse() LocalNetworkGatewaysListResponse
}

type localNetworkGatewaysListPager struct {
	client    *LocalNetworkGatewaysClient
	current   LocalNetworkGatewaysListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, LocalNetworkGatewaysListResponse) (*azcore.Request, error)
}

func (p *localNetworkGatewaysListPager) Err() error {
	return p.err
}

func (p *localNetworkGatewaysListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LocalNetworkGatewayListResult.NextLink == nil || len(*p.current.LocalNetworkGatewayListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *localNetworkGatewaysListPager) PageResponse() LocalNetworkGatewaysListResponse {
	return p.current
}

type NatGatewaysListAllPager interface {
	azcore.Pager
	// PageResponse returns the current NatGatewaysListAllResponse.
	PageResponse() NatGatewaysListAllResponse
}

type natGatewaysListAllPager struct {
	client    *NatGatewaysClient
	current   NatGatewaysListAllResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, NatGatewaysListAllResponse) (*azcore.Request, error)
}

func (p *natGatewaysListAllPager) Err() error {
	return p.err
}

func (p *natGatewaysListAllPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NatGatewayListResult.NextLink == nil || len(*p.current.NatGatewayListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAllHandleError(resp)
		return false
	}
	result, err := p.client.listAllHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *natGatewaysListAllPager) PageResponse() NatGatewaysListAllResponse {
	return p.current
}

type NatGatewaysListPager interface {
	azcore.Pager
	// PageResponse returns the current NatGatewaysListResponse.
	PageResponse() NatGatewaysListResponse
}

type natGatewaysListPager struct {
	client    *NatGatewaysClient
	current   NatGatewaysListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, NatGatewaysListResponse) (*azcore.Request, error)
}

func (p *natGatewaysListPager) Err() error {
	return p.err
}

func (p *natGatewaysListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NatGatewayListResult.NextLink == nil || len(*p.current.NatGatewayListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *natGatewaysListPager) PageResponse() NatGatewaysListResponse {
	return p.current
}

type NetworkInterfaceIPConfigurationsListPager interface {
	azcore.Pager
	// PageResponse returns the current NetworkInterfaceIPConfigurationsListResponse.
	PageResponse() NetworkInterfaceIPConfigurationsListResponse
}

type networkInterfaceIPConfigurationsListPager struct {
	client    *NetworkInterfaceIPConfigurationsClient
	current   NetworkInterfaceIPConfigurationsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, NetworkInterfaceIPConfigurationsListResponse) (*azcore.Request, error)
}

func (p *networkInterfaceIPConfigurationsListPager) Err() error {
	return p.err
}

func (p *networkInterfaceIPConfigurationsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkInterfaceIPConfigurationListResult.NextLink == nil || len(*p.current.NetworkInterfaceIPConfigurationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *networkInterfaceIPConfigurationsListPager) PageResponse() NetworkInterfaceIPConfigurationsListResponse {
	return p.current
}

type NetworkInterfaceLoadBalancersListPager interface {
	azcore.Pager
	// PageResponse returns the current NetworkInterfaceLoadBalancersListResponse.
	PageResponse() NetworkInterfaceLoadBalancersListResponse
}

type networkInterfaceLoadBalancersListPager struct {
	client    *NetworkInterfaceLoadBalancersClient
	current   NetworkInterfaceLoadBalancersListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, NetworkInterfaceLoadBalancersListResponse) (*azcore.Request, error)
}

func (p *networkInterfaceLoadBalancersListPager) Err() error {
	return p.err
}

func (p *networkInterfaceLoadBalancersListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkInterfaceLoadBalancerListResult.NextLink == nil || len(*p.current.NetworkInterfaceLoadBalancerListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *networkInterfaceLoadBalancersListPager) PageResponse() NetworkInterfaceLoadBalancersListResponse {
	return p.current
}

type NetworkInterfaceTapConfigurationsListPager interface {
	azcore.Pager
	// PageResponse returns the current NetworkInterfaceTapConfigurationsListResponse.
	PageResponse() NetworkInterfaceTapConfigurationsListResponse
}

type networkInterfaceTapConfigurationsListPager struct {
	client    *NetworkInterfaceTapConfigurationsClient
	current   NetworkInterfaceTapConfigurationsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, NetworkInterfaceTapConfigurationsListResponse) (*azcore.Request, error)
}

func (p *networkInterfaceTapConfigurationsListPager) Err() error {
	return p.err
}

func (p *networkInterfaceTapConfigurationsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkInterfaceTapConfigurationListResult.NextLink == nil || len(*p.current.NetworkInterfaceTapConfigurationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *networkInterfaceTapConfigurationsListPager) PageResponse() NetworkInterfaceTapConfigurationsListResponse {
	return p.current
}

type NetworkInterfacesListAllPager interface {
	azcore.Pager
	// PageResponse returns the current NetworkInterfacesListAllResponse.
	PageResponse() NetworkInterfacesListAllResponse
}

type networkInterfacesListAllPager struct {
	client    *NetworkInterfacesClient
	current   NetworkInterfacesListAllResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, NetworkInterfacesListAllResponse) (*azcore.Request, error)
}

func (p *networkInterfacesListAllPager) Err() error {
	return p.err
}

func (p *networkInterfacesListAllPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkInterfaceListResult.NextLink == nil || len(*p.current.NetworkInterfaceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAllHandleError(resp)
		return false
	}
	result, err := p.client.listAllHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *networkInterfacesListAllPager) PageResponse() NetworkInterfacesListAllResponse {
	return p.current
}

type NetworkInterfacesListPager interface {
	azcore.Pager
	// PageResponse returns the current NetworkInterfacesListResponse.
	PageResponse() NetworkInterfacesListResponse
}

type networkInterfacesListPager struct {
	client    *NetworkInterfacesClient
	current   NetworkInterfacesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, NetworkInterfacesListResponse) (*azcore.Request, error)
}

func (p *networkInterfacesListPager) Err() error {
	return p.err
}

func (p *networkInterfacesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkInterfaceListResult.NextLink == nil || len(*p.current.NetworkInterfaceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *networkInterfacesListPager) PageResponse() NetworkInterfacesListResponse {
	return p.current
}

type NetworkInterfacesListVirtualMachineScaleSetIPConfigurationsPager interface {
	azcore.Pager
	// PageResponse returns the current NetworkInterfacesListVirtualMachineScaleSetIPConfigurationsResponse.
	PageResponse() NetworkInterfacesListVirtualMachineScaleSetIPConfigurationsResponse
}

type networkInterfacesListVirtualMachineScaleSetIPConfigurationsPager struct {
	client    *NetworkInterfacesClient
	current   NetworkInterfacesListVirtualMachineScaleSetIPConfigurationsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, NetworkInterfacesListVirtualMachineScaleSetIPConfigurationsResponse) (*azcore.Request, error)
}

func (p *networkInterfacesListVirtualMachineScaleSetIPConfigurationsPager) Err() error {
	return p.err
}

func (p *networkInterfacesListVirtualMachineScaleSetIPConfigurationsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkInterfaceIPConfigurationListResult.NextLink == nil || len(*p.current.NetworkInterfaceIPConfigurationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listVirtualMachineScaleSetIPConfigurationsHandleError(resp)
		return false
	}
	result, err := p.client.listVirtualMachineScaleSetIPConfigurationsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *networkInterfacesListVirtualMachineScaleSetIPConfigurationsPager) PageResponse() NetworkInterfacesListVirtualMachineScaleSetIPConfigurationsResponse {
	return p.current
}

type NetworkInterfacesListVirtualMachineScaleSetNetworkInterfacesPager interface {
	azcore.Pager
	// PageResponse returns the current NetworkInterfacesListVirtualMachineScaleSetNetworkInterfacesResponse.
	PageResponse() NetworkInterfacesListVirtualMachineScaleSetNetworkInterfacesResponse
}

type networkInterfacesListVirtualMachineScaleSetNetworkInterfacesPager struct {
	client    *NetworkInterfacesClient
	current   NetworkInterfacesListVirtualMachineScaleSetNetworkInterfacesResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, NetworkInterfacesListVirtualMachineScaleSetNetworkInterfacesResponse) (*azcore.Request, error)
}

func (p *networkInterfacesListVirtualMachineScaleSetNetworkInterfacesPager) Err() error {
	return p.err
}

func (p *networkInterfacesListVirtualMachineScaleSetNetworkInterfacesPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkInterfaceListResult.NextLink == nil || len(*p.current.NetworkInterfaceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listVirtualMachineScaleSetNetworkInterfacesHandleError(resp)
		return false
	}
	result, err := p.client.listVirtualMachineScaleSetNetworkInterfacesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *networkInterfacesListVirtualMachineScaleSetNetworkInterfacesPager) PageResponse() NetworkInterfacesListVirtualMachineScaleSetNetworkInterfacesResponse {
	return p.current
}

type NetworkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesPager interface {
	azcore.Pager
	// PageResponse returns the current NetworkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesResponse.
	PageResponse() NetworkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesResponse
}

type networkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesPager struct {
	client    *NetworkInterfacesClient
	current   NetworkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, NetworkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesResponse) (*azcore.Request, error)
}

func (p *networkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesPager) Err() error {
	return p.err
}

func (p *networkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkInterfaceListResult.NextLink == nil || len(*p.current.NetworkInterfaceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listVirtualMachineScaleSetVMNetworkInterfacesHandleError(resp)
		return false
	}
	result, err := p.client.listVirtualMachineScaleSetVMNetworkInterfacesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *networkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesPager) PageResponse() NetworkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesResponse {
	return p.current
}

type NetworkManagementClientDisconnectActiveSessionsPager interface {
	azcore.Pager
	// PageResponse returns the current NetworkManagementClientDisconnectActiveSessionsResponse.
	PageResponse() NetworkManagementClientDisconnectActiveSessionsResponse
}

type networkManagementClientDisconnectActiveSessionsPager struct {
	client    *NetworkManagementClient
	current   NetworkManagementClientDisconnectActiveSessionsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, NetworkManagementClientDisconnectActiveSessionsResponse) (*azcore.Request, error)
}

func (p *networkManagementClientDisconnectActiveSessionsPager) Err() error {
	return p.err
}

func (p *networkManagementClientDisconnectActiveSessionsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BastionSessionDeleteResult.NextLink == nil || len(*p.current.BastionSessionDeleteResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.disconnectActiveSessionsHandleError(resp)
		return false
	}
	result, err := p.client.disconnectActiveSessionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *networkManagementClientDisconnectActiveSessionsPager) PageResponse() NetworkManagementClientDisconnectActiveSessionsResponse {
	return p.current
}

type NetworkManagementClientGetActiveSessionsPager interface {
	azcore.Pager
	// PageResponse returns the current NetworkManagementClientGetActiveSessionsResponse.
	PageResponse() NetworkManagementClientGetActiveSessionsResponse
}

type networkManagementClientGetActiveSessionsPager struct {
	client  *NetworkManagementClient
	current NetworkManagementClientGetActiveSessionsResponse
	err     error
	second  bool
}

func (p *networkManagementClientGetActiveSessionsPager) Err() error {
	return p.err
}

func (p *networkManagementClientGetActiveSessionsPager) NextPage(ctx context.Context) bool {
	if !p.second {
		p.second = true
		return true
	} else if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BastionActiveSessionListResult.NextLink == nil || len(*p.current.BastionActiveSessionListResult.NextLink) == 0 {
			return false
		}
	}
	req, err := azcore.NewRequest(ctx, http.MethodGet, *p.current.BastionActiveSessionListResult.NextLink)
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated, http.StatusAccepted) {
		p.err = p.client.getActiveSessionsHandleError(resp)
		return false
	}
	result, err := p.client.getActiveSessionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *networkManagementClientGetActiveSessionsPager) PageResponse() NetworkManagementClientGetActiveSessionsResponse {
	return p.current
}

type NetworkManagementClientGetBastionShareableLinkPager interface {
	azcore.Pager
	// PageResponse returns the current NetworkManagementClientGetBastionShareableLinkResponse.
	PageResponse() NetworkManagementClientGetBastionShareableLinkResponse
}

type networkManagementClientGetBastionShareableLinkPager struct {
	client    *NetworkManagementClient
	current   NetworkManagementClientGetBastionShareableLinkResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, NetworkManagementClientGetBastionShareableLinkResponse) (*azcore.Request, error)
}

func (p *networkManagementClientGetBastionShareableLinkPager) Err() error {
	return p.err
}

func (p *networkManagementClientGetBastionShareableLinkPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BastionShareableLinkListResult.NextLink == nil || len(*p.current.BastionShareableLinkListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.getBastionShareableLinkHandleError(resp)
		return false
	}
	result, err := p.client.getBastionShareableLinkHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *networkManagementClientGetBastionShareableLinkPager) PageResponse() NetworkManagementClientGetBastionShareableLinkResponse {
	return p.current
}

type NetworkManagementClientPutBastionShareableLinkPager interface {
	azcore.Pager
	// PageResponse returns the current NetworkManagementClientPutBastionShareableLinkResponse.
	PageResponse() NetworkManagementClientPutBastionShareableLinkResponse
}

type networkManagementClientPutBastionShareableLinkPager struct {
	client  *NetworkManagementClient
	current NetworkManagementClientPutBastionShareableLinkResponse
	err     error
	second  bool
}

func (p *networkManagementClientPutBastionShareableLinkPager) Err() error {
	return p.err
}

func (p *networkManagementClientPutBastionShareableLinkPager) NextPage(ctx context.Context) bool {
	if !p.second {
		p.second = true
		return true
	} else if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BastionShareableLinkListResult.NextLink == nil || len(*p.current.BastionShareableLinkListResult.NextLink) == 0 {
			return false
		}
	}
	req, err := azcore.NewRequest(ctx, http.MethodGet, *p.current.BastionShareableLinkListResult.NextLink)
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated, http.StatusAccepted) {
		p.err = p.client.putBastionShareableLinkHandleError(resp)
		return false
	}
	result, err := p.client.putBastionShareableLinkHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *networkManagementClientPutBastionShareableLinkPager) PageResponse() NetworkManagementClientPutBastionShareableLinkResponse {
	return p.current
}

type NetworkProfilesListAllPager interface {
	azcore.Pager
	// PageResponse returns the current NetworkProfilesListAllResponse.
	PageResponse() NetworkProfilesListAllResponse
}

type networkProfilesListAllPager struct {
	client    *NetworkProfilesClient
	current   NetworkProfilesListAllResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, NetworkProfilesListAllResponse) (*azcore.Request, error)
}

func (p *networkProfilesListAllPager) Err() error {
	return p.err
}

func (p *networkProfilesListAllPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkProfileListResult.NextLink == nil || len(*p.current.NetworkProfileListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAllHandleError(resp)
		return false
	}
	result, err := p.client.listAllHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *networkProfilesListAllPager) PageResponse() NetworkProfilesListAllResponse {
	return p.current
}

type NetworkProfilesListPager interface {
	azcore.Pager
	// PageResponse returns the current NetworkProfilesListResponse.
	PageResponse() NetworkProfilesListResponse
}

type networkProfilesListPager struct {
	client    *NetworkProfilesClient
	current   NetworkProfilesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, NetworkProfilesListResponse) (*azcore.Request, error)
}

func (p *networkProfilesListPager) Err() error {
	return p.err
}

func (p *networkProfilesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkProfileListResult.NextLink == nil || len(*p.current.NetworkProfileListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *networkProfilesListPager) PageResponse() NetworkProfilesListResponse {
	return p.current
}

type NetworkSecurityGroupsListAllPager interface {
	azcore.Pager
	// PageResponse returns the current NetworkSecurityGroupsListAllResponse.
	PageResponse() NetworkSecurityGroupsListAllResponse
}

type networkSecurityGroupsListAllPager struct {
	client    *NetworkSecurityGroupsClient
	current   NetworkSecurityGroupsListAllResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, NetworkSecurityGroupsListAllResponse) (*azcore.Request, error)
}

func (p *networkSecurityGroupsListAllPager) Err() error {
	return p.err
}

func (p *networkSecurityGroupsListAllPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkSecurityGroupListResult.NextLink == nil || len(*p.current.NetworkSecurityGroupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAllHandleError(resp)
		return false
	}
	result, err := p.client.listAllHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *networkSecurityGroupsListAllPager) PageResponse() NetworkSecurityGroupsListAllResponse {
	return p.current
}

type NetworkSecurityGroupsListPager interface {
	azcore.Pager
	// PageResponse returns the current NetworkSecurityGroupsListResponse.
	PageResponse() NetworkSecurityGroupsListResponse
}

type networkSecurityGroupsListPager struct {
	client    *NetworkSecurityGroupsClient
	current   NetworkSecurityGroupsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, NetworkSecurityGroupsListResponse) (*azcore.Request, error)
}

func (p *networkSecurityGroupsListPager) Err() error {
	return p.err
}

func (p *networkSecurityGroupsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkSecurityGroupListResult.NextLink == nil || len(*p.current.NetworkSecurityGroupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *networkSecurityGroupsListPager) PageResponse() NetworkSecurityGroupsListResponse {
	return p.current
}

type NetworkVirtualAppliancesListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current NetworkVirtualAppliancesListByResourceGroupResponse.
	PageResponse() NetworkVirtualAppliancesListByResourceGroupResponse
}

type networkVirtualAppliancesListByResourceGroupPager struct {
	client    *NetworkVirtualAppliancesClient
	current   NetworkVirtualAppliancesListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, NetworkVirtualAppliancesListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *networkVirtualAppliancesListByResourceGroupPager) Err() error {
	return p.err
}

func (p *networkVirtualAppliancesListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkVirtualApplianceListResult.NextLink == nil || len(*p.current.NetworkVirtualApplianceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *networkVirtualAppliancesListByResourceGroupPager) PageResponse() NetworkVirtualAppliancesListByResourceGroupResponse {
	return p.current
}

type NetworkVirtualAppliancesListPager interface {
	azcore.Pager
	// PageResponse returns the current NetworkVirtualAppliancesListResponse.
	PageResponse() NetworkVirtualAppliancesListResponse
}

type networkVirtualAppliancesListPager struct {
	client    *NetworkVirtualAppliancesClient
	current   NetworkVirtualAppliancesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, NetworkVirtualAppliancesListResponse) (*azcore.Request, error)
}

func (p *networkVirtualAppliancesListPager) Err() error {
	return p.err
}

func (p *networkVirtualAppliancesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkVirtualApplianceListResult.NextLink == nil || len(*p.current.NetworkVirtualApplianceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *networkVirtualAppliancesListPager) PageResponse() NetworkVirtualAppliancesListResponse {
	return p.current
}

type OperationsListPager interface {
	azcore.Pager
	// PageResponse returns the current OperationsListResponse.
	PageResponse() OperationsListResponse
}

type operationsListPager struct {
	client    *OperationsClient
	current   OperationsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, OperationsListResponse) (*azcore.Request, error)
}

func (p *operationsListPager) Err() error {
	return p.err
}

func (p *operationsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *operationsListPager) PageResponse() OperationsListResponse {
	return p.current
}

type P2SVPNGatewaysListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current P2SVPNGatewaysListByResourceGroupResponse.
	PageResponse() P2SVPNGatewaysListByResourceGroupResponse
}

type p2SVPNGatewaysListByResourceGroupPager struct {
	client    *P2SVPNGatewaysClient
	current   P2SVPNGatewaysListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, P2SVPNGatewaysListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *p2SVPNGatewaysListByResourceGroupPager) Err() error {
	return p.err
}

func (p *p2SVPNGatewaysListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListP2SVPNGatewaysResult.NextLink == nil || len(*p.current.ListP2SVPNGatewaysResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *p2SVPNGatewaysListByResourceGroupPager) PageResponse() P2SVPNGatewaysListByResourceGroupResponse {
	return p.current
}

type P2SVPNGatewaysListPager interface {
	azcore.Pager
	// PageResponse returns the current P2SVPNGatewaysListResponse.
	PageResponse() P2SVPNGatewaysListResponse
}

type p2SVPNGatewaysListPager struct {
	client    *P2SVPNGatewaysClient
	current   P2SVPNGatewaysListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, P2SVPNGatewaysListResponse) (*azcore.Request, error)
}

func (p *p2SVPNGatewaysListPager) Err() error {
	return p.err
}

func (p *p2SVPNGatewaysListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListP2SVPNGatewaysResult.NextLink == nil || len(*p.current.ListP2SVPNGatewaysResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *p2SVPNGatewaysListPager) PageResponse() P2SVPNGatewaysListResponse {
	return p.current
}

type PeerExpressRouteCircuitConnectionsListPager interface {
	azcore.Pager
	// PageResponse returns the current PeerExpressRouteCircuitConnectionsListResponse.
	PageResponse() PeerExpressRouteCircuitConnectionsListResponse
}

type peerExpressRouteCircuitConnectionsListPager struct {
	client    *PeerExpressRouteCircuitConnectionsClient
	current   PeerExpressRouteCircuitConnectionsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PeerExpressRouteCircuitConnectionsListResponse) (*azcore.Request, error)
}

func (p *peerExpressRouteCircuitConnectionsListPager) Err() error {
	return p.err
}

func (p *peerExpressRouteCircuitConnectionsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PeerExpressRouteCircuitConnectionListResult.NextLink == nil || len(*p.current.PeerExpressRouteCircuitConnectionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *peerExpressRouteCircuitConnectionsListPager) PageResponse() PeerExpressRouteCircuitConnectionsListResponse {
	return p.current
}

type PrivateDNSZoneGroupsListPager interface {
	azcore.Pager
	// PageResponse returns the current PrivateDNSZoneGroupsListResponse.
	PageResponse() PrivateDNSZoneGroupsListResponse
}

type privateDNSZoneGroupsListPager struct {
	client    *PrivateDNSZoneGroupsClient
	current   PrivateDNSZoneGroupsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PrivateDNSZoneGroupsListResponse) (*azcore.Request, error)
}

func (p *privateDNSZoneGroupsListPager) Err() error {
	return p.err
}

func (p *privateDNSZoneGroupsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateDNSZoneGroupListResult.NextLink == nil || len(*p.current.PrivateDNSZoneGroupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *privateDNSZoneGroupsListPager) PageResponse() PrivateDNSZoneGroupsListResponse {
	return p.current
}

type PrivateEndpointsListBySubscriptionPager interface {
	azcore.Pager
	// PageResponse returns the current PrivateEndpointsListBySubscriptionResponse.
	PageResponse() PrivateEndpointsListBySubscriptionResponse
}

type privateEndpointsListBySubscriptionPager struct {
	client    *PrivateEndpointsClient
	current   PrivateEndpointsListBySubscriptionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PrivateEndpointsListBySubscriptionResponse) (*azcore.Request, error)
}

func (p *privateEndpointsListBySubscriptionPager) Err() error {
	return p.err
}

func (p *privateEndpointsListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointListResult.NextLink == nil || len(*p.current.PrivateEndpointListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *privateEndpointsListBySubscriptionPager) PageResponse() PrivateEndpointsListBySubscriptionResponse {
	return p.current
}

type PrivateEndpointsListPager interface {
	azcore.Pager
	// PageResponse returns the current PrivateEndpointsListResponse.
	PageResponse() PrivateEndpointsListResponse
}

type privateEndpointsListPager struct {
	client    *PrivateEndpointsClient
	current   PrivateEndpointsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PrivateEndpointsListResponse) (*azcore.Request, error)
}

func (p *privateEndpointsListPager) Err() error {
	return p.err
}

func (p *privateEndpointsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointListResult.NextLink == nil || len(*p.current.PrivateEndpointListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *privateEndpointsListPager) PageResponse() PrivateEndpointsListResponse {
	return p.current
}

type PrivateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current PrivateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupResponse.
	PageResponse() PrivateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupResponse
}

type privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupPager struct {
	client    *PrivateLinkServicesClient
	current   PrivateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PrivateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupResponse) (*azcore.Request, error)
}

func (p *privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupPager) Err() error {
	return p.err
}

func (p *privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AutoApprovedPrivateLinkServicesResult.NextLink == nil || len(*p.current.AutoApprovedPrivateLinkServicesResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAutoApprovedPrivateLinkServicesByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listAutoApprovedPrivateLinkServicesByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupPager) PageResponse() PrivateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupResponse {
	return p.current
}

type PrivateLinkServicesListAutoApprovedPrivateLinkServicesPager interface {
	azcore.Pager
	// PageResponse returns the current PrivateLinkServicesListAutoApprovedPrivateLinkServicesResponse.
	PageResponse() PrivateLinkServicesListAutoApprovedPrivateLinkServicesResponse
}

type privateLinkServicesListAutoApprovedPrivateLinkServicesPager struct {
	client    *PrivateLinkServicesClient
	current   PrivateLinkServicesListAutoApprovedPrivateLinkServicesResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PrivateLinkServicesListAutoApprovedPrivateLinkServicesResponse) (*azcore.Request, error)
}

func (p *privateLinkServicesListAutoApprovedPrivateLinkServicesPager) Err() error {
	return p.err
}

func (p *privateLinkServicesListAutoApprovedPrivateLinkServicesPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AutoApprovedPrivateLinkServicesResult.NextLink == nil || len(*p.current.AutoApprovedPrivateLinkServicesResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAutoApprovedPrivateLinkServicesHandleError(resp)
		return false
	}
	result, err := p.client.listAutoApprovedPrivateLinkServicesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *privateLinkServicesListAutoApprovedPrivateLinkServicesPager) PageResponse() PrivateLinkServicesListAutoApprovedPrivateLinkServicesResponse {
	return p.current
}

type PrivateLinkServicesListBySubscriptionPager interface {
	azcore.Pager
	// PageResponse returns the current PrivateLinkServicesListBySubscriptionResponse.
	PageResponse() PrivateLinkServicesListBySubscriptionResponse
}

type privateLinkServicesListBySubscriptionPager struct {
	client    *PrivateLinkServicesClient
	current   PrivateLinkServicesListBySubscriptionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PrivateLinkServicesListBySubscriptionResponse) (*azcore.Request, error)
}

func (p *privateLinkServicesListBySubscriptionPager) Err() error {
	return p.err
}

func (p *privateLinkServicesListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkServiceListResult.NextLink == nil || len(*p.current.PrivateLinkServiceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *privateLinkServicesListBySubscriptionPager) PageResponse() PrivateLinkServicesListBySubscriptionResponse {
	return p.current
}

type PrivateLinkServicesListPager interface {
	azcore.Pager
	// PageResponse returns the current PrivateLinkServicesListResponse.
	PageResponse() PrivateLinkServicesListResponse
}

type privateLinkServicesListPager struct {
	client    *PrivateLinkServicesClient
	current   PrivateLinkServicesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PrivateLinkServicesListResponse) (*azcore.Request, error)
}

func (p *privateLinkServicesListPager) Err() error {
	return p.err
}

func (p *privateLinkServicesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkServiceListResult.NextLink == nil || len(*p.current.PrivateLinkServiceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *privateLinkServicesListPager) PageResponse() PrivateLinkServicesListResponse {
	return p.current
}

type PrivateLinkServicesListPrivateEndpointConnectionsPager interface {
	azcore.Pager
	// PageResponse returns the current PrivateLinkServicesListPrivateEndpointConnectionsResponse.
	PageResponse() PrivateLinkServicesListPrivateEndpointConnectionsResponse
}

type privateLinkServicesListPrivateEndpointConnectionsPager struct {
	client    *PrivateLinkServicesClient
	current   PrivateLinkServicesListPrivateEndpointConnectionsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PrivateLinkServicesListPrivateEndpointConnectionsResponse) (*azcore.Request, error)
}

func (p *privateLinkServicesListPrivateEndpointConnectionsPager) Err() error {
	return p.err
}

func (p *privateLinkServicesListPrivateEndpointConnectionsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listPrivateEndpointConnectionsHandleError(resp)
		return false
	}
	result, err := p.client.listPrivateEndpointConnectionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *privateLinkServicesListPrivateEndpointConnectionsPager) PageResponse() PrivateLinkServicesListPrivateEndpointConnectionsResponse {
	return p.current
}

type PublicIPAddressesListAllPager interface {
	azcore.Pager
	// PageResponse returns the current PublicIPAddressesListAllResponse.
	PageResponse() PublicIPAddressesListAllResponse
}

type publicIPAddressesListAllPager struct {
	client    *PublicIPAddressesClient
	current   PublicIPAddressesListAllResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PublicIPAddressesListAllResponse) (*azcore.Request, error)
}

func (p *publicIPAddressesListAllPager) Err() error {
	return p.err
}

func (p *publicIPAddressesListAllPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PublicIPAddressListResult.NextLink == nil || len(*p.current.PublicIPAddressListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAllHandleError(resp)
		return false
	}
	result, err := p.client.listAllHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *publicIPAddressesListAllPager) PageResponse() PublicIPAddressesListAllResponse {
	return p.current
}

type PublicIPAddressesListPager interface {
	azcore.Pager
	// PageResponse returns the current PublicIPAddressesListResponse.
	PageResponse() PublicIPAddressesListResponse
}

type publicIPAddressesListPager struct {
	client    *PublicIPAddressesClient
	current   PublicIPAddressesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PublicIPAddressesListResponse) (*azcore.Request, error)
}

func (p *publicIPAddressesListPager) Err() error {
	return p.err
}

func (p *publicIPAddressesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PublicIPAddressListResult.NextLink == nil || len(*p.current.PublicIPAddressListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *publicIPAddressesListPager) PageResponse() PublicIPAddressesListResponse {
	return p.current
}

type PublicIPAddressesListVirtualMachineScaleSetPublicIPAddressesPager interface {
	azcore.Pager
	// PageResponse returns the current PublicIPAddressesListVirtualMachineScaleSetPublicIPAddressesResponse.
	PageResponse() PublicIPAddressesListVirtualMachineScaleSetPublicIPAddressesResponse
}

type publicIPAddressesListVirtualMachineScaleSetPublicIPAddressesPager struct {
	client    *PublicIPAddressesClient
	current   PublicIPAddressesListVirtualMachineScaleSetPublicIPAddressesResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PublicIPAddressesListVirtualMachineScaleSetPublicIPAddressesResponse) (*azcore.Request, error)
}

func (p *publicIPAddressesListVirtualMachineScaleSetPublicIPAddressesPager) Err() error {
	return p.err
}

func (p *publicIPAddressesListVirtualMachineScaleSetPublicIPAddressesPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PublicIPAddressListResult.NextLink == nil || len(*p.current.PublicIPAddressListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listVirtualMachineScaleSetPublicIPAddressesHandleError(resp)
		return false
	}
	result, err := p.client.listVirtualMachineScaleSetPublicIPAddressesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *publicIPAddressesListVirtualMachineScaleSetPublicIPAddressesPager) PageResponse() PublicIPAddressesListVirtualMachineScaleSetPublicIPAddressesResponse {
	return p.current
}

type PublicIPAddressesListVirtualMachineScaleSetVMPublicIPAddressesPager interface {
	azcore.Pager
	// PageResponse returns the current PublicIPAddressesListVirtualMachineScaleSetVMPublicIPAddressesResponse.
	PageResponse() PublicIPAddressesListVirtualMachineScaleSetVMPublicIPAddressesResponse
}

type publicIPAddressesListVirtualMachineScaleSetVMPublicIPAddressesPager struct {
	client    *PublicIPAddressesClient
	current   PublicIPAddressesListVirtualMachineScaleSetVMPublicIPAddressesResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PublicIPAddressesListVirtualMachineScaleSetVMPublicIPAddressesResponse) (*azcore.Request, error)
}

func (p *publicIPAddressesListVirtualMachineScaleSetVMPublicIPAddressesPager) Err() error {
	return p.err
}

func (p *publicIPAddressesListVirtualMachineScaleSetVMPublicIPAddressesPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PublicIPAddressListResult.NextLink == nil || len(*p.current.PublicIPAddressListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listVirtualMachineScaleSetVMPublicIPAddressesHandleError(resp)
		return false
	}
	result, err := p.client.listVirtualMachineScaleSetVMPublicIPAddressesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *publicIPAddressesListVirtualMachineScaleSetVMPublicIPAddressesPager) PageResponse() PublicIPAddressesListVirtualMachineScaleSetVMPublicIPAddressesResponse {
	return p.current
}

type PublicIPPrefixesListAllPager interface {
	azcore.Pager
	// PageResponse returns the current PublicIPPrefixesListAllResponse.
	PageResponse() PublicIPPrefixesListAllResponse
}

type publicIPPrefixesListAllPager struct {
	client    *PublicIPPrefixesClient
	current   PublicIPPrefixesListAllResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PublicIPPrefixesListAllResponse) (*azcore.Request, error)
}

func (p *publicIPPrefixesListAllPager) Err() error {
	return p.err
}

func (p *publicIPPrefixesListAllPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PublicIPPrefixListResult.NextLink == nil || len(*p.current.PublicIPPrefixListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAllHandleError(resp)
		return false
	}
	result, err := p.client.listAllHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *publicIPPrefixesListAllPager) PageResponse() PublicIPPrefixesListAllResponse {
	return p.current
}

type PublicIPPrefixesListPager interface {
	azcore.Pager
	// PageResponse returns the current PublicIPPrefixesListResponse.
	PageResponse() PublicIPPrefixesListResponse
}

type publicIPPrefixesListPager struct {
	client    *PublicIPPrefixesClient
	current   PublicIPPrefixesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PublicIPPrefixesListResponse) (*azcore.Request, error)
}

func (p *publicIPPrefixesListPager) Err() error {
	return p.err
}

func (p *publicIPPrefixesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PublicIPPrefixListResult.NextLink == nil || len(*p.current.PublicIPPrefixListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *publicIPPrefixesListPager) PageResponse() PublicIPPrefixesListResponse {
	return p.current
}

type RouteFilterRulesListByRouteFilterPager interface {
	azcore.Pager
	// PageResponse returns the current RouteFilterRulesListByRouteFilterResponse.
	PageResponse() RouteFilterRulesListByRouteFilterResponse
}

type routeFilterRulesListByRouteFilterPager struct {
	client    *RouteFilterRulesClient
	current   RouteFilterRulesListByRouteFilterResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, RouteFilterRulesListByRouteFilterResponse) (*azcore.Request, error)
}

func (p *routeFilterRulesListByRouteFilterPager) Err() error {
	return p.err
}

func (p *routeFilterRulesListByRouteFilterPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RouteFilterRuleListResult.NextLink == nil || len(*p.current.RouteFilterRuleListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByRouteFilterHandleError(resp)
		return false
	}
	result, err := p.client.listByRouteFilterHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *routeFilterRulesListByRouteFilterPager) PageResponse() RouteFilterRulesListByRouteFilterResponse {
	return p.current
}

type RouteFiltersListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current RouteFiltersListByResourceGroupResponse.
	PageResponse() RouteFiltersListByResourceGroupResponse
}

type routeFiltersListByResourceGroupPager struct {
	client    *RouteFiltersClient
	current   RouteFiltersListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, RouteFiltersListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *routeFiltersListByResourceGroupPager) Err() error {
	return p.err
}

func (p *routeFiltersListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RouteFilterListResult.NextLink == nil || len(*p.current.RouteFilterListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *routeFiltersListByResourceGroupPager) PageResponse() RouteFiltersListByResourceGroupResponse {
	return p.current
}

type RouteFiltersListPager interface {
	azcore.Pager
	// PageResponse returns the current RouteFiltersListResponse.
	PageResponse() RouteFiltersListResponse
}

type routeFiltersListPager struct {
	client    *RouteFiltersClient
	current   RouteFiltersListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, RouteFiltersListResponse) (*azcore.Request, error)
}

func (p *routeFiltersListPager) Err() error {
	return p.err
}

func (p *routeFiltersListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RouteFilterListResult.NextLink == nil || len(*p.current.RouteFilterListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *routeFiltersListPager) PageResponse() RouteFiltersListResponse {
	return p.current
}

type RouteTablesListAllPager interface {
	azcore.Pager
	// PageResponse returns the current RouteTablesListAllResponse.
	PageResponse() RouteTablesListAllResponse
}

type routeTablesListAllPager struct {
	client    *RouteTablesClient
	current   RouteTablesListAllResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, RouteTablesListAllResponse) (*azcore.Request, error)
}

func (p *routeTablesListAllPager) Err() error {
	return p.err
}

func (p *routeTablesListAllPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RouteTableListResult.NextLink == nil || len(*p.current.RouteTableListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAllHandleError(resp)
		return false
	}
	result, err := p.client.listAllHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *routeTablesListAllPager) PageResponse() RouteTablesListAllResponse {
	return p.current
}

type RouteTablesListPager interface {
	azcore.Pager
	// PageResponse returns the current RouteTablesListResponse.
	PageResponse() RouteTablesListResponse
}

type routeTablesListPager struct {
	client    *RouteTablesClient
	current   RouteTablesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, RouteTablesListResponse) (*azcore.Request, error)
}

func (p *routeTablesListPager) Err() error {
	return p.err
}

func (p *routeTablesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RouteTableListResult.NextLink == nil || len(*p.current.RouteTableListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *routeTablesListPager) PageResponse() RouteTablesListResponse {
	return p.current
}

type RoutesListPager interface {
	azcore.Pager
	// PageResponse returns the current RoutesListResponse.
	PageResponse() RoutesListResponse
}

type routesListPager struct {
	client    *RoutesClient
	current   RoutesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, RoutesListResponse) (*azcore.Request, error)
}

func (p *routesListPager) Err() error {
	return p.err
}

func (p *routesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RouteListResult.NextLink == nil || len(*p.current.RouteListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *routesListPager) PageResponse() RoutesListResponse {
	return p.current
}

type SecurityPartnerProvidersListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current SecurityPartnerProvidersListByResourceGroupResponse.
	PageResponse() SecurityPartnerProvidersListByResourceGroupResponse
}

type securityPartnerProvidersListByResourceGroupPager struct {
	client    *SecurityPartnerProvidersClient
	current   SecurityPartnerProvidersListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SecurityPartnerProvidersListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *securityPartnerProvidersListByResourceGroupPager) Err() error {
	return p.err
}

func (p *securityPartnerProvidersListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SecurityPartnerProviderListResult.NextLink == nil || len(*p.current.SecurityPartnerProviderListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *securityPartnerProvidersListByResourceGroupPager) PageResponse() SecurityPartnerProvidersListByResourceGroupResponse {
	return p.current
}

type SecurityPartnerProvidersListPager interface {
	azcore.Pager
	// PageResponse returns the current SecurityPartnerProvidersListResponse.
	PageResponse() SecurityPartnerProvidersListResponse
}

type securityPartnerProvidersListPager struct {
	client    *SecurityPartnerProvidersClient
	current   SecurityPartnerProvidersListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SecurityPartnerProvidersListResponse) (*azcore.Request, error)
}

func (p *securityPartnerProvidersListPager) Err() error {
	return p.err
}

func (p *securityPartnerProvidersListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SecurityPartnerProviderListResult.NextLink == nil || len(*p.current.SecurityPartnerProviderListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *securityPartnerProvidersListPager) PageResponse() SecurityPartnerProvidersListResponse {
	return p.current
}

type SecurityRulesListPager interface {
	azcore.Pager
	// PageResponse returns the current SecurityRulesListResponse.
	PageResponse() SecurityRulesListResponse
}

type securityRulesListPager struct {
	client    *SecurityRulesClient
	current   SecurityRulesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SecurityRulesListResponse) (*azcore.Request, error)
}

func (p *securityRulesListPager) Err() error {
	return p.err
}

func (p *securityRulesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SecurityRuleListResult.NextLink == nil || len(*p.current.SecurityRuleListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *securityRulesListPager) PageResponse() SecurityRulesListResponse {
	return p.current
}

type ServiceEndpointPoliciesListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current ServiceEndpointPoliciesListByResourceGroupResponse.
	PageResponse() ServiceEndpointPoliciesListByResourceGroupResponse
}

type serviceEndpointPoliciesListByResourceGroupPager struct {
	client    *ServiceEndpointPoliciesClient
	current   ServiceEndpointPoliciesListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ServiceEndpointPoliciesListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *serviceEndpointPoliciesListByResourceGroupPager) Err() error {
	return p.err
}

func (p *serviceEndpointPoliciesListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ServiceEndpointPolicyListResult.NextLink == nil || len(*p.current.ServiceEndpointPolicyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *serviceEndpointPoliciesListByResourceGroupPager) PageResponse() ServiceEndpointPoliciesListByResourceGroupResponse {
	return p.current
}

type ServiceEndpointPoliciesListPager interface {
	azcore.Pager
	// PageResponse returns the current ServiceEndpointPoliciesListResponse.
	PageResponse() ServiceEndpointPoliciesListResponse
}

type serviceEndpointPoliciesListPager struct {
	client    *ServiceEndpointPoliciesClient
	current   ServiceEndpointPoliciesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ServiceEndpointPoliciesListResponse) (*azcore.Request, error)
}

func (p *serviceEndpointPoliciesListPager) Err() error {
	return p.err
}

func (p *serviceEndpointPoliciesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ServiceEndpointPolicyListResult.NextLink == nil || len(*p.current.ServiceEndpointPolicyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *serviceEndpointPoliciesListPager) PageResponse() ServiceEndpointPoliciesListResponse {
	return p.current
}

type ServiceEndpointPolicyDefinitionsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current ServiceEndpointPolicyDefinitionsListByResourceGroupResponse.
	PageResponse() ServiceEndpointPolicyDefinitionsListByResourceGroupResponse
}

type serviceEndpointPolicyDefinitionsListByResourceGroupPager struct {
	client    *ServiceEndpointPolicyDefinitionsClient
	current   ServiceEndpointPolicyDefinitionsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ServiceEndpointPolicyDefinitionsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *serviceEndpointPolicyDefinitionsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *serviceEndpointPolicyDefinitionsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ServiceEndpointPolicyDefinitionListResult.NextLink == nil || len(*p.current.ServiceEndpointPolicyDefinitionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *serviceEndpointPolicyDefinitionsListByResourceGroupPager) PageResponse() ServiceEndpointPolicyDefinitionsListByResourceGroupResponse {
	return p.current
}

type SubnetsListPager interface {
	azcore.Pager
	// PageResponse returns the current SubnetsListResponse.
	PageResponse() SubnetsListResponse
}

type subnetsListPager struct {
	client    *SubnetsClient
	current   SubnetsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SubnetsListResponse) (*azcore.Request, error)
}

func (p *subnetsListPager) Err() error {
	return p.err
}

func (p *subnetsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SubnetListResult.NextLink == nil || len(*p.current.SubnetListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *subnetsListPager) PageResponse() SubnetsListResponse {
	return p.current
}

type UsagesListPager interface {
	azcore.Pager
	// PageResponse returns the current UsagesListResponse.
	PageResponse() UsagesListResponse
}

type usagesListPager struct {
	client    *UsagesClient
	current   UsagesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, UsagesListResponse) (*azcore.Request, error)
}

func (p *usagesListPager) Err() error {
	return p.err
}

func (p *usagesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.UsagesListResult.NextLink == nil || len(*p.current.UsagesListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *usagesListPager) PageResponse() UsagesListResponse {
	return p.current
}

type VPNConnectionsListByVPNGatewayPager interface {
	azcore.Pager
	// PageResponse returns the current VPNConnectionsListByVPNGatewayResponse.
	PageResponse() VPNConnectionsListByVPNGatewayResponse
}

type vpnConnectionsListByVPNGatewayPager struct {
	client    *VPNConnectionsClient
	current   VPNConnectionsListByVPNGatewayResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VPNConnectionsListByVPNGatewayResponse) (*azcore.Request, error)
}

func (p *vpnConnectionsListByVPNGatewayPager) Err() error {
	return p.err
}

func (p *vpnConnectionsListByVPNGatewayPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListVPNConnectionsResult.NextLink == nil || len(*p.current.ListVPNConnectionsResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByVPNGatewayHandleError(resp)
		return false
	}
	result, err := p.client.listByVPNGatewayHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *vpnConnectionsListByVPNGatewayPager) PageResponse() VPNConnectionsListByVPNGatewayResponse {
	return p.current
}

type VPNGatewaysListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current VPNGatewaysListByResourceGroupResponse.
	PageResponse() VPNGatewaysListByResourceGroupResponse
}

type vpnGatewaysListByResourceGroupPager struct {
	client    *VPNGatewaysClient
	current   VPNGatewaysListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VPNGatewaysListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *vpnGatewaysListByResourceGroupPager) Err() error {
	return p.err
}

func (p *vpnGatewaysListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListVPNGatewaysResult.NextLink == nil || len(*p.current.ListVPNGatewaysResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *vpnGatewaysListByResourceGroupPager) PageResponse() VPNGatewaysListByResourceGroupResponse {
	return p.current
}

type VPNGatewaysListPager interface {
	azcore.Pager
	// PageResponse returns the current VPNGatewaysListResponse.
	PageResponse() VPNGatewaysListResponse
}

type vpnGatewaysListPager struct {
	client    *VPNGatewaysClient
	current   VPNGatewaysListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VPNGatewaysListResponse) (*azcore.Request, error)
}

func (p *vpnGatewaysListPager) Err() error {
	return p.err
}

func (p *vpnGatewaysListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListVPNGatewaysResult.NextLink == nil || len(*p.current.ListVPNGatewaysResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *vpnGatewaysListPager) PageResponse() VPNGatewaysListResponse {
	return p.current
}

type VPNLinkConnectionsListByVPNConnectionPager interface {
	azcore.Pager
	// PageResponse returns the current VPNLinkConnectionsListByVPNConnectionResponse.
	PageResponse() VPNLinkConnectionsListByVPNConnectionResponse
}

type vpnLinkConnectionsListByVPNConnectionPager struct {
	client    *VPNLinkConnectionsClient
	current   VPNLinkConnectionsListByVPNConnectionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VPNLinkConnectionsListByVPNConnectionResponse) (*azcore.Request, error)
}

func (p *vpnLinkConnectionsListByVPNConnectionPager) Err() error {
	return p.err
}

func (p *vpnLinkConnectionsListByVPNConnectionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListVPNSiteLinkConnectionsResult.NextLink == nil || len(*p.current.ListVPNSiteLinkConnectionsResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByVPNConnectionHandleError(resp)
		return false
	}
	result, err := p.client.listByVPNConnectionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *vpnLinkConnectionsListByVPNConnectionPager) PageResponse() VPNLinkConnectionsListByVPNConnectionResponse {
	return p.current
}

type VPNServerConfigurationsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current VPNServerConfigurationsListByResourceGroupResponse.
	PageResponse() VPNServerConfigurationsListByResourceGroupResponse
}

type vpnServerConfigurationsListByResourceGroupPager struct {
	client    *VPNServerConfigurationsClient
	current   VPNServerConfigurationsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VPNServerConfigurationsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *vpnServerConfigurationsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *vpnServerConfigurationsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListVPNServerConfigurationsResult.NextLink == nil || len(*p.current.ListVPNServerConfigurationsResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *vpnServerConfigurationsListByResourceGroupPager) PageResponse() VPNServerConfigurationsListByResourceGroupResponse {
	return p.current
}

type VPNServerConfigurationsListPager interface {
	azcore.Pager
	// PageResponse returns the current VPNServerConfigurationsListResponse.
	PageResponse() VPNServerConfigurationsListResponse
}

type vpnServerConfigurationsListPager struct {
	client    *VPNServerConfigurationsClient
	current   VPNServerConfigurationsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VPNServerConfigurationsListResponse) (*azcore.Request, error)
}

func (p *vpnServerConfigurationsListPager) Err() error {
	return p.err
}

func (p *vpnServerConfigurationsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListVPNServerConfigurationsResult.NextLink == nil || len(*p.current.ListVPNServerConfigurationsResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *vpnServerConfigurationsListPager) PageResponse() VPNServerConfigurationsListResponse {
	return p.current
}

type VPNSiteLinksListByVPNSitePager interface {
	azcore.Pager
	// PageResponse returns the current VPNSiteLinksListByVPNSiteResponse.
	PageResponse() VPNSiteLinksListByVPNSiteResponse
}

type vpnSiteLinksListByVPNSitePager struct {
	client    *VPNSiteLinksClient
	current   VPNSiteLinksListByVPNSiteResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VPNSiteLinksListByVPNSiteResponse) (*azcore.Request, error)
}

func (p *vpnSiteLinksListByVPNSitePager) Err() error {
	return p.err
}

func (p *vpnSiteLinksListByVPNSitePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListVPNSiteLinksResult.NextLink == nil || len(*p.current.ListVPNSiteLinksResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByVPNSiteHandleError(resp)
		return false
	}
	result, err := p.client.listByVPNSiteHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *vpnSiteLinksListByVPNSitePager) PageResponse() VPNSiteLinksListByVPNSiteResponse {
	return p.current
}

type VPNSitesListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current VPNSitesListByResourceGroupResponse.
	PageResponse() VPNSitesListByResourceGroupResponse
}

type vpnSitesListByResourceGroupPager struct {
	client    *VPNSitesClient
	current   VPNSitesListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VPNSitesListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *vpnSitesListByResourceGroupPager) Err() error {
	return p.err
}

func (p *vpnSitesListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListVPNSitesResult.NextLink == nil || len(*p.current.ListVPNSitesResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *vpnSitesListByResourceGroupPager) PageResponse() VPNSitesListByResourceGroupResponse {
	return p.current
}

type VPNSitesListPager interface {
	azcore.Pager
	// PageResponse returns the current VPNSitesListResponse.
	PageResponse() VPNSitesListResponse
}

type vpnSitesListPager struct {
	client    *VPNSitesClient
	current   VPNSitesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VPNSitesListResponse) (*azcore.Request, error)
}

func (p *vpnSitesListPager) Err() error {
	return p.err
}

func (p *vpnSitesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListVPNSitesResult.NextLink == nil || len(*p.current.ListVPNSitesResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *vpnSitesListPager) PageResponse() VPNSitesListResponse {
	return p.current
}

type VirtualHubRouteTableV2SListPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualHubRouteTableV2SListResponse.
	PageResponse() VirtualHubRouteTableV2SListResponse
}

type virtualHubRouteTableV2SListPager struct {
	client    *VirtualHubRouteTableV2SClient
	current   VirtualHubRouteTableV2SListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualHubRouteTableV2SListResponse) (*azcore.Request, error)
}

func (p *virtualHubRouteTableV2SListPager) Err() error {
	return p.err
}

func (p *virtualHubRouteTableV2SListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListVirtualHubRouteTableV2SResult.NextLink == nil || len(*p.current.ListVirtualHubRouteTableV2SResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualHubRouteTableV2SListPager) PageResponse() VirtualHubRouteTableV2SListResponse {
	return p.current
}

type VirtualHubsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualHubsListByResourceGroupResponse.
	PageResponse() VirtualHubsListByResourceGroupResponse
}

type virtualHubsListByResourceGroupPager struct {
	client    *VirtualHubsClient
	current   VirtualHubsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualHubsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *virtualHubsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *virtualHubsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListVirtualHubsResult.NextLink == nil || len(*p.current.ListVirtualHubsResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualHubsListByResourceGroupPager) PageResponse() VirtualHubsListByResourceGroupResponse {
	return p.current
}

type VirtualHubsListPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualHubsListResponse.
	PageResponse() VirtualHubsListResponse
}

type virtualHubsListPager struct {
	client    *VirtualHubsClient
	current   VirtualHubsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualHubsListResponse) (*azcore.Request, error)
}

func (p *virtualHubsListPager) Err() error {
	return p.err
}

func (p *virtualHubsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListVirtualHubsResult.NextLink == nil || len(*p.current.ListVirtualHubsResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualHubsListPager) PageResponse() VirtualHubsListResponse {
	return p.current
}

type VirtualNetworkGatewayConnectionsListPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualNetworkGatewayConnectionsListResponse.
	PageResponse() VirtualNetworkGatewayConnectionsListResponse
}

type virtualNetworkGatewayConnectionsListPager struct {
	client    *VirtualNetworkGatewayConnectionsClient
	current   VirtualNetworkGatewayConnectionsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualNetworkGatewayConnectionsListResponse) (*azcore.Request, error)
}

func (p *virtualNetworkGatewayConnectionsListPager) Err() error {
	return p.err
}

func (p *virtualNetworkGatewayConnectionsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualNetworkGatewayConnectionListResult.NextLink == nil || len(*p.current.VirtualNetworkGatewayConnectionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualNetworkGatewayConnectionsListPager) PageResponse() VirtualNetworkGatewayConnectionsListResponse {
	return p.current
}

type VirtualNetworkGatewaysListConnectionsPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualNetworkGatewaysListConnectionsResponse.
	PageResponse() VirtualNetworkGatewaysListConnectionsResponse
}

type virtualNetworkGatewaysListConnectionsPager struct {
	client    *VirtualNetworkGatewaysClient
	current   VirtualNetworkGatewaysListConnectionsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualNetworkGatewaysListConnectionsResponse) (*azcore.Request, error)
}

func (p *virtualNetworkGatewaysListConnectionsPager) Err() error {
	return p.err
}

func (p *virtualNetworkGatewaysListConnectionsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualNetworkGatewayListConnectionsResult.NextLink == nil || len(*p.current.VirtualNetworkGatewayListConnectionsResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listConnectionsHandleError(resp)
		return false
	}
	result, err := p.client.listConnectionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualNetworkGatewaysListConnectionsPager) PageResponse() VirtualNetworkGatewaysListConnectionsResponse {
	return p.current
}

type VirtualNetworkGatewaysListPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualNetworkGatewaysListResponse.
	PageResponse() VirtualNetworkGatewaysListResponse
}

type virtualNetworkGatewaysListPager struct {
	client    *VirtualNetworkGatewaysClient
	current   VirtualNetworkGatewaysListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualNetworkGatewaysListResponse) (*azcore.Request, error)
}

func (p *virtualNetworkGatewaysListPager) Err() error {
	return p.err
}

func (p *virtualNetworkGatewaysListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualNetworkGatewayListResult.NextLink == nil || len(*p.current.VirtualNetworkGatewayListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualNetworkGatewaysListPager) PageResponse() VirtualNetworkGatewaysListResponse {
	return p.current
}

type VirtualNetworkPeeringsListPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualNetworkPeeringsListResponse.
	PageResponse() VirtualNetworkPeeringsListResponse
}

type virtualNetworkPeeringsListPager struct {
	client    *VirtualNetworkPeeringsClient
	current   VirtualNetworkPeeringsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualNetworkPeeringsListResponse) (*azcore.Request, error)
}

func (p *virtualNetworkPeeringsListPager) Err() error {
	return p.err
}

func (p *virtualNetworkPeeringsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualNetworkPeeringListResult.NextLink == nil || len(*p.current.VirtualNetworkPeeringListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualNetworkPeeringsListPager) PageResponse() VirtualNetworkPeeringsListResponse {
	return p.current
}

type VirtualNetworkTapsListAllPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualNetworkTapsListAllResponse.
	PageResponse() VirtualNetworkTapsListAllResponse
}

type virtualNetworkTapsListAllPager struct {
	client    *VirtualNetworkTapsClient
	current   VirtualNetworkTapsListAllResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualNetworkTapsListAllResponse) (*azcore.Request, error)
}

func (p *virtualNetworkTapsListAllPager) Err() error {
	return p.err
}

func (p *virtualNetworkTapsListAllPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualNetworkTapListResult.NextLink == nil || len(*p.current.VirtualNetworkTapListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAllHandleError(resp)
		return false
	}
	result, err := p.client.listAllHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualNetworkTapsListAllPager) PageResponse() VirtualNetworkTapsListAllResponse {
	return p.current
}

type VirtualNetworkTapsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualNetworkTapsListByResourceGroupResponse.
	PageResponse() VirtualNetworkTapsListByResourceGroupResponse
}

type virtualNetworkTapsListByResourceGroupPager struct {
	client    *VirtualNetworkTapsClient
	current   VirtualNetworkTapsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualNetworkTapsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *virtualNetworkTapsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *virtualNetworkTapsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualNetworkTapListResult.NextLink == nil || len(*p.current.VirtualNetworkTapListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualNetworkTapsListByResourceGroupPager) PageResponse() VirtualNetworkTapsListByResourceGroupResponse {
	return p.current
}

type VirtualNetworksListAllPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualNetworksListAllResponse.
	PageResponse() VirtualNetworksListAllResponse
}

type virtualNetworksListAllPager struct {
	client    *VirtualNetworksClient
	current   VirtualNetworksListAllResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualNetworksListAllResponse) (*azcore.Request, error)
}

func (p *virtualNetworksListAllPager) Err() error {
	return p.err
}

func (p *virtualNetworksListAllPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualNetworkListResult.NextLink == nil || len(*p.current.VirtualNetworkListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAllHandleError(resp)
		return false
	}
	result, err := p.client.listAllHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualNetworksListAllPager) PageResponse() VirtualNetworksListAllResponse {
	return p.current
}

type VirtualNetworksListPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualNetworksListResponse.
	PageResponse() VirtualNetworksListResponse
}

type virtualNetworksListPager struct {
	client    *VirtualNetworksClient
	current   VirtualNetworksListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualNetworksListResponse) (*azcore.Request, error)
}

func (p *virtualNetworksListPager) Err() error {
	return p.err
}

func (p *virtualNetworksListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualNetworkListResult.NextLink == nil || len(*p.current.VirtualNetworkListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualNetworksListPager) PageResponse() VirtualNetworksListResponse {
	return p.current
}

type VirtualNetworksListUsagePager interface {
	azcore.Pager
	// PageResponse returns the current VirtualNetworksListUsageResponse.
	PageResponse() VirtualNetworksListUsageResponse
}

type virtualNetworksListUsagePager struct {
	client    *VirtualNetworksClient
	current   VirtualNetworksListUsageResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualNetworksListUsageResponse) (*azcore.Request, error)
}

func (p *virtualNetworksListUsagePager) Err() error {
	return p.err
}

func (p *virtualNetworksListUsagePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualNetworkListUsageResult.NextLink == nil || len(*p.current.VirtualNetworkListUsageResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listUsageHandleError(resp)
		return false
	}
	result, err := p.client.listUsageHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualNetworksListUsagePager) PageResponse() VirtualNetworksListUsageResponse {
	return p.current
}

type VirtualRouterPeeringsListPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualRouterPeeringsListResponse.
	PageResponse() VirtualRouterPeeringsListResponse
}

type virtualRouterPeeringsListPager struct {
	client    *VirtualRouterPeeringsClient
	current   VirtualRouterPeeringsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualRouterPeeringsListResponse) (*azcore.Request, error)
}

func (p *virtualRouterPeeringsListPager) Err() error {
	return p.err
}

func (p *virtualRouterPeeringsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualRouterPeeringListResult.NextLink == nil || len(*p.current.VirtualRouterPeeringListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualRouterPeeringsListPager) PageResponse() VirtualRouterPeeringsListResponse {
	return p.current
}

type VirtualRoutersListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualRoutersListByResourceGroupResponse.
	PageResponse() VirtualRoutersListByResourceGroupResponse
}

type virtualRoutersListByResourceGroupPager struct {
	client    *VirtualRoutersClient
	current   VirtualRoutersListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualRoutersListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *virtualRoutersListByResourceGroupPager) Err() error {
	return p.err
}

func (p *virtualRoutersListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualRouterListResult.NextLink == nil || len(*p.current.VirtualRouterListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualRoutersListByResourceGroupPager) PageResponse() VirtualRoutersListByResourceGroupResponse {
	return p.current
}

type VirtualRoutersListPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualRoutersListResponse.
	PageResponse() VirtualRoutersListResponse
}

type virtualRoutersListPager struct {
	client    *VirtualRoutersClient
	current   VirtualRoutersListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualRoutersListResponse) (*azcore.Request, error)
}

func (p *virtualRoutersListPager) Err() error {
	return p.err
}

func (p *virtualRoutersListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualRouterListResult.NextLink == nil || len(*p.current.VirtualRouterListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualRoutersListPager) PageResponse() VirtualRoutersListResponse {
	return p.current
}

type VirtualWansListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualWansListByResourceGroupResponse.
	PageResponse() VirtualWansListByResourceGroupResponse
}

type virtualWansListByResourceGroupPager struct {
	client    *VirtualWansClient
	current   VirtualWansListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualWansListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *virtualWansListByResourceGroupPager) Err() error {
	return p.err
}

func (p *virtualWansListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListVirtualWANsResult.NextLink == nil || len(*p.current.ListVirtualWANsResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualWansListByResourceGroupPager) PageResponse() VirtualWansListByResourceGroupResponse {
	return p.current
}

type VirtualWansListPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualWansListResponse.
	PageResponse() VirtualWansListResponse
}

type virtualWansListPager struct {
	client    *VirtualWansClient
	current   VirtualWansListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualWansListResponse) (*azcore.Request, error)
}

func (p *virtualWansListPager) Err() error {
	return p.err
}

func (p *virtualWansListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListVirtualWANsResult.NextLink == nil || len(*p.current.ListVirtualWANsResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualWansListPager) PageResponse() VirtualWansListResponse {
	return p.current
}

type WebApplicationFirewallPoliciesListAllPager interface {
	azcore.Pager
	// PageResponse returns the current WebApplicationFirewallPoliciesListAllResponse.
	PageResponse() WebApplicationFirewallPoliciesListAllResponse
}

type webApplicationFirewallPoliciesListAllPager struct {
	client    *WebApplicationFirewallPoliciesClient
	current   WebApplicationFirewallPoliciesListAllResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebApplicationFirewallPoliciesListAllResponse) (*azcore.Request, error)
}

func (p *webApplicationFirewallPoliciesListAllPager) Err() error {
	return p.err
}

func (p *webApplicationFirewallPoliciesListAllPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebApplicationFirewallPolicyListResult.NextLink == nil || len(*p.current.WebApplicationFirewallPolicyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAllHandleError(resp)
		return false
	}
	result, err := p.client.listAllHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webApplicationFirewallPoliciesListAllPager) PageResponse() WebApplicationFirewallPoliciesListAllResponse {
	return p.current
}

type WebApplicationFirewallPoliciesListPager interface {
	azcore.Pager
	// PageResponse returns the current WebApplicationFirewallPoliciesListResponse.
	PageResponse() WebApplicationFirewallPoliciesListResponse
}

type webApplicationFirewallPoliciesListPager struct {
	client    *WebApplicationFirewallPoliciesClient
	current   WebApplicationFirewallPoliciesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebApplicationFirewallPoliciesListResponse) (*azcore.Request, error)
}

func (p *webApplicationFirewallPoliciesListPager) Err() error {
	return p.err
}

func (p *webApplicationFirewallPoliciesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebApplicationFirewallPolicyListResult.NextLink == nil || len(*p.current.WebApplicationFirewallPolicyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webApplicationFirewallPoliciesListPager) PageResponse() WebApplicationFirewallPoliciesListResponse {
	return p.current
}
