// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package headgroup

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"io/ioutil"
	"net/http"
)

// HTTPSuccessOperations contains the methods for the HTTPSuccess group.
type HTTPSuccessOperations interface {
	// Head200 - Return 200 status code if successful
	Head200(ctx context.Context, options *HTTPSuccessHead200Options) (*BooleanResponse, error)
	// Head204 - Return 204 status code if successful
	Head204(ctx context.Context, options *HTTPSuccessHead204Options) (*BooleanResponse, error)
	// Head404 - Return 404 status code if successful
	Head404(ctx context.Context, options *HTTPSuccessHead404Options) (*BooleanResponse, error)
}

// HTTPSuccessClient implements the HTTPSuccessOperations interface.
// Don't use this type directly, use NewHTTPSuccessClient() instead.
type HTTPSuccessClient struct {
	con *Connection
}

// NewHTTPSuccessClient creates a new instance of HTTPSuccessClient with the specified values.
func NewHTTPSuccessClient(con *Connection) HTTPSuccessOperations {
	return &HTTPSuccessClient{con: con}
}

// Pipeline returns the pipeline associated with this client.
func (client *HTTPSuccessClient) Pipeline() azcore.Pipeline {
	return client.con.Pipeline()
}

// Head200 - Return 200 status code if successful
func (client *HTTPSuccessClient) Head200(ctx context.Context, options *HTTPSuccessHead200Options) (*BooleanResponse, error) {
	req, err := client.Head200CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		return &BooleanResponse{RawResponse: resp.Response, Success: true}, nil
	} else if resp.StatusCode >= 400 && resp.StatusCode < 500 {
		return &BooleanResponse{RawResponse: resp.Response, Success: false}, nil
	} else {
		return nil, client.Head200HandleError(resp)
	}
}

// Head200CreateRequest creates the Head200 request.
func (client *HTTPSuccessClient) Head200CreateRequest(ctx context.Context, options *HTTPSuccessHead200Options) (*azcore.Request, error) {
	urlPath := "/http/success/200"
	req, err := azcore.NewRequest(ctx, http.MethodHead, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// Head200HandleError handles the Head200 error response.
func (client *HTTPSuccessClient) Head200HandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// Head204 - Return 204 status code if successful
func (client *HTTPSuccessClient) Head204(ctx context.Context, options *HTTPSuccessHead204Options) (*BooleanResponse, error) {
	req, err := client.Head204CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		return &BooleanResponse{RawResponse: resp.Response, Success: true}, nil
	} else if resp.StatusCode >= 400 && resp.StatusCode < 500 {
		return &BooleanResponse{RawResponse: resp.Response, Success: false}, nil
	} else {
		return nil, client.Head204HandleError(resp)
	}
}

// Head204CreateRequest creates the Head204 request.
func (client *HTTPSuccessClient) Head204CreateRequest(ctx context.Context, options *HTTPSuccessHead204Options) (*azcore.Request, error) {
	urlPath := "/http/success/204"
	req, err := azcore.NewRequest(ctx, http.MethodHead, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// Head204HandleError handles the Head204 error response.
func (client *HTTPSuccessClient) Head204HandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// Head404 - Return 404 status code if successful
func (client *HTTPSuccessClient) Head404(ctx context.Context, options *HTTPSuccessHead404Options) (*BooleanResponse, error) {
	req, err := client.Head404CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		return &BooleanResponse{RawResponse: resp.Response, Success: true}, nil
	} else if resp.StatusCode >= 400 && resp.StatusCode < 500 {
		return &BooleanResponse{RawResponse: resp.Response, Success: false}, nil
	} else {
		return nil, client.Head404HandleError(resp)
	}
}

// Head404CreateRequest creates the Head404 request.
func (client *HTTPSuccessClient) Head404CreateRequest(ctx context.Context, options *HTTPSuccessHead404Options) (*azcore.Request, error) {
	urlPath := "/http/success/404"
	req, err := azcore.NewRequest(ctx, http.MethodHead, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// Head404HandleError handles the Head404 error response.
func (client *HTTPSuccessClient) Head404HandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}
