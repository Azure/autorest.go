//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package complexmodelgroup

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ComplexModelClient contains the methods for the ComplexModelClient group.
// Don't use this type directly, use NewComplexModelClient() instead.
type ComplexModelClient struct {
	pl runtime.Pipeline
}

// NewComplexModelClient creates a new instance of ComplexModelClient with the specified values.
// pl - the pipeline used for sending requests and handling responses.
func NewComplexModelClient(pl runtime.Pipeline) *ComplexModelClient {
	client := &ComplexModelClient{
		pl: pl,
	}
	return client
}

// Create - Resets products.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2014-04-01-preview
// subscriptionID - Subscription ID.
// resourceGroupName - Resource Group ID.
// bodyParameter - body Parameter
// options - ComplexModelClientCreateOptions contains the optional parameters for the ComplexModelClient.Create method.
func (client *ComplexModelClient) Create(ctx context.Context, subscriptionID string, resourceGroupName string, bodyParameter CatalogDictionaryOfArray, options *ComplexModelClientCreateOptions) (ComplexModelClientCreateResponse, error) {
	req, err := client.createCreateRequest(ctx, subscriptionID, resourceGroupName, bodyParameter, options)
	if err != nil {
		return ComplexModelClientCreateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ComplexModelClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ComplexModelClientCreateResponse{}, runtime.NewResponseError(resp)
	}
	return client.createHandleResponse(resp)
}

// createCreateRequest creates the Create request.
func (client *ComplexModelClient) createCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, bodyParameter CatalogDictionaryOfArray, options *ComplexModelClientCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/Microsoft.Cache/Redis"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2014-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, bodyParameter)
}

// createHandleResponse handles the Create response.
func (client *ComplexModelClient) createHandleResponse(resp *http.Response) (ComplexModelClientCreateResponse, error) {
	result := ComplexModelClientCreateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CatalogDictionary); err != nil {
		return ComplexModelClientCreateResponse{}, err
	}
	return result, nil
}

// List - The Products endpoint returns information about the Uber products offered at a given location. The response includes
// the display name and other details about each product, and lists the products in
// the proper display order.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2014-04-01-preview
// resourceGroupName - Resource Group ID.
// options - ComplexModelClientListOptions contains the optional parameters for the ComplexModelClient.List method.
func (client *ComplexModelClient) List(ctx context.Context, resourceGroupName string, options *ComplexModelClientListOptions) (ComplexModelClientListResponse, error) {
	req, err := client.listCreateRequest(ctx, resourceGroupName, options)
	if err != nil {
		return ComplexModelClientListResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ComplexModelClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ComplexModelClientListResponse{}, runtime.NewResponseError(resp)
	}
	return client.listHandleResponse(resp)
}

// listCreateRequest creates the List request.
func (client *ComplexModelClient) listCreateRequest(ctx context.Context, resourceGroupName string, options *ComplexModelClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/Microsoft.Cache/Redis"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape("123456"))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2014-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *ComplexModelClient) listHandleResponse(resp *http.Response) (ComplexModelClientListResponse, error) {
	result := ComplexModelClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CatalogArray); err != nil {
		return ComplexModelClientListResponse{}, err
	}
	return result, nil
}

// Update - Resets products.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2014-04-01-preview
// subscriptionID - Subscription ID.
// resourceGroupName - Resource Group ID.
// bodyParameter - body Parameter
// options - ComplexModelClientUpdateOptions contains the optional parameters for the ComplexModelClient.Update method.
func (client *ComplexModelClient) Update(ctx context.Context, subscriptionID string, resourceGroupName string, bodyParameter CatalogArrayOfDictionary, options *ComplexModelClientUpdateOptions) (ComplexModelClientUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, subscriptionID, resourceGroupName, bodyParameter, options)
	if err != nil {
		return ComplexModelClientUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ComplexModelClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ComplexModelClientUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *ComplexModelClient) updateCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, bodyParameter CatalogArrayOfDictionary, options *ComplexModelClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/Microsoft.Cache/Redis"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2014-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, bodyParameter)
}

// updateHandleResponse handles the Update response.
func (client *ComplexModelClient) updateHandleResponse(resp *http.Response) (ComplexModelClientUpdateResponse, error) {
	result := ComplexModelClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CatalogArray); err != nil {
		return ComplexModelClientUpdateResponse{}, err
	}
	return result, nil
}
