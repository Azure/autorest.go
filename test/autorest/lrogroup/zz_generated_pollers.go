// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package lrogroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"time"
)

// HTTPPoller provides polling facilities until the operation reaches a terminal state.
type HTTPPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final *http.Response will be returned.
	FinalResponse(ctx context.Context) (*http.Response, error)
}

type httpPoller struct {
	pipeline azcore.Pipeline
	pt       armcore.Poller
}

func (p *httpPoller) Done() bool {
	return p.pt.Done()
}

func (p *httpPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx, p.pipeline)
}

func (p *httpPoller) FinalResponse(ctx context.Context) (*http.Response, error) {
	return p.pt.FinalResponse(ctx, p.pipeline, nil)
}

func (p *httpPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *httpPoller) pollUntilDone(ctx context.Context, frequency time.Duration) (*http.Response, error) {
	return p.pt.PollUntilDone(ctx, frequency, p.pipeline, nil)
}

// ProductArrayPoller provides polling facilities until the operation reaches a terminal state.
type ProductArrayPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ProductArrayResponse will be returned.
	FinalResponse(ctx context.Context) (ProductArrayResponse, error)
}

type productArrayPoller struct {
	pipeline azcore.Pipeline
	pt       armcore.Poller
}

func (p *productArrayPoller) Done() bool {
	return p.pt.Done()
}

func (p *productArrayPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx, p.pipeline)
}

func (p *productArrayPoller) FinalResponse(ctx context.Context) (ProductArrayResponse, error) {
	respType := ProductArrayResponse{ProductArray: []*Product{}}
	resp, err := p.pt.FinalResponse(ctx, p.pipeline, &respType.ProductArray)
	if err != nil {
		return ProductArrayResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *productArrayPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *productArrayPoller) pollUntilDone(ctx context.Context, frequency time.Duration) (ProductArrayResponse, error) {
	respType := ProductArrayResponse{ProductArray: []*Product{}}
	resp, err := p.pt.PollUntilDone(ctx, frequency, p.pipeline, &respType.ProductArray)
	if err != nil {
		return ProductArrayResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ProductPoller provides polling facilities until the operation reaches a terminal state.
type ProductPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ProductResponse will be returned.
	FinalResponse(ctx context.Context) (ProductResponse, error)
}

type productPoller struct {
	pipeline azcore.Pipeline
	pt       armcore.Poller
}

func (p *productPoller) Done() bool {
	return p.pt.Done()
}

func (p *productPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx, p.pipeline)
}

func (p *productPoller) FinalResponse(ctx context.Context) (ProductResponse, error) {
	respType := ProductResponse{Product: &Product{}}
	resp, err := p.pt.FinalResponse(ctx, p.pipeline, respType.Product)
	if err != nil {
		return ProductResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *productPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *productPoller) pollUntilDone(ctx context.Context, frequency time.Duration) (ProductResponse, error) {
	respType := ProductResponse{Product: &Product{}}
	resp, err := p.pt.PollUntilDone(ctx, frequency, p.pipeline, respType.Product)
	if err != nil {
		return ProductResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// SKUPoller provides polling facilities until the operation reaches a terminal state.
type SKUPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final SKUResponse will be returned.
	FinalResponse(ctx context.Context) (SKUResponse, error)
}

type skuPoller struct {
	pipeline azcore.Pipeline
	pt       armcore.Poller
}

func (p *skuPoller) Done() bool {
	return p.pt.Done()
}

func (p *skuPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx, p.pipeline)
}

func (p *skuPoller) FinalResponse(ctx context.Context) (SKUResponse, error) {
	respType := SKUResponse{SKU: &SKU{}}
	resp, err := p.pt.FinalResponse(ctx, p.pipeline, respType.SKU)
	if err != nil {
		return SKUResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *skuPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *skuPoller) pollUntilDone(ctx context.Context, frequency time.Duration) (SKUResponse, error) {
	respType := SKUResponse{SKU: &SKU{}}
	resp, err := p.pt.PollUntilDone(ctx, frequency, p.pipeline, respType.SKU)
	if err != nil {
		return SKUResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// SubProductPoller provides polling facilities until the operation reaches a terminal state.
type SubProductPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final SubProductResponse will be returned.
	FinalResponse(ctx context.Context) (SubProductResponse, error)
}

type subProductPoller struct {
	pipeline azcore.Pipeline
	pt       armcore.Poller
}

func (p *subProductPoller) Done() bool {
	return p.pt.Done()
}

func (p *subProductPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx, p.pipeline)
}

func (p *subProductPoller) FinalResponse(ctx context.Context) (SubProductResponse, error) {
	respType := SubProductResponse{SubProduct: &SubProduct{}}
	resp, err := p.pt.FinalResponse(ctx, p.pipeline, respType.SubProduct)
	if err != nil {
		return SubProductResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *subProductPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *subProductPoller) pollUntilDone(ctx context.Context, frequency time.Duration) (SubProductResponse, error) {
	respType := SubProductResponse{SubProduct: &SubProduct{}}
	resp, err := p.pt.PollUntilDone(ctx, frequency, p.pipeline, respType.SubProduct)
	if err != nil {
		return SubProductResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}
