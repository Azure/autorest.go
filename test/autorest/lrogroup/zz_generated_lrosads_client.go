//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package lrogroup

import (
	"context"
	"fmt"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// LROSADsClient contains the methods for the LROSADs group.
// Don't use this type directly, use NewLROSADsClient() instead.
type LROSADsClient struct {
	con *Connection
}

// NewLROSADsClient creates a new instance of LROSADsClient with the specified values.
func NewLROSADsClient(con *Connection) *LROSADsClient {
	return &LROSADsClient{con: con}
}

// BeginDelete202NonRetry400 - Long running delete request, service returns a 202 with a location header
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) BeginDelete202NonRetry400(ctx context.Context, options *LROSADsBeginDelete202NonRetry400Options) (LROSADsDelete202NonRetry400PollerResponse, error) {
	resp, err := client.delete202NonRetry400(ctx, options)
	if err != nil {
		return LROSADsDelete202NonRetry400PollerResponse{}, err
	}
	result := LROSADsDelete202NonRetry400PollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("LROSADsClient.Delete202NonRetry400", "", resp, client.con.Pipeline(), client.delete202NonRetry400HandleError)
	if err != nil {
		return LROSADsDelete202NonRetry400PollerResponse{}, err
	}
	result.Poller = &LROSADsDelete202NonRetry400Poller{
		pt: pt,
	}
	return result, nil
}

// Delete202NonRetry400 - Long running delete request, service returns a 202 with a location header
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) delete202NonRetry400(ctx context.Context, options *LROSADsBeginDelete202NonRetry400Options) (*http.Response, error) {
	req, err := client.delete202NonRetry400CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, client.delete202NonRetry400HandleError(resp)
	}
	return resp, nil
}

// delete202NonRetry400CreateRequest creates the Delete202NonRetry400 request.
func (client *LROSADsClient) delete202NonRetry400CreateRequest(ctx context.Context, options *LROSADsBeginDelete202NonRetry400Options) (*policy.Request, error) {
	urlPath := "/lro/nonretryerror/delete/202/retry/400"
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// delete202NonRetry400HandleError handles the Delete202NonRetry400 error response.
func (client *LROSADsClient) delete202NonRetry400HandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginDelete202RetryInvalidHeader - Long running delete request, service returns a 202 to the initial request receing a reponse with an invalid 'Location'
// and 'Retry-After' headers
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) BeginDelete202RetryInvalidHeader(ctx context.Context, options *LROSADsBeginDelete202RetryInvalidHeaderOptions) (LROSADsDelete202RetryInvalidHeaderPollerResponse, error) {
	resp, err := client.delete202RetryInvalidHeader(ctx, options)
	if err != nil {
		return LROSADsDelete202RetryInvalidHeaderPollerResponse{}, err
	}
	result := LROSADsDelete202RetryInvalidHeaderPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("LROSADsClient.Delete202RetryInvalidHeader", "", resp, client.con.Pipeline(), client.delete202RetryInvalidHeaderHandleError)
	if err != nil {
		return LROSADsDelete202RetryInvalidHeaderPollerResponse{}, err
	}
	result.Poller = &LROSADsDelete202RetryInvalidHeaderPoller{
		pt: pt,
	}
	return result, nil
}

// Delete202RetryInvalidHeader - Long running delete request, service returns a 202 to the initial request receing a reponse with an invalid 'Location'
// and 'Retry-After' headers
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) delete202RetryInvalidHeader(ctx context.Context, options *LROSADsBeginDelete202RetryInvalidHeaderOptions) (*http.Response, error) {
	req, err := client.delete202RetryInvalidHeaderCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, client.delete202RetryInvalidHeaderHandleError(resp)
	}
	return resp, nil
}

// delete202RetryInvalidHeaderCreateRequest creates the Delete202RetryInvalidHeader request.
func (client *LROSADsClient) delete202RetryInvalidHeaderCreateRequest(ctx context.Context, options *LROSADsBeginDelete202RetryInvalidHeaderOptions) (*policy.Request, error) {
	urlPath := "/lro/error/delete/202/retry/invalidheader"
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// delete202RetryInvalidHeaderHandleError handles the Delete202RetryInvalidHeader error response.
func (client *LROSADsClient) delete202RetryInvalidHeaderHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginDelete204Succeeded - Long running delete request, service returns a 204 to the initial request, indicating success.
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) BeginDelete204Succeeded(ctx context.Context, options *LROSADsBeginDelete204SucceededOptions) (LROSADsDelete204SucceededPollerResponse, error) {
	resp, err := client.delete204Succeeded(ctx, options)
	if err != nil {
		return LROSADsDelete204SucceededPollerResponse{}, err
	}
	result := LROSADsDelete204SucceededPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("LROSADsClient.Delete204Succeeded", "", resp, client.con.Pipeline(), client.delete204SucceededHandleError)
	if err != nil {
		return LROSADsDelete204SucceededPollerResponse{}, err
	}
	result.Poller = &LROSADsDelete204SucceededPoller{
		pt: pt,
	}
	return result, nil
}

// Delete204Succeeded - Long running delete request, service returns a 204 to the initial request, indicating success.
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) delete204Succeeded(ctx context.Context, options *LROSADsBeginDelete204SucceededOptions) (*http.Response, error) {
	req, err := client.delete204SucceededCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return nil, client.delete204SucceededHandleError(resp)
	}
	return resp, nil
}

// delete204SucceededCreateRequest creates the Delete204Succeeded request.
func (client *LROSADsClient) delete204SucceededCreateRequest(ctx context.Context, options *LROSADsBeginDelete204SucceededOptions) (*policy.Request, error) {
	urlPath := "/lro/error/delete/204/nolocation"
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// delete204SucceededHandleError handles the Delete204Succeeded error response.
func (client *LROSADsClient) delete204SucceededHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginDeleteAsyncRelativeRetry400 - Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation
// header for operation status
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) BeginDeleteAsyncRelativeRetry400(ctx context.Context, options *LROSADsBeginDeleteAsyncRelativeRetry400Options) (LROSADsDeleteAsyncRelativeRetry400PollerResponse, error) {
	resp, err := client.deleteAsyncRelativeRetry400(ctx, options)
	if err != nil {
		return LROSADsDeleteAsyncRelativeRetry400PollerResponse{}, err
	}
	result := LROSADsDeleteAsyncRelativeRetry400PollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("LROSADsClient.DeleteAsyncRelativeRetry400", "", resp, client.con.Pipeline(), client.deleteAsyncRelativeRetry400HandleError)
	if err != nil {
		return LROSADsDeleteAsyncRelativeRetry400PollerResponse{}, err
	}
	result.Poller = &LROSADsDeleteAsyncRelativeRetry400Poller{
		pt: pt,
	}
	return result, nil
}

// DeleteAsyncRelativeRetry400 - Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation
// header for operation status
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) deleteAsyncRelativeRetry400(ctx context.Context, options *LROSADsBeginDeleteAsyncRelativeRetry400Options) (*http.Response, error) {
	req, err := client.deleteAsyncRelativeRetry400CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, client.deleteAsyncRelativeRetry400HandleError(resp)
	}
	return resp, nil
}

// deleteAsyncRelativeRetry400CreateRequest creates the DeleteAsyncRelativeRetry400 request.
func (client *LROSADsClient) deleteAsyncRelativeRetry400CreateRequest(ctx context.Context, options *LROSADsBeginDeleteAsyncRelativeRetry400Options) (*policy.Request, error) {
	urlPath := "/lro/nonretryerror/deleteasync/retry/400"
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteAsyncRelativeRetry400HandleError handles the DeleteAsyncRelativeRetry400 error response.
func (client *LROSADsClient) deleteAsyncRelativeRetry400HandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginDeleteAsyncRelativeRetryInvalidHeader - Long running delete request, service returns a 202 to the initial request. The endpoint indicated in the
// Azure-AsyncOperation header is invalid
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) BeginDeleteAsyncRelativeRetryInvalidHeader(ctx context.Context, options *LROSADsBeginDeleteAsyncRelativeRetryInvalidHeaderOptions) (LROSADsDeleteAsyncRelativeRetryInvalidHeaderPollerResponse, error) {
	resp, err := client.deleteAsyncRelativeRetryInvalidHeader(ctx, options)
	if err != nil {
		return LROSADsDeleteAsyncRelativeRetryInvalidHeaderPollerResponse{}, err
	}
	result := LROSADsDeleteAsyncRelativeRetryInvalidHeaderPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("LROSADsClient.DeleteAsyncRelativeRetryInvalidHeader", "", resp, client.con.Pipeline(), client.deleteAsyncRelativeRetryInvalidHeaderHandleError)
	if err != nil {
		return LROSADsDeleteAsyncRelativeRetryInvalidHeaderPollerResponse{}, err
	}
	result.Poller = &LROSADsDeleteAsyncRelativeRetryInvalidHeaderPoller{
		pt: pt,
	}
	return result, nil
}

// DeleteAsyncRelativeRetryInvalidHeader - Long running delete request, service returns a 202 to the initial request. The endpoint indicated in the Azure-AsyncOperation
// header is invalid
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) deleteAsyncRelativeRetryInvalidHeader(ctx context.Context, options *LROSADsBeginDeleteAsyncRelativeRetryInvalidHeaderOptions) (*http.Response, error) {
	req, err := client.deleteAsyncRelativeRetryInvalidHeaderCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, client.deleteAsyncRelativeRetryInvalidHeaderHandleError(resp)
	}
	return resp, nil
}

// deleteAsyncRelativeRetryInvalidHeaderCreateRequest creates the DeleteAsyncRelativeRetryInvalidHeader request.
func (client *LROSADsClient) deleteAsyncRelativeRetryInvalidHeaderCreateRequest(ctx context.Context, options *LROSADsBeginDeleteAsyncRelativeRetryInvalidHeaderOptions) (*policy.Request, error) {
	urlPath := "/lro/error/deleteasync/retry/invalidheader"
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteAsyncRelativeRetryInvalidHeaderHandleError handles the DeleteAsyncRelativeRetryInvalidHeader error response.
func (client *LROSADsClient) deleteAsyncRelativeRetryInvalidHeaderHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginDeleteAsyncRelativeRetryInvalidJSONPolling - Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated
// in the Azure-AsyncOperation header for operation status
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) BeginDeleteAsyncRelativeRetryInvalidJSONPolling(ctx context.Context, options *LROSADsBeginDeleteAsyncRelativeRetryInvalidJSONPollingOptions) (LROSADsDeleteAsyncRelativeRetryInvalidJSONPollingPollerResponse, error) {
	resp, err := client.deleteAsyncRelativeRetryInvalidJSONPolling(ctx, options)
	if err != nil {
		return LROSADsDeleteAsyncRelativeRetryInvalidJSONPollingPollerResponse{}, err
	}
	result := LROSADsDeleteAsyncRelativeRetryInvalidJSONPollingPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("LROSADsClient.DeleteAsyncRelativeRetryInvalidJSONPolling", "", resp, client.con.Pipeline(), client.deleteAsyncRelativeRetryInvalidJSONPollingHandleError)
	if err != nil {
		return LROSADsDeleteAsyncRelativeRetryInvalidJSONPollingPollerResponse{}, err
	}
	result.Poller = &LROSADsDeleteAsyncRelativeRetryInvalidJSONPollingPoller{
		pt: pt,
	}
	return result, nil
}

// DeleteAsyncRelativeRetryInvalidJSONPolling - Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in
// the Azure-AsyncOperation header for operation status
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) deleteAsyncRelativeRetryInvalidJSONPolling(ctx context.Context, options *LROSADsBeginDeleteAsyncRelativeRetryInvalidJSONPollingOptions) (*http.Response, error) {
	req, err := client.deleteAsyncRelativeRetryInvalidJSONPollingCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, client.deleteAsyncRelativeRetryInvalidJSONPollingHandleError(resp)
	}
	return resp, nil
}

// deleteAsyncRelativeRetryInvalidJSONPollingCreateRequest creates the DeleteAsyncRelativeRetryInvalidJSONPolling request.
func (client *LROSADsClient) deleteAsyncRelativeRetryInvalidJSONPollingCreateRequest(ctx context.Context, options *LROSADsBeginDeleteAsyncRelativeRetryInvalidJSONPollingOptions) (*policy.Request, error) {
	urlPath := "/lro/error/deleteasync/retry/invalidjsonpolling"
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteAsyncRelativeRetryInvalidJSONPollingHandleError handles the DeleteAsyncRelativeRetryInvalidJSONPolling error response.
func (client *LROSADsClient) deleteAsyncRelativeRetryInvalidJSONPollingHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginDeleteAsyncRelativeRetryNoStatus - Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
// Azure-AsyncOperation header for operation status
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) BeginDeleteAsyncRelativeRetryNoStatus(ctx context.Context, options *LROSADsBeginDeleteAsyncRelativeRetryNoStatusOptions) (LROSADsDeleteAsyncRelativeRetryNoStatusPollerResponse, error) {
	resp, err := client.deleteAsyncRelativeRetryNoStatus(ctx, options)
	if err != nil {
		return LROSADsDeleteAsyncRelativeRetryNoStatusPollerResponse{}, err
	}
	result := LROSADsDeleteAsyncRelativeRetryNoStatusPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("LROSADsClient.DeleteAsyncRelativeRetryNoStatus", "", resp, client.con.Pipeline(), client.deleteAsyncRelativeRetryNoStatusHandleError)
	if err != nil {
		return LROSADsDeleteAsyncRelativeRetryNoStatusPollerResponse{}, err
	}
	result.Poller = &LROSADsDeleteAsyncRelativeRetryNoStatusPoller{
		pt: pt,
	}
	return result, nil
}

// DeleteAsyncRelativeRetryNoStatus - Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation
// header for operation status
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) deleteAsyncRelativeRetryNoStatus(ctx context.Context, options *LROSADsBeginDeleteAsyncRelativeRetryNoStatusOptions) (*http.Response, error) {
	req, err := client.deleteAsyncRelativeRetryNoStatusCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, client.deleteAsyncRelativeRetryNoStatusHandleError(resp)
	}
	return resp, nil
}

// deleteAsyncRelativeRetryNoStatusCreateRequest creates the DeleteAsyncRelativeRetryNoStatus request.
func (client *LROSADsClient) deleteAsyncRelativeRetryNoStatusCreateRequest(ctx context.Context, options *LROSADsBeginDeleteAsyncRelativeRetryNoStatusOptions) (*policy.Request, error) {
	urlPath := "/lro/error/deleteasync/retry/nostatus"
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteAsyncRelativeRetryNoStatusHandleError handles the DeleteAsyncRelativeRetryNoStatus error response.
func (client *LROSADsClient) deleteAsyncRelativeRetryNoStatusHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginDeleteNonRetry400 - Long running delete request, service returns a 400 with an error body
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) BeginDeleteNonRetry400(ctx context.Context, options *LROSADsBeginDeleteNonRetry400Options) (LROSADsDeleteNonRetry400PollerResponse, error) {
	resp, err := client.deleteNonRetry400(ctx, options)
	if err != nil {
		return LROSADsDeleteNonRetry400PollerResponse{}, err
	}
	result := LROSADsDeleteNonRetry400PollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("LROSADsClient.DeleteNonRetry400", "", resp, client.con.Pipeline(), client.deleteNonRetry400HandleError)
	if err != nil {
		return LROSADsDeleteNonRetry400PollerResponse{}, err
	}
	result.Poller = &LROSADsDeleteNonRetry400Poller{
		pt: pt,
	}
	return result, nil
}

// DeleteNonRetry400 - Long running delete request, service returns a 400 with an error body
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) deleteNonRetry400(ctx context.Context, options *LROSADsBeginDeleteNonRetry400Options) (*http.Response, error) {
	req, err := client.deleteNonRetry400CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, client.deleteNonRetry400HandleError(resp)
	}
	return resp, nil
}

// deleteNonRetry400CreateRequest creates the DeleteNonRetry400 request.
func (client *LROSADsClient) deleteNonRetry400CreateRequest(ctx context.Context, options *LROSADsBeginDeleteNonRetry400Options) (*policy.Request, error) {
	urlPath := "/lro/nonretryerror/delete/400"
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteNonRetry400HandleError handles the DeleteNonRetry400 error response.
func (client *LROSADsClient) deleteNonRetry400HandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginPost202NoLocation - Long running post request, service returns a 202 to the initial request, without a location header.
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) BeginPost202NoLocation(ctx context.Context, options *LROSADsBeginPost202NoLocationOptions) (LROSADsPost202NoLocationPollerResponse, error) {
	resp, err := client.post202NoLocation(ctx, options)
	if err != nil {
		return LROSADsPost202NoLocationPollerResponse{}, err
	}
	result := LROSADsPost202NoLocationPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("LROSADsClient.Post202NoLocation", "", resp, client.con.Pipeline(), client.post202NoLocationHandleError)
	if err != nil {
		return LROSADsPost202NoLocationPollerResponse{}, err
	}
	result.Poller = &LROSADsPost202NoLocationPoller{
		pt: pt,
	}
	return result, nil
}

// Post202NoLocation - Long running post request, service returns a 202 to the initial request, without a location header.
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) post202NoLocation(ctx context.Context, options *LROSADsBeginPost202NoLocationOptions) (*http.Response, error) {
	req, err := client.post202NoLocationCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, client.post202NoLocationHandleError(resp)
	}
	return resp, nil
}

// post202NoLocationCreateRequest creates the Post202NoLocation request.
func (client *LROSADsClient) post202NoLocationCreateRequest(ctx context.Context, options *LROSADsBeginPost202NoLocationOptions) (*policy.Request, error) {
	urlPath := "/lro/error/post/202/nolocation"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Product != nil {
		return req, runtime.MarshalAsJSON(req, *options.Product)
	}
	return req, nil
}

// post202NoLocationHandleError handles the Post202NoLocation error response.
func (client *LROSADsClient) post202NoLocationHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginPost202NonRetry400 - Long running post request, service returns a 202 with a location header
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) BeginPost202NonRetry400(ctx context.Context, options *LROSADsBeginPost202NonRetry400Options) (LROSADsPost202NonRetry400PollerResponse, error) {
	resp, err := client.post202NonRetry400(ctx, options)
	if err != nil {
		return LROSADsPost202NonRetry400PollerResponse{}, err
	}
	result := LROSADsPost202NonRetry400PollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("LROSADsClient.Post202NonRetry400", "", resp, client.con.Pipeline(), client.post202NonRetry400HandleError)
	if err != nil {
		return LROSADsPost202NonRetry400PollerResponse{}, err
	}
	result.Poller = &LROSADsPost202NonRetry400Poller{
		pt: pt,
	}
	return result, nil
}

// Post202NonRetry400 - Long running post request, service returns a 202 with a location header
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) post202NonRetry400(ctx context.Context, options *LROSADsBeginPost202NonRetry400Options) (*http.Response, error) {
	req, err := client.post202NonRetry400CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, client.post202NonRetry400HandleError(resp)
	}
	return resp, nil
}

// post202NonRetry400CreateRequest creates the Post202NonRetry400 request.
func (client *LROSADsClient) post202NonRetry400CreateRequest(ctx context.Context, options *LROSADsBeginPost202NonRetry400Options) (*policy.Request, error) {
	urlPath := "/lro/nonretryerror/post/202/retry/400"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Product != nil {
		return req, runtime.MarshalAsJSON(req, *options.Product)
	}
	return req, nil
}

// post202NonRetry400HandleError handles the Post202NonRetry400 error response.
func (client *LROSADsClient) post202NonRetry400HandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginPost202RetryInvalidHeader - Long running post request, service returns a 202 to the initial request, with invalid 'Location' and 'Retry-After' headers.
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) BeginPost202RetryInvalidHeader(ctx context.Context, options *LROSADsBeginPost202RetryInvalidHeaderOptions) (LROSADsPost202RetryInvalidHeaderPollerResponse, error) {
	resp, err := client.post202RetryInvalidHeader(ctx, options)
	if err != nil {
		return LROSADsPost202RetryInvalidHeaderPollerResponse{}, err
	}
	result := LROSADsPost202RetryInvalidHeaderPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("LROSADsClient.Post202RetryInvalidHeader", "", resp, client.con.Pipeline(), client.post202RetryInvalidHeaderHandleError)
	if err != nil {
		return LROSADsPost202RetryInvalidHeaderPollerResponse{}, err
	}
	result.Poller = &LROSADsPost202RetryInvalidHeaderPoller{
		pt: pt,
	}
	return result, nil
}

// Post202RetryInvalidHeader - Long running post request, service returns a 202 to the initial request, with invalid 'Location' and 'Retry-After' headers.
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) post202RetryInvalidHeader(ctx context.Context, options *LROSADsBeginPost202RetryInvalidHeaderOptions) (*http.Response, error) {
	req, err := client.post202RetryInvalidHeaderCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, client.post202RetryInvalidHeaderHandleError(resp)
	}
	return resp, nil
}

// post202RetryInvalidHeaderCreateRequest creates the Post202RetryInvalidHeader request.
func (client *LROSADsClient) post202RetryInvalidHeaderCreateRequest(ctx context.Context, options *LROSADsBeginPost202RetryInvalidHeaderOptions) (*policy.Request, error) {
	urlPath := "/lro/error/post/202/retry/invalidheader"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Product != nil {
		return req, runtime.MarshalAsJSON(req, *options.Product)
	}
	return req, nil
}

// post202RetryInvalidHeaderHandleError handles the Post202RetryInvalidHeader error response.
func (client *LROSADsClient) post202RetryInvalidHeaderHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginPostAsyncRelativeRetry400 - Long running post request, service returns a 202 to the initial request Poll the endpoint indicated in the Azure-AsyncOperation
// header for operation status
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) BeginPostAsyncRelativeRetry400(ctx context.Context, options *LROSADsBeginPostAsyncRelativeRetry400Options) (LROSADsPostAsyncRelativeRetry400PollerResponse, error) {
	resp, err := client.postAsyncRelativeRetry400(ctx, options)
	if err != nil {
		return LROSADsPostAsyncRelativeRetry400PollerResponse{}, err
	}
	result := LROSADsPostAsyncRelativeRetry400PollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("LROSADsClient.PostAsyncRelativeRetry400", "", resp, client.con.Pipeline(), client.postAsyncRelativeRetry400HandleError)
	if err != nil {
		return LROSADsPostAsyncRelativeRetry400PollerResponse{}, err
	}
	result.Poller = &LROSADsPostAsyncRelativeRetry400Poller{
		pt: pt,
	}
	return result, nil
}

// PostAsyncRelativeRetry400 - Long running post request, service returns a 202 to the initial request Poll the endpoint indicated in the Azure-AsyncOperation
// header for operation status
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) postAsyncRelativeRetry400(ctx context.Context, options *LROSADsBeginPostAsyncRelativeRetry400Options) (*http.Response, error) {
	req, err := client.postAsyncRelativeRetry400CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, client.postAsyncRelativeRetry400HandleError(resp)
	}
	return resp, nil
}

// postAsyncRelativeRetry400CreateRequest creates the PostAsyncRelativeRetry400 request.
func (client *LROSADsClient) postAsyncRelativeRetry400CreateRequest(ctx context.Context, options *LROSADsBeginPostAsyncRelativeRetry400Options) (*policy.Request, error) {
	urlPath := "/lro/nonretryerror/postasync/retry/400"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Product != nil {
		return req, runtime.MarshalAsJSON(req, *options.Product)
	}
	return req, nil
}

// postAsyncRelativeRetry400HandleError handles the PostAsyncRelativeRetry400 error response.
func (client *LROSADsClient) postAsyncRelativeRetry400HandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginPostAsyncRelativeRetryInvalidHeader - Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// The endpoint indicated in the Azure-AsyncOperation header is
// invalid.
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) BeginPostAsyncRelativeRetryInvalidHeader(ctx context.Context, options *LROSADsBeginPostAsyncRelativeRetryInvalidHeaderOptions) (LROSADsPostAsyncRelativeRetryInvalidHeaderPollerResponse, error) {
	resp, err := client.postAsyncRelativeRetryInvalidHeader(ctx, options)
	if err != nil {
		return LROSADsPostAsyncRelativeRetryInvalidHeaderPollerResponse{}, err
	}
	result := LROSADsPostAsyncRelativeRetryInvalidHeaderPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("LROSADsClient.PostAsyncRelativeRetryInvalidHeader", "", resp, client.con.Pipeline(), client.postAsyncRelativeRetryInvalidHeaderHandleError)
	if err != nil {
		return LROSADsPostAsyncRelativeRetryInvalidHeaderPollerResponse{}, err
	}
	result.Poller = &LROSADsPostAsyncRelativeRetryInvalidHeaderPoller{
		pt: pt,
	}
	return result, nil
}

// PostAsyncRelativeRetryInvalidHeader - Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// The endpoint indicated in the Azure-AsyncOperation header is
// invalid.
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) postAsyncRelativeRetryInvalidHeader(ctx context.Context, options *LROSADsBeginPostAsyncRelativeRetryInvalidHeaderOptions) (*http.Response, error) {
	req, err := client.postAsyncRelativeRetryInvalidHeaderCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, client.postAsyncRelativeRetryInvalidHeaderHandleError(resp)
	}
	return resp, nil
}

// postAsyncRelativeRetryInvalidHeaderCreateRequest creates the PostAsyncRelativeRetryInvalidHeader request.
func (client *LROSADsClient) postAsyncRelativeRetryInvalidHeaderCreateRequest(ctx context.Context, options *LROSADsBeginPostAsyncRelativeRetryInvalidHeaderOptions) (*policy.Request, error) {
	urlPath := "/lro/error/postasync/retry/invalidheader"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Product != nil {
		return req, runtime.MarshalAsJSON(req, *options.Product)
	}
	return req, nil
}

// postAsyncRelativeRetryInvalidHeaderHandleError handles the PostAsyncRelativeRetryInvalidHeader error response.
func (client *LROSADsClient) postAsyncRelativeRetryInvalidHeaderHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginPostAsyncRelativeRetryInvalidJSONPolling - Long running post request, service returns a 202 to the initial request, with an entity that contains
// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for
// operation status
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) BeginPostAsyncRelativeRetryInvalidJSONPolling(ctx context.Context, options *LROSADsBeginPostAsyncRelativeRetryInvalidJSONPollingOptions) (LROSADsPostAsyncRelativeRetryInvalidJSONPollingPollerResponse, error) {
	resp, err := client.postAsyncRelativeRetryInvalidJSONPolling(ctx, options)
	if err != nil {
		return LROSADsPostAsyncRelativeRetryInvalidJSONPollingPollerResponse{}, err
	}
	result := LROSADsPostAsyncRelativeRetryInvalidJSONPollingPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("LROSADsClient.PostAsyncRelativeRetryInvalidJSONPolling", "", resp, client.con.Pipeline(), client.postAsyncRelativeRetryInvalidJSONPollingHandleError)
	if err != nil {
		return LROSADsPostAsyncRelativeRetryInvalidJSONPollingPollerResponse{}, err
	}
	result.Poller = &LROSADsPostAsyncRelativeRetryInvalidJSONPollingPoller{
		pt: pt,
	}
	return result, nil
}

// PostAsyncRelativeRetryInvalidJSONPolling - Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Poll the endpoint indicated in the Azure-AsyncOperation header for
// operation status
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) postAsyncRelativeRetryInvalidJSONPolling(ctx context.Context, options *LROSADsBeginPostAsyncRelativeRetryInvalidJSONPollingOptions) (*http.Response, error) {
	req, err := client.postAsyncRelativeRetryInvalidJSONPollingCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, client.postAsyncRelativeRetryInvalidJSONPollingHandleError(resp)
	}
	return resp, nil
}

// postAsyncRelativeRetryInvalidJSONPollingCreateRequest creates the PostAsyncRelativeRetryInvalidJSONPolling request.
func (client *LROSADsClient) postAsyncRelativeRetryInvalidJSONPollingCreateRequest(ctx context.Context, options *LROSADsBeginPostAsyncRelativeRetryInvalidJSONPollingOptions) (*policy.Request, error) {
	urlPath := "/lro/error/postasync/retry/invalidjsonpolling"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Product != nil {
		return req, runtime.MarshalAsJSON(req, *options.Product)
	}
	return req, nil
}

// postAsyncRelativeRetryInvalidJSONPollingHandleError handles the PostAsyncRelativeRetryInvalidJSONPolling error response.
func (client *LROSADsClient) postAsyncRelativeRetryInvalidJSONPollingHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginPostAsyncRelativeRetryNoPayload - Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Poll the endpoint indicated in the Azure-AsyncOperation header for
// operation status
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) BeginPostAsyncRelativeRetryNoPayload(ctx context.Context, options *LROSADsBeginPostAsyncRelativeRetryNoPayloadOptions) (LROSADsPostAsyncRelativeRetryNoPayloadPollerResponse, error) {
	resp, err := client.postAsyncRelativeRetryNoPayload(ctx, options)
	if err != nil {
		return LROSADsPostAsyncRelativeRetryNoPayloadPollerResponse{}, err
	}
	result := LROSADsPostAsyncRelativeRetryNoPayloadPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("LROSADsClient.PostAsyncRelativeRetryNoPayload", "", resp, client.con.Pipeline(), client.postAsyncRelativeRetryNoPayloadHandleError)
	if err != nil {
		return LROSADsPostAsyncRelativeRetryNoPayloadPollerResponse{}, err
	}
	result.Poller = &LROSADsPostAsyncRelativeRetryNoPayloadPoller{
		pt: pt,
	}
	return result, nil
}

// PostAsyncRelativeRetryNoPayload - Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Poll the endpoint indicated in the Azure-AsyncOperation header for
// operation status
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) postAsyncRelativeRetryNoPayload(ctx context.Context, options *LROSADsBeginPostAsyncRelativeRetryNoPayloadOptions) (*http.Response, error) {
	req, err := client.postAsyncRelativeRetryNoPayloadCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, client.postAsyncRelativeRetryNoPayloadHandleError(resp)
	}
	return resp, nil
}

// postAsyncRelativeRetryNoPayloadCreateRequest creates the PostAsyncRelativeRetryNoPayload request.
func (client *LROSADsClient) postAsyncRelativeRetryNoPayloadCreateRequest(ctx context.Context, options *LROSADsBeginPostAsyncRelativeRetryNoPayloadOptions) (*policy.Request, error) {
	urlPath := "/lro/error/postasync/retry/nopayload"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Product != nil {
		return req, runtime.MarshalAsJSON(req, *options.Product)
	}
	return req, nil
}

// postAsyncRelativeRetryNoPayloadHandleError handles the PostAsyncRelativeRetryNoPayload error response.
func (client *LROSADsClient) postAsyncRelativeRetryNoPayloadHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginPostNonRetry400 - Long running post request, service returns a 400 with no error body
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) BeginPostNonRetry400(ctx context.Context, options *LROSADsBeginPostNonRetry400Options) (LROSADsPostNonRetry400PollerResponse, error) {
	resp, err := client.postNonRetry400(ctx, options)
	if err != nil {
		return LROSADsPostNonRetry400PollerResponse{}, err
	}
	result := LROSADsPostNonRetry400PollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("LROSADsClient.PostNonRetry400", "", resp, client.con.Pipeline(), client.postNonRetry400HandleError)
	if err != nil {
		return LROSADsPostNonRetry400PollerResponse{}, err
	}
	result.Poller = &LROSADsPostNonRetry400Poller{
		pt: pt,
	}
	return result, nil
}

// PostNonRetry400 - Long running post request, service returns a 400 with no error body
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) postNonRetry400(ctx context.Context, options *LROSADsBeginPostNonRetry400Options) (*http.Response, error) {
	req, err := client.postNonRetry400CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, client.postNonRetry400HandleError(resp)
	}
	return resp, nil
}

// postNonRetry400CreateRequest creates the PostNonRetry400 request.
func (client *LROSADsClient) postNonRetry400CreateRequest(ctx context.Context, options *LROSADsBeginPostNonRetry400Options) (*policy.Request, error) {
	urlPath := "/lro/nonretryerror/post/400"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Product != nil {
		return req, runtime.MarshalAsJSON(req, *options.Product)
	}
	return req, nil
}

// postNonRetry400HandleError handles the PostNonRetry400 error response.
func (client *LROSADsClient) postNonRetry400HandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginPut200InvalidJSON - Long running put request, service returns a 200 to the initial request, with an entity that is not a valid json
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) BeginPut200InvalidJSON(ctx context.Context, options *LROSADsBeginPut200InvalidJSONOptions) (LROSADsPut200InvalidJSONPollerResponse, error) {
	resp, err := client.put200InvalidJSON(ctx, options)
	if err != nil {
		return LROSADsPut200InvalidJSONPollerResponse{}, err
	}
	result := LROSADsPut200InvalidJSONPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("LROSADsClient.Put200InvalidJSON", "", resp, client.con.Pipeline(), client.put200InvalidJSONHandleError)
	if err != nil {
		return LROSADsPut200InvalidJSONPollerResponse{}, err
	}
	result.Poller = &LROSADsPut200InvalidJSONPoller{
		pt: pt,
	}
	return result, nil
}

// Put200InvalidJSON - Long running put request, service returns a 200 to the initial request, with an entity that is not a valid json
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) put200InvalidJSON(ctx context.Context, options *LROSADsBeginPut200InvalidJSONOptions) (*http.Response, error) {
	req, err := client.put200InvalidJSONCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return nil, client.put200InvalidJSONHandleError(resp)
	}
	return resp, nil
}

// put200InvalidJSONCreateRequest creates the Put200InvalidJSON request.
func (client *LROSADsClient) put200InvalidJSONCreateRequest(ctx context.Context, options *LROSADsBeginPut200InvalidJSONOptions) (*policy.Request, error) {
	urlPath := "/lro/error/put/200/invalidjson"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Product != nil {
		return req, runtime.MarshalAsJSON(req, *options.Product)
	}
	return req, nil
}

// put200InvalidJSONHandleError handles the Put200InvalidJSON error response.
func (client *LROSADsClient) put200InvalidJSONHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginPutAsyncRelativeRetry400 - Long running put request, service returns a 200 with ProvisioningState=’Creating’. Poll the endpoint indicated in the
// Azure-AsyncOperation header for operation status
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) BeginPutAsyncRelativeRetry400(ctx context.Context, options *LROSADsBeginPutAsyncRelativeRetry400Options) (LROSADsPutAsyncRelativeRetry400PollerResponse, error) {
	resp, err := client.putAsyncRelativeRetry400(ctx, options)
	if err != nil {
		return LROSADsPutAsyncRelativeRetry400PollerResponse{}, err
	}
	result := LROSADsPutAsyncRelativeRetry400PollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("LROSADsClient.PutAsyncRelativeRetry400", "", resp, client.con.Pipeline(), client.putAsyncRelativeRetry400HandleError)
	if err != nil {
		return LROSADsPutAsyncRelativeRetry400PollerResponse{}, err
	}
	result.Poller = &LROSADsPutAsyncRelativeRetry400Poller{
		pt: pt,
	}
	return result, nil
}

// PutAsyncRelativeRetry400 - Long running put request, service returns a 200 with ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
// header for operation status
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) putAsyncRelativeRetry400(ctx context.Context, options *LROSADsBeginPutAsyncRelativeRetry400Options) (*http.Response, error) {
	req, err := client.putAsyncRelativeRetry400CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return nil, client.putAsyncRelativeRetry400HandleError(resp)
	}
	return resp, nil
}

// putAsyncRelativeRetry400CreateRequest creates the PutAsyncRelativeRetry400 request.
func (client *LROSADsClient) putAsyncRelativeRetry400CreateRequest(ctx context.Context, options *LROSADsBeginPutAsyncRelativeRetry400Options) (*policy.Request, error) {
	urlPath := "/lro/nonretryerror/putasync/retry/400"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Product != nil {
		return req, runtime.MarshalAsJSON(req, *options.Product)
	}
	return req, nil
}

// putAsyncRelativeRetry400HandleError handles the PutAsyncRelativeRetry400 error response.
func (client *LROSADsClient) putAsyncRelativeRetry400HandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginPutAsyncRelativeRetryInvalidHeader - Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// The endpoint indicated in the Azure-AsyncOperation header is invalid.
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) BeginPutAsyncRelativeRetryInvalidHeader(ctx context.Context, options *LROSADsBeginPutAsyncRelativeRetryInvalidHeaderOptions) (LROSADsPutAsyncRelativeRetryInvalidHeaderPollerResponse, error) {
	resp, err := client.putAsyncRelativeRetryInvalidHeader(ctx, options)
	if err != nil {
		return LROSADsPutAsyncRelativeRetryInvalidHeaderPollerResponse{}, err
	}
	result := LROSADsPutAsyncRelativeRetryInvalidHeaderPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("LROSADsClient.PutAsyncRelativeRetryInvalidHeader", "", resp, client.con.Pipeline(), client.putAsyncRelativeRetryInvalidHeaderHandleError)
	if err != nil {
		return LROSADsPutAsyncRelativeRetryInvalidHeaderPollerResponse{}, err
	}
	result.Poller = &LROSADsPutAsyncRelativeRetryInvalidHeaderPoller{
		pt: pt,
	}
	return result, nil
}

// PutAsyncRelativeRetryInvalidHeader - Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// The endpoint indicated in the Azure-AsyncOperation header is invalid.
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) putAsyncRelativeRetryInvalidHeader(ctx context.Context, options *LROSADsBeginPutAsyncRelativeRetryInvalidHeaderOptions) (*http.Response, error) {
	req, err := client.putAsyncRelativeRetryInvalidHeaderCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return nil, client.putAsyncRelativeRetryInvalidHeaderHandleError(resp)
	}
	return resp, nil
}

// putAsyncRelativeRetryInvalidHeaderCreateRequest creates the PutAsyncRelativeRetryInvalidHeader request.
func (client *LROSADsClient) putAsyncRelativeRetryInvalidHeaderCreateRequest(ctx context.Context, options *LROSADsBeginPutAsyncRelativeRetryInvalidHeaderOptions) (*policy.Request, error) {
	urlPath := "/lro/error/putasync/retry/invalidheader"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Product != nil {
		return req, runtime.MarshalAsJSON(req, *options.Product)
	}
	return req, nil
}

// putAsyncRelativeRetryInvalidHeaderHandleError handles the PutAsyncRelativeRetryInvalidHeader error response.
func (client *LROSADsClient) putAsyncRelativeRetryInvalidHeaderHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginPutAsyncRelativeRetryInvalidJSONPolling - Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Poll the endpoint indicated in the Azure-AsyncOperation header for
// operation status
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) BeginPutAsyncRelativeRetryInvalidJSONPolling(ctx context.Context, options *LROSADsBeginPutAsyncRelativeRetryInvalidJSONPollingOptions) (LROSADsPutAsyncRelativeRetryInvalidJSONPollingPollerResponse, error) {
	resp, err := client.putAsyncRelativeRetryInvalidJSONPolling(ctx, options)
	if err != nil {
		return LROSADsPutAsyncRelativeRetryInvalidJSONPollingPollerResponse{}, err
	}
	result := LROSADsPutAsyncRelativeRetryInvalidJSONPollingPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("LROSADsClient.PutAsyncRelativeRetryInvalidJSONPolling", "", resp, client.con.Pipeline(), client.putAsyncRelativeRetryInvalidJSONPollingHandleError)
	if err != nil {
		return LROSADsPutAsyncRelativeRetryInvalidJSONPollingPollerResponse{}, err
	}
	result.Poller = &LROSADsPutAsyncRelativeRetryInvalidJSONPollingPoller{
		pt: pt,
	}
	return result, nil
}

// PutAsyncRelativeRetryInvalidJSONPolling - Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Poll the endpoint indicated in the Azure-AsyncOperation header for
// operation status
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) putAsyncRelativeRetryInvalidJSONPolling(ctx context.Context, options *LROSADsBeginPutAsyncRelativeRetryInvalidJSONPollingOptions) (*http.Response, error) {
	req, err := client.putAsyncRelativeRetryInvalidJSONPollingCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return nil, client.putAsyncRelativeRetryInvalidJSONPollingHandleError(resp)
	}
	return resp, nil
}

// putAsyncRelativeRetryInvalidJSONPollingCreateRequest creates the PutAsyncRelativeRetryInvalidJSONPolling request.
func (client *LROSADsClient) putAsyncRelativeRetryInvalidJSONPollingCreateRequest(ctx context.Context, options *LROSADsBeginPutAsyncRelativeRetryInvalidJSONPollingOptions) (*policy.Request, error) {
	urlPath := "/lro/error/putasync/retry/invalidjsonpolling"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Product != nil {
		return req, runtime.MarshalAsJSON(req, *options.Product)
	}
	return req, nil
}

// putAsyncRelativeRetryInvalidJSONPollingHandleError handles the PutAsyncRelativeRetryInvalidJSONPolling error response.
func (client *LROSADsClient) putAsyncRelativeRetryInvalidJSONPollingHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginPutAsyncRelativeRetryNoStatus - Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Poll the endpoint indicated in the Azure-AsyncOperation header for
// operation status
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) BeginPutAsyncRelativeRetryNoStatus(ctx context.Context, options *LROSADsBeginPutAsyncRelativeRetryNoStatusOptions) (LROSADsPutAsyncRelativeRetryNoStatusPollerResponse, error) {
	resp, err := client.putAsyncRelativeRetryNoStatus(ctx, options)
	if err != nil {
		return LROSADsPutAsyncRelativeRetryNoStatusPollerResponse{}, err
	}
	result := LROSADsPutAsyncRelativeRetryNoStatusPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("LROSADsClient.PutAsyncRelativeRetryNoStatus", "", resp, client.con.Pipeline(), client.putAsyncRelativeRetryNoStatusHandleError)
	if err != nil {
		return LROSADsPutAsyncRelativeRetryNoStatusPollerResponse{}, err
	}
	result.Poller = &LROSADsPutAsyncRelativeRetryNoStatusPoller{
		pt: pt,
	}
	return result, nil
}

// PutAsyncRelativeRetryNoStatus - Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Poll the endpoint indicated in the Azure-AsyncOperation header for
// operation status
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) putAsyncRelativeRetryNoStatus(ctx context.Context, options *LROSADsBeginPutAsyncRelativeRetryNoStatusOptions) (*http.Response, error) {
	req, err := client.putAsyncRelativeRetryNoStatusCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return nil, client.putAsyncRelativeRetryNoStatusHandleError(resp)
	}
	return resp, nil
}

// putAsyncRelativeRetryNoStatusCreateRequest creates the PutAsyncRelativeRetryNoStatus request.
func (client *LROSADsClient) putAsyncRelativeRetryNoStatusCreateRequest(ctx context.Context, options *LROSADsBeginPutAsyncRelativeRetryNoStatusOptions) (*policy.Request, error) {
	urlPath := "/lro/error/putasync/retry/nostatus"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Product != nil {
		return req, runtime.MarshalAsJSON(req, *options.Product)
	}
	return req, nil
}

// putAsyncRelativeRetryNoStatusHandleError handles the PutAsyncRelativeRetryNoStatus error response.
func (client *LROSADsClient) putAsyncRelativeRetryNoStatusHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginPutAsyncRelativeRetryNoStatusPayload - Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Poll the endpoint indicated in the Azure-AsyncOperation header for
// operation status
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) BeginPutAsyncRelativeRetryNoStatusPayload(ctx context.Context, options *LROSADsBeginPutAsyncRelativeRetryNoStatusPayloadOptions) (LROSADsPutAsyncRelativeRetryNoStatusPayloadPollerResponse, error) {
	resp, err := client.putAsyncRelativeRetryNoStatusPayload(ctx, options)
	if err != nil {
		return LROSADsPutAsyncRelativeRetryNoStatusPayloadPollerResponse{}, err
	}
	result := LROSADsPutAsyncRelativeRetryNoStatusPayloadPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("LROSADsClient.PutAsyncRelativeRetryNoStatusPayload", "", resp, client.con.Pipeline(), client.putAsyncRelativeRetryNoStatusPayloadHandleError)
	if err != nil {
		return LROSADsPutAsyncRelativeRetryNoStatusPayloadPollerResponse{}, err
	}
	result.Poller = &LROSADsPutAsyncRelativeRetryNoStatusPayloadPoller{
		pt: pt,
	}
	return result, nil
}

// PutAsyncRelativeRetryNoStatusPayload - Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Poll the endpoint indicated in the Azure-AsyncOperation header for
// operation status
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) putAsyncRelativeRetryNoStatusPayload(ctx context.Context, options *LROSADsBeginPutAsyncRelativeRetryNoStatusPayloadOptions) (*http.Response, error) {
	req, err := client.putAsyncRelativeRetryNoStatusPayloadCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return nil, client.putAsyncRelativeRetryNoStatusPayloadHandleError(resp)
	}
	return resp, nil
}

// putAsyncRelativeRetryNoStatusPayloadCreateRequest creates the PutAsyncRelativeRetryNoStatusPayload request.
func (client *LROSADsClient) putAsyncRelativeRetryNoStatusPayloadCreateRequest(ctx context.Context, options *LROSADsBeginPutAsyncRelativeRetryNoStatusPayloadOptions) (*policy.Request, error) {
	urlPath := "/lro/error/putasync/retry/nostatuspayload"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Product != nil {
		return req, runtime.MarshalAsJSON(req, *options.Product)
	}
	return req, nil
}

// putAsyncRelativeRetryNoStatusPayloadHandleError handles the PutAsyncRelativeRetryNoStatusPayload error response.
func (client *LROSADsClient) putAsyncRelativeRetryNoStatusPayloadHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginPutError201NoProvisioningStatePayload - Long running put request, service returns a 201 to the initial request with no payload
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) BeginPutError201NoProvisioningStatePayload(ctx context.Context, options *LROSADsBeginPutError201NoProvisioningStatePayloadOptions) (LROSADsPutError201NoProvisioningStatePayloadPollerResponse, error) {
	resp, err := client.putError201NoProvisioningStatePayload(ctx, options)
	if err != nil {
		return LROSADsPutError201NoProvisioningStatePayloadPollerResponse{}, err
	}
	result := LROSADsPutError201NoProvisioningStatePayloadPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("LROSADsClient.PutError201NoProvisioningStatePayload", "", resp, client.con.Pipeline(), client.putError201NoProvisioningStatePayloadHandleError)
	if err != nil {
		return LROSADsPutError201NoProvisioningStatePayloadPollerResponse{}, err
	}
	result.Poller = &LROSADsPutError201NoProvisioningStatePayloadPoller{
		pt: pt,
	}
	return result, nil
}

// PutError201NoProvisioningStatePayload - Long running put request, service returns a 201 to the initial request with no payload
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) putError201NoProvisioningStatePayload(ctx context.Context, options *LROSADsBeginPutError201NoProvisioningStatePayloadOptions) (*http.Response, error) {
	req, err := client.putError201NoProvisioningStatePayloadCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return nil, client.putError201NoProvisioningStatePayloadHandleError(resp)
	}
	return resp, nil
}

// putError201NoProvisioningStatePayloadCreateRequest creates the PutError201NoProvisioningStatePayload request.
func (client *LROSADsClient) putError201NoProvisioningStatePayloadCreateRequest(ctx context.Context, options *LROSADsBeginPutError201NoProvisioningStatePayloadOptions) (*policy.Request, error) {
	urlPath := "/lro/error/put/201/noprovisioningstatepayload"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Product != nil {
		return req, runtime.MarshalAsJSON(req, *options.Product)
	}
	return req, nil
}

// putError201NoProvisioningStatePayloadHandleError handles the PutError201NoProvisioningStatePayload error response.
func (client *LROSADsClient) putError201NoProvisioningStatePayloadHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginPutNonRetry201Creating400 - Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) BeginPutNonRetry201Creating400(ctx context.Context, options *LROSADsBeginPutNonRetry201Creating400Options) (LROSADsPutNonRetry201Creating400PollerResponse, error) {
	resp, err := client.putNonRetry201Creating400(ctx, options)
	if err != nil {
		return LROSADsPutNonRetry201Creating400PollerResponse{}, err
	}
	result := LROSADsPutNonRetry201Creating400PollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("LROSADsClient.PutNonRetry201Creating400", "", resp, client.con.Pipeline(), client.putNonRetry201Creating400HandleError)
	if err != nil {
		return LROSADsPutNonRetry201Creating400PollerResponse{}, err
	}
	result.Poller = &LROSADsPutNonRetry201Creating400Poller{
		pt: pt,
	}
	return result, nil
}

// PutNonRetry201Creating400 - Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) putNonRetry201Creating400(ctx context.Context, options *LROSADsBeginPutNonRetry201Creating400Options) (*http.Response, error) {
	req, err := client.putNonRetry201Creating400CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return nil, client.putNonRetry201Creating400HandleError(resp)
	}
	return resp, nil
}

// putNonRetry201Creating400CreateRequest creates the PutNonRetry201Creating400 request.
func (client *LROSADsClient) putNonRetry201Creating400CreateRequest(ctx context.Context, options *LROSADsBeginPutNonRetry201Creating400Options) (*policy.Request, error) {
	urlPath := "/lro/nonretryerror/put/201/creating/400"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Product != nil {
		return req, runtime.MarshalAsJSON(req, *options.Product)
	}
	return req, nil
}

// putNonRetry201Creating400HandleError handles the PutNonRetry201Creating400 error response.
func (client *LROSADsClient) putNonRetry201Creating400HandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginPutNonRetry201Creating400InvalidJSON - Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response
// code
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) BeginPutNonRetry201Creating400InvalidJSON(ctx context.Context, options *LROSADsBeginPutNonRetry201Creating400InvalidJSONOptions) (LROSADsPutNonRetry201Creating400InvalidJSONPollerResponse, error) {
	resp, err := client.putNonRetry201Creating400InvalidJSON(ctx, options)
	if err != nil {
		return LROSADsPutNonRetry201Creating400InvalidJSONPollerResponse{}, err
	}
	result := LROSADsPutNonRetry201Creating400InvalidJSONPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("LROSADsClient.PutNonRetry201Creating400InvalidJSON", "", resp, client.con.Pipeline(), client.putNonRetry201Creating400InvalidJSONHandleError)
	if err != nil {
		return LROSADsPutNonRetry201Creating400InvalidJSONPollerResponse{}, err
	}
	result.Poller = &LROSADsPutNonRetry201Creating400InvalidJSONPoller{
		pt: pt,
	}
	return result, nil
}

// PutNonRetry201Creating400InvalidJSON - Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) putNonRetry201Creating400InvalidJSON(ctx context.Context, options *LROSADsBeginPutNonRetry201Creating400InvalidJSONOptions) (*http.Response, error) {
	req, err := client.putNonRetry201Creating400InvalidJSONCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return nil, client.putNonRetry201Creating400InvalidJSONHandleError(resp)
	}
	return resp, nil
}

// putNonRetry201Creating400InvalidJSONCreateRequest creates the PutNonRetry201Creating400InvalidJSON request.
func (client *LROSADsClient) putNonRetry201Creating400InvalidJSONCreateRequest(ctx context.Context, options *LROSADsBeginPutNonRetry201Creating400InvalidJSONOptions) (*policy.Request, error) {
	urlPath := "/lro/nonretryerror/put/201/creating/400/invalidjson"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Product != nil {
		return req, runtime.MarshalAsJSON(req, *options.Product)
	}
	return req, nil
}

// putNonRetry201Creating400InvalidJSONHandleError handles the PutNonRetry201Creating400InvalidJSON error response.
func (client *LROSADsClient) putNonRetry201Creating400InvalidJSONHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginPutNonRetry400 - Long running put request, service returns a 400 to the initial request
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) BeginPutNonRetry400(ctx context.Context, options *LROSADsBeginPutNonRetry400Options) (LROSADsPutNonRetry400PollerResponse, error) {
	resp, err := client.putNonRetry400(ctx, options)
	if err != nil {
		return LROSADsPutNonRetry400PollerResponse{}, err
	}
	result := LROSADsPutNonRetry400PollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("LROSADsClient.PutNonRetry400", "", resp, client.con.Pipeline(), client.putNonRetry400HandleError)
	if err != nil {
		return LROSADsPutNonRetry400PollerResponse{}, err
	}
	result.Poller = &LROSADsPutNonRetry400Poller{
		pt: pt,
	}
	return result, nil
}

// PutNonRetry400 - Long running put request, service returns a 400 to the initial request
// If the operation fails it returns the *CloudError error type.
func (client *LROSADsClient) putNonRetry400(ctx context.Context, options *LROSADsBeginPutNonRetry400Options) (*http.Response, error) {
	req, err := client.putNonRetry400CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return nil, client.putNonRetry400HandleError(resp)
	}
	return resp, nil
}

// putNonRetry400CreateRequest creates the PutNonRetry400 request.
func (client *LROSADsClient) putNonRetry400CreateRequest(ctx context.Context, options *LROSADsBeginPutNonRetry400Options) (*policy.Request, error) {
	urlPath := "/lro/nonretryerror/put/400"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Product != nil {
		return req, runtime.MarshalAsJSON(req, *options.Product)
	}
	return req, nil
}

// putNonRetry400HandleError handles the PutNonRetry400 error response.
func (client *LROSADsClient) putNonRetry400HandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
