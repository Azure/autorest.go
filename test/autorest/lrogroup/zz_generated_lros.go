// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package lrogroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"time"
)

// LrOSClient contains the methods for the LrOS group.
// Don't use this type directly, use NewLrOSClient() instead.
type LrOSClient struct {
	con *Connection
}

// NewLrOSClient creates a new instance of LrOSClient with the specified values.
func NewLrOSClient(con *Connection) *LrOSClient {
	return &LrOSClient{con: con}
}

// BeginDelete202NoRetry204 - Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns
// a ‘200’ with ProvisioningState=’Succeeded’
func (client *LrOSClient) BeginDelete202NoRetry204(ctx context.Context, options *LrOSBeginDelete202NoRetry204Options) (ProductPollerResponse, error) {
	resp, err := client.delete202NoRetry204(ctx, options)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	result := ProductPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.Delete202NoRetry204", "", resp, client.delete202NoRetry204HandleError)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	poller := &productPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (ProductResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeDelete202NoRetry204 creates a new ProductPoller from the specified resume token.
// token - The value must come from a previous call to ProductPoller.ResumeToken().
func (client *LrOSClient) ResumeDelete202NoRetry204(token string) (ProductPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.Delete202NoRetry204", token, client.delete202NoRetry204HandleError)
	if err != nil {
		return nil, err
	}
	return &productPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// Delete202NoRetry204 - Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns
// a ‘200’ with ProvisioningState=’Succeeded’
func (client *LrOSClient) delete202NoRetry204(ctx context.Context, options *LrOSBeginDelete202NoRetry204Options) (*azcore.Response, error) {
	req, err := client.delete202NoRetry204CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted) {
		return nil, client.delete202NoRetry204HandleError(resp)
	}
	return resp, nil
}

// delete202NoRetry204CreateRequest creates the Delete202NoRetry204 request.
func (client *LrOSClient) delete202NoRetry204CreateRequest(ctx context.Context, options *LrOSBeginDelete202NoRetry204Options) (*azcore.Request, error) {
	urlPath := "/lro/delete/202/noretry/204"
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// delete202NoRetry204HandleResponse handles the Delete202NoRetry204 response.
func (client *LrOSClient) delete202NoRetry204HandleResponse(resp *azcore.Response) (ProductResponse, error) {
	var val *Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductResponse{}, err
	}
	return ProductResponse{RawResponse: resp.Response, Product: val}, nil
}

// delete202NoRetry204HandleError handles the Delete202NoRetry204 error response.
func (client *LrOSClient) delete202NoRetry204HandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginDelete202Retry200 - Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns
// a ‘200’ with ProvisioningState=’Succeeded’
func (client *LrOSClient) BeginDelete202Retry200(ctx context.Context, options *LrOSBeginDelete202Retry200Options) (ProductPollerResponse, error) {
	resp, err := client.delete202Retry200(ctx, options)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	result := ProductPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.Delete202Retry200", "", resp, client.delete202Retry200HandleError)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	poller := &productPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (ProductResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeDelete202Retry200 creates a new ProductPoller from the specified resume token.
// token - The value must come from a previous call to ProductPoller.ResumeToken().
func (client *LrOSClient) ResumeDelete202Retry200(token string) (ProductPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.Delete202Retry200", token, client.delete202Retry200HandleError)
	if err != nil {
		return nil, err
	}
	return &productPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// Delete202Retry200 - Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a
// ‘200’ with ProvisioningState=’Succeeded’
func (client *LrOSClient) delete202Retry200(ctx context.Context, options *LrOSBeginDelete202Retry200Options) (*azcore.Response, error) {
	req, err := client.delete202Retry200CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted) {
		return nil, client.delete202Retry200HandleError(resp)
	}
	return resp, nil
}

// delete202Retry200CreateRequest creates the Delete202Retry200 request.
func (client *LrOSClient) delete202Retry200CreateRequest(ctx context.Context, options *LrOSBeginDelete202Retry200Options) (*azcore.Request, error) {
	urlPath := "/lro/delete/202/retry/200"
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// delete202Retry200HandleResponse handles the Delete202Retry200 response.
func (client *LrOSClient) delete202Retry200HandleResponse(resp *azcore.Response) (ProductResponse, error) {
	var val *Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductResponse{}, err
	}
	return ProductResponse{RawResponse: resp.Response, Product: val}, nil
}

// delete202Retry200HandleError handles the Delete202Retry200 error response.
func (client *LrOSClient) delete202Retry200HandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginDelete204Succeeded - Long running delete succeeds and returns right away
func (client *LrOSClient) BeginDelete204Succeeded(ctx context.Context, options *LrOSBeginDelete204SucceededOptions) (HTTPPollerResponse, error) {
	resp, err := client.delete204Succeeded(ctx, options)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	result := HTTPPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.Delete204Succeeded", "", resp, client.delete204SucceededHandleError)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeDelete204Succeeded creates a new HTTPPoller from the specified resume token.
// token - The value must come from a previous call to HTTPPoller.ResumeToken().
func (client *LrOSClient) ResumeDelete204Succeeded(token string) (HTTPPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.Delete204Succeeded", token, client.delete204SucceededHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// Delete204Succeeded - Long running delete succeeds and returns right away
func (client *LrOSClient) delete204Succeeded(ctx context.Context, options *LrOSBeginDelete204SucceededOptions) (*azcore.Response, error) {
	req, err := client.delete204SucceededCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusNoContent) {
		return nil, client.delete204SucceededHandleError(resp)
	}
	return resp, nil
}

// delete204SucceededCreateRequest creates the Delete204Succeeded request.
func (client *LrOSClient) delete204SucceededCreateRequest(ctx context.Context, options *LrOSBeginDelete204SucceededOptions) (*azcore.Request, error) {
	urlPath := "/lro/delete/204/succeeded"
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// delete204SucceededHandleError handles the Delete204Succeeded error response.
func (client *LrOSClient) delete204SucceededHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginDeleteAsyncNoHeaderInRetry - Long running delete request, service returns an Azure-AsyncOperation header in the initial request. Subsequent calls
// to operation status do not contain Azure-AsyncOperation header.
func (client *LrOSClient) BeginDeleteAsyncNoHeaderInRetry(ctx context.Context, options *LrOSBeginDeleteAsyncNoHeaderInRetryOptions) (HTTPPollerResponse, error) {
	resp, err := client.deleteAsyncNoHeaderInRetry(ctx, options)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	result := HTTPPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.DeleteAsyncNoHeaderInRetry", "", resp, client.deleteAsyncNoHeaderInRetryHandleError)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeDeleteAsyncNoHeaderInRetry creates a new HTTPPoller from the specified resume token.
// token - The value must come from a previous call to HTTPPoller.ResumeToken().
func (client *LrOSClient) ResumeDeleteAsyncNoHeaderInRetry(token string) (HTTPPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.DeleteAsyncNoHeaderInRetry", token, client.deleteAsyncNoHeaderInRetryHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// DeleteAsyncNoHeaderInRetry - Long running delete request, service returns an Azure-AsyncOperation header in the initial request. Subsequent calls to
// operation status do not contain Azure-AsyncOperation header.
func (client *LrOSClient) deleteAsyncNoHeaderInRetry(ctx context.Context, options *LrOSBeginDeleteAsyncNoHeaderInRetryOptions) (*azcore.Response, error) {
	req, err := client.deleteAsyncNoHeaderInRetryCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteAsyncNoHeaderInRetryHandleError(resp)
	}
	return resp, nil
}

// deleteAsyncNoHeaderInRetryCreateRequest creates the DeleteAsyncNoHeaderInRetry request.
func (client *LrOSClient) deleteAsyncNoHeaderInRetryCreateRequest(ctx context.Context, options *LrOSBeginDeleteAsyncNoHeaderInRetryOptions) (*azcore.Request, error) {
	urlPath := "/lro/deleteasync/noheader/202/204"
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// deleteAsyncNoHeaderInRetryHandleError handles the DeleteAsyncNoHeaderInRetry error response.
func (client *LrOSClient) deleteAsyncNoHeaderInRetryHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginDeleteAsyncNoRetrySucceeded - Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation
// header for operation status
func (client *LrOSClient) BeginDeleteAsyncNoRetrySucceeded(ctx context.Context, options *LrOSBeginDeleteAsyncNoRetrySucceededOptions) (HTTPPollerResponse, error) {
	resp, err := client.deleteAsyncNoRetrySucceeded(ctx, options)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	result := HTTPPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.DeleteAsyncNoRetrySucceeded", "", resp, client.deleteAsyncNoRetrySucceededHandleError)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeDeleteAsyncNoRetrySucceeded creates a new HTTPPoller from the specified resume token.
// token - The value must come from a previous call to HTTPPoller.ResumeToken().
func (client *LrOSClient) ResumeDeleteAsyncNoRetrySucceeded(token string) (HTTPPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.DeleteAsyncNoRetrySucceeded", token, client.deleteAsyncNoRetrySucceededHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// DeleteAsyncNoRetrySucceeded - Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation
// header for operation status
func (client *LrOSClient) deleteAsyncNoRetrySucceeded(ctx context.Context, options *LrOSBeginDeleteAsyncNoRetrySucceededOptions) (*azcore.Response, error) {
	req, err := client.deleteAsyncNoRetrySucceededCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted) {
		return nil, client.deleteAsyncNoRetrySucceededHandleError(resp)
	}
	return resp, nil
}

// deleteAsyncNoRetrySucceededCreateRequest creates the DeleteAsyncNoRetrySucceeded request.
func (client *LrOSClient) deleteAsyncNoRetrySucceededCreateRequest(ctx context.Context, options *LrOSBeginDeleteAsyncNoRetrySucceededOptions) (*azcore.Request, error) {
	urlPath := "/lro/deleteasync/noretry/succeeded"
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// deleteAsyncNoRetrySucceededHandleError handles the DeleteAsyncNoRetrySucceeded error response.
func (client *LrOSClient) deleteAsyncNoRetrySucceededHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginDeleteAsyncRetryFailed - Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation
// header for operation status
func (client *LrOSClient) BeginDeleteAsyncRetryFailed(ctx context.Context, options *LrOSBeginDeleteAsyncRetryFailedOptions) (HTTPPollerResponse, error) {
	resp, err := client.deleteAsyncRetryFailed(ctx, options)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	result := HTTPPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.DeleteAsyncRetryFailed", "", resp, client.deleteAsyncRetryFailedHandleError)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeDeleteAsyncRetryFailed creates a new HTTPPoller from the specified resume token.
// token - The value must come from a previous call to HTTPPoller.ResumeToken().
func (client *LrOSClient) ResumeDeleteAsyncRetryFailed(token string) (HTTPPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.DeleteAsyncRetryFailed", token, client.deleteAsyncRetryFailedHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// DeleteAsyncRetryFailed - Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation
// header for operation status
func (client *LrOSClient) deleteAsyncRetryFailed(ctx context.Context, options *LrOSBeginDeleteAsyncRetryFailedOptions) (*azcore.Response, error) {
	req, err := client.deleteAsyncRetryFailedCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted) {
		return nil, client.deleteAsyncRetryFailedHandleError(resp)
	}
	return resp, nil
}

// deleteAsyncRetryFailedCreateRequest creates the DeleteAsyncRetryFailed request.
func (client *LrOSClient) deleteAsyncRetryFailedCreateRequest(ctx context.Context, options *LrOSBeginDeleteAsyncRetryFailedOptions) (*azcore.Request, error) {
	urlPath := "/lro/deleteasync/retry/failed"
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// deleteAsyncRetryFailedHandleError handles the DeleteAsyncRetryFailed error response.
func (client *LrOSClient) deleteAsyncRetryFailedHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginDeleteAsyncRetrySucceeded - Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation
// header for operation status
func (client *LrOSClient) BeginDeleteAsyncRetrySucceeded(ctx context.Context, options *LrOSBeginDeleteAsyncRetrySucceededOptions) (HTTPPollerResponse, error) {
	resp, err := client.deleteAsyncRetrySucceeded(ctx, options)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	result := HTTPPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.DeleteAsyncRetrySucceeded", "", resp, client.deleteAsyncRetrySucceededHandleError)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeDeleteAsyncRetrySucceeded creates a new HTTPPoller from the specified resume token.
// token - The value must come from a previous call to HTTPPoller.ResumeToken().
func (client *LrOSClient) ResumeDeleteAsyncRetrySucceeded(token string) (HTTPPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.DeleteAsyncRetrySucceeded", token, client.deleteAsyncRetrySucceededHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// DeleteAsyncRetrySucceeded - Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation
// header for operation status
func (client *LrOSClient) deleteAsyncRetrySucceeded(ctx context.Context, options *LrOSBeginDeleteAsyncRetrySucceededOptions) (*azcore.Response, error) {
	req, err := client.deleteAsyncRetrySucceededCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted) {
		return nil, client.deleteAsyncRetrySucceededHandleError(resp)
	}
	return resp, nil
}

// deleteAsyncRetrySucceededCreateRequest creates the DeleteAsyncRetrySucceeded request.
func (client *LrOSClient) deleteAsyncRetrySucceededCreateRequest(ctx context.Context, options *LrOSBeginDeleteAsyncRetrySucceededOptions) (*azcore.Request, error) {
	urlPath := "/lro/deleteasync/retry/succeeded"
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// deleteAsyncRetrySucceededHandleError handles the DeleteAsyncRetrySucceeded error response.
func (client *LrOSClient) deleteAsyncRetrySucceededHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginDeleteAsyncRetrycanceled - Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation
// header for operation status
func (client *LrOSClient) BeginDeleteAsyncRetrycanceled(ctx context.Context, options *LrOSBeginDeleteAsyncRetrycanceledOptions) (HTTPPollerResponse, error) {
	resp, err := client.deleteAsyncRetrycanceled(ctx, options)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	result := HTTPPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.DeleteAsyncRetrycanceled", "", resp, client.deleteAsyncRetrycanceledHandleError)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeDeleteAsyncRetrycanceled creates a new HTTPPoller from the specified resume token.
// token - The value must come from a previous call to HTTPPoller.ResumeToken().
func (client *LrOSClient) ResumeDeleteAsyncRetrycanceled(token string) (HTTPPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.DeleteAsyncRetrycanceled", token, client.deleteAsyncRetrycanceledHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// DeleteAsyncRetrycanceled - Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation
// header for operation status
func (client *LrOSClient) deleteAsyncRetrycanceled(ctx context.Context, options *LrOSBeginDeleteAsyncRetrycanceledOptions) (*azcore.Response, error) {
	req, err := client.deleteAsyncRetrycanceledCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted) {
		return nil, client.deleteAsyncRetrycanceledHandleError(resp)
	}
	return resp, nil
}

// deleteAsyncRetrycanceledCreateRequest creates the DeleteAsyncRetrycanceled request.
func (client *LrOSClient) deleteAsyncRetrycanceledCreateRequest(ctx context.Context, options *LrOSBeginDeleteAsyncRetrycanceledOptions) (*azcore.Request, error) {
	urlPath := "/lro/deleteasync/retry/canceled"
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// deleteAsyncRetrycanceledHandleError handles the DeleteAsyncRetrycanceled error response.
func (client *LrOSClient) deleteAsyncRetrycanceledHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginDeleteNoHeaderInRetry - Long running delete request, service returns a location header in the initial request. Subsequent calls to operation status
// do not contain location header.
func (client *LrOSClient) BeginDeleteNoHeaderInRetry(ctx context.Context, options *LrOSBeginDeleteNoHeaderInRetryOptions) (HTTPPollerResponse, error) {
	resp, err := client.deleteNoHeaderInRetry(ctx, options)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	result := HTTPPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.DeleteNoHeaderInRetry", "", resp, client.deleteNoHeaderInRetryHandleError)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeDeleteNoHeaderInRetry creates a new HTTPPoller from the specified resume token.
// token - The value must come from a previous call to HTTPPoller.ResumeToken().
func (client *LrOSClient) ResumeDeleteNoHeaderInRetry(token string) (HTTPPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.DeleteNoHeaderInRetry", token, client.deleteNoHeaderInRetryHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// DeleteNoHeaderInRetry - Long running delete request, service returns a location header in the initial request. Subsequent calls to operation status do
// not contain location header.
func (client *LrOSClient) deleteNoHeaderInRetry(ctx context.Context, options *LrOSBeginDeleteNoHeaderInRetryOptions) (*azcore.Response, error) {
	req, err := client.deleteNoHeaderInRetryCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteNoHeaderInRetryHandleError(resp)
	}
	return resp, nil
}

// deleteNoHeaderInRetryCreateRequest creates the DeleteNoHeaderInRetry request.
func (client *LrOSClient) deleteNoHeaderInRetryCreateRequest(ctx context.Context, options *LrOSBeginDeleteNoHeaderInRetryOptions) (*azcore.Request, error) {
	urlPath := "/lro/delete/noheader"
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// deleteNoHeaderInRetryHandleError handles the DeleteNoHeaderInRetry error response.
func (client *LrOSClient) deleteNoHeaderInRetryHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginDeleteProvisioning202Accepted200Succeeded - Long running delete request, service returns a 202 to the initial request, with an entity that contains
// ProvisioningState=’Accepted’. Polls return this value until the last poll returns a ‘200’ with
// ProvisioningState=’Succeeded’
func (client *LrOSClient) BeginDeleteProvisioning202Accepted200Succeeded(ctx context.Context, options *LrOSBeginDeleteProvisioning202Accepted200SucceededOptions) (ProductPollerResponse, error) {
	resp, err := client.deleteProvisioning202Accepted200Succeeded(ctx, options)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	result := ProductPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.DeleteProvisioning202Accepted200Succeeded", "", resp, client.deleteProvisioning202Accepted200SucceededHandleError)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	poller := &productPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (ProductResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeDeleteProvisioning202Accepted200Succeeded creates a new ProductPoller from the specified resume token.
// token - The value must come from a previous call to ProductPoller.ResumeToken().
func (client *LrOSClient) ResumeDeleteProvisioning202Accepted200Succeeded(token string) (ProductPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.DeleteProvisioning202Accepted200Succeeded", token, client.deleteProvisioning202Accepted200SucceededHandleError)
	if err != nil {
		return nil, err
	}
	return &productPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// DeleteProvisioning202Accepted200Succeeded - Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.
// Polls return this value until the last poll returns a ‘200’ with
// ProvisioningState=’Succeeded’
func (client *LrOSClient) deleteProvisioning202Accepted200Succeeded(ctx context.Context, options *LrOSBeginDeleteProvisioning202Accepted200SucceededOptions) (*azcore.Response, error) {
	req, err := client.deleteProvisioning202Accepted200SucceededCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted) {
		return nil, client.deleteProvisioning202Accepted200SucceededHandleError(resp)
	}
	return resp, nil
}

// deleteProvisioning202Accepted200SucceededCreateRequest creates the DeleteProvisioning202Accepted200Succeeded request.
func (client *LrOSClient) deleteProvisioning202Accepted200SucceededCreateRequest(ctx context.Context, options *LrOSBeginDeleteProvisioning202Accepted200SucceededOptions) (*azcore.Request, error) {
	urlPath := "/lro/delete/provisioning/202/accepted/200/succeeded"
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// deleteProvisioning202Accepted200SucceededHandleResponse handles the DeleteProvisioning202Accepted200Succeeded response.
func (client *LrOSClient) deleteProvisioning202Accepted200SucceededHandleResponse(resp *azcore.Response) (ProductResponse, error) {
	var val *Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductResponse{}, err
	}
	return ProductResponse{RawResponse: resp.Response, Product: val}, nil
}

// deleteProvisioning202Accepted200SucceededHandleError handles the DeleteProvisioning202Accepted200Succeeded error response.
func (client *LrOSClient) deleteProvisioning202Accepted200SucceededHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginDeleteProvisioning202DeletingFailed200 - Long running delete request, service returns a 202 to the initial request, with an entity that contains
// ProvisioningState=’Creating’. Polls return this value until the last poll returns a ‘200’ with
// ProvisioningState=’Failed’
func (client *LrOSClient) BeginDeleteProvisioning202DeletingFailed200(ctx context.Context, options *LrOSBeginDeleteProvisioning202DeletingFailed200Options) (ProductPollerResponse, error) {
	resp, err := client.deleteProvisioning202DeletingFailed200(ctx, options)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	result := ProductPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.DeleteProvisioning202DeletingFailed200", "", resp, client.deleteProvisioning202DeletingFailed200HandleError)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	poller := &productPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (ProductResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeDeleteProvisioning202DeletingFailed200 creates a new ProductPoller from the specified resume token.
// token - The value must come from a previous call to ProductPoller.ResumeToken().
func (client *LrOSClient) ResumeDeleteProvisioning202DeletingFailed200(token string) (ProductPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.DeleteProvisioning202DeletingFailed200", token, client.deleteProvisioning202DeletingFailed200HandleError)
	if err != nil {
		return nil, err
	}
	return &productPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// DeleteProvisioning202DeletingFailed200 - Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Polls return this value until the last poll returns a ‘200’ with
// ProvisioningState=’Failed’
func (client *LrOSClient) deleteProvisioning202DeletingFailed200(ctx context.Context, options *LrOSBeginDeleteProvisioning202DeletingFailed200Options) (*azcore.Response, error) {
	req, err := client.deleteProvisioning202DeletingFailed200CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted) {
		return nil, client.deleteProvisioning202DeletingFailed200HandleError(resp)
	}
	return resp, nil
}

// deleteProvisioning202DeletingFailed200CreateRequest creates the DeleteProvisioning202DeletingFailed200 request.
func (client *LrOSClient) deleteProvisioning202DeletingFailed200CreateRequest(ctx context.Context, options *LrOSBeginDeleteProvisioning202DeletingFailed200Options) (*azcore.Request, error) {
	urlPath := "/lro/delete/provisioning/202/deleting/200/failed"
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// deleteProvisioning202DeletingFailed200HandleResponse handles the DeleteProvisioning202DeletingFailed200 response.
func (client *LrOSClient) deleteProvisioning202DeletingFailed200HandleResponse(resp *azcore.Response) (ProductResponse, error) {
	var val *Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductResponse{}, err
	}
	return ProductResponse{RawResponse: resp.Response, Product: val}, nil
}

// deleteProvisioning202DeletingFailed200HandleError handles the DeleteProvisioning202DeletingFailed200 error response.
func (client *LrOSClient) deleteProvisioning202DeletingFailed200HandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginDeleteProvisioning202Deletingcanceled200 - Long running delete request, service returns a 202 to the initial request, with an entity that contains
// ProvisioningState=’Creating’. Polls return this value until the last poll returns a ‘200’ with
// ProvisioningState=’Canceled’
func (client *LrOSClient) BeginDeleteProvisioning202Deletingcanceled200(ctx context.Context, options *LrOSBeginDeleteProvisioning202Deletingcanceled200Options) (ProductPollerResponse, error) {
	resp, err := client.deleteProvisioning202Deletingcanceled200(ctx, options)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	result := ProductPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.DeleteProvisioning202Deletingcanceled200", "", resp, client.deleteProvisioning202Deletingcanceled200HandleError)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	poller := &productPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (ProductResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeDeleteProvisioning202Deletingcanceled200 creates a new ProductPoller from the specified resume token.
// token - The value must come from a previous call to ProductPoller.ResumeToken().
func (client *LrOSClient) ResumeDeleteProvisioning202Deletingcanceled200(token string) (ProductPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.DeleteProvisioning202Deletingcanceled200", token, client.deleteProvisioning202Deletingcanceled200HandleError)
	if err != nil {
		return nil, err
	}
	return &productPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// DeleteProvisioning202Deletingcanceled200 - Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Polls return this value until the last poll returns a ‘200’ with
// ProvisioningState=’Canceled’
func (client *LrOSClient) deleteProvisioning202Deletingcanceled200(ctx context.Context, options *LrOSBeginDeleteProvisioning202Deletingcanceled200Options) (*azcore.Response, error) {
	req, err := client.deleteProvisioning202Deletingcanceled200CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted) {
		return nil, client.deleteProvisioning202Deletingcanceled200HandleError(resp)
	}
	return resp, nil
}

// deleteProvisioning202Deletingcanceled200CreateRequest creates the DeleteProvisioning202Deletingcanceled200 request.
func (client *LrOSClient) deleteProvisioning202Deletingcanceled200CreateRequest(ctx context.Context, options *LrOSBeginDeleteProvisioning202Deletingcanceled200Options) (*azcore.Request, error) {
	urlPath := "/lro/delete/provisioning/202/deleting/200/canceled"
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// deleteProvisioning202Deletingcanceled200HandleResponse handles the DeleteProvisioning202Deletingcanceled200 response.
func (client *LrOSClient) deleteProvisioning202Deletingcanceled200HandleResponse(resp *azcore.Response) (ProductResponse, error) {
	var val *Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductResponse{}, err
	}
	return ProductResponse{RawResponse: resp.Response, Product: val}, nil
}

// deleteProvisioning202Deletingcanceled200HandleError handles the DeleteProvisioning202Deletingcanceled200 error response.
func (client *LrOSClient) deleteProvisioning202Deletingcanceled200HandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPost200WithPayload - Long running post request, service returns a 202 to the initial request, with 'Location' header. Poll returns a 200 with a
// response body after success.
func (client *LrOSClient) BeginPost200WithPayload(ctx context.Context, options *LrOSBeginPost200WithPayloadOptions) (SKUPollerResponse, error) {
	resp, err := client.post200WithPayload(ctx, options)
	if err != nil {
		return SKUPollerResponse{}, err
	}
	result := SKUPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.Post200WithPayload", "", resp, client.post200WithPayloadHandleError)
	if err != nil {
		return SKUPollerResponse{}, err
	}
	poller := &skuPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (SKUResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePost200WithPayload creates a new SKUPoller from the specified resume token.
// token - The value must come from a previous call to SKUPoller.ResumeToken().
func (client *LrOSClient) ResumePost200WithPayload(token string) (SKUPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.Post200WithPayload", token, client.post200WithPayloadHandleError)
	if err != nil {
		return nil, err
	}
	return &skuPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// Post200WithPayload - Long running post request, service returns a 202 to the initial request, with 'Location' header. Poll returns a 200 with a response
// body after success.
func (client *LrOSClient) post200WithPayload(ctx context.Context, options *LrOSBeginPost200WithPayloadOptions) (*azcore.Response, error) {
	req, err := client.post200WithPayloadCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted) {
		return nil, client.post200WithPayloadHandleError(resp)
	}
	return resp, nil
}

// post200WithPayloadCreateRequest creates the Post200WithPayload request.
func (client *LrOSClient) post200WithPayloadCreateRequest(ctx context.Context, options *LrOSBeginPost200WithPayloadOptions) (*azcore.Request, error) {
	urlPath := "/lro/post/payload/200"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// post200WithPayloadHandleResponse handles the Post200WithPayload response.
func (client *LrOSClient) post200WithPayloadHandleResponse(resp *azcore.Response) (SKUResponse, error) {
	var val *SKU
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return SKUResponse{}, err
	}
	return SKUResponse{RawResponse: resp.Response, SKU: val}, nil
}

// post200WithPayloadHandleError handles the Post200WithPayload error response.
func (client *LrOSClient) post200WithPayloadHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPost202List - Long running put request, service returns a 202 with empty body to first request, returns a 200 with body [{ 'id': '100', 'name':
// 'foo' }].
func (client *LrOSClient) BeginPost202List(ctx context.Context, options *LrOSBeginPost202ListOptions) (ProductArrayPollerResponse, error) {
	resp, err := client.post202List(ctx, options)
	if err != nil {
		return ProductArrayPollerResponse{}, err
	}
	result := ProductArrayPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.Post202List", "", resp, client.post202ListHandleError)
	if err != nil {
		return ProductArrayPollerResponse{}, err
	}
	poller := &productArrayPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (ProductArrayResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePost202List creates a new ProductArrayPoller from the specified resume token.
// token - The value must come from a previous call to ProductArrayPoller.ResumeToken().
func (client *LrOSClient) ResumePost202List(token string) (ProductArrayPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.Post202List", token, client.post202ListHandleError)
	if err != nil {
		return nil, err
	}
	return &productArrayPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// Post202List - Long running put request, service returns a 202 with empty body to first request, returns a 200 with body [{ 'id': '100', 'name': 'foo'
// }].
func (client *LrOSClient) post202List(ctx context.Context, options *LrOSBeginPost202ListOptions) (*azcore.Response, error) {
	req, err := client.post202ListCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted) {
		return nil, client.post202ListHandleError(resp)
	}
	return resp, nil
}

// post202ListCreateRequest creates the Post202List request.
func (client *LrOSClient) post202ListCreateRequest(ctx context.Context, options *LrOSBeginPost202ListOptions) (*azcore.Request, error) {
	urlPath := "/lro/list"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// post202ListHandleResponse handles the Post202List response.
func (client *LrOSClient) post202ListHandleResponse(resp *azcore.Response) (ProductArrayResponse, error) {
	var val *[]Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductArrayResponse{}, err
	}
	return ProductArrayResponse{RawResponse: resp.Response, ProductArray: val}, nil
}

// post202ListHandleError handles the Post202List error response.
func (client *LrOSClient) post202ListHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPost202NoRetry204 - Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after
// success
func (client *LrOSClient) BeginPost202NoRetry204(ctx context.Context, options *LrOSBeginPost202NoRetry204Options) (ProductPollerResponse, error) {
	resp, err := client.post202NoRetry204(ctx, options)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	result := ProductPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.Post202NoRetry204", "", resp, client.post202NoRetry204HandleError)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	poller := &productPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (ProductResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePost202NoRetry204 creates a new ProductPoller from the specified resume token.
// token - The value must come from a previous call to ProductPoller.ResumeToken().
func (client *LrOSClient) ResumePost202NoRetry204(token string) (ProductPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.Post202NoRetry204", token, client.post202NoRetry204HandleError)
	if err != nil {
		return nil, err
	}
	return &productPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// Post202NoRetry204 - Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success
func (client *LrOSClient) post202NoRetry204(ctx context.Context, options *LrOSBeginPost202NoRetry204Options) (*azcore.Response, error) {
	req, err := client.post202NoRetry204CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted) {
		return nil, client.post202NoRetry204HandleError(resp)
	}
	return resp, nil
}

// post202NoRetry204CreateRequest creates the Post202NoRetry204 request.
func (client *LrOSClient) post202NoRetry204CreateRequest(ctx context.Context, options *LrOSBeginPost202NoRetry204Options) (*azcore.Request, error) {
	urlPath := "/lro/post/202/noretry/204"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.Product)
	}
	return req, nil
}

// post202NoRetry204HandleResponse handles the Post202NoRetry204 response.
func (client *LrOSClient) post202NoRetry204HandleResponse(resp *azcore.Response) (ProductResponse, error) {
	var val *Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductResponse{}, err
	}
	return ProductResponse{RawResponse: resp.Response, Product: val}, nil
}

// post202NoRetry204HandleError handles the Post202NoRetry204 error response.
func (client *LrOSClient) post202NoRetry204HandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPost202Retry200 - Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return
// a 200 with a response body after success
func (client *LrOSClient) BeginPost202Retry200(ctx context.Context, options *LrOSBeginPost202Retry200Options) (HTTPPollerResponse, error) {
	resp, err := client.post202Retry200(ctx, options)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	result := HTTPPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.Post202Retry200", "", resp, client.post202Retry200HandleError)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePost202Retry200 creates a new HTTPPoller from the specified resume token.
// token - The value must come from a previous call to HTTPPoller.ResumeToken().
func (client *LrOSClient) ResumePost202Retry200(token string) (HTTPPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.Post202Retry200", token, client.post202Retry200HandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// Post202Retry200 - Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a
// 200 with a response body after success
func (client *LrOSClient) post202Retry200(ctx context.Context, options *LrOSBeginPost202Retry200Options) (*azcore.Response, error) {
	req, err := client.post202Retry200CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted) {
		return nil, client.post202Retry200HandleError(resp)
	}
	return resp, nil
}

// post202Retry200CreateRequest creates the Post202Retry200 request.
func (client *LrOSClient) post202Retry200CreateRequest(ctx context.Context, options *LrOSBeginPost202Retry200Options) (*azcore.Request, error) {
	urlPath := "/lro/post/202/retry/200"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.Product)
	}
	return req, nil
}

// post202Retry200HandleError handles the Post202Retry200 error response.
func (client *LrOSClient) post202Retry200HandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPostAsyncNoRetrySucceeded - Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Poll the endpoint indicated in the Azure-AsyncOperation header for
// operation status
func (client *LrOSClient) BeginPostAsyncNoRetrySucceeded(ctx context.Context, options *LrOSBeginPostAsyncNoRetrySucceededOptions) (ProductPollerResponse, error) {
	resp, err := client.postAsyncNoRetrySucceeded(ctx, options)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	result := ProductPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.PostAsyncNoRetrySucceeded", "", resp, client.postAsyncNoRetrySucceededHandleError)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	poller := &productPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (ProductResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePostAsyncNoRetrySucceeded creates a new ProductPoller from the specified resume token.
// token - The value must come from a previous call to ProductPoller.ResumeToken().
func (client *LrOSClient) ResumePostAsyncNoRetrySucceeded(token string) (ProductPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.PostAsyncNoRetrySucceeded", token, client.postAsyncNoRetrySucceededHandleError)
	if err != nil {
		return nil, err
	}
	return &productPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// PostAsyncNoRetrySucceeded - Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Poll the endpoint indicated in the Azure-AsyncOperation header for
// operation status
func (client *LrOSClient) postAsyncNoRetrySucceeded(ctx context.Context, options *LrOSBeginPostAsyncNoRetrySucceededOptions) (*azcore.Response, error) {
	req, err := client.postAsyncNoRetrySucceededCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted) {
		return nil, client.postAsyncNoRetrySucceededHandleError(resp)
	}
	return resp, nil
}

// postAsyncNoRetrySucceededCreateRequest creates the PostAsyncNoRetrySucceeded request.
func (client *LrOSClient) postAsyncNoRetrySucceededCreateRequest(ctx context.Context, options *LrOSBeginPostAsyncNoRetrySucceededOptions) (*azcore.Request, error) {
	urlPath := "/lro/postasync/noretry/succeeded"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.Product)
	}
	return req, nil
}

// postAsyncNoRetrySucceededHandleResponse handles the PostAsyncNoRetrySucceeded response.
func (client *LrOSClient) postAsyncNoRetrySucceededHandleResponse(resp *azcore.Response) (ProductResponse, error) {
	var val *Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductResponse{}, err
	}
	return ProductResponse{RawResponse: resp.Response, Product: val}, nil
}

// postAsyncNoRetrySucceededHandleError handles the PostAsyncNoRetrySucceeded error response.
func (client *LrOSClient) postAsyncNoRetrySucceededHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPostAsyncRetryFailed - Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Poll the endpoint indicated in the Azure-AsyncOperation header for
// operation status
func (client *LrOSClient) BeginPostAsyncRetryFailed(ctx context.Context, options *LrOSBeginPostAsyncRetryFailedOptions) (HTTPPollerResponse, error) {
	resp, err := client.postAsyncRetryFailed(ctx, options)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	result := HTTPPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.PostAsyncRetryFailed", "", resp, client.postAsyncRetryFailedHandleError)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePostAsyncRetryFailed creates a new HTTPPoller from the specified resume token.
// token - The value must come from a previous call to HTTPPoller.ResumeToken().
func (client *LrOSClient) ResumePostAsyncRetryFailed(token string) (HTTPPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.PostAsyncRetryFailed", token, client.postAsyncRetryFailedHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// PostAsyncRetryFailed - Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Poll the endpoint indicated in the Azure-AsyncOperation header for
// operation status
func (client *LrOSClient) postAsyncRetryFailed(ctx context.Context, options *LrOSBeginPostAsyncRetryFailedOptions) (*azcore.Response, error) {
	req, err := client.postAsyncRetryFailedCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted) {
		return nil, client.postAsyncRetryFailedHandleError(resp)
	}
	return resp, nil
}

// postAsyncRetryFailedCreateRequest creates the PostAsyncRetryFailed request.
func (client *LrOSClient) postAsyncRetryFailedCreateRequest(ctx context.Context, options *LrOSBeginPostAsyncRetryFailedOptions) (*azcore.Request, error) {
	urlPath := "/lro/postasync/retry/failed"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.Product)
	}
	return req, nil
}

// postAsyncRetryFailedHandleError handles the PostAsyncRetryFailed error response.
func (client *LrOSClient) postAsyncRetryFailedHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPostAsyncRetrySucceeded - Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Poll the endpoint indicated in the Azure-AsyncOperation header for
// operation status
func (client *LrOSClient) BeginPostAsyncRetrySucceeded(ctx context.Context, options *LrOSBeginPostAsyncRetrySucceededOptions) (ProductPollerResponse, error) {
	resp, err := client.postAsyncRetrySucceeded(ctx, options)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	result := ProductPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.PostAsyncRetrySucceeded", "", resp, client.postAsyncRetrySucceededHandleError)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	poller := &productPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (ProductResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePostAsyncRetrySucceeded creates a new ProductPoller from the specified resume token.
// token - The value must come from a previous call to ProductPoller.ResumeToken().
func (client *LrOSClient) ResumePostAsyncRetrySucceeded(token string) (ProductPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.PostAsyncRetrySucceeded", token, client.postAsyncRetrySucceededHandleError)
	if err != nil {
		return nil, err
	}
	return &productPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// PostAsyncRetrySucceeded - Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Poll the endpoint indicated in the Azure-AsyncOperation header for
// operation status
func (client *LrOSClient) postAsyncRetrySucceeded(ctx context.Context, options *LrOSBeginPostAsyncRetrySucceededOptions) (*azcore.Response, error) {
	req, err := client.postAsyncRetrySucceededCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted) {
		return nil, client.postAsyncRetrySucceededHandleError(resp)
	}
	return resp, nil
}

// postAsyncRetrySucceededCreateRequest creates the PostAsyncRetrySucceeded request.
func (client *LrOSClient) postAsyncRetrySucceededCreateRequest(ctx context.Context, options *LrOSBeginPostAsyncRetrySucceededOptions) (*azcore.Request, error) {
	urlPath := "/lro/postasync/retry/succeeded"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.Product)
	}
	return req, nil
}

// postAsyncRetrySucceededHandleResponse handles the PostAsyncRetrySucceeded response.
func (client *LrOSClient) postAsyncRetrySucceededHandleResponse(resp *azcore.Response) (ProductResponse, error) {
	var val *Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductResponse{}, err
	}
	return ProductResponse{RawResponse: resp.Response, Product: val}, nil
}

// postAsyncRetrySucceededHandleError handles the PostAsyncRetrySucceeded error response.
func (client *LrOSClient) postAsyncRetrySucceededHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPostAsyncRetrycanceled - Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Poll the endpoint indicated in the Azure-AsyncOperation header for
// operation status
func (client *LrOSClient) BeginPostAsyncRetrycanceled(ctx context.Context, options *LrOSBeginPostAsyncRetrycanceledOptions) (HTTPPollerResponse, error) {
	resp, err := client.postAsyncRetrycanceled(ctx, options)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	result := HTTPPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.PostAsyncRetrycanceled", "", resp, client.postAsyncRetrycanceledHandleError)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePostAsyncRetrycanceled creates a new HTTPPoller from the specified resume token.
// token - The value must come from a previous call to HTTPPoller.ResumeToken().
func (client *LrOSClient) ResumePostAsyncRetrycanceled(token string) (HTTPPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.PostAsyncRetrycanceled", token, client.postAsyncRetrycanceledHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// PostAsyncRetrycanceled - Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Poll the endpoint indicated in the Azure-AsyncOperation header for
// operation status
func (client *LrOSClient) postAsyncRetrycanceled(ctx context.Context, options *LrOSBeginPostAsyncRetrycanceledOptions) (*azcore.Response, error) {
	req, err := client.postAsyncRetrycanceledCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted) {
		return nil, client.postAsyncRetrycanceledHandleError(resp)
	}
	return resp, nil
}

// postAsyncRetrycanceledCreateRequest creates the PostAsyncRetrycanceled request.
func (client *LrOSClient) postAsyncRetrycanceledCreateRequest(ctx context.Context, options *LrOSBeginPostAsyncRetrycanceledOptions) (*azcore.Request, error) {
	urlPath := "/lro/postasync/retry/canceled"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.Product)
	}
	return req, nil
}

// postAsyncRetrycanceledHandleError handles the PostAsyncRetrycanceled error response.
func (client *LrOSClient) postAsyncRetrycanceledHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPostDoubleHeadersFinalAzureHeaderGet - Long running post request, service returns a 202 to the initial request with both Location and Azure-Async
// header. Poll Azure-Async and it's success. Should NOT poll Location to get the final object
func (client *LrOSClient) BeginPostDoubleHeadersFinalAzureHeaderGet(ctx context.Context, options *LrOSBeginPostDoubleHeadersFinalAzureHeaderGetOptions) (ProductPollerResponse, error) {
	resp, err := client.postDoubleHeadersFinalAzureHeaderGet(ctx, options)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	result := ProductPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.PostDoubleHeadersFinalAzureHeaderGet", "azure-async-operation", resp, client.postDoubleHeadersFinalAzureHeaderGetHandleError)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	poller := &productPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (ProductResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePostDoubleHeadersFinalAzureHeaderGet creates a new ProductPoller from the specified resume token.
// token - The value must come from a previous call to ProductPoller.ResumeToken().
func (client *LrOSClient) ResumePostDoubleHeadersFinalAzureHeaderGet(token string) (ProductPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.PostDoubleHeadersFinalAzureHeaderGet", token, client.postDoubleHeadersFinalAzureHeaderGetHandleError)
	if err != nil {
		return nil, err
	}
	return &productPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// PostDoubleHeadersFinalAzureHeaderGet - Long running post request, service returns a 202 to the initial request with both Location and Azure-Async header.
// Poll Azure-Async and it's success. Should NOT poll Location to get the final object
func (client *LrOSClient) postDoubleHeadersFinalAzureHeaderGet(ctx context.Context, options *LrOSBeginPostDoubleHeadersFinalAzureHeaderGetOptions) (*azcore.Response, error) {
	req, err := client.postDoubleHeadersFinalAzureHeaderGetCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted) {
		return nil, client.postDoubleHeadersFinalAzureHeaderGetHandleError(resp)
	}
	return resp, nil
}

// postDoubleHeadersFinalAzureHeaderGetCreateRequest creates the PostDoubleHeadersFinalAzureHeaderGet request.
func (client *LrOSClient) postDoubleHeadersFinalAzureHeaderGetCreateRequest(ctx context.Context, options *LrOSBeginPostDoubleHeadersFinalAzureHeaderGetOptions) (*azcore.Request, error) {
	urlPath := "/lro/LROPostDoubleHeadersFinalAzureHeaderGet"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// postDoubleHeadersFinalAzureHeaderGetHandleResponse handles the PostDoubleHeadersFinalAzureHeaderGet response.
func (client *LrOSClient) postDoubleHeadersFinalAzureHeaderGetHandleResponse(resp *azcore.Response) (ProductResponse, error) {
	var val *Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductResponse{}, err
	}
	return ProductResponse{RawResponse: resp.Response, Product: val}, nil
}

// postDoubleHeadersFinalAzureHeaderGetHandleError handles the PostDoubleHeadersFinalAzureHeaderGet error response.
func (client *LrOSClient) postDoubleHeadersFinalAzureHeaderGetHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPostDoubleHeadersFinalAzureHeaderGetDefault - Long running post request, service returns a 202 to the initial request with both Location and Azure-Async
// header. Poll Azure-Async and it's success. Should NOT poll Location to get the final object
// if you support initial Autorest behavior.
func (client *LrOSClient) BeginPostDoubleHeadersFinalAzureHeaderGetDefault(ctx context.Context, options *LrOSBeginPostDoubleHeadersFinalAzureHeaderGetDefaultOptions) (ProductPollerResponse, error) {
	resp, err := client.postDoubleHeadersFinalAzureHeaderGetDefault(ctx, options)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	result := ProductPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.PostDoubleHeadersFinalAzureHeaderGetDefault", "", resp, client.postDoubleHeadersFinalAzureHeaderGetDefaultHandleError)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	poller := &productPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (ProductResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePostDoubleHeadersFinalAzureHeaderGetDefault creates a new ProductPoller from the specified resume token.
// token - The value must come from a previous call to ProductPoller.ResumeToken().
func (client *LrOSClient) ResumePostDoubleHeadersFinalAzureHeaderGetDefault(token string) (ProductPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.PostDoubleHeadersFinalAzureHeaderGetDefault", token, client.postDoubleHeadersFinalAzureHeaderGetDefaultHandleError)
	if err != nil {
		return nil, err
	}
	return &productPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// PostDoubleHeadersFinalAzureHeaderGetDefault - Long running post request, service returns a 202 to the initial request with both Location and Azure-Async
// header. Poll Azure-Async and it's success. Should NOT poll Location to get the final object
// if you support initial Autorest behavior.
func (client *LrOSClient) postDoubleHeadersFinalAzureHeaderGetDefault(ctx context.Context, options *LrOSBeginPostDoubleHeadersFinalAzureHeaderGetDefaultOptions) (*azcore.Response, error) {
	req, err := client.postDoubleHeadersFinalAzureHeaderGetDefaultCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted) {
		return nil, client.postDoubleHeadersFinalAzureHeaderGetDefaultHandleError(resp)
	}
	return resp, nil
}

// postDoubleHeadersFinalAzureHeaderGetDefaultCreateRequest creates the PostDoubleHeadersFinalAzureHeaderGetDefault request.
func (client *LrOSClient) postDoubleHeadersFinalAzureHeaderGetDefaultCreateRequest(ctx context.Context, options *LrOSBeginPostDoubleHeadersFinalAzureHeaderGetDefaultOptions) (*azcore.Request, error) {
	urlPath := "/lro/LROPostDoubleHeadersFinalAzureHeaderGetDefault"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// postDoubleHeadersFinalAzureHeaderGetDefaultHandleResponse handles the PostDoubleHeadersFinalAzureHeaderGetDefault response.
func (client *LrOSClient) postDoubleHeadersFinalAzureHeaderGetDefaultHandleResponse(resp *azcore.Response) (ProductResponse, error) {
	var val *Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductResponse{}, err
	}
	return ProductResponse{RawResponse: resp.Response, Product: val}, nil
}

// postDoubleHeadersFinalAzureHeaderGetDefaultHandleError handles the PostDoubleHeadersFinalAzureHeaderGetDefault error response.
func (client *LrOSClient) postDoubleHeadersFinalAzureHeaderGetDefaultHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPostDoubleHeadersFinalLocationGet - Long running post request, service returns a 202 to the initial request with both Location and Azure-Async header.
// Poll Azure-Async and it's success. Should poll Location to get the final object
func (client *LrOSClient) BeginPostDoubleHeadersFinalLocationGet(ctx context.Context, options *LrOSBeginPostDoubleHeadersFinalLocationGetOptions) (ProductPollerResponse, error) {
	resp, err := client.postDoubleHeadersFinalLocationGet(ctx, options)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	result := ProductPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.PostDoubleHeadersFinalLocationGet", "location", resp, client.postDoubleHeadersFinalLocationGetHandleError)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	poller := &productPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (ProductResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePostDoubleHeadersFinalLocationGet creates a new ProductPoller from the specified resume token.
// token - The value must come from a previous call to ProductPoller.ResumeToken().
func (client *LrOSClient) ResumePostDoubleHeadersFinalLocationGet(token string) (ProductPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.PostDoubleHeadersFinalLocationGet", token, client.postDoubleHeadersFinalLocationGetHandleError)
	if err != nil {
		return nil, err
	}
	return &productPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// PostDoubleHeadersFinalLocationGet - Long running post request, service returns a 202 to the initial request with both Location and Azure-Async header.
// Poll Azure-Async and it's success. Should poll Location to get the final object
func (client *LrOSClient) postDoubleHeadersFinalLocationGet(ctx context.Context, options *LrOSBeginPostDoubleHeadersFinalLocationGetOptions) (*azcore.Response, error) {
	req, err := client.postDoubleHeadersFinalLocationGetCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted) {
		return nil, client.postDoubleHeadersFinalLocationGetHandleError(resp)
	}
	return resp, nil
}

// postDoubleHeadersFinalLocationGetCreateRequest creates the PostDoubleHeadersFinalLocationGet request.
func (client *LrOSClient) postDoubleHeadersFinalLocationGetCreateRequest(ctx context.Context, options *LrOSBeginPostDoubleHeadersFinalLocationGetOptions) (*azcore.Request, error) {
	urlPath := "/lro/LROPostDoubleHeadersFinalLocationGet"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// postDoubleHeadersFinalLocationGetHandleResponse handles the PostDoubleHeadersFinalLocationGet response.
func (client *LrOSClient) postDoubleHeadersFinalLocationGetHandleResponse(resp *azcore.Response) (ProductResponse, error) {
	var val *Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductResponse{}, err
	}
	return ProductResponse{RawResponse: resp.Response, Product: val}, nil
}

// postDoubleHeadersFinalLocationGetHandleError handles the PostDoubleHeadersFinalLocationGet error response.
func (client *LrOSClient) postDoubleHeadersFinalLocationGetHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPut200Acceptedcanceled200 - Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Polls return this value until the last poll returns a ‘200’ with
// ProvisioningState=’Canceled’
func (client *LrOSClient) BeginPut200Acceptedcanceled200(ctx context.Context, options *LrOSBeginPut200Acceptedcanceled200Options) (ProductPollerResponse, error) {
	resp, err := client.put200Acceptedcanceled200(ctx, options)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	result := ProductPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.Put200Acceptedcanceled200", "", resp, client.put200Acceptedcanceled200HandleError)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	poller := &productPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (ProductResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePut200Acceptedcanceled200 creates a new ProductPoller from the specified resume token.
// token - The value must come from a previous call to ProductPoller.ResumeToken().
func (client *LrOSClient) ResumePut200Acceptedcanceled200(token string) (ProductPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.Put200Acceptedcanceled200", token, client.put200Acceptedcanceled200HandleError)
	if err != nil {
		return nil, err
	}
	return &productPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// Put200Acceptedcanceled200 - Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Polls return this value until the last poll returns a ‘200’ with
// ProvisioningState=’Canceled’
func (client *LrOSClient) put200Acceptedcanceled200(ctx context.Context, options *LrOSBeginPut200Acceptedcanceled200Options) (*azcore.Response, error) {
	req, err := client.put200Acceptedcanceled200CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.put200Acceptedcanceled200HandleError(resp)
	}
	return resp, nil
}

// put200Acceptedcanceled200CreateRequest creates the Put200Acceptedcanceled200 request.
func (client *LrOSClient) put200Acceptedcanceled200CreateRequest(ctx context.Context, options *LrOSBeginPut200Acceptedcanceled200Options) (*azcore.Request, error) {
	urlPath := "/lro/put/200/accepted/canceled/200"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.Product)
	}
	return req, nil
}

// put200Acceptedcanceled200HandleResponse handles the Put200Acceptedcanceled200 response.
func (client *LrOSClient) put200Acceptedcanceled200HandleResponse(resp *azcore.Response) (ProductResponse, error) {
	var val *Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductResponse{}, err
	}
	return ProductResponse{RawResponse: resp.Response, Product: val}, nil
}

// put200Acceptedcanceled200HandleError handles the Put200Acceptedcanceled200 error response.
func (client *LrOSClient) put200Acceptedcanceled200HandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPut200Succeeded - Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
func (client *LrOSClient) BeginPut200Succeeded(ctx context.Context, options *LrOSBeginPut200SucceededOptions) (ProductPollerResponse, error) {
	resp, err := client.put200Succeeded(ctx, options)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	result := ProductPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.Put200Succeeded", "", resp, client.put200SucceededHandleError)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	poller := &productPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (ProductResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePut200Succeeded creates a new ProductPoller from the specified resume token.
// token - The value must come from a previous call to ProductPoller.ResumeToken().
func (client *LrOSClient) ResumePut200Succeeded(token string) (ProductPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.Put200Succeeded", token, client.put200SucceededHandleError)
	if err != nil {
		return nil, err
	}
	return &productPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// Put200Succeeded - Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
func (client *LrOSClient) put200Succeeded(ctx context.Context, options *LrOSBeginPut200SucceededOptions) (*azcore.Response, error) {
	req, err := client.put200SucceededCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.put200SucceededHandleError(resp)
	}
	return resp, nil
}

// put200SucceededCreateRequest creates the Put200Succeeded request.
func (client *LrOSClient) put200SucceededCreateRequest(ctx context.Context, options *LrOSBeginPut200SucceededOptions) (*azcore.Request, error) {
	urlPath := "/lro/put/200/succeeded"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.Product)
	}
	return req, nil
}

// put200SucceededHandleResponse handles the Put200Succeeded response.
func (client *LrOSClient) put200SucceededHandleResponse(resp *azcore.Response) (ProductResponse, error) {
	var val *Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductResponse{}, err
	}
	return ProductResponse{RawResponse: resp.Response, Product: val}, nil
}

// put200SucceededHandleError handles the Put200Succeeded error response.
func (client *LrOSClient) put200SucceededHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPut200SucceededNoState - Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’.
func (client *LrOSClient) BeginPut200SucceededNoState(ctx context.Context, options *LrOSBeginPut200SucceededNoStateOptions) (ProductPollerResponse, error) {
	resp, err := client.put200SucceededNoState(ctx, options)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	result := ProductPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.Put200SucceededNoState", "", resp, client.put200SucceededNoStateHandleError)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	poller := &productPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (ProductResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePut200SucceededNoState creates a new ProductPoller from the specified resume token.
// token - The value must come from a previous call to ProductPoller.ResumeToken().
func (client *LrOSClient) ResumePut200SucceededNoState(token string) (ProductPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.Put200SucceededNoState", token, client.put200SucceededNoStateHandleError)
	if err != nil {
		return nil, err
	}
	return &productPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// Put200SucceededNoState - Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’.
func (client *LrOSClient) put200SucceededNoState(ctx context.Context, options *LrOSBeginPut200SucceededNoStateOptions) (*azcore.Response, error) {
	req, err := client.put200SucceededNoStateCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.put200SucceededNoStateHandleError(resp)
	}
	return resp, nil
}

// put200SucceededNoStateCreateRequest creates the Put200SucceededNoState request.
func (client *LrOSClient) put200SucceededNoStateCreateRequest(ctx context.Context, options *LrOSBeginPut200SucceededNoStateOptions) (*azcore.Request, error) {
	urlPath := "/lro/put/200/succeeded/nostate"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.Product)
	}
	return req, nil
}

// put200SucceededNoStateHandleResponse handles the Put200SucceededNoState response.
func (client *LrOSClient) put200SucceededNoStateHandleResponse(resp *azcore.Response) (ProductResponse, error) {
	var val *Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductResponse{}, err
	}
	return ProductResponse{RawResponse: resp.Response, Product: val}, nil
}

// put200SucceededNoStateHandleError handles the Put200SucceededNoState error response.
func (client *LrOSClient) put200SucceededNoStateHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPut200UpdatingSucceeded204 - Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.
// Polls return this value until the last poll returns a ‘200’ with
// ProvisioningState=’Succeeded’
func (client *LrOSClient) BeginPut200UpdatingSucceeded204(ctx context.Context, options *LrOSBeginPut200UpdatingSucceeded204Options) (ProductPollerResponse, error) {
	resp, err := client.put200UpdatingSucceeded204(ctx, options)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	result := ProductPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.Put200UpdatingSucceeded204", "", resp, client.put200UpdatingSucceeded204HandleError)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	poller := &productPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (ProductResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePut200UpdatingSucceeded204 creates a new ProductPoller from the specified resume token.
// token - The value must come from a previous call to ProductPoller.ResumeToken().
func (client *LrOSClient) ResumePut200UpdatingSucceeded204(token string) (ProductPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.Put200UpdatingSucceeded204", token, client.put200UpdatingSucceeded204HandleError)
	if err != nil {
		return nil, err
	}
	return &productPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// Put200UpdatingSucceeded204 - Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.
// Polls return this value until the last poll returns a ‘200’ with
// ProvisioningState=’Succeeded’
func (client *LrOSClient) put200UpdatingSucceeded204(ctx context.Context, options *LrOSBeginPut200UpdatingSucceeded204Options) (*azcore.Response, error) {
	req, err := client.put200UpdatingSucceeded204CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.put200UpdatingSucceeded204HandleError(resp)
	}
	return resp, nil
}

// put200UpdatingSucceeded204CreateRequest creates the Put200UpdatingSucceeded204 request.
func (client *LrOSClient) put200UpdatingSucceeded204CreateRequest(ctx context.Context, options *LrOSBeginPut200UpdatingSucceeded204Options) (*azcore.Request, error) {
	urlPath := "/lro/put/200/updating/succeeded/200"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.Product)
	}
	return req, nil
}

// put200UpdatingSucceeded204HandleResponse handles the Put200UpdatingSucceeded204 response.
func (client *LrOSClient) put200UpdatingSucceeded204HandleResponse(resp *azcore.Response) (ProductResponse, error) {
	var val *Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductResponse{}, err
	}
	return ProductResponse{RawResponse: resp.Response, Product: val}, nil
}

// put200UpdatingSucceeded204HandleError handles the Put200UpdatingSucceeded204 error response.
func (client *LrOSClient) put200UpdatingSucceeded204HandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPut201CreatingFailed200 - Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.
// Polls return this value until the last poll returns a ‘200’ with
// ProvisioningState=’Failed’
func (client *LrOSClient) BeginPut201CreatingFailed200(ctx context.Context, options *LrOSBeginPut201CreatingFailed200Options) (ProductPollerResponse, error) {
	resp, err := client.put201CreatingFailed200(ctx, options)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	result := ProductPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.Put201CreatingFailed200", "", resp, client.put201CreatingFailed200HandleError)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	poller := &productPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (ProductResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePut201CreatingFailed200 creates a new ProductPoller from the specified resume token.
// token - The value must come from a previous call to ProductPoller.ResumeToken().
func (client *LrOSClient) ResumePut201CreatingFailed200(token string) (ProductPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.Put201CreatingFailed200", token, client.put201CreatingFailed200HandleError)
	if err != nil {
		return nil, err
	}
	return &productPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// Put201CreatingFailed200 - Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.
// Polls return this value until the last poll returns a ‘200’ with
// ProvisioningState=’Failed’
func (client *LrOSClient) put201CreatingFailed200(ctx context.Context, options *LrOSBeginPut201CreatingFailed200Options) (*azcore.Response, error) {
	req, err := client.put201CreatingFailed200CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated) {
		return nil, client.put201CreatingFailed200HandleError(resp)
	}
	return resp, nil
}

// put201CreatingFailed200CreateRequest creates the Put201CreatingFailed200 request.
func (client *LrOSClient) put201CreatingFailed200CreateRequest(ctx context.Context, options *LrOSBeginPut201CreatingFailed200Options) (*azcore.Request, error) {
	urlPath := "/lro/put/201/created/failed/200"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.Product)
	}
	return req, nil
}

// put201CreatingFailed200HandleResponse handles the Put201CreatingFailed200 response.
func (client *LrOSClient) put201CreatingFailed200HandleResponse(resp *azcore.Response) (ProductResponse, error) {
	var val *Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductResponse{}, err
	}
	return ProductResponse{RawResponse: resp.Response, Product: val}, nil
}

// put201CreatingFailed200HandleError handles the Put201CreatingFailed200 error response.
func (client *LrOSClient) put201CreatingFailed200HandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPut201CreatingSucceeded200 - Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Polls return this value until the last poll returns a ‘200’ with
// ProvisioningState=’Succeeded’
func (client *LrOSClient) BeginPut201CreatingSucceeded200(ctx context.Context, options *LrOSBeginPut201CreatingSucceeded200Options) (ProductPollerResponse, error) {
	resp, err := client.put201CreatingSucceeded200(ctx, options)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	result := ProductPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.Put201CreatingSucceeded200", "", resp, client.put201CreatingSucceeded200HandleError)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	poller := &productPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (ProductResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePut201CreatingSucceeded200 creates a new ProductPoller from the specified resume token.
// token - The value must come from a previous call to ProductPoller.ResumeToken().
func (client *LrOSClient) ResumePut201CreatingSucceeded200(token string) (ProductPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.Put201CreatingSucceeded200", token, client.put201CreatingSucceeded200HandleError)
	if err != nil {
		return nil, err
	}
	return &productPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// Put201CreatingSucceeded200 - Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Polls return this value until the last poll returns a ‘200’ with
// ProvisioningState=’Succeeded’
func (client *LrOSClient) put201CreatingSucceeded200(ctx context.Context, options *LrOSBeginPut201CreatingSucceeded200Options) (*azcore.Response, error) {
	req, err := client.put201CreatingSucceeded200CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated) {
		return nil, client.put201CreatingSucceeded200HandleError(resp)
	}
	return resp, nil
}

// put201CreatingSucceeded200CreateRequest creates the Put201CreatingSucceeded200 request.
func (client *LrOSClient) put201CreatingSucceeded200CreateRequest(ctx context.Context, options *LrOSBeginPut201CreatingSucceeded200Options) (*azcore.Request, error) {
	urlPath := "/lro/put/201/creating/succeeded/200"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.Product)
	}
	return req, nil
}

// put201CreatingSucceeded200HandleResponse handles the Put201CreatingSucceeded200 response.
func (client *LrOSClient) put201CreatingSucceeded200HandleResponse(resp *azcore.Response) (ProductResponse, error) {
	var val *Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductResponse{}, err
	}
	return ProductResponse{RawResponse: resp.Response, Product: val}, nil
}

// put201CreatingSucceeded200HandleError handles the Put201CreatingSucceeded200 error response.
func (client *LrOSClient) put201CreatingSucceeded200HandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPut201Succeeded - Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
func (client *LrOSClient) BeginPut201Succeeded(ctx context.Context, options *LrOSBeginPut201SucceededOptions) (ProductPollerResponse, error) {
	resp, err := client.put201Succeeded(ctx, options)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	result := ProductPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.Put201Succeeded", "", resp, client.put201SucceededHandleError)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	poller := &productPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (ProductResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePut201Succeeded creates a new ProductPoller from the specified resume token.
// token - The value must come from a previous call to ProductPoller.ResumeToken().
func (client *LrOSClient) ResumePut201Succeeded(token string) (ProductPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.Put201Succeeded", token, client.put201SucceededHandleError)
	if err != nil {
		return nil, err
	}
	return &productPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// Put201Succeeded - Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
func (client *LrOSClient) put201Succeeded(ctx context.Context, options *LrOSBeginPut201SucceededOptions) (*azcore.Response, error) {
	req, err := client.put201SucceededCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, client.put201SucceededHandleError(resp)
	}
	return resp, nil
}

// put201SucceededCreateRequest creates the Put201Succeeded request.
func (client *LrOSClient) put201SucceededCreateRequest(ctx context.Context, options *LrOSBeginPut201SucceededOptions) (*azcore.Request, error) {
	urlPath := "/lro/put/201/succeeded"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.Product)
	}
	return req, nil
}

// put201SucceededHandleResponse handles the Put201Succeeded response.
func (client *LrOSClient) put201SucceededHandleResponse(resp *azcore.Response) (ProductResponse, error) {
	var val *Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductResponse{}, err
	}
	return ProductResponse{RawResponse: resp.Response, Product: val}, nil
}

// put201SucceededHandleError handles the Put201Succeeded error response.
func (client *LrOSClient) put201SucceededHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPut202Retry200 - Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that
// returns a 200 and an entity that doesn't contains ProvisioningState
func (client *LrOSClient) BeginPut202Retry200(ctx context.Context, options *LrOSBeginPut202Retry200Options) (ProductPollerResponse, error) {
	resp, err := client.put202Retry200(ctx, options)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	result := ProductPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.Put202Retry200", "", resp, client.put202Retry200HandleError)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	poller := &productPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (ProductResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePut202Retry200 creates a new ProductPoller from the specified resume token.
// token - The value must come from a previous call to ProductPoller.ResumeToken().
func (client *LrOSClient) ResumePut202Retry200(token string) (ProductPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.Put202Retry200", token, client.put202Retry200HandleError)
	if err != nil {
		return nil, err
	}
	return &productPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// Put202Retry200 - Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns
// a 200 and an entity that doesn't contains ProvisioningState
func (client *LrOSClient) put202Retry200(ctx context.Context, options *LrOSBeginPut202Retry200Options) (*azcore.Response, error) {
	req, err := client.put202Retry200CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted) {
		return nil, client.put202Retry200HandleError(resp)
	}
	return resp, nil
}

// put202Retry200CreateRequest creates the Put202Retry200 request.
func (client *LrOSClient) put202Retry200CreateRequest(ctx context.Context, options *LrOSBeginPut202Retry200Options) (*azcore.Request, error) {
	urlPath := "/lro/put/202/retry/200"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.Product)
	}
	return req, nil
}

// put202Retry200HandleResponse handles the Put202Retry200 response.
func (client *LrOSClient) put202Retry200HandleResponse(resp *azcore.Response) (ProductResponse, error) {
	var val *Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductResponse{}, err
	}
	return ProductResponse{RawResponse: resp.Response, Product: val}, nil
}

// put202Retry200HandleError handles the Put202Retry200 error response.
func (client *LrOSClient) put202Retry200HandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPutAsyncNoHeaderInRetry - Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls
// to operation status do not contain Azure-AsyncOperation header.
func (client *LrOSClient) BeginPutAsyncNoHeaderInRetry(ctx context.Context, options *LrOSBeginPutAsyncNoHeaderInRetryOptions) (ProductPollerResponse, error) {
	resp, err := client.putAsyncNoHeaderInRetry(ctx, options)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	result := ProductPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.PutAsyncNoHeaderInRetry", "", resp, client.putAsyncNoHeaderInRetryHandleError)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	poller := &productPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (ProductResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePutAsyncNoHeaderInRetry creates a new ProductPoller from the specified resume token.
// token - The value must come from a previous call to ProductPoller.ResumeToken().
func (client *LrOSClient) ResumePutAsyncNoHeaderInRetry(token string) (ProductPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.PutAsyncNoHeaderInRetry", token, client.putAsyncNoHeaderInRetryHandleError)
	if err != nil {
		return nil, err
	}
	return &productPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// PutAsyncNoHeaderInRetry - Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to
// operation status do not contain Azure-AsyncOperation header.
func (client *LrOSClient) putAsyncNoHeaderInRetry(ctx context.Context, options *LrOSBeginPutAsyncNoHeaderInRetryOptions) (*azcore.Response, error) {
	req, err := client.putAsyncNoHeaderInRetryCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, client.putAsyncNoHeaderInRetryHandleError(resp)
	}
	return resp, nil
}

// putAsyncNoHeaderInRetryCreateRequest creates the PutAsyncNoHeaderInRetry request.
func (client *LrOSClient) putAsyncNoHeaderInRetryCreateRequest(ctx context.Context, options *LrOSBeginPutAsyncNoHeaderInRetryOptions) (*azcore.Request, error) {
	urlPath := "/lro/putasync/noheader/201/200"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.Product)
	}
	return req, nil
}

// putAsyncNoHeaderInRetryHandleResponse handles the PutAsyncNoHeaderInRetry response.
func (client *LrOSClient) putAsyncNoHeaderInRetryHandleResponse(resp *azcore.Response) (ProductResponse, error) {
	var val *Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductResponse{}, err
	}
	return ProductResponse{RawResponse: resp.Response, Product: val}, nil
}

// putAsyncNoHeaderInRetryHandleError handles the PutAsyncNoHeaderInRetry error response.
func (client *LrOSClient) putAsyncNoHeaderInRetryHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPutAsyncNoRetrySucceeded - Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Poll the endpoint indicated in the Azure-AsyncOperation header for
// operation status
func (client *LrOSClient) BeginPutAsyncNoRetrySucceeded(ctx context.Context, options *LrOSBeginPutAsyncNoRetrySucceededOptions) (ProductPollerResponse, error) {
	resp, err := client.putAsyncNoRetrySucceeded(ctx, options)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	result := ProductPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.PutAsyncNoRetrySucceeded", "", resp, client.putAsyncNoRetrySucceededHandleError)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	poller := &productPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (ProductResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePutAsyncNoRetrySucceeded creates a new ProductPoller from the specified resume token.
// token - The value must come from a previous call to ProductPoller.ResumeToken().
func (client *LrOSClient) ResumePutAsyncNoRetrySucceeded(token string) (ProductPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.PutAsyncNoRetrySucceeded", token, client.putAsyncNoRetrySucceededHandleError)
	if err != nil {
		return nil, err
	}
	return &productPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// PutAsyncNoRetrySucceeded - Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Poll the endpoint indicated in the Azure-AsyncOperation header for
// operation status
func (client *LrOSClient) putAsyncNoRetrySucceeded(ctx context.Context, options *LrOSBeginPutAsyncNoRetrySucceededOptions) (*azcore.Response, error) {
	req, err := client.putAsyncNoRetrySucceededCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putAsyncNoRetrySucceededHandleError(resp)
	}
	return resp, nil
}

// putAsyncNoRetrySucceededCreateRequest creates the PutAsyncNoRetrySucceeded request.
func (client *LrOSClient) putAsyncNoRetrySucceededCreateRequest(ctx context.Context, options *LrOSBeginPutAsyncNoRetrySucceededOptions) (*azcore.Request, error) {
	urlPath := "/lro/putasync/noretry/succeeded"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.Product)
	}
	return req, nil
}

// putAsyncNoRetrySucceededHandleResponse handles the PutAsyncNoRetrySucceeded response.
func (client *LrOSClient) putAsyncNoRetrySucceededHandleResponse(resp *azcore.Response) (ProductResponse, error) {
	var val *Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductResponse{}, err
	}
	return ProductResponse{RawResponse: resp.Response, Product: val}, nil
}

// putAsyncNoRetrySucceededHandleError handles the PutAsyncNoRetrySucceeded error response.
func (client *LrOSClient) putAsyncNoRetrySucceededHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPutAsyncNoRetrycanceled - Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Poll the endpoint indicated in the Azure-AsyncOperation header for
// operation status
func (client *LrOSClient) BeginPutAsyncNoRetrycanceled(ctx context.Context, options *LrOSBeginPutAsyncNoRetrycanceledOptions) (ProductPollerResponse, error) {
	resp, err := client.putAsyncNoRetrycanceled(ctx, options)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	result := ProductPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.PutAsyncNoRetrycanceled", "", resp, client.putAsyncNoRetrycanceledHandleError)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	poller := &productPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (ProductResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePutAsyncNoRetrycanceled creates a new ProductPoller from the specified resume token.
// token - The value must come from a previous call to ProductPoller.ResumeToken().
func (client *LrOSClient) ResumePutAsyncNoRetrycanceled(token string) (ProductPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.PutAsyncNoRetrycanceled", token, client.putAsyncNoRetrycanceledHandleError)
	if err != nil {
		return nil, err
	}
	return &productPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// PutAsyncNoRetrycanceled - Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Poll the endpoint indicated in the Azure-AsyncOperation header for
// operation status
func (client *LrOSClient) putAsyncNoRetrycanceled(ctx context.Context, options *LrOSBeginPutAsyncNoRetrycanceledOptions) (*azcore.Response, error) {
	req, err := client.putAsyncNoRetrycanceledCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putAsyncNoRetrycanceledHandleError(resp)
	}
	return resp, nil
}

// putAsyncNoRetrycanceledCreateRequest creates the PutAsyncNoRetrycanceled request.
func (client *LrOSClient) putAsyncNoRetrycanceledCreateRequest(ctx context.Context, options *LrOSBeginPutAsyncNoRetrycanceledOptions) (*azcore.Request, error) {
	urlPath := "/lro/putasync/noretry/canceled"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.Product)
	}
	return req, nil
}

// putAsyncNoRetrycanceledHandleResponse handles the PutAsyncNoRetrycanceled response.
func (client *LrOSClient) putAsyncNoRetrycanceledHandleResponse(resp *azcore.Response) (ProductResponse, error) {
	var val *Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductResponse{}, err
	}
	return ProductResponse{RawResponse: resp.Response, Product: val}, nil
}

// putAsyncNoRetrycanceledHandleError handles the PutAsyncNoRetrycanceled error response.
func (client *LrOSClient) putAsyncNoRetrycanceledHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPutAsyncNonResource - Long running put request with non resource.
func (client *LrOSClient) BeginPutAsyncNonResource(ctx context.Context, options *LrOSBeginPutAsyncNonResourceOptions) (SKUPollerResponse, error) {
	resp, err := client.putAsyncNonResource(ctx, options)
	if err != nil {
		return SKUPollerResponse{}, err
	}
	result := SKUPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.PutAsyncNonResource", "", resp, client.putAsyncNonResourceHandleError)
	if err != nil {
		return SKUPollerResponse{}, err
	}
	poller := &skuPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (SKUResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePutAsyncNonResource creates a new SKUPoller from the specified resume token.
// token - The value must come from a previous call to SKUPoller.ResumeToken().
func (client *LrOSClient) ResumePutAsyncNonResource(token string) (SKUPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.PutAsyncNonResource", token, client.putAsyncNonResourceHandleError)
	if err != nil {
		return nil, err
	}
	return &skuPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// PutAsyncNonResource - Long running put request with non resource.
func (client *LrOSClient) putAsyncNonResource(ctx context.Context, options *LrOSBeginPutAsyncNonResourceOptions) (*azcore.Response, error) {
	req, err := client.putAsyncNonResourceCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted) {
		return nil, client.putAsyncNonResourceHandleError(resp)
	}
	return resp, nil
}

// putAsyncNonResourceCreateRequest creates the PutAsyncNonResource request.
func (client *LrOSClient) putAsyncNonResourceCreateRequest(ctx context.Context, options *LrOSBeginPutAsyncNonResourceOptions) (*azcore.Request, error) {
	urlPath := "/lro/putnonresourceasync/202/200"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.Sku)
	}
	return req, nil
}

// putAsyncNonResourceHandleResponse handles the PutAsyncNonResource response.
func (client *LrOSClient) putAsyncNonResourceHandleResponse(resp *azcore.Response) (SKUResponse, error) {
	var val *SKU
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return SKUResponse{}, err
	}
	return SKUResponse{RawResponse: resp.Response, SKU: val}, nil
}

// putAsyncNonResourceHandleError handles the PutAsyncNonResource error response.
func (client *LrOSClient) putAsyncNonResourceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPutAsyncRetryFailed - Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Poll the endpoint indicated in the Azure-AsyncOperation header for
// operation status
func (client *LrOSClient) BeginPutAsyncRetryFailed(ctx context.Context, options *LrOSBeginPutAsyncRetryFailedOptions) (ProductPollerResponse, error) {
	resp, err := client.putAsyncRetryFailed(ctx, options)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	result := ProductPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.PutAsyncRetryFailed", "", resp, client.putAsyncRetryFailedHandleError)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	poller := &productPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (ProductResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePutAsyncRetryFailed creates a new ProductPoller from the specified resume token.
// token - The value must come from a previous call to ProductPoller.ResumeToken().
func (client *LrOSClient) ResumePutAsyncRetryFailed(token string) (ProductPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.PutAsyncRetryFailed", token, client.putAsyncRetryFailedHandleError)
	if err != nil {
		return nil, err
	}
	return &productPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// PutAsyncRetryFailed - Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Poll the endpoint indicated in the Azure-AsyncOperation header for
// operation status
func (client *LrOSClient) putAsyncRetryFailed(ctx context.Context, options *LrOSBeginPutAsyncRetryFailedOptions) (*azcore.Response, error) {
	req, err := client.putAsyncRetryFailedCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putAsyncRetryFailedHandleError(resp)
	}
	return resp, nil
}

// putAsyncRetryFailedCreateRequest creates the PutAsyncRetryFailed request.
func (client *LrOSClient) putAsyncRetryFailedCreateRequest(ctx context.Context, options *LrOSBeginPutAsyncRetryFailedOptions) (*azcore.Request, error) {
	urlPath := "/lro/putasync/retry/failed"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.Product)
	}
	return req, nil
}

// putAsyncRetryFailedHandleResponse handles the PutAsyncRetryFailed response.
func (client *LrOSClient) putAsyncRetryFailedHandleResponse(resp *azcore.Response) (ProductResponse, error) {
	var val *Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductResponse{}, err
	}
	return ProductResponse{RawResponse: resp.Response, Product: val}, nil
}

// putAsyncRetryFailedHandleError handles the PutAsyncRetryFailed error response.
func (client *LrOSClient) putAsyncRetryFailedHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPutAsyncRetrySucceeded - Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Poll the endpoint indicated in the Azure-AsyncOperation header for
// operation status
func (client *LrOSClient) BeginPutAsyncRetrySucceeded(ctx context.Context, options *LrOSBeginPutAsyncRetrySucceededOptions) (ProductPollerResponse, error) {
	resp, err := client.putAsyncRetrySucceeded(ctx, options)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	result := ProductPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.PutAsyncRetrySucceeded", "", resp, client.putAsyncRetrySucceededHandleError)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	poller := &productPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (ProductResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePutAsyncRetrySucceeded creates a new ProductPoller from the specified resume token.
// token - The value must come from a previous call to ProductPoller.ResumeToken().
func (client *LrOSClient) ResumePutAsyncRetrySucceeded(token string) (ProductPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.PutAsyncRetrySucceeded", token, client.putAsyncRetrySucceededHandleError)
	if err != nil {
		return nil, err
	}
	return &productPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// PutAsyncRetrySucceeded - Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’.
// Poll the endpoint indicated in the Azure-AsyncOperation header for
// operation status
func (client *LrOSClient) putAsyncRetrySucceeded(ctx context.Context, options *LrOSBeginPutAsyncRetrySucceededOptions) (*azcore.Response, error) {
	req, err := client.putAsyncRetrySucceededCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putAsyncRetrySucceededHandleError(resp)
	}
	return resp, nil
}

// putAsyncRetrySucceededCreateRequest creates the PutAsyncRetrySucceeded request.
func (client *LrOSClient) putAsyncRetrySucceededCreateRequest(ctx context.Context, options *LrOSBeginPutAsyncRetrySucceededOptions) (*azcore.Request, error) {
	urlPath := "/lro/putasync/retry/succeeded"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.Product)
	}
	return req, nil
}

// putAsyncRetrySucceededHandleResponse handles the PutAsyncRetrySucceeded response.
func (client *LrOSClient) putAsyncRetrySucceededHandleResponse(resp *azcore.Response) (ProductResponse, error) {
	var val *Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductResponse{}, err
	}
	return ProductResponse{RawResponse: resp.Response, Product: val}, nil
}

// putAsyncRetrySucceededHandleError handles the PutAsyncRetrySucceeded error response.
func (client *LrOSClient) putAsyncRetrySucceededHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPutAsyncSubResource - Long running put request with sub resource.
func (client *LrOSClient) BeginPutAsyncSubResource(ctx context.Context, options *LrOSBeginPutAsyncSubResourceOptions) (SubProductPollerResponse, error) {
	resp, err := client.putAsyncSubResource(ctx, options)
	if err != nil {
		return SubProductPollerResponse{}, err
	}
	result := SubProductPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.PutAsyncSubResource", "", resp, client.putAsyncSubResourceHandleError)
	if err != nil {
		return SubProductPollerResponse{}, err
	}
	poller := &subProductPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (SubProductResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePutAsyncSubResource creates a new SubProductPoller from the specified resume token.
// token - The value must come from a previous call to SubProductPoller.ResumeToken().
func (client *LrOSClient) ResumePutAsyncSubResource(token string) (SubProductPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.PutAsyncSubResource", token, client.putAsyncSubResourceHandleError)
	if err != nil {
		return nil, err
	}
	return &subProductPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// PutAsyncSubResource - Long running put request with sub resource.
func (client *LrOSClient) putAsyncSubResource(ctx context.Context, options *LrOSBeginPutAsyncSubResourceOptions) (*azcore.Response, error) {
	req, err := client.putAsyncSubResourceCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted) {
		return nil, client.putAsyncSubResourceHandleError(resp)
	}
	return resp, nil
}

// putAsyncSubResourceCreateRequest creates the PutAsyncSubResource request.
func (client *LrOSClient) putAsyncSubResourceCreateRequest(ctx context.Context, options *LrOSBeginPutAsyncSubResourceOptions) (*azcore.Request, error) {
	urlPath := "/lro/putsubresourceasync/202/200"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.Product)
	}
	return req, nil
}

// putAsyncSubResourceHandleResponse handles the PutAsyncSubResource response.
func (client *LrOSClient) putAsyncSubResourceHandleResponse(resp *azcore.Response) (SubProductResponse, error) {
	var val *SubProduct
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return SubProductResponse{}, err
	}
	return SubProductResponse{RawResponse: resp.Response, SubProduct: val}, nil
}

// putAsyncSubResourceHandleError handles the PutAsyncSubResource error response.
func (client *LrOSClient) putAsyncSubResourceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPutNoHeaderInRetry - Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation
// status do not contain location header.
func (client *LrOSClient) BeginPutNoHeaderInRetry(ctx context.Context, options *LrOSBeginPutNoHeaderInRetryOptions) (ProductPollerResponse, error) {
	resp, err := client.putNoHeaderInRetry(ctx, options)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	result := ProductPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.PutNoHeaderInRetry", "", resp, client.putNoHeaderInRetryHandleError)
	if err != nil {
		return ProductPollerResponse{}, err
	}
	poller := &productPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (ProductResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePutNoHeaderInRetry creates a new ProductPoller from the specified resume token.
// token - The value must come from a previous call to ProductPoller.ResumeToken().
func (client *LrOSClient) ResumePutNoHeaderInRetry(token string) (ProductPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.PutNoHeaderInRetry", token, client.putNoHeaderInRetryHandleError)
	if err != nil {
		return nil, err
	}
	return &productPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// PutNoHeaderInRetry - Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status
// do not contain location header.
func (client *LrOSClient) putNoHeaderInRetry(ctx context.Context, options *LrOSBeginPutNoHeaderInRetryOptions) (*azcore.Response, error) {
	req, err := client.putNoHeaderInRetryCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted) {
		return nil, client.putNoHeaderInRetryHandleError(resp)
	}
	return resp, nil
}

// putNoHeaderInRetryCreateRequest creates the PutNoHeaderInRetry request.
func (client *LrOSClient) putNoHeaderInRetryCreateRequest(ctx context.Context, options *LrOSBeginPutNoHeaderInRetryOptions) (*azcore.Request, error) {
	urlPath := "/lro/put/noheader/202/200"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.Product)
	}
	return req, nil
}

// putNoHeaderInRetryHandleResponse handles the PutNoHeaderInRetry response.
func (client *LrOSClient) putNoHeaderInRetryHandleResponse(resp *azcore.Response) (ProductResponse, error) {
	var val *Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductResponse{}, err
	}
	return ProductResponse{RawResponse: resp.Response, Product: val}, nil
}

// putNoHeaderInRetryHandleError handles the PutNoHeaderInRetry error response.
func (client *LrOSClient) putNoHeaderInRetryHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPutNonResource - Long running put request with non resource.
func (client *LrOSClient) BeginPutNonResource(ctx context.Context, options *LrOSBeginPutNonResourceOptions) (SKUPollerResponse, error) {
	resp, err := client.putNonResource(ctx, options)
	if err != nil {
		return SKUPollerResponse{}, err
	}
	result := SKUPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.PutNonResource", "", resp, client.putNonResourceHandleError)
	if err != nil {
		return SKUPollerResponse{}, err
	}
	poller := &skuPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (SKUResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePutNonResource creates a new SKUPoller from the specified resume token.
// token - The value must come from a previous call to SKUPoller.ResumeToken().
func (client *LrOSClient) ResumePutNonResource(token string) (SKUPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.PutNonResource", token, client.putNonResourceHandleError)
	if err != nil {
		return nil, err
	}
	return &skuPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// PutNonResource - Long running put request with non resource.
func (client *LrOSClient) putNonResource(ctx context.Context, options *LrOSBeginPutNonResourceOptions) (*azcore.Response, error) {
	req, err := client.putNonResourceCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted) {
		return nil, client.putNonResourceHandleError(resp)
	}
	return resp, nil
}

// putNonResourceCreateRequest creates the PutNonResource request.
func (client *LrOSClient) putNonResourceCreateRequest(ctx context.Context, options *LrOSBeginPutNonResourceOptions) (*azcore.Request, error) {
	urlPath := "/lro/putnonresource/202/200"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.Sku)
	}
	return req, nil
}

// putNonResourceHandleResponse handles the PutNonResource response.
func (client *LrOSClient) putNonResourceHandleResponse(resp *azcore.Response) (SKUResponse, error) {
	var val *SKU
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return SKUResponse{}, err
	}
	return SKUResponse{RawResponse: resp.Response, SKU: val}, nil
}

// putNonResourceHandleError handles the PutNonResource error response.
func (client *LrOSClient) putNonResourceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginPutSubResource - Long running put request with sub resource.
func (client *LrOSClient) BeginPutSubResource(ctx context.Context, options *LrOSBeginPutSubResourceOptions) (SubProductPollerResponse, error) {
	resp, err := client.putSubResource(ctx, options)
	if err != nil {
		return SubProductPollerResponse{}, err
	}
	result := SubProductPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("LrOSClient.PutSubResource", "", resp, client.putSubResourceHandleError)
	if err != nil {
		return SubProductPollerResponse{}, err
	}
	poller := &subProductPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (SubProductResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumePutSubResource creates a new SubProductPoller from the specified resume token.
// token - The value must come from a previous call to SubProductPoller.ResumeToken().
func (client *LrOSClient) ResumePutSubResource(token string) (SubProductPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("LrOSClient.PutSubResource", token, client.putSubResourceHandleError)
	if err != nil {
		return nil, err
	}
	return &subProductPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// PutSubResource - Long running put request with sub resource.
func (client *LrOSClient) putSubResource(ctx context.Context, options *LrOSBeginPutSubResourceOptions) (*azcore.Response, error) {
	req, err := client.putSubResourceCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted) {
		return nil, client.putSubResourceHandleError(resp)
	}
	return resp, nil
}

// putSubResourceCreateRequest creates the PutSubResource request.
func (client *LrOSClient) putSubResourceCreateRequest(ctx context.Context, options *LrOSBeginPutSubResourceOptions) (*azcore.Request, error) {
	urlPath := "/lro/putsubresource/202/200"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.Product)
	}
	return req, nil
}

// putSubResourceHandleResponse handles the PutSubResource response.
func (client *LrOSClient) putSubResourceHandleResponse(resp *azcore.Response) (SubProductResponse, error) {
	var val *SubProduct
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return SubProductResponse{}, err
	}
	return SubProductResponse{RawResponse: resp.Response, SubProduct: val}, nil
}

// putSubResourceHandleError handles the PutSubResource error response.
func (client *LrOSClient) putSubResourceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}
