// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package lrogroup

import (
	"context"
	"net/http"
	"time"
)

// LRORetrysDelete202Retry200PollerResponse contains the response from method LRORetrys.Delete202Retry200.
type LRORetrysDelete202Retry200PollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LRORetrysDelete202Retry200Poller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LRORetrysDelete202Retry200PollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LRORetrysDelete202Retry200Response, error) {
	respType := LRORetrysDelete202Retry200Response{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LRORetrysDelete202Retry200Response contains the response from method LRORetrys.Delete202Retry200.
type LRORetrysDelete202Retry200Response struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LRORetrysDeleteAsyncRelativeRetrySucceededPollerResponse contains the response from method LRORetrys.DeleteAsyncRelativeRetrySucceeded.
type LRORetrysDeleteAsyncRelativeRetrySucceededPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LRORetrysDeleteAsyncRelativeRetrySucceededPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LRORetrysDeleteAsyncRelativeRetrySucceededPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LRORetrysDeleteAsyncRelativeRetrySucceededResponse, error) {
	respType := LRORetrysDeleteAsyncRelativeRetrySucceededResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LRORetrysDeleteAsyncRelativeRetrySucceededResponse contains the response from method LRORetrys.DeleteAsyncRelativeRetrySucceeded.
type LRORetrysDeleteAsyncRelativeRetrySucceededResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LRORetrysDeleteProvisioning202Accepted200SucceededPollerResponse contains the response from method LRORetrys.DeleteProvisioning202Accepted200Succeeded.
type LRORetrysDeleteProvisioning202Accepted200SucceededPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LRORetrysDeleteProvisioning202Accepted200SucceededPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LRORetrysDeleteProvisioning202Accepted200SucceededPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LRORetrysDeleteProvisioning202Accepted200SucceededResponse, error) {
	respType := LRORetrysDeleteProvisioning202Accepted200SucceededResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LRORetrysDeleteProvisioning202Accepted200SucceededResponse contains the response from method LRORetrys.DeleteProvisioning202Accepted200Succeeded.
type LRORetrysDeleteProvisioning202Accepted200SucceededResponse struct {
	LRORetrysDeleteProvisioning202Accepted200SucceededResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LRORetrysDeleteProvisioning202Accepted200SucceededResult contains the result from method LRORetrys.DeleteProvisioning202Accepted200Succeeded.
type LRORetrysDeleteProvisioning202Accepted200SucceededResult struct {
	Product
}

// LRORetrysPost202Retry200PollerResponse contains the response from method LRORetrys.Post202Retry200.
type LRORetrysPost202Retry200PollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LRORetrysPost202Retry200Poller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LRORetrysPost202Retry200PollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LRORetrysPost202Retry200Response, error) {
	respType := LRORetrysPost202Retry200Response{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LRORetrysPost202Retry200Response contains the response from method LRORetrys.Post202Retry200.
type LRORetrysPost202Retry200Response struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LRORetrysPostAsyncRelativeRetrySucceededPollerResponse contains the response from method LRORetrys.PostAsyncRelativeRetrySucceeded.
type LRORetrysPostAsyncRelativeRetrySucceededPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LRORetrysPostAsyncRelativeRetrySucceededPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LRORetrysPostAsyncRelativeRetrySucceededPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LRORetrysPostAsyncRelativeRetrySucceededResponse, error) {
	respType := LRORetrysPostAsyncRelativeRetrySucceededResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LRORetrysPostAsyncRelativeRetrySucceededResponse contains the response from method LRORetrys.PostAsyncRelativeRetrySucceeded.
type LRORetrysPostAsyncRelativeRetrySucceededResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LRORetrysPut201CreatingSucceeded200PollerResponse contains the response from method LRORetrys.Put201CreatingSucceeded200.
type LRORetrysPut201CreatingSucceeded200PollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LRORetrysPut201CreatingSucceeded200Poller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LRORetrysPut201CreatingSucceeded200PollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LRORetrysPut201CreatingSucceeded200Response, error) {
	respType := LRORetrysPut201CreatingSucceeded200Response{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LRORetrysPut201CreatingSucceeded200Response contains the response from method LRORetrys.Put201CreatingSucceeded200.
type LRORetrysPut201CreatingSucceeded200Response struct {
	LRORetrysPut201CreatingSucceeded200Result
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LRORetrysPut201CreatingSucceeded200Result contains the result from method LRORetrys.Put201CreatingSucceeded200.
type LRORetrysPut201CreatingSucceeded200Result struct {
	Product
}

// LRORetrysPutAsyncRelativeRetrySucceededPollerResponse contains the response from method LRORetrys.PutAsyncRelativeRetrySucceeded.
type LRORetrysPutAsyncRelativeRetrySucceededPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LRORetrysPutAsyncRelativeRetrySucceededPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LRORetrysPutAsyncRelativeRetrySucceededPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LRORetrysPutAsyncRelativeRetrySucceededResponse, error) {
	respType := LRORetrysPutAsyncRelativeRetrySucceededResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LRORetrysPutAsyncRelativeRetrySucceededResponse contains the response from method LRORetrys.PutAsyncRelativeRetrySucceeded.
type LRORetrysPutAsyncRelativeRetrySucceededResponse struct {
	LRORetrysPutAsyncRelativeRetrySucceededResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LRORetrysPutAsyncRelativeRetrySucceededResult contains the result from method LRORetrys.PutAsyncRelativeRetrySucceeded.
type LRORetrysPutAsyncRelativeRetrySucceededResult struct {
	Product
}

// LROSADsDelete202NonRetry400PollerResponse contains the response from method LROSADs.Delete202NonRetry400.
type LROSADsDelete202NonRetry400PollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROSADsDelete202NonRetry400Poller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROSADsDelete202NonRetry400PollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROSADsDelete202NonRetry400Response, error) {
	respType := LROSADsDelete202NonRetry400Response{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROSADsDelete202NonRetry400Response contains the response from method LROSADs.Delete202NonRetry400.
type LROSADsDelete202NonRetry400Response struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROSADsDelete202RetryInvalidHeaderPollerResponse contains the response from method LROSADs.Delete202RetryInvalidHeader.
type LROSADsDelete202RetryInvalidHeaderPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROSADsDelete202RetryInvalidHeaderPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROSADsDelete202RetryInvalidHeaderPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROSADsDelete202RetryInvalidHeaderResponse, error) {
	respType := LROSADsDelete202RetryInvalidHeaderResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROSADsDelete202RetryInvalidHeaderResponse contains the response from method LROSADs.Delete202RetryInvalidHeader.
type LROSADsDelete202RetryInvalidHeaderResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROSADsDelete204SucceededPollerResponse contains the response from method LROSADs.Delete204Succeeded.
type LROSADsDelete204SucceededPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROSADsDelete204SucceededPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROSADsDelete204SucceededPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROSADsDelete204SucceededResponse, error) {
	respType := LROSADsDelete204SucceededResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROSADsDelete204SucceededResponse contains the response from method LROSADs.Delete204Succeeded.
type LROSADsDelete204SucceededResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROSADsDeleteAsyncRelativeRetry400PollerResponse contains the response from method LROSADs.DeleteAsyncRelativeRetry400.
type LROSADsDeleteAsyncRelativeRetry400PollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROSADsDeleteAsyncRelativeRetry400Poller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROSADsDeleteAsyncRelativeRetry400PollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROSADsDeleteAsyncRelativeRetry400Response, error) {
	respType := LROSADsDeleteAsyncRelativeRetry400Response{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROSADsDeleteAsyncRelativeRetry400Response contains the response from method LROSADs.DeleteAsyncRelativeRetry400.
type LROSADsDeleteAsyncRelativeRetry400Response struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROSADsDeleteAsyncRelativeRetryInvalidHeaderPollerResponse contains the response from method LROSADs.DeleteAsyncRelativeRetryInvalidHeader.
type LROSADsDeleteAsyncRelativeRetryInvalidHeaderPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROSADsDeleteAsyncRelativeRetryInvalidHeaderPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROSADsDeleteAsyncRelativeRetryInvalidHeaderPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROSADsDeleteAsyncRelativeRetryInvalidHeaderResponse, error) {
	respType := LROSADsDeleteAsyncRelativeRetryInvalidHeaderResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROSADsDeleteAsyncRelativeRetryInvalidHeaderResponse contains the response from method LROSADs.DeleteAsyncRelativeRetryInvalidHeader.
type LROSADsDeleteAsyncRelativeRetryInvalidHeaderResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROSADsDeleteAsyncRelativeRetryInvalidJSONPollingPollerResponse contains the response from method LROSADs.DeleteAsyncRelativeRetryInvalidJSONPolling.
type LROSADsDeleteAsyncRelativeRetryInvalidJSONPollingPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROSADsDeleteAsyncRelativeRetryInvalidJSONPollingPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROSADsDeleteAsyncRelativeRetryInvalidJSONPollingPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROSADsDeleteAsyncRelativeRetryInvalidJSONPollingResponse, error) {
	respType := LROSADsDeleteAsyncRelativeRetryInvalidJSONPollingResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROSADsDeleteAsyncRelativeRetryInvalidJSONPollingResponse contains the response from method LROSADs.DeleteAsyncRelativeRetryInvalidJSONPolling.
type LROSADsDeleteAsyncRelativeRetryInvalidJSONPollingResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROSADsDeleteAsyncRelativeRetryNoStatusPollerResponse contains the response from method LROSADs.DeleteAsyncRelativeRetryNoStatus.
type LROSADsDeleteAsyncRelativeRetryNoStatusPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROSADsDeleteAsyncRelativeRetryNoStatusPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROSADsDeleteAsyncRelativeRetryNoStatusPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROSADsDeleteAsyncRelativeRetryNoStatusResponse, error) {
	respType := LROSADsDeleteAsyncRelativeRetryNoStatusResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROSADsDeleteAsyncRelativeRetryNoStatusResponse contains the response from method LROSADs.DeleteAsyncRelativeRetryNoStatus.
type LROSADsDeleteAsyncRelativeRetryNoStatusResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROSADsDeleteNonRetry400PollerResponse contains the response from method LROSADs.DeleteNonRetry400.
type LROSADsDeleteNonRetry400PollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROSADsDeleteNonRetry400Poller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROSADsDeleteNonRetry400PollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROSADsDeleteNonRetry400Response, error) {
	respType := LROSADsDeleteNonRetry400Response{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROSADsDeleteNonRetry400Response contains the response from method LROSADs.DeleteNonRetry400.
type LROSADsDeleteNonRetry400Response struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROSADsPost202NoLocationPollerResponse contains the response from method LROSADs.Post202NoLocation.
type LROSADsPost202NoLocationPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROSADsPost202NoLocationPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROSADsPost202NoLocationPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROSADsPost202NoLocationResponse, error) {
	respType := LROSADsPost202NoLocationResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROSADsPost202NoLocationResponse contains the response from method LROSADs.Post202NoLocation.
type LROSADsPost202NoLocationResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROSADsPost202NonRetry400PollerResponse contains the response from method LROSADs.Post202NonRetry400.
type LROSADsPost202NonRetry400PollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROSADsPost202NonRetry400Poller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROSADsPost202NonRetry400PollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROSADsPost202NonRetry400Response, error) {
	respType := LROSADsPost202NonRetry400Response{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROSADsPost202NonRetry400Response contains the response from method LROSADs.Post202NonRetry400.
type LROSADsPost202NonRetry400Response struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROSADsPost202RetryInvalidHeaderPollerResponse contains the response from method LROSADs.Post202RetryInvalidHeader.
type LROSADsPost202RetryInvalidHeaderPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROSADsPost202RetryInvalidHeaderPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROSADsPost202RetryInvalidHeaderPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROSADsPost202RetryInvalidHeaderResponse, error) {
	respType := LROSADsPost202RetryInvalidHeaderResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROSADsPost202RetryInvalidHeaderResponse contains the response from method LROSADs.Post202RetryInvalidHeader.
type LROSADsPost202RetryInvalidHeaderResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROSADsPostAsyncRelativeRetry400PollerResponse contains the response from method LROSADs.PostAsyncRelativeRetry400.
type LROSADsPostAsyncRelativeRetry400PollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROSADsPostAsyncRelativeRetry400Poller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROSADsPostAsyncRelativeRetry400PollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROSADsPostAsyncRelativeRetry400Response, error) {
	respType := LROSADsPostAsyncRelativeRetry400Response{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROSADsPostAsyncRelativeRetry400Response contains the response from method LROSADs.PostAsyncRelativeRetry400.
type LROSADsPostAsyncRelativeRetry400Response struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROSADsPostAsyncRelativeRetryInvalidHeaderPollerResponse contains the response from method LROSADs.PostAsyncRelativeRetryInvalidHeader.
type LROSADsPostAsyncRelativeRetryInvalidHeaderPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROSADsPostAsyncRelativeRetryInvalidHeaderPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROSADsPostAsyncRelativeRetryInvalidHeaderPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROSADsPostAsyncRelativeRetryInvalidHeaderResponse, error) {
	respType := LROSADsPostAsyncRelativeRetryInvalidHeaderResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROSADsPostAsyncRelativeRetryInvalidHeaderResponse contains the response from method LROSADs.PostAsyncRelativeRetryInvalidHeader.
type LROSADsPostAsyncRelativeRetryInvalidHeaderResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROSADsPostAsyncRelativeRetryInvalidJSONPollingPollerResponse contains the response from method LROSADs.PostAsyncRelativeRetryInvalidJSONPolling.
type LROSADsPostAsyncRelativeRetryInvalidJSONPollingPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROSADsPostAsyncRelativeRetryInvalidJSONPollingPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROSADsPostAsyncRelativeRetryInvalidJSONPollingPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROSADsPostAsyncRelativeRetryInvalidJSONPollingResponse, error) {
	respType := LROSADsPostAsyncRelativeRetryInvalidJSONPollingResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROSADsPostAsyncRelativeRetryInvalidJSONPollingResponse contains the response from method LROSADs.PostAsyncRelativeRetryInvalidJSONPolling.
type LROSADsPostAsyncRelativeRetryInvalidJSONPollingResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROSADsPostAsyncRelativeRetryNoPayloadPollerResponse contains the response from method LROSADs.PostAsyncRelativeRetryNoPayload.
type LROSADsPostAsyncRelativeRetryNoPayloadPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROSADsPostAsyncRelativeRetryNoPayloadPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROSADsPostAsyncRelativeRetryNoPayloadPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROSADsPostAsyncRelativeRetryNoPayloadResponse, error) {
	respType := LROSADsPostAsyncRelativeRetryNoPayloadResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROSADsPostAsyncRelativeRetryNoPayloadResponse contains the response from method LROSADs.PostAsyncRelativeRetryNoPayload.
type LROSADsPostAsyncRelativeRetryNoPayloadResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROSADsPostNonRetry400PollerResponse contains the response from method LROSADs.PostNonRetry400.
type LROSADsPostNonRetry400PollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROSADsPostNonRetry400Poller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROSADsPostNonRetry400PollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROSADsPostNonRetry400Response, error) {
	respType := LROSADsPostNonRetry400Response{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROSADsPostNonRetry400Response contains the response from method LROSADs.PostNonRetry400.
type LROSADsPostNonRetry400Response struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROSADsPut200InvalidJSONPollerResponse contains the response from method LROSADs.Put200InvalidJSON.
type LROSADsPut200InvalidJSONPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROSADsPut200InvalidJSONPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROSADsPut200InvalidJSONPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROSADsPut200InvalidJSONResponse, error) {
	respType := LROSADsPut200InvalidJSONResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROSADsPut200InvalidJSONResponse contains the response from method LROSADs.Put200InvalidJSON.
type LROSADsPut200InvalidJSONResponse struct {
	LROSADsPut200InvalidJSONResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROSADsPut200InvalidJSONResult contains the result from method LROSADs.Put200InvalidJSON.
type LROSADsPut200InvalidJSONResult struct {
	Product
}

// LROSADsPutAsyncRelativeRetry400PollerResponse contains the response from method LROSADs.PutAsyncRelativeRetry400.
type LROSADsPutAsyncRelativeRetry400PollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROSADsPutAsyncRelativeRetry400Poller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROSADsPutAsyncRelativeRetry400PollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROSADsPutAsyncRelativeRetry400Response, error) {
	respType := LROSADsPutAsyncRelativeRetry400Response{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROSADsPutAsyncRelativeRetry400Response contains the response from method LROSADs.PutAsyncRelativeRetry400.
type LROSADsPutAsyncRelativeRetry400Response struct {
	LROSADsPutAsyncRelativeRetry400Result
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROSADsPutAsyncRelativeRetry400Result contains the result from method LROSADs.PutAsyncRelativeRetry400.
type LROSADsPutAsyncRelativeRetry400Result struct {
	Product
}

// LROSADsPutAsyncRelativeRetryInvalidHeaderPollerResponse contains the response from method LROSADs.PutAsyncRelativeRetryInvalidHeader.
type LROSADsPutAsyncRelativeRetryInvalidHeaderPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROSADsPutAsyncRelativeRetryInvalidHeaderPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROSADsPutAsyncRelativeRetryInvalidHeaderPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROSADsPutAsyncRelativeRetryInvalidHeaderResponse, error) {
	respType := LROSADsPutAsyncRelativeRetryInvalidHeaderResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROSADsPutAsyncRelativeRetryInvalidHeaderResponse contains the response from method LROSADs.PutAsyncRelativeRetryInvalidHeader.
type LROSADsPutAsyncRelativeRetryInvalidHeaderResponse struct {
	LROSADsPutAsyncRelativeRetryInvalidHeaderResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROSADsPutAsyncRelativeRetryInvalidHeaderResult contains the result from method LROSADs.PutAsyncRelativeRetryInvalidHeader.
type LROSADsPutAsyncRelativeRetryInvalidHeaderResult struct {
	Product
}

// LROSADsPutAsyncRelativeRetryInvalidJSONPollingPollerResponse contains the response from method LROSADs.PutAsyncRelativeRetryInvalidJSONPolling.
type LROSADsPutAsyncRelativeRetryInvalidJSONPollingPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROSADsPutAsyncRelativeRetryInvalidJSONPollingPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROSADsPutAsyncRelativeRetryInvalidJSONPollingPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROSADsPutAsyncRelativeRetryInvalidJSONPollingResponse, error) {
	respType := LROSADsPutAsyncRelativeRetryInvalidJSONPollingResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROSADsPutAsyncRelativeRetryInvalidJSONPollingResponse contains the response from method LROSADs.PutAsyncRelativeRetryInvalidJSONPolling.
type LROSADsPutAsyncRelativeRetryInvalidJSONPollingResponse struct {
	LROSADsPutAsyncRelativeRetryInvalidJSONPollingResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROSADsPutAsyncRelativeRetryInvalidJSONPollingResult contains the result from method LROSADs.PutAsyncRelativeRetryInvalidJSONPolling.
type LROSADsPutAsyncRelativeRetryInvalidJSONPollingResult struct {
	Product
}

// LROSADsPutAsyncRelativeRetryNoStatusPayloadPollerResponse contains the response from method LROSADs.PutAsyncRelativeRetryNoStatusPayload.
type LROSADsPutAsyncRelativeRetryNoStatusPayloadPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROSADsPutAsyncRelativeRetryNoStatusPayloadPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROSADsPutAsyncRelativeRetryNoStatusPayloadPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROSADsPutAsyncRelativeRetryNoStatusPayloadResponse, error) {
	respType := LROSADsPutAsyncRelativeRetryNoStatusPayloadResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROSADsPutAsyncRelativeRetryNoStatusPayloadResponse contains the response from method LROSADs.PutAsyncRelativeRetryNoStatusPayload.
type LROSADsPutAsyncRelativeRetryNoStatusPayloadResponse struct {
	LROSADsPutAsyncRelativeRetryNoStatusPayloadResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROSADsPutAsyncRelativeRetryNoStatusPayloadResult contains the result from method LROSADs.PutAsyncRelativeRetryNoStatusPayload.
type LROSADsPutAsyncRelativeRetryNoStatusPayloadResult struct {
	Product
}

// LROSADsPutAsyncRelativeRetryNoStatusPollerResponse contains the response from method LROSADs.PutAsyncRelativeRetryNoStatus.
type LROSADsPutAsyncRelativeRetryNoStatusPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROSADsPutAsyncRelativeRetryNoStatusPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROSADsPutAsyncRelativeRetryNoStatusPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROSADsPutAsyncRelativeRetryNoStatusResponse, error) {
	respType := LROSADsPutAsyncRelativeRetryNoStatusResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROSADsPutAsyncRelativeRetryNoStatusResponse contains the response from method LROSADs.PutAsyncRelativeRetryNoStatus.
type LROSADsPutAsyncRelativeRetryNoStatusResponse struct {
	LROSADsPutAsyncRelativeRetryNoStatusResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROSADsPutAsyncRelativeRetryNoStatusResult contains the result from method LROSADs.PutAsyncRelativeRetryNoStatus.
type LROSADsPutAsyncRelativeRetryNoStatusResult struct {
	Product
}

// LROSADsPutError201NoProvisioningStatePayloadPollerResponse contains the response from method LROSADs.PutError201NoProvisioningStatePayload.
type LROSADsPutError201NoProvisioningStatePayloadPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROSADsPutError201NoProvisioningStatePayloadPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROSADsPutError201NoProvisioningStatePayloadPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROSADsPutError201NoProvisioningStatePayloadResponse, error) {
	respType := LROSADsPutError201NoProvisioningStatePayloadResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROSADsPutError201NoProvisioningStatePayloadResponse contains the response from method LROSADs.PutError201NoProvisioningStatePayload.
type LROSADsPutError201NoProvisioningStatePayloadResponse struct {
	LROSADsPutError201NoProvisioningStatePayloadResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROSADsPutError201NoProvisioningStatePayloadResult contains the result from method LROSADs.PutError201NoProvisioningStatePayload.
type LROSADsPutError201NoProvisioningStatePayloadResult struct {
	Product
}

// LROSADsPutNonRetry201Creating400InvalidJSONPollerResponse contains the response from method LROSADs.PutNonRetry201Creating400InvalidJSON.
type LROSADsPutNonRetry201Creating400InvalidJSONPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROSADsPutNonRetry201Creating400InvalidJSONPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROSADsPutNonRetry201Creating400InvalidJSONPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROSADsPutNonRetry201Creating400InvalidJSONResponse, error) {
	respType := LROSADsPutNonRetry201Creating400InvalidJSONResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROSADsPutNonRetry201Creating400InvalidJSONResponse contains the response from method LROSADs.PutNonRetry201Creating400InvalidJSON.
type LROSADsPutNonRetry201Creating400InvalidJSONResponse struct {
	LROSADsPutNonRetry201Creating400InvalidJSONResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROSADsPutNonRetry201Creating400InvalidJSONResult contains the result from method LROSADs.PutNonRetry201Creating400InvalidJSON.
type LROSADsPutNonRetry201Creating400InvalidJSONResult struct {
	Product
}

// LROSADsPutNonRetry201Creating400PollerResponse contains the response from method LROSADs.PutNonRetry201Creating400.
type LROSADsPutNonRetry201Creating400PollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROSADsPutNonRetry201Creating400Poller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROSADsPutNonRetry201Creating400PollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROSADsPutNonRetry201Creating400Response, error) {
	respType := LROSADsPutNonRetry201Creating400Response{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROSADsPutNonRetry201Creating400Response contains the response from method LROSADs.PutNonRetry201Creating400.
type LROSADsPutNonRetry201Creating400Response struct {
	LROSADsPutNonRetry201Creating400Result
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROSADsPutNonRetry201Creating400Result contains the result from method LROSADs.PutNonRetry201Creating400.
type LROSADsPutNonRetry201Creating400Result struct {
	Product
}

// LROSADsPutNonRetry400PollerResponse contains the response from method LROSADs.PutNonRetry400.
type LROSADsPutNonRetry400PollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROSADsPutNonRetry400Poller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROSADsPutNonRetry400PollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROSADsPutNonRetry400Response, error) {
	respType := LROSADsPutNonRetry400Response{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROSADsPutNonRetry400Response contains the response from method LROSADs.PutNonRetry400.
type LROSADsPutNonRetry400Response struct {
	LROSADsPutNonRetry400Result
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROSADsPutNonRetry400Result contains the result from method LROSADs.PutNonRetry400.
type LROSADsPutNonRetry400Result struct {
	Product
}

// LROsCustomHeaderPost202Retry200PollerResponse contains the response from method LROsCustomHeader.Post202Retry200.
type LROsCustomHeaderPost202Retry200PollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsCustomHeaderPost202Retry200Poller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsCustomHeaderPost202Retry200PollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsCustomHeaderPost202Retry200Response, error) {
	respType := LROsCustomHeaderPost202Retry200Response{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsCustomHeaderPost202Retry200Response contains the response from method LROsCustomHeader.Post202Retry200.
type LROsCustomHeaderPost202Retry200Response struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsCustomHeaderPostAsyncRetrySucceededPollerResponse contains the response from method LROsCustomHeader.PostAsyncRetrySucceeded.
type LROsCustomHeaderPostAsyncRetrySucceededPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsCustomHeaderPostAsyncRetrySucceededPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsCustomHeaderPostAsyncRetrySucceededPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsCustomHeaderPostAsyncRetrySucceededResponse, error) {
	respType := LROsCustomHeaderPostAsyncRetrySucceededResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsCustomHeaderPostAsyncRetrySucceededResponse contains the response from method LROsCustomHeader.PostAsyncRetrySucceeded.
type LROsCustomHeaderPostAsyncRetrySucceededResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsCustomHeaderPut201CreatingSucceeded200PollerResponse contains the response from method LROsCustomHeader.Put201CreatingSucceeded200.
type LROsCustomHeaderPut201CreatingSucceeded200PollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsCustomHeaderPut201CreatingSucceeded200Poller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsCustomHeaderPut201CreatingSucceeded200PollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsCustomHeaderPut201CreatingSucceeded200Response, error) {
	respType := LROsCustomHeaderPut201CreatingSucceeded200Response{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsCustomHeaderPut201CreatingSucceeded200Response contains the response from method LROsCustomHeader.Put201CreatingSucceeded200.
type LROsCustomHeaderPut201CreatingSucceeded200Response struct {
	LROsCustomHeaderPut201CreatingSucceeded200Result
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsCustomHeaderPut201CreatingSucceeded200Result contains the result from method LROsCustomHeader.Put201CreatingSucceeded200.
type LROsCustomHeaderPut201CreatingSucceeded200Result struct {
	Product
}

// LROsCustomHeaderPutAsyncRetrySucceededPollerResponse contains the response from method LROsCustomHeader.PutAsyncRetrySucceeded.
type LROsCustomHeaderPutAsyncRetrySucceededPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsCustomHeaderPutAsyncRetrySucceededPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsCustomHeaderPutAsyncRetrySucceededPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsCustomHeaderPutAsyncRetrySucceededResponse, error) {
	respType := LROsCustomHeaderPutAsyncRetrySucceededResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsCustomHeaderPutAsyncRetrySucceededResponse contains the response from method LROsCustomHeader.PutAsyncRetrySucceeded.
type LROsCustomHeaderPutAsyncRetrySucceededResponse struct {
	LROsCustomHeaderPutAsyncRetrySucceededResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsCustomHeaderPutAsyncRetrySucceededResult contains the result from method LROsCustomHeader.PutAsyncRetrySucceeded.
type LROsCustomHeaderPutAsyncRetrySucceededResult struct {
	Product
}

// LROsDelete202NoRetry204PollerResponse contains the response from method LROs.Delete202NoRetry204.
type LROsDelete202NoRetry204PollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsDelete202NoRetry204Poller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsDelete202NoRetry204PollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsDelete202NoRetry204Response, error) {
	respType := LROsDelete202NoRetry204Response{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsDelete202NoRetry204Response contains the response from method LROs.Delete202NoRetry204.
type LROsDelete202NoRetry204Response struct {
	LROsDelete202NoRetry204Result
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsDelete202NoRetry204Result contains the result from method LROs.Delete202NoRetry204.
type LROsDelete202NoRetry204Result struct {
	Product
}

// LROsDelete202Retry200PollerResponse contains the response from method LROs.Delete202Retry200.
type LROsDelete202Retry200PollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsDelete202Retry200Poller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsDelete202Retry200PollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsDelete202Retry200Response, error) {
	respType := LROsDelete202Retry200Response{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsDelete202Retry200Response contains the response from method LROs.Delete202Retry200.
type LROsDelete202Retry200Response struct {
	LROsDelete202Retry200Result
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsDelete202Retry200Result contains the result from method LROs.Delete202Retry200.
type LROsDelete202Retry200Result struct {
	Product
}

// LROsDelete204SucceededPollerResponse contains the response from method LROs.Delete204Succeeded.
type LROsDelete204SucceededPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsDelete204SucceededPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsDelete204SucceededPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsDelete204SucceededResponse, error) {
	respType := LROsDelete204SucceededResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsDelete204SucceededResponse contains the response from method LROs.Delete204Succeeded.
type LROsDelete204SucceededResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsDeleteAsyncNoHeaderInRetryPollerResponse contains the response from method LROs.DeleteAsyncNoHeaderInRetry.
type LROsDeleteAsyncNoHeaderInRetryPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsDeleteAsyncNoHeaderInRetryPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsDeleteAsyncNoHeaderInRetryPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsDeleteAsyncNoHeaderInRetryResponse, error) {
	respType := LROsDeleteAsyncNoHeaderInRetryResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsDeleteAsyncNoHeaderInRetryResponse contains the response from method LROs.DeleteAsyncNoHeaderInRetry.
type LROsDeleteAsyncNoHeaderInRetryResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsDeleteAsyncNoRetrySucceededPollerResponse contains the response from method LROs.DeleteAsyncNoRetrySucceeded.
type LROsDeleteAsyncNoRetrySucceededPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsDeleteAsyncNoRetrySucceededPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsDeleteAsyncNoRetrySucceededPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsDeleteAsyncNoRetrySucceededResponse, error) {
	respType := LROsDeleteAsyncNoRetrySucceededResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsDeleteAsyncNoRetrySucceededResponse contains the response from method LROs.DeleteAsyncNoRetrySucceeded.
type LROsDeleteAsyncNoRetrySucceededResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsDeleteAsyncRetryFailedPollerResponse contains the response from method LROs.DeleteAsyncRetryFailed.
type LROsDeleteAsyncRetryFailedPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsDeleteAsyncRetryFailedPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsDeleteAsyncRetryFailedPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsDeleteAsyncRetryFailedResponse, error) {
	respType := LROsDeleteAsyncRetryFailedResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsDeleteAsyncRetryFailedResponse contains the response from method LROs.DeleteAsyncRetryFailed.
type LROsDeleteAsyncRetryFailedResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsDeleteAsyncRetrySucceededPollerResponse contains the response from method LROs.DeleteAsyncRetrySucceeded.
type LROsDeleteAsyncRetrySucceededPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsDeleteAsyncRetrySucceededPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsDeleteAsyncRetrySucceededPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsDeleteAsyncRetrySucceededResponse, error) {
	respType := LROsDeleteAsyncRetrySucceededResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsDeleteAsyncRetrySucceededResponse contains the response from method LROs.DeleteAsyncRetrySucceeded.
type LROsDeleteAsyncRetrySucceededResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsDeleteAsyncRetrycanceledPollerResponse contains the response from method LROs.DeleteAsyncRetrycanceled.
type LROsDeleteAsyncRetrycanceledPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsDeleteAsyncRetrycanceledPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsDeleteAsyncRetrycanceledPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsDeleteAsyncRetrycanceledResponse, error) {
	respType := LROsDeleteAsyncRetrycanceledResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsDeleteAsyncRetrycanceledResponse contains the response from method LROs.DeleteAsyncRetrycanceled.
type LROsDeleteAsyncRetrycanceledResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsDeleteNoHeaderInRetryPollerResponse contains the response from method LROs.DeleteNoHeaderInRetry.
type LROsDeleteNoHeaderInRetryPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsDeleteNoHeaderInRetryPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsDeleteNoHeaderInRetryPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsDeleteNoHeaderInRetryResponse, error) {
	respType := LROsDeleteNoHeaderInRetryResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsDeleteNoHeaderInRetryResponse contains the response from method LROs.DeleteNoHeaderInRetry.
type LROsDeleteNoHeaderInRetryResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsDeleteProvisioning202Accepted200SucceededPollerResponse contains the response from method LROs.DeleteProvisioning202Accepted200Succeeded.
type LROsDeleteProvisioning202Accepted200SucceededPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsDeleteProvisioning202Accepted200SucceededPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsDeleteProvisioning202Accepted200SucceededPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsDeleteProvisioning202Accepted200SucceededResponse, error) {
	respType := LROsDeleteProvisioning202Accepted200SucceededResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsDeleteProvisioning202Accepted200SucceededResponse contains the response from method LROs.DeleteProvisioning202Accepted200Succeeded.
type LROsDeleteProvisioning202Accepted200SucceededResponse struct {
	LROsDeleteProvisioning202Accepted200SucceededResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsDeleteProvisioning202Accepted200SucceededResult contains the result from method LROs.DeleteProvisioning202Accepted200Succeeded.
type LROsDeleteProvisioning202Accepted200SucceededResult struct {
	Product
}

// LROsDeleteProvisioning202DeletingFailed200PollerResponse contains the response from method LROs.DeleteProvisioning202DeletingFailed200.
type LROsDeleteProvisioning202DeletingFailed200PollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsDeleteProvisioning202DeletingFailed200Poller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsDeleteProvisioning202DeletingFailed200PollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsDeleteProvisioning202DeletingFailed200Response, error) {
	respType := LROsDeleteProvisioning202DeletingFailed200Response{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsDeleteProvisioning202DeletingFailed200Response contains the response from method LROs.DeleteProvisioning202DeletingFailed200.
type LROsDeleteProvisioning202DeletingFailed200Response struct {
	LROsDeleteProvisioning202DeletingFailed200Result
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsDeleteProvisioning202DeletingFailed200Result contains the result from method LROs.DeleteProvisioning202DeletingFailed200.
type LROsDeleteProvisioning202DeletingFailed200Result struct {
	Product
}

// LROsDeleteProvisioning202Deletingcanceled200PollerResponse contains the response from method LROs.DeleteProvisioning202Deletingcanceled200.
type LROsDeleteProvisioning202Deletingcanceled200PollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsDeleteProvisioning202Deletingcanceled200Poller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsDeleteProvisioning202Deletingcanceled200PollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsDeleteProvisioning202Deletingcanceled200Response, error) {
	respType := LROsDeleteProvisioning202Deletingcanceled200Response{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsDeleteProvisioning202Deletingcanceled200Response contains the response from method LROs.DeleteProvisioning202Deletingcanceled200.
type LROsDeleteProvisioning202Deletingcanceled200Response struct {
	LROsDeleteProvisioning202Deletingcanceled200Result
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsDeleteProvisioning202Deletingcanceled200Result contains the result from method LROs.DeleteProvisioning202Deletingcanceled200.
type LROsDeleteProvisioning202Deletingcanceled200Result struct {
	Product
}

// LROsPost200WithPayloadPollerResponse contains the response from method LROs.Post200WithPayload.
type LROsPost200WithPayloadPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPost200WithPayloadPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPost200WithPayloadPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPost200WithPayloadResponse, error) {
	respType := LROsPost200WithPayloadResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.SKU)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPost200WithPayloadResponse contains the response from method LROs.Post200WithPayload.
type LROsPost200WithPayloadResponse struct {
	LROsPost200WithPayloadResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPost200WithPayloadResult contains the result from method LROs.Post200WithPayload.
type LROsPost200WithPayloadResult struct {
	SKU
}

// LROsPost202ListPollerResponse contains the response from method LROs.Post202List.
type LROsPost202ListPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPost202ListPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPost202ListPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPost202ListResponse, error) {
	respType := LROsPost202ListResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ProductArray)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPost202ListResponse contains the response from method LROs.Post202List.
type LROsPost202ListResponse struct {
	LROsPost202ListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPost202ListResult contains the result from method LROs.Post202List.
type LROsPost202ListResult struct {
	// Array of Product
	ProductArray []*Product
}

// LROsPost202NoRetry204PollerResponse contains the response from method LROs.Post202NoRetry204.
type LROsPost202NoRetry204PollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPost202NoRetry204Poller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPost202NoRetry204PollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPost202NoRetry204Response, error) {
	respType := LROsPost202NoRetry204Response{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPost202NoRetry204Response contains the response from method LROs.Post202NoRetry204.
type LROsPost202NoRetry204Response struct {
	LROsPost202NoRetry204Result
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPost202NoRetry204Result contains the result from method LROs.Post202NoRetry204.
type LROsPost202NoRetry204Result struct {
	Product
}

// LROsPost202Retry200PollerResponse contains the response from method LROs.Post202Retry200.
type LROsPost202Retry200PollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPost202Retry200Poller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPost202Retry200PollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPost202Retry200Response, error) {
	respType := LROsPost202Retry200Response{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPost202Retry200Response contains the response from method LROs.Post202Retry200.
type LROsPost202Retry200Response struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPostAsyncNoRetrySucceededPollerResponse contains the response from method LROs.PostAsyncNoRetrySucceeded.
type LROsPostAsyncNoRetrySucceededPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPostAsyncNoRetrySucceededPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPostAsyncNoRetrySucceededPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPostAsyncNoRetrySucceededResponse, error) {
	respType := LROsPostAsyncNoRetrySucceededResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPostAsyncNoRetrySucceededResponse contains the response from method LROs.PostAsyncNoRetrySucceeded.
type LROsPostAsyncNoRetrySucceededResponse struct {
	LROsPostAsyncNoRetrySucceededResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPostAsyncNoRetrySucceededResult contains the result from method LROs.PostAsyncNoRetrySucceeded.
type LROsPostAsyncNoRetrySucceededResult struct {
	Product
}

// LROsPostAsyncRetryFailedPollerResponse contains the response from method LROs.PostAsyncRetryFailed.
type LROsPostAsyncRetryFailedPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPostAsyncRetryFailedPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPostAsyncRetryFailedPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPostAsyncRetryFailedResponse, error) {
	respType := LROsPostAsyncRetryFailedResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPostAsyncRetryFailedResponse contains the response from method LROs.PostAsyncRetryFailed.
type LROsPostAsyncRetryFailedResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPostAsyncRetrySucceededPollerResponse contains the response from method LROs.PostAsyncRetrySucceeded.
type LROsPostAsyncRetrySucceededPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPostAsyncRetrySucceededPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPostAsyncRetrySucceededPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPostAsyncRetrySucceededResponse, error) {
	respType := LROsPostAsyncRetrySucceededResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPostAsyncRetrySucceededResponse contains the response from method LROs.PostAsyncRetrySucceeded.
type LROsPostAsyncRetrySucceededResponse struct {
	LROsPostAsyncRetrySucceededResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPostAsyncRetrySucceededResult contains the result from method LROs.PostAsyncRetrySucceeded.
type LROsPostAsyncRetrySucceededResult struct {
	Product
}

// LROsPostAsyncRetrycanceledPollerResponse contains the response from method LROs.PostAsyncRetrycanceled.
type LROsPostAsyncRetrycanceledPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPostAsyncRetrycanceledPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPostAsyncRetrycanceledPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPostAsyncRetrycanceledResponse, error) {
	respType := LROsPostAsyncRetrycanceledResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPostAsyncRetrycanceledResponse contains the response from method LROs.PostAsyncRetrycanceled.
type LROsPostAsyncRetrycanceledResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPostDoubleHeadersFinalAzureHeaderGetDefaultPollerResponse contains the response from method LROs.PostDoubleHeadersFinalAzureHeaderGetDefault.
type LROsPostDoubleHeadersFinalAzureHeaderGetDefaultPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPostDoubleHeadersFinalAzureHeaderGetDefaultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPostDoubleHeadersFinalAzureHeaderGetDefaultPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPostDoubleHeadersFinalAzureHeaderGetDefaultResponse, error) {
	respType := LROsPostDoubleHeadersFinalAzureHeaderGetDefaultResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPostDoubleHeadersFinalAzureHeaderGetDefaultResponse contains the response from method LROs.PostDoubleHeadersFinalAzureHeaderGetDefault.
type LROsPostDoubleHeadersFinalAzureHeaderGetDefaultResponse struct {
	LROsPostDoubleHeadersFinalAzureHeaderGetDefaultResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPostDoubleHeadersFinalAzureHeaderGetDefaultResult contains the result from method LROs.PostDoubleHeadersFinalAzureHeaderGetDefault.
type LROsPostDoubleHeadersFinalAzureHeaderGetDefaultResult struct {
	Product
}

// LROsPostDoubleHeadersFinalAzureHeaderGetPollerResponse contains the response from method LROs.PostDoubleHeadersFinalAzureHeaderGet.
type LROsPostDoubleHeadersFinalAzureHeaderGetPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPostDoubleHeadersFinalAzureHeaderGetPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPostDoubleHeadersFinalAzureHeaderGetPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPostDoubleHeadersFinalAzureHeaderGetResponse, error) {
	respType := LROsPostDoubleHeadersFinalAzureHeaderGetResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPostDoubleHeadersFinalAzureHeaderGetResponse contains the response from method LROs.PostDoubleHeadersFinalAzureHeaderGet.
type LROsPostDoubleHeadersFinalAzureHeaderGetResponse struct {
	LROsPostDoubleHeadersFinalAzureHeaderGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPostDoubleHeadersFinalAzureHeaderGetResult contains the result from method LROs.PostDoubleHeadersFinalAzureHeaderGet.
type LROsPostDoubleHeadersFinalAzureHeaderGetResult struct {
	Product
}

// LROsPostDoubleHeadersFinalLocationGetPollerResponse contains the response from method LROs.PostDoubleHeadersFinalLocationGet.
type LROsPostDoubleHeadersFinalLocationGetPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPostDoubleHeadersFinalLocationGetPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPostDoubleHeadersFinalLocationGetPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPostDoubleHeadersFinalLocationGetResponse, error) {
	respType := LROsPostDoubleHeadersFinalLocationGetResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPostDoubleHeadersFinalLocationGetResponse contains the response from method LROs.PostDoubleHeadersFinalLocationGet.
type LROsPostDoubleHeadersFinalLocationGetResponse struct {
	LROsPostDoubleHeadersFinalLocationGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPostDoubleHeadersFinalLocationGetResult contains the result from method LROs.PostDoubleHeadersFinalLocationGet.
type LROsPostDoubleHeadersFinalLocationGetResult struct {
	Product
}

// LROsPut200Acceptedcanceled200PollerResponse contains the response from method LROs.Put200Acceptedcanceled200.
type LROsPut200Acceptedcanceled200PollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPut200Acceptedcanceled200Poller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPut200Acceptedcanceled200PollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPut200Acceptedcanceled200Response, error) {
	respType := LROsPut200Acceptedcanceled200Response{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPut200Acceptedcanceled200Response contains the response from method LROs.Put200Acceptedcanceled200.
type LROsPut200Acceptedcanceled200Response struct {
	LROsPut200Acceptedcanceled200Result
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPut200Acceptedcanceled200Result contains the result from method LROs.Put200Acceptedcanceled200.
type LROsPut200Acceptedcanceled200Result struct {
	Product
}

// LROsPut200SucceededNoStatePollerResponse contains the response from method LROs.Put200SucceededNoState.
type LROsPut200SucceededNoStatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPut200SucceededNoStatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPut200SucceededNoStatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPut200SucceededNoStateResponse, error) {
	respType := LROsPut200SucceededNoStateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPut200SucceededNoStateResponse contains the response from method LROs.Put200SucceededNoState.
type LROsPut200SucceededNoStateResponse struct {
	LROsPut200SucceededNoStateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPut200SucceededNoStateResult contains the result from method LROs.Put200SucceededNoState.
type LROsPut200SucceededNoStateResult struct {
	Product
}

// LROsPut200SucceededPollerResponse contains the response from method LROs.Put200Succeeded.
type LROsPut200SucceededPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPut200SucceededPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPut200SucceededPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPut200SucceededResponse, error) {
	respType := LROsPut200SucceededResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPut200SucceededResponse contains the response from method LROs.Put200Succeeded.
type LROsPut200SucceededResponse struct {
	LROsPut200SucceededResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPut200SucceededResult contains the result from method LROs.Put200Succeeded.
type LROsPut200SucceededResult struct {
	Product
}

// LROsPut200UpdatingSucceeded204PollerResponse contains the response from method LROs.Put200UpdatingSucceeded204.
type LROsPut200UpdatingSucceeded204PollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPut200UpdatingSucceeded204Poller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPut200UpdatingSucceeded204PollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPut200UpdatingSucceeded204Response, error) {
	respType := LROsPut200UpdatingSucceeded204Response{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPut200UpdatingSucceeded204Response contains the response from method LROs.Put200UpdatingSucceeded204.
type LROsPut200UpdatingSucceeded204Response struct {
	LROsPut200UpdatingSucceeded204Result
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPut200UpdatingSucceeded204Result contains the result from method LROs.Put200UpdatingSucceeded204.
type LROsPut200UpdatingSucceeded204Result struct {
	Product
}

// LROsPut201CreatingFailed200PollerResponse contains the response from method LROs.Put201CreatingFailed200.
type LROsPut201CreatingFailed200PollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPut201CreatingFailed200Poller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPut201CreatingFailed200PollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPut201CreatingFailed200Response, error) {
	respType := LROsPut201CreatingFailed200Response{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPut201CreatingFailed200Response contains the response from method LROs.Put201CreatingFailed200.
type LROsPut201CreatingFailed200Response struct {
	LROsPut201CreatingFailed200Result
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPut201CreatingFailed200Result contains the result from method LROs.Put201CreatingFailed200.
type LROsPut201CreatingFailed200Result struct {
	Product
}

// LROsPut201CreatingSucceeded200PollerResponse contains the response from method LROs.Put201CreatingSucceeded200.
type LROsPut201CreatingSucceeded200PollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPut201CreatingSucceeded200Poller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPut201CreatingSucceeded200PollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPut201CreatingSucceeded200Response, error) {
	respType := LROsPut201CreatingSucceeded200Response{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPut201CreatingSucceeded200Response contains the response from method LROs.Put201CreatingSucceeded200.
type LROsPut201CreatingSucceeded200Response struct {
	LROsPut201CreatingSucceeded200Result
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPut201CreatingSucceeded200Result contains the result from method LROs.Put201CreatingSucceeded200.
type LROsPut201CreatingSucceeded200Result struct {
	Product
}

// LROsPut201SucceededPollerResponse contains the response from method LROs.Put201Succeeded.
type LROsPut201SucceededPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPut201SucceededPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPut201SucceededPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPut201SucceededResponse, error) {
	respType := LROsPut201SucceededResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPut201SucceededResponse contains the response from method LROs.Put201Succeeded.
type LROsPut201SucceededResponse struct {
	LROsPut201SucceededResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPut201SucceededResult contains the result from method LROs.Put201Succeeded.
type LROsPut201SucceededResult struct {
	Product
}

// LROsPut202Retry200PollerResponse contains the response from method LROs.Put202Retry200.
type LROsPut202Retry200PollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPut202Retry200Poller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPut202Retry200PollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPut202Retry200Response, error) {
	respType := LROsPut202Retry200Response{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPut202Retry200Response contains the response from method LROs.Put202Retry200.
type LROsPut202Retry200Response struct {
	LROsPut202Retry200Result
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPut202Retry200Result contains the result from method LROs.Put202Retry200.
type LROsPut202Retry200Result struct {
	Product
}

// LROsPutAsyncNoHeaderInRetryPollerResponse contains the response from method LROs.PutAsyncNoHeaderInRetry.
type LROsPutAsyncNoHeaderInRetryPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPutAsyncNoHeaderInRetryPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPutAsyncNoHeaderInRetryPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPutAsyncNoHeaderInRetryResponse, error) {
	respType := LROsPutAsyncNoHeaderInRetryResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPutAsyncNoHeaderInRetryResponse contains the response from method LROs.PutAsyncNoHeaderInRetry.
type LROsPutAsyncNoHeaderInRetryResponse struct {
	LROsPutAsyncNoHeaderInRetryResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPutAsyncNoHeaderInRetryResult contains the result from method LROs.PutAsyncNoHeaderInRetry.
type LROsPutAsyncNoHeaderInRetryResult struct {
	Product
}

// LROsPutAsyncNoRetrySucceededPollerResponse contains the response from method LROs.PutAsyncNoRetrySucceeded.
type LROsPutAsyncNoRetrySucceededPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPutAsyncNoRetrySucceededPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPutAsyncNoRetrySucceededPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPutAsyncNoRetrySucceededResponse, error) {
	respType := LROsPutAsyncNoRetrySucceededResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPutAsyncNoRetrySucceededResponse contains the response from method LROs.PutAsyncNoRetrySucceeded.
type LROsPutAsyncNoRetrySucceededResponse struct {
	LROsPutAsyncNoRetrySucceededResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPutAsyncNoRetrySucceededResult contains the result from method LROs.PutAsyncNoRetrySucceeded.
type LROsPutAsyncNoRetrySucceededResult struct {
	Product
}

// LROsPutAsyncNoRetrycanceledPollerResponse contains the response from method LROs.PutAsyncNoRetrycanceled.
type LROsPutAsyncNoRetrycanceledPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPutAsyncNoRetrycanceledPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPutAsyncNoRetrycanceledPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPutAsyncNoRetrycanceledResponse, error) {
	respType := LROsPutAsyncNoRetrycanceledResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPutAsyncNoRetrycanceledResponse contains the response from method LROs.PutAsyncNoRetrycanceled.
type LROsPutAsyncNoRetrycanceledResponse struct {
	LROsPutAsyncNoRetrycanceledResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPutAsyncNoRetrycanceledResult contains the result from method LROs.PutAsyncNoRetrycanceled.
type LROsPutAsyncNoRetrycanceledResult struct {
	Product
}

// LROsPutAsyncNonResourcePollerResponse contains the response from method LROs.PutAsyncNonResource.
type LROsPutAsyncNonResourcePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPutAsyncNonResourcePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPutAsyncNonResourcePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPutAsyncNonResourceResponse, error) {
	respType := LROsPutAsyncNonResourceResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.SKU)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPutAsyncNonResourceResponse contains the response from method LROs.PutAsyncNonResource.
type LROsPutAsyncNonResourceResponse struct {
	LROsPutAsyncNonResourceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPutAsyncNonResourceResult contains the result from method LROs.PutAsyncNonResource.
type LROsPutAsyncNonResourceResult struct {
	SKU
}

// LROsPutAsyncRetryFailedPollerResponse contains the response from method LROs.PutAsyncRetryFailed.
type LROsPutAsyncRetryFailedPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPutAsyncRetryFailedPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPutAsyncRetryFailedPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPutAsyncRetryFailedResponse, error) {
	respType := LROsPutAsyncRetryFailedResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPutAsyncRetryFailedResponse contains the response from method LROs.PutAsyncRetryFailed.
type LROsPutAsyncRetryFailedResponse struct {
	LROsPutAsyncRetryFailedResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPutAsyncRetryFailedResult contains the result from method LROs.PutAsyncRetryFailed.
type LROsPutAsyncRetryFailedResult struct {
	Product
}

// LROsPutAsyncRetrySucceededPollerResponse contains the response from method LROs.PutAsyncRetrySucceeded.
type LROsPutAsyncRetrySucceededPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPutAsyncRetrySucceededPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPutAsyncRetrySucceededPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPutAsyncRetrySucceededResponse, error) {
	respType := LROsPutAsyncRetrySucceededResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPutAsyncRetrySucceededResponse contains the response from method LROs.PutAsyncRetrySucceeded.
type LROsPutAsyncRetrySucceededResponse struct {
	LROsPutAsyncRetrySucceededResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPutAsyncRetrySucceededResult contains the result from method LROs.PutAsyncRetrySucceeded.
type LROsPutAsyncRetrySucceededResult struct {
	Product
}

// LROsPutAsyncSubResourcePollerResponse contains the response from method LROs.PutAsyncSubResource.
type LROsPutAsyncSubResourcePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPutAsyncSubResourcePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPutAsyncSubResourcePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPutAsyncSubResourceResponse, error) {
	respType := LROsPutAsyncSubResourceResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.SubProduct)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPutAsyncSubResourceResponse contains the response from method LROs.PutAsyncSubResource.
type LROsPutAsyncSubResourceResponse struct {
	LROsPutAsyncSubResourceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPutAsyncSubResourceResult contains the result from method LROs.PutAsyncSubResource.
type LROsPutAsyncSubResourceResult struct {
	SubProduct
}

// LROsPutNoHeaderInRetryPollerResponse contains the response from method LROs.PutNoHeaderInRetry.
type LROsPutNoHeaderInRetryPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPutNoHeaderInRetryPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPutNoHeaderInRetryPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPutNoHeaderInRetryResponse, error) {
	respType := LROsPutNoHeaderInRetryResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Product)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPutNoHeaderInRetryResponse contains the response from method LROs.PutNoHeaderInRetry.
type LROsPutNoHeaderInRetryResponse struct {
	LROsPutNoHeaderInRetryResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPutNoHeaderInRetryResult contains the result from method LROs.PutNoHeaderInRetry.
type LROsPutNoHeaderInRetryResult struct {
	Product
}

// LROsPutNonResourcePollerResponse contains the response from method LROs.PutNonResource.
type LROsPutNonResourcePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPutNonResourcePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPutNonResourcePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPutNonResourceResponse, error) {
	respType := LROsPutNonResourceResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.SKU)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPutNonResourceResponse contains the response from method LROs.PutNonResource.
type LROsPutNonResourceResponse struct {
	LROsPutNonResourceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPutNonResourceResult contains the result from method LROs.PutNonResource.
type LROsPutNonResourceResult struct {
	SKU
}

// LROsPutSubResourcePollerResponse contains the response from method LROs.PutSubResource.
type LROsPutSubResourcePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LROsPutSubResourcePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LROsPutSubResourcePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LROsPutSubResourceResponse, error) {
	respType := LROsPutSubResourceResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.SubProduct)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LROsPutSubResourceResponse contains the response from method LROs.PutSubResource.
type LROsPutSubResourceResponse struct {
	LROsPutSubResourceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LROsPutSubResourceResult contains the result from method LROs.PutSubResource.
type LROsPutSubResourceResult struct {
	SubProduct
}
