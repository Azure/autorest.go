// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package extenumsgroup

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// PetClient contains the methods for the Pet group.
// Don't use this type directly, use NewPetClient() instead.
type PetClient struct {
	con *Connection
}

// NewPetClient creates a new instance of PetClient with the specified values.
func NewPetClient(con *Connection) PetClient {
	return PetClient{con: con}
}

// Pipeline returns the pipeline associated with this client.
func (client PetClient) Pipeline() azcore.Pipeline {
	return client.con.Pipeline()
}

// AddPet - add pet
func (client PetClient) AddPet(ctx context.Context, options *PetAddPetOptions) (*PetResponse, error) {
	req, err := client.addPetCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.addPetHandleError(resp)
	}
	result, err := client.addPetHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// addPetCreateRequest creates the AddPet request.
func (client PetClient) addPetCreateRequest(ctx context.Context, options *PetAddPetOptions) (*azcore.Request, error) {
	urlPath := "/extensibleenums/pet/addPet"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.PetParam)
	}
	return req, nil
}

// addPetHandleResponse handles the AddPet response.
func (client PetClient) addPetHandleResponse(resp *azcore.Response) (*PetResponse, error) {
	result := PetResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Pet)
}

// addPetHandleError handles the AddPet error response.
func (client PetClient) addPetHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// GetByPetID - get pet by id
func (client PetClient) GetByPetID(ctx context.Context, petId string, options *PetGetByPetIDOptions) (*PetResponse, error) {
	req, err := client.getByPetIdCreateRequest(ctx, petId, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getByPetIdHandleError(resp)
	}
	result, err := client.getByPetIdHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getByPetIdCreateRequest creates the GetByPetID request.
func (client PetClient) getByPetIdCreateRequest(ctx context.Context, petId string, options *PetGetByPetIDOptions) (*azcore.Request, error) {
	urlPath := "/extensibleenums/pet/{petId}"
	urlPath = strings.ReplaceAll(urlPath, "{petId}", url.PathEscape(petId))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getByPetIdHandleResponse handles the GetByPetID response.
func (client PetClient) getByPetIdHandleResponse(resp *azcore.Response) (*PetResponse, error) {
	result := PetResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Pet)
}

// getByPetIdHandleError handles the GetByPetID error response.
func (client PetClient) getByPetIdHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}
