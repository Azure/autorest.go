// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azurereportgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// AutoRestReportServiceForAzureOperations contains the methods for the AutoRestReportServiceForAzure group.
type AutoRestReportServiceForAzureOperations interface {
	// GetReport - Get test coverage report
	GetReport(ctx context.Context, autoRestReportServiceForAzureGetReportOptions *AutoRestReportServiceForAzureGetReportOptions) (*MapOfInt32Response, error)
}

// AutoRestReportServiceForAzureClient implements the AutoRestReportServiceForAzureOperations interface.
// Don't use this type directly, use NewAutoRestReportServiceForAzureClient() instead.
type AutoRestReportServiceForAzureClient struct {
	*Client
}

// NewAutoRestReportServiceForAzureClient creates a new instance of AutoRestReportServiceForAzureClient with the specified values.
func NewAutoRestReportServiceForAzureClient(c *Client) AutoRestReportServiceForAzureOperations {
	return &AutoRestReportServiceForAzureClient{Client: c}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *AutoRestReportServiceForAzureClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// GetReport - Get test coverage report
func (client *AutoRestReportServiceForAzureClient) GetReport(ctx context.Context, autoRestReportServiceForAzureGetReportOptions *AutoRestReportServiceForAzureGetReportOptions) (*MapOfInt32Response, error) {
	req, err := client.GetReportCreateRequest(ctx, autoRestReportServiceForAzureGetReportOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetReportHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetReportCreateRequest creates the GetReport request.
func (client *AutoRestReportServiceForAzureClient) GetReportCreateRequest(ctx context.Context, autoRestReportServiceForAzureGetReportOptions *AutoRestReportServiceForAzureGetReportOptions) (*azcore.Request, error) {
	urlPath := "/report/azure"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	if autoRestReportServiceForAzureGetReportOptions != nil && autoRestReportServiceForAzureGetReportOptions.Qualifier != nil {
		query.Set("qualifier", *autoRestReportServiceForAzureGetReportOptions.Qualifier)
	}
	req.URL.RawQuery = query.Encode()
	return req, nil
}

// GetReportHandleResponse handles the GetReport response.
func (client *AutoRestReportServiceForAzureClient) GetReportHandleResponse(resp *azcore.Response) (*MapOfInt32Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetReportHandleError(resp)
	}
	result := MapOfInt32Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetReportHandleError handles the GetReport error response.
func (client *AutoRestReportServiceForAzureClient) GetReportHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
