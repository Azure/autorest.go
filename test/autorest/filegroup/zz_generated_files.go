// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package filegroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// FilesOperations contains the methods for the Files group.
type FilesOperations interface {
	// GetEmptyFile - Get empty file
	GetEmptyFile(ctx context.Context) (*http.Response, error)
	// GetFile - Get file
	GetFile(ctx context.Context) (*http.Response, error)
	// GetFileLarge - Get a large file
	GetFileLarge(ctx context.Context) (*http.Response, error)
}

// FilesClient implements the FilesOperations interface.
// Don't use this type directly, use NewFilesClient() instead.
type FilesClient struct {
	*Client
}

// NewFilesClient creates a new instance of FilesClient with the specified values.
func NewFilesClient(c *Client) FilesOperations {
	return &FilesClient{Client: c}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *FilesClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// GetEmptyFile - Get empty file
func (client *FilesClient) GetEmptyFile(ctx context.Context) (*http.Response, error) {
	req, err := client.GetEmptyFileCreateRequest(ctx)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetEmptyFileHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetEmptyFileCreateRequest creates the GetEmptyFile request.
func (client *FilesClient) GetEmptyFileCreateRequest(ctx context.Context) (*azcore.Request, error) {
	urlPath := "/files/stream/empty"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.SkipBodyDownload()
	req.Header.Set("Accept", "image/png, application/json")
	return req, nil
}

// GetEmptyFileHandleResponse handles the GetEmptyFile response.
func (client *FilesClient) GetEmptyFileHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetEmptyFileHandleError(resp)
	}
	return resp.Response, nil
}

// GetEmptyFileHandleError handles the GetEmptyFile error response.
func (client *FilesClient) GetEmptyFileHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetFile - Get file
func (client *FilesClient) GetFile(ctx context.Context) (*http.Response, error) {
	req, err := client.GetFileCreateRequest(ctx)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetFileHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetFileCreateRequest creates the GetFile request.
func (client *FilesClient) GetFileCreateRequest(ctx context.Context) (*azcore.Request, error) {
	urlPath := "/files/stream/nonempty"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.SkipBodyDownload()
	req.Header.Set("Accept", "image/png, application/json")
	return req, nil
}

// GetFileHandleResponse handles the GetFile response.
func (client *FilesClient) GetFileHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetFileHandleError(resp)
	}
	return resp.Response, nil
}

// GetFileHandleError handles the GetFile error response.
func (client *FilesClient) GetFileHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetFileLarge - Get a large file
func (client *FilesClient) GetFileLarge(ctx context.Context) (*http.Response, error) {
	req, err := client.GetFileLargeCreateRequest(ctx)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetFileLargeHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetFileLargeCreateRequest creates the GetFileLarge request.
func (client *FilesClient) GetFileLargeCreateRequest(ctx context.Context) (*azcore.Request, error) {
	urlPath := "/files/stream/verylarge"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.SkipBodyDownload()
	req.Header.Set("Accept", "image/png, application/json")
	return req, nil
}

// GetFileLargeHandleResponse handles the GetFileLarge response.
func (client *FilesClient) GetFileLargeHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetFileLargeHandleError(resp)
	}
	return resp.Response, nil
}

// GetFileLargeHandleError handles the GetFileLarge error response.
func (client *FilesClient) GetFileLargeHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
