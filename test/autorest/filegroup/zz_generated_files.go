// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package filegroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// FilesClient contains the methods for the Files group.
// Don't use this type directly, use NewFilesClient() instead.
type FilesClient struct {
	con *Connection
}

// NewFilesClient creates a new instance of FilesClient with the specified values.
func NewFilesClient(con *Connection) FilesClient {
	return FilesClient{con: con}
}

// Pipeline returns the pipeline associated with this client.
func (client FilesClient) Pipeline() azcore.Pipeline {
	return client.con.Pipeline()
}

// GetEmptyFile - Get empty file
func (client FilesClient) GetEmptyFile(ctx context.Context, options *FilesGetEmptyFileOptions) (*http.Response, error) {
	req, err := client.getEmptyFileCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getEmptyFileHandleError(resp)
	}
	return resp.Response, nil
}

// getEmptyFileCreateRequest creates the GetEmptyFile request.
func (client FilesClient) getEmptyFileCreateRequest(ctx context.Context, options *FilesGetEmptyFileOptions) (*azcore.Request, error) {
	urlPath := "/files/stream/empty"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.SkipBodyDownload()
	req.Header.Set("Accept", "image/png, application/json")
	return req, nil
}

// getEmptyFileHandleError handles the GetEmptyFile error response.
func (client FilesClient) getEmptyFileHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetFile - Get file
func (client FilesClient) GetFile(ctx context.Context, options *FilesGetFileOptions) (*http.Response, error) {
	req, err := client.getFileCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getFileHandleError(resp)
	}
	return resp.Response, nil
}

// getFileCreateRequest creates the GetFile request.
func (client FilesClient) getFileCreateRequest(ctx context.Context, options *FilesGetFileOptions) (*azcore.Request, error) {
	urlPath := "/files/stream/nonempty"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.SkipBodyDownload()
	req.Header.Set("Accept", "image/png, application/json")
	return req, nil
}

// getFileHandleError handles the GetFile error response.
func (client FilesClient) getFileHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetFileLarge - Get a large file
func (client FilesClient) GetFileLarge(ctx context.Context, options *FilesGetFileLargeOptions) (*http.Response, error) {
	req, err := client.getFileLargeCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getFileLargeHandleError(resp)
	}
	return resp.Response, nil
}

// getFileLargeCreateRequest creates the GetFileLarge request.
func (client FilesClient) getFileLargeCreateRequest(ctx context.Context, options *FilesGetFileLargeOptions) (*azcore.Request, error) {
	urlPath := "/files/stream/verylarge"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.SkipBodyDownload()
	req.Header.Set("Accept", "image/png, application/json")
	return req, nil
}

// getFileLargeHandleError handles the GetFileLarge error response.
func (client FilesClient) getFileLargeHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}
