// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package durationgroup

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// DurationClient contains the methods for the Duration group.
// Don't use this type directly, use NewDurationClient() instead.
type DurationClient struct {
	con *Connection
}

// NewDurationClient creates a new instance of DurationClient with the specified values.
func NewDurationClient(con *Connection) *DurationClient {
	return &DurationClient{con: con}
}

// GetInvalid - Get an invalid duration value
// If the operation fails it returns the *Error error type.
func (client *DurationClient) GetInvalid(ctx context.Context, options *DurationGetInvalidOptions) (DurationGetInvalidResponse, error) {
	req, err := client.getInvalidCreateRequest(ctx, options)
	if err != nil {
		return DurationGetInvalidResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return DurationGetInvalidResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return DurationGetInvalidResponse{}, client.getInvalidHandleError(resp)
	}
	return client.getInvalidHandleResponse(resp)
}

// getInvalidCreateRequest creates the GetInvalid request.
func (client *DurationClient) getInvalidCreateRequest(ctx context.Context, options *DurationGetInvalidOptions) (*azcore.Request, error) {
	urlPath := "/duration/invalid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getInvalidHandleResponse handles the GetInvalid response.
func (client *DurationClient) getInvalidHandleResponse(resp *azcore.Response) (DurationGetInvalidResponse, error) {
	result := DurationGetInvalidResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.Value); err != nil {
		return DurationGetInvalidResponse{}, err
	}
	return result, nil
}

// getInvalidHandleError handles the GetInvalid error response.
func (client *DurationClient) getInvalidHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// GetNull - Get null duration value
// If the operation fails it returns the *Error error type.
func (client *DurationClient) GetNull(ctx context.Context, options *DurationGetNullOptions) (DurationGetNullResponse, error) {
	req, err := client.getNullCreateRequest(ctx, options)
	if err != nil {
		return DurationGetNullResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return DurationGetNullResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return DurationGetNullResponse{}, client.getNullHandleError(resp)
	}
	return client.getNullHandleResponse(resp)
}

// getNullCreateRequest creates the GetNull request.
func (client *DurationClient) getNullCreateRequest(ctx context.Context, options *DurationGetNullOptions) (*azcore.Request, error) {
	urlPath := "/duration/null"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getNullHandleResponse handles the GetNull response.
func (client *DurationClient) getNullHandleResponse(resp *azcore.Response) (DurationGetNullResponse, error) {
	result := DurationGetNullResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.Value); err != nil {
		return DurationGetNullResponse{}, err
	}
	return result, nil
}

// getNullHandleError handles the GetNull error response.
func (client *DurationClient) getNullHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// GetPositiveDuration - Get a positive duration value
// If the operation fails it returns the *Error error type.
func (client *DurationClient) GetPositiveDuration(ctx context.Context, options *DurationGetPositiveDurationOptions) (DurationGetPositiveDurationResponse, error) {
	req, err := client.getPositiveDurationCreateRequest(ctx, options)
	if err != nil {
		return DurationGetPositiveDurationResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return DurationGetPositiveDurationResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return DurationGetPositiveDurationResponse{}, client.getPositiveDurationHandleError(resp)
	}
	return client.getPositiveDurationHandleResponse(resp)
}

// getPositiveDurationCreateRequest creates the GetPositiveDuration request.
func (client *DurationClient) getPositiveDurationCreateRequest(ctx context.Context, options *DurationGetPositiveDurationOptions) (*azcore.Request, error) {
	urlPath := "/duration/positiveduration"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getPositiveDurationHandleResponse handles the GetPositiveDuration response.
func (client *DurationClient) getPositiveDurationHandleResponse(resp *azcore.Response) (DurationGetPositiveDurationResponse, error) {
	result := DurationGetPositiveDurationResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.Value); err != nil {
		return DurationGetPositiveDurationResponse{}, err
	}
	return result, nil
}

// getPositiveDurationHandleError handles the GetPositiveDuration error response.
func (client *DurationClient) getPositiveDurationHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// PutPositiveDuration - Put a positive duration value
// If the operation fails it returns the *Error error type.
func (client *DurationClient) PutPositiveDuration(ctx context.Context, durationBody string, options *DurationPutPositiveDurationOptions) (DurationPutPositiveDurationResponse, error) {
	req, err := client.putPositiveDurationCreateRequest(ctx, durationBody, options)
	if err != nil {
		return DurationPutPositiveDurationResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return DurationPutPositiveDurationResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return DurationPutPositiveDurationResponse{}, client.putPositiveDurationHandleError(resp)
	}
	return DurationPutPositiveDurationResponse{RawResponse: resp.Response}, nil
}

// putPositiveDurationCreateRequest creates the PutPositiveDuration request.
func (client *DurationClient) putPositiveDurationCreateRequest(ctx context.Context, durationBody string, options *DurationPutPositiveDurationOptions) (*azcore.Request, error) {
	urlPath := "/duration/positiveduration"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(durationBody)
}

// putPositiveDurationHandleError handles the PutPositiveDuration error response.
func (client *DurationClient) putPositiveDurationHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
