//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package objectgroup

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// ObjectTypeClient contains the methods for the ObjectTypeClient group.
// Don't use this type directly, use NewObjectTypeClient() instead.
type ObjectTypeClient struct {
	pl runtime.Pipeline
}

// NewObjectTypeClient creates a new instance of ObjectTypeClient with the specified values.
// options - pass nil to accept the default values.
func NewObjectTypeClient(options *azcore.ClientOptions) *ObjectTypeClient {
	cp := azcore.ClientOptions{}
	if options != nil {
		cp = *options
	}
	client := &ObjectTypeClient{
		pl: runtime.NewPipeline(module, version, nil, nil, &cp),
	}
	return client
}

// Get - Basic get that returns an object. Returns object { 'message': 'An object was successfully returned' }
// If the operation fails it returns a generic error.
// options - ObjectTypeClientGetOptions contains the optional parameters for the ObjectTypeClient.Get method.
func (client *ObjectTypeClient) Get(ctx context.Context, options *ObjectTypeClientGetOptions) (ObjectTypeClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, options)
	if err != nil {
		return ObjectTypeClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ObjectTypeClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ObjectTypeClientGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *ObjectTypeClient) getCreateRequest(ctx context.Context, options *ObjectTypeClientGetOptions) (*policy.Request, error) {
	urlPath := "/objectType/get"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ObjectTypeClient) getHandleResponse(resp *http.Response) (ObjectTypeClientGetResponse, error) {
	result := ObjectTypeClientGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Object); err != nil {
		return ObjectTypeClientGetResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *ObjectTypeClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// Put - Basic put that puts an object. Pass in {'foo': 'bar'} to get a 200 and anything else to get an object error.
// If the operation fails it returns a generic error.
// putObject - Pass in {'foo': 'bar'} for a 200, anything else for an object error
// options - ObjectTypeClientPutOptions contains the optional parameters for the ObjectTypeClient.Put method.
func (client *ObjectTypeClient) Put(ctx context.Context, putObject map[string]interface{}, options *ObjectTypeClientPutOptions) (ObjectTypeClientPutResponse, error) {
	req, err := client.putCreateRequest(ctx, putObject, options)
	if err != nil {
		return ObjectTypeClientPutResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ObjectTypeClientPutResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ObjectTypeClientPutResponse{}, client.putHandleError(resp)
	}
	return ObjectTypeClientPutResponse{RawResponse: resp}, nil
}

// putCreateRequest creates the Put request.
func (client *ObjectTypeClient) putCreateRequest(ctx context.Context, putObject map[string]interface{}, options *ObjectTypeClientPutOptions) (*policy.Request, error) {
	urlPath := "/objectType/put"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, putObject)
}

// putHandleError handles the Put error response.
func (client *ObjectTypeClient) putHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}
