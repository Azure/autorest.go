//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package objectgroup

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// ObjectTypeClient contains the methods for the ObjectTypeClient group.
// Don't use this type directly, use NewObjectTypeClient() instead.
type ObjectTypeClient struct {
	con *Connection
}

// NewObjectTypeClient creates a new instance of ObjectTypeClient with the specified values.
func NewObjectTypeClient(con *Connection) *ObjectTypeClient {
	return &ObjectTypeClient{con: con}
}

// Get - Basic get that returns an object. Returns object { 'message': 'An object was successfully returned' }
// If the operation fails it returns a generic error.
func (client *ObjectTypeClient) Get(ctx context.Context, options *ObjectTypeClientGetOptions) (ObjectTypeClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, options)
	if err != nil {
		return ObjectTypeClientGetResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ObjectTypeClientGetResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return ObjectTypeClientGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *ObjectTypeClient) getCreateRequest(ctx context.Context, options *ObjectTypeClientGetOptions) (*azcore.Request, error) {
	urlPath := "/objectType/get"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ObjectTypeClient) getHandleResponse(resp *azcore.Response) (ObjectTypeClientGetResponse, error) {
	result := ObjectTypeClientGetResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.Object); err != nil {
		return ObjectTypeClientGetResponse{}, err
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *ObjectTypeClient) getHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// Put - Basic put that puts an object. Pass in {'foo': 'bar'} to get a 200 and anything else to get an object error.
// If the operation fails it returns a generic error.
func (client *ObjectTypeClient) Put(ctx context.Context, putObject map[string]interface{}, options *ObjectTypeClientPutOptions) (ObjectTypeClientPutResponse, error) {
	req, err := client.putCreateRequest(ctx, putObject, options)
	if err != nil {
		return ObjectTypeClientPutResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ObjectTypeClientPutResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return ObjectTypeClientPutResponse{}, client.putHandleError(resp)
	}
	return ObjectTypeClientPutResponse{RawResponse: resp.Response}, nil
}

// putCreateRequest creates the Put request.
func (client *ObjectTypeClient) putCreateRequest(ctx context.Context, putObject map[string]interface{}, options *ObjectTypeClientPutOptions) (*azcore.Request, error) {
	urlPath := "/objectType/put"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(putObject)
}

// putHandleError handles the Put error response.
func (client *ObjectTypeClient) putHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}
