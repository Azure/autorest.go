// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package migroup

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
)

// MultipleInheritanceServiceClientOperations contains the methods for the MultipleInheritanceServiceClient group.
type MultipleInheritanceServiceClientOperations interface {
	// GetCat - Get a cat with name 'Whiskers' where likesMilk, meows, and hisses is true
	GetCat(ctx context.Context) (*CatResponse, error)
	// GetFeline - Get a feline where meows and hisses are true
	GetFeline(ctx context.Context) (*FelineResponse, error)
	// GetHorse - Get a horse with name 'Fred' and isAShowHorse true
	GetHorse(ctx context.Context) (*HorseResponse, error)
	// GetKitten - Get a kitten with name 'Gatito' where likesMilk and meows is true, and hisses and eatsMiceYet is false
	GetKitten(ctx context.Context) (*KittenResponse, error)
	// GetPet - Get a pet with name 'Peanut'
	GetPet(ctx context.Context) (*PetResponse, error)
	// PutCat - Put a cat with name 'Boots' where likesMilk and hisses is false, meows is true
	PutCat(ctx context.Context, cat Cat) (*StringResponse, error)
	// PutFeline - Put a feline who hisses and doesn't meow
	PutFeline(ctx context.Context, feline Feline) (*StringResponse, error)
	// PutHorse - Put a horse with name 'General' and isAShowHorse false
	PutHorse(ctx context.Context, horse Horse) (*StringResponse, error)
	// PutKitten - Put a kitten with name 'Kitty' where likesMilk and hisses is false, meows and eatsMiceYet is true
	PutKitten(ctx context.Context, kitten Kitten) (*StringResponse, error)
	// PutPet - Put a pet with name 'Butter'
	PutPet(ctx context.Context, pet Pet) (*StringResponse, error)
}

// MultipleInheritanceServiceClient implements the MultipleInheritanceServiceClientOperations interface.
// Don't use this type directly, use NewMultipleInheritanceServiceClient() instead.
type MultipleInheritanceServiceClient struct {
	*Client
}

// NewMultipleInheritanceServiceClient creates a new instance of MultipleInheritanceServiceClient with the specified values.
func NewMultipleInheritanceServiceClient(c *Client) MultipleInheritanceServiceClientOperations {
	return &MultipleInheritanceServiceClient{Client: c}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *MultipleInheritanceServiceClient) Do(ctx context.Context, req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(ctx, req)
}

// GetCat - Get a cat with name 'Whiskers' where likesMilk, meows, and hisses is true
func (client *MultipleInheritanceServiceClient) GetCat(ctx context.Context) (*CatResponse, error) {
	req, err := client.GetCatCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetCatHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetCatCreateRequest creates the GetCat request.
func (client *MultipleInheritanceServiceClient) GetCatCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/multipleInheritance/cat"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetCatHandleResponse handles the GetCat response.
func (client *MultipleInheritanceServiceClient) GetCatHandleResponse(resp *azcore.Response) (*CatResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetCatHandleError(resp)
	}
	result := CatResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Cat)
}

// GetCatHandleError handles the GetCat error response.
func (client *MultipleInheritanceServiceClient) GetCatHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetFeline - Get a feline where meows and hisses are true
func (client *MultipleInheritanceServiceClient) GetFeline(ctx context.Context) (*FelineResponse, error) {
	req, err := client.GetFelineCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetFelineHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetFelineCreateRequest creates the GetFeline request.
func (client *MultipleInheritanceServiceClient) GetFelineCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/multipleInheritance/feline"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetFelineHandleResponse handles the GetFeline response.
func (client *MultipleInheritanceServiceClient) GetFelineHandleResponse(resp *azcore.Response) (*FelineResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetFelineHandleError(resp)
	}
	result := FelineResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Feline)
}

// GetFelineHandleError handles the GetFeline error response.
func (client *MultipleInheritanceServiceClient) GetFelineHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetHorse - Get a horse with name 'Fred' and isAShowHorse true
func (client *MultipleInheritanceServiceClient) GetHorse(ctx context.Context) (*HorseResponse, error) {
	req, err := client.GetHorseCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetHorseHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetHorseCreateRequest creates the GetHorse request.
func (client *MultipleInheritanceServiceClient) GetHorseCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/multipleInheritance/horse"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetHorseHandleResponse handles the GetHorse response.
func (client *MultipleInheritanceServiceClient) GetHorseHandleResponse(resp *azcore.Response) (*HorseResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetHorseHandleError(resp)
	}
	result := HorseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Horse)
}

// GetHorseHandleError handles the GetHorse error response.
func (client *MultipleInheritanceServiceClient) GetHorseHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetKitten - Get a kitten with name 'Gatito' where likesMilk and meows is true, and hisses and eatsMiceYet is false
func (client *MultipleInheritanceServiceClient) GetKitten(ctx context.Context) (*KittenResponse, error) {
	req, err := client.GetKittenCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetKittenHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetKittenCreateRequest creates the GetKitten request.
func (client *MultipleInheritanceServiceClient) GetKittenCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/multipleInheritance/kitten"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetKittenHandleResponse handles the GetKitten response.
func (client *MultipleInheritanceServiceClient) GetKittenHandleResponse(resp *azcore.Response) (*KittenResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetKittenHandleError(resp)
	}
	result := KittenResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Kitten)
}

// GetKittenHandleError handles the GetKitten error response.
func (client *MultipleInheritanceServiceClient) GetKittenHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetPet - Get a pet with name 'Peanut'
func (client *MultipleInheritanceServiceClient) GetPet(ctx context.Context) (*PetResponse, error) {
	req, err := client.GetPetCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetPetHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetPetCreateRequest creates the GetPet request.
func (client *MultipleInheritanceServiceClient) GetPetCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/multipleInheritance/pet"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetPetHandleResponse handles the GetPet response.
func (client *MultipleInheritanceServiceClient) GetPetHandleResponse(resp *azcore.Response) (*PetResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetPetHandleError(resp)
	}
	result := PetResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Pet)
}

// GetPetHandleError handles the GetPet error response.
func (client *MultipleInheritanceServiceClient) GetPetHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutCat - Put a cat with name 'Boots' where likesMilk and hisses is false, meows is true
func (client *MultipleInheritanceServiceClient) PutCat(ctx context.Context, cat Cat) (*StringResponse, error) {
	req, err := client.PutCatCreateRequest(cat)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutCatHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutCatCreateRequest creates the PutCat request.
func (client *MultipleInheritanceServiceClient) PutCatCreateRequest(cat Cat) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/multipleInheritance/cat"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(cat)
}

// PutCatHandleResponse handles the PutCat response.
func (client *MultipleInheritanceServiceClient) PutCatHandleResponse(resp *azcore.Response) (*StringResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutCatHandleError(resp)
	}
	result := StringResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// PutCatHandleError handles the PutCat error response.
func (client *MultipleInheritanceServiceClient) PutCatHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// PutFeline - Put a feline who hisses and doesn't meow
func (client *MultipleInheritanceServiceClient) PutFeline(ctx context.Context, feline Feline) (*StringResponse, error) {
	req, err := client.PutFelineCreateRequest(feline)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutFelineHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutFelineCreateRequest creates the PutFeline request.
func (client *MultipleInheritanceServiceClient) PutFelineCreateRequest(feline Feline) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/multipleInheritance/feline"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(feline)
}

// PutFelineHandleResponse handles the PutFeline response.
func (client *MultipleInheritanceServiceClient) PutFelineHandleResponse(resp *azcore.Response) (*StringResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutFelineHandleError(resp)
	}
	result := StringResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// PutFelineHandleError handles the PutFeline error response.
func (client *MultipleInheritanceServiceClient) PutFelineHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// PutHorse - Put a horse with name 'General' and isAShowHorse false
func (client *MultipleInheritanceServiceClient) PutHorse(ctx context.Context, horse Horse) (*StringResponse, error) {
	req, err := client.PutHorseCreateRequest(horse)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutHorseHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutHorseCreateRequest creates the PutHorse request.
func (client *MultipleInheritanceServiceClient) PutHorseCreateRequest(horse Horse) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/multipleInheritance/horse"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(horse)
}

// PutHorseHandleResponse handles the PutHorse response.
func (client *MultipleInheritanceServiceClient) PutHorseHandleResponse(resp *azcore.Response) (*StringResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutHorseHandleError(resp)
	}
	result := StringResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// PutHorseHandleError handles the PutHorse error response.
func (client *MultipleInheritanceServiceClient) PutHorseHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// PutKitten - Put a kitten with name 'Kitty' where likesMilk and hisses is false, meows and eatsMiceYet is true
func (client *MultipleInheritanceServiceClient) PutKitten(ctx context.Context, kitten Kitten) (*StringResponse, error) {
	req, err := client.PutKittenCreateRequest(kitten)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutKittenHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutKittenCreateRequest creates the PutKitten request.
func (client *MultipleInheritanceServiceClient) PutKittenCreateRequest(kitten Kitten) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/multipleInheritance/kitten"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(kitten)
}

// PutKittenHandleResponse handles the PutKitten response.
func (client *MultipleInheritanceServiceClient) PutKittenHandleResponse(resp *azcore.Response) (*StringResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutKittenHandleError(resp)
	}
	result := StringResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// PutKittenHandleError handles the PutKitten error response.
func (client *MultipleInheritanceServiceClient) PutKittenHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// PutPet - Put a pet with name 'Butter'
func (client *MultipleInheritanceServiceClient) PutPet(ctx context.Context, pet Pet) (*StringResponse, error) {
	req, err := client.PutPetCreateRequest(pet)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutPetHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutPetCreateRequest creates the PutPet request.
func (client *MultipleInheritanceServiceClient) PutPetCreateRequest(pet Pet) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/multipleInheritance/pet"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(pet)
}

// PutPetHandleResponse handles the PutPet response.
func (client *MultipleInheritanceServiceClient) PutPetHandleResponse(resp *azcore.Response) (*StringResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutPetHandleError(resp)
	}
	result := StringResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// PutPetHandleError handles the PutPet error response.
func (client *MultipleInheritanceServiceClient) PutPetHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}
