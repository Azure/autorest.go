// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package additionalpropsgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// PetsClient contains the methods for the Pets group.
// Don't use this type directly, use NewPetsClient() instead.
type PetsClient struct {
	con *Connection
}

// NewPetsClient creates a new instance of PetsClient with the specified values.
func NewPetsClient(con *Connection) PetsClient {
	return PetsClient{con: con}
}

// Pipeline returns the pipeline associated with this client.
func (client PetsClient) Pipeline() azcore.Pipeline {
	return client.con.Pipeline()
}

// CreateApInProperties - Create a Pet which contains more properties than what is defined.
func (client PetsClient) CreateApInProperties(ctx context.Context, createParameters PetApInProperties, options *PetsCreateApInPropertiesOptions) (PetApInPropertiesResponse, error) {
	req, err := client.createApInPropertiesCreateRequest(ctx, createParameters, options)
	if err != nil {
		return PetApInPropertiesResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return PetApInPropertiesResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return PetApInPropertiesResponse{}, client.createApInPropertiesHandleError(resp)
	}
	result, err := client.createApInPropertiesHandleResponse(resp)
	if err != nil {
		return PetApInPropertiesResponse{}, err
	}
	return result, nil
}

// createApInPropertiesCreateRequest creates the CreateApInProperties request.
func (client PetsClient) createApInPropertiesCreateRequest(ctx context.Context, createParameters PetApInProperties, options *PetsCreateApInPropertiesOptions) (*azcore.Request, error) {
	urlPath := "/additionalProperties/in/properties"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(createParameters)
}

// createApInPropertiesHandleResponse handles the CreateApInProperties response.
func (client PetsClient) createApInPropertiesHandleResponse(resp *azcore.Response) (PetApInPropertiesResponse, error) {
	result := PetApInPropertiesResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.PetApInProperties)
	return result, err
}

// createApInPropertiesHandleError handles the CreateApInProperties error response.
func (client PetsClient) createApInPropertiesHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// CreateApInPropertiesWithApstring - Create a Pet which contains more properties than what is defined.
func (client PetsClient) CreateApInPropertiesWithApstring(ctx context.Context, createParameters PetApInPropertiesWithApstring, options *PetsCreateApInPropertiesWithApstringOptions) (PetApInPropertiesWithApstringResponse, error) {
	req, err := client.createApInPropertiesWithApstringCreateRequest(ctx, createParameters, options)
	if err != nil {
		return PetApInPropertiesWithApstringResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return PetApInPropertiesWithApstringResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return PetApInPropertiesWithApstringResponse{}, client.createApInPropertiesWithApstringHandleError(resp)
	}
	result, err := client.createApInPropertiesWithApstringHandleResponse(resp)
	if err != nil {
		return PetApInPropertiesWithApstringResponse{}, err
	}
	return result, nil
}

// createApInPropertiesWithApstringCreateRequest creates the CreateApInPropertiesWithApstring request.
func (client PetsClient) createApInPropertiesWithApstringCreateRequest(ctx context.Context, createParameters PetApInPropertiesWithApstring, options *PetsCreateApInPropertiesWithApstringOptions) (*azcore.Request, error) {
	urlPath := "/additionalProperties/in/properties/with/additionalProperties/string"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(createParameters)
}

// createApInPropertiesWithApstringHandleResponse handles the CreateApInPropertiesWithApstring response.
func (client PetsClient) createApInPropertiesWithApstringHandleResponse(resp *azcore.Response) (PetApInPropertiesWithApstringResponse, error) {
	result := PetApInPropertiesWithApstringResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.PetApInPropertiesWithApstring)
	return result, err
}

// createApInPropertiesWithApstringHandleError handles the CreateApInPropertiesWithApstring error response.
func (client PetsClient) createApInPropertiesWithApstringHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// CreateApObject - Create a Pet which contains more properties than what is defined.
func (client PetsClient) CreateApObject(ctx context.Context, createParameters PetApObject, options *PetsCreateApObjectOptions) (PetApObjectResponse, error) {
	req, err := client.createApObjectCreateRequest(ctx, createParameters, options)
	if err != nil {
		return PetApObjectResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return PetApObjectResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return PetApObjectResponse{}, client.createApObjectHandleError(resp)
	}
	result, err := client.createApObjectHandleResponse(resp)
	if err != nil {
		return PetApObjectResponse{}, err
	}
	return result, nil
}

// createApObjectCreateRequest creates the CreateApObject request.
func (client PetsClient) createApObjectCreateRequest(ctx context.Context, createParameters PetApObject, options *PetsCreateApObjectOptions) (*azcore.Request, error) {
	urlPath := "/additionalProperties/type/object"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(createParameters)
}

// createApObjectHandleResponse handles the CreateApObject response.
func (client PetsClient) createApObjectHandleResponse(resp *azcore.Response) (PetApObjectResponse, error) {
	result := PetApObjectResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.PetApObject)
	return result, err
}

// createApObjectHandleError handles the CreateApObject error response.
func (client PetsClient) createApObjectHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// CreateApString - Create a Pet which contains more properties than what is defined.
func (client PetsClient) CreateApString(ctx context.Context, createParameters PetApString, options *PetsCreateApStringOptions) (PetApStringResponse, error) {
	req, err := client.createApStringCreateRequest(ctx, createParameters, options)
	if err != nil {
		return PetApStringResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return PetApStringResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return PetApStringResponse{}, client.createApStringHandleError(resp)
	}
	result, err := client.createApStringHandleResponse(resp)
	if err != nil {
		return PetApStringResponse{}, err
	}
	return result, nil
}

// createApStringCreateRequest creates the CreateApString request.
func (client PetsClient) createApStringCreateRequest(ctx context.Context, createParameters PetApString, options *PetsCreateApStringOptions) (*azcore.Request, error) {
	urlPath := "/additionalProperties/type/string"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(createParameters)
}

// createApStringHandleResponse handles the CreateApString response.
func (client PetsClient) createApStringHandleResponse(resp *azcore.Response) (PetApStringResponse, error) {
	result := PetApStringResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.PetApString)
	return result, err
}

// createApStringHandleError handles the CreateApString error response.
func (client PetsClient) createApStringHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// CreateApTrue - Create a Pet which contains more properties than what is defined.
func (client PetsClient) CreateApTrue(ctx context.Context, createParameters PetApTrue, options *PetsCreateApTrueOptions) (PetApTrueResponse, error) {
	req, err := client.createApTrueCreateRequest(ctx, createParameters, options)
	if err != nil {
		return PetApTrueResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return PetApTrueResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return PetApTrueResponse{}, client.createApTrueHandleError(resp)
	}
	result, err := client.createApTrueHandleResponse(resp)
	if err != nil {
		return PetApTrueResponse{}, err
	}
	return result, nil
}

// createApTrueCreateRequest creates the CreateApTrue request.
func (client PetsClient) createApTrueCreateRequest(ctx context.Context, createParameters PetApTrue, options *PetsCreateApTrueOptions) (*azcore.Request, error) {
	urlPath := "/additionalProperties/true"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(createParameters)
}

// createApTrueHandleResponse handles the CreateApTrue response.
func (client PetsClient) createApTrueHandleResponse(resp *azcore.Response) (PetApTrueResponse, error) {
	result := PetApTrueResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.PetApTrue)
	return result, err
}

// createApTrueHandleError handles the CreateApTrue error response.
func (client PetsClient) createApTrueHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// CreateCatApTrue - Create a CatAPTrue which contains more properties than what is defined.
func (client PetsClient) CreateCatApTrue(ctx context.Context, createParameters CatApTrue, options *PetsCreateCatApTrueOptions) (CatApTrueResponse, error) {
	req, err := client.createCatApTrueCreateRequest(ctx, createParameters, options)
	if err != nil {
		return CatApTrueResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return CatApTrueResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return CatApTrueResponse{}, client.createCatApTrueHandleError(resp)
	}
	result, err := client.createCatApTrueHandleResponse(resp)
	if err != nil {
		return CatApTrueResponse{}, err
	}
	return result, nil
}

// createCatApTrueCreateRequest creates the CreateCatApTrue request.
func (client PetsClient) createCatApTrueCreateRequest(ctx context.Context, createParameters CatApTrue, options *PetsCreateCatApTrueOptions) (*azcore.Request, error) {
	urlPath := "/additionalProperties/true-subclass"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(createParameters)
}

// createCatApTrueHandleResponse handles the CreateCatApTrue response.
func (client PetsClient) createCatApTrueHandleResponse(resp *azcore.Response) (CatApTrueResponse, error) {
	result := CatApTrueResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.CatApTrue)
	return result, err
}

// createCatApTrueHandleError handles the CreateCatApTrue error response.
func (client PetsClient) createCatApTrueHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}
