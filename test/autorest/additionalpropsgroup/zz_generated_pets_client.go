// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package additionalpropsgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// PetsClient contains the methods for the Pets group.
// Don't use this type directly, use NewPetsClient() instead.
type PetsClient struct {
	con *Connection
}

// NewPetsClient creates a new instance of PetsClient with the specified values.
func NewPetsClient(con *Connection) *PetsClient {
	return &PetsClient{con: con}
}

// CreateAPInProperties - Create a Pet which contains more properties than what is defined.
func (client *PetsClient) CreateAPInProperties(ctx context.Context, createParameters PetAPInProperties, options *PetsCreateAPInPropertiesOptions) (PetAPInPropertiesResponse, error) {
	req, err := client.createAPInPropertiesCreateRequest(ctx, createParameters, options)
	if err != nil {
		return PetAPInPropertiesResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return PetAPInPropertiesResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return PetAPInPropertiesResponse{}, client.createAPInPropertiesHandleError(resp)
	}
	return client.createAPInPropertiesHandleResponse(resp)
}

// createAPInPropertiesCreateRequest creates the CreateAPInProperties request.
func (client *PetsClient) createAPInPropertiesCreateRequest(ctx context.Context, createParameters PetAPInProperties, options *PetsCreateAPInPropertiesOptions) (*azcore.Request, error) {
	urlPath := "/additionalProperties/in/properties"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(createParameters)
}

// createAPInPropertiesHandleResponse handles the CreateAPInProperties response.
func (client *PetsClient) createAPInPropertiesHandleResponse(resp *azcore.Response) (PetAPInPropertiesResponse, error) {
	var val *PetAPInProperties
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return PetAPInPropertiesResponse{}, err
	}
	return PetAPInPropertiesResponse{RawResponse: resp.Response, PetAPInProperties: val}, nil
}

// createAPInPropertiesHandleError handles the CreateAPInProperties error response.
func (client *PetsClient) createAPInPropertiesHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// CreateAPInPropertiesWithAPString - Create a Pet which contains more properties than what is defined.
func (client *PetsClient) CreateAPInPropertiesWithAPString(ctx context.Context, createParameters PetAPInPropertiesWithAPString, options *PetsCreateAPInPropertiesWithAPStringOptions) (PetAPInPropertiesWithAPStringResponse, error) {
	req, err := client.createAPInPropertiesWithAPStringCreateRequest(ctx, createParameters, options)
	if err != nil {
		return PetAPInPropertiesWithAPStringResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return PetAPInPropertiesWithAPStringResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return PetAPInPropertiesWithAPStringResponse{}, client.createAPInPropertiesWithAPStringHandleError(resp)
	}
	return client.createAPInPropertiesWithAPStringHandleResponse(resp)
}

// createAPInPropertiesWithAPStringCreateRequest creates the CreateAPInPropertiesWithAPString request.
func (client *PetsClient) createAPInPropertiesWithAPStringCreateRequest(ctx context.Context, createParameters PetAPInPropertiesWithAPString, options *PetsCreateAPInPropertiesWithAPStringOptions) (*azcore.Request, error) {
	urlPath := "/additionalProperties/in/properties/with/additionalProperties/string"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(createParameters)
}

// createAPInPropertiesWithAPStringHandleResponse handles the CreateAPInPropertiesWithAPString response.
func (client *PetsClient) createAPInPropertiesWithAPStringHandleResponse(resp *azcore.Response) (PetAPInPropertiesWithAPStringResponse, error) {
	var val *PetAPInPropertiesWithAPString
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return PetAPInPropertiesWithAPStringResponse{}, err
	}
	return PetAPInPropertiesWithAPStringResponse{RawResponse: resp.Response, PetAPInPropertiesWithAPString: val}, nil
}

// createAPInPropertiesWithAPStringHandleError handles the CreateAPInPropertiesWithAPString error response.
func (client *PetsClient) createAPInPropertiesWithAPStringHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// CreateAPObject - Create a Pet which contains more properties than what is defined.
func (client *PetsClient) CreateAPObject(ctx context.Context, createParameters PetAPObject, options *PetsCreateAPObjectOptions) (PetAPObjectResponse, error) {
	req, err := client.createAPObjectCreateRequest(ctx, createParameters, options)
	if err != nil {
		return PetAPObjectResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return PetAPObjectResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return PetAPObjectResponse{}, client.createAPObjectHandleError(resp)
	}
	return client.createAPObjectHandleResponse(resp)
}

// createAPObjectCreateRequest creates the CreateAPObject request.
func (client *PetsClient) createAPObjectCreateRequest(ctx context.Context, createParameters PetAPObject, options *PetsCreateAPObjectOptions) (*azcore.Request, error) {
	urlPath := "/additionalProperties/type/object"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(createParameters)
}

// createAPObjectHandleResponse handles the CreateAPObject response.
func (client *PetsClient) createAPObjectHandleResponse(resp *azcore.Response) (PetAPObjectResponse, error) {
	var val *PetAPObject
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return PetAPObjectResponse{}, err
	}
	return PetAPObjectResponse{RawResponse: resp.Response, PetAPObject: val}, nil
}

// createAPObjectHandleError handles the CreateAPObject error response.
func (client *PetsClient) createAPObjectHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// CreateAPString - Create a Pet which contains more properties than what is defined.
func (client *PetsClient) CreateAPString(ctx context.Context, createParameters PetAPString, options *PetsCreateAPStringOptions) (PetAPStringResponse, error) {
	req, err := client.createAPStringCreateRequest(ctx, createParameters, options)
	if err != nil {
		return PetAPStringResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return PetAPStringResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return PetAPStringResponse{}, client.createAPStringHandleError(resp)
	}
	return client.createAPStringHandleResponse(resp)
}

// createAPStringCreateRequest creates the CreateAPString request.
func (client *PetsClient) createAPStringCreateRequest(ctx context.Context, createParameters PetAPString, options *PetsCreateAPStringOptions) (*azcore.Request, error) {
	urlPath := "/additionalProperties/type/string"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(createParameters)
}

// createAPStringHandleResponse handles the CreateAPString response.
func (client *PetsClient) createAPStringHandleResponse(resp *azcore.Response) (PetAPStringResponse, error) {
	var val *PetAPString
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return PetAPStringResponse{}, err
	}
	return PetAPStringResponse{RawResponse: resp.Response, PetAPString: val}, nil
}

// createAPStringHandleError handles the CreateAPString error response.
func (client *PetsClient) createAPStringHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// CreateAPTrue - Create a Pet which contains more properties than what is defined.
func (client *PetsClient) CreateAPTrue(ctx context.Context, createParameters PetAPTrue, options *PetsCreateAPTrueOptions) (PetAPTrueResponse, error) {
	req, err := client.createAPTrueCreateRequest(ctx, createParameters, options)
	if err != nil {
		return PetAPTrueResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return PetAPTrueResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return PetAPTrueResponse{}, client.createAPTrueHandleError(resp)
	}
	return client.createAPTrueHandleResponse(resp)
}

// createAPTrueCreateRequest creates the CreateAPTrue request.
func (client *PetsClient) createAPTrueCreateRequest(ctx context.Context, createParameters PetAPTrue, options *PetsCreateAPTrueOptions) (*azcore.Request, error) {
	urlPath := "/additionalProperties/true"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(createParameters)
}

// createAPTrueHandleResponse handles the CreateAPTrue response.
func (client *PetsClient) createAPTrueHandleResponse(resp *azcore.Response) (PetAPTrueResponse, error) {
	var val *PetAPTrue
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return PetAPTrueResponse{}, err
	}
	return PetAPTrueResponse{RawResponse: resp.Response, PetAPTrue: val}, nil
}

// createAPTrueHandleError handles the CreateAPTrue error response.
func (client *PetsClient) createAPTrueHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// CreateCatAPTrue - Create a CatAPTrue which contains more properties than what is defined.
func (client *PetsClient) CreateCatAPTrue(ctx context.Context, createParameters CatAPTrue, options *PetsCreateCatAPTrueOptions) (CatAPTrueResponse, error) {
	req, err := client.createCatAPTrueCreateRequest(ctx, createParameters, options)
	if err != nil {
		return CatAPTrueResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return CatAPTrueResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return CatAPTrueResponse{}, client.createCatAPTrueHandleError(resp)
	}
	return client.createCatAPTrueHandleResponse(resp)
}

// createCatAPTrueCreateRequest creates the CreateCatAPTrue request.
func (client *PetsClient) createCatAPTrueCreateRequest(ctx context.Context, createParameters CatAPTrue, options *PetsCreateCatAPTrueOptions) (*azcore.Request, error) {
	urlPath := "/additionalProperties/true-subclass"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(createParameters)
}

// createCatAPTrueHandleResponse handles the CreateCatAPTrue response.
func (client *PetsClient) createCatAPTrueHandleResponse(resp *azcore.Response) (CatAPTrueResponse, error) {
	var val *CatAPTrue
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return CatAPTrueResponse{}, err
	}
	return CatAPTrueResponse{RawResponse: resp.Response, CatAPTrue: val}, nil
}

// createCatAPTrueHandleError handles the CreateCatAPTrue error response.
func (client *PetsClient) createCatAPTrueHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}
