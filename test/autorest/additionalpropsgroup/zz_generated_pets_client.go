//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package additionalpropsgroup

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// PetsClient contains the methods for the Pets group.
// Don't use this type directly, use NewPetsClient() instead.
type PetsClient struct {
	con *Connection
}

// NewPetsClient creates a new instance of PetsClient with the specified values.
func NewPetsClient(con *Connection) *PetsClient {
	return &PetsClient{con: con}
}

// CreateAPInProperties - Create a Pet which contains more properties than what is defined.
// If the operation fails it returns the *Error error type.
func (client *PetsClient) CreateAPInProperties(ctx context.Context, createParameters PetAPInProperties, options *PetsCreateAPInPropertiesOptions) (PetsCreateAPInPropertiesResponse, error) {
	req, err := client.createAPInPropertiesCreateRequest(ctx, createParameters, options)
	if err != nil {
		return PetsCreateAPInPropertiesResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return PetsCreateAPInPropertiesResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return PetsCreateAPInPropertiesResponse{}, client.createAPInPropertiesHandleError(resp)
	}
	return client.createAPInPropertiesHandleResponse(resp)
}

// createAPInPropertiesCreateRequest creates the CreateAPInProperties request.
func (client *PetsClient) createAPInPropertiesCreateRequest(ctx context.Context, createParameters PetAPInProperties, options *PetsCreateAPInPropertiesOptions) (*azcore.Request, error) {
	urlPath := "/additionalProperties/in/properties"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(createParameters)
}

// createAPInPropertiesHandleResponse handles the CreateAPInProperties response.
func (client *PetsClient) createAPInPropertiesHandleResponse(resp *azcore.Response) (PetsCreateAPInPropertiesResponse, error) {
	result := PetsCreateAPInPropertiesResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.PetAPInProperties); err != nil {
		return PetsCreateAPInPropertiesResponse{}, err
	}
	return result, nil
}

// createAPInPropertiesHandleError handles the CreateAPInProperties error response.
func (client *PetsClient) createAPInPropertiesHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// CreateAPInPropertiesWithAPString - Create a Pet which contains more properties than what is defined.
// If the operation fails it returns the *Error error type.
func (client *PetsClient) CreateAPInPropertiesWithAPString(ctx context.Context, createParameters PetAPInPropertiesWithAPString, options *PetsCreateAPInPropertiesWithAPStringOptions) (PetsCreateAPInPropertiesWithAPStringResponse, error) {
	req, err := client.createAPInPropertiesWithAPStringCreateRequest(ctx, createParameters, options)
	if err != nil {
		return PetsCreateAPInPropertiesWithAPStringResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return PetsCreateAPInPropertiesWithAPStringResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return PetsCreateAPInPropertiesWithAPStringResponse{}, client.createAPInPropertiesWithAPStringHandleError(resp)
	}
	return client.createAPInPropertiesWithAPStringHandleResponse(resp)
}

// createAPInPropertiesWithAPStringCreateRequest creates the CreateAPInPropertiesWithAPString request.
func (client *PetsClient) createAPInPropertiesWithAPStringCreateRequest(ctx context.Context, createParameters PetAPInPropertiesWithAPString, options *PetsCreateAPInPropertiesWithAPStringOptions) (*azcore.Request, error) {
	urlPath := "/additionalProperties/in/properties/with/additionalProperties/string"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(createParameters)
}

// createAPInPropertiesWithAPStringHandleResponse handles the CreateAPInPropertiesWithAPString response.
func (client *PetsClient) createAPInPropertiesWithAPStringHandleResponse(resp *azcore.Response) (PetsCreateAPInPropertiesWithAPStringResponse, error) {
	result := PetsCreateAPInPropertiesWithAPStringResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.PetAPInPropertiesWithAPString); err != nil {
		return PetsCreateAPInPropertiesWithAPStringResponse{}, err
	}
	return result, nil
}

// createAPInPropertiesWithAPStringHandleError handles the CreateAPInPropertiesWithAPString error response.
func (client *PetsClient) createAPInPropertiesWithAPStringHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// CreateAPObject - Create a Pet which contains more properties than what is defined.
// If the operation fails it returns the *Error error type.
func (client *PetsClient) CreateAPObject(ctx context.Context, createParameters PetAPObject, options *PetsCreateAPObjectOptions) (PetsCreateAPObjectResponse, error) {
	req, err := client.createAPObjectCreateRequest(ctx, createParameters, options)
	if err != nil {
		return PetsCreateAPObjectResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return PetsCreateAPObjectResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return PetsCreateAPObjectResponse{}, client.createAPObjectHandleError(resp)
	}
	return client.createAPObjectHandleResponse(resp)
}

// createAPObjectCreateRequest creates the CreateAPObject request.
func (client *PetsClient) createAPObjectCreateRequest(ctx context.Context, createParameters PetAPObject, options *PetsCreateAPObjectOptions) (*azcore.Request, error) {
	urlPath := "/additionalProperties/type/object"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(createParameters)
}

// createAPObjectHandleResponse handles the CreateAPObject response.
func (client *PetsClient) createAPObjectHandleResponse(resp *azcore.Response) (PetsCreateAPObjectResponse, error) {
	result := PetsCreateAPObjectResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.PetAPObject); err != nil {
		return PetsCreateAPObjectResponse{}, err
	}
	return result, nil
}

// createAPObjectHandleError handles the CreateAPObject error response.
func (client *PetsClient) createAPObjectHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// CreateAPString - Create a Pet which contains more properties than what is defined.
// If the operation fails it returns the *Error error type.
func (client *PetsClient) CreateAPString(ctx context.Context, createParameters PetAPString, options *PetsCreateAPStringOptions) (PetsCreateAPStringResponse, error) {
	req, err := client.createAPStringCreateRequest(ctx, createParameters, options)
	if err != nil {
		return PetsCreateAPStringResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return PetsCreateAPStringResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return PetsCreateAPStringResponse{}, client.createAPStringHandleError(resp)
	}
	return client.createAPStringHandleResponse(resp)
}

// createAPStringCreateRequest creates the CreateAPString request.
func (client *PetsClient) createAPStringCreateRequest(ctx context.Context, createParameters PetAPString, options *PetsCreateAPStringOptions) (*azcore.Request, error) {
	urlPath := "/additionalProperties/type/string"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(createParameters)
}

// createAPStringHandleResponse handles the CreateAPString response.
func (client *PetsClient) createAPStringHandleResponse(resp *azcore.Response) (PetsCreateAPStringResponse, error) {
	result := PetsCreateAPStringResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.PetAPString); err != nil {
		return PetsCreateAPStringResponse{}, err
	}
	return result, nil
}

// createAPStringHandleError handles the CreateAPString error response.
func (client *PetsClient) createAPStringHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// CreateAPTrue - Create a Pet which contains more properties than what is defined.
// If the operation fails it returns the *Error error type.
func (client *PetsClient) CreateAPTrue(ctx context.Context, createParameters PetAPTrue, options *PetsCreateAPTrueOptions) (PetsCreateAPTrueResponse, error) {
	req, err := client.createAPTrueCreateRequest(ctx, createParameters, options)
	if err != nil {
		return PetsCreateAPTrueResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return PetsCreateAPTrueResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return PetsCreateAPTrueResponse{}, client.createAPTrueHandleError(resp)
	}
	return client.createAPTrueHandleResponse(resp)
}

// createAPTrueCreateRequest creates the CreateAPTrue request.
func (client *PetsClient) createAPTrueCreateRequest(ctx context.Context, createParameters PetAPTrue, options *PetsCreateAPTrueOptions) (*azcore.Request, error) {
	urlPath := "/additionalProperties/true"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(createParameters)
}

// createAPTrueHandleResponse handles the CreateAPTrue response.
func (client *PetsClient) createAPTrueHandleResponse(resp *azcore.Response) (PetsCreateAPTrueResponse, error) {
	result := PetsCreateAPTrueResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.PetAPTrue); err != nil {
		return PetsCreateAPTrueResponse{}, err
	}
	return result, nil
}

// createAPTrueHandleError handles the CreateAPTrue error response.
func (client *PetsClient) createAPTrueHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// CreateCatAPTrue - Create a CatAPTrue which contains more properties than what is defined.
// If the operation fails it returns the *Error error type.
func (client *PetsClient) CreateCatAPTrue(ctx context.Context, createParameters CatAPTrue, options *PetsCreateCatAPTrueOptions) (PetsCreateCatAPTrueResponse, error) {
	req, err := client.createCatAPTrueCreateRequest(ctx, createParameters, options)
	if err != nil {
		return PetsCreateCatAPTrueResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return PetsCreateCatAPTrueResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return PetsCreateCatAPTrueResponse{}, client.createCatAPTrueHandleError(resp)
	}
	return client.createCatAPTrueHandleResponse(resp)
}

// createCatAPTrueCreateRequest creates the CreateCatAPTrue request.
func (client *PetsClient) createCatAPTrueCreateRequest(ctx context.Context, createParameters CatAPTrue, options *PetsCreateCatAPTrueOptions) (*azcore.Request, error) {
	urlPath := "/additionalProperties/true-subclass"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(createParameters)
}

// createCatAPTrueHandleResponse handles the CreateCatAPTrue response.
func (client *PetsClient) createCatAPTrueHandleResponse(resp *azcore.Response) (PetsCreateCatAPTrueResponse, error) {
	result := PetsCreateCatAPTrueResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.CatAPTrue); err != nil {
		return PetsCreateCatAPTrueResponse{}, err
	}
	return result, nil
}

// createCatAPTrueHandleError handles the CreateCatAPTrue error response.
func (client *PetsClient) createCatAPTrueHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
