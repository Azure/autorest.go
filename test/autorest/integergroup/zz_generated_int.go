// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package integergroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"time"
)

// IntOperations contains the methods for the Int group.
type IntOperations interface {
	// GetInvalid - Get invalid Int value
	GetInvalid(ctx context.Context, options *IntGetInvalidOptions) (*Int32Response, error)
	// GetInvalidUnixTime - Get invalid Unix time value
	GetInvalidUnixTime(ctx context.Context, options *IntGetInvalidUnixTimeOptions) (*TimeResponse, error)
	// GetNull - Get null Int value
	GetNull(ctx context.Context, options *IntGetNullOptions) (*Int32Response, error)
	// GetNullUnixTime - Get null Unix time value
	GetNullUnixTime(ctx context.Context, options *IntGetNullUnixTimeOptions) (*TimeResponse, error)
	// GetOverflowInt32 - Get overflow Int32 value
	GetOverflowInt32(ctx context.Context, options *IntGetOverflowInt32Options) (*Int32Response, error)
	// GetOverflowInt64 - Get overflow Int64 value
	GetOverflowInt64(ctx context.Context, options *IntGetOverflowInt64Options) (*Int64Response, error)
	// GetUnderflowInt32 - Get underflow Int32 value
	GetUnderflowInt32(ctx context.Context, options *IntGetUnderflowInt32Options) (*Int32Response, error)
	// GetUnderflowInt64 - Get underflow Int64 value
	GetUnderflowInt64(ctx context.Context, options *IntGetUnderflowInt64Options) (*Int64Response, error)
	// GetUnixTime - Get datetime encoded as Unix time value
	GetUnixTime(ctx context.Context, options *IntGetUnixTimeOptions) (*TimeResponse, error)
	// PutMax32 - Put max int32 value
	PutMax32(ctx context.Context, intBody int32, options *IntPutMax32Options) (*http.Response, error)
	// PutMax64 - Put max int64 value
	PutMax64(ctx context.Context, intBody int64, options *IntPutMax64Options) (*http.Response, error)
	// PutMin32 - Put min int32 value
	PutMin32(ctx context.Context, intBody int32, options *IntPutMin32Options) (*http.Response, error)
	// PutMin64 - Put min int64 value
	PutMin64(ctx context.Context, intBody int64, options *IntPutMin64Options) (*http.Response, error)
	// PutUnixTimeDate - Put datetime encoded as Unix time
	PutUnixTimeDate(ctx context.Context, intBody time.Time, options *IntPutUnixTimeDateOptions) (*http.Response, error)
}

// IntClient implements the IntOperations interface.
// Don't use this type directly, use NewIntClient() instead.
type IntClient struct {
	con *Connection
}

// NewIntClient creates a new instance of IntClient with the specified values.
func NewIntClient(con *Connection) IntOperations {
	return &IntClient{con: con}
}

// Pipeline returns the pipeline associated with this client.
func (client *IntClient) Pipeline() azcore.Pipeline {
	return client.con.Pipeline()
}

// GetInvalid - Get invalid Int value
func (client *IntClient) GetInvalid(ctx context.Context, options *IntGetInvalidOptions) (*Int32Response, error) {
	req, err := client.GetInvalidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetInvalidHandleError(resp)
	}
	result, err := client.GetInvalidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetInvalidCreateRequest creates the GetInvalid request.
func (client *IntClient) GetInvalidCreateRequest(ctx context.Context, options *IntGetInvalidOptions) (*azcore.Request, error) {
	urlPath := "/int/invalid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetInvalidHandleResponse handles the GetInvalid response.
func (client *IntClient) GetInvalidHandleResponse(resp *azcore.Response) (*Int32Response, error) {
	result := Int32Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetInvalidHandleError handles the GetInvalid error response.
func (client *IntClient) GetInvalidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetInvalidUnixTime - Get invalid Unix time value
func (client *IntClient) GetInvalidUnixTime(ctx context.Context, options *IntGetInvalidUnixTimeOptions) (*TimeResponse, error) {
	req, err := client.GetInvalidUnixTimeCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetInvalidUnixTimeHandleError(resp)
	}
	result, err := client.GetInvalidUnixTimeHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetInvalidUnixTimeCreateRequest creates the GetInvalidUnixTime request.
func (client *IntClient) GetInvalidUnixTimeCreateRequest(ctx context.Context, options *IntGetInvalidUnixTimeOptions) (*azcore.Request, error) {
	urlPath := "/int/invalidunixtime"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetInvalidUnixTimeHandleResponse handles the GetInvalidUnixTime response.
func (client *IntClient) GetInvalidUnixTimeHandleResponse(resp *azcore.Response) (*TimeResponse, error) {
	var aux *timeUnix
	err := resp.UnmarshalAsJSON(&aux)
	return &TimeResponse{RawResponse: resp.Response, Value: (*time.Time)(aux)}, err
}

// GetInvalidUnixTimeHandleError handles the GetInvalidUnixTime error response.
func (client *IntClient) GetInvalidUnixTimeHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetNull - Get null Int value
func (client *IntClient) GetNull(ctx context.Context, options *IntGetNullOptions) (*Int32Response, error) {
	req, err := client.GetNullCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetNullHandleError(resp)
	}
	result, err := client.GetNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetNullCreateRequest creates the GetNull request.
func (client *IntClient) GetNullCreateRequest(ctx context.Context, options *IntGetNullOptions) (*azcore.Request, error) {
	urlPath := "/int/null"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetNullHandleResponse handles the GetNull response.
func (client *IntClient) GetNullHandleResponse(resp *azcore.Response) (*Int32Response, error) {
	result := Int32Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetNullHandleError handles the GetNull error response.
func (client *IntClient) GetNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetNullUnixTime - Get null Unix time value
func (client *IntClient) GetNullUnixTime(ctx context.Context, options *IntGetNullUnixTimeOptions) (*TimeResponse, error) {
	req, err := client.GetNullUnixTimeCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetNullUnixTimeHandleError(resp)
	}
	result, err := client.GetNullUnixTimeHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetNullUnixTimeCreateRequest creates the GetNullUnixTime request.
func (client *IntClient) GetNullUnixTimeCreateRequest(ctx context.Context, options *IntGetNullUnixTimeOptions) (*azcore.Request, error) {
	urlPath := "/int/nullunixtime"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetNullUnixTimeHandleResponse handles the GetNullUnixTime response.
func (client *IntClient) GetNullUnixTimeHandleResponse(resp *azcore.Response) (*TimeResponse, error) {
	var aux *timeUnix
	err := resp.UnmarshalAsJSON(&aux)
	return &TimeResponse{RawResponse: resp.Response, Value: (*time.Time)(aux)}, err
}

// GetNullUnixTimeHandleError handles the GetNullUnixTime error response.
func (client *IntClient) GetNullUnixTimeHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetOverflowInt32 - Get overflow Int32 value
func (client *IntClient) GetOverflowInt32(ctx context.Context, options *IntGetOverflowInt32Options) (*Int32Response, error) {
	req, err := client.GetOverflowInt32CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetOverflowInt32HandleError(resp)
	}
	result, err := client.GetOverflowInt32HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetOverflowInt32CreateRequest creates the GetOverflowInt32 request.
func (client *IntClient) GetOverflowInt32CreateRequest(ctx context.Context, options *IntGetOverflowInt32Options) (*azcore.Request, error) {
	urlPath := "/int/overflowint32"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetOverflowInt32HandleResponse handles the GetOverflowInt32 response.
func (client *IntClient) GetOverflowInt32HandleResponse(resp *azcore.Response) (*Int32Response, error) {
	result := Int32Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetOverflowInt32HandleError handles the GetOverflowInt32 error response.
func (client *IntClient) GetOverflowInt32HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetOverflowInt64 - Get overflow Int64 value
func (client *IntClient) GetOverflowInt64(ctx context.Context, options *IntGetOverflowInt64Options) (*Int64Response, error) {
	req, err := client.GetOverflowInt64CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetOverflowInt64HandleError(resp)
	}
	result, err := client.GetOverflowInt64HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetOverflowInt64CreateRequest creates the GetOverflowInt64 request.
func (client *IntClient) GetOverflowInt64CreateRequest(ctx context.Context, options *IntGetOverflowInt64Options) (*azcore.Request, error) {
	urlPath := "/int/overflowint64"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetOverflowInt64HandleResponse handles the GetOverflowInt64 response.
func (client *IntClient) GetOverflowInt64HandleResponse(resp *azcore.Response) (*Int64Response, error) {
	result := Int64Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetOverflowInt64HandleError handles the GetOverflowInt64 error response.
func (client *IntClient) GetOverflowInt64HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetUnderflowInt32 - Get underflow Int32 value
func (client *IntClient) GetUnderflowInt32(ctx context.Context, options *IntGetUnderflowInt32Options) (*Int32Response, error) {
	req, err := client.GetUnderflowInt32CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetUnderflowInt32HandleError(resp)
	}
	result, err := client.GetUnderflowInt32HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetUnderflowInt32CreateRequest creates the GetUnderflowInt32 request.
func (client *IntClient) GetUnderflowInt32CreateRequest(ctx context.Context, options *IntGetUnderflowInt32Options) (*azcore.Request, error) {
	urlPath := "/int/underflowint32"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetUnderflowInt32HandleResponse handles the GetUnderflowInt32 response.
func (client *IntClient) GetUnderflowInt32HandleResponse(resp *azcore.Response) (*Int32Response, error) {
	result := Int32Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetUnderflowInt32HandleError handles the GetUnderflowInt32 error response.
func (client *IntClient) GetUnderflowInt32HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetUnderflowInt64 - Get underflow Int64 value
func (client *IntClient) GetUnderflowInt64(ctx context.Context, options *IntGetUnderflowInt64Options) (*Int64Response, error) {
	req, err := client.GetUnderflowInt64CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetUnderflowInt64HandleError(resp)
	}
	result, err := client.GetUnderflowInt64HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetUnderflowInt64CreateRequest creates the GetUnderflowInt64 request.
func (client *IntClient) GetUnderflowInt64CreateRequest(ctx context.Context, options *IntGetUnderflowInt64Options) (*azcore.Request, error) {
	urlPath := "/int/underflowint64"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetUnderflowInt64HandleResponse handles the GetUnderflowInt64 response.
func (client *IntClient) GetUnderflowInt64HandleResponse(resp *azcore.Response) (*Int64Response, error) {
	result := Int64Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetUnderflowInt64HandleError handles the GetUnderflowInt64 error response.
func (client *IntClient) GetUnderflowInt64HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetUnixTime - Get datetime encoded as Unix time value
func (client *IntClient) GetUnixTime(ctx context.Context, options *IntGetUnixTimeOptions) (*TimeResponse, error) {
	req, err := client.GetUnixTimeCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetUnixTimeHandleError(resp)
	}
	result, err := client.GetUnixTimeHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetUnixTimeCreateRequest creates the GetUnixTime request.
func (client *IntClient) GetUnixTimeCreateRequest(ctx context.Context, options *IntGetUnixTimeOptions) (*azcore.Request, error) {
	urlPath := "/int/unixtime"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetUnixTimeHandleResponse handles the GetUnixTime response.
func (client *IntClient) GetUnixTimeHandleResponse(resp *azcore.Response) (*TimeResponse, error) {
	var aux *timeUnix
	err := resp.UnmarshalAsJSON(&aux)
	return &TimeResponse{RawResponse: resp.Response, Value: (*time.Time)(aux)}, err
}

// GetUnixTimeHandleError handles the GetUnixTime error response.
func (client *IntClient) GetUnixTimeHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutMax32 - Put max int32 value
func (client *IntClient) PutMax32(ctx context.Context, intBody int32, options *IntPutMax32Options) (*http.Response, error) {
	req, err := client.PutMax32CreateRequest(ctx, intBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutMax32HandleError(resp)
	}
	return resp.Response, nil
}

// PutMax32CreateRequest creates the PutMax32 request.
func (client *IntClient) PutMax32CreateRequest(ctx context.Context, intBody int32, options *IntPutMax32Options) (*azcore.Request, error) {
	urlPath := "/int/max/32"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(intBody)
}

// PutMax32HandleError handles the PutMax32 error response.
func (client *IntClient) PutMax32HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutMax64 - Put max int64 value
func (client *IntClient) PutMax64(ctx context.Context, intBody int64, options *IntPutMax64Options) (*http.Response, error) {
	req, err := client.PutMax64CreateRequest(ctx, intBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutMax64HandleError(resp)
	}
	return resp.Response, nil
}

// PutMax64CreateRequest creates the PutMax64 request.
func (client *IntClient) PutMax64CreateRequest(ctx context.Context, intBody int64, options *IntPutMax64Options) (*azcore.Request, error) {
	urlPath := "/int/max/64"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(intBody)
}

// PutMax64HandleError handles the PutMax64 error response.
func (client *IntClient) PutMax64HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutMin32 - Put min int32 value
func (client *IntClient) PutMin32(ctx context.Context, intBody int32, options *IntPutMin32Options) (*http.Response, error) {
	req, err := client.PutMin32CreateRequest(ctx, intBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutMin32HandleError(resp)
	}
	return resp.Response, nil
}

// PutMin32CreateRequest creates the PutMin32 request.
func (client *IntClient) PutMin32CreateRequest(ctx context.Context, intBody int32, options *IntPutMin32Options) (*azcore.Request, error) {
	urlPath := "/int/min/32"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(intBody)
}

// PutMin32HandleError handles the PutMin32 error response.
func (client *IntClient) PutMin32HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutMin64 - Put min int64 value
func (client *IntClient) PutMin64(ctx context.Context, intBody int64, options *IntPutMin64Options) (*http.Response, error) {
	req, err := client.PutMin64CreateRequest(ctx, intBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutMin64HandleError(resp)
	}
	return resp.Response, nil
}

// PutMin64CreateRequest creates the PutMin64 request.
func (client *IntClient) PutMin64CreateRequest(ctx context.Context, intBody int64, options *IntPutMin64Options) (*azcore.Request, error) {
	urlPath := "/int/min/64"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(intBody)
}

// PutMin64HandleError handles the PutMin64 error response.
func (client *IntClient) PutMin64HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutUnixTimeDate - Put datetime encoded as Unix time
func (client *IntClient) PutUnixTimeDate(ctx context.Context, intBody time.Time, options *IntPutUnixTimeDateOptions) (*http.Response, error) {
	req, err := client.PutUnixTimeDateCreateRequest(ctx, intBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutUnixTimeDateHandleError(resp)
	}
	return resp.Response, nil
}

// PutUnixTimeDateCreateRequest creates the PutUnixTimeDate request.
func (client *IntClient) PutUnixTimeDateCreateRequest(ctx context.Context, intBody time.Time, options *IntPutUnixTimeDateOptions) (*azcore.Request, error) {
	urlPath := "/int/unixtime"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	aux := timeUnix(intBody)
	return req, req.MarshalAsJSON(aux)
}

// PutUnixTimeDateHandleError handles the PutUnixTimeDate error response.
func (client *IntClient) PutUnixTimeDateHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}
