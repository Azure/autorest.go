//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package custombaseurlgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
)

// PathsClient contains the methods for the Paths group.
// Don't use this type directly, use NewPathsClient() instead.
type PathsClient struct {
	host string
	pl   runtime.Pipeline
}

// NewPathsClient creates a new instance of PathsClient with the specified values.
// host - A string value that is used as a global part of the parameterized host
// pl - the pipeline used for sending requests and handling responses.
func NewPathsClient(host *string, pl runtime.Pipeline) *PathsClient {
	client := &PathsClient{
		host: "host",
		pl:   pl,
	}
	if host != nil {
		client.host = *host
	}
	return client
}

// GetEmpty - Get a 200 to test a valid base uri
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.0
// accountName - Account Name
// options - PathsClientGetEmptyOptions contains the optional parameters for the PathsClient.GetEmpty method.
func (client *PathsClient) GetEmpty(ctx context.Context, accountName string, options *PathsClientGetEmptyOptions) (PathsClientGetEmptyResponse, error) {
	req, err := client.getEmptyCreateRequest(ctx, accountName, options)
	if err != nil {
		return PathsClientGetEmptyResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PathsClientGetEmptyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PathsClientGetEmptyResponse{}, runtime.NewResponseError(resp)
	}
	return PathsClientGetEmptyResponse{}, nil
}

// getEmptyCreateRequest creates the GetEmpty request.
func (client *PathsClient) getEmptyCreateRequest(ctx context.Context, accountName string, options *PathsClientGetEmptyOptions) (*policy.Request, error) {
	host := "http://{accountName}{host}"
	host = strings.ReplaceAll(host, "{host}", client.host)
	host = strings.ReplaceAll(host, "{accountName}", accountName)
	urlPath := "/customuri"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}
