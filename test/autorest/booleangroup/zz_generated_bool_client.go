//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package booleangroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// BoolClient contains the methods for the Bool group.
// Don't use this type directly, use NewBoolClient() instead.
type BoolClient struct {
	pl runtime.Pipeline
}

// NewBoolClient creates a new instance of BoolClient with the specified values.
// options - pass nil to accept the default values.
func NewBoolClient(options *azcore.ClientOptions) *BoolClient {
	if options == nil {
		options = &azcore.ClientOptions{}
	}
	client := &BoolClient{
		pl: runtime.NewPipeline(moduleName, moduleVersion, runtime.PipelineOptions{}, options),
	}
	return client
}

// GetFalse - Get false Boolean value
// If the operation fails it returns an *azcore.ResponseError type.
// options - BoolClientGetFalseOptions contains the optional parameters for the BoolClient.GetFalse method.
func (client *BoolClient) GetFalse(ctx context.Context, options *BoolClientGetFalseOptions) (BoolClientGetFalseResponse, error) {
	req, err := client.getFalseCreateRequest(ctx, options)
	if err != nil {
		return BoolClientGetFalseResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return BoolClientGetFalseResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return BoolClientGetFalseResponse{}, runtime.NewResponseError(resp)
	}
	return client.getFalseHandleResponse(resp)
}

// getFalseCreateRequest creates the GetFalse request.
func (client *BoolClient) getFalseCreateRequest(ctx context.Context, options *BoolClientGetFalseOptions) (*policy.Request, error) {
	urlPath := "/bool/false"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getFalseHandleResponse handles the GetFalse response.
func (client *BoolClient) getFalseHandleResponse(resp *http.Response) (BoolClientGetFalseResponse, error) {
	result := BoolClientGetFalseResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return BoolClientGetFalseResponse{}, err
	}
	return result, nil
}

// GetInvalid - Get invalid Boolean value
// If the operation fails it returns an *azcore.ResponseError type.
// options - BoolClientGetInvalidOptions contains the optional parameters for the BoolClient.GetInvalid method.
func (client *BoolClient) GetInvalid(ctx context.Context, options *BoolClientGetInvalidOptions) (BoolClientGetInvalidResponse, error) {
	req, err := client.getInvalidCreateRequest(ctx, options)
	if err != nil {
		return BoolClientGetInvalidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return BoolClientGetInvalidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return BoolClientGetInvalidResponse{}, runtime.NewResponseError(resp)
	}
	return client.getInvalidHandleResponse(resp)
}

// getInvalidCreateRequest creates the GetInvalid request.
func (client *BoolClient) getInvalidCreateRequest(ctx context.Context, options *BoolClientGetInvalidOptions) (*policy.Request, error) {
	urlPath := "/bool/invalid"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getInvalidHandleResponse handles the GetInvalid response.
func (client *BoolClient) getInvalidHandleResponse(resp *http.Response) (BoolClientGetInvalidResponse, error) {
	result := BoolClientGetInvalidResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return BoolClientGetInvalidResponse{}, err
	}
	return result, nil
}

// GetNull - Get null Boolean value
// If the operation fails it returns an *azcore.ResponseError type.
// options - BoolClientGetNullOptions contains the optional parameters for the BoolClient.GetNull method.
func (client *BoolClient) GetNull(ctx context.Context, options *BoolClientGetNullOptions) (BoolClientGetNullResponse, error) {
	req, err := client.getNullCreateRequest(ctx, options)
	if err != nil {
		return BoolClientGetNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return BoolClientGetNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return BoolClientGetNullResponse{}, runtime.NewResponseError(resp)
	}
	return client.getNullHandleResponse(resp)
}

// getNullCreateRequest creates the GetNull request.
func (client *BoolClient) getNullCreateRequest(ctx context.Context, options *BoolClientGetNullOptions) (*policy.Request, error) {
	urlPath := "/bool/null"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getNullHandleResponse handles the GetNull response.
func (client *BoolClient) getNullHandleResponse(resp *http.Response) (BoolClientGetNullResponse, error) {
	result := BoolClientGetNullResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return BoolClientGetNullResponse{}, err
	}
	return result, nil
}

// GetTrue - Get true Boolean value
// If the operation fails it returns an *azcore.ResponseError type.
// options - BoolClientGetTrueOptions contains the optional parameters for the BoolClient.GetTrue method.
func (client *BoolClient) GetTrue(ctx context.Context, options *BoolClientGetTrueOptions) (BoolClientGetTrueResponse, error) {
	req, err := client.getTrueCreateRequest(ctx, options)
	if err != nil {
		return BoolClientGetTrueResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return BoolClientGetTrueResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return BoolClientGetTrueResponse{}, runtime.NewResponseError(resp)
	}
	return client.getTrueHandleResponse(resp)
}

// getTrueCreateRequest creates the GetTrue request.
func (client *BoolClient) getTrueCreateRequest(ctx context.Context, options *BoolClientGetTrueOptions) (*policy.Request, error) {
	urlPath := "/bool/true"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getTrueHandleResponse handles the GetTrue response.
func (client *BoolClient) getTrueHandleResponse(resp *http.Response) (BoolClientGetTrueResponse, error) {
	result := BoolClientGetTrueResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return BoolClientGetTrueResponse{}, err
	}
	return result, nil
}

// PutFalse - Set Boolean value false
// If the operation fails it returns an *azcore.ResponseError type.
// options - BoolClientPutFalseOptions contains the optional parameters for the BoolClient.PutFalse method.
func (client *BoolClient) PutFalse(ctx context.Context, options *BoolClientPutFalseOptions) (BoolClientPutFalseResponse, error) {
	req, err := client.putFalseCreateRequest(ctx, options)
	if err != nil {
		return BoolClientPutFalseResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return BoolClientPutFalseResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return BoolClientPutFalseResponse{}, runtime.NewResponseError(resp)
	}
	return BoolClientPutFalseResponse{}, nil
}

// putFalseCreateRequest creates the PutFalse request.
func (client *BoolClient) putFalseCreateRequest(ctx context.Context, options *BoolClientPutFalseOptions) (*policy.Request, error) {
	urlPath := "/bool/false"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, false)
}

// PutTrue - Set Boolean value true
// If the operation fails it returns an *azcore.ResponseError type.
// options - BoolClientPutTrueOptions contains the optional parameters for the BoolClient.PutTrue method.
func (client *BoolClient) PutTrue(ctx context.Context, options *BoolClientPutTrueOptions) (BoolClientPutTrueResponse, error) {
	req, err := client.putTrueCreateRequest(ctx, options)
	if err != nil {
		return BoolClientPutTrueResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return BoolClientPutTrueResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return BoolClientPutTrueResponse{}, runtime.NewResponseError(resp)
	}
	return BoolClientPutTrueResponse{}, nil
}

// putTrueCreateRequest creates the PutTrue request.
func (client *BoolClient) putTrueCreateRequest(ctx context.Context, options *BoolClientPutTrueOptions) (*policy.Request, error) {
	urlPath := "/bool/true"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, true)
}
