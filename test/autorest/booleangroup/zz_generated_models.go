// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package booleangroup

import (
	"fmt"
	"net/http"
)

// BoolGetFalseOptions contains the optional parameters for the Bool.GetFalse method.
type BoolGetFalseOptions struct {
	// placeholder for future optional parameters
}

// BoolGetInvalidOptions contains the optional parameters for the Bool.GetInvalid method.
type BoolGetInvalidOptions struct {
	// placeholder for future optional parameters
}

// BoolGetNullOptions contains the optional parameters for the Bool.GetNull method.
type BoolGetNullOptions struct {
	// placeholder for future optional parameters
}

// BoolGetTrueOptions contains the optional parameters for the Bool.GetTrue method.
type BoolGetTrueOptions struct {
	// placeholder for future optional parameters
}

// BoolPutFalseOptions contains the optional parameters for the Bool.PutFalse method.
type BoolPutFalseOptions struct {
	// placeholder for future optional parameters
}

// BoolPutTrueOptions contains the optional parameters for the Bool.PutTrue method.
type BoolPutTrueOptions struct {
	// placeholder for future optional parameters
}

// BoolResponse is the response envelope for operations that return a bool type.
type BoolResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// simple boolean
	Value *bool
}

type Error struct {
	Message *string `json:"message,omitempty"`
	Status  *int32  `json:"status,omitempty"`
}

// Error implements the error interface for type Error.
func (e Error) Error() string {
	msg := ""
	if e.Message != nil {
		msg += fmt.Sprintf("Message: %v\n", *e.Message)
	}
	if e.Status != nil {
		msg += fmt.Sprintf("Status: %v\n", *e.Status)
	}
	if msg == "" {
		msg = "missing error info"
	}
	return msg
}
