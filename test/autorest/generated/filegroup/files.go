// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package filegroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"path"
)

// FilesOperations contains the methods for the Files group.
type FilesOperations interface {
	// GetEmptyFile - Get empty file
	GetEmptyFile(ctx context.Context) (*FilesGetEmptyFileResponse, error)
	// GetFile - Get file
	GetFile(ctx context.Context) (*FilesGetFileResponse, error)
	// GetFileLarge - Get a large file
	GetFileLarge(ctx context.Context) (*FilesGetFileLargeResponse, error)
}

// filesOperations implements the FilesOperations interface.
type filesOperations struct {
	*Client
}

// GetEmptyFile - Get empty file
func (client *filesOperations) GetEmptyFile(ctx context.Context) (*FilesGetEmptyFileResponse, error) {
	req, err := client.getEmptyFileCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getEmptyFileHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getEmptyFileCreateRequest creates the GetEmptyFile request.
func (client *filesOperations) getEmptyFileCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/files/stream/empty"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodGet, u)
	req.SkipBodyDownload()
	return req, nil
}

// getEmptyFileHandleResponse handles the GetEmptyFile response.
func (client *filesOperations) getEmptyFileHandleResponse(resp *azcore.Response) (*FilesGetEmptyFileResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &FilesGetEmptyFileResponse{RawResponse: resp.Response}, nil
}

// GetFile - Get file
func (client *filesOperations) GetFile(ctx context.Context) (*FilesGetFileResponse, error) {
	req, err := client.getFileCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getFileHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getFileCreateRequest creates the GetFile request.
func (client *filesOperations) getFileCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/files/stream/nonempty"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodGet, u)
	req.SkipBodyDownload()
	return req, nil
}

// getFileHandleResponse handles the GetFile response.
func (client *filesOperations) getFileHandleResponse(resp *azcore.Response) (*FilesGetFileResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &FilesGetFileResponse{RawResponse: resp.Response}, nil
}

// GetFileLarge - Get a large file
func (client *filesOperations) GetFileLarge(ctx context.Context) (*FilesGetFileLargeResponse, error) {
	req, err := client.getFileLargeCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getFileLargeHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getFileLargeCreateRequest creates the GetFileLarge request.
func (client *filesOperations) getFileLargeCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/files/stream/verylarge"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodGet, u)
	req.SkipBodyDownload()
	return req, nil
}

// getFileLargeHandleResponse handles the GetFileLarge response.
func (client *filesOperations) getFileLargeHandleResponse(resp *azcore.Response) (*FilesGetFileLargeResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &FilesGetFileLargeResponse{RawResponse: resp.Response}, nil
}
