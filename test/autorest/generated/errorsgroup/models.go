// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package errorsgroup

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type Animal struct {
	AniType *string `json:"aniType,omitempty"`
}

type AnimalNotFound struct {
	NotFoundErrorBase
	Name *string `json:"name,omitempty"`
}

func (a *AnimalNotFound) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for k, v := range rawMsg {
		var err error
		switch k {
		case "name":
			if v != nil {
				err = json.Unmarshal(*v, &a.Name)
			}
		}
		if err != nil {
			return err
		}
	}
	return json.Unmarshal(data, &a.NotFoundErrorBase)
}

type BaseError struct {
	SomeBaseProp *string `json:"someBaseProp,omitempty"`
}

type LinkNotFound struct {
	NotFoundErrorBase
	WhatSubAddress *string `json:"whatSubAddress,omitempty"`
}

func (l *LinkNotFound) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for k, v := range rawMsg {
		var err error
		switch k {
		case "whatSubAddress":
			if v != nil {
				err = json.Unmarshal(*v, &l.WhatSubAddress)
			}
		}
		if err != nil {
			return err
		}
	}
	return json.Unmarshal(data, &l.NotFoundErrorBase)
}

// NotFoundErrorBaseClassification provides polymorphic access to related types.
type NotFoundErrorBaseClassification interface {
	error
	GetNotFoundErrorBase() *NotFoundErrorBase
}

type NotFoundErrorBase struct {
	BaseError
	Reason       *string `json:"reason,omitempty"`
	WhatNotFound *string `json:"whatNotFound,omitempty"`
}

func (e NotFoundErrorBase) Error() string {
	msg := ""
	if e.Reason != nil {
		msg += fmt.Sprintf("Reason: %v\n", *e.Reason)
	}
	if e.WhatNotFound != nil {
		msg += fmt.Sprintf("WhatNotFound: %v\n", *e.WhatNotFound)
	}
	if msg == "" {
		msg = "missing error info"
	}
	return msg
}

func (n *NotFoundErrorBase) GetNotFoundErrorBase() *NotFoundErrorBase { return n }

func (n *NotFoundErrorBase) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for k, v := range rawMsg {
		var err error
		switch k {
		case "reason":
			if v != nil {
				err = json.Unmarshal(*v, &n.Reason)
			}
		case "whatNotFound":
			if v != nil {
				err = json.Unmarshal(*v, &n.WhatNotFound)
			}
		}
		if err != nil {
			return err
		}
	}
	return json.Unmarshal(data, &n.BaseError)
}

type Pet struct {
	Animal
	// Gets the Pet by id.
	Name *string `json:"name,omitempty"`
}

type PetAction struct {
	// action feedback
	ActionResponse *string `json:"actionResponse,omitempty"`
}

// PetActionErrorClassification provides polymorphic access to related types.
type PetActionErrorClassification interface {
	error
	GetPetActionError() *PetActionError
}

type PetActionError struct {
	// the error message
	ErrorMessage *string `json:"errorMessage,omitempty"`
	ErrorType    *string `json:"errorType,omitempty"`
}

func (e PetActionError) Error() string {
	msg := ""
	if e.ErrorMessage != nil {
		msg += fmt.Sprintf("ErrorMessage: %v\n", *e.ErrorMessage)
	}
	if e.ErrorType != nil {
		msg += fmt.Sprintf("ErrorType: %v\n", *e.ErrorType)
	}
	if msg == "" {
		msg = "missing error info"
	}
	return msg
}

func (p *PetActionError) GetPetActionError() *PetActionError { return p }

func (p *PetActionError) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for k, v := range rawMsg {
		var err error
		switch k {
		case "errorMessage":
			if v != nil {
				err = json.Unmarshal(*v, &p.ErrorMessage)
			}
		case "errorType":
			if v != nil {
				err = json.Unmarshal(*v, &p.ErrorType)
			}
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// PetActionResponse is the response envelope for operations that return a PetAction type.
type PetActionResponse struct {
	PetAction *PetAction

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

type PetHungryOrThirstyError struct {
	PetSadError
	// is the pet hungry or thirsty or both
	HungryOrThirsty *string `json:"hungryOrThirsty,omitempty"`
}

func (p *PetHungryOrThirstyError) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for k, v := range rawMsg {
		var err error
		switch k {
		case "hungryOrThirsty":
			if v != nil {
				err = json.Unmarshal(*v, &p.HungryOrThirsty)
			}
		}
		if err != nil {
			return err
		}
	}
	return json.Unmarshal(data, &p.PetSadError)
}

// PetResponse is the response envelope for operations that return a Pet type.
type PetResponse struct {
	Pet *Pet

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PetSadErrorClassification provides polymorphic access to related types.
type PetSadErrorClassification interface {
	PetActionErrorClassification
	GetPetSadError() *PetSadError
}

type PetSadError struct {
	PetActionError
	// why is the pet sad
	Reason *string `json:"reason,omitempty"`
}

func (p *PetSadError) GetPetSadError() *PetSadError { return p }

func (p *PetSadError) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for k, v := range rawMsg {
		var err error
		switch k {
		case "reason":
			if v != nil {
				err = json.Unmarshal(*v, &p.Reason)
			}
		}
		if err != nil {
			return err
		}
	}
	return json.Unmarshal(data, &p.PetActionError)
}
