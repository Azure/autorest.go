// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package validationgroup

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// AutoRestValidationTestOperations contains the methods for the AutoRestValidationTest group.
type AutoRestValidationTestOperations interface {
	GetWithConstantInPath(ctx context.Context) (*http.Response, error)
	PostWithConstantInBody(ctx context.Context, autoRestValidationTestPostWithConstantInBodyOptions *AutoRestValidationTestPostWithConstantInBodyOptions) (*ProductResponse, error)
	// ValidationOfBody - Validates body parameters on the method. See swagger for details.
	ValidationOfBody(ctx context.Context, resourceGroupName string, id int32, autoRestValidationTestValidationOfBodyOptions *AutoRestValidationTestValidationOfBodyOptions) (*ProductResponse, error)
	// ValidationOfMethodParameters - Validates input parameters on the method. See swagger for details.
	ValidationOfMethodParameters(ctx context.Context, resourceGroupName string, id int32) (*ProductResponse, error)
}

// autoRestValidationTestOperations implements the AutoRestValidationTestOperations interface.
type autoRestValidationTestOperations struct {
	*Client
	subscriptionID string
}

func (client *autoRestValidationTestOperations) GetWithConstantInPath(ctx context.Context) (*http.Response, error) {
	req, err := client.getWithConstantInPathCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getWithConstantInPathHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getWithConstantInPathCreateRequest creates the GetWithConstantInPath request.
func (client *autoRestValidationTestOperations) getWithConstantInPathCreateRequest() (*azcore.Request, error) {
	urlPath := "/validation/constantsInPath/{constantParam}/value"
	urlPath = strings.ReplaceAll(urlPath, "{constantParam}", url.PathEscape("constant"))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getWithConstantInPathHandleResponse handles the GetWithConstantInPath response.
func (client *autoRestValidationTestOperations) getWithConstantInPathHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getWithConstantInPathHandleError(resp)
	}
	return resp.Response, nil
}

// getWithConstantInPathHandleError handles the GetWithConstantInPath error response.
func (client *autoRestValidationTestOperations) getWithConstantInPathHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

func (client *autoRestValidationTestOperations) PostWithConstantInBody(ctx context.Context, autoRestValidationTestPostWithConstantInBodyOptions *AutoRestValidationTestPostWithConstantInBodyOptions) (*ProductResponse, error) {
	req, err := client.postWithConstantInBodyCreateRequest(autoRestValidationTestPostWithConstantInBodyOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.postWithConstantInBodyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// postWithConstantInBodyCreateRequest creates the PostWithConstantInBody request.
func (client *autoRestValidationTestOperations) postWithConstantInBodyCreateRequest(autoRestValidationTestPostWithConstantInBodyOptions *AutoRestValidationTestPostWithConstantInBodyOptions) (*azcore.Request, error) {
	urlPath := "/validation/constantsInPath/{constantParam}/value"
	urlPath = strings.ReplaceAll(urlPath, "{constantParam}", url.PathEscape("constant"))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	if autoRestValidationTestPostWithConstantInBodyOptions != nil {
		return req, req.MarshalAsJSON(autoRestValidationTestPostWithConstantInBodyOptions.Body)
	}
	return req, nil
}

// postWithConstantInBodyHandleResponse handles the PostWithConstantInBody response.
func (client *autoRestValidationTestOperations) postWithConstantInBodyHandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.postWithConstantInBodyHandleError(resp)
	}
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// postWithConstantInBodyHandleError handles the PostWithConstantInBody error response.
func (client *autoRestValidationTestOperations) postWithConstantInBodyHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// ValidationOfBody - Validates body parameters on the method. See swagger for details.
func (client *autoRestValidationTestOperations) ValidationOfBody(ctx context.Context, resourceGroupName string, id int32, autoRestValidationTestValidationOfBodyOptions *AutoRestValidationTestValidationOfBodyOptions) (*ProductResponse, error) {
	req, err := client.validationOfBodyCreateRequest(resourceGroupName, id, autoRestValidationTestValidationOfBodyOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.validationOfBodyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// validationOfBodyCreateRequest creates the ValidationOfBody request.
func (client *autoRestValidationTestOperations) validationOfBodyCreateRequest(resourceGroupName string, id int32, autoRestValidationTestValidationOfBodyOptions *AutoRestValidationTestValidationOfBodyOptions) (*azcore.Request, error) {
	urlPath := "/fakepath/{subscriptionId}/{resourceGroupName}/{id}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(strconv.FormatInt(int64(id), 10)))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("apiVersion", "1.0.0")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	if autoRestValidationTestValidationOfBodyOptions != nil {
		return req, req.MarshalAsJSON(autoRestValidationTestValidationOfBodyOptions.Body)
	}
	return req, nil
}

// validationOfBodyHandleResponse handles the ValidationOfBody response.
func (client *autoRestValidationTestOperations) validationOfBodyHandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.validationOfBodyHandleError(resp)
	}
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// validationOfBodyHandleError handles the ValidationOfBody error response.
func (client *autoRestValidationTestOperations) validationOfBodyHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ValidationOfMethodParameters - Validates input parameters on the method. See swagger for details.
func (client *autoRestValidationTestOperations) ValidationOfMethodParameters(ctx context.Context, resourceGroupName string, id int32) (*ProductResponse, error) {
	req, err := client.validationOfMethodParametersCreateRequest(resourceGroupName, id)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.validationOfMethodParametersHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// validationOfMethodParametersCreateRequest creates the ValidationOfMethodParameters request.
func (client *autoRestValidationTestOperations) validationOfMethodParametersCreateRequest(resourceGroupName string, id int32) (*azcore.Request, error) {
	urlPath := "/fakepath/{subscriptionId}/{resourceGroupName}/{id}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(strconv.FormatInt(int64(id), 10)))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("apiVersion", "1.0.0")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// validationOfMethodParametersHandleResponse handles the ValidationOfMethodParameters response.
func (client *autoRestValidationTestOperations) validationOfMethodParametersHandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.validationOfMethodParametersHandleError(resp)
	}
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// validationOfMethodParametersHandleError handles the ValidationOfMethodParameters error response.
func (client *autoRestValidationTestOperations) validationOfMethodParametersHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
