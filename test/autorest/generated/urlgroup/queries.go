// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package urlgroup

import (
	"context"
	"encoding/base64"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"strconv"
	"strings"
	"time"
)

// QueriesOperations contains the methods for the Queries group.
type QueriesOperations interface {
	// ArrayStringCSVEmpty - Get an empty array [] of string using the csv-array format
	ArrayStringCSVEmpty(ctx context.Context, queriesArrayStringCsvEmptyOptions *QueriesArrayStringCSVEmptyOptions) (*http.Response, error)
	// ArrayStringCSVNull - Get a null array of string using the csv-array format
	ArrayStringCSVNull(ctx context.Context, queriesArrayStringCsvNullOptions *QueriesArrayStringCSVNullOptions) (*http.Response, error)
	// ArrayStringCSVValid - Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the csv-array format
	ArrayStringCSVValid(ctx context.Context, queriesArrayStringCsvValidOptions *QueriesArrayStringCSVValidOptions) (*http.Response, error)
	// ArrayStringPipesValid - Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the pipes-array format
	ArrayStringPipesValid(ctx context.Context, queriesArrayStringPipesValidOptions *QueriesArrayStringPipesValidOptions) (*http.Response, error)
	// ArrayStringSsvValid - Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the ssv-array format
	ArrayStringSsvValid(ctx context.Context, queriesArrayStringSsvValidOptions *QueriesArrayStringSsvValidOptions) (*http.Response, error)
	// ArrayStringTsvValid - Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the tsv-array format
	ArrayStringTsvValid(ctx context.Context, queriesArrayStringTsvValidOptions *QueriesArrayStringTsvValidOptions) (*http.Response, error)
	// ByteEmpty - Get '' as byte array
	ByteEmpty(ctx context.Context) (*http.Response, error)
	// ByteMultiByte - Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
	ByteMultiByte(ctx context.Context, queriesByteMultiByteOptions *QueriesByteMultiByteOptions) (*http.Response, error)
	// ByteNull - Get null as byte array (no query parameters in uri)
	ByteNull(ctx context.Context, queriesByteNullOptions *QueriesByteNullOptions) (*http.Response, error)
	// DateNull - Get null as date - this should result in no query parameters in uri
	DateNull(ctx context.Context, queriesDateNullOptions *QueriesDateNullOptions) (*http.Response, error)
	// DateTimeNull - Get null as date-time, should result in no query parameters in uri
	DateTimeNull(ctx context.Context, queriesDateTimeNullOptions *QueriesDateTimeNullOptions) (*http.Response, error)
	// DateTimeValid - Get '2012-01-01T01:01:01Z' as date-time
	DateTimeValid(ctx context.Context) (*http.Response, error)
	// DateValid - Get '2012-01-01' as date
	DateValid(ctx context.Context) (*http.Response, error)
	// DoubleDecimalNegative - Get '-9999999.999' numeric value
	DoubleDecimalNegative(ctx context.Context) (*http.Response, error)
	// DoubleDecimalPositive - Get '9999999.999' numeric value
	DoubleDecimalPositive(ctx context.Context) (*http.Response, error)
	// DoubleNull - Get null numeric value (no query parameter)
	DoubleNull(ctx context.Context, queriesDoubleNullOptions *QueriesDoubleNullOptions) (*http.Response, error)
	// EnumNull - Get null (no query parameter in url)
	EnumNull(ctx context.Context, queriesEnumNullOptions *QueriesEnumNullOptions) (*http.Response, error)
	// EnumValid - Get using uri with query parameter 'green color'
	EnumValid(ctx context.Context, queriesEnumValidOptions *QueriesEnumValidOptions) (*http.Response, error)
	// FloatNull - Get null numeric value (no query parameter)
	FloatNull(ctx context.Context, queriesFloatNullOptions *QueriesFloatNullOptions) (*http.Response, error)
	// FloatScientificNegative - Get '-1.034E-20' numeric value
	FloatScientificNegative(ctx context.Context) (*http.Response, error)
	// FloatScientificPositive - Get '1.034E+20' numeric value
	FloatScientificPositive(ctx context.Context) (*http.Response, error)
	// GetBooleanFalse - Get false Boolean value on path
	GetBooleanFalse(ctx context.Context) (*http.Response, error)
	// GetBooleanNull - Get null Boolean value on query (query string should be absent)
	GetBooleanNull(ctx context.Context, queriesGetBooleanNullOptions *QueriesGetBooleanNullOptions) (*http.Response, error)
	// GetBooleanTrue - Get true Boolean value on path
	GetBooleanTrue(ctx context.Context) (*http.Response, error)
	// GetIntNegativeOneMillion - Get '-1000000' integer value
	GetIntNegativeOneMillion(ctx context.Context) (*http.Response, error)
	// GetIntNull - Get null integer value (no query parameter)
	GetIntNull(ctx context.Context, queriesGetIntNullOptions *QueriesGetIntNullOptions) (*http.Response, error)
	// GetIntOneMillion - Get '1000000' integer value
	GetIntOneMillion(ctx context.Context) (*http.Response, error)
	// GetLongNull - Get 'null 64 bit integer value (no query param in uri)
	GetLongNull(ctx context.Context, queriesGetLongNullOptions *QueriesGetLongNullOptions) (*http.Response, error)
	// GetNegativeTenBillion - Get '-10000000000' 64 bit integer value
	GetNegativeTenBillion(ctx context.Context) (*http.Response, error)
	// GetTenBillion - Get '10000000000' 64 bit integer value
	GetTenBillion(ctx context.Context) (*http.Response, error)
	// StringEmpty - Get ''
	StringEmpty(ctx context.Context) (*http.Response, error)
	// StringNull - Get null (no query parameter in url)
	StringNull(ctx context.Context, queriesStringNullOptions *QueriesStringNullOptions) (*http.Response, error)
	// StringURLEncoded - Get 'begin!*'();:@ &=+$,/?#[]end
	StringURLEncoded(ctx context.Context) (*http.Response, error)
	// StringUnicode - Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value
	StringUnicode(ctx context.Context) (*http.Response, error)
}

// queriesOperations implements the QueriesOperations interface.
type queriesOperations struct {
	*Client
}

// ArrayStringCSVEmpty - Get an empty array [] of string using the csv-array format
func (client *queriesOperations) ArrayStringCSVEmpty(ctx context.Context, queriesArrayStringCsvEmptyOptions *QueriesArrayStringCSVEmptyOptions) (*http.Response, error) {
	req, err := client.arrayStringCsvEmptyCreateRequest(queriesArrayStringCsvEmptyOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.arrayStringCsvEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// arrayStringCsvEmptyCreateRequest creates the ArrayStringCSVEmpty request.
func (client *queriesOperations) arrayStringCsvEmptyCreateRequest(queriesArrayStringCsvEmptyOptions *QueriesArrayStringCSVEmptyOptions) (*azcore.Request, error) {
	urlPath := "/queries/array/csv/string/empty"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if queriesArrayStringCsvEmptyOptions != nil && queriesArrayStringCsvEmptyOptions.ArrayQuery != nil {
		query.Set("arrayQuery", strings.Join(*queriesArrayStringCsvEmptyOptions.ArrayQuery, ","))
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// arrayStringCsvEmptyHandleResponse handles the ArrayStringCSVEmpty response.
func (client *queriesOperations) arrayStringCsvEmptyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.arrayStringCsvEmptyHandleError(resp)
	}
	return resp.Response, nil
}

// arrayStringCsvEmptyHandleError handles the ArrayStringCSVEmpty error response.
func (client *queriesOperations) arrayStringCsvEmptyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ArrayStringCSVNull - Get a null array of string using the csv-array format
func (client *queriesOperations) ArrayStringCSVNull(ctx context.Context, queriesArrayStringCsvNullOptions *QueriesArrayStringCSVNullOptions) (*http.Response, error) {
	req, err := client.arrayStringCsvNullCreateRequest(queriesArrayStringCsvNullOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.arrayStringCsvNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// arrayStringCsvNullCreateRequest creates the ArrayStringCSVNull request.
func (client *queriesOperations) arrayStringCsvNullCreateRequest(queriesArrayStringCsvNullOptions *QueriesArrayStringCSVNullOptions) (*azcore.Request, error) {
	urlPath := "/queries/array/csv/string/null"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if queriesArrayStringCsvNullOptions != nil && queriesArrayStringCsvNullOptions.ArrayQuery != nil {
		query.Set("arrayQuery", strings.Join(*queriesArrayStringCsvNullOptions.ArrayQuery, ","))
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// arrayStringCsvNullHandleResponse handles the ArrayStringCSVNull response.
func (client *queriesOperations) arrayStringCsvNullHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.arrayStringCsvNullHandleError(resp)
	}
	return resp.Response, nil
}

// arrayStringCsvNullHandleError handles the ArrayStringCSVNull error response.
func (client *queriesOperations) arrayStringCsvNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ArrayStringCSVValid - Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the csv-array format
func (client *queriesOperations) ArrayStringCSVValid(ctx context.Context, queriesArrayStringCsvValidOptions *QueriesArrayStringCSVValidOptions) (*http.Response, error) {
	req, err := client.arrayStringCsvValidCreateRequest(queriesArrayStringCsvValidOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.arrayStringCsvValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// arrayStringCsvValidCreateRequest creates the ArrayStringCSVValid request.
func (client *queriesOperations) arrayStringCsvValidCreateRequest(queriesArrayStringCsvValidOptions *QueriesArrayStringCSVValidOptions) (*azcore.Request, error) {
	urlPath := "/queries/array/csv/string/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if queriesArrayStringCsvValidOptions != nil && queriesArrayStringCsvValidOptions.ArrayQuery != nil {
		query.Set("arrayQuery", strings.Join(*queriesArrayStringCsvValidOptions.ArrayQuery, ","))
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// arrayStringCsvValidHandleResponse handles the ArrayStringCSVValid response.
func (client *queriesOperations) arrayStringCsvValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.arrayStringCsvValidHandleError(resp)
	}
	return resp.Response, nil
}

// arrayStringCsvValidHandleError handles the ArrayStringCSVValid error response.
func (client *queriesOperations) arrayStringCsvValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ArrayStringPipesValid - Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the pipes-array format
func (client *queriesOperations) ArrayStringPipesValid(ctx context.Context, queriesArrayStringPipesValidOptions *QueriesArrayStringPipesValidOptions) (*http.Response, error) {
	req, err := client.arrayStringPipesValidCreateRequest(queriesArrayStringPipesValidOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.arrayStringPipesValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// arrayStringPipesValidCreateRequest creates the ArrayStringPipesValid request.
func (client *queriesOperations) arrayStringPipesValidCreateRequest(queriesArrayStringPipesValidOptions *QueriesArrayStringPipesValidOptions) (*azcore.Request, error) {
	urlPath := "/queries/array/pipes/string/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if queriesArrayStringPipesValidOptions != nil && queriesArrayStringPipesValidOptions.ArrayQuery != nil {
		query.Set("arrayQuery", strings.Join(*queriesArrayStringPipesValidOptions.ArrayQuery, "|"))
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// arrayStringPipesValidHandleResponse handles the ArrayStringPipesValid response.
func (client *queriesOperations) arrayStringPipesValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.arrayStringPipesValidHandleError(resp)
	}
	return resp.Response, nil
}

// arrayStringPipesValidHandleError handles the ArrayStringPipesValid error response.
func (client *queriesOperations) arrayStringPipesValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ArrayStringSsvValid - Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the ssv-array format
func (client *queriesOperations) ArrayStringSsvValid(ctx context.Context, queriesArrayStringSsvValidOptions *QueriesArrayStringSsvValidOptions) (*http.Response, error) {
	req, err := client.arrayStringSsvValidCreateRequest(queriesArrayStringSsvValidOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.arrayStringSsvValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// arrayStringSsvValidCreateRequest creates the ArrayStringSsvValid request.
func (client *queriesOperations) arrayStringSsvValidCreateRequest(queriesArrayStringSsvValidOptions *QueriesArrayStringSsvValidOptions) (*azcore.Request, error) {
	urlPath := "/queries/array/ssv/string/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if queriesArrayStringSsvValidOptions != nil && queriesArrayStringSsvValidOptions.ArrayQuery != nil {
		query.Set("arrayQuery", strings.Join(*queriesArrayStringSsvValidOptions.ArrayQuery, " "))
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// arrayStringSsvValidHandleResponse handles the ArrayStringSsvValid response.
func (client *queriesOperations) arrayStringSsvValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.arrayStringSsvValidHandleError(resp)
	}
	return resp.Response, nil
}

// arrayStringSsvValidHandleError handles the ArrayStringSsvValid error response.
func (client *queriesOperations) arrayStringSsvValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ArrayStringTsvValid - Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the tsv-array format
func (client *queriesOperations) ArrayStringTsvValid(ctx context.Context, queriesArrayStringTsvValidOptions *QueriesArrayStringTsvValidOptions) (*http.Response, error) {
	req, err := client.arrayStringTsvValidCreateRequest(queriesArrayStringTsvValidOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.arrayStringTsvValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// arrayStringTsvValidCreateRequest creates the ArrayStringTsvValid request.
func (client *queriesOperations) arrayStringTsvValidCreateRequest(queriesArrayStringTsvValidOptions *QueriesArrayStringTsvValidOptions) (*azcore.Request, error) {
	urlPath := "/queries/array/tsv/string/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if queriesArrayStringTsvValidOptions != nil && queriesArrayStringTsvValidOptions.ArrayQuery != nil {
		query.Set("arrayQuery", strings.Join(*queriesArrayStringTsvValidOptions.ArrayQuery, "\t"))
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// arrayStringTsvValidHandleResponse handles the ArrayStringTsvValid response.
func (client *queriesOperations) arrayStringTsvValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.arrayStringTsvValidHandleError(resp)
	}
	return resp.Response, nil
}

// arrayStringTsvValidHandleError handles the ArrayStringTsvValid error response.
func (client *queriesOperations) arrayStringTsvValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ByteEmpty - Get '' as byte array
func (client *queriesOperations) ByteEmpty(ctx context.Context) (*http.Response, error) {
	req, err := client.byteEmptyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.byteEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// byteEmptyCreateRequest creates the ByteEmpty request.
func (client *queriesOperations) byteEmptyCreateRequest() (*azcore.Request, error) {
	urlPath := "/queries/byte/empty"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("byteQuery", "")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// byteEmptyHandleResponse handles the ByteEmpty response.
func (client *queriesOperations) byteEmptyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.byteEmptyHandleError(resp)
	}
	return resp.Response, nil
}

// byteEmptyHandleError handles the ByteEmpty error response.
func (client *queriesOperations) byteEmptyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ByteMultiByte - Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
func (client *queriesOperations) ByteMultiByte(ctx context.Context, queriesByteMultiByteOptions *QueriesByteMultiByteOptions) (*http.Response, error) {
	req, err := client.byteMultiByteCreateRequest(queriesByteMultiByteOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.byteMultiByteHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// byteMultiByteCreateRequest creates the ByteMultiByte request.
func (client *queriesOperations) byteMultiByteCreateRequest(queriesByteMultiByteOptions *QueriesByteMultiByteOptions) (*azcore.Request, error) {
	urlPath := "/queries/byte/multibyte"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if queriesByteMultiByteOptions != nil && queriesByteMultiByteOptions.ByteQuery != nil {
		query.Set("byteQuery", base64.StdEncoding.EncodeToString(*queriesByteMultiByteOptions.ByteQuery))
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// byteMultiByteHandleResponse handles the ByteMultiByte response.
func (client *queriesOperations) byteMultiByteHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.byteMultiByteHandleError(resp)
	}
	return resp.Response, nil
}

// byteMultiByteHandleError handles the ByteMultiByte error response.
func (client *queriesOperations) byteMultiByteHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ByteNull - Get null as byte array (no query parameters in uri)
func (client *queriesOperations) ByteNull(ctx context.Context, queriesByteNullOptions *QueriesByteNullOptions) (*http.Response, error) {
	req, err := client.byteNullCreateRequest(queriesByteNullOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.byteNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// byteNullCreateRequest creates the ByteNull request.
func (client *queriesOperations) byteNullCreateRequest(queriesByteNullOptions *QueriesByteNullOptions) (*azcore.Request, error) {
	urlPath := "/queries/byte/null"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if queriesByteNullOptions != nil && queriesByteNullOptions.ByteQuery != nil {
		query.Set("byteQuery", base64.StdEncoding.EncodeToString(*queriesByteNullOptions.ByteQuery))
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// byteNullHandleResponse handles the ByteNull response.
func (client *queriesOperations) byteNullHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.byteNullHandleError(resp)
	}
	return resp.Response, nil
}

// byteNullHandleError handles the ByteNull error response.
func (client *queriesOperations) byteNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DateNull - Get null as date - this should result in no query parameters in uri
func (client *queriesOperations) DateNull(ctx context.Context, queriesDateNullOptions *QueriesDateNullOptions) (*http.Response, error) {
	req, err := client.dateNullCreateRequest(queriesDateNullOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.dateNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// dateNullCreateRequest creates the DateNull request.
func (client *queriesOperations) dateNullCreateRequest(queriesDateNullOptions *QueriesDateNullOptions) (*azcore.Request, error) {
	urlPath := "/queries/date/null"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if queriesDateNullOptions != nil && queriesDateNullOptions.DateQuery != nil {
		query.Set("dateQuery", queriesDateNullOptions.DateQuery.Format("2006-01-02"))
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// dateNullHandleResponse handles the DateNull response.
func (client *queriesOperations) dateNullHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.dateNullHandleError(resp)
	}
	return resp.Response, nil
}

// dateNullHandleError handles the DateNull error response.
func (client *queriesOperations) dateNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DateTimeNull - Get null as date-time, should result in no query parameters in uri
func (client *queriesOperations) DateTimeNull(ctx context.Context, queriesDateTimeNullOptions *QueriesDateTimeNullOptions) (*http.Response, error) {
	req, err := client.dateTimeNullCreateRequest(queriesDateTimeNullOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.dateTimeNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// dateTimeNullCreateRequest creates the DateTimeNull request.
func (client *queriesOperations) dateTimeNullCreateRequest(queriesDateTimeNullOptions *QueriesDateTimeNullOptions) (*azcore.Request, error) {
	urlPath := "/queries/datetime/null"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if queriesDateTimeNullOptions != nil && queriesDateTimeNullOptions.DateTimeQuery != nil {
		query.Set("dateTimeQuery", queriesDateTimeNullOptions.DateTimeQuery.Format(time.RFC3339))
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// dateTimeNullHandleResponse handles the DateTimeNull response.
func (client *queriesOperations) dateTimeNullHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.dateTimeNullHandleError(resp)
	}
	return resp.Response, nil
}

// dateTimeNullHandleError handles the DateTimeNull error response.
func (client *queriesOperations) dateTimeNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DateTimeValid - Get '2012-01-01T01:01:01Z' as date-time
func (client *queriesOperations) DateTimeValid(ctx context.Context) (*http.Response, error) {
	req, err := client.dateTimeValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.dateTimeValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// dateTimeValidCreateRequest creates the DateTimeValid request.
func (client *queriesOperations) dateTimeValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/queries/datetime/2012-01-01T01%3A01%3A01Z"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("dateTimeQuery", "2012-01-01T01:01:01Z")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// dateTimeValidHandleResponse handles the DateTimeValid response.
func (client *queriesOperations) dateTimeValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.dateTimeValidHandleError(resp)
	}
	return resp.Response, nil
}

// dateTimeValidHandleError handles the DateTimeValid error response.
func (client *queriesOperations) dateTimeValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DateValid - Get '2012-01-01' as date
func (client *queriesOperations) DateValid(ctx context.Context) (*http.Response, error) {
	req, err := client.dateValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.dateValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// dateValidCreateRequest creates the DateValid request.
func (client *queriesOperations) dateValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/queries/date/2012-01-01"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("dateQuery", "2012-01-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// dateValidHandleResponse handles the DateValid response.
func (client *queriesOperations) dateValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.dateValidHandleError(resp)
	}
	return resp.Response, nil
}

// dateValidHandleError handles the DateValid error response.
func (client *queriesOperations) dateValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DoubleDecimalNegative - Get '-9999999.999' numeric value
func (client *queriesOperations) DoubleDecimalNegative(ctx context.Context) (*http.Response, error) {
	req, err := client.doubleDecimalNegativeCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.doubleDecimalNegativeHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// doubleDecimalNegativeCreateRequest creates the DoubleDecimalNegative request.
func (client *queriesOperations) doubleDecimalNegativeCreateRequest() (*azcore.Request, error) {
	urlPath := "/queries/double/-9999999.999"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("doubleQuery", "-9999999.999")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// doubleDecimalNegativeHandleResponse handles the DoubleDecimalNegative response.
func (client *queriesOperations) doubleDecimalNegativeHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.doubleDecimalNegativeHandleError(resp)
	}
	return resp.Response, nil
}

// doubleDecimalNegativeHandleError handles the DoubleDecimalNegative error response.
func (client *queriesOperations) doubleDecimalNegativeHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DoubleDecimalPositive - Get '9999999.999' numeric value
func (client *queriesOperations) DoubleDecimalPositive(ctx context.Context) (*http.Response, error) {
	req, err := client.doubleDecimalPositiveCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.doubleDecimalPositiveHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// doubleDecimalPositiveCreateRequest creates the DoubleDecimalPositive request.
func (client *queriesOperations) doubleDecimalPositiveCreateRequest() (*azcore.Request, error) {
	urlPath := "/queries/double/9999999.999"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("doubleQuery", "9999999.999")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// doubleDecimalPositiveHandleResponse handles the DoubleDecimalPositive response.
func (client *queriesOperations) doubleDecimalPositiveHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.doubleDecimalPositiveHandleError(resp)
	}
	return resp.Response, nil
}

// doubleDecimalPositiveHandleError handles the DoubleDecimalPositive error response.
func (client *queriesOperations) doubleDecimalPositiveHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DoubleNull - Get null numeric value (no query parameter)
func (client *queriesOperations) DoubleNull(ctx context.Context, queriesDoubleNullOptions *QueriesDoubleNullOptions) (*http.Response, error) {
	req, err := client.doubleNullCreateRequest(queriesDoubleNullOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.doubleNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// doubleNullCreateRequest creates the DoubleNull request.
func (client *queriesOperations) doubleNullCreateRequest(queriesDoubleNullOptions *QueriesDoubleNullOptions) (*azcore.Request, error) {
	urlPath := "/queries/double/null"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if queriesDoubleNullOptions != nil && queriesDoubleNullOptions.DoubleQuery != nil {
		query.Set("doubleQuery", strconv.FormatFloat(*queriesDoubleNullOptions.DoubleQuery, 'f', -1, 64))
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// doubleNullHandleResponse handles the DoubleNull response.
func (client *queriesOperations) doubleNullHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.doubleNullHandleError(resp)
	}
	return resp.Response, nil
}

// doubleNullHandleError handles the DoubleNull error response.
func (client *queriesOperations) doubleNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// EnumNull - Get null (no query parameter in url)
func (client *queriesOperations) EnumNull(ctx context.Context, queriesEnumNullOptions *QueriesEnumNullOptions) (*http.Response, error) {
	req, err := client.enumNullCreateRequest(queriesEnumNullOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.enumNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// enumNullCreateRequest creates the EnumNull request.
func (client *queriesOperations) enumNullCreateRequest(queriesEnumNullOptions *QueriesEnumNullOptions) (*azcore.Request, error) {
	urlPath := "/queries/enum/null"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if queriesEnumNullOptions != nil && queriesEnumNullOptions.EnumQuery != nil {
		query.Set("enumQuery", string(*queriesEnumNullOptions.EnumQuery))
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// enumNullHandleResponse handles the EnumNull response.
func (client *queriesOperations) enumNullHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.enumNullHandleError(resp)
	}
	return resp.Response, nil
}

// enumNullHandleError handles the EnumNull error response.
func (client *queriesOperations) enumNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// EnumValid - Get using uri with query parameter 'green color'
func (client *queriesOperations) EnumValid(ctx context.Context, queriesEnumValidOptions *QueriesEnumValidOptions) (*http.Response, error) {
	req, err := client.enumValidCreateRequest(queriesEnumValidOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.enumValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// enumValidCreateRequest creates the EnumValid request.
func (client *queriesOperations) enumValidCreateRequest(queriesEnumValidOptions *QueriesEnumValidOptions) (*azcore.Request, error) {
	urlPath := "/queries/enum/green%20color"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if queriesEnumValidOptions != nil && queriesEnumValidOptions.EnumQuery != nil {
		query.Set("enumQuery", string(*queriesEnumValidOptions.EnumQuery))
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// enumValidHandleResponse handles the EnumValid response.
func (client *queriesOperations) enumValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.enumValidHandleError(resp)
	}
	return resp.Response, nil
}

// enumValidHandleError handles the EnumValid error response.
func (client *queriesOperations) enumValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// FloatNull - Get null numeric value (no query parameter)
func (client *queriesOperations) FloatNull(ctx context.Context, queriesFloatNullOptions *QueriesFloatNullOptions) (*http.Response, error) {
	req, err := client.floatNullCreateRequest(queriesFloatNullOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.floatNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// floatNullCreateRequest creates the FloatNull request.
func (client *queriesOperations) floatNullCreateRequest(queriesFloatNullOptions *QueriesFloatNullOptions) (*azcore.Request, error) {
	urlPath := "/queries/float/null"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if queriesFloatNullOptions != nil && queriesFloatNullOptions.FloatQuery != nil {
		query.Set("floatQuery", strconv.FormatFloat(float64(*queriesFloatNullOptions.FloatQuery), 'f', -1, 32))
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// floatNullHandleResponse handles the FloatNull response.
func (client *queriesOperations) floatNullHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.floatNullHandleError(resp)
	}
	return resp.Response, nil
}

// floatNullHandleError handles the FloatNull error response.
func (client *queriesOperations) floatNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// FloatScientificNegative - Get '-1.034E-20' numeric value
func (client *queriesOperations) FloatScientificNegative(ctx context.Context) (*http.Response, error) {
	req, err := client.floatScientificNegativeCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.floatScientificNegativeHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// floatScientificNegativeCreateRequest creates the FloatScientificNegative request.
func (client *queriesOperations) floatScientificNegativeCreateRequest() (*azcore.Request, error) {
	urlPath := "/queries/float/-1.034E-20"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("floatQuery", "-1.034e-20")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// floatScientificNegativeHandleResponse handles the FloatScientificNegative response.
func (client *queriesOperations) floatScientificNegativeHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.floatScientificNegativeHandleError(resp)
	}
	return resp.Response, nil
}

// floatScientificNegativeHandleError handles the FloatScientificNegative error response.
func (client *queriesOperations) floatScientificNegativeHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// FloatScientificPositive - Get '1.034E+20' numeric value
func (client *queriesOperations) FloatScientificPositive(ctx context.Context) (*http.Response, error) {
	req, err := client.floatScientificPositiveCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.floatScientificPositiveHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// floatScientificPositiveCreateRequest creates the FloatScientificPositive request.
func (client *queriesOperations) floatScientificPositiveCreateRequest() (*azcore.Request, error) {
	urlPath := "/queries/float/1.034E+20"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("floatQuery", "103400000000000000000")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// floatScientificPositiveHandleResponse handles the FloatScientificPositive response.
func (client *queriesOperations) floatScientificPositiveHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.floatScientificPositiveHandleError(resp)
	}
	return resp.Response, nil
}

// floatScientificPositiveHandleError handles the FloatScientificPositive error response.
func (client *queriesOperations) floatScientificPositiveHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetBooleanFalse - Get false Boolean value on path
func (client *queriesOperations) GetBooleanFalse(ctx context.Context) (*http.Response, error) {
	req, err := client.getBooleanFalseCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getBooleanFalseHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getBooleanFalseCreateRequest creates the GetBooleanFalse request.
func (client *queriesOperations) getBooleanFalseCreateRequest() (*azcore.Request, error) {
	urlPath := "/queries/bool/false"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("boolQuery", "false")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getBooleanFalseHandleResponse handles the GetBooleanFalse response.
func (client *queriesOperations) getBooleanFalseHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getBooleanFalseHandleError(resp)
	}
	return resp.Response, nil
}

// getBooleanFalseHandleError handles the GetBooleanFalse error response.
func (client *queriesOperations) getBooleanFalseHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetBooleanNull - Get null Boolean value on query (query string should be absent)
func (client *queriesOperations) GetBooleanNull(ctx context.Context, queriesGetBooleanNullOptions *QueriesGetBooleanNullOptions) (*http.Response, error) {
	req, err := client.getBooleanNullCreateRequest(queriesGetBooleanNullOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getBooleanNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getBooleanNullCreateRequest creates the GetBooleanNull request.
func (client *queriesOperations) getBooleanNullCreateRequest(queriesGetBooleanNullOptions *QueriesGetBooleanNullOptions) (*azcore.Request, error) {
	urlPath := "/queries/bool/null"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if queriesGetBooleanNullOptions != nil && queriesGetBooleanNullOptions.BoolQuery != nil {
		query.Set("boolQuery", strconv.FormatBool(*queriesGetBooleanNullOptions.BoolQuery))
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getBooleanNullHandleResponse handles the GetBooleanNull response.
func (client *queriesOperations) getBooleanNullHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getBooleanNullHandleError(resp)
	}
	return resp.Response, nil
}

// getBooleanNullHandleError handles the GetBooleanNull error response.
func (client *queriesOperations) getBooleanNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetBooleanTrue - Get true Boolean value on path
func (client *queriesOperations) GetBooleanTrue(ctx context.Context) (*http.Response, error) {
	req, err := client.getBooleanTrueCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getBooleanTrueHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getBooleanTrueCreateRequest creates the GetBooleanTrue request.
func (client *queriesOperations) getBooleanTrueCreateRequest() (*azcore.Request, error) {
	urlPath := "/queries/bool/true"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("boolQuery", "true")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getBooleanTrueHandleResponse handles the GetBooleanTrue response.
func (client *queriesOperations) getBooleanTrueHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getBooleanTrueHandleError(resp)
	}
	return resp.Response, nil
}

// getBooleanTrueHandleError handles the GetBooleanTrue error response.
func (client *queriesOperations) getBooleanTrueHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetIntNegativeOneMillion - Get '-1000000' integer value
func (client *queriesOperations) GetIntNegativeOneMillion(ctx context.Context) (*http.Response, error) {
	req, err := client.getIntNegativeOneMillionCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getIntNegativeOneMillionHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getIntNegativeOneMillionCreateRequest creates the GetIntNegativeOneMillion request.
func (client *queriesOperations) getIntNegativeOneMillionCreateRequest() (*azcore.Request, error) {
	urlPath := "/queries/int/-1000000"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("intQuery", "-1000000")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getIntNegativeOneMillionHandleResponse handles the GetIntNegativeOneMillion response.
func (client *queriesOperations) getIntNegativeOneMillionHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getIntNegativeOneMillionHandleError(resp)
	}
	return resp.Response, nil
}

// getIntNegativeOneMillionHandleError handles the GetIntNegativeOneMillion error response.
func (client *queriesOperations) getIntNegativeOneMillionHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetIntNull - Get null integer value (no query parameter)
func (client *queriesOperations) GetIntNull(ctx context.Context, queriesGetIntNullOptions *QueriesGetIntNullOptions) (*http.Response, error) {
	req, err := client.getIntNullCreateRequest(queriesGetIntNullOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getIntNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getIntNullCreateRequest creates the GetIntNull request.
func (client *queriesOperations) getIntNullCreateRequest(queriesGetIntNullOptions *QueriesGetIntNullOptions) (*azcore.Request, error) {
	urlPath := "/queries/int/null"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if queriesGetIntNullOptions != nil && queriesGetIntNullOptions.IntQuery != nil {
		query.Set("intQuery", strconv.FormatInt(int64(*queriesGetIntNullOptions.IntQuery), 10))
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getIntNullHandleResponse handles the GetIntNull response.
func (client *queriesOperations) getIntNullHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getIntNullHandleError(resp)
	}
	return resp.Response, nil
}

// getIntNullHandleError handles the GetIntNull error response.
func (client *queriesOperations) getIntNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetIntOneMillion - Get '1000000' integer value
func (client *queriesOperations) GetIntOneMillion(ctx context.Context) (*http.Response, error) {
	req, err := client.getIntOneMillionCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getIntOneMillionHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getIntOneMillionCreateRequest creates the GetIntOneMillion request.
func (client *queriesOperations) getIntOneMillionCreateRequest() (*azcore.Request, error) {
	urlPath := "/queries/int/1000000"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("intQuery", "1000000")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getIntOneMillionHandleResponse handles the GetIntOneMillion response.
func (client *queriesOperations) getIntOneMillionHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getIntOneMillionHandleError(resp)
	}
	return resp.Response, nil
}

// getIntOneMillionHandleError handles the GetIntOneMillion error response.
func (client *queriesOperations) getIntOneMillionHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetLongNull - Get 'null 64 bit integer value (no query param in uri)
func (client *queriesOperations) GetLongNull(ctx context.Context, queriesGetLongNullOptions *QueriesGetLongNullOptions) (*http.Response, error) {
	req, err := client.getLongNullCreateRequest(queriesGetLongNullOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getLongNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getLongNullCreateRequest creates the GetLongNull request.
func (client *queriesOperations) getLongNullCreateRequest(queriesGetLongNullOptions *QueriesGetLongNullOptions) (*azcore.Request, error) {
	urlPath := "/queries/long/null"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if queriesGetLongNullOptions != nil && queriesGetLongNullOptions.LongQuery != nil {
		query.Set("longQuery", strconv.FormatInt(*queriesGetLongNullOptions.LongQuery, 10))
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getLongNullHandleResponse handles the GetLongNull response.
func (client *queriesOperations) getLongNullHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getLongNullHandleError(resp)
	}
	return resp.Response, nil
}

// getLongNullHandleError handles the GetLongNull error response.
func (client *queriesOperations) getLongNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetNegativeTenBillion - Get '-10000000000' 64 bit integer value
func (client *queriesOperations) GetNegativeTenBillion(ctx context.Context) (*http.Response, error) {
	req, err := client.getNegativeTenBillionCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getNegativeTenBillionHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getNegativeTenBillionCreateRequest creates the GetNegativeTenBillion request.
func (client *queriesOperations) getNegativeTenBillionCreateRequest() (*azcore.Request, error) {
	urlPath := "/queries/long/-10000000000"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("longQuery", "-10000000000")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getNegativeTenBillionHandleResponse handles the GetNegativeTenBillion response.
func (client *queriesOperations) getNegativeTenBillionHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getNegativeTenBillionHandleError(resp)
	}
	return resp.Response, nil
}

// getNegativeTenBillionHandleError handles the GetNegativeTenBillion error response.
func (client *queriesOperations) getNegativeTenBillionHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetTenBillion - Get '10000000000' 64 bit integer value
func (client *queriesOperations) GetTenBillion(ctx context.Context) (*http.Response, error) {
	req, err := client.getTenBillionCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getTenBillionHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getTenBillionCreateRequest creates the GetTenBillion request.
func (client *queriesOperations) getTenBillionCreateRequest() (*azcore.Request, error) {
	urlPath := "/queries/long/10000000000"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("longQuery", "10000000000")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getTenBillionHandleResponse handles the GetTenBillion response.
func (client *queriesOperations) getTenBillionHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getTenBillionHandleError(resp)
	}
	return resp.Response, nil
}

// getTenBillionHandleError handles the GetTenBillion error response.
func (client *queriesOperations) getTenBillionHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// StringEmpty - Get ''
func (client *queriesOperations) StringEmpty(ctx context.Context) (*http.Response, error) {
	req, err := client.stringEmptyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.stringEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// stringEmptyCreateRequest creates the StringEmpty request.
func (client *queriesOperations) stringEmptyCreateRequest() (*azcore.Request, error) {
	urlPath := "/queries/string/empty"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("stringQuery", "")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// stringEmptyHandleResponse handles the StringEmpty response.
func (client *queriesOperations) stringEmptyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.stringEmptyHandleError(resp)
	}
	return resp.Response, nil
}

// stringEmptyHandleError handles the StringEmpty error response.
func (client *queriesOperations) stringEmptyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// StringNull - Get null (no query parameter in url)
func (client *queriesOperations) StringNull(ctx context.Context, queriesStringNullOptions *QueriesStringNullOptions) (*http.Response, error) {
	req, err := client.stringNullCreateRequest(queriesStringNullOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.stringNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// stringNullCreateRequest creates the StringNull request.
func (client *queriesOperations) stringNullCreateRequest(queriesStringNullOptions *QueriesStringNullOptions) (*azcore.Request, error) {
	urlPath := "/queries/string/null"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if queriesStringNullOptions != nil && queriesStringNullOptions.StringQuery != nil {
		query.Set("stringQuery", *queriesStringNullOptions.StringQuery)
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// stringNullHandleResponse handles the StringNull response.
func (client *queriesOperations) stringNullHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.stringNullHandleError(resp)
	}
	return resp.Response, nil
}

// stringNullHandleError handles the StringNull error response.
func (client *queriesOperations) stringNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// StringURLEncoded - Get 'begin!*'();:@ &=+$,/?#[]end
func (client *queriesOperations) StringURLEncoded(ctx context.Context) (*http.Response, error) {
	req, err := client.stringUrlEncodedCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.stringUrlEncodedHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// stringUrlEncodedCreateRequest creates the StringURLEncoded request.
func (client *queriesOperations) stringUrlEncodedCreateRequest() (*azcore.Request, error) {
	urlPath := "/queries/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("stringQuery", "begin!*'();:@ &=+$,/?#[]end")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// stringUrlEncodedHandleResponse handles the StringURLEncoded response.
func (client *queriesOperations) stringUrlEncodedHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.stringUrlEncodedHandleError(resp)
	}
	return resp.Response, nil
}

// stringUrlEncodedHandleError handles the StringURLEncoded error response.
func (client *queriesOperations) stringUrlEncodedHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// StringUnicode - Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value
func (client *queriesOperations) StringUnicode(ctx context.Context) (*http.Response, error) {
	req, err := client.stringUnicodeCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.stringUnicodeHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// stringUnicodeCreateRequest creates the StringUnicode request.
func (client *queriesOperations) stringUnicodeCreateRequest() (*azcore.Request, error) {
	urlPath := "/queries/string/unicode/"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("stringQuery", "啊齄丂狛狜隣郎隣兀﨩")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// stringUnicodeHandleResponse handles the StringUnicode response.
func (client *queriesOperations) stringUnicodeHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.stringUnicodeHandleError(resp)
	}
	return resp.Response, nil
}

// stringUnicodeHandleError handles the StringUnicode error response.
func (client *queriesOperations) stringUnicodeHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
