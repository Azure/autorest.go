// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package urlgroup

import (
	"context"
	"encoding/base64"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"
)

// PathsOperations contains the methods for the Paths group.
type PathsOperations interface {
	// ArrayCSVInPath - Get an array of string ['ArrayPath1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the csv-array format
	ArrayCSVInPath(ctx context.Context, arrayPath []string) (*http.Response, error)
	// Base64URL - Get 'lorem' encoded value as 'bG9yZW0' (base64url)
	Base64URL(ctx context.Context, base64UrlPath []byte) (*http.Response, error)
	// ByteEmpty - Get '' as byte array
	ByteEmpty(ctx context.Context) (*http.Response, error)
	// ByteMultiByte - Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
	ByteMultiByte(ctx context.Context, bytePath []byte) (*http.Response, error)
	// ByteNull - Get null as byte array (should throw)
	ByteNull(ctx context.Context, bytePath []byte) (*http.Response, error)
	// DateNull - Get null as date - this should throw or be unusable on the client side, depending on date representation
	DateNull(ctx context.Context, datePath time.Time) (*http.Response, error)
	// DateTimeNull - Get null as date-time, should be disallowed or throw depending on representation of date-time
	DateTimeNull(ctx context.Context, dateTimePath time.Time) (*http.Response, error)
	// DateTimeValid - Get '2012-01-01T01:01:01Z' as date-time
	DateTimeValid(ctx context.Context) (*http.Response, error)
	// DateValid - Get '2012-01-01' as date
	DateValid(ctx context.Context) (*http.Response, error)
	// DoubleDecimalNegative - Get '-9999999.999' numeric value
	DoubleDecimalNegative(ctx context.Context) (*http.Response, error)
	// DoubleDecimalPositive - Get '9999999.999' numeric value
	DoubleDecimalPositive(ctx context.Context) (*http.Response, error)
	// EnumNull - Get null (should throw on the client before the request is sent on wire)
	EnumNull(ctx context.Context, enumPath URIColor) (*http.Response, error)
	// EnumValid - Get using uri with 'green color' in path parameter
	EnumValid(ctx context.Context, enumPath URIColor) (*http.Response, error)
	// FloatScientificNegative - Get '-1.034E-20' numeric value
	FloatScientificNegative(ctx context.Context) (*http.Response, error)
	// FloatScientificPositive - Get '1.034E+20' numeric value
	FloatScientificPositive(ctx context.Context) (*http.Response, error)
	// GetBooleanFalse - Get false Boolean value on path
	GetBooleanFalse(ctx context.Context) (*http.Response, error)
	// GetBooleanTrue - Get true Boolean value on path
	GetBooleanTrue(ctx context.Context) (*http.Response, error)
	// GetIntNegativeOneMillion - Get '-1000000' integer value
	GetIntNegativeOneMillion(ctx context.Context) (*http.Response, error)
	// GetIntOneMillion - Get '1000000' integer value
	GetIntOneMillion(ctx context.Context) (*http.Response, error)
	// GetNegativeTenBillion - Get '-10000000000' 64 bit integer value
	GetNegativeTenBillion(ctx context.Context) (*http.Response, error)
	// GetTenBillion - Get '10000000000' 64 bit integer value
	GetTenBillion(ctx context.Context) (*http.Response, error)
	// StringEmpty - Get ''
	StringEmpty(ctx context.Context) (*http.Response, error)
	// StringNull - Get null (should throw)
	StringNull(ctx context.Context, stringPath string) (*http.Response, error)
	// StringURLEncoded - Get 'begin!*'();:@ &=+$,/?#[]end
	StringURLEncoded(ctx context.Context) (*http.Response, error)
	// StringURLNonEncoded - https://tools.ietf.org/html/rfc3986#appendix-A 'path' accept any 'pchar' not encoded
	StringURLNonEncoded(ctx context.Context) (*http.Response, error)
	// StringUnicode - Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value
	StringUnicode(ctx context.Context) (*http.Response, error)
	// UnixTimeURL - Get the date 2016-04-13 encoded value as '1460505600' (Unix time)
	UnixTimeURL(ctx context.Context, unixTimeUrlPath time.Time) (*http.Response, error)
}

// pathsOperations implements the PathsOperations interface.
type pathsOperations struct {
	*Client
}

// ArrayCSVInPath - Get an array of string ['ArrayPath1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the csv-array format
func (client *pathsOperations) ArrayCSVInPath(ctx context.Context, arrayPath []string) (*http.Response, error) {
	req, err := client.arrayCsvInPathCreateRequest(arrayPath)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.arrayCsvInPathHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// arrayCsvInPathCreateRequest creates the ArrayCSVInPath request.
func (client *pathsOperations) arrayCsvInPathCreateRequest(arrayPath []string) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/paths/array/ArrayPath1%2cbegin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend%2c%2c/{arrayPath}"
	urlPath = strings.ReplaceAll(urlPath, "{arrayPath}", url.PathEscape(strings.Join(arrayPath, ",")))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// arrayCsvInPathHandleResponse handles the ArrayCSVInPath response.
func (client *pathsOperations) arrayCsvInPathHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.arrayCsvInPathHandleError(resp)
	}
	return resp.Response, nil
}

// arrayCsvInPathHandleError handles the ArrayCSVInPath error response.
func (client *pathsOperations) arrayCsvInPathHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Base64URL - Get 'lorem' encoded value as 'bG9yZW0' (base64url)
func (client *pathsOperations) Base64URL(ctx context.Context, base64UrlPath []byte) (*http.Response, error) {
	req, err := client.base64UrlCreateRequest(base64UrlPath)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.base64UrlHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// base64UrlCreateRequest creates the Base64URL request.
func (client *pathsOperations) base64UrlCreateRequest(base64UrlPath []byte) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/paths/string/bG9yZW0/{base64UrlPath}"
	urlPath = strings.ReplaceAll(urlPath, "{base64UrlPath}", url.PathEscape(base64.RawURLEncoding.EncodeToString(base64UrlPath)))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// base64UrlHandleResponse handles the Base64URL response.
func (client *pathsOperations) base64UrlHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.base64UrlHandleError(resp)
	}
	return resp.Response, nil
}

// base64UrlHandleError handles the Base64URL error response.
func (client *pathsOperations) base64UrlHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ByteEmpty - Get '' as byte array
func (client *pathsOperations) ByteEmpty(ctx context.Context) (*http.Response, error) {
	req, err := client.byteEmptyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.byteEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// byteEmptyCreateRequest creates the ByteEmpty request.
func (client *pathsOperations) byteEmptyCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/paths/byte/empty/{bytePath}"
	urlPath = strings.ReplaceAll(urlPath, "{bytePath}", url.PathEscape(""))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// byteEmptyHandleResponse handles the ByteEmpty response.
func (client *pathsOperations) byteEmptyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.byteEmptyHandleError(resp)
	}
	return resp.Response, nil
}

// byteEmptyHandleError handles the ByteEmpty error response.
func (client *pathsOperations) byteEmptyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ByteMultiByte - Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
func (client *pathsOperations) ByteMultiByte(ctx context.Context, bytePath []byte) (*http.Response, error) {
	req, err := client.byteMultiByteCreateRequest(bytePath)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.byteMultiByteHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// byteMultiByteCreateRequest creates the ByteMultiByte request.
func (client *pathsOperations) byteMultiByteCreateRequest(bytePath []byte) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/paths/byte/multibyte/{bytePath}"
	urlPath = strings.ReplaceAll(urlPath, "{bytePath}", url.PathEscape(base64.StdEncoding.EncodeToString(bytePath)))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// byteMultiByteHandleResponse handles the ByteMultiByte response.
func (client *pathsOperations) byteMultiByteHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.byteMultiByteHandleError(resp)
	}
	return resp.Response, nil
}

// byteMultiByteHandleError handles the ByteMultiByte error response.
func (client *pathsOperations) byteMultiByteHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ByteNull - Get null as byte array (should throw)
func (client *pathsOperations) ByteNull(ctx context.Context, bytePath []byte) (*http.Response, error) {
	req, err := client.byteNullCreateRequest(bytePath)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.byteNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// byteNullCreateRequest creates the ByteNull request.
func (client *pathsOperations) byteNullCreateRequest(bytePath []byte) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/paths/byte/null/{bytePath}"
	urlPath = strings.ReplaceAll(urlPath, "{bytePath}", url.PathEscape(base64.StdEncoding.EncodeToString(bytePath)))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// byteNullHandleResponse handles the ByteNull response.
func (client *pathsOperations) byteNullHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusBadRequest) {
		return nil, client.byteNullHandleError(resp)
	}
	return resp.Response, nil
}

// byteNullHandleError handles the ByteNull error response.
func (client *pathsOperations) byteNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DateNull - Get null as date - this should throw or be unusable on the client side, depending on date representation
func (client *pathsOperations) DateNull(ctx context.Context, datePath time.Time) (*http.Response, error) {
	req, err := client.dateNullCreateRequest(datePath)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.dateNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// dateNullCreateRequest creates the DateNull request.
func (client *pathsOperations) dateNullCreateRequest(datePath time.Time) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/paths/date/null/{datePath}"
	urlPath = strings.ReplaceAll(urlPath, "{datePath}", url.PathEscape(datePath.Format("2006-01-02")))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// dateNullHandleResponse handles the DateNull response.
func (client *pathsOperations) dateNullHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusBadRequest) {
		return nil, client.dateNullHandleError(resp)
	}
	return resp.Response, nil
}

// dateNullHandleError handles the DateNull error response.
func (client *pathsOperations) dateNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DateTimeNull - Get null as date-time, should be disallowed or throw depending on representation of date-time
func (client *pathsOperations) DateTimeNull(ctx context.Context, dateTimePath time.Time) (*http.Response, error) {
	req, err := client.dateTimeNullCreateRequest(dateTimePath)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.dateTimeNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// dateTimeNullCreateRequest creates the DateTimeNull request.
func (client *pathsOperations) dateTimeNullCreateRequest(dateTimePath time.Time) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/paths/datetime/null/{dateTimePath}"
	urlPath = strings.ReplaceAll(urlPath, "{dateTimePath}", url.PathEscape(dateTimePath.Format(time.RFC3339Nano)))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// dateTimeNullHandleResponse handles the DateTimeNull response.
func (client *pathsOperations) dateTimeNullHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusBadRequest) {
		return nil, client.dateTimeNullHandleError(resp)
	}
	return resp.Response, nil
}

// dateTimeNullHandleError handles the DateTimeNull error response.
func (client *pathsOperations) dateTimeNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DateTimeValid - Get '2012-01-01T01:01:01Z' as date-time
func (client *pathsOperations) DateTimeValid(ctx context.Context) (*http.Response, error) {
	req, err := client.dateTimeValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.dateTimeValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// dateTimeValidCreateRequest creates the DateTimeValid request.
func (client *pathsOperations) dateTimeValidCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/paths/datetime/2012-01-01T01%3A01%3A01Z/{dateTimePath}"
	urlPath = strings.ReplaceAll(urlPath, "{dateTimePath}", url.PathEscape("2012-01-01T01:01:01Z"))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// dateTimeValidHandleResponse handles the DateTimeValid response.
func (client *pathsOperations) dateTimeValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.dateTimeValidHandleError(resp)
	}
	return resp.Response, nil
}

// dateTimeValidHandleError handles the DateTimeValid error response.
func (client *pathsOperations) dateTimeValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DateValid - Get '2012-01-01' as date
func (client *pathsOperations) DateValid(ctx context.Context) (*http.Response, error) {
	req, err := client.dateValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.dateValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// dateValidCreateRequest creates the DateValid request.
func (client *pathsOperations) dateValidCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/paths/date/2012-01-01/{datePath}"
	urlPath = strings.ReplaceAll(urlPath, "{datePath}", url.PathEscape("2012-01-01"))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// dateValidHandleResponse handles the DateValid response.
func (client *pathsOperations) dateValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.dateValidHandleError(resp)
	}
	return resp.Response, nil
}

// dateValidHandleError handles the DateValid error response.
func (client *pathsOperations) dateValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DoubleDecimalNegative - Get '-9999999.999' numeric value
func (client *pathsOperations) DoubleDecimalNegative(ctx context.Context) (*http.Response, error) {
	req, err := client.doubleDecimalNegativeCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.doubleDecimalNegativeHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// doubleDecimalNegativeCreateRequest creates the DoubleDecimalNegative request.
func (client *pathsOperations) doubleDecimalNegativeCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/paths/double/-9999999.999/{doublePath}"
	urlPath = strings.ReplaceAll(urlPath, "{doublePath}", url.PathEscape("-9999999.999"))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// doubleDecimalNegativeHandleResponse handles the DoubleDecimalNegative response.
func (client *pathsOperations) doubleDecimalNegativeHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.doubleDecimalNegativeHandleError(resp)
	}
	return resp.Response, nil
}

// doubleDecimalNegativeHandleError handles the DoubleDecimalNegative error response.
func (client *pathsOperations) doubleDecimalNegativeHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DoubleDecimalPositive - Get '9999999.999' numeric value
func (client *pathsOperations) DoubleDecimalPositive(ctx context.Context) (*http.Response, error) {
	req, err := client.doubleDecimalPositiveCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.doubleDecimalPositiveHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// doubleDecimalPositiveCreateRequest creates the DoubleDecimalPositive request.
func (client *pathsOperations) doubleDecimalPositiveCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/paths/double/9999999.999/{doublePath}"
	urlPath = strings.ReplaceAll(urlPath, "{doublePath}", url.PathEscape("9999999.999"))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// doubleDecimalPositiveHandleResponse handles the DoubleDecimalPositive response.
func (client *pathsOperations) doubleDecimalPositiveHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.doubleDecimalPositiveHandleError(resp)
	}
	return resp.Response, nil
}

// doubleDecimalPositiveHandleError handles the DoubleDecimalPositive error response.
func (client *pathsOperations) doubleDecimalPositiveHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// EnumNull - Get null (should throw on the client before the request is sent on wire)
func (client *pathsOperations) EnumNull(ctx context.Context, enumPath URIColor) (*http.Response, error) {
	req, err := client.enumNullCreateRequest(enumPath)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.enumNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// enumNullCreateRequest creates the EnumNull request.
func (client *pathsOperations) enumNullCreateRequest(enumPath URIColor) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/paths/string/null/{enumPath}"
	urlPath = strings.ReplaceAll(urlPath, "{enumPath}", url.PathEscape(string(enumPath)))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// enumNullHandleResponse handles the EnumNull response.
func (client *pathsOperations) enumNullHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusBadRequest) {
		return nil, client.enumNullHandleError(resp)
	}
	return resp.Response, nil
}

// enumNullHandleError handles the EnumNull error response.
func (client *pathsOperations) enumNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// EnumValid - Get using uri with 'green color' in path parameter
func (client *pathsOperations) EnumValid(ctx context.Context, enumPath URIColor) (*http.Response, error) {
	req, err := client.enumValidCreateRequest(enumPath)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.enumValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// enumValidCreateRequest creates the EnumValid request.
func (client *pathsOperations) enumValidCreateRequest(enumPath URIColor) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/paths/enum/green%20color/{enumPath}"
	urlPath = strings.ReplaceAll(urlPath, "{enumPath}", url.PathEscape(string(enumPath)))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// enumValidHandleResponse handles the EnumValid response.
func (client *pathsOperations) enumValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.enumValidHandleError(resp)
	}
	return resp.Response, nil
}

// enumValidHandleError handles the EnumValid error response.
func (client *pathsOperations) enumValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// FloatScientificNegative - Get '-1.034E-20' numeric value
func (client *pathsOperations) FloatScientificNegative(ctx context.Context) (*http.Response, error) {
	req, err := client.floatScientificNegativeCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.floatScientificNegativeHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// floatScientificNegativeCreateRequest creates the FloatScientificNegative request.
func (client *pathsOperations) floatScientificNegativeCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/paths/float/-1.034E-20/{floatPath}"
	urlPath = strings.ReplaceAll(urlPath, "{floatPath}", url.PathEscape("-1.034e-20"))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// floatScientificNegativeHandleResponse handles the FloatScientificNegative response.
func (client *pathsOperations) floatScientificNegativeHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.floatScientificNegativeHandleError(resp)
	}
	return resp.Response, nil
}

// floatScientificNegativeHandleError handles the FloatScientificNegative error response.
func (client *pathsOperations) floatScientificNegativeHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// FloatScientificPositive - Get '1.034E+20' numeric value
func (client *pathsOperations) FloatScientificPositive(ctx context.Context) (*http.Response, error) {
	req, err := client.floatScientificPositiveCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.floatScientificPositiveHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// floatScientificPositiveCreateRequest creates the FloatScientificPositive request.
func (client *pathsOperations) floatScientificPositiveCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/paths/float/1.034E+20/{floatPath}"
	urlPath = strings.ReplaceAll(urlPath, "{floatPath}", url.PathEscape("103400000000000000000"))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// floatScientificPositiveHandleResponse handles the FloatScientificPositive response.
func (client *pathsOperations) floatScientificPositiveHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.floatScientificPositiveHandleError(resp)
	}
	return resp.Response, nil
}

// floatScientificPositiveHandleError handles the FloatScientificPositive error response.
func (client *pathsOperations) floatScientificPositiveHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetBooleanFalse - Get false Boolean value on path
func (client *pathsOperations) GetBooleanFalse(ctx context.Context) (*http.Response, error) {
	req, err := client.getBooleanFalseCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getBooleanFalseHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getBooleanFalseCreateRequest creates the GetBooleanFalse request.
func (client *pathsOperations) getBooleanFalseCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/paths/bool/false/{boolPath}"
	urlPath = strings.ReplaceAll(urlPath, "{boolPath}", url.PathEscape("false"))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getBooleanFalseHandleResponse handles the GetBooleanFalse response.
func (client *pathsOperations) getBooleanFalseHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getBooleanFalseHandleError(resp)
	}
	return resp.Response, nil
}

// getBooleanFalseHandleError handles the GetBooleanFalse error response.
func (client *pathsOperations) getBooleanFalseHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetBooleanTrue - Get true Boolean value on path
func (client *pathsOperations) GetBooleanTrue(ctx context.Context) (*http.Response, error) {
	req, err := client.getBooleanTrueCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getBooleanTrueHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getBooleanTrueCreateRequest creates the GetBooleanTrue request.
func (client *pathsOperations) getBooleanTrueCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/paths/bool/true/{boolPath}"
	urlPath = strings.ReplaceAll(urlPath, "{boolPath}", url.PathEscape("true"))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getBooleanTrueHandleResponse handles the GetBooleanTrue response.
func (client *pathsOperations) getBooleanTrueHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getBooleanTrueHandleError(resp)
	}
	return resp.Response, nil
}

// getBooleanTrueHandleError handles the GetBooleanTrue error response.
func (client *pathsOperations) getBooleanTrueHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetIntNegativeOneMillion - Get '-1000000' integer value
func (client *pathsOperations) GetIntNegativeOneMillion(ctx context.Context) (*http.Response, error) {
	req, err := client.getIntNegativeOneMillionCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getIntNegativeOneMillionHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getIntNegativeOneMillionCreateRequest creates the GetIntNegativeOneMillion request.
func (client *pathsOperations) getIntNegativeOneMillionCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/paths/int/-1000000/{intPath}"
	urlPath = strings.ReplaceAll(urlPath, "{intPath}", url.PathEscape("-1000000"))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getIntNegativeOneMillionHandleResponse handles the GetIntNegativeOneMillion response.
func (client *pathsOperations) getIntNegativeOneMillionHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getIntNegativeOneMillionHandleError(resp)
	}
	return resp.Response, nil
}

// getIntNegativeOneMillionHandleError handles the GetIntNegativeOneMillion error response.
func (client *pathsOperations) getIntNegativeOneMillionHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetIntOneMillion - Get '1000000' integer value
func (client *pathsOperations) GetIntOneMillion(ctx context.Context) (*http.Response, error) {
	req, err := client.getIntOneMillionCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getIntOneMillionHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getIntOneMillionCreateRequest creates the GetIntOneMillion request.
func (client *pathsOperations) getIntOneMillionCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/paths/int/1000000/{intPath}"
	urlPath = strings.ReplaceAll(urlPath, "{intPath}", url.PathEscape("1000000"))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getIntOneMillionHandleResponse handles the GetIntOneMillion response.
func (client *pathsOperations) getIntOneMillionHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getIntOneMillionHandleError(resp)
	}
	return resp.Response, nil
}

// getIntOneMillionHandleError handles the GetIntOneMillion error response.
func (client *pathsOperations) getIntOneMillionHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetNegativeTenBillion - Get '-10000000000' 64 bit integer value
func (client *pathsOperations) GetNegativeTenBillion(ctx context.Context) (*http.Response, error) {
	req, err := client.getNegativeTenBillionCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getNegativeTenBillionHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getNegativeTenBillionCreateRequest creates the GetNegativeTenBillion request.
func (client *pathsOperations) getNegativeTenBillionCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/paths/long/-10000000000/{longPath}"
	urlPath = strings.ReplaceAll(urlPath, "{longPath}", url.PathEscape("-10000000000"))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getNegativeTenBillionHandleResponse handles the GetNegativeTenBillion response.
func (client *pathsOperations) getNegativeTenBillionHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getNegativeTenBillionHandleError(resp)
	}
	return resp.Response, nil
}

// getNegativeTenBillionHandleError handles the GetNegativeTenBillion error response.
func (client *pathsOperations) getNegativeTenBillionHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetTenBillion - Get '10000000000' 64 bit integer value
func (client *pathsOperations) GetTenBillion(ctx context.Context) (*http.Response, error) {
	req, err := client.getTenBillionCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getTenBillionHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getTenBillionCreateRequest creates the GetTenBillion request.
func (client *pathsOperations) getTenBillionCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/paths/long/10000000000/{longPath}"
	urlPath = strings.ReplaceAll(urlPath, "{longPath}", url.PathEscape("10000000000"))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getTenBillionHandleResponse handles the GetTenBillion response.
func (client *pathsOperations) getTenBillionHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getTenBillionHandleError(resp)
	}
	return resp.Response, nil
}

// getTenBillionHandleError handles the GetTenBillion error response.
func (client *pathsOperations) getTenBillionHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// StringEmpty - Get ''
func (client *pathsOperations) StringEmpty(ctx context.Context) (*http.Response, error) {
	req, err := client.stringEmptyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.stringEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// stringEmptyCreateRequest creates the StringEmpty request.
func (client *pathsOperations) stringEmptyCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/paths/string/empty/{stringPath}"
	urlPath = strings.ReplaceAll(urlPath, "{stringPath}", url.PathEscape(""))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// stringEmptyHandleResponse handles the StringEmpty response.
func (client *pathsOperations) stringEmptyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.stringEmptyHandleError(resp)
	}
	return resp.Response, nil
}

// stringEmptyHandleError handles the StringEmpty error response.
func (client *pathsOperations) stringEmptyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// StringNull - Get null (should throw)
func (client *pathsOperations) StringNull(ctx context.Context, stringPath string) (*http.Response, error) {
	req, err := client.stringNullCreateRequest(stringPath)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.stringNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// stringNullCreateRequest creates the StringNull request.
func (client *pathsOperations) stringNullCreateRequest(stringPath string) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/paths/string/null/{stringPath}"
	urlPath = strings.ReplaceAll(urlPath, "{stringPath}", url.PathEscape(stringPath))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// stringNullHandleResponse handles the StringNull response.
func (client *pathsOperations) stringNullHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusBadRequest) {
		return nil, client.stringNullHandleError(resp)
	}
	return resp.Response, nil
}

// stringNullHandleError handles the StringNull error response.
func (client *pathsOperations) stringNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// StringURLEncoded - Get 'begin!*'();:@ &=+$,/?#[]end
func (client *pathsOperations) StringURLEncoded(ctx context.Context) (*http.Response, error) {
	req, err := client.stringUrlEncodedCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.stringUrlEncodedHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// stringUrlEncodedCreateRequest creates the StringURLEncoded request.
func (client *pathsOperations) stringUrlEncodedCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/paths/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend/{stringPath}"
	urlPath = strings.ReplaceAll(urlPath, "{stringPath}", url.PathEscape("begin!*'();:@ &=+$,/?#[]end"))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// stringUrlEncodedHandleResponse handles the StringURLEncoded response.
func (client *pathsOperations) stringUrlEncodedHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.stringUrlEncodedHandleError(resp)
	}
	return resp.Response, nil
}

// stringUrlEncodedHandleError handles the StringURLEncoded error response.
func (client *pathsOperations) stringUrlEncodedHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// StringURLNonEncoded - https://tools.ietf.org/html/rfc3986#appendix-A 'path' accept any 'pchar' not encoded
func (client *pathsOperations) StringURLNonEncoded(ctx context.Context) (*http.Response, error) {
	req, err := client.stringUrlNonEncodedCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.stringUrlNonEncodedHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// stringUrlNonEncodedCreateRequest creates the StringURLNonEncoded request.
func (client *pathsOperations) stringUrlNonEncodedCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/paths/string/begin!*'();:@&=+$,end/{stringPath}"
	urlPath = strings.ReplaceAll(urlPath, "{stringPath}", "begin!*'();:@&=+$,end")
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// stringUrlNonEncodedHandleResponse handles the StringURLNonEncoded response.
func (client *pathsOperations) stringUrlNonEncodedHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.stringUrlNonEncodedHandleError(resp)
	}
	return resp.Response, nil
}

// stringUrlNonEncodedHandleError handles the StringURLNonEncoded error response.
func (client *pathsOperations) stringUrlNonEncodedHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// StringUnicode - Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value
func (client *pathsOperations) StringUnicode(ctx context.Context) (*http.Response, error) {
	req, err := client.stringUnicodeCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.stringUnicodeHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// stringUnicodeCreateRequest creates the StringUnicode request.
func (client *pathsOperations) stringUnicodeCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/paths/string/unicode/{stringPath}"
	urlPath = strings.ReplaceAll(urlPath, "{stringPath}", url.PathEscape("啊齄丂狛狜隣郎隣兀﨩"))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// stringUnicodeHandleResponse handles the StringUnicode response.
func (client *pathsOperations) stringUnicodeHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.stringUnicodeHandleError(resp)
	}
	return resp.Response, nil
}

// stringUnicodeHandleError handles the StringUnicode error response.
func (client *pathsOperations) stringUnicodeHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// UnixTimeURL - Get the date 2016-04-13 encoded value as '1460505600' (Unix time)
func (client *pathsOperations) UnixTimeURL(ctx context.Context, unixTimeUrlPath time.Time) (*http.Response, error) {
	req, err := client.unixTimeUrlCreateRequest(unixTimeUrlPath)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.unixTimeUrlHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// unixTimeUrlCreateRequest creates the UnixTimeURL request.
func (client *pathsOperations) unixTimeUrlCreateRequest(unixTimeUrlPath time.Time) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/paths/int/1460505600/{unixTimeUrlPath}"
	urlPath = strings.ReplaceAll(urlPath, "{unixTimeUrlPath}", url.PathEscape(timeUnix(unixTimeUrlPath).String()))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// unixTimeUrlHandleResponse handles the UnixTimeURL response.
func (client *pathsOperations) unixTimeUrlHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.unixTimeUrlHandleError(resp)
	}
	return resp.Response, nil
}

// unixTimeUrlHandleError handles the UnixTimeURL error response.
func (client *pathsOperations) unixTimeUrlHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
