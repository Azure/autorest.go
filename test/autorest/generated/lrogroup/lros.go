// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package lrogroup

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"strconv"
	"strings"
)

// LrOSOperations contains the methods for the LrOS group.
type LrOSOperations interface {
	// BeginDelete202NoRetry204 - Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
	BeginDelete202NoRetry204(ctx context.Context) (LrOSDelete202NoRetry204Poller, error)
	// ResumeLrOSDelete202NoRetry204Poller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSDelete202NoRetry204Poller(id string) (LrOSDelete202NoRetry204Poller, error)
	// BeginDelete202Retry200 - Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
	BeginDelete202Retry200(ctx context.Context) (LrOSDelete202Retry200Poller, error)
	// ResumeLrOSDelete202Retry200Poller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSDelete202Retry200Poller(id string) (LrOSDelete202Retry200Poller, error)
	// BeginDelete204Succeeded - Long running delete succeeds and returns right away
	BeginDelete204Succeeded(ctx context.Context) (LrOSDelete204SucceededPoller, error)
	// ResumeLrOSDelete204SucceededPoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSDelete204SucceededPoller(id string) (LrOSDelete204SucceededPoller, error)
	// BeginDeleteAsyncNoHeaderInRetry - Long running delete request, service returns an Azure-AsyncOperation header in the initial request. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
	BeginDeleteAsyncNoHeaderInRetry(ctx context.Context) (LrOSDeleteAsyncNoHeaderInRetryPoller, error)
	// ResumeLrOSDeleteAsyncNoHeaderInRetryPoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSDeleteAsyncNoHeaderInRetryPoller(id string) (LrOSDeleteAsyncNoHeaderInRetryPoller, error)
	// BeginDeleteAsyncNoRetrySucceeded - Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
	BeginDeleteAsyncNoRetrySucceeded(ctx context.Context) (LrOSDeleteAsyncNoRetrySucceededPoller, error)
	// ResumeLrOSDeleteAsyncNoRetrySucceededPoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSDeleteAsyncNoRetrySucceededPoller(id string) (LrOSDeleteAsyncNoRetrySucceededPoller, error)
	// BeginDeleteAsyncRetryFailed - Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
	BeginDeleteAsyncRetryFailed(ctx context.Context) (LrOSDeleteAsyncRetryFailedPoller, error)
	// ResumeLrOSDeleteAsyncRetryFailedPoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSDeleteAsyncRetryFailedPoller(id string) (LrOSDeleteAsyncRetryFailedPoller, error)
	// BeginDeleteAsyncRetrySucceeded - Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
	BeginDeleteAsyncRetrySucceeded(ctx context.Context) (LrOSDeleteAsyncRetrySucceededPoller, error)
	// ResumeLrOSDeleteAsyncRetrySucceededPoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSDeleteAsyncRetrySucceededPoller(id string) (LrOSDeleteAsyncRetrySucceededPoller, error)
	// BeginDeleteAsyncRetrycanceled - Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
	BeginDeleteAsyncRetrycanceled(ctx context.Context) (LrOSDeleteAsyncRetrycanceledPoller, error)
	// ResumeLrOSDeleteAsyncRetrycanceledPoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSDeleteAsyncRetrycanceledPoller(id string) (LrOSDeleteAsyncRetrycanceledPoller, error)
	// BeginDeleteNoHeaderInRetry - Long running delete request, service returns a location header in the initial request. Subsequent calls to operation status do not contain location header.
	BeginDeleteNoHeaderInRetry(ctx context.Context) (LrOSDeleteNoHeaderInRetryPoller, error)
	// ResumeLrOSDeleteNoHeaderInRetryPoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSDeleteNoHeaderInRetryPoller(id string) (LrOSDeleteNoHeaderInRetryPoller, error)
	// BeginDeleteProvisioning202Accepted200Succeeded - Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
	BeginDeleteProvisioning202Accepted200Succeeded(ctx context.Context) (LrOSDeleteProvisioning202Accepted200SucceededPoller, error)
	// ResumeLrOSDeleteProvisioning202Accepted200SucceededPoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSDeleteProvisioning202Accepted200SucceededPoller(id string) (LrOSDeleteProvisioning202Accepted200SucceededPoller, error)
	// BeginDeleteProvisioning202DeletingFailed200 - Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’
	BeginDeleteProvisioning202DeletingFailed200(ctx context.Context) (LrOSDeleteProvisioning202DeletingFailed200Poller, error)
	// ResumeLrOSDeleteProvisioning202DeletingFailed200Poller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSDeleteProvisioning202DeletingFailed200Poller(id string) (LrOSDeleteProvisioning202DeletingFailed200Poller, error)
	// BeginDeleteProvisioning202Deletingcanceled200 - Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’
	BeginDeleteProvisioning202Deletingcanceled200(ctx context.Context) (LrOSDeleteProvisioning202Deletingcanceled200Poller, error)
	// ResumeLrOSDeleteProvisioning202Deletingcanceled200Poller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSDeleteProvisioning202Deletingcanceled200Poller(id string) (LrOSDeleteProvisioning202Deletingcanceled200Poller, error)
	// BeginPost200WithPayload - Long running post request, service returns a 202 to the initial request, with 'Location' header. Poll returns a 200 with a response body after success.
	BeginPost200WithPayload(ctx context.Context) (LrOSPost200WithPayloadPoller, error)
	// ResumeLrOSPost200WithPayloadPoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSPost200WithPayloadPoller(id string) (LrOSPost200WithPayloadPoller, error)
	// BeginPost202NoRetry204 - Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success
	BeginPost202NoRetry204(ctx context.Context, lrOSPost202NoRetry204Options *LrOSPost202NoRetry204Options) (LrOSPost202NoRetry204Poller, error)
	// ResumeLrOSPost202NoRetry204Poller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSPost202NoRetry204Poller(id string) (LrOSPost202NoRetry204Poller, error)
	// BeginPost202Retry200 - Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success
	BeginPost202Retry200(ctx context.Context, lrOSPost202Retry200Options *LrOSPost202Retry200Options) (LrOSPost202Retry200Poller, error)
	// ResumeLrOSPost202Retry200Poller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSPost202Retry200Poller(id string) (LrOSPost202Retry200Poller, error)
	// BeginPostAsyncNoRetrySucceeded - Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
	BeginPostAsyncNoRetrySucceeded(ctx context.Context, lrOSPostAsyncNoRetrySucceededOptions *LrOSPostAsyncNoRetrySucceededOptions) (LrOSPostAsyncNoRetrySucceededPoller, error)
	// ResumeLrOSPostAsyncNoRetrySucceededPoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSPostAsyncNoRetrySucceededPoller(id string) (LrOSPostAsyncNoRetrySucceededPoller, error)
	// BeginPostAsyncRetryFailed - Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
	BeginPostAsyncRetryFailed(ctx context.Context, lrOSPostAsyncRetryFailedOptions *LrOSPostAsyncRetryFailedOptions) (LrOSPostAsyncRetryFailedPoller, error)
	// ResumeLrOSPostAsyncRetryFailedPoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSPostAsyncRetryFailedPoller(id string) (LrOSPostAsyncRetryFailedPoller, error)
	// BeginPostAsyncRetrySucceeded - Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
	BeginPostAsyncRetrySucceeded(ctx context.Context, lrOSPostAsyncRetrySucceededOptions *LrOSPostAsyncRetrySucceededOptions) (LrOSPostAsyncRetrySucceededPoller, error)
	// ResumeLrOSPostAsyncRetrySucceededPoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSPostAsyncRetrySucceededPoller(id string) (LrOSPostAsyncRetrySucceededPoller, error)
	// BeginPostAsyncRetrycanceled - Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
	BeginPostAsyncRetrycanceled(ctx context.Context, lrOSPostAsyncRetrycanceledOptions *LrOSPostAsyncRetrycanceledOptions) (LrOSPostAsyncRetrycanceledPoller, error)
	// ResumeLrOSPostAsyncRetrycanceledPoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSPostAsyncRetrycanceledPoller(id string) (LrOSPostAsyncRetrycanceledPoller, error)
	// BeginPostDoubleHeadersFinalAzureHeaderGet - Long running post request, service returns a 202 to the initial request with both Location and Azure-Async header. Poll Azure-Async and it's success. Should NOT poll Location to get the final object
	BeginPostDoubleHeadersFinalAzureHeaderGet(ctx context.Context) (LrOSPostDoubleHeadersFinalAzureHeaderGetPoller, error)
	// ResumeLrOSPostDoubleHeadersFinalAzureHeaderGetPoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSPostDoubleHeadersFinalAzureHeaderGetPoller(id string) (LrOSPostDoubleHeadersFinalAzureHeaderGetPoller, error)
	// BeginPostDoubleHeadersFinalAzureHeaderGetDefault - Long running post request, service returns a 202 to the initial request with both Location and Azure-Async header. Poll Azure-Async and it's success. Should NOT poll Location to get the final object if you support initial Autorest behavior.
	BeginPostDoubleHeadersFinalAzureHeaderGetDefault(ctx context.Context) (LrOSPostDoubleHeadersFinalAzureHeaderGetDefaultPoller, error)
	// ResumeLrOSPostDoubleHeadersFinalAzureHeaderGetDefaultPoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSPostDoubleHeadersFinalAzureHeaderGetDefaultPoller(id string) (LrOSPostDoubleHeadersFinalAzureHeaderGetDefaultPoller, error)
	// BeginPostDoubleHeadersFinalLocationGet - Long running post request, service returns a 202 to the initial request with both Location and Azure-Async header. Poll Azure-Async and it's success. Should poll Location to get the final object
	BeginPostDoubleHeadersFinalLocationGet(ctx context.Context) (LrOSPostDoubleHeadersFinalLocationGetPoller, error)
	// ResumeLrOSPostDoubleHeadersFinalLocationGetPoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSPostDoubleHeadersFinalLocationGetPoller(id string) (LrOSPostDoubleHeadersFinalLocationGetPoller, error)
	// BeginPut200Acceptedcanceled200 - Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’
	BeginPut200Acceptedcanceled200(ctx context.Context, lrOSPut200Acceptedcanceled200Options *LrOSPut200Acceptedcanceled200Options) (LrOSPut200Acceptedcanceled200Poller, error)
	// ResumeLrOSPut200Acceptedcanceled200Poller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSPut200Acceptedcanceled200Poller(id string) (LrOSPut200Acceptedcanceled200Poller, error)
	// BeginPut200Succeeded - Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
	BeginPut200Succeeded(ctx context.Context, lrOSPut200SucceededOptions *LrOSPut200SucceededOptions) (LrOSPut200SucceededPoller, error)
	// ResumeLrOSPut200SucceededPoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSPut200SucceededPoller(id string) (LrOSPut200SucceededPoller, error)
	// BeginPut200SucceededNoState - Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’.
	BeginPut200SucceededNoState(ctx context.Context, lrOSPut200SucceededNoStateOptions *LrOSPut200SucceededNoStateOptions) (LrOSPut200SucceededNoStatePoller, error)
	// ResumeLrOSPut200SucceededNoStatePoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSPut200SucceededNoStatePoller(id string) (LrOSPut200SucceededNoStatePoller, error)
	// BeginPut200UpdatingSucceeded204 - Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
	BeginPut200UpdatingSucceeded204(ctx context.Context, lrOSPut200UpdatingSucceeded204Options *LrOSPut200UpdatingSucceeded204Options) (LrOSPut200UpdatingSucceeded204Poller, error)
	// ResumeLrOSPut200UpdatingSucceeded204Poller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSPut200UpdatingSucceeded204Poller(id string) (LrOSPut200UpdatingSucceeded204Poller, error)
	// BeginPut201CreatingFailed200 - Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’
	BeginPut201CreatingFailed200(ctx context.Context, lrOSPut201CreatingFailed200Options *LrOSPut201CreatingFailed200Options) (LrOSPut201CreatingFailed200Poller, error)
	// ResumeLrOSPut201CreatingFailed200Poller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSPut201CreatingFailed200Poller(id string) (LrOSPut201CreatingFailed200Poller, error)
	// BeginPut201CreatingSucceeded200 - Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
	BeginPut201CreatingSucceeded200(ctx context.Context, lrOSPut201CreatingSucceeded200Options *LrOSPut201CreatingSucceeded200Options) (LrOSPut201CreatingSucceeded200Poller, error)
	// ResumeLrOSPut201CreatingSucceeded200Poller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSPut201CreatingSucceeded200Poller(id string) (LrOSPut201CreatingSucceeded200Poller, error)
	// BeginPut202Retry200 - Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState
	BeginPut202Retry200(ctx context.Context, lrOSPut202Retry200Options *LrOSPut202Retry200Options) (LrOSPut202Retry200Poller, error)
	// ResumeLrOSPut202Retry200Poller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSPut202Retry200Poller(id string) (LrOSPut202Retry200Poller, error)
	// BeginPutAsyncNoHeaderInRetry - Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
	BeginPutAsyncNoHeaderInRetry(ctx context.Context, lrOSPutAsyncNoHeaderInRetryOptions *LrOSPutAsyncNoHeaderInRetryOptions) (LrOSPutAsyncNoHeaderInRetryPoller, error)
	// ResumeLrOSPutAsyncNoHeaderInRetryPoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSPutAsyncNoHeaderInRetryPoller(id string) (LrOSPutAsyncNoHeaderInRetryPoller, error)
	// BeginPutAsyncNoRetrySucceeded - Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
	BeginPutAsyncNoRetrySucceeded(ctx context.Context, lrOSPutAsyncNoRetrySucceededOptions *LrOSPutAsyncNoRetrySucceededOptions) (LrOSPutAsyncNoRetrySucceededPoller, error)
	// ResumeLrOSPutAsyncNoRetrySucceededPoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSPutAsyncNoRetrySucceededPoller(id string) (LrOSPutAsyncNoRetrySucceededPoller, error)
	// BeginPutAsyncNoRetrycanceled - Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
	BeginPutAsyncNoRetrycanceled(ctx context.Context, lrOSPutAsyncNoRetrycanceledOptions *LrOSPutAsyncNoRetrycanceledOptions) (LrOSPutAsyncNoRetrycanceledPoller, error)
	// ResumeLrOSPutAsyncNoRetrycanceledPoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSPutAsyncNoRetrycanceledPoller(id string) (LrOSPutAsyncNoRetrycanceledPoller, error)
	// BeginPutAsyncNonResource - Long running put request with non resource.
	BeginPutAsyncNonResource(ctx context.Context, lrOSPutAsyncNonResourceOptions *LrOSPutAsyncNonResourceOptions) (LrOSPutAsyncNonResourcePoller, error)
	// ResumeLrOSPutAsyncNonResourcePoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSPutAsyncNonResourcePoller(id string) (LrOSPutAsyncNonResourcePoller, error)
	// BeginPutAsyncRetryFailed - Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
	BeginPutAsyncRetryFailed(ctx context.Context, lrOSPutAsyncRetryFailedOptions *LrOSPutAsyncRetryFailedOptions) (LrOSPutAsyncRetryFailedPoller, error)
	// ResumeLrOSPutAsyncRetryFailedPoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSPutAsyncRetryFailedPoller(id string) (LrOSPutAsyncRetryFailedPoller, error)
	// BeginPutAsyncRetrySucceeded - Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
	BeginPutAsyncRetrySucceeded(ctx context.Context, lrOSPutAsyncRetrySucceededOptions *LrOSPutAsyncRetrySucceededOptions) (LrOSPutAsyncRetrySucceededPoller, error)
	// ResumeLrOSPutAsyncRetrySucceededPoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSPutAsyncRetrySucceededPoller(id string) (LrOSPutAsyncRetrySucceededPoller, error)
	// BeginPutAsyncSubResource - Long running put request with sub resource.
	BeginPutAsyncSubResource(ctx context.Context, lrOSPutAsyncSubResourceOptions *LrOSPutAsyncSubResourceOptions) (LrOSPutAsyncSubResourcePoller, error)
	// ResumeLrOSPutAsyncSubResourcePoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSPutAsyncSubResourcePoller(id string) (LrOSPutAsyncSubResourcePoller, error)
	// BeginPutNoHeaderInRetry - Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status do not contain location header.
	BeginPutNoHeaderInRetry(ctx context.Context, lrOSPutNoHeaderInRetryOptions *LrOSPutNoHeaderInRetryOptions) (LrOSPutNoHeaderInRetryPoller, error)
	// ResumeLrOSPutNoHeaderInRetryPoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSPutNoHeaderInRetryPoller(id string) (LrOSPutNoHeaderInRetryPoller, error)
	// BeginPutNonResource - Long running put request with non resource.
	BeginPutNonResource(ctx context.Context, lrOSPutNonResourceOptions *LrOSPutNonResourceOptions) (LrOSPutNonResourcePoller, error)
	// ResumeLrOSPutNonResourcePoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSPutNonResourcePoller(id string) (LrOSPutNonResourcePoller, error)
	// BeginPutSubResource - Long running put request with sub resource.
	BeginPutSubResource(ctx context.Context, lrOSPutSubResourceOptions *LrOSPutSubResourceOptions) (LrOSPutSubResourcePoller, error)
	// ResumeLrOSPutSubResourcePoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLrOSPutSubResourcePoller(id string) (LrOSPutSubResourcePoller, error)
}

// lrOSOperations implements the LrOSOperations interface.
type lrOSOperations struct {
	*Client
}

// Delete202NoRetry204 - Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
func (client *lrOSOperations) BeginDelete202NoRetry204(ctx context.Context) (LrOSDelete202NoRetry204Poller, error) {
	req, err := client.delete202NoRetry204CreateRequest()
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSDelete202NoRetry204Poller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSDelete202NoRetry204Poller(id string) (LrOSDelete202NoRetry204Poller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSDelete202NoRetry204Poller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSDelete202NoRetry204Poller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSDelete202NoRetry204Poller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// delete202NoRetry204CreateRequest creates the Delete202NoRetry204 request.
func (client *lrOSOperations) delete202NoRetry204CreateRequest() (*azcore.Request, error) {
	urlPath := "/lro/delete/202/noretry/204"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// delete202NoRetry204HandleResponse handles the Delete202NoRetry204 response.
func (client *lrOSOperations) delete202NoRetry204HandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// Delete202Retry200 - Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
func (client *lrOSOperations) BeginDelete202Retry200(ctx context.Context) (LrOSDelete202Retry200Poller, error) {
	req, err := client.delete202Retry200CreateRequest()
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSDelete202Retry200Poller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSDelete202Retry200Poller(id string) (LrOSDelete202Retry200Poller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSDelete202Retry200Poller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSDelete202Retry200Poller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSDelete202Retry200Poller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// delete202Retry200CreateRequest creates the Delete202Retry200 request.
func (client *lrOSOperations) delete202Retry200CreateRequest() (*azcore.Request, error) {
	urlPath := "/lro/delete/202/retry/200"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// delete202Retry200HandleResponse handles the Delete202Retry200 response.
func (client *lrOSOperations) delete202Retry200HandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// Delete204Succeeded - Long running delete succeeds and returns right away
func (client *lrOSOperations) BeginDelete204Succeeded(ctx context.Context) (LrOSDelete204SucceededPoller, error) {
	req, err := client.delete204SucceededCreateRequest()
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSDelete204SucceededPoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSDelete204SucceededPoller(id string) (LrOSDelete204SucceededPoller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSDelete204SucceededPoller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSDelete204SucceededPoller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSDelete204SucceededPoller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// delete204SucceededCreateRequest creates the Delete204Succeeded request.
func (client *lrOSOperations) delete204SucceededCreateRequest() (*azcore.Request, error) {
	urlPath := "/lro/delete/204/succeeded"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// delete204SucceededHandleResponse handles the Delete204Succeeded response.
func (client *lrOSOperations) delete204SucceededHandleResponse(resp *azcore.Response) (*http.Response, error) {
	return resp.Response, nil
}

// DeleteAsyncNoHeaderInRetry - Long running delete request, service returns an Azure-AsyncOperation header in the initial request. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
func (client *lrOSOperations) BeginDeleteAsyncNoHeaderInRetry(ctx context.Context) (LrOSDeleteAsyncNoHeaderInRetryPoller, error) {
	req, err := client.deleteAsyncNoHeaderInRetryCreateRequest()
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSDeleteAsyncNoHeaderInRetryPoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSDeleteAsyncNoHeaderInRetryPoller(id string) (LrOSDeleteAsyncNoHeaderInRetryPoller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSDeleteAsyncNoHeaderInRetryPoller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSDeleteAsyncNoHeaderInRetryPoller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSDeleteAsyncNoHeaderInRetryPoller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// deleteAsyncNoHeaderInRetryCreateRequest creates the DeleteAsyncNoHeaderInRetry request.
func (client *lrOSOperations) deleteAsyncNoHeaderInRetryCreateRequest() (*azcore.Request, error) {
	urlPath := "/lro/deleteasync/noheader/202/204"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteAsyncNoHeaderInRetryHandleResponse handles the DeleteAsyncNoHeaderInRetry response.
func (client *lrOSOperations) deleteAsyncNoHeaderInRetryHandleResponse(resp *azcore.Response) (*LrOSDeleteAsyncNoHeaderInRetryResponse, error) {
	result := LrOSDeleteAsyncNoHeaderInRetryResponse{RawResponse: resp.Response}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	return &result, nil
}

// DeleteAsyncNoRetrySucceeded - Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
func (client *lrOSOperations) BeginDeleteAsyncNoRetrySucceeded(ctx context.Context) (LrOSDeleteAsyncNoRetrySucceededPoller, error) {
	req, err := client.deleteAsyncNoRetrySucceededCreateRequest()
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSDeleteAsyncNoRetrySucceededPoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSDeleteAsyncNoRetrySucceededPoller(id string) (LrOSDeleteAsyncNoRetrySucceededPoller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSDeleteAsyncNoRetrySucceededPoller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSDeleteAsyncNoRetrySucceededPoller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSDeleteAsyncNoRetrySucceededPoller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// deleteAsyncNoRetrySucceededCreateRequest creates the DeleteAsyncNoRetrySucceeded request.
func (client *lrOSOperations) deleteAsyncNoRetrySucceededCreateRequest() (*azcore.Request, error) {
	urlPath := "/lro/deleteasync/noretry/succeeded"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteAsyncNoRetrySucceededHandleResponse handles the DeleteAsyncNoRetrySucceeded response.
func (client *lrOSOperations) deleteAsyncNoRetrySucceededHandleResponse(resp *azcore.Response) (*LrOSDeleteAsyncNoRetrySucceededResponse, error) {
	result := LrOSDeleteAsyncNoRetrySucceededResponse{RawResponse: resp.Response}
	if val := resp.Header.Get("Azure-AsyncOperation"); val != "" {
		result.AzureAsyncOperation = &val
	}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return nil, err
		}
		result.RetryAfter = &retryAfter
	}
	return &result, nil
}

// DeleteAsyncRetryFailed - Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
func (client *lrOSOperations) BeginDeleteAsyncRetryFailed(ctx context.Context) (LrOSDeleteAsyncRetryFailedPoller, error) {
	req, err := client.deleteAsyncRetryFailedCreateRequest()
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSDeleteAsyncRetryFailedPoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSDeleteAsyncRetryFailedPoller(id string) (LrOSDeleteAsyncRetryFailedPoller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSDeleteAsyncRetryFailedPoller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSDeleteAsyncRetryFailedPoller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSDeleteAsyncRetryFailedPoller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// deleteAsyncRetryFailedCreateRequest creates the DeleteAsyncRetryFailed request.
func (client *lrOSOperations) deleteAsyncRetryFailedCreateRequest() (*azcore.Request, error) {
	urlPath := "/lro/deleteasync/retry/failed"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteAsyncRetryFailedHandleResponse handles the DeleteAsyncRetryFailed response.
func (client *lrOSOperations) deleteAsyncRetryFailedHandleResponse(resp *azcore.Response) (*LrOSDeleteAsyncRetryFailedResponse, error) {
	result := LrOSDeleteAsyncRetryFailedResponse{RawResponse: resp.Response}
	if val := resp.Header.Get("Azure-AsyncOperation"); val != "" {
		result.AzureAsyncOperation = &val
	}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return nil, err
		}
		result.RetryAfter = &retryAfter
	}
	return &result, nil
}

// DeleteAsyncRetrySucceeded - Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
func (client *lrOSOperations) BeginDeleteAsyncRetrySucceeded(ctx context.Context) (LrOSDeleteAsyncRetrySucceededPoller, error) {
	req, err := client.deleteAsyncRetrySucceededCreateRequest()
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSDeleteAsyncRetrySucceededPoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSDeleteAsyncRetrySucceededPoller(id string) (LrOSDeleteAsyncRetrySucceededPoller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSDeleteAsyncRetrySucceededPoller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSDeleteAsyncRetrySucceededPoller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSDeleteAsyncRetrySucceededPoller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// deleteAsyncRetrySucceededCreateRequest creates the DeleteAsyncRetrySucceeded request.
func (client *lrOSOperations) deleteAsyncRetrySucceededCreateRequest() (*azcore.Request, error) {
	urlPath := "/lro/deleteasync/retry/succeeded"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteAsyncRetrySucceededHandleResponse handles the DeleteAsyncRetrySucceeded response.
func (client *lrOSOperations) deleteAsyncRetrySucceededHandleResponse(resp *azcore.Response) (*LrOSDeleteAsyncRetrySucceededResponse, error) {
	result := LrOSDeleteAsyncRetrySucceededResponse{RawResponse: resp.Response}
	if val := resp.Header.Get("Azure-AsyncOperation"); val != "" {
		result.AzureAsyncOperation = &val
	}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return nil, err
		}
		result.RetryAfter = &retryAfter
	}
	return &result, nil
}

// DeleteAsyncRetrycanceled - Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
func (client *lrOSOperations) BeginDeleteAsyncRetrycanceled(ctx context.Context) (LrOSDeleteAsyncRetrycanceledPoller, error) {
	req, err := client.deleteAsyncRetrycanceledCreateRequest()
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSDeleteAsyncRetrycanceledPoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSDeleteAsyncRetrycanceledPoller(id string) (LrOSDeleteAsyncRetrycanceledPoller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSDeleteAsyncRetrycanceledPoller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSDeleteAsyncRetrycanceledPoller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSDeleteAsyncRetrycanceledPoller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// deleteAsyncRetrycanceledCreateRequest creates the DeleteAsyncRetrycanceled request.
func (client *lrOSOperations) deleteAsyncRetrycanceledCreateRequest() (*azcore.Request, error) {
	urlPath := "/lro/deleteasync/retry/canceled"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteAsyncRetrycanceledHandleResponse handles the DeleteAsyncRetrycanceled response.
func (client *lrOSOperations) deleteAsyncRetrycanceledHandleResponse(resp *azcore.Response) (*LrOSDeleteAsyncRetrycanceledResponse, error) {
	result := LrOSDeleteAsyncRetrycanceledResponse{RawResponse: resp.Response}
	if val := resp.Header.Get("Azure-AsyncOperation"); val != "" {
		result.AzureAsyncOperation = &val
	}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return nil, err
		}
		result.RetryAfter = &retryAfter
	}
	return &result, nil
}

// DeleteNoHeaderInRetry - Long running delete request, service returns a location header in the initial request. Subsequent calls to operation status do not contain location header.
func (client *lrOSOperations) BeginDeleteNoHeaderInRetry(ctx context.Context) (LrOSDeleteNoHeaderInRetryPoller, error) {
	req, err := client.deleteNoHeaderInRetryCreateRequest()
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSDeleteNoHeaderInRetryPoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSDeleteNoHeaderInRetryPoller(id string) (LrOSDeleteNoHeaderInRetryPoller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSDeleteNoHeaderInRetryPoller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSDeleteNoHeaderInRetryPoller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSDeleteNoHeaderInRetryPoller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// deleteNoHeaderInRetryCreateRequest creates the DeleteNoHeaderInRetry request.
func (client *lrOSOperations) deleteNoHeaderInRetryCreateRequest() (*azcore.Request, error) {
	urlPath := "/lro/delete/noheader"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteNoHeaderInRetryHandleResponse handles the DeleteNoHeaderInRetry response.
func (client *lrOSOperations) deleteNoHeaderInRetryHandleResponse(resp *azcore.Response) (*LrOSDeleteNoHeaderInRetryResponse, error) {
	result := LrOSDeleteNoHeaderInRetryResponse{RawResponse: resp.Response}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	return &result, nil
}

// DeleteProvisioning202Accepted200Succeeded - Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
func (client *lrOSOperations) BeginDeleteProvisioning202Accepted200Succeeded(ctx context.Context) (LrOSDeleteProvisioning202Accepted200SucceededPoller, error) {
	req, err := client.deleteProvisioning202Accepted200SucceededCreateRequest()
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSDeleteProvisioning202Accepted200SucceededPoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSDeleteProvisioning202Accepted200SucceededPoller(id string) (LrOSDeleteProvisioning202Accepted200SucceededPoller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSDeleteProvisioning202Accepted200SucceededPoller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSDeleteProvisioning202Accepted200SucceededPoller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSDeleteProvisioning202Accepted200SucceededPoller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// deleteProvisioning202Accepted200SucceededCreateRequest creates the DeleteProvisioning202Accepted200Succeeded request.
func (client *lrOSOperations) deleteProvisioning202Accepted200SucceededCreateRequest() (*azcore.Request, error) {
	urlPath := "/lro/delete/provisioning/202/accepted/200/succeeded"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteProvisioning202Accepted200SucceededHandleResponse handles the DeleteProvisioning202Accepted200Succeeded response.
func (client *lrOSOperations) deleteProvisioning202Accepted200SucceededHandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// DeleteProvisioning202DeletingFailed200 - Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’
func (client *lrOSOperations) BeginDeleteProvisioning202DeletingFailed200(ctx context.Context) (LrOSDeleteProvisioning202DeletingFailed200Poller, error) {
	req, err := client.deleteProvisioning202DeletingFailed200CreateRequest()
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSDeleteProvisioning202DeletingFailed200Poller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSDeleteProvisioning202DeletingFailed200Poller(id string) (LrOSDeleteProvisioning202DeletingFailed200Poller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSDeleteProvisioning202DeletingFailed200Poller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSDeleteProvisioning202DeletingFailed200Poller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSDeleteProvisioning202DeletingFailed200Poller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// deleteProvisioning202DeletingFailed200CreateRequest creates the DeleteProvisioning202DeletingFailed200 request.
func (client *lrOSOperations) deleteProvisioning202DeletingFailed200CreateRequest() (*azcore.Request, error) {
	urlPath := "/lro/delete/provisioning/202/deleting/200/failed"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteProvisioning202DeletingFailed200HandleResponse handles the DeleteProvisioning202DeletingFailed200 response.
func (client *lrOSOperations) deleteProvisioning202DeletingFailed200HandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// DeleteProvisioning202Deletingcanceled200 - Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’
func (client *lrOSOperations) BeginDeleteProvisioning202Deletingcanceled200(ctx context.Context) (LrOSDeleteProvisioning202Deletingcanceled200Poller, error) {
	req, err := client.deleteProvisioning202Deletingcanceled200CreateRequest()
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSDeleteProvisioning202Deletingcanceled200Poller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSDeleteProvisioning202Deletingcanceled200Poller(id string) (LrOSDeleteProvisioning202Deletingcanceled200Poller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSDeleteProvisioning202Deletingcanceled200Poller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSDeleteProvisioning202Deletingcanceled200Poller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSDeleteProvisioning202Deletingcanceled200Poller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// deleteProvisioning202Deletingcanceled200CreateRequest creates the DeleteProvisioning202Deletingcanceled200 request.
func (client *lrOSOperations) deleteProvisioning202Deletingcanceled200CreateRequest() (*azcore.Request, error) {
	urlPath := "/lro/delete/provisioning/202/deleting/200/canceled"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteProvisioning202Deletingcanceled200HandleResponse handles the DeleteProvisioning202Deletingcanceled200 response.
func (client *lrOSOperations) deleteProvisioning202Deletingcanceled200HandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// Post200WithPayload - Long running post request, service returns a 202 to the initial request, with 'Location' header. Poll returns a 200 with a response body after success.
func (client *lrOSOperations) BeginPost200WithPayload(ctx context.Context) (LrOSPost200WithPayloadPoller, error) {
	req, err := client.post200WithPayloadCreateRequest()
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSPost200WithPayloadPoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSPost200WithPayloadPoller(id string) (LrOSPost200WithPayloadPoller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSPost200WithPayloadPoller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSPost200WithPayloadPoller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSPost200WithPayloadPoller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// post200WithPayloadCreateRequest creates the Post200WithPayload request.
func (client *lrOSOperations) post200WithPayloadCreateRequest() (*azcore.Request, error) {
	urlPath := "/lro/post/payload/200"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// post200WithPayloadHandleResponse handles the Post200WithPayload response.
func (client *lrOSOperations) post200WithPayloadHandleResponse(resp *azcore.Response) (*SkuResponse, error) {
	result := SkuResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Sku)
}

// Post202NoRetry204 - Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success
func (client *lrOSOperations) BeginPost202NoRetry204(ctx context.Context, lrOSPost202NoRetry204Options *LrOSPost202NoRetry204Options) (LrOSPost202NoRetry204Poller, error) {
	req, err := client.post202NoRetry204CreateRequest(lrOSPost202NoRetry204Options)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSPost202NoRetry204Poller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSPost202NoRetry204Poller(id string) (LrOSPost202NoRetry204Poller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSPost202NoRetry204Poller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSPost202NoRetry204Poller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSPost202NoRetry204Poller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// post202NoRetry204CreateRequest creates the Post202NoRetry204 request.
func (client *lrOSOperations) post202NoRetry204CreateRequest(lrOSPost202NoRetry204Options *LrOSPost202NoRetry204Options) (*azcore.Request, error) {
	urlPath := "/lro/post/202/noretry/204"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	if lrOSPost202NoRetry204Options != nil {
		return req, req.MarshalAsJSON(lrOSPost202NoRetry204Options.Product)
	}
	return req, nil
}

// post202NoRetry204HandleResponse handles the Post202NoRetry204 response.
func (client *lrOSOperations) post202NoRetry204HandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// Post202Retry200 - Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success
func (client *lrOSOperations) BeginPost202Retry200(ctx context.Context, lrOSPost202Retry200Options *LrOSPost202Retry200Options) (LrOSPost202Retry200Poller, error) {
	req, err := client.post202Retry200CreateRequest(lrOSPost202Retry200Options)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSPost202Retry200Poller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSPost202Retry200Poller(id string) (LrOSPost202Retry200Poller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSPost202Retry200Poller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSPost202Retry200Poller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSPost202Retry200Poller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// post202Retry200CreateRequest creates the Post202Retry200 request.
func (client *lrOSOperations) post202Retry200CreateRequest(lrOSPost202Retry200Options *LrOSPost202Retry200Options) (*azcore.Request, error) {
	urlPath := "/lro/post/202/retry/200"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	if lrOSPost202Retry200Options != nil {
		return req, req.MarshalAsJSON(lrOSPost202Retry200Options.Product)
	}
	return req, nil
}

// post202Retry200HandleResponse handles the Post202Retry200 response.
func (client *lrOSOperations) post202Retry200HandleResponse(resp *azcore.Response) (*LrOSPost202Retry200Response, error) {
	result := LrOSPost202Retry200Response{RawResponse: resp.Response}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return nil, err
		}
		result.RetryAfter = &retryAfter
	}
	return &result, nil
}

// PostAsyncNoRetrySucceeded - Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
func (client *lrOSOperations) BeginPostAsyncNoRetrySucceeded(ctx context.Context, lrOSPostAsyncNoRetrySucceededOptions *LrOSPostAsyncNoRetrySucceededOptions) (LrOSPostAsyncNoRetrySucceededPoller, error) {
	req, err := client.postAsyncNoRetrySucceededCreateRequest(lrOSPostAsyncNoRetrySucceededOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSPostAsyncNoRetrySucceededPoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSPostAsyncNoRetrySucceededPoller(id string) (LrOSPostAsyncNoRetrySucceededPoller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSPostAsyncNoRetrySucceededPoller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSPostAsyncNoRetrySucceededPoller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSPostAsyncNoRetrySucceededPoller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// postAsyncNoRetrySucceededCreateRequest creates the PostAsyncNoRetrySucceeded request.
func (client *lrOSOperations) postAsyncNoRetrySucceededCreateRequest(lrOSPostAsyncNoRetrySucceededOptions *LrOSPostAsyncNoRetrySucceededOptions) (*azcore.Request, error) {
	urlPath := "/lro/postasync/noretry/succeeded"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	if lrOSPostAsyncNoRetrySucceededOptions != nil {
		return req, req.MarshalAsJSON(lrOSPostAsyncNoRetrySucceededOptions.Product)
	}
	return req, nil
}

// postAsyncNoRetrySucceededHandleResponse handles the PostAsyncNoRetrySucceeded response.
func (client *lrOSOperations) postAsyncNoRetrySucceededHandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// PostAsyncRetryFailed - Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
func (client *lrOSOperations) BeginPostAsyncRetryFailed(ctx context.Context, lrOSPostAsyncRetryFailedOptions *LrOSPostAsyncRetryFailedOptions) (LrOSPostAsyncRetryFailedPoller, error) {
	req, err := client.postAsyncRetryFailedCreateRequest(lrOSPostAsyncRetryFailedOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSPostAsyncRetryFailedPoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSPostAsyncRetryFailedPoller(id string) (LrOSPostAsyncRetryFailedPoller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSPostAsyncRetryFailedPoller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSPostAsyncRetryFailedPoller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSPostAsyncRetryFailedPoller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// postAsyncRetryFailedCreateRequest creates the PostAsyncRetryFailed request.
func (client *lrOSOperations) postAsyncRetryFailedCreateRequest(lrOSPostAsyncRetryFailedOptions *LrOSPostAsyncRetryFailedOptions) (*azcore.Request, error) {
	urlPath := "/lro/postasync/retry/failed"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	if lrOSPostAsyncRetryFailedOptions != nil {
		return req, req.MarshalAsJSON(lrOSPostAsyncRetryFailedOptions.Product)
	}
	return req, nil
}

// postAsyncRetryFailedHandleResponse handles the PostAsyncRetryFailed response.
func (client *lrOSOperations) postAsyncRetryFailedHandleResponse(resp *azcore.Response) (*LrOSPostAsyncRetryFailedResponse, error) {
	result := LrOSPostAsyncRetryFailedResponse{RawResponse: resp.Response}
	if val := resp.Header.Get("Azure-AsyncOperation"); val != "" {
		result.AzureAsyncOperation = &val
	}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return nil, err
		}
		result.RetryAfter = &retryAfter
	}
	return &result, nil
}

// PostAsyncRetrySucceeded - Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
func (client *lrOSOperations) BeginPostAsyncRetrySucceeded(ctx context.Context, lrOSPostAsyncRetrySucceededOptions *LrOSPostAsyncRetrySucceededOptions) (LrOSPostAsyncRetrySucceededPoller, error) {
	req, err := client.postAsyncRetrySucceededCreateRequest(lrOSPostAsyncRetrySucceededOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSPostAsyncRetrySucceededPoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSPostAsyncRetrySucceededPoller(id string) (LrOSPostAsyncRetrySucceededPoller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSPostAsyncRetrySucceededPoller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSPostAsyncRetrySucceededPoller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSPostAsyncRetrySucceededPoller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// postAsyncRetrySucceededCreateRequest creates the PostAsyncRetrySucceeded request.
func (client *lrOSOperations) postAsyncRetrySucceededCreateRequest(lrOSPostAsyncRetrySucceededOptions *LrOSPostAsyncRetrySucceededOptions) (*azcore.Request, error) {
	urlPath := "/lro/postasync/retry/succeeded"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	if lrOSPostAsyncRetrySucceededOptions != nil {
		return req, req.MarshalAsJSON(lrOSPostAsyncRetrySucceededOptions.Product)
	}
	return req, nil
}

// postAsyncRetrySucceededHandleResponse handles the PostAsyncRetrySucceeded response.
func (client *lrOSOperations) postAsyncRetrySucceededHandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// PostAsyncRetrycanceled - Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
func (client *lrOSOperations) BeginPostAsyncRetrycanceled(ctx context.Context, lrOSPostAsyncRetrycanceledOptions *LrOSPostAsyncRetrycanceledOptions) (LrOSPostAsyncRetrycanceledPoller, error) {
	req, err := client.postAsyncRetrycanceledCreateRequest(lrOSPostAsyncRetrycanceledOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSPostAsyncRetrycanceledPoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSPostAsyncRetrycanceledPoller(id string) (LrOSPostAsyncRetrycanceledPoller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSPostAsyncRetrycanceledPoller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSPostAsyncRetrycanceledPoller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSPostAsyncRetrycanceledPoller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// postAsyncRetrycanceledCreateRequest creates the PostAsyncRetrycanceled request.
func (client *lrOSOperations) postAsyncRetrycanceledCreateRequest(lrOSPostAsyncRetrycanceledOptions *LrOSPostAsyncRetrycanceledOptions) (*azcore.Request, error) {
	urlPath := "/lro/postasync/retry/canceled"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	if lrOSPostAsyncRetrycanceledOptions != nil {
		return req, req.MarshalAsJSON(lrOSPostAsyncRetrycanceledOptions.Product)
	}
	return req, nil
}

// postAsyncRetrycanceledHandleResponse handles the PostAsyncRetrycanceled response.
func (client *lrOSOperations) postAsyncRetrycanceledHandleResponse(resp *azcore.Response) (*LrOSPostAsyncRetrycanceledResponse, error) {
	result := LrOSPostAsyncRetrycanceledResponse{RawResponse: resp.Response}
	if val := resp.Header.Get("Azure-AsyncOperation"); val != "" {
		result.AzureAsyncOperation = &val
	}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return nil, err
		}
		result.RetryAfter = &retryAfter
	}
	return &result, nil
}

// PostDoubleHeadersFinalAzureHeaderGet - Long running post request, service returns a 202 to the initial request with both Location and Azure-Async header. Poll Azure-Async and it's success. Should NOT poll Location to get the final object
func (client *lrOSOperations) BeginPostDoubleHeadersFinalAzureHeaderGet(ctx context.Context) (LrOSPostDoubleHeadersFinalAzureHeaderGetPoller, error) {
	req, err := client.postDoubleHeadersFinalAzureHeaderGetCreateRequest()
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSPostDoubleHeadersFinalAzureHeaderGetPoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSPostDoubleHeadersFinalAzureHeaderGetPoller(id string) (LrOSPostDoubleHeadersFinalAzureHeaderGetPoller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSPostDoubleHeadersFinalAzureHeaderGetPoller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSPostDoubleHeadersFinalAzureHeaderGetPoller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSPostDoubleHeadersFinalAzureHeaderGetPoller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// postDoubleHeadersFinalAzureHeaderGetCreateRequest creates the PostDoubleHeadersFinalAzureHeaderGet request.
func (client *lrOSOperations) postDoubleHeadersFinalAzureHeaderGetCreateRequest() (*azcore.Request, error) {
	urlPath := "/lro/LROPostDoubleHeadersFinalAzureHeaderGet"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// postDoubleHeadersFinalAzureHeaderGetHandleResponse handles the PostDoubleHeadersFinalAzureHeaderGet response.
func (client *lrOSOperations) postDoubleHeadersFinalAzureHeaderGetHandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// PostDoubleHeadersFinalAzureHeaderGetDefault - Long running post request, service returns a 202 to the initial request with both Location and Azure-Async header. Poll Azure-Async and it's success. Should NOT poll Location to get the final object if you support initial Autorest behavior.
func (client *lrOSOperations) BeginPostDoubleHeadersFinalAzureHeaderGetDefault(ctx context.Context) (LrOSPostDoubleHeadersFinalAzureHeaderGetDefaultPoller, error) {
	req, err := client.postDoubleHeadersFinalAzureHeaderGetDefaultCreateRequest()
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSPostDoubleHeadersFinalAzureHeaderGetDefaultPoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSPostDoubleHeadersFinalAzureHeaderGetDefaultPoller(id string) (LrOSPostDoubleHeadersFinalAzureHeaderGetDefaultPoller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSPostDoubleHeadersFinalAzureHeaderGetDefaultPoller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSPostDoubleHeadersFinalAzureHeaderGetDefaultPoller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSPostDoubleHeadersFinalAzureHeaderGetDefaultPoller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// postDoubleHeadersFinalAzureHeaderGetDefaultCreateRequest creates the PostDoubleHeadersFinalAzureHeaderGetDefault request.
func (client *lrOSOperations) postDoubleHeadersFinalAzureHeaderGetDefaultCreateRequest() (*azcore.Request, error) {
	urlPath := "/lro/LROPostDoubleHeadersFinalAzureHeaderGetDefault"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// postDoubleHeadersFinalAzureHeaderGetDefaultHandleResponse handles the PostDoubleHeadersFinalAzureHeaderGetDefault response.
func (client *lrOSOperations) postDoubleHeadersFinalAzureHeaderGetDefaultHandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// PostDoubleHeadersFinalLocationGet - Long running post request, service returns a 202 to the initial request with both Location and Azure-Async header. Poll Azure-Async and it's success. Should poll Location to get the final object
func (client *lrOSOperations) BeginPostDoubleHeadersFinalLocationGet(ctx context.Context) (LrOSPostDoubleHeadersFinalLocationGetPoller, error) {
	req, err := client.postDoubleHeadersFinalLocationGetCreateRequest()
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSPostDoubleHeadersFinalLocationGetPoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSPostDoubleHeadersFinalLocationGetPoller(id string) (LrOSPostDoubleHeadersFinalLocationGetPoller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSPostDoubleHeadersFinalLocationGetPoller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSPostDoubleHeadersFinalLocationGetPoller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSPostDoubleHeadersFinalLocationGetPoller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// postDoubleHeadersFinalLocationGetCreateRequest creates the PostDoubleHeadersFinalLocationGet request.
func (client *lrOSOperations) postDoubleHeadersFinalLocationGetCreateRequest() (*azcore.Request, error) {
	urlPath := "/lro/LROPostDoubleHeadersFinalLocationGet"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// postDoubleHeadersFinalLocationGetHandleResponse handles the PostDoubleHeadersFinalLocationGet response.
func (client *lrOSOperations) postDoubleHeadersFinalLocationGetHandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// Put200Acceptedcanceled200 - Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’
func (client *lrOSOperations) BeginPut200Acceptedcanceled200(ctx context.Context, lrOSPut200Acceptedcanceled200Options *LrOSPut200Acceptedcanceled200Options) (LrOSPut200Acceptedcanceled200Poller, error) {
	req, err := client.put200Acceptedcanceled200CreateRequest(lrOSPut200Acceptedcanceled200Options)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSPut200Acceptedcanceled200Poller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSPut200Acceptedcanceled200Poller(id string) (LrOSPut200Acceptedcanceled200Poller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSPut200Acceptedcanceled200Poller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSPut200Acceptedcanceled200Poller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSPut200Acceptedcanceled200Poller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// put200Acceptedcanceled200CreateRequest creates the Put200Acceptedcanceled200 request.
func (client *lrOSOperations) put200Acceptedcanceled200CreateRequest(lrOSPut200Acceptedcanceled200Options *LrOSPut200Acceptedcanceled200Options) (*azcore.Request, error) {
	urlPath := "/lro/put/200/accepted/canceled/200"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	if lrOSPut200Acceptedcanceled200Options != nil {
		return req, req.MarshalAsJSON(lrOSPut200Acceptedcanceled200Options.Product)
	}
	return req, nil
}

// put200Acceptedcanceled200HandleResponse handles the Put200Acceptedcanceled200 response.
func (client *lrOSOperations) put200Acceptedcanceled200HandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// Put200Succeeded - Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
func (client *lrOSOperations) BeginPut200Succeeded(ctx context.Context, lrOSPut200SucceededOptions *LrOSPut200SucceededOptions) (LrOSPut200SucceededPoller, error) {
	req, err := client.put200SucceededCreateRequest(lrOSPut200SucceededOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSPut200SucceededPoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSPut200SucceededPoller(id string) (LrOSPut200SucceededPoller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSPut200SucceededPoller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSPut200SucceededPoller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSPut200SucceededPoller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// put200SucceededCreateRequest creates the Put200Succeeded request.
func (client *lrOSOperations) put200SucceededCreateRequest(lrOSPut200SucceededOptions *LrOSPut200SucceededOptions) (*azcore.Request, error) {
	urlPath := "/lro/put/200/succeeded"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	if lrOSPut200SucceededOptions != nil {
		return req, req.MarshalAsJSON(lrOSPut200SucceededOptions.Product)
	}
	return req, nil
}

// put200SucceededHandleResponse handles the Put200Succeeded response.
func (client *lrOSOperations) put200SucceededHandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// Put200SucceededNoState - Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’.
func (client *lrOSOperations) BeginPut200SucceededNoState(ctx context.Context, lrOSPut200SucceededNoStateOptions *LrOSPut200SucceededNoStateOptions) (LrOSPut200SucceededNoStatePoller, error) {
	req, err := client.put200SucceededNoStateCreateRequest(lrOSPut200SucceededNoStateOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSPut200SucceededNoStatePoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSPut200SucceededNoStatePoller(id string) (LrOSPut200SucceededNoStatePoller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSPut200SucceededNoStatePoller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSPut200SucceededNoStatePoller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSPut200SucceededNoStatePoller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// put200SucceededNoStateCreateRequest creates the Put200SucceededNoState request.
func (client *lrOSOperations) put200SucceededNoStateCreateRequest(lrOSPut200SucceededNoStateOptions *LrOSPut200SucceededNoStateOptions) (*azcore.Request, error) {
	urlPath := "/lro/put/200/succeeded/nostate"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	if lrOSPut200SucceededNoStateOptions != nil {
		return req, req.MarshalAsJSON(lrOSPut200SucceededNoStateOptions.Product)
	}
	return req, nil
}

// put200SucceededNoStateHandleResponse handles the Put200SucceededNoState response.
func (client *lrOSOperations) put200SucceededNoStateHandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// Put200UpdatingSucceeded204 - Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
func (client *lrOSOperations) BeginPut200UpdatingSucceeded204(ctx context.Context, lrOSPut200UpdatingSucceeded204Options *LrOSPut200UpdatingSucceeded204Options) (LrOSPut200UpdatingSucceeded204Poller, error) {
	req, err := client.put200UpdatingSucceeded204CreateRequest(lrOSPut200UpdatingSucceeded204Options)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSPut200UpdatingSucceeded204Poller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSPut200UpdatingSucceeded204Poller(id string) (LrOSPut200UpdatingSucceeded204Poller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSPut200UpdatingSucceeded204Poller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSPut200UpdatingSucceeded204Poller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSPut200UpdatingSucceeded204Poller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// put200UpdatingSucceeded204CreateRequest creates the Put200UpdatingSucceeded204 request.
func (client *lrOSOperations) put200UpdatingSucceeded204CreateRequest(lrOSPut200UpdatingSucceeded204Options *LrOSPut200UpdatingSucceeded204Options) (*azcore.Request, error) {
	urlPath := "/lro/put/200/updating/succeeded/200"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	if lrOSPut200UpdatingSucceeded204Options != nil {
		return req, req.MarshalAsJSON(lrOSPut200UpdatingSucceeded204Options.Product)
	}
	return req, nil
}

// put200UpdatingSucceeded204HandleResponse handles the Put200UpdatingSucceeded204 response.
func (client *lrOSOperations) put200UpdatingSucceeded204HandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// Put201CreatingFailed200 - Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’
func (client *lrOSOperations) BeginPut201CreatingFailed200(ctx context.Context, lrOSPut201CreatingFailed200Options *LrOSPut201CreatingFailed200Options) (LrOSPut201CreatingFailed200Poller, error) {
	req, err := client.put201CreatingFailed200CreateRequest(lrOSPut201CreatingFailed200Options)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSPut201CreatingFailed200Poller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSPut201CreatingFailed200Poller(id string) (LrOSPut201CreatingFailed200Poller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSPut201CreatingFailed200Poller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSPut201CreatingFailed200Poller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSPut201CreatingFailed200Poller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// put201CreatingFailed200CreateRequest creates the Put201CreatingFailed200 request.
func (client *lrOSOperations) put201CreatingFailed200CreateRequest(lrOSPut201CreatingFailed200Options *LrOSPut201CreatingFailed200Options) (*azcore.Request, error) {
	urlPath := "/lro/put/201/created/failed/200"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	if lrOSPut201CreatingFailed200Options != nil {
		return req, req.MarshalAsJSON(lrOSPut201CreatingFailed200Options.Product)
	}
	return req, nil
}

// put201CreatingFailed200HandleResponse handles the Put201CreatingFailed200 response.
func (client *lrOSOperations) put201CreatingFailed200HandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// Put201CreatingSucceeded200 - Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
func (client *lrOSOperations) BeginPut201CreatingSucceeded200(ctx context.Context, lrOSPut201CreatingSucceeded200Options *LrOSPut201CreatingSucceeded200Options) (LrOSPut201CreatingSucceeded200Poller, error) {
	req, err := client.put201CreatingSucceeded200CreateRequest(lrOSPut201CreatingSucceeded200Options)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSPut201CreatingSucceeded200Poller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSPut201CreatingSucceeded200Poller(id string) (LrOSPut201CreatingSucceeded200Poller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSPut201CreatingSucceeded200Poller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSPut201CreatingSucceeded200Poller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSPut201CreatingSucceeded200Poller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// put201CreatingSucceeded200CreateRequest creates the Put201CreatingSucceeded200 request.
func (client *lrOSOperations) put201CreatingSucceeded200CreateRequest(lrOSPut201CreatingSucceeded200Options *LrOSPut201CreatingSucceeded200Options) (*azcore.Request, error) {
	urlPath := "/lro/put/201/creating/succeeded/200"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	if lrOSPut201CreatingSucceeded200Options != nil {
		return req, req.MarshalAsJSON(lrOSPut201CreatingSucceeded200Options.Product)
	}
	return req, nil
}

// put201CreatingSucceeded200HandleResponse handles the Put201CreatingSucceeded200 response.
func (client *lrOSOperations) put201CreatingSucceeded200HandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// Put202Retry200 - Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState
func (client *lrOSOperations) BeginPut202Retry200(ctx context.Context, lrOSPut202Retry200Options *LrOSPut202Retry200Options) (LrOSPut202Retry200Poller, error) {
	req, err := client.put202Retry200CreateRequest(lrOSPut202Retry200Options)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSPut202Retry200Poller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSPut202Retry200Poller(id string) (LrOSPut202Retry200Poller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSPut202Retry200Poller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSPut202Retry200Poller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSPut202Retry200Poller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// put202Retry200CreateRequest creates the Put202Retry200 request.
func (client *lrOSOperations) put202Retry200CreateRequest(lrOSPut202Retry200Options *LrOSPut202Retry200Options) (*azcore.Request, error) {
	urlPath := "/lro/put/202/retry/200"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	if lrOSPut202Retry200Options != nil {
		return req, req.MarshalAsJSON(lrOSPut202Retry200Options.Product)
	}
	return req, nil
}

// put202Retry200HandleResponse handles the Put202Retry200 response.
func (client *lrOSOperations) put202Retry200HandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// PutAsyncNoHeaderInRetry - Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
func (client *lrOSOperations) BeginPutAsyncNoHeaderInRetry(ctx context.Context, lrOSPutAsyncNoHeaderInRetryOptions *LrOSPutAsyncNoHeaderInRetryOptions) (LrOSPutAsyncNoHeaderInRetryPoller, error) {
	req, err := client.putAsyncNoHeaderInRetryCreateRequest(lrOSPutAsyncNoHeaderInRetryOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSPutAsyncNoHeaderInRetryPoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSPutAsyncNoHeaderInRetryPoller(id string) (LrOSPutAsyncNoHeaderInRetryPoller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSPutAsyncNoHeaderInRetryPoller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSPutAsyncNoHeaderInRetryPoller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSPutAsyncNoHeaderInRetryPoller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// putAsyncNoHeaderInRetryCreateRequest creates the PutAsyncNoHeaderInRetry request.
func (client *lrOSOperations) putAsyncNoHeaderInRetryCreateRequest(lrOSPutAsyncNoHeaderInRetryOptions *LrOSPutAsyncNoHeaderInRetryOptions) (*azcore.Request, error) {
	urlPath := "/lro/putasync/noheader/201/200"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	if lrOSPutAsyncNoHeaderInRetryOptions != nil {
		return req, req.MarshalAsJSON(lrOSPutAsyncNoHeaderInRetryOptions.Product)
	}
	return req, nil
}

// putAsyncNoHeaderInRetryHandleResponse handles the PutAsyncNoHeaderInRetry response.
func (client *lrOSOperations) putAsyncNoHeaderInRetryHandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// PutAsyncNoRetrySucceeded - Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
func (client *lrOSOperations) BeginPutAsyncNoRetrySucceeded(ctx context.Context, lrOSPutAsyncNoRetrySucceededOptions *LrOSPutAsyncNoRetrySucceededOptions) (LrOSPutAsyncNoRetrySucceededPoller, error) {
	req, err := client.putAsyncNoRetrySucceededCreateRequest(lrOSPutAsyncNoRetrySucceededOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSPutAsyncNoRetrySucceededPoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSPutAsyncNoRetrySucceededPoller(id string) (LrOSPutAsyncNoRetrySucceededPoller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSPutAsyncNoRetrySucceededPoller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSPutAsyncNoRetrySucceededPoller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSPutAsyncNoRetrySucceededPoller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// putAsyncNoRetrySucceededCreateRequest creates the PutAsyncNoRetrySucceeded request.
func (client *lrOSOperations) putAsyncNoRetrySucceededCreateRequest(lrOSPutAsyncNoRetrySucceededOptions *LrOSPutAsyncNoRetrySucceededOptions) (*azcore.Request, error) {
	urlPath := "/lro/putasync/noretry/succeeded"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	if lrOSPutAsyncNoRetrySucceededOptions != nil {
		return req, req.MarshalAsJSON(lrOSPutAsyncNoRetrySucceededOptions.Product)
	}
	return req, nil
}

// putAsyncNoRetrySucceededHandleResponse handles the PutAsyncNoRetrySucceeded response.
func (client *lrOSOperations) putAsyncNoRetrySucceededHandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// PutAsyncNoRetrycanceled - Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
func (client *lrOSOperations) BeginPutAsyncNoRetrycanceled(ctx context.Context, lrOSPutAsyncNoRetrycanceledOptions *LrOSPutAsyncNoRetrycanceledOptions) (LrOSPutAsyncNoRetrycanceledPoller, error) {
	req, err := client.putAsyncNoRetrycanceledCreateRequest(lrOSPutAsyncNoRetrycanceledOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSPutAsyncNoRetrycanceledPoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSPutAsyncNoRetrycanceledPoller(id string) (LrOSPutAsyncNoRetrycanceledPoller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSPutAsyncNoRetrycanceledPoller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSPutAsyncNoRetrycanceledPoller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSPutAsyncNoRetrycanceledPoller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// putAsyncNoRetrycanceledCreateRequest creates the PutAsyncNoRetrycanceled request.
func (client *lrOSOperations) putAsyncNoRetrycanceledCreateRequest(lrOSPutAsyncNoRetrycanceledOptions *LrOSPutAsyncNoRetrycanceledOptions) (*azcore.Request, error) {
	urlPath := "/lro/putasync/noretry/canceled"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	if lrOSPutAsyncNoRetrycanceledOptions != nil {
		return req, req.MarshalAsJSON(lrOSPutAsyncNoRetrycanceledOptions.Product)
	}
	return req, nil
}

// putAsyncNoRetrycanceledHandleResponse handles the PutAsyncNoRetrycanceled response.
func (client *lrOSOperations) putAsyncNoRetrycanceledHandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// PutAsyncNonResource - Long running put request with non resource.
func (client *lrOSOperations) BeginPutAsyncNonResource(ctx context.Context, lrOSPutAsyncNonResourceOptions *LrOSPutAsyncNonResourceOptions) (LrOSPutAsyncNonResourcePoller, error) {
	req, err := client.putAsyncNonResourceCreateRequest(lrOSPutAsyncNonResourceOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSPutAsyncNonResourcePoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSPutAsyncNonResourcePoller(id string) (LrOSPutAsyncNonResourcePoller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSPutAsyncNonResourcePoller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSPutAsyncNonResourcePoller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSPutAsyncNonResourcePoller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// putAsyncNonResourceCreateRequest creates the PutAsyncNonResource request.
func (client *lrOSOperations) putAsyncNonResourceCreateRequest(lrOSPutAsyncNonResourceOptions *LrOSPutAsyncNonResourceOptions) (*azcore.Request, error) {
	urlPath := "/lro/putnonresourceasync/202/200"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	if lrOSPutAsyncNonResourceOptions != nil {
		return req, req.MarshalAsJSON(lrOSPutAsyncNonResourceOptions.Sku)
	}
	return req, nil
}

// putAsyncNonResourceHandleResponse handles the PutAsyncNonResource response.
func (client *lrOSOperations) putAsyncNonResourceHandleResponse(resp *azcore.Response) (*SkuResponse, error) {
	result := SkuResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Sku)
}

// PutAsyncRetryFailed - Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
func (client *lrOSOperations) BeginPutAsyncRetryFailed(ctx context.Context, lrOSPutAsyncRetryFailedOptions *LrOSPutAsyncRetryFailedOptions) (LrOSPutAsyncRetryFailedPoller, error) {
	req, err := client.putAsyncRetryFailedCreateRequest(lrOSPutAsyncRetryFailedOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSPutAsyncRetryFailedPoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSPutAsyncRetryFailedPoller(id string) (LrOSPutAsyncRetryFailedPoller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSPutAsyncRetryFailedPoller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSPutAsyncRetryFailedPoller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSPutAsyncRetryFailedPoller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// putAsyncRetryFailedCreateRequest creates the PutAsyncRetryFailed request.
func (client *lrOSOperations) putAsyncRetryFailedCreateRequest(lrOSPutAsyncRetryFailedOptions *LrOSPutAsyncRetryFailedOptions) (*azcore.Request, error) {
	urlPath := "/lro/putasync/retry/failed"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	if lrOSPutAsyncRetryFailedOptions != nil {
		return req, req.MarshalAsJSON(lrOSPutAsyncRetryFailedOptions.Product)
	}
	return req, nil
}

// putAsyncRetryFailedHandleResponse handles the PutAsyncRetryFailed response.
func (client *lrOSOperations) putAsyncRetryFailedHandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// PutAsyncRetrySucceeded - Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
func (client *lrOSOperations) BeginPutAsyncRetrySucceeded(ctx context.Context, lrOSPutAsyncRetrySucceededOptions *LrOSPutAsyncRetrySucceededOptions) (LrOSPutAsyncRetrySucceededPoller, error) {
	req, err := client.putAsyncRetrySucceededCreateRequest(lrOSPutAsyncRetrySucceededOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSPutAsyncRetrySucceededPoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSPutAsyncRetrySucceededPoller(id string) (LrOSPutAsyncRetrySucceededPoller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSPutAsyncRetrySucceededPoller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSPutAsyncRetrySucceededPoller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSPutAsyncRetrySucceededPoller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// putAsyncRetrySucceededCreateRequest creates the PutAsyncRetrySucceeded request.
func (client *lrOSOperations) putAsyncRetrySucceededCreateRequest(lrOSPutAsyncRetrySucceededOptions *LrOSPutAsyncRetrySucceededOptions) (*azcore.Request, error) {
	urlPath := "/lro/putasync/retry/succeeded"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	if lrOSPutAsyncRetrySucceededOptions != nil {
		return req, req.MarshalAsJSON(lrOSPutAsyncRetrySucceededOptions.Product)
	}
	return req, nil
}

// putAsyncRetrySucceededHandleResponse handles the PutAsyncRetrySucceeded response.
func (client *lrOSOperations) putAsyncRetrySucceededHandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// PutAsyncSubResource - Long running put request with sub resource.
func (client *lrOSOperations) BeginPutAsyncSubResource(ctx context.Context, lrOSPutAsyncSubResourceOptions *LrOSPutAsyncSubResourceOptions) (LrOSPutAsyncSubResourcePoller, error) {
	req, err := client.putAsyncSubResourceCreateRequest(lrOSPutAsyncSubResourceOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSPutAsyncSubResourcePoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSPutAsyncSubResourcePoller(id string) (LrOSPutAsyncSubResourcePoller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSPutAsyncSubResourcePoller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSPutAsyncSubResourcePoller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSPutAsyncSubResourcePoller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// putAsyncSubResourceCreateRequest creates the PutAsyncSubResource request.
func (client *lrOSOperations) putAsyncSubResourceCreateRequest(lrOSPutAsyncSubResourceOptions *LrOSPutAsyncSubResourceOptions) (*azcore.Request, error) {
	urlPath := "/lro/putsubresourceasync/202/200"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	if lrOSPutAsyncSubResourceOptions != nil {
		return req, req.MarshalAsJSON(lrOSPutAsyncSubResourceOptions.Product)
	}
	return req, nil
}

// putAsyncSubResourceHandleResponse handles the PutAsyncSubResource response.
func (client *lrOSOperations) putAsyncSubResourceHandleResponse(resp *azcore.Response) (*SubProductResponse, error) {
	result := SubProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.SubProduct)
}

// PutNoHeaderInRetry - Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status do not contain location header.
func (client *lrOSOperations) BeginPutNoHeaderInRetry(ctx context.Context, lrOSPutNoHeaderInRetryOptions *LrOSPutNoHeaderInRetryOptions) (LrOSPutNoHeaderInRetryPoller, error) {
	req, err := client.putNoHeaderInRetryCreateRequest(lrOSPutNoHeaderInRetryOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSPutNoHeaderInRetryPoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSPutNoHeaderInRetryPoller(id string) (LrOSPutNoHeaderInRetryPoller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSPutNoHeaderInRetryPoller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSPutNoHeaderInRetryPoller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSPutNoHeaderInRetryPoller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// putNoHeaderInRetryCreateRequest creates the PutNoHeaderInRetry request.
func (client *lrOSOperations) putNoHeaderInRetryCreateRequest(lrOSPutNoHeaderInRetryOptions *LrOSPutNoHeaderInRetryOptions) (*azcore.Request, error) {
	urlPath := "/lro/put/noheader/202/200"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	if lrOSPutNoHeaderInRetryOptions != nil {
		return req, req.MarshalAsJSON(lrOSPutNoHeaderInRetryOptions.Product)
	}
	return req, nil
}

// putNoHeaderInRetryHandleResponse handles the PutNoHeaderInRetry response.
func (client *lrOSOperations) putNoHeaderInRetryHandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// PutNonResource - Long running put request with non resource.
func (client *lrOSOperations) BeginPutNonResource(ctx context.Context, lrOSPutNonResourceOptions *LrOSPutNonResourceOptions) (LrOSPutNonResourcePoller, error) {
	req, err := client.putNonResourceCreateRequest(lrOSPutNonResourceOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSPutNonResourcePoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSPutNonResourcePoller(id string) (LrOSPutNonResourcePoller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSPutNonResourcePoller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSPutNonResourcePoller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSPutNonResourcePoller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// putNonResourceCreateRequest creates the PutNonResource request.
func (client *lrOSOperations) putNonResourceCreateRequest(lrOSPutNonResourceOptions *LrOSPutNonResourceOptions) (*azcore.Request, error) {
	urlPath := "/lro/putnonresource/202/200"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	if lrOSPutNonResourceOptions != nil {
		return req, req.MarshalAsJSON(lrOSPutNonResourceOptions.Sku)
	}
	return req, nil
}

// putNonResourceHandleResponse handles the PutNonResource response.
func (client *lrOSOperations) putNonResourceHandleResponse(resp *azcore.Response) (*SkuResponse, error) {
	result := SkuResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Sku)
}

// PutSubResource - Long running put request with sub resource.
func (client *lrOSOperations) BeginPutSubResource(ctx context.Context, lrOSPutSubResourceOptions *LrOSPutSubResourceOptions) (LrOSPutSubResourcePoller, error) {
	req, err := client.putSubResourceCreateRequest(lrOSPutSubResourceOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp)
	if err != nil {
		return nil, err
	}
	return &lrOSPutSubResourcePoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lrOSOperations) ResumeLrOSPutSubResourcePoller(id string) (LrOSPutSubResourcePoller, error) {
	// unmarshal into JSON object to determine the tracker type
	obj := map[string]interface{}{}
	err := json.Unmarshal([]byte(id), &obj)
	if err != nil {
		return nil, err
	}
	if obj["method"] == nil {
		return nil, fmt.Errorf("ResumeLrOSPutSubResourcePoller: missing 'method' property")
	}
	method := obj["method"].(string)
	poller := &lrOSPutSubResourcePoller{
		client: client,
	}
	switch strings.ToUpper(method) {
	case http.MethodDelete:
		poller.pt = &pollingTrackerDelete{}
	case http.MethodPatch:
		poller.pt = &pollingTrackerPatch{}
	case http.MethodPost:
		poller.pt = &pollingTrackerPost{}
	case http.MethodPut:
		poller.pt = &pollingTrackerPut{}
	default:
		return nil, fmt.Errorf("ResumeLrOSPutSubResourcePoller: unsupported method '%s'", method)
	}
	// now unmarshal into the tracker
	err = json.Unmarshal([]byte(id), &poller.pt)
	if err != nil {
		return nil, err
	}
	return poller, nil
}

// putSubResourceCreateRequest creates the PutSubResource request.
func (client *lrOSOperations) putSubResourceCreateRequest(lrOSPutSubResourceOptions *LrOSPutSubResourceOptions) (*azcore.Request, error) {
	urlPath := "/lro/putsubresource/202/200"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	if lrOSPutSubResourceOptions != nil {
		return req, req.MarshalAsJSON(lrOSPutSubResourceOptions.Product)
	}
	return req, nil
}

// putSubResourceHandleResponse handles the PutSubResource response.
func (client *lrOSOperations) putSubResourceHandleResponse(resp *azcore.Response) (*SubProductResponse, error) {
	result := SubProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.SubProduct)
}
