// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package lrogroup

import (
	"context"
	"fmt"
	"net/http"
	"time"
)

type CloudError struct {
	Message *string `json:"message,omitempty"`
	Status  *int32  `json:"status,omitempty"`
}

func (e CloudError) Error() string {
	msg := ""
	if e.Message != nil {
		msg += fmt.Sprintf("Message: %v\n", *e.Message)
	}
	if e.Status != nil {
		msg += fmt.Sprintf("Status: %v\n", *e.Status)
	}
	if msg == "" {
		msg = "missing error info"
	}
	return msg
}

// HTTPResponse contains the HTTP response from the call to the service endpoint
type HTTPResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*http.Response, error)

	// Poller contains an initialized poller
	Poller HTTPPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LrOSCustomHeaderPost202Retry200Options contains the optional parameters for the LrOSCustomHeader.Post202Retry200 method.
type LrOSCustomHeaderPost202Retry200Options struct {
	// Product to put
	Product *Product
}

// LrOSCustomHeaderPostAsyncRetrySucceededOptions contains the optional parameters for the LrOSCustomHeader.PostAsyncRetrySucceeded
// method.
type LrOSCustomHeaderPostAsyncRetrySucceededOptions struct {
	// Product to put
	Product *Product
}

// LrOSCustomHeaderPut201CreatingSucceeded200Options contains the optional parameters for the LrOSCustomHeader.Put201CreatingSucceeded200
// method.
type LrOSCustomHeaderPut201CreatingSucceeded200Options struct {
	// Product to put
	Product *Product
}

// LrOSCustomHeaderPutAsyncRetrySucceededOptions contains the optional parameters for the LrOSCustomHeader.PutAsyncRetrySucceeded
// method.
type LrOSCustomHeaderPutAsyncRetrySucceededOptions struct {
	// Product to put
	Product *Product
}

// LrOSPost202NoRetry204Options contains the optional parameters for the LrOS.Post202NoRetry204 method.
type LrOSPost202NoRetry204Options struct {
	// Product to put
	Product *Product
}

// LrOSPost202Retry200Options contains the optional parameters for the LrOS.Post202Retry200 method.
type LrOSPost202Retry200Options struct {
	// Product to put
	Product *Product
}

// LrOSPostAsyncNoRetrySucceededOptions contains the optional parameters for the LrOS.PostAsyncNoRetrySucceeded method.
type LrOSPostAsyncNoRetrySucceededOptions struct {
	// Product to put
	Product *Product
}

// LrOSPostAsyncRetryFailedOptions contains the optional parameters for the LrOS.PostAsyncRetryFailed method.
type LrOSPostAsyncRetryFailedOptions struct {
	// Product to put
	Product *Product
}

// LrOSPostAsyncRetrySucceededOptions contains the optional parameters for the LrOS.PostAsyncRetrySucceeded method.
type LrOSPostAsyncRetrySucceededOptions struct {
	// Product to put
	Product *Product
}

// LrOSPostAsyncRetrycanceledOptions contains the optional parameters for the LrOS.PostAsyncRetrycanceled method.
type LrOSPostAsyncRetrycanceledOptions struct {
	// Product to put
	Product *Product
}

// LrOSPut200Acceptedcanceled200Options contains the optional parameters for the LrOS.Put200Acceptedcanceled200 method.
type LrOSPut200Acceptedcanceled200Options struct {
	// Product to put
	Product *Product
}

// LrOSPut200SucceededNoStateOptions contains the optional parameters for the LrOS.Put200SucceededNoState method.
type LrOSPut200SucceededNoStateOptions struct {
	// Product to put
	Product *Product
}

// LrOSPut200SucceededOptions contains the optional parameters for the LrOS.Put200Succeeded method.
type LrOSPut200SucceededOptions struct {
	// Product to put
	Product *Product
}

// LrOSPut200UpdatingSucceeded204Options contains the optional parameters for the LrOS.Put200UpdatingSucceeded204 method.
type LrOSPut200UpdatingSucceeded204Options struct {
	// Product to put
	Product *Product
}

// LrOSPut201CreatingFailed200Options contains the optional parameters for the LrOS.Put201CreatingFailed200 method.
type LrOSPut201CreatingFailed200Options struct {
	// Product to put
	Product *Product
}

// LrOSPut201CreatingSucceeded200Options contains the optional parameters for the LrOS.Put201CreatingSucceeded200 method.
type LrOSPut201CreatingSucceeded200Options struct {
	// Product to put
	Product *Product
}

// LrOSPut202Retry200Options contains the optional parameters for the LrOS.Put202Retry200 method.
type LrOSPut202Retry200Options struct {
	// Product to put
	Product *Product
}

// LrOSPutAsyncNoHeaderInRetryOptions contains the optional parameters for the LrOS.PutAsyncNoHeaderInRetry method.
type LrOSPutAsyncNoHeaderInRetryOptions struct {
	// Product to put
	Product *Product
}

// LrOSPutAsyncNoRetrySucceededOptions contains the optional parameters for the LrOS.PutAsyncNoRetrySucceeded method.
type LrOSPutAsyncNoRetrySucceededOptions struct {
	// Product to put
	Product *Product
}

// LrOSPutAsyncNoRetrycanceledOptions contains the optional parameters for the LrOS.PutAsyncNoRetrycanceled method.
type LrOSPutAsyncNoRetrycanceledOptions struct {
	// Product to put
	Product *Product
}

// LrOSPutAsyncNonResourceOptions contains the optional parameters for the LrOS.PutAsyncNonResource method.
type LrOSPutAsyncNonResourceOptions struct {
	// Sku to put
	Sku *Sku
}

// LrOSPutAsyncRetryFailedOptions contains the optional parameters for the LrOS.PutAsyncRetryFailed method.
type LrOSPutAsyncRetryFailedOptions struct {
	// Product to put
	Product *Product
}

// LrOSPutAsyncRetrySucceededOptions contains the optional parameters for the LrOS.PutAsyncRetrySucceeded method.
type LrOSPutAsyncRetrySucceededOptions struct {
	// Product to put
	Product *Product
}

// LrOSPutAsyncSubResourceOptions contains the optional parameters for the LrOS.PutAsyncSubResource method.
type LrOSPutAsyncSubResourceOptions struct {
	// Sub Product to put
	Product *SubProduct
}

// LrOSPutNoHeaderInRetryOptions contains the optional parameters for the LrOS.PutNoHeaderInRetry method.
type LrOSPutNoHeaderInRetryOptions struct {
	// Product to put
	Product *Product
}

// LrOSPutNonResourceOptions contains the optional parameters for the LrOS.PutNonResource method.
type LrOSPutNonResourceOptions struct {
	// sku to put
	Sku *Sku
}

// LrOSPutSubResourceOptions contains the optional parameters for the LrOS.PutSubResource method.
type LrOSPutSubResourceOptions struct {
	// Sub Product to put
	Product *SubProduct
}

// LroRetrysPost202Retry200Options contains the optional parameters for the LroRetrys.Post202Retry200 method.
type LroRetrysPost202Retry200Options struct {
	// Product to put
	Product *Product
}

// LroRetrysPostAsyncRelativeRetrySucceededOptions contains the optional parameters for the LroRetrys.PostAsyncRelativeRetrySucceeded
// method.
type LroRetrysPostAsyncRelativeRetrySucceededOptions struct {
	// Product to put
	Product *Product
}

// LroRetrysPut201CreatingSucceeded200Options contains the optional parameters for the LroRetrys.Put201CreatingSucceeded200
// method.
type LroRetrysPut201CreatingSucceeded200Options struct {
	// Product to put
	Product *Product
}

// LroRetrysPutAsyncRelativeRetrySucceededOptions contains the optional parameters for the LroRetrys.PutAsyncRelativeRetrySucceeded
// method.
type LroRetrysPutAsyncRelativeRetrySucceededOptions struct {
	// Product to put
	Product *Product
}

// LrosaDsPost202NoLocationOptions contains the optional parameters for the LrosaDs.Post202NoLocation method.
type LrosaDsPost202NoLocationOptions struct {
	// Product to put
	Product *Product
}

// LrosaDsPost202NonRetry400Options contains the optional parameters for the LrosaDs.Post202NonRetry400 method.
type LrosaDsPost202NonRetry400Options struct {
	// Product to put
	Product *Product
}

// LrosaDsPost202RetryInvalidHeaderOptions contains the optional parameters for the LrosaDs.Post202RetryInvalidHeader method.
type LrosaDsPost202RetryInvalidHeaderOptions struct {
	// Product to put
	Product *Product
}

// LrosaDsPostAsyncRelativeRetry400Options contains the optional parameters for the LrosaDs.PostAsyncRelativeRetry400 method.
type LrosaDsPostAsyncRelativeRetry400Options struct {
	// Product to put
	Product *Product
}

// LrosaDsPostAsyncRelativeRetryInvalidHeaderOptions contains the optional parameters for the LrosaDs.PostAsyncRelativeRetryInvalidHeader
// method.
type LrosaDsPostAsyncRelativeRetryInvalidHeaderOptions struct {
	// Product to put
	Product *Product
}

// LrosaDsPostAsyncRelativeRetryInvalidJSONPollingOptions contains the optional parameters for the LrosaDs.PostAsyncRelativeRetryInvalidJSONPolling
// method.
type LrosaDsPostAsyncRelativeRetryInvalidJSONPollingOptions struct {
	// Product to put
	Product *Product
}

// LrosaDsPostAsyncRelativeRetryNoPayloadOptions contains the optional parameters for the LrosaDs.PostAsyncRelativeRetryNoPayload
// method.
type LrosaDsPostAsyncRelativeRetryNoPayloadOptions struct {
	// Product to put
	Product *Product
}

// LrosaDsPostNonRetry400Options contains the optional parameters for the LrosaDs.PostNonRetry400 method.
type LrosaDsPostNonRetry400Options struct {
	// Product to put
	Product *Product
}

// LrosaDsPut200InvalidJSONOptions contains the optional parameters for the LrosaDs.Put200InvalidJSON method.
type LrosaDsPut200InvalidJSONOptions struct {
	// Product to put
	Product *Product
}

// LrosaDsPutAsyncRelativeRetry400Options contains the optional parameters for the LrosaDs.PutAsyncRelativeRetry400 method.
type LrosaDsPutAsyncRelativeRetry400Options struct {
	// Product to put
	Product *Product
}

// LrosaDsPutAsyncRelativeRetryInvalidHeaderOptions contains the optional parameters for the LrosaDs.PutAsyncRelativeRetryInvalidHeader
// method.
type LrosaDsPutAsyncRelativeRetryInvalidHeaderOptions struct {
	// Product to put
	Product *Product
}

// LrosaDsPutAsyncRelativeRetryInvalidJSONPollingOptions contains the optional parameters for the LrosaDs.PutAsyncRelativeRetryInvalidJSONPolling
// method.
type LrosaDsPutAsyncRelativeRetryInvalidJSONPollingOptions struct {
	// Product to put
	Product *Product
}

// LrosaDsPutAsyncRelativeRetryNoStatusOptions contains the optional parameters for the LrosaDs.PutAsyncRelativeRetryNoStatus
// method.
type LrosaDsPutAsyncRelativeRetryNoStatusOptions struct {
	// Product to put
	Product *Product
}

// LrosaDsPutAsyncRelativeRetryNoStatusPayloadOptions contains the optional parameters for the LrosaDs.PutAsyncRelativeRetryNoStatusPayload
// method.
type LrosaDsPutAsyncRelativeRetryNoStatusPayloadOptions struct {
	// Product to put
	Product *Product
}

// LrosaDsPutError201NoProvisioningStatePayloadOptions contains the optional parameters for the LrosaDs.PutError201NoProvisioningStatePayload
// method.
type LrosaDsPutError201NoProvisioningStatePayloadOptions struct {
	// Product to put
	Product *Product
}

// LrosaDsPutNonRetry201Creating400InvalidJSONOptions contains the optional parameters for the LrosaDs.PutNonRetry201Creating400InvalidJSON
// method.
type LrosaDsPutNonRetry201Creating400InvalidJSONOptions struct {
	// Product to put
	Product *Product
}

// LrosaDsPutNonRetry201Creating400Options contains the optional parameters for the LrosaDs.PutNonRetry201Creating400 method.
type LrosaDsPutNonRetry201Creating400Options struct {
	// Product to put
	Product *Product
}

// LrosaDsPutNonRetry400Options contains the optional parameters for the LrosaDs.PutNonRetry400 method.
type LrosaDsPutNonRetry400Options struct {
	// Product to put
	Product *Product
}

type OperationResult struct {
	Error *OperationResultError `undefined:"error"`

	// The status of the request
	Status *OperationResultStatus `undefined:"status"`
}

type OperationResultError struct {
	// The error code for an operation failure
	Code *int32 `undefined:"code"`

	// The detailed arror message
	Message *string `undefined:"message"`
}

type Product struct {
	Resource
	Properties *ProductProperties `json:"properties,omitempty"`
}

type ProductProperties struct {
	ProvisioningState       *string                                   `json:"provisioningState,omitempty"`
	ProvisioningStateValues *ProductPropertiesProvisioningStateValues `json:"provisioningStateValues,omitempty"`
}

// ProductResponse is the response envelope for operations that return a Product type.
type ProductResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*ProductResponse, error)

	// Poller contains an initialized poller
	Poller  ProductPoller
	Product *Product

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

type Resource struct {
	// Resource Id
	ID *string `json:"id,omitempty"`

	// Resource Location
	Location *string `json:"location,omitempty"`

	// Resource Name
	Name *string `json:"name,omitempty"`

	// Dictionary of <string>
	Tags *map[string]string `json:"tags,omitempty"`

	// Resource Type
	Type *string `json:"type,omitempty"`
}

type Sku struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// SkuResponse is the response envelope for operations that return a Sku type.
type SkuResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*SkuResponse, error)

	// Poller contains an initialized poller
	Poller SkuPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
	Sku         *Sku
}

type SubProduct struct {
	SubResource
	Properties *SubProductProperties `json:"properties,omitempty"`
}

type SubProductProperties struct {
	ProvisioningState       *string                                      `json:"provisioningState,omitempty"`
	ProvisioningStateValues *SubProductPropertiesProvisioningStateValues `json:"provisioningStateValues,omitempty"`
}

// SubProductResponse is the response envelope for operations that return a SubProduct type.
type SubProductResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*SubProductResponse, error)

	// Poller contains an initialized poller
	Poller SubProductPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
	SubProduct  *SubProduct
}

type SubResource struct {
	// Sub Resource Id
	ID *string `json:"id,omitempty"`
}
