// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package lrogroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"time"
)

// LrOSCustomHeaderpost202Retry200Poller provides polling facilities until the operation completes
type LrOSCustomHeaderpost202Retry200Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrOSCustomHeaderPost202Retry200Response, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSCustomHeaderPost202Retry200Response, error)
}

type lrOSCustomHeaderpost202Retry200Poller struct {
	// the client for making the request
	client *lrOSCustomHeaderOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrOSCustomHeaderpost202Retry200Poller) Done() bool {
	return false
}

func (p *lrOSCustomHeaderpost202Retry200Poller) ID() string {
	return "NYI"
}

func (p *lrOSCustomHeaderpost202Retry200Poller) Poll(ctx context.Context) (*LrOSCustomHeaderPost202Retry200Response, error) {
	return nil, nil
}

func (p *lrOSCustomHeaderpost202Retry200Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSCustomHeaderPost202Retry200Response, error) {
	return nil, nil
}

// LrOSCustomHeaderpostAsyncRetrySucceededPoller provides polling facilities until the operation completes
type LrOSCustomHeaderpostAsyncRetrySucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrOSCustomHeaderPostAsyncRetrySucceededResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSCustomHeaderPostAsyncRetrySucceededResponse, error)
}

type lrOSCustomHeaderpostAsyncRetrySucceededPoller struct {
	// the client for making the request
	client *lrOSCustomHeaderOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrOSCustomHeaderpostAsyncRetrySucceededPoller) Done() bool {
	return false
}

func (p *lrOSCustomHeaderpostAsyncRetrySucceededPoller) ID() string {
	return "NYI"
}

func (p *lrOSCustomHeaderpostAsyncRetrySucceededPoller) Poll(ctx context.Context) (*LrOSCustomHeaderPostAsyncRetrySucceededResponse, error) {
	return nil, nil
}

func (p *lrOSCustomHeaderpostAsyncRetrySucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSCustomHeaderPostAsyncRetrySucceededResponse, error) {
	return nil, nil
}

// LrOSCustomHeaderput201CreatingSucceeded200Poller provides polling facilities until the operation completes
type LrOSCustomHeaderput201CreatingSucceeded200Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSCustomHeaderput201CreatingSucceeded200Poller struct {
	// the client for making the request
	client *lrOSCustomHeaderOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSCustomHeaderput201CreatingSucceeded200Poller) Done() bool {
	return false
}

func (p *lrOSCustomHeaderput201CreatingSucceeded200Poller) ID() string {
	return "NYI"
}

func (p *lrOSCustomHeaderput201CreatingSucceeded200Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSCustomHeaderput201CreatingSucceeded200Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSCustomHeaderputAsyncRetrySucceededPoller provides polling facilities until the operation completes
type LrOSCustomHeaderputAsyncRetrySucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSCustomHeaderputAsyncRetrySucceededPoller struct {
	// the client for making the request
	client *lrOSCustomHeaderOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSCustomHeaderputAsyncRetrySucceededPoller) Done() bool {
	return false
}

func (p *lrOSCustomHeaderputAsyncRetrySucceededPoller) ID() string {
	return "NYI"
}

func (p *lrOSCustomHeaderputAsyncRetrySucceededPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSCustomHeaderputAsyncRetrySucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSdelete202NoRetry204Poller provides polling facilities until the operation completes
type LrOSdelete202NoRetry204Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSdelete202NoRetry204Poller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrOSdelete202NoRetry204Poller) Done() bool {
	return false
}

func (p *lrOSdelete202NoRetry204Poller) ID() string {
	return "NYI"
}

func (p *lrOSdelete202NoRetry204Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSdelete202NoRetry204Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSdelete202Retry200Poller provides polling facilities until the operation completes
type LrOSdelete202Retry200Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSdelete202Retry200Poller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrOSdelete202Retry200Poller) Done() bool {
	return false
}

func (p *lrOSdelete202Retry200Poller) ID() string {
	return "NYI"
}

func (p *lrOSdelete202Retry200Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSdelete202Retry200Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSdelete204SucceededPoller provides polling facilities until the operation completes
type LrOSdelete204SucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*http.Response, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*http.Response, error)
}

type lrOSdelete204SucceededPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrOSdelete204SucceededPoller) Done() bool {
	return false
}

func (p *lrOSdelete204SucceededPoller) ID() string {
	return "NYI"
}

func (p *lrOSdelete204SucceededPoller) Poll(ctx context.Context) (*http.Response, error) {
	return nil, nil
}

func (p *lrOSdelete204SucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*http.Response, error) {
	return nil, nil
}

// LrOSdeleteAsyncNoHeaderInRetryPoller provides polling facilities until the operation completes
type LrOSdeleteAsyncNoHeaderInRetryPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrOSDeleteAsyncNoHeaderInRetryResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSDeleteAsyncNoHeaderInRetryResponse, error)
}

type lrOSdeleteAsyncNoHeaderInRetryPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrOSdeleteAsyncNoHeaderInRetryPoller) Done() bool {
	return false
}

func (p *lrOSdeleteAsyncNoHeaderInRetryPoller) ID() string {
	return "NYI"
}

func (p *lrOSdeleteAsyncNoHeaderInRetryPoller) Poll(ctx context.Context) (*LrOSDeleteAsyncNoHeaderInRetryResponse, error) {
	return nil, nil
}

func (p *lrOSdeleteAsyncNoHeaderInRetryPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSDeleteAsyncNoHeaderInRetryResponse, error) {
	return nil, nil
}

// LrOSdeleteAsyncNoRetrySucceededPoller provides polling facilities until the operation completes
type LrOSdeleteAsyncNoRetrySucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrOSDeleteAsyncNoRetrySucceededResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSDeleteAsyncNoRetrySucceededResponse, error)
}

type lrOSdeleteAsyncNoRetrySucceededPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrOSdeleteAsyncNoRetrySucceededPoller) Done() bool {
	return false
}

func (p *lrOSdeleteAsyncNoRetrySucceededPoller) ID() string {
	return "NYI"
}

func (p *lrOSdeleteAsyncNoRetrySucceededPoller) Poll(ctx context.Context) (*LrOSDeleteAsyncNoRetrySucceededResponse, error) {
	return nil, nil
}

func (p *lrOSdeleteAsyncNoRetrySucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSDeleteAsyncNoRetrySucceededResponse, error) {
	return nil, nil
}

// LrOSdeleteAsyncRetryFailedPoller provides polling facilities until the operation completes
type LrOSdeleteAsyncRetryFailedPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrOSDeleteAsyncRetryFailedResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSDeleteAsyncRetryFailedResponse, error)
}

type lrOSdeleteAsyncRetryFailedPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrOSdeleteAsyncRetryFailedPoller) Done() bool {
	return false
}

func (p *lrOSdeleteAsyncRetryFailedPoller) ID() string {
	return "NYI"
}

func (p *lrOSdeleteAsyncRetryFailedPoller) Poll(ctx context.Context) (*LrOSDeleteAsyncRetryFailedResponse, error) {
	return nil, nil
}

func (p *lrOSdeleteAsyncRetryFailedPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSDeleteAsyncRetryFailedResponse, error) {
	return nil, nil
}

// LrOSdeleteAsyncRetrySucceededPoller provides polling facilities until the operation completes
type LrOSdeleteAsyncRetrySucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrOSDeleteAsyncRetrySucceededResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSDeleteAsyncRetrySucceededResponse, error)
}

type lrOSdeleteAsyncRetrySucceededPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrOSdeleteAsyncRetrySucceededPoller) Done() bool {
	return false
}

func (p *lrOSdeleteAsyncRetrySucceededPoller) ID() string {
	return "NYI"
}

func (p *lrOSdeleteAsyncRetrySucceededPoller) Poll(ctx context.Context) (*LrOSDeleteAsyncRetrySucceededResponse, error) {
	return nil, nil
}

func (p *lrOSdeleteAsyncRetrySucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSDeleteAsyncRetrySucceededResponse, error) {
	return nil, nil
}

// LrOSdeleteAsyncRetrycanceledPoller provides polling facilities until the operation completes
type LrOSdeleteAsyncRetrycanceledPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrOSDeleteAsyncRetrycanceledResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSDeleteAsyncRetrycanceledResponse, error)
}

type lrOSdeleteAsyncRetrycanceledPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrOSdeleteAsyncRetrycanceledPoller) Done() bool {
	return false
}

func (p *lrOSdeleteAsyncRetrycanceledPoller) ID() string {
	return "NYI"
}

func (p *lrOSdeleteAsyncRetrycanceledPoller) Poll(ctx context.Context) (*LrOSDeleteAsyncRetrycanceledResponse, error) {
	return nil, nil
}

func (p *lrOSdeleteAsyncRetrycanceledPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSDeleteAsyncRetrycanceledResponse, error) {
	return nil, nil
}

// LrOSdeleteNoHeaderInRetryPoller provides polling facilities until the operation completes
type LrOSdeleteNoHeaderInRetryPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrOSDeleteNoHeaderInRetryResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSDeleteNoHeaderInRetryResponse, error)
}

type lrOSdeleteNoHeaderInRetryPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrOSdeleteNoHeaderInRetryPoller) Done() bool {
	return false
}

func (p *lrOSdeleteNoHeaderInRetryPoller) ID() string {
	return "NYI"
}

func (p *lrOSdeleteNoHeaderInRetryPoller) Poll(ctx context.Context) (*LrOSDeleteNoHeaderInRetryResponse, error) {
	return nil, nil
}

func (p *lrOSdeleteNoHeaderInRetryPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSDeleteNoHeaderInRetryResponse, error) {
	return nil, nil
}

// LrOSdeleteProvisioning202Accepted200SucceededPoller provides polling facilities until the operation completes
type LrOSdeleteProvisioning202Accepted200SucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSdeleteProvisioning202Accepted200SucceededPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrOSdeleteProvisioning202Accepted200SucceededPoller) Done() bool {
	return false
}

func (p *lrOSdeleteProvisioning202Accepted200SucceededPoller) ID() string {
	return "NYI"
}

func (p *lrOSdeleteProvisioning202Accepted200SucceededPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSdeleteProvisioning202Accepted200SucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSdeleteProvisioning202DeletingFailed200Poller provides polling facilities until the operation completes
type LrOSdeleteProvisioning202DeletingFailed200Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSdeleteProvisioning202DeletingFailed200Poller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrOSdeleteProvisioning202DeletingFailed200Poller) Done() bool {
	return false
}

func (p *lrOSdeleteProvisioning202DeletingFailed200Poller) ID() string {
	return "NYI"
}

func (p *lrOSdeleteProvisioning202DeletingFailed200Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSdeleteProvisioning202DeletingFailed200Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSdeleteProvisioning202Deletingcanceled200Poller provides polling facilities until the operation completes
type LrOSdeleteProvisioning202Deletingcanceled200Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSdeleteProvisioning202Deletingcanceled200Poller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrOSdeleteProvisioning202Deletingcanceled200Poller) Done() bool {
	return false
}

func (p *lrOSdeleteProvisioning202Deletingcanceled200Poller) ID() string {
	return "NYI"
}

func (p *lrOSdeleteProvisioning202Deletingcanceled200Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSdeleteProvisioning202Deletingcanceled200Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSpost200WithPayloadPoller provides polling facilities until the operation completes
type LrOSpost200WithPayloadPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*SkuResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*SkuResponse, error)
}

type lrOSpost200WithPayloadPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrOSpost200WithPayloadPoller) Done() bool {
	return false
}

func (p *lrOSpost200WithPayloadPoller) ID() string {
	return "NYI"
}

func (p *lrOSpost200WithPayloadPoller) Poll(ctx context.Context) (*SkuResponse, error) {
	return nil, nil
}

func (p *lrOSpost200WithPayloadPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*SkuResponse, error) {
	return nil, nil
}

// LrOSpost202NoRetry204Poller provides polling facilities until the operation completes
type LrOSpost202NoRetry204Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSpost202NoRetry204Poller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrOSpost202NoRetry204Poller) Done() bool {
	return false
}

func (p *lrOSpost202NoRetry204Poller) ID() string {
	return "NYI"
}

func (p *lrOSpost202NoRetry204Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSpost202NoRetry204Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSpost202Retry200Poller provides polling facilities until the operation completes
type LrOSpost202Retry200Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrOSPost202Retry200Response, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSPost202Retry200Response, error)
}

type lrOSpost202Retry200Poller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrOSpost202Retry200Poller) Done() bool {
	return false
}

func (p *lrOSpost202Retry200Poller) ID() string {
	return "NYI"
}

func (p *lrOSpost202Retry200Poller) Poll(ctx context.Context) (*LrOSPost202Retry200Response, error) {
	return nil, nil
}

func (p *lrOSpost202Retry200Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSPost202Retry200Response, error) {
	return nil, nil
}

// LrOSpostAsyncNoRetrySucceededPoller provides polling facilities until the operation completes
type LrOSpostAsyncNoRetrySucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSpostAsyncNoRetrySucceededPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrOSpostAsyncNoRetrySucceededPoller) Done() bool {
	return false
}

func (p *lrOSpostAsyncNoRetrySucceededPoller) ID() string {
	return "NYI"
}

func (p *lrOSpostAsyncNoRetrySucceededPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSpostAsyncNoRetrySucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSpostAsyncRetryFailedPoller provides polling facilities until the operation completes
type LrOSpostAsyncRetryFailedPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrOSPostAsyncRetryFailedResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSPostAsyncRetryFailedResponse, error)
}

type lrOSpostAsyncRetryFailedPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrOSpostAsyncRetryFailedPoller) Done() bool {
	return false
}

func (p *lrOSpostAsyncRetryFailedPoller) ID() string {
	return "NYI"
}

func (p *lrOSpostAsyncRetryFailedPoller) Poll(ctx context.Context) (*LrOSPostAsyncRetryFailedResponse, error) {
	return nil, nil
}

func (p *lrOSpostAsyncRetryFailedPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSPostAsyncRetryFailedResponse, error) {
	return nil, nil
}

// LrOSpostAsyncRetrySucceededPoller provides polling facilities until the operation completes
type LrOSpostAsyncRetrySucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSpostAsyncRetrySucceededPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrOSpostAsyncRetrySucceededPoller) Done() bool {
	return false
}

func (p *lrOSpostAsyncRetrySucceededPoller) ID() string {
	return "NYI"
}

func (p *lrOSpostAsyncRetrySucceededPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSpostAsyncRetrySucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSpostAsyncRetrycanceledPoller provides polling facilities until the operation completes
type LrOSpostAsyncRetrycanceledPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrOSPostAsyncRetrycanceledResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSPostAsyncRetrycanceledResponse, error)
}

type lrOSpostAsyncRetrycanceledPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrOSpostAsyncRetrycanceledPoller) Done() bool {
	return false
}

func (p *lrOSpostAsyncRetrycanceledPoller) ID() string {
	return "NYI"
}

func (p *lrOSpostAsyncRetrycanceledPoller) Poll(ctx context.Context) (*LrOSPostAsyncRetrycanceledResponse, error) {
	return nil, nil
}

func (p *lrOSpostAsyncRetrycanceledPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSPostAsyncRetrycanceledResponse, error) {
	return nil, nil
}

// LrOSpostDoubleHeadersFinalAzureHeaderGetDefaultPoller provides polling facilities until the operation completes
type LrOSpostDoubleHeadersFinalAzureHeaderGetDefaultPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSpostDoubleHeadersFinalAzureHeaderGetDefaultPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrOSpostDoubleHeadersFinalAzureHeaderGetDefaultPoller) Done() bool {
	return false
}

func (p *lrOSpostDoubleHeadersFinalAzureHeaderGetDefaultPoller) ID() string {
	return "NYI"
}

func (p *lrOSpostDoubleHeadersFinalAzureHeaderGetDefaultPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSpostDoubleHeadersFinalAzureHeaderGetDefaultPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSpostDoubleHeadersFinalAzureHeaderGetPoller provides polling facilities until the operation completes
type LrOSpostDoubleHeadersFinalAzureHeaderGetPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSpostDoubleHeadersFinalAzureHeaderGetPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrOSpostDoubleHeadersFinalAzureHeaderGetPoller) Done() bool {
	return false
}

func (p *lrOSpostDoubleHeadersFinalAzureHeaderGetPoller) ID() string {
	return "NYI"
}

func (p *lrOSpostDoubleHeadersFinalAzureHeaderGetPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSpostDoubleHeadersFinalAzureHeaderGetPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSpostDoubleHeadersFinalLocationGetPoller provides polling facilities until the operation completes
type LrOSpostDoubleHeadersFinalLocationGetPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSpostDoubleHeadersFinalLocationGetPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrOSpostDoubleHeadersFinalLocationGetPoller) Done() bool {
	return false
}

func (p *lrOSpostDoubleHeadersFinalLocationGetPoller) ID() string {
	return "NYI"
}

func (p *lrOSpostDoubleHeadersFinalLocationGetPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSpostDoubleHeadersFinalLocationGetPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSput200Acceptedcanceled200Poller provides polling facilities until the operation completes
type LrOSput200Acceptedcanceled200Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSput200Acceptedcanceled200Poller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSput200Acceptedcanceled200Poller) Done() bool {
	return false
}

func (p *lrOSput200Acceptedcanceled200Poller) ID() string {
	return "NYI"
}

func (p *lrOSput200Acceptedcanceled200Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSput200Acceptedcanceled200Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSput200SucceededNoStatePoller provides polling facilities until the operation completes
type LrOSput200SucceededNoStatePoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSput200SucceededNoStatePoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSput200SucceededNoStatePoller) Done() bool {
	return false
}

func (p *lrOSput200SucceededNoStatePoller) ID() string {
	return "NYI"
}

func (p *lrOSput200SucceededNoStatePoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSput200SucceededNoStatePoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSput200SucceededPoller provides polling facilities until the operation completes
type LrOSput200SucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSput200SucceededPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSput200SucceededPoller) Done() bool {
	return false
}

func (p *lrOSput200SucceededPoller) ID() string {
	return "NYI"
}

func (p *lrOSput200SucceededPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSput200SucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSput200UpdatingSucceeded204Poller provides polling facilities until the operation completes
type LrOSput200UpdatingSucceeded204Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSput200UpdatingSucceeded204Poller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSput200UpdatingSucceeded204Poller) Done() bool {
	return false
}

func (p *lrOSput200UpdatingSucceeded204Poller) ID() string {
	return "NYI"
}

func (p *lrOSput200UpdatingSucceeded204Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSput200UpdatingSucceeded204Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSput201CreatingFailed200Poller provides polling facilities until the operation completes
type LrOSput201CreatingFailed200Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSput201CreatingFailed200Poller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSput201CreatingFailed200Poller) Done() bool {
	return false
}

func (p *lrOSput201CreatingFailed200Poller) ID() string {
	return "NYI"
}

func (p *lrOSput201CreatingFailed200Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSput201CreatingFailed200Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSput201CreatingSucceeded200Poller provides polling facilities until the operation completes
type LrOSput201CreatingSucceeded200Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSput201CreatingSucceeded200Poller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSput201CreatingSucceeded200Poller) Done() bool {
	return false
}

func (p *lrOSput201CreatingSucceeded200Poller) ID() string {
	return "NYI"
}

func (p *lrOSput201CreatingSucceeded200Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSput201CreatingSucceeded200Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSput202Retry200Poller provides polling facilities until the operation completes
type LrOSput202Retry200Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSput202Retry200Poller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSput202Retry200Poller) Done() bool {
	return false
}

func (p *lrOSput202Retry200Poller) ID() string {
	return "NYI"
}

func (p *lrOSput202Retry200Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSput202Retry200Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSputAsyncNoHeaderInRetryPoller provides polling facilities until the operation completes
type LrOSputAsyncNoHeaderInRetryPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSputAsyncNoHeaderInRetryPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSputAsyncNoHeaderInRetryPoller) Done() bool {
	return false
}

func (p *lrOSputAsyncNoHeaderInRetryPoller) ID() string {
	return "NYI"
}

func (p *lrOSputAsyncNoHeaderInRetryPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSputAsyncNoHeaderInRetryPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSputAsyncNoRetrySucceededPoller provides polling facilities until the operation completes
type LrOSputAsyncNoRetrySucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSputAsyncNoRetrySucceededPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSputAsyncNoRetrySucceededPoller) Done() bool {
	return false
}

func (p *lrOSputAsyncNoRetrySucceededPoller) ID() string {
	return "NYI"
}

func (p *lrOSputAsyncNoRetrySucceededPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSputAsyncNoRetrySucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSputAsyncNoRetrycanceledPoller provides polling facilities until the operation completes
type LrOSputAsyncNoRetrycanceledPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSputAsyncNoRetrycanceledPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSputAsyncNoRetrycanceledPoller) Done() bool {
	return false
}

func (p *lrOSputAsyncNoRetrycanceledPoller) ID() string {
	return "NYI"
}

func (p *lrOSputAsyncNoRetrycanceledPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSputAsyncNoRetrycanceledPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSputAsyncNonResourcePoller provides polling facilities until the operation completes
type LrOSputAsyncNonResourcePoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*SkuResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*SkuResponse, error)
}

type lrOSputAsyncNonResourcePoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSputAsyncNonResourcePoller) Done() bool {
	return false
}

func (p *lrOSputAsyncNonResourcePoller) ID() string {
	return "NYI"
}

func (p *lrOSputAsyncNonResourcePoller) Poll(ctx context.Context) (*SkuResponse, error) {
	return nil, nil
}

func (p *lrOSputAsyncNonResourcePoller) Wait(ctx context.Context, pollingInterval time.Duration) (*SkuResponse, error) {
	return nil, nil
}

// LrOSputAsyncRetryFailedPoller provides polling facilities until the operation completes
type LrOSputAsyncRetryFailedPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSputAsyncRetryFailedPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSputAsyncRetryFailedPoller) Done() bool {
	return false
}

func (p *lrOSputAsyncRetryFailedPoller) ID() string {
	return "NYI"
}

func (p *lrOSputAsyncRetryFailedPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSputAsyncRetryFailedPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSputAsyncRetrySucceededPoller provides polling facilities until the operation completes
type LrOSputAsyncRetrySucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSputAsyncRetrySucceededPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSputAsyncRetrySucceededPoller) Done() bool {
	return false
}

func (p *lrOSputAsyncRetrySucceededPoller) ID() string {
	return "NYI"
}

func (p *lrOSputAsyncRetrySucceededPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSputAsyncRetrySucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSputAsyncSubResourcePoller provides polling facilities until the operation completes
type LrOSputAsyncSubResourcePoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*SubProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*SubProductResponse, error)
}

type lrOSputAsyncSubResourcePoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSputAsyncSubResourcePoller) Done() bool {
	return false
}

func (p *lrOSputAsyncSubResourcePoller) ID() string {
	return "NYI"
}

func (p *lrOSputAsyncSubResourcePoller) Poll(ctx context.Context) (*SubProductResponse, error) {
	return nil, nil
}

func (p *lrOSputAsyncSubResourcePoller) Wait(ctx context.Context, pollingInterval time.Duration) (*SubProductResponse, error) {
	return nil, nil
}

// LrOSputNoHeaderInRetryPoller provides polling facilities until the operation completes
type LrOSputNoHeaderInRetryPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSputNoHeaderInRetryPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSputNoHeaderInRetryPoller) Done() bool {
	return false
}

func (p *lrOSputNoHeaderInRetryPoller) ID() string {
	return "NYI"
}

func (p *lrOSputNoHeaderInRetryPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSputNoHeaderInRetryPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSputNonResourcePoller provides polling facilities until the operation completes
type LrOSputNonResourcePoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*SkuResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*SkuResponse, error)
}

type lrOSputNonResourcePoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSputNonResourcePoller) Done() bool {
	return false
}

func (p *lrOSputNonResourcePoller) ID() string {
	return "NYI"
}

func (p *lrOSputNonResourcePoller) Poll(ctx context.Context) (*SkuResponse, error) {
	return nil, nil
}

func (p *lrOSputNonResourcePoller) Wait(ctx context.Context, pollingInterval time.Duration) (*SkuResponse, error) {
	return nil, nil
}

// LrOSputSubResourcePoller provides polling facilities until the operation completes
type LrOSputSubResourcePoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*SubProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*SubProductResponse, error)
}

type lrOSputSubResourcePoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSputSubResourcePoller) Done() bool {
	return false
}

func (p *lrOSputSubResourcePoller) ID() string {
	return "NYI"
}

func (p *lrOSputSubResourcePoller) Poll(ctx context.Context) (*SubProductResponse, error) {
	return nil, nil
}

func (p *lrOSputSubResourcePoller) Wait(ctx context.Context, pollingInterval time.Duration) (*SubProductResponse, error) {
	return nil, nil
}

// LroRetrysdelete202Retry200Poller provides polling facilities until the operation completes
type LroRetrysdelete202Retry200Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LroRetrysDelete202Retry200Response, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LroRetrysDelete202Retry200Response, error)
}

type lroRetrysdelete202Retry200Poller struct {
	// the client for making the request
	client *lroRetrysOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lroRetrysdelete202Retry200Poller) Done() bool {
	return false
}

func (p *lroRetrysdelete202Retry200Poller) ID() string {
	return "NYI"
}

func (p *lroRetrysdelete202Retry200Poller) Poll(ctx context.Context) (*LroRetrysDelete202Retry200Response, error) {
	return nil, nil
}

func (p *lroRetrysdelete202Retry200Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*LroRetrysDelete202Retry200Response, error) {
	return nil, nil
}

// LroRetrysdeleteAsyncRelativeRetrySucceededPoller provides polling facilities until the operation completes
type LroRetrysdeleteAsyncRelativeRetrySucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LroRetrysDeleteAsyncRelativeRetrySucceededResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LroRetrysDeleteAsyncRelativeRetrySucceededResponse, error)
}

type lroRetrysdeleteAsyncRelativeRetrySucceededPoller struct {
	// the client for making the request
	client *lroRetrysOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lroRetrysdeleteAsyncRelativeRetrySucceededPoller) Done() bool {
	return false
}

func (p *lroRetrysdeleteAsyncRelativeRetrySucceededPoller) ID() string {
	return "NYI"
}

func (p *lroRetrysdeleteAsyncRelativeRetrySucceededPoller) Poll(ctx context.Context) (*LroRetrysDeleteAsyncRelativeRetrySucceededResponse, error) {
	return nil, nil
}

func (p *lroRetrysdeleteAsyncRelativeRetrySucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LroRetrysDeleteAsyncRelativeRetrySucceededResponse, error) {
	return nil, nil
}

// LroRetrysdeleteProvisioning202Accepted200SucceededPoller provides polling facilities until the operation completes
type LroRetrysdeleteProvisioning202Accepted200SucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lroRetrysdeleteProvisioning202Accepted200SucceededPoller struct {
	// the client for making the request
	client *lroRetrysOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lroRetrysdeleteProvisioning202Accepted200SucceededPoller) Done() bool {
	return false
}

func (p *lroRetrysdeleteProvisioning202Accepted200SucceededPoller) ID() string {
	return "NYI"
}

func (p *lroRetrysdeleteProvisioning202Accepted200SucceededPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lroRetrysdeleteProvisioning202Accepted200SucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LroRetryspost202Retry200Poller provides polling facilities until the operation completes
type LroRetryspost202Retry200Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LroRetrysPost202Retry200Response, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LroRetrysPost202Retry200Response, error)
}

type lroRetryspost202Retry200Poller struct {
	// the client for making the request
	client *lroRetrysOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lroRetryspost202Retry200Poller) Done() bool {
	return false
}

func (p *lroRetryspost202Retry200Poller) ID() string {
	return "NYI"
}

func (p *lroRetryspost202Retry200Poller) Poll(ctx context.Context) (*LroRetrysPost202Retry200Response, error) {
	return nil, nil
}

func (p *lroRetryspost202Retry200Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*LroRetrysPost202Retry200Response, error) {
	return nil, nil
}

// LroRetryspostAsyncRelativeRetrySucceededPoller provides polling facilities until the operation completes
type LroRetryspostAsyncRelativeRetrySucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LroRetrysPostAsyncRelativeRetrySucceededResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LroRetrysPostAsyncRelativeRetrySucceededResponse, error)
}

type lroRetryspostAsyncRelativeRetrySucceededPoller struct {
	// the client for making the request
	client *lroRetrysOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lroRetryspostAsyncRelativeRetrySucceededPoller) Done() bool {
	return false
}

func (p *lroRetryspostAsyncRelativeRetrySucceededPoller) ID() string {
	return "NYI"
}

func (p *lroRetryspostAsyncRelativeRetrySucceededPoller) Poll(ctx context.Context) (*LroRetrysPostAsyncRelativeRetrySucceededResponse, error) {
	return nil, nil
}

func (p *lroRetryspostAsyncRelativeRetrySucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LroRetrysPostAsyncRelativeRetrySucceededResponse, error) {
	return nil, nil
}

// LroRetrysput201CreatingSucceeded200Poller provides polling facilities until the operation completes
type LroRetrysput201CreatingSucceeded200Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lroRetrysput201CreatingSucceeded200Poller struct {
	// the client for making the request
	client *lroRetrysOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lroRetrysput201CreatingSucceeded200Poller) Done() bool {
	return false
}

func (p *lroRetrysput201CreatingSucceeded200Poller) ID() string {
	return "NYI"
}

func (p *lroRetrysput201CreatingSucceeded200Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lroRetrysput201CreatingSucceeded200Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LroRetrysputAsyncRelativeRetrySucceededPoller provides polling facilities until the operation completes
type LroRetrysputAsyncRelativeRetrySucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lroRetrysputAsyncRelativeRetrySucceededPoller struct {
	// the client for making the request
	client *lroRetrysOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lroRetrysputAsyncRelativeRetrySucceededPoller) Done() bool {
	return false
}

func (p *lroRetrysputAsyncRelativeRetrySucceededPoller) ID() string {
	return "NYI"
}

func (p *lroRetrysputAsyncRelativeRetrySucceededPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lroRetrysputAsyncRelativeRetrySucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrosaDsdelete202NonRetry400Poller provides polling facilities until the operation completes
type LrosaDsdelete202NonRetry400Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsDelete202NonRetry400Response, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsDelete202NonRetry400Response, error)
}

type lrosaDsdelete202NonRetry400Poller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrosaDsdelete202NonRetry400Poller) Done() bool {
	return false
}

func (p *lrosaDsdelete202NonRetry400Poller) ID() string {
	return "NYI"
}

func (p *lrosaDsdelete202NonRetry400Poller) Poll(ctx context.Context) (*LrosaDsDelete202NonRetry400Response, error) {
	return nil, nil
}

func (p *lrosaDsdelete202NonRetry400Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsDelete202NonRetry400Response, error) {
	return nil, nil
}

// LrosaDsdelete202RetryInvalidHeaderPoller provides polling facilities until the operation completes
type LrosaDsdelete202RetryInvalidHeaderPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsDelete202RetryInvalidHeaderResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsDelete202RetryInvalidHeaderResponse, error)
}

type lrosaDsdelete202RetryInvalidHeaderPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrosaDsdelete202RetryInvalidHeaderPoller) Done() bool {
	return false
}

func (p *lrosaDsdelete202RetryInvalidHeaderPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsdelete202RetryInvalidHeaderPoller) Poll(ctx context.Context) (*LrosaDsDelete202RetryInvalidHeaderResponse, error) {
	return nil, nil
}

func (p *lrosaDsdelete202RetryInvalidHeaderPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsDelete202RetryInvalidHeaderResponse, error) {
	return nil, nil
}

// LrosaDsdelete204SucceededPoller provides polling facilities until the operation completes
type LrosaDsdelete204SucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*http.Response, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*http.Response, error)
}

type lrosaDsdelete204SucceededPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrosaDsdelete204SucceededPoller) Done() bool {
	return false
}

func (p *lrosaDsdelete204SucceededPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsdelete204SucceededPoller) Poll(ctx context.Context) (*http.Response, error) {
	return nil, nil
}

func (p *lrosaDsdelete204SucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*http.Response, error) {
	return nil, nil
}

// LrosaDsdeleteAsyncRelativeRetry400Poller provides polling facilities until the operation completes
type LrosaDsdeleteAsyncRelativeRetry400Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsDeleteAsyncRelativeRetry400Response, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsDeleteAsyncRelativeRetry400Response, error)
}

type lrosaDsdeleteAsyncRelativeRetry400Poller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrosaDsdeleteAsyncRelativeRetry400Poller) Done() bool {
	return false
}

func (p *lrosaDsdeleteAsyncRelativeRetry400Poller) ID() string {
	return "NYI"
}

func (p *lrosaDsdeleteAsyncRelativeRetry400Poller) Poll(ctx context.Context) (*LrosaDsDeleteAsyncRelativeRetry400Response, error) {
	return nil, nil
}

func (p *lrosaDsdeleteAsyncRelativeRetry400Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsDeleteAsyncRelativeRetry400Response, error) {
	return nil, nil
}

// LrosaDsdeleteAsyncRelativeRetryInvalidHeaderPoller provides polling facilities until the operation completes
type LrosaDsdeleteAsyncRelativeRetryInvalidHeaderPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsDeleteAsyncRelativeRetryInvalidHeaderResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsDeleteAsyncRelativeRetryInvalidHeaderResponse, error)
}

type lrosaDsdeleteAsyncRelativeRetryInvalidHeaderPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrosaDsdeleteAsyncRelativeRetryInvalidHeaderPoller) Done() bool {
	return false
}

func (p *lrosaDsdeleteAsyncRelativeRetryInvalidHeaderPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsdeleteAsyncRelativeRetryInvalidHeaderPoller) Poll(ctx context.Context) (*LrosaDsDeleteAsyncRelativeRetryInvalidHeaderResponse, error) {
	return nil, nil
}

func (p *lrosaDsdeleteAsyncRelativeRetryInvalidHeaderPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsDeleteAsyncRelativeRetryInvalidHeaderResponse, error) {
	return nil, nil
}

// LrosaDsdeleteAsyncRelativeRetryInvalidJsonPollingPoller provides polling facilities until the operation completes
type LrosaDsdeleteAsyncRelativeRetryInvalidJsonPollingPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsDeleteAsyncRelativeRetryInvalidJSONPollingResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsDeleteAsyncRelativeRetryInvalidJSONPollingResponse, error)
}

type lrosaDsdeleteAsyncRelativeRetryInvalidJsonPollingPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrosaDsdeleteAsyncRelativeRetryInvalidJsonPollingPoller) Done() bool {
	return false
}

func (p *lrosaDsdeleteAsyncRelativeRetryInvalidJsonPollingPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsdeleteAsyncRelativeRetryInvalidJsonPollingPoller) Poll(ctx context.Context) (*LrosaDsDeleteAsyncRelativeRetryInvalidJSONPollingResponse, error) {
	return nil, nil
}

func (p *lrosaDsdeleteAsyncRelativeRetryInvalidJsonPollingPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsDeleteAsyncRelativeRetryInvalidJSONPollingResponse, error) {
	return nil, nil
}

// LrosaDsdeleteAsyncRelativeRetryNoStatusPoller provides polling facilities until the operation completes
type LrosaDsdeleteAsyncRelativeRetryNoStatusPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsDeleteAsyncRelativeRetryNoStatusResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsDeleteAsyncRelativeRetryNoStatusResponse, error)
}

type lrosaDsdeleteAsyncRelativeRetryNoStatusPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrosaDsdeleteAsyncRelativeRetryNoStatusPoller) Done() bool {
	return false
}

func (p *lrosaDsdeleteAsyncRelativeRetryNoStatusPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsdeleteAsyncRelativeRetryNoStatusPoller) Poll(ctx context.Context) (*LrosaDsDeleteAsyncRelativeRetryNoStatusResponse, error) {
	return nil, nil
}

func (p *lrosaDsdeleteAsyncRelativeRetryNoStatusPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsDeleteAsyncRelativeRetryNoStatusResponse, error) {
	return nil, nil
}

// LrosaDsdeleteNonRetry400Poller provides polling facilities until the operation completes
type LrosaDsdeleteNonRetry400Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsDeleteNonRetry400Response, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsDeleteNonRetry400Response, error)
}

type lrosaDsdeleteNonRetry400Poller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrosaDsdeleteNonRetry400Poller) Done() bool {
	return false
}

func (p *lrosaDsdeleteNonRetry400Poller) ID() string {
	return "NYI"
}

func (p *lrosaDsdeleteNonRetry400Poller) Poll(ctx context.Context) (*LrosaDsDeleteNonRetry400Response, error) {
	return nil, nil
}

func (p *lrosaDsdeleteNonRetry400Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsDeleteNonRetry400Response, error) {
	return nil, nil
}

// LrosaDspost202NoLocationPoller provides polling facilities until the operation completes
type LrosaDspost202NoLocationPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsPost202NoLocationResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPost202NoLocationResponse, error)
}

type lrosaDspost202NoLocationPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrosaDspost202NoLocationPoller) Done() bool {
	return false
}

func (p *lrosaDspost202NoLocationPoller) ID() string {
	return "NYI"
}

func (p *lrosaDspost202NoLocationPoller) Poll(ctx context.Context) (*LrosaDsPost202NoLocationResponse, error) {
	return nil, nil
}

func (p *lrosaDspost202NoLocationPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPost202NoLocationResponse, error) {
	return nil, nil
}

// LrosaDspost202NonRetry400Poller provides polling facilities until the operation completes
type LrosaDspost202NonRetry400Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsPost202NonRetry400Response, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPost202NonRetry400Response, error)
}

type lrosaDspost202NonRetry400Poller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrosaDspost202NonRetry400Poller) Done() bool {
	return false
}

func (p *lrosaDspost202NonRetry400Poller) ID() string {
	return "NYI"
}

func (p *lrosaDspost202NonRetry400Poller) Poll(ctx context.Context) (*LrosaDsPost202NonRetry400Response, error) {
	return nil, nil
}

func (p *lrosaDspost202NonRetry400Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPost202NonRetry400Response, error) {
	return nil, nil
}

// LrosaDspost202RetryInvalidHeaderPoller provides polling facilities until the operation completes
type LrosaDspost202RetryInvalidHeaderPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsPost202RetryInvalidHeaderResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPost202RetryInvalidHeaderResponse, error)
}

type lrosaDspost202RetryInvalidHeaderPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrosaDspost202RetryInvalidHeaderPoller) Done() bool {
	return false
}

func (p *lrosaDspost202RetryInvalidHeaderPoller) ID() string {
	return "NYI"
}

func (p *lrosaDspost202RetryInvalidHeaderPoller) Poll(ctx context.Context) (*LrosaDsPost202RetryInvalidHeaderResponse, error) {
	return nil, nil
}

func (p *lrosaDspost202RetryInvalidHeaderPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPost202RetryInvalidHeaderResponse, error) {
	return nil, nil
}

// LrosaDspostAsyncRelativeRetry400Poller provides polling facilities until the operation completes
type LrosaDspostAsyncRelativeRetry400Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsPostAsyncRelativeRetry400Response, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPostAsyncRelativeRetry400Response, error)
}

type lrosaDspostAsyncRelativeRetry400Poller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrosaDspostAsyncRelativeRetry400Poller) Done() bool {
	return false
}

func (p *lrosaDspostAsyncRelativeRetry400Poller) ID() string {
	return "NYI"
}

func (p *lrosaDspostAsyncRelativeRetry400Poller) Poll(ctx context.Context) (*LrosaDsPostAsyncRelativeRetry400Response, error) {
	return nil, nil
}

func (p *lrosaDspostAsyncRelativeRetry400Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPostAsyncRelativeRetry400Response, error) {
	return nil, nil
}

// LrosaDspostAsyncRelativeRetryInvalidHeaderPoller provides polling facilities until the operation completes
type LrosaDspostAsyncRelativeRetryInvalidHeaderPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsPostAsyncRelativeRetryInvalidHeaderResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPostAsyncRelativeRetryInvalidHeaderResponse, error)
}

type lrosaDspostAsyncRelativeRetryInvalidHeaderPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrosaDspostAsyncRelativeRetryInvalidHeaderPoller) Done() bool {
	return false
}

func (p *lrosaDspostAsyncRelativeRetryInvalidHeaderPoller) ID() string {
	return "NYI"
}

func (p *lrosaDspostAsyncRelativeRetryInvalidHeaderPoller) Poll(ctx context.Context) (*LrosaDsPostAsyncRelativeRetryInvalidHeaderResponse, error) {
	return nil, nil
}

func (p *lrosaDspostAsyncRelativeRetryInvalidHeaderPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPostAsyncRelativeRetryInvalidHeaderResponse, error) {
	return nil, nil
}

// LrosaDspostAsyncRelativeRetryInvalidJsonPollingPoller provides polling facilities until the operation completes
type LrosaDspostAsyncRelativeRetryInvalidJsonPollingPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsPostAsyncRelativeRetryInvalidJSONPollingResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPostAsyncRelativeRetryInvalidJSONPollingResponse, error)
}

type lrosaDspostAsyncRelativeRetryInvalidJsonPollingPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrosaDspostAsyncRelativeRetryInvalidJsonPollingPoller) Done() bool {
	return false
}

func (p *lrosaDspostAsyncRelativeRetryInvalidJsonPollingPoller) ID() string {
	return "NYI"
}

func (p *lrosaDspostAsyncRelativeRetryInvalidJsonPollingPoller) Poll(ctx context.Context) (*LrosaDsPostAsyncRelativeRetryInvalidJSONPollingResponse, error) {
	return nil, nil
}

func (p *lrosaDspostAsyncRelativeRetryInvalidJsonPollingPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPostAsyncRelativeRetryInvalidJSONPollingResponse, error) {
	return nil, nil
}

// LrosaDspostAsyncRelativeRetryNoPayloadPoller provides polling facilities until the operation completes
type LrosaDspostAsyncRelativeRetryNoPayloadPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsPostAsyncRelativeRetryNoPayloadResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPostAsyncRelativeRetryNoPayloadResponse, error)
}

type lrosaDspostAsyncRelativeRetryNoPayloadPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrosaDspostAsyncRelativeRetryNoPayloadPoller) Done() bool {
	return false
}

func (p *lrosaDspostAsyncRelativeRetryNoPayloadPoller) ID() string {
	return "NYI"
}

func (p *lrosaDspostAsyncRelativeRetryNoPayloadPoller) Poll(ctx context.Context) (*LrosaDsPostAsyncRelativeRetryNoPayloadResponse, error) {
	return nil, nil
}

func (p *lrosaDspostAsyncRelativeRetryNoPayloadPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPostAsyncRelativeRetryNoPayloadResponse, error) {
	return nil, nil
}

// LrosaDspostNonRetry400Poller provides polling facilities until the operation completes
type LrosaDspostNonRetry400Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsPostNonRetry400Response, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPostNonRetry400Response, error)
}

type lrosaDspostNonRetry400Poller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrosaDspostNonRetry400Poller) Done() bool {
	return false
}

func (p *lrosaDspostNonRetry400Poller) ID() string {
	return "NYI"
}

func (p *lrosaDspostNonRetry400Poller) Poll(ctx context.Context) (*LrosaDsPostNonRetry400Response, error) {
	return nil, nil
}

func (p *lrosaDspostNonRetry400Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPostNonRetry400Response, error) {
	return nil, nil
}

// LrosaDsput200InvalidJsonPoller provides polling facilities until the operation completes
type LrosaDsput200InvalidJsonPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrosaDsput200InvalidJsonPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrosaDsput200InvalidJsonPoller) Done() bool {
	return false
}

func (p *lrosaDsput200InvalidJsonPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsput200InvalidJsonPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrosaDsput200InvalidJsonPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrosaDsputAsyncRelativeRetry400Poller provides polling facilities until the operation completes
type LrosaDsputAsyncRelativeRetry400Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrosaDsputAsyncRelativeRetry400Poller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrosaDsputAsyncRelativeRetry400Poller) Done() bool {
	return false
}

func (p *lrosaDsputAsyncRelativeRetry400Poller) ID() string {
	return "NYI"
}

func (p *lrosaDsputAsyncRelativeRetry400Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrosaDsputAsyncRelativeRetry400Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrosaDsputAsyncRelativeRetryInvalidHeaderPoller provides polling facilities until the operation completes
type LrosaDsputAsyncRelativeRetryInvalidHeaderPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrosaDsputAsyncRelativeRetryInvalidHeaderPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrosaDsputAsyncRelativeRetryInvalidHeaderPoller) Done() bool {
	return false
}

func (p *lrosaDsputAsyncRelativeRetryInvalidHeaderPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsputAsyncRelativeRetryInvalidHeaderPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrosaDsputAsyncRelativeRetryInvalidHeaderPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrosaDsputAsyncRelativeRetryInvalidJsonPollingPoller provides polling facilities until the operation completes
type LrosaDsputAsyncRelativeRetryInvalidJsonPollingPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrosaDsputAsyncRelativeRetryInvalidJsonPollingPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrosaDsputAsyncRelativeRetryInvalidJsonPollingPoller) Done() bool {
	return false
}

func (p *lrosaDsputAsyncRelativeRetryInvalidJsonPollingPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsputAsyncRelativeRetryInvalidJsonPollingPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrosaDsputAsyncRelativeRetryInvalidJsonPollingPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrosaDsputAsyncRelativeRetryNoStatusPayloadPoller provides polling facilities until the operation completes
type LrosaDsputAsyncRelativeRetryNoStatusPayloadPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrosaDsputAsyncRelativeRetryNoStatusPayloadPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrosaDsputAsyncRelativeRetryNoStatusPayloadPoller) Done() bool {
	return false
}

func (p *lrosaDsputAsyncRelativeRetryNoStatusPayloadPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsputAsyncRelativeRetryNoStatusPayloadPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrosaDsputAsyncRelativeRetryNoStatusPayloadPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrosaDsputAsyncRelativeRetryNoStatusPoller provides polling facilities until the operation completes
type LrosaDsputAsyncRelativeRetryNoStatusPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrosaDsputAsyncRelativeRetryNoStatusPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrosaDsputAsyncRelativeRetryNoStatusPoller) Done() bool {
	return false
}

func (p *lrosaDsputAsyncRelativeRetryNoStatusPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsputAsyncRelativeRetryNoStatusPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrosaDsputAsyncRelativeRetryNoStatusPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrosaDsputError201NoProvisioningStatePayloadPoller provides polling facilities until the operation completes
type LrosaDsputError201NoProvisioningStatePayloadPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrosaDsputError201NoProvisioningStatePayloadPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrosaDsputError201NoProvisioningStatePayloadPoller) Done() bool {
	return false
}

func (p *lrosaDsputError201NoProvisioningStatePayloadPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsputError201NoProvisioningStatePayloadPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrosaDsputError201NoProvisioningStatePayloadPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrosaDsputNonRetry201Creating400InvalidJsonPoller provides polling facilities until the operation completes
type LrosaDsputNonRetry201Creating400InvalidJsonPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrosaDsputNonRetry201Creating400InvalidJsonPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrosaDsputNonRetry201Creating400InvalidJsonPoller) Done() bool {
	return false
}

func (p *lrosaDsputNonRetry201Creating400InvalidJsonPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsputNonRetry201Creating400InvalidJsonPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrosaDsputNonRetry201Creating400InvalidJsonPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrosaDsputNonRetry201Creating400Poller provides polling facilities until the operation completes
type LrosaDsputNonRetry201Creating400Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrosaDsputNonRetry201Creating400Poller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrosaDsputNonRetry201Creating400Poller) Done() bool {
	return false
}

func (p *lrosaDsputNonRetry201Creating400Poller) ID() string {
	return "NYI"
}

func (p *lrosaDsputNonRetry201Creating400Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrosaDsputNonRetry201Creating400Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrosaDsputNonRetry400Poller provides polling facilities until the operation completes
type LrosaDsputNonRetry400Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrosaDsputNonRetry400Poller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrosaDsputNonRetry400Poller) Done() bool {
	return false
}

func (p *lrosaDsputNonRetry400Poller) ID() string {
	return "NYI"
}

func (p *lrosaDsputNonRetry400Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrosaDsputNonRetry400Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}
