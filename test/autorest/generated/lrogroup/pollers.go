// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package lrogroup

import (
	"context"
	"net/http"
	"time"
)

// LrOSCustomHeaderPost202Retry200Poller provides polling facilities until the operation completes
type LrOSCustomHeaderPost202Retry200Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrOSCustomHeaderPost202Retry200Response, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSCustomHeaderPost202Retry200Response, error)
}

type lrOSCustomHeaderPost202Retry200Poller struct {
	// the client for making the request
	client *lrOSCustomHeaderOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrOSCustomHeaderPost202Retry200Poller) Done() bool {
	return false
}

func (p *lrOSCustomHeaderPost202Retry200Poller) ID() string {
	return "NYI"
}

func (p *lrOSCustomHeaderPost202Retry200Poller) Poll(ctx context.Context) (*LrOSCustomHeaderPost202Retry200Response, error) {
	return nil, nil
}

func (p *lrOSCustomHeaderPost202Retry200Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSCustomHeaderPost202Retry200Response, error) {
	return nil, nil
}

// LrOSCustomHeaderPostAsyncRetrySucceededPoller provides polling facilities until the operation completes
type LrOSCustomHeaderPostAsyncRetrySucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrOSCustomHeaderPostAsyncRetrySucceededResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSCustomHeaderPostAsyncRetrySucceededResponse, error)
}

type lrOSCustomHeaderPostAsyncRetrySucceededPoller struct {
	// the client for making the request
	client *lrOSCustomHeaderOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrOSCustomHeaderPostAsyncRetrySucceededPoller) Done() bool {
	return false
}

func (p *lrOSCustomHeaderPostAsyncRetrySucceededPoller) ID() string {
	return "NYI"
}

func (p *lrOSCustomHeaderPostAsyncRetrySucceededPoller) Poll(ctx context.Context) (*LrOSCustomHeaderPostAsyncRetrySucceededResponse, error) {
	return nil, nil
}

func (p *lrOSCustomHeaderPostAsyncRetrySucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSCustomHeaderPostAsyncRetrySucceededResponse, error) {
	return nil, nil
}

// LrOSCustomHeaderPut201CreatingSucceeded200Poller provides polling facilities until the operation completes
type LrOSCustomHeaderPut201CreatingSucceeded200Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSCustomHeaderPut201CreatingSucceeded200Poller struct {
	// the client for making the request
	client *lrOSCustomHeaderOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSCustomHeaderPut201CreatingSucceeded200Poller) Done() bool {
	return false
}

func (p *lrOSCustomHeaderPut201CreatingSucceeded200Poller) ID() string {
	return "NYI"
}

func (p *lrOSCustomHeaderPut201CreatingSucceeded200Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSCustomHeaderPut201CreatingSucceeded200Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSCustomHeaderPutAsyncRetrySucceededPoller provides polling facilities until the operation completes
type LrOSCustomHeaderPutAsyncRetrySucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSCustomHeaderPutAsyncRetrySucceededPoller struct {
	// the client for making the request
	client *lrOSCustomHeaderOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSCustomHeaderPutAsyncRetrySucceededPoller) Done() bool {
	return false
}

func (p *lrOSCustomHeaderPutAsyncRetrySucceededPoller) ID() string {
	return "NYI"
}

func (p *lrOSCustomHeaderPutAsyncRetrySucceededPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSCustomHeaderPutAsyncRetrySucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSDelete202NoRetry204Poller provides polling facilities until the operation completes
type LrOSDelete202NoRetry204Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSDelete202NoRetry204Poller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrOSDelete202NoRetry204Poller) Done() bool {
	return false
}

func (p *lrOSDelete202NoRetry204Poller) ID() string {
	return "NYI"
}

func (p *lrOSDelete202NoRetry204Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSDelete202NoRetry204Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSDelete202Retry200Poller provides polling facilities until the operation completes
type LrOSDelete202Retry200Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSDelete202Retry200Poller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrOSDelete202Retry200Poller) Done() bool {
	return false
}

func (p *lrOSDelete202Retry200Poller) ID() string {
	return "NYI"
}

func (p *lrOSDelete202Retry200Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSDelete202Retry200Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSDelete204SucceededPoller provides polling facilities until the operation completes
type LrOSDelete204SucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*http.Response, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*http.Response, error)
}

type lrOSDelete204SucceededPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrOSDelete204SucceededPoller) Done() bool {
	return false
}

func (p *lrOSDelete204SucceededPoller) ID() string {
	return "NYI"
}

func (p *lrOSDelete204SucceededPoller) Poll(ctx context.Context) (*http.Response, error) {
	return nil, nil
}

func (p *lrOSDelete204SucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*http.Response, error) {
	return nil, nil
}

// LrOSDeleteAsyncNoHeaderInRetryPoller provides polling facilities until the operation completes
type LrOSDeleteAsyncNoHeaderInRetryPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrOSDeleteAsyncNoHeaderInRetryResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSDeleteAsyncNoHeaderInRetryResponse, error)
}

type lrOSDeleteAsyncNoHeaderInRetryPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrOSDeleteAsyncNoHeaderInRetryPoller) Done() bool {
	return false
}

func (p *lrOSDeleteAsyncNoHeaderInRetryPoller) ID() string {
	return "NYI"
}

func (p *lrOSDeleteAsyncNoHeaderInRetryPoller) Poll(ctx context.Context) (*LrOSDeleteAsyncNoHeaderInRetryResponse, error) {
	return nil, nil
}

func (p *lrOSDeleteAsyncNoHeaderInRetryPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSDeleteAsyncNoHeaderInRetryResponse, error) {
	return nil, nil
}

// LrOSDeleteAsyncNoRetrySucceededPoller provides polling facilities until the operation completes
type LrOSDeleteAsyncNoRetrySucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrOSDeleteAsyncNoRetrySucceededResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSDeleteAsyncNoRetrySucceededResponse, error)
}

type lrOSDeleteAsyncNoRetrySucceededPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrOSDeleteAsyncNoRetrySucceededPoller) Done() bool {
	return false
}

func (p *lrOSDeleteAsyncNoRetrySucceededPoller) ID() string {
	return "NYI"
}

func (p *lrOSDeleteAsyncNoRetrySucceededPoller) Poll(ctx context.Context) (*LrOSDeleteAsyncNoRetrySucceededResponse, error) {
	return nil, nil
}

func (p *lrOSDeleteAsyncNoRetrySucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSDeleteAsyncNoRetrySucceededResponse, error) {
	return nil, nil
}

// LrOSDeleteAsyncRetryFailedPoller provides polling facilities until the operation completes
type LrOSDeleteAsyncRetryFailedPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrOSDeleteAsyncRetryFailedResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSDeleteAsyncRetryFailedResponse, error)
}

type lrOSDeleteAsyncRetryFailedPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrOSDeleteAsyncRetryFailedPoller) Done() bool {
	return false
}

func (p *lrOSDeleteAsyncRetryFailedPoller) ID() string {
	return "NYI"
}

func (p *lrOSDeleteAsyncRetryFailedPoller) Poll(ctx context.Context) (*LrOSDeleteAsyncRetryFailedResponse, error) {
	return nil, nil
}

func (p *lrOSDeleteAsyncRetryFailedPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSDeleteAsyncRetryFailedResponse, error) {
	return nil, nil
}

// LrOSDeleteAsyncRetrySucceededPoller provides polling facilities until the operation completes
type LrOSDeleteAsyncRetrySucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrOSDeleteAsyncRetrySucceededResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSDeleteAsyncRetrySucceededResponse, error)
}

type lrOSDeleteAsyncRetrySucceededPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrOSDeleteAsyncRetrySucceededPoller) Done() bool {
	return false
}

func (p *lrOSDeleteAsyncRetrySucceededPoller) ID() string {
	return "NYI"
}

func (p *lrOSDeleteAsyncRetrySucceededPoller) Poll(ctx context.Context) (*LrOSDeleteAsyncRetrySucceededResponse, error) {
	return nil, nil
}

func (p *lrOSDeleteAsyncRetrySucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSDeleteAsyncRetrySucceededResponse, error) {
	return nil, nil
}

// LrOSDeleteAsyncRetrycanceledPoller provides polling facilities until the operation completes
type LrOSDeleteAsyncRetrycanceledPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrOSDeleteAsyncRetrycanceledResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSDeleteAsyncRetrycanceledResponse, error)
}

type lrOSDeleteAsyncRetrycanceledPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrOSDeleteAsyncRetrycanceledPoller) Done() bool {
	return false
}

func (p *lrOSDeleteAsyncRetrycanceledPoller) ID() string {
	return "NYI"
}

func (p *lrOSDeleteAsyncRetrycanceledPoller) Poll(ctx context.Context) (*LrOSDeleteAsyncRetrycanceledResponse, error) {
	return nil, nil
}

func (p *lrOSDeleteAsyncRetrycanceledPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSDeleteAsyncRetrycanceledResponse, error) {
	return nil, nil
}

// LrOSDeleteNoHeaderInRetryPoller provides polling facilities until the operation completes
type LrOSDeleteNoHeaderInRetryPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrOSDeleteNoHeaderInRetryResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSDeleteNoHeaderInRetryResponse, error)
}

type lrOSDeleteNoHeaderInRetryPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrOSDeleteNoHeaderInRetryPoller) Done() bool {
	return false
}

func (p *lrOSDeleteNoHeaderInRetryPoller) ID() string {
	return "NYI"
}

func (p *lrOSDeleteNoHeaderInRetryPoller) Poll(ctx context.Context) (*LrOSDeleteNoHeaderInRetryResponse, error) {
	return nil, nil
}

func (p *lrOSDeleteNoHeaderInRetryPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSDeleteNoHeaderInRetryResponse, error) {
	return nil, nil
}

// LrOSDeleteProvisioning202Accepted200SucceededPoller provides polling facilities until the operation completes
type LrOSDeleteProvisioning202Accepted200SucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSDeleteProvisioning202Accepted200SucceededPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrOSDeleteProvisioning202Accepted200SucceededPoller) Done() bool {
	return false
}

func (p *lrOSDeleteProvisioning202Accepted200SucceededPoller) ID() string {
	return "NYI"
}

func (p *lrOSDeleteProvisioning202Accepted200SucceededPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSDeleteProvisioning202Accepted200SucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSDeleteProvisioning202DeletingFailed200Poller provides polling facilities until the operation completes
type LrOSDeleteProvisioning202DeletingFailed200Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSDeleteProvisioning202DeletingFailed200Poller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrOSDeleteProvisioning202DeletingFailed200Poller) Done() bool {
	return false
}

func (p *lrOSDeleteProvisioning202DeletingFailed200Poller) ID() string {
	return "NYI"
}

func (p *lrOSDeleteProvisioning202DeletingFailed200Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSDeleteProvisioning202DeletingFailed200Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSDeleteProvisioning202Deletingcanceled200Poller provides polling facilities until the operation completes
type LrOSDeleteProvisioning202Deletingcanceled200Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSDeleteProvisioning202Deletingcanceled200Poller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrOSDeleteProvisioning202Deletingcanceled200Poller) Done() bool {
	return false
}

func (p *lrOSDeleteProvisioning202Deletingcanceled200Poller) ID() string {
	return "NYI"
}

func (p *lrOSDeleteProvisioning202Deletingcanceled200Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSDeleteProvisioning202Deletingcanceled200Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSPost200WithPayloadPoller provides polling facilities until the operation completes
type LrOSPost200WithPayloadPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*SkuResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*SkuResponse, error)
}

type lrOSPost200WithPayloadPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrOSPost200WithPayloadPoller) Done() bool {
	return false
}

func (p *lrOSPost200WithPayloadPoller) ID() string {
	return "NYI"
}

func (p *lrOSPost200WithPayloadPoller) Poll(ctx context.Context) (*SkuResponse, error) {
	return nil, nil
}

func (p *lrOSPost200WithPayloadPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*SkuResponse, error) {
	return nil, nil
}

// LrOSPost202NoRetry204Poller provides polling facilities until the operation completes
type LrOSPost202NoRetry204Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSPost202NoRetry204Poller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrOSPost202NoRetry204Poller) Done() bool {
	return false
}

func (p *lrOSPost202NoRetry204Poller) ID() string {
	return "NYI"
}

func (p *lrOSPost202NoRetry204Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSPost202NoRetry204Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSPost202Retry200Poller provides polling facilities until the operation completes
type LrOSPost202Retry200Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrOSPost202Retry200Response, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSPost202Retry200Response, error)
}

type lrOSPost202Retry200Poller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrOSPost202Retry200Poller) Done() bool {
	return false
}

func (p *lrOSPost202Retry200Poller) ID() string {
	return "NYI"
}

func (p *lrOSPost202Retry200Poller) Poll(ctx context.Context) (*LrOSPost202Retry200Response, error) {
	return nil, nil
}

func (p *lrOSPost202Retry200Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSPost202Retry200Response, error) {
	return nil, nil
}

// LrOSPostAsyncNoRetrySucceededPoller provides polling facilities until the operation completes
type LrOSPostAsyncNoRetrySucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSPostAsyncNoRetrySucceededPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrOSPostAsyncNoRetrySucceededPoller) Done() bool {
	return false
}

func (p *lrOSPostAsyncNoRetrySucceededPoller) ID() string {
	return "NYI"
}

func (p *lrOSPostAsyncNoRetrySucceededPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSPostAsyncNoRetrySucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSPostAsyncRetryFailedPoller provides polling facilities until the operation completes
type LrOSPostAsyncRetryFailedPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrOSPostAsyncRetryFailedResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSPostAsyncRetryFailedResponse, error)
}

type lrOSPostAsyncRetryFailedPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrOSPostAsyncRetryFailedPoller) Done() bool {
	return false
}

func (p *lrOSPostAsyncRetryFailedPoller) ID() string {
	return "NYI"
}

func (p *lrOSPostAsyncRetryFailedPoller) Poll(ctx context.Context) (*LrOSPostAsyncRetryFailedResponse, error) {
	return nil, nil
}

func (p *lrOSPostAsyncRetryFailedPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSPostAsyncRetryFailedResponse, error) {
	return nil, nil
}

// LrOSPostAsyncRetrySucceededPoller provides polling facilities until the operation completes
type LrOSPostAsyncRetrySucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSPostAsyncRetrySucceededPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrOSPostAsyncRetrySucceededPoller) Done() bool {
	return false
}

func (p *lrOSPostAsyncRetrySucceededPoller) ID() string {
	return "NYI"
}

func (p *lrOSPostAsyncRetrySucceededPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSPostAsyncRetrySucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSPostAsyncRetrycanceledPoller provides polling facilities until the operation completes
type LrOSPostAsyncRetrycanceledPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrOSPostAsyncRetrycanceledResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSPostAsyncRetrycanceledResponse, error)
}

type lrOSPostAsyncRetrycanceledPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrOSPostAsyncRetrycanceledPoller) Done() bool {
	return false
}

func (p *lrOSPostAsyncRetrycanceledPoller) ID() string {
	return "NYI"
}

func (p *lrOSPostAsyncRetrycanceledPoller) Poll(ctx context.Context) (*LrOSPostAsyncRetrycanceledResponse, error) {
	return nil, nil
}

func (p *lrOSPostAsyncRetrycanceledPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrOSPostAsyncRetrycanceledResponse, error) {
	return nil, nil
}

// LrOSPostDoubleHeadersFinalAzureHeaderGetDefaultPoller provides polling facilities until the operation completes
type LrOSPostDoubleHeadersFinalAzureHeaderGetDefaultPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSPostDoubleHeadersFinalAzureHeaderGetDefaultPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrOSPostDoubleHeadersFinalAzureHeaderGetDefaultPoller) Done() bool {
	return false
}

func (p *lrOSPostDoubleHeadersFinalAzureHeaderGetDefaultPoller) ID() string {
	return "NYI"
}

func (p *lrOSPostDoubleHeadersFinalAzureHeaderGetDefaultPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSPostDoubleHeadersFinalAzureHeaderGetDefaultPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSPostDoubleHeadersFinalAzureHeaderGetPoller provides polling facilities until the operation completes
type LrOSPostDoubleHeadersFinalAzureHeaderGetPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSPostDoubleHeadersFinalAzureHeaderGetPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrOSPostDoubleHeadersFinalAzureHeaderGetPoller) Done() bool {
	return false
}

func (p *lrOSPostDoubleHeadersFinalAzureHeaderGetPoller) ID() string {
	return "NYI"
}

func (p *lrOSPostDoubleHeadersFinalAzureHeaderGetPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSPostDoubleHeadersFinalAzureHeaderGetPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSPostDoubleHeadersFinalLocationGetPoller provides polling facilities until the operation completes
type LrOSPostDoubleHeadersFinalLocationGetPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSPostDoubleHeadersFinalLocationGetPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrOSPostDoubleHeadersFinalLocationGetPoller) Done() bool {
	return false
}

func (p *lrOSPostDoubleHeadersFinalLocationGetPoller) ID() string {
	return "NYI"
}

func (p *lrOSPostDoubleHeadersFinalLocationGetPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSPostDoubleHeadersFinalLocationGetPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSPut200Acceptedcanceled200Poller provides polling facilities until the operation completes
type LrOSPut200Acceptedcanceled200Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSPut200Acceptedcanceled200Poller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSPut200Acceptedcanceled200Poller) Done() bool {
	return false
}

func (p *lrOSPut200Acceptedcanceled200Poller) ID() string {
	return "NYI"
}

func (p *lrOSPut200Acceptedcanceled200Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSPut200Acceptedcanceled200Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSPut200SucceededNoStatePoller provides polling facilities until the operation completes
type LrOSPut200SucceededNoStatePoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSPut200SucceededNoStatePoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSPut200SucceededNoStatePoller) Done() bool {
	return false
}

func (p *lrOSPut200SucceededNoStatePoller) ID() string {
	return "NYI"
}

func (p *lrOSPut200SucceededNoStatePoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSPut200SucceededNoStatePoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSPut200SucceededPoller provides polling facilities until the operation completes
type LrOSPut200SucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSPut200SucceededPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSPut200SucceededPoller) Done() bool {
	return false
}

func (p *lrOSPut200SucceededPoller) ID() string {
	return "NYI"
}

func (p *lrOSPut200SucceededPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSPut200SucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSPut200UpdatingSucceeded204Poller provides polling facilities until the operation completes
type LrOSPut200UpdatingSucceeded204Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSPut200UpdatingSucceeded204Poller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSPut200UpdatingSucceeded204Poller) Done() bool {
	return false
}

func (p *lrOSPut200UpdatingSucceeded204Poller) ID() string {
	return "NYI"
}

func (p *lrOSPut200UpdatingSucceeded204Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSPut200UpdatingSucceeded204Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSPut201CreatingFailed200Poller provides polling facilities until the operation completes
type LrOSPut201CreatingFailed200Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSPut201CreatingFailed200Poller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSPut201CreatingFailed200Poller) Done() bool {
	return false
}

func (p *lrOSPut201CreatingFailed200Poller) ID() string {
	return "NYI"
}

func (p *lrOSPut201CreatingFailed200Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSPut201CreatingFailed200Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSPut201CreatingSucceeded200Poller provides polling facilities until the operation completes
type LrOSPut201CreatingSucceeded200Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSPut201CreatingSucceeded200Poller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSPut201CreatingSucceeded200Poller) Done() bool {
	return false
}

func (p *lrOSPut201CreatingSucceeded200Poller) ID() string {
	return "NYI"
}

func (p *lrOSPut201CreatingSucceeded200Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSPut201CreatingSucceeded200Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSPut202Retry200Poller provides polling facilities until the operation completes
type LrOSPut202Retry200Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSPut202Retry200Poller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSPut202Retry200Poller) Done() bool {
	return false
}

func (p *lrOSPut202Retry200Poller) ID() string {
	return "NYI"
}

func (p *lrOSPut202Retry200Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSPut202Retry200Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSPutAsyncNoHeaderInRetryPoller provides polling facilities until the operation completes
type LrOSPutAsyncNoHeaderInRetryPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSPutAsyncNoHeaderInRetryPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSPutAsyncNoHeaderInRetryPoller) Done() bool {
	return false
}

func (p *lrOSPutAsyncNoHeaderInRetryPoller) ID() string {
	return "NYI"
}

func (p *lrOSPutAsyncNoHeaderInRetryPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSPutAsyncNoHeaderInRetryPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSPutAsyncNoRetrySucceededPoller provides polling facilities until the operation completes
type LrOSPutAsyncNoRetrySucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSPutAsyncNoRetrySucceededPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSPutAsyncNoRetrySucceededPoller) Done() bool {
	return false
}

func (p *lrOSPutAsyncNoRetrySucceededPoller) ID() string {
	return "NYI"
}

func (p *lrOSPutAsyncNoRetrySucceededPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSPutAsyncNoRetrySucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSPutAsyncNoRetrycanceledPoller provides polling facilities until the operation completes
type LrOSPutAsyncNoRetrycanceledPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSPutAsyncNoRetrycanceledPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSPutAsyncNoRetrycanceledPoller) Done() bool {
	return false
}

func (p *lrOSPutAsyncNoRetrycanceledPoller) ID() string {
	return "NYI"
}

func (p *lrOSPutAsyncNoRetrycanceledPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSPutAsyncNoRetrycanceledPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSPutAsyncNonResourcePoller provides polling facilities until the operation completes
type LrOSPutAsyncNonResourcePoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*SkuResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*SkuResponse, error)
}

type lrOSPutAsyncNonResourcePoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSPutAsyncNonResourcePoller) Done() bool {
	return false
}

func (p *lrOSPutAsyncNonResourcePoller) ID() string {
	return "NYI"
}

func (p *lrOSPutAsyncNonResourcePoller) Poll(ctx context.Context) (*SkuResponse, error) {
	return nil, nil
}

func (p *lrOSPutAsyncNonResourcePoller) Wait(ctx context.Context, pollingInterval time.Duration) (*SkuResponse, error) {
	return nil, nil
}

// LrOSPutAsyncRetryFailedPoller provides polling facilities until the operation completes
type LrOSPutAsyncRetryFailedPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSPutAsyncRetryFailedPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSPutAsyncRetryFailedPoller) Done() bool {
	return false
}

func (p *lrOSPutAsyncRetryFailedPoller) ID() string {
	return "NYI"
}

func (p *lrOSPutAsyncRetryFailedPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSPutAsyncRetryFailedPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSPutAsyncRetrySucceededPoller provides polling facilities until the operation completes
type LrOSPutAsyncRetrySucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSPutAsyncRetrySucceededPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSPutAsyncRetrySucceededPoller) Done() bool {
	return false
}

func (p *lrOSPutAsyncRetrySucceededPoller) ID() string {
	return "NYI"
}

func (p *lrOSPutAsyncRetrySucceededPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSPutAsyncRetrySucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSPutAsyncSubResourcePoller provides polling facilities until the operation completes
type LrOSPutAsyncSubResourcePoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*SubProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*SubProductResponse, error)
}

type lrOSPutAsyncSubResourcePoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSPutAsyncSubResourcePoller) Done() bool {
	return false
}

func (p *lrOSPutAsyncSubResourcePoller) ID() string {
	return "NYI"
}

func (p *lrOSPutAsyncSubResourcePoller) Poll(ctx context.Context) (*SubProductResponse, error) {
	return nil, nil
}

func (p *lrOSPutAsyncSubResourcePoller) Wait(ctx context.Context, pollingInterval time.Duration) (*SubProductResponse, error) {
	return nil, nil
}

// LrOSPutNoHeaderInRetryPoller provides polling facilities until the operation completes
type LrOSPutNoHeaderInRetryPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrOSPutNoHeaderInRetryPoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSPutNoHeaderInRetryPoller) Done() bool {
	return false
}

func (p *lrOSPutNoHeaderInRetryPoller) ID() string {
	return "NYI"
}

func (p *lrOSPutNoHeaderInRetryPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrOSPutNoHeaderInRetryPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrOSPutNonResourcePoller provides polling facilities until the operation completes
type LrOSPutNonResourcePoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*SkuResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*SkuResponse, error)
}

type lrOSPutNonResourcePoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSPutNonResourcePoller) Done() bool {
	return false
}

func (p *lrOSPutNonResourcePoller) ID() string {
	return "NYI"
}

func (p *lrOSPutNonResourcePoller) Poll(ctx context.Context) (*SkuResponse, error) {
	return nil, nil
}

func (p *lrOSPutNonResourcePoller) Wait(ctx context.Context, pollingInterval time.Duration) (*SkuResponse, error) {
	return nil, nil
}

// LrOSPutSubResourcePoller provides polling facilities until the operation completes
type LrOSPutSubResourcePoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*SubProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*SubProductResponse, error)
}

type lrOSPutSubResourcePoller struct {
	// the client for making the request
	client *lrOSOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrOSPutSubResourcePoller) Done() bool {
	return false
}

func (p *lrOSPutSubResourcePoller) ID() string {
	return "NYI"
}

func (p *lrOSPutSubResourcePoller) Poll(ctx context.Context) (*SubProductResponse, error) {
	return nil, nil
}

func (p *lrOSPutSubResourcePoller) Wait(ctx context.Context, pollingInterval time.Duration) (*SubProductResponse, error) {
	return nil, nil
}

// LroRetrysDelete202Retry200Poller provides polling facilities until the operation completes
type LroRetrysDelete202Retry200Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LroRetrysDelete202Retry200Response, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LroRetrysDelete202Retry200Response, error)
}

type lroRetrysDelete202Retry200Poller struct {
	// the client for making the request
	client *lroRetrysOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lroRetrysDelete202Retry200Poller) Done() bool {
	return false
}

func (p *lroRetrysDelete202Retry200Poller) ID() string {
	return "NYI"
}

func (p *lroRetrysDelete202Retry200Poller) Poll(ctx context.Context) (*LroRetrysDelete202Retry200Response, error) {
	return nil, nil
}

func (p *lroRetrysDelete202Retry200Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*LroRetrysDelete202Retry200Response, error) {
	return nil, nil
}

// LroRetrysDeleteAsyncRelativeRetrySucceededPoller provides polling facilities until the operation completes
type LroRetrysDeleteAsyncRelativeRetrySucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LroRetrysDeleteAsyncRelativeRetrySucceededResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LroRetrysDeleteAsyncRelativeRetrySucceededResponse, error)
}

type lroRetrysDeleteAsyncRelativeRetrySucceededPoller struct {
	// the client for making the request
	client *lroRetrysOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lroRetrysDeleteAsyncRelativeRetrySucceededPoller) Done() bool {
	return false
}

func (p *lroRetrysDeleteAsyncRelativeRetrySucceededPoller) ID() string {
	return "NYI"
}

func (p *lroRetrysDeleteAsyncRelativeRetrySucceededPoller) Poll(ctx context.Context) (*LroRetrysDeleteAsyncRelativeRetrySucceededResponse, error) {
	return nil, nil
}

func (p *lroRetrysDeleteAsyncRelativeRetrySucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LroRetrysDeleteAsyncRelativeRetrySucceededResponse, error) {
	return nil, nil
}

// LroRetrysDeleteProvisioning202Accepted200SucceededPoller provides polling facilities until the operation completes
type LroRetrysDeleteProvisioning202Accepted200SucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lroRetrysDeleteProvisioning202Accepted200SucceededPoller struct {
	// the client for making the request
	client *lroRetrysOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lroRetrysDeleteProvisioning202Accepted200SucceededPoller) Done() bool {
	return false
}

func (p *lroRetrysDeleteProvisioning202Accepted200SucceededPoller) ID() string {
	return "NYI"
}

func (p *lroRetrysDeleteProvisioning202Accepted200SucceededPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lroRetrysDeleteProvisioning202Accepted200SucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LroRetrysPost202Retry200Poller provides polling facilities until the operation completes
type LroRetrysPost202Retry200Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LroRetrysPost202Retry200Response, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LroRetrysPost202Retry200Response, error)
}

type lroRetrysPost202Retry200Poller struct {
	// the client for making the request
	client *lroRetrysOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lroRetrysPost202Retry200Poller) Done() bool {
	return false
}

func (p *lroRetrysPost202Retry200Poller) ID() string {
	return "NYI"
}

func (p *lroRetrysPost202Retry200Poller) Poll(ctx context.Context) (*LroRetrysPost202Retry200Response, error) {
	return nil, nil
}

func (p *lroRetrysPost202Retry200Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*LroRetrysPost202Retry200Response, error) {
	return nil, nil
}

// LroRetrysPostAsyncRelativeRetrySucceededPoller provides polling facilities until the operation completes
type LroRetrysPostAsyncRelativeRetrySucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LroRetrysPostAsyncRelativeRetrySucceededResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LroRetrysPostAsyncRelativeRetrySucceededResponse, error)
}

type lroRetrysPostAsyncRelativeRetrySucceededPoller struct {
	// the client for making the request
	client *lroRetrysOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lroRetrysPostAsyncRelativeRetrySucceededPoller) Done() bool {
	return false
}

func (p *lroRetrysPostAsyncRelativeRetrySucceededPoller) ID() string {
	return "NYI"
}

func (p *lroRetrysPostAsyncRelativeRetrySucceededPoller) Poll(ctx context.Context) (*LroRetrysPostAsyncRelativeRetrySucceededResponse, error) {
	return nil, nil
}

func (p *lroRetrysPostAsyncRelativeRetrySucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LroRetrysPostAsyncRelativeRetrySucceededResponse, error) {
	return nil, nil
}

// LroRetrysPut201CreatingSucceeded200Poller provides polling facilities until the operation completes
type LroRetrysPut201CreatingSucceeded200Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lroRetrysPut201CreatingSucceeded200Poller struct {
	// the client for making the request
	client *lroRetrysOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lroRetrysPut201CreatingSucceeded200Poller) Done() bool {
	return false
}

func (p *lroRetrysPut201CreatingSucceeded200Poller) ID() string {
	return "NYI"
}

func (p *lroRetrysPut201CreatingSucceeded200Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lroRetrysPut201CreatingSucceeded200Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LroRetrysPutAsyncRelativeRetrySucceededPoller provides polling facilities until the operation completes
type LroRetrysPutAsyncRelativeRetrySucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lroRetrysPutAsyncRelativeRetrySucceededPoller struct {
	// the client for making the request
	client *lroRetrysOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lroRetrysPutAsyncRelativeRetrySucceededPoller) Done() bool {
	return false
}

func (p *lroRetrysPutAsyncRelativeRetrySucceededPoller) ID() string {
	return "NYI"
}

func (p *lroRetrysPutAsyncRelativeRetrySucceededPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lroRetrysPutAsyncRelativeRetrySucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrosaDsDelete202NonRetry400Poller provides polling facilities until the operation completes
type LrosaDsDelete202NonRetry400Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsDelete202NonRetry400Response, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsDelete202NonRetry400Response, error)
}

type lrosaDsDelete202NonRetry400Poller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrosaDsDelete202NonRetry400Poller) Done() bool {
	return false
}

func (p *lrosaDsDelete202NonRetry400Poller) ID() string {
	return "NYI"
}

func (p *lrosaDsDelete202NonRetry400Poller) Poll(ctx context.Context) (*LrosaDsDelete202NonRetry400Response, error) {
	return nil, nil
}

func (p *lrosaDsDelete202NonRetry400Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsDelete202NonRetry400Response, error) {
	return nil, nil
}

// LrosaDsDelete202RetryInvalidHeaderPoller provides polling facilities until the operation completes
type LrosaDsDelete202RetryInvalidHeaderPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsDelete202RetryInvalidHeaderResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsDelete202RetryInvalidHeaderResponse, error)
}

type lrosaDsDelete202RetryInvalidHeaderPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrosaDsDelete202RetryInvalidHeaderPoller) Done() bool {
	return false
}

func (p *lrosaDsDelete202RetryInvalidHeaderPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsDelete202RetryInvalidHeaderPoller) Poll(ctx context.Context) (*LrosaDsDelete202RetryInvalidHeaderResponse, error) {
	return nil, nil
}

func (p *lrosaDsDelete202RetryInvalidHeaderPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsDelete202RetryInvalidHeaderResponse, error) {
	return nil, nil
}

// LrosaDsDelete204SucceededPoller provides polling facilities until the operation completes
type LrosaDsDelete204SucceededPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*http.Response, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*http.Response, error)
}

type lrosaDsDelete204SucceededPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrosaDsDelete204SucceededPoller) Done() bool {
	return false
}

func (p *lrosaDsDelete204SucceededPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsDelete204SucceededPoller) Poll(ctx context.Context) (*http.Response, error) {
	return nil, nil
}

func (p *lrosaDsDelete204SucceededPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*http.Response, error) {
	return nil, nil
}

// LrosaDsDeleteAsyncRelativeRetry400Poller provides polling facilities until the operation completes
type LrosaDsDeleteAsyncRelativeRetry400Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsDeleteAsyncRelativeRetry400Response, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsDeleteAsyncRelativeRetry400Response, error)
}

type lrosaDsDeleteAsyncRelativeRetry400Poller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrosaDsDeleteAsyncRelativeRetry400Poller) Done() bool {
	return false
}

func (p *lrosaDsDeleteAsyncRelativeRetry400Poller) ID() string {
	return "NYI"
}

func (p *lrosaDsDeleteAsyncRelativeRetry400Poller) Poll(ctx context.Context) (*LrosaDsDeleteAsyncRelativeRetry400Response, error) {
	return nil, nil
}

func (p *lrosaDsDeleteAsyncRelativeRetry400Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsDeleteAsyncRelativeRetry400Response, error) {
	return nil, nil
}

// LrosaDsDeleteAsyncRelativeRetryInvalidHeaderPoller provides polling facilities until the operation completes
type LrosaDsDeleteAsyncRelativeRetryInvalidHeaderPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsDeleteAsyncRelativeRetryInvalidHeaderResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsDeleteAsyncRelativeRetryInvalidHeaderResponse, error)
}

type lrosaDsDeleteAsyncRelativeRetryInvalidHeaderPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrosaDsDeleteAsyncRelativeRetryInvalidHeaderPoller) Done() bool {
	return false
}

func (p *lrosaDsDeleteAsyncRelativeRetryInvalidHeaderPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsDeleteAsyncRelativeRetryInvalidHeaderPoller) Poll(ctx context.Context) (*LrosaDsDeleteAsyncRelativeRetryInvalidHeaderResponse, error) {
	return nil, nil
}

func (p *lrosaDsDeleteAsyncRelativeRetryInvalidHeaderPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsDeleteAsyncRelativeRetryInvalidHeaderResponse, error) {
	return nil, nil
}

// LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingPoller provides polling facilities until the operation completes
type LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsDeleteAsyncRelativeRetryInvalidJSONPollingResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsDeleteAsyncRelativeRetryInvalidJSONPollingResponse, error)
}

type lrosaDsDeleteAsyncRelativeRetryInvalidJSONPollingPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrosaDsDeleteAsyncRelativeRetryInvalidJSONPollingPoller) Done() bool {
	return false
}

func (p *lrosaDsDeleteAsyncRelativeRetryInvalidJSONPollingPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsDeleteAsyncRelativeRetryInvalidJSONPollingPoller) Poll(ctx context.Context) (*LrosaDsDeleteAsyncRelativeRetryInvalidJSONPollingResponse, error) {
	return nil, nil
}

func (p *lrosaDsDeleteAsyncRelativeRetryInvalidJSONPollingPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsDeleteAsyncRelativeRetryInvalidJSONPollingResponse, error) {
	return nil, nil
}

// LrosaDsDeleteAsyncRelativeRetryNoStatusPoller provides polling facilities until the operation completes
type LrosaDsDeleteAsyncRelativeRetryNoStatusPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsDeleteAsyncRelativeRetryNoStatusResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsDeleteAsyncRelativeRetryNoStatusResponse, error)
}

type lrosaDsDeleteAsyncRelativeRetryNoStatusPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrosaDsDeleteAsyncRelativeRetryNoStatusPoller) Done() bool {
	return false
}

func (p *lrosaDsDeleteAsyncRelativeRetryNoStatusPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsDeleteAsyncRelativeRetryNoStatusPoller) Poll(ctx context.Context) (*LrosaDsDeleteAsyncRelativeRetryNoStatusResponse, error) {
	return nil, nil
}

func (p *lrosaDsDeleteAsyncRelativeRetryNoStatusPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsDeleteAsyncRelativeRetryNoStatusResponse, error) {
	return nil, nil
}

// LrosaDsDeleteNonRetry400Poller provides polling facilities until the operation completes
type LrosaDsDeleteNonRetry400Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsDeleteNonRetry400Response, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsDeleteNonRetry400Response, error)
}

type lrosaDsDeleteNonRetry400Poller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerDelete
}

func (p *lrosaDsDeleteNonRetry400Poller) Done() bool {
	return false
}

func (p *lrosaDsDeleteNonRetry400Poller) ID() string {
	return "NYI"
}

func (p *lrosaDsDeleteNonRetry400Poller) Poll(ctx context.Context) (*LrosaDsDeleteNonRetry400Response, error) {
	return nil, nil
}

func (p *lrosaDsDeleteNonRetry400Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsDeleteNonRetry400Response, error) {
	return nil, nil
}

// LrosaDsPost202NoLocationPoller provides polling facilities until the operation completes
type LrosaDsPost202NoLocationPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsPost202NoLocationResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPost202NoLocationResponse, error)
}

type lrosaDsPost202NoLocationPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrosaDsPost202NoLocationPoller) Done() bool {
	return false
}

func (p *lrosaDsPost202NoLocationPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsPost202NoLocationPoller) Poll(ctx context.Context) (*LrosaDsPost202NoLocationResponse, error) {
	return nil, nil
}

func (p *lrosaDsPost202NoLocationPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPost202NoLocationResponse, error) {
	return nil, nil
}

// LrosaDsPost202NonRetry400Poller provides polling facilities until the operation completes
type LrosaDsPost202NonRetry400Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsPost202NonRetry400Response, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPost202NonRetry400Response, error)
}

type lrosaDsPost202NonRetry400Poller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrosaDsPost202NonRetry400Poller) Done() bool {
	return false
}

func (p *lrosaDsPost202NonRetry400Poller) ID() string {
	return "NYI"
}

func (p *lrosaDsPost202NonRetry400Poller) Poll(ctx context.Context) (*LrosaDsPost202NonRetry400Response, error) {
	return nil, nil
}

func (p *lrosaDsPost202NonRetry400Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPost202NonRetry400Response, error) {
	return nil, nil
}

// LrosaDsPost202RetryInvalidHeaderPoller provides polling facilities until the operation completes
type LrosaDsPost202RetryInvalidHeaderPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsPost202RetryInvalidHeaderResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPost202RetryInvalidHeaderResponse, error)
}

type lrosaDsPost202RetryInvalidHeaderPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrosaDsPost202RetryInvalidHeaderPoller) Done() bool {
	return false
}

func (p *lrosaDsPost202RetryInvalidHeaderPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsPost202RetryInvalidHeaderPoller) Poll(ctx context.Context) (*LrosaDsPost202RetryInvalidHeaderResponse, error) {
	return nil, nil
}

func (p *lrosaDsPost202RetryInvalidHeaderPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPost202RetryInvalidHeaderResponse, error) {
	return nil, nil
}

// LrosaDsPostAsyncRelativeRetry400Poller provides polling facilities until the operation completes
type LrosaDsPostAsyncRelativeRetry400Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsPostAsyncRelativeRetry400Response, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPostAsyncRelativeRetry400Response, error)
}

type lrosaDsPostAsyncRelativeRetry400Poller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrosaDsPostAsyncRelativeRetry400Poller) Done() bool {
	return false
}

func (p *lrosaDsPostAsyncRelativeRetry400Poller) ID() string {
	return "NYI"
}

func (p *lrosaDsPostAsyncRelativeRetry400Poller) Poll(ctx context.Context) (*LrosaDsPostAsyncRelativeRetry400Response, error) {
	return nil, nil
}

func (p *lrosaDsPostAsyncRelativeRetry400Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPostAsyncRelativeRetry400Response, error) {
	return nil, nil
}

// LrosaDsPostAsyncRelativeRetryInvalidHeaderPoller provides polling facilities until the operation completes
type LrosaDsPostAsyncRelativeRetryInvalidHeaderPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsPostAsyncRelativeRetryInvalidHeaderResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPostAsyncRelativeRetryInvalidHeaderResponse, error)
}

type lrosaDsPostAsyncRelativeRetryInvalidHeaderPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrosaDsPostAsyncRelativeRetryInvalidHeaderPoller) Done() bool {
	return false
}

func (p *lrosaDsPostAsyncRelativeRetryInvalidHeaderPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsPostAsyncRelativeRetryInvalidHeaderPoller) Poll(ctx context.Context) (*LrosaDsPostAsyncRelativeRetryInvalidHeaderResponse, error) {
	return nil, nil
}

func (p *lrosaDsPostAsyncRelativeRetryInvalidHeaderPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPostAsyncRelativeRetryInvalidHeaderResponse, error) {
	return nil, nil
}

// LrosaDsPostAsyncRelativeRetryInvalidJsonPollingPoller provides polling facilities until the operation completes
type LrosaDsPostAsyncRelativeRetryInvalidJsonPollingPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsPostAsyncRelativeRetryInvalidJSONPollingResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPostAsyncRelativeRetryInvalidJSONPollingResponse, error)
}

type lrosaDsPostAsyncRelativeRetryInvalidJSONPollingPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrosaDsPostAsyncRelativeRetryInvalidJSONPollingPoller) Done() bool {
	return false
}

func (p *lrosaDsPostAsyncRelativeRetryInvalidJSONPollingPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsPostAsyncRelativeRetryInvalidJSONPollingPoller) Poll(ctx context.Context) (*LrosaDsPostAsyncRelativeRetryInvalidJSONPollingResponse, error) {
	return nil, nil
}

func (p *lrosaDsPostAsyncRelativeRetryInvalidJSONPollingPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPostAsyncRelativeRetryInvalidJSONPollingResponse, error) {
	return nil, nil
}

// LrosaDsPostAsyncRelativeRetryNoPayloadPoller provides polling facilities until the operation completes
type LrosaDsPostAsyncRelativeRetryNoPayloadPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsPostAsyncRelativeRetryNoPayloadResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPostAsyncRelativeRetryNoPayloadResponse, error)
}

type lrosaDsPostAsyncRelativeRetryNoPayloadPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrosaDsPostAsyncRelativeRetryNoPayloadPoller) Done() bool {
	return false
}

func (p *lrosaDsPostAsyncRelativeRetryNoPayloadPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsPostAsyncRelativeRetryNoPayloadPoller) Poll(ctx context.Context) (*LrosaDsPostAsyncRelativeRetryNoPayloadResponse, error) {
	return nil, nil
}

func (p *lrosaDsPostAsyncRelativeRetryNoPayloadPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPostAsyncRelativeRetryNoPayloadResponse, error) {
	return nil, nil
}

// LrosaDsPostNonRetry400Poller provides polling facilities until the operation completes
type LrosaDsPostNonRetry400Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*LrosaDsPostNonRetry400Response, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPostNonRetry400Response, error)
}

type lrosaDsPostNonRetry400Poller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPost
}

func (p *lrosaDsPostNonRetry400Poller) Done() bool {
	return false
}

func (p *lrosaDsPostNonRetry400Poller) ID() string {
	return "NYI"
}

func (p *lrosaDsPostNonRetry400Poller) Poll(ctx context.Context) (*LrosaDsPostNonRetry400Response, error) {
	return nil, nil
}

func (p *lrosaDsPostNonRetry400Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*LrosaDsPostNonRetry400Response, error) {
	return nil, nil
}

// LrosaDsPut200InvalidJsonPoller provides polling facilities until the operation completes
type LrosaDsPut200InvalidJsonPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrosaDsPut200InvalidJSONPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrosaDsPut200InvalidJSONPoller) Done() bool {
	return false
}

func (p *lrosaDsPut200InvalidJSONPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsPut200InvalidJSONPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrosaDsPut200InvalidJSONPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrosaDsPutAsyncRelativeRetry400Poller provides polling facilities until the operation completes
type LrosaDsPutAsyncRelativeRetry400Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrosaDsPutAsyncRelativeRetry400Poller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrosaDsPutAsyncRelativeRetry400Poller) Done() bool {
	return false
}

func (p *lrosaDsPutAsyncRelativeRetry400Poller) ID() string {
	return "NYI"
}

func (p *lrosaDsPutAsyncRelativeRetry400Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrosaDsPutAsyncRelativeRetry400Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrosaDsPutAsyncRelativeRetryInvalidHeaderPoller provides polling facilities until the operation completes
type LrosaDsPutAsyncRelativeRetryInvalidHeaderPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrosaDsPutAsyncRelativeRetryInvalidHeaderPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrosaDsPutAsyncRelativeRetryInvalidHeaderPoller) Done() bool {
	return false
}

func (p *lrosaDsPutAsyncRelativeRetryInvalidHeaderPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsPutAsyncRelativeRetryInvalidHeaderPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrosaDsPutAsyncRelativeRetryInvalidHeaderPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrosaDsPutAsyncRelativeRetryInvalidJsonPollingPoller provides polling facilities until the operation completes
type LrosaDsPutAsyncRelativeRetryInvalidJsonPollingPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrosaDsPutAsyncRelativeRetryInvalidJSONPollingPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrosaDsPutAsyncRelativeRetryInvalidJSONPollingPoller) Done() bool {
	return false
}

func (p *lrosaDsPutAsyncRelativeRetryInvalidJSONPollingPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsPutAsyncRelativeRetryInvalidJSONPollingPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrosaDsPutAsyncRelativeRetryInvalidJSONPollingPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrosaDsPutAsyncRelativeRetryNoStatusPayloadPoller provides polling facilities until the operation completes
type LrosaDsPutAsyncRelativeRetryNoStatusPayloadPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrosaDsPutAsyncRelativeRetryNoStatusPayloadPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrosaDsPutAsyncRelativeRetryNoStatusPayloadPoller) Done() bool {
	return false
}

func (p *lrosaDsPutAsyncRelativeRetryNoStatusPayloadPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsPutAsyncRelativeRetryNoStatusPayloadPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrosaDsPutAsyncRelativeRetryNoStatusPayloadPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrosaDsPutAsyncRelativeRetryNoStatusPoller provides polling facilities until the operation completes
type LrosaDsPutAsyncRelativeRetryNoStatusPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrosaDsPutAsyncRelativeRetryNoStatusPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrosaDsPutAsyncRelativeRetryNoStatusPoller) Done() bool {
	return false
}

func (p *lrosaDsPutAsyncRelativeRetryNoStatusPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsPutAsyncRelativeRetryNoStatusPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrosaDsPutAsyncRelativeRetryNoStatusPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrosaDsPutError201NoProvisioningStatePayloadPoller provides polling facilities until the operation completes
type LrosaDsPutError201NoProvisioningStatePayloadPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrosaDsPutError201NoProvisioningStatePayloadPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrosaDsPutError201NoProvisioningStatePayloadPoller) Done() bool {
	return false
}

func (p *lrosaDsPutError201NoProvisioningStatePayloadPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsPutError201NoProvisioningStatePayloadPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrosaDsPutError201NoProvisioningStatePayloadPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrosaDsPutNonRetry201Creating400InvalidJsonPoller provides polling facilities until the operation completes
type LrosaDsPutNonRetry201Creating400InvalidJsonPoller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrosaDsPutNonRetry201Creating400InvalidJSONPoller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrosaDsPutNonRetry201Creating400InvalidJSONPoller) Done() bool {
	return false
}

func (p *lrosaDsPutNonRetry201Creating400InvalidJSONPoller) ID() string {
	return "NYI"
}

func (p *lrosaDsPutNonRetry201Creating400InvalidJSONPoller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrosaDsPutNonRetry201Creating400InvalidJSONPoller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrosaDsPutNonRetry201Creating400Poller provides polling facilities until the operation completes
type LrosaDsPutNonRetry201Creating400Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrosaDsPutNonRetry201Creating400Poller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrosaDsPutNonRetry201Creating400Poller) Done() bool {
	return false
}

func (p *lrosaDsPutNonRetry201Creating400Poller) ID() string {
	return "NYI"
}

func (p *lrosaDsPutNonRetry201Creating400Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrosaDsPutNonRetry201Creating400Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}

// LrosaDsPutNonRetry400Poller provides polling facilities until the operation completes
type LrosaDsPutNonRetry400Poller interface {
	Done() bool
	ID() string
	Poll(context.Context) (*ProductResponse, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error)
}

type lrosaDsPutNonRetry400Poller struct {
	// the client for making the request
	client *lrosaDsOperations
	// polling tracker
	// pt *pollingTrackerPut
}

func (p *lrosaDsPutNonRetry400Poller) Done() bool {
	return false
}

func (p *lrosaDsPutNonRetry400Poller) ID() string {
	return "NYI"
}

func (p *lrosaDsPutNonRetry400Poller) Poll(ctx context.Context) (*ProductResponse, error) {
	return nil, nil
}

func (p *lrosaDsPutNonRetry400Poller) Wait(ctx context.Context, pollingInterval time.Duration) (*ProductResponse, error) {
	return nil, nil
}
