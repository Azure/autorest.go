// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package lrogroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"strconv"
)

// LroRetrysOperations contains the methods for the LroRetrys group.
type LroRetrysOperations interface {
	// BeginDelete202Retry200 - Long running delete request, service returns a 500, then a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
	BeginDelete202Retry200(ctx context.Context) (LroRetrysDelete202Retry200Poller, error)
	// ResumeLroRetrysDelete202Retry200Poller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLroRetrysDelete202Retry200Poller(id string) (LroRetrysDelete202Retry200Poller, error)
	// BeginDeleteAsyncRelativeRetrySucceeded - Long running delete request, service returns a 500, then a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
	BeginDeleteAsyncRelativeRetrySucceeded(ctx context.Context) (LroRetrysDeleteAsyncRelativeRetrySucceededPoller, error)
	// ResumeLroRetrysDeleteAsyncRelativeRetrySucceededPoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLroRetrysDeleteAsyncRelativeRetrySucceededPoller(id string) (LroRetrysDeleteAsyncRelativeRetrySucceededPoller, error)
	// BeginDeleteProvisioning202Accepted200Succeeded - Long running delete request, service returns a 500, then a  202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
	BeginDeleteProvisioning202Accepted200Succeeded(ctx context.Context) (LroRetrysDeleteProvisioning202Accepted200SucceededPoller, error)
	// ResumeLroRetrysDeleteProvisioning202Accepted200SucceededPoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLroRetrysDeleteProvisioning202Accepted200SucceededPoller(id string) (LroRetrysDeleteProvisioning202Accepted200SucceededPoller, error)
	// BeginPost202Retry200 - Long running post request, service returns a 500, then a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success
	BeginPost202Retry200(ctx context.Context, lroRetrysPost202Retry200Options *LroRetrysPost202Retry200Options) (LroRetrysPost202Retry200Poller, error)
	// ResumeLroRetrysPost202Retry200Poller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLroRetrysPost202Retry200Poller(id string) (LroRetrysPost202Retry200Poller, error)
	// BeginPostAsyncRelativeRetrySucceeded - Long running post request, service returns a 500, then a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
	BeginPostAsyncRelativeRetrySucceeded(ctx context.Context, lroRetrysPostAsyncRelativeRetrySucceededOptions *LroRetrysPostAsyncRelativeRetrySucceededOptions) (LroRetrysPostAsyncRelativeRetrySucceededPoller, error)
	// ResumeLroRetrysPostAsyncRelativeRetrySucceededPoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLroRetrysPostAsyncRelativeRetrySucceededPoller(id string) (LroRetrysPostAsyncRelativeRetrySucceededPoller, error)
	// BeginPut201CreatingSucceeded200 - Long running put request, service returns a 500, then a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
	BeginPut201CreatingSucceeded200(ctx context.Context, lroRetrysPut201CreatingSucceeded200Options *LroRetrysPut201CreatingSucceeded200Options) (LroRetrysPut201CreatingSucceeded200Poller, error)
	// ResumeLroRetrysPut201CreatingSucceeded200Poller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLroRetrysPut201CreatingSucceeded200Poller(id string) (LroRetrysPut201CreatingSucceeded200Poller, error)
	// BeginPutAsyncRelativeRetrySucceeded - Long running put request, service returns a 500, then a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
	BeginPutAsyncRelativeRetrySucceeded(ctx context.Context, lroRetrysPutAsyncRelativeRetrySucceededOptions *LroRetrysPutAsyncRelativeRetrySucceededOptions) (LroRetrysPutAsyncRelativeRetrySucceededPoller, error)
	// ResumeLroRetrysPutAsyncRelativeRetrySucceededPoller - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeLroRetrysPutAsyncRelativeRetrySucceededPoller(id string) (LroRetrysPutAsyncRelativeRetrySucceededPoller, error)
}

// lroRetrysOperations implements the LroRetrysOperations interface.
type lroRetrysOperations struct {
	*Client
}

// Delete202Retry200 - Long running delete request, service returns a 500, then a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
func (client *lroRetrysOperations) BeginDelete202Retry200(ctx context.Context) (LroRetrysDelete202Retry200Poller, error) {
	req, err := client.delete202Retry200CreateRequest()
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp, client.delete202Retry200HandleError)
	if err != nil {
		return nil, err
	}
	return &lroRetrysDelete202Retry200Poller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lroRetrysOperations) ResumeLroRetrysDelete202Retry200Poller(token string) (LroRetrysDelete202Retry200Poller, error) {
	pt, err := resumePollingTracker(token, client.delete202Retry200HandleError)
	if err != nil {
		return nil, err
	}
	return &lroRetrysDelete202Retry200Poller{
		client: client,
		pt:     pt,
	}, nil
}

// delete202Retry200CreateRequest creates the Delete202Retry200 request.
func (client *lroRetrysOperations) delete202Retry200CreateRequest() (*azcore.Request, error) {
	urlPath := "/lro/retryerror/delete/202/retry/200"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// delete202Retry200HandleResponse handles the Delete202Retry200 response.
func (client *lroRetrysOperations) delete202Retry200HandleResponse(resp *azcore.Response) (*LroRetrysDelete202Retry200Response, error) {
	result := LroRetrysDelete202Retry200Response{RawResponse: resp.Response}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return nil, err
		}
		result.RetryAfter = &retryAfter
	}
	return &result, nil
}

// delete202Retry200HandleError handles the Delete202Retry200 error response.
func (client *lroRetrysOperations) delete202Retry200HandleError(resp *azcore.Response) error {
	err := CloudError{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DeleteAsyncRelativeRetrySucceeded - Long running delete request, service returns a 500, then a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
func (client *lroRetrysOperations) BeginDeleteAsyncRelativeRetrySucceeded(ctx context.Context) (LroRetrysDeleteAsyncRelativeRetrySucceededPoller, error) {
	req, err := client.deleteAsyncRelativeRetrySucceededCreateRequest()
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp, client.deleteAsyncRelativeRetrySucceededHandleError)
	if err != nil {
		return nil, err
	}
	return &lroRetrysDeleteAsyncRelativeRetrySucceededPoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lroRetrysOperations) ResumeLroRetrysDeleteAsyncRelativeRetrySucceededPoller(token string) (LroRetrysDeleteAsyncRelativeRetrySucceededPoller, error) {
	pt, err := resumePollingTracker(token, client.deleteAsyncRelativeRetrySucceededHandleError)
	if err != nil {
		return nil, err
	}
	return &lroRetrysDeleteAsyncRelativeRetrySucceededPoller{
		client: client,
		pt:     pt,
	}, nil
}

// deleteAsyncRelativeRetrySucceededCreateRequest creates the DeleteAsyncRelativeRetrySucceeded request.
func (client *lroRetrysOperations) deleteAsyncRelativeRetrySucceededCreateRequest() (*azcore.Request, error) {
	urlPath := "/lro/retryerror/deleteasync/retry/succeeded"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteAsyncRelativeRetrySucceededHandleResponse handles the DeleteAsyncRelativeRetrySucceeded response.
func (client *lroRetrysOperations) deleteAsyncRelativeRetrySucceededHandleResponse(resp *azcore.Response) (*LroRetrysDeleteAsyncRelativeRetrySucceededResponse, error) {
	result := LroRetrysDeleteAsyncRelativeRetrySucceededResponse{RawResponse: resp.Response}
	if val := resp.Header.Get("Azure-AsyncOperation"); val != "" {
		result.AzureAsyncOperation = &val
	}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return nil, err
		}
		result.RetryAfter = &retryAfter
	}
	return &result, nil
}

// deleteAsyncRelativeRetrySucceededHandleError handles the DeleteAsyncRelativeRetrySucceeded error response.
func (client *lroRetrysOperations) deleteAsyncRelativeRetrySucceededHandleError(resp *azcore.Response) error {
	err := CloudError{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DeleteProvisioning202Accepted200Succeeded - Long running delete request, service returns a 500, then a  202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
func (client *lroRetrysOperations) BeginDeleteProvisioning202Accepted200Succeeded(ctx context.Context) (LroRetrysDeleteProvisioning202Accepted200SucceededPoller, error) {
	req, err := client.deleteProvisioning202Accepted200SucceededCreateRequest()
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp, client.deleteProvisioning202Accepted200SucceededHandleError)
	if err != nil {
		return nil, err
	}
	return &lroRetrysDeleteProvisioning202Accepted200SucceededPoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lroRetrysOperations) ResumeLroRetrysDeleteProvisioning202Accepted200SucceededPoller(token string) (LroRetrysDeleteProvisioning202Accepted200SucceededPoller, error) {
	pt, err := resumePollingTracker(token, client.deleteProvisioning202Accepted200SucceededHandleError)
	if err != nil {
		return nil, err
	}
	return &lroRetrysDeleteProvisioning202Accepted200SucceededPoller{
		client: client,
		pt:     pt,
	}, nil
}

// deleteProvisioning202Accepted200SucceededCreateRequest creates the DeleteProvisioning202Accepted200Succeeded request.
func (client *lroRetrysOperations) deleteProvisioning202Accepted200SucceededCreateRequest() (*azcore.Request, error) {
	urlPath := "/lro/retryerror/delete/provisioning/202/accepted/200/succeeded"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteProvisioning202Accepted200SucceededHandleResponse handles the DeleteProvisioning202Accepted200Succeeded response.
func (client *lroRetrysOperations) deleteProvisioning202Accepted200SucceededHandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// deleteProvisioning202Accepted200SucceededHandleError handles the DeleteProvisioning202Accepted200Succeeded error response.
func (client *lroRetrysOperations) deleteProvisioning202Accepted200SucceededHandleError(resp *azcore.Response) error {
	err := CloudError{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Post202Retry200 - Long running post request, service returns a 500, then a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success
func (client *lroRetrysOperations) BeginPost202Retry200(ctx context.Context, lroRetrysPost202Retry200Options *LroRetrysPost202Retry200Options) (LroRetrysPost202Retry200Poller, error) {
	req, err := client.post202Retry200CreateRequest(lroRetrysPost202Retry200Options)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp, client.post202Retry200HandleError)
	if err != nil {
		return nil, err
	}
	return &lroRetrysPost202Retry200Poller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lroRetrysOperations) ResumeLroRetrysPost202Retry200Poller(token string) (LroRetrysPost202Retry200Poller, error) {
	pt, err := resumePollingTracker(token, client.post202Retry200HandleError)
	if err != nil {
		return nil, err
	}
	return &lroRetrysPost202Retry200Poller{
		client: client,
		pt:     pt,
	}, nil
}

// post202Retry200CreateRequest creates the Post202Retry200 request.
func (client *lroRetrysOperations) post202Retry200CreateRequest(lroRetrysPost202Retry200Options *LroRetrysPost202Retry200Options) (*azcore.Request, error) {
	urlPath := "/lro/retryerror/post/202/retry/200"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	if lroRetrysPost202Retry200Options != nil {
		return req, req.MarshalAsJSON(lroRetrysPost202Retry200Options.Product)
	}
	return req, nil
}

// post202Retry200HandleResponse handles the Post202Retry200 response.
func (client *lroRetrysOperations) post202Retry200HandleResponse(resp *azcore.Response) (*LroRetrysPost202Retry200Response, error) {
	result := LroRetrysPost202Retry200Response{RawResponse: resp.Response}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return nil, err
		}
		result.RetryAfter = &retryAfter
	}
	return &result, nil
}

// post202Retry200HandleError handles the Post202Retry200 error response.
func (client *lroRetrysOperations) post202Retry200HandleError(resp *azcore.Response) error {
	err := CloudError{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostAsyncRelativeRetrySucceeded - Long running post request, service returns a 500, then a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
func (client *lroRetrysOperations) BeginPostAsyncRelativeRetrySucceeded(ctx context.Context, lroRetrysPostAsyncRelativeRetrySucceededOptions *LroRetrysPostAsyncRelativeRetrySucceededOptions) (LroRetrysPostAsyncRelativeRetrySucceededPoller, error) {
	req, err := client.postAsyncRelativeRetrySucceededCreateRequest(lroRetrysPostAsyncRelativeRetrySucceededOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp, client.postAsyncRelativeRetrySucceededHandleError)
	if err != nil {
		return nil, err
	}
	return &lroRetrysPostAsyncRelativeRetrySucceededPoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lroRetrysOperations) ResumeLroRetrysPostAsyncRelativeRetrySucceededPoller(token string) (LroRetrysPostAsyncRelativeRetrySucceededPoller, error) {
	pt, err := resumePollingTracker(token, client.postAsyncRelativeRetrySucceededHandleError)
	if err != nil {
		return nil, err
	}
	return &lroRetrysPostAsyncRelativeRetrySucceededPoller{
		client: client,
		pt:     pt,
	}, nil
}

// postAsyncRelativeRetrySucceededCreateRequest creates the PostAsyncRelativeRetrySucceeded request.
func (client *lroRetrysOperations) postAsyncRelativeRetrySucceededCreateRequest(lroRetrysPostAsyncRelativeRetrySucceededOptions *LroRetrysPostAsyncRelativeRetrySucceededOptions) (*azcore.Request, error) {
	urlPath := "/lro/retryerror/postasync/retry/succeeded"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	if lroRetrysPostAsyncRelativeRetrySucceededOptions != nil {
		return req, req.MarshalAsJSON(lroRetrysPostAsyncRelativeRetrySucceededOptions.Product)
	}
	return req, nil
}

// postAsyncRelativeRetrySucceededHandleResponse handles the PostAsyncRelativeRetrySucceeded response.
func (client *lroRetrysOperations) postAsyncRelativeRetrySucceededHandleResponse(resp *azcore.Response) (*LroRetrysPostAsyncRelativeRetrySucceededResponse, error) {
	result := LroRetrysPostAsyncRelativeRetrySucceededResponse{RawResponse: resp.Response}
	if val := resp.Header.Get("Azure-AsyncOperation"); val != "" {
		result.AzureAsyncOperation = &val
	}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return nil, err
		}
		result.RetryAfter = &retryAfter
	}
	return &result, nil
}

// postAsyncRelativeRetrySucceededHandleError handles the PostAsyncRelativeRetrySucceeded error response.
func (client *lroRetrysOperations) postAsyncRelativeRetrySucceededHandleError(resp *azcore.Response) error {
	err := CloudError{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Put201CreatingSucceeded200 - Long running put request, service returns a 500, then a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
func (client *lroRetrysOperations) BeginPut201CreatingSucceeded200(ctx context.Context, lroRetrysPut201CreatingSucceeded200Options *LroRetrysPut201CreatingSucceeded200Options) (LroRetrysPut201CreatingSucceeded200Poller, error) {
	req, err := client.put201CreatingSucceeded200CreateRequest(lroRetrysPut201CreatingSucceeded200Options)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp, client.put201CreatingSucceeded200HandleError)
	if err != nil {
		return nil, err
	}
	return &lroRetrysPut201CreatingSucceeded200Poller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lroRetrysOperations) ResumeLroRetrysPut201CreatingSucceeded200Poller(token string) (LroRetrysPut201CreatingSucceeded200Poller, error) {
	pt, err := resumePollingTracker(token, client.put201CreatingSucceeded200HandleError)
	if err != nil {
		return nil, err
	}
	return &lroRetrysPut201CreatingSucceeded200Poller{
		client: client,
		pt:     pt,
	}, nil
}

// put201CreatingSucceeded200CreateRequest creates the Put201CreatingSucceeded200 request.
func (client *lroRetrysOperations) put201CreatingSucceeded200CreateRequest(lroRetrysPut201CreatingSucceeded200Options *LroRetrysPut201CreatingSucceeded200Options) (*azcore.Request, error) {
	urlPath := "/lro/retryerror/put/201/creating/succeeded/200"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	if lroRetrysPut201CreatingSucceeded200Options != nil {
		return req, req.MarshalAsJSON(lroRetrysPut201CreatingSucceeded200Options.Product)
	}
	return req, nil
}

// put201CreatingSucceeded200HandleResponse handles the Put201CreatingSucceeded200 response.
func (client *lroRetrysOperations) put201CreatingSucceeded200HandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// put201CreatingSucceeded200HandleError handles the Put201CreatingSucceeded200 error response.
func (client *lroRetrysOperations) put201CreatingSucceeded200HandleError(resp *azcore.Response) error {
	err := CloudError{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutAsyncRelativeRetrySucceeded - Long running put request, service returns a 500, then a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
func (client *lroRetrysOperations) BeginPutAsyncRelativeRetrySucceeded(ctx context.Context, lroRetrysPutAsyncRelativeRetrySucceededOptions *LroRetrysPutAsyncRelativeRetrySucceededOptions) (LroRetrysPutAsyncRelativeRetrySucceededPoller, error) {
	req, err := client.putAsyncRelativeRetrySucceededCreateRequest(lroRetrysPutAsyncRelativeRetrySucceededOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker(resp, client.putAsyncRelativeRetrySucceededHandleError)
	if err != nil {
		return nil, err
	}
	return &lroRetrysPutAsyncRelativeRetrySucceededPoller{
		pt:     pt,
		client: client,
	}, nil
}

func (client *lroRetrysOperations) ResumeLroRetrysPutAsyncRelativeRetrySucceededPoller(token string) (LroRetrysPutAsyncRelativeRetrySucceededPoller, error) {
	pt, err := resumePollingTracker(token, client.putAsyncRelativeRetrySucceededHandleError)
	if err != nil {
		return nil, err
	}
	return &lroRetrysPutAsyncRelativeRetrySucceededPoller{
		client: client,
		pt:     pt,
	}, nil
}

// putAsyncRelativeRetrySucceededCreateRequest creates the PutAsyncRelativeRetrySucceeded request.
func (client *lroRetrysOperations) putAsyncRelativeRetrySucceededCreateRequest(lroRetrysPutAsyncRelativeRetrySucceededOptions *LroRetrysPutAsyncRelativeRetrySucceededOptions) (*azcore.Request, error) {
	urlPath := "/lro/retryerror/putasync/retry/succeeded"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	if lroRetrysPutAsyncRelativeRetrySucceededOptions != nil {
		return req, req.MarshalAsJSON(lroRetrysPutAsyncRelativeRetrySucceededOptions.Product)
	}
	return req, nil
}

// putAsyncRelativeRetrySucceededHandleResponse handles the PutAsyncRelativeRetrySucceeded response.
func (client *lroRetrysOperations) putAsyncRelativeRetrySucceededHandleResponse(resp *azcore.Response) (*ProductResponse, error) {
	result := ProductResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Product)
}

// putAsyncRelativeRetrySucceededHandleError handles the PutAsyncRelativeRetrySucceeded error response.
func (client *lroRetrysOperations) putAsyncRelativeRetrySucceededHandleError(resp *azcore.Response) error {
	err := CloudError{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
