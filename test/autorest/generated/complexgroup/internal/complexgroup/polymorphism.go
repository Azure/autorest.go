// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package complexgroup

import (
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"path"
)

type PolymorphismOperations struct{}

// GetComplicatedCreateRequest creates the GetComplicated request.
func (PolymorphismOperations) GetComplicatedCreateRequest(u url.URL) (*azcore.Request, error) {
	u.Path = path.Join(u.Path, "/complex/polymorphism/complicated")
	return azcore.NewRequest(http.MethodGet, u), nil
}

// GetComplicatedHandleResponse handles the GetComplicated response.
func (PolymorphismOperations) GetComplicatedHandleResponse(resp *azcore.Response) (*PolymorphismGetComplicatedResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := PolymorphismGetComplicatedResponse{StatusCode: resp.StatusCode}
	return &result, resp.UnmarshalAsJSON(&result.Salmon)
}

// GetComposedWithDiscriminatorCreateRequest creates the GetComposedWithDiscriminator request.
func (PolymorphismOperations) GetComposedWithDiscriminatorCreateRequest(u url.URL) (*azcore.Request, error) {
	u.Path = path.Join(u.Path, "/complex/polymorphism/composedWithDiscriminator")
	return azcore.NewRequest(http.MethodGet, u), nil
}

// GetComposedWithDiscriminatorHandleResponse handles the GetComposedWithDiscriminator response.
func (PolymorphismOperations) GetComposedWithDiscriminatorHandleResponse(resp *azcore.Response) (*PolymorphismGetComposedWithDiscriminatorResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := PolymorphismGetComposedWithDiscriminatorResponse{StatusCode: resp.StatusCode}
	return &result, resp.UnmarshalAsJSON(&result.DotFishMarket)
}

// GetComposedWithoutDiscriminatorCreateRequest creates the GetComposedWithoutDiscriminator request.
func (PolymorphismOperations) GetComposedWithoutDiscriminatorCreateRequest(u url.URL) (*azcore.Request, error) {
	u.Path = path.Join(u.Path, "/complex/polymorphism/composedWithoutDiscriminator")
	return azcore.NewRequest(http.MethodGet, u), nil
}

// GetComposedWithoutDiscriminatorHandleResponse handles the GetComposedWithoutDiscriminator response.
func (PolymorphismOperations) GetComposedWithoutDiscriminatorHandleResponse(resp *azcore.Response) (*PolymorphismGetComposedWithoutDiscriminatorResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := PolymorphismGetComposedWithoutDiscriminatorResponse{StatusCode: resp.StatusCode}
	return &result, resp.UnmarshalAsJSON(&result.DotFishMarket)
}

// GetDotSyntaxCreateRequest creates the GetDotSyntax request.
func (PolymorphismOperations) GetDotSyntaxCreateRequest(u url.URL) (*azcore.Request, error) {
	u.Path = path.Join(u.Path, "/complex/polymorphism/dotsyntax")
	return azcore.NewRequest(http.MethodGet, u), nil
}

// GetDotSyntaxHandleResponse handles the GetDotSyntax response.
func (PolymorphismOperations) GetDotSyntaxHandleResponse(resp *azcore.Response) (*PolymorphismGetDotSyntaxResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := PolymorphismGetDotSyntaxResponse{StatusCode: resp.StatusCode}
	return &result, resp.UnmarshalAsJSON(&result.DotFish)
}

// GetValidCreateRequest creates the GetValid request.
func (PolymorphismOperations) GetValidCreateRequest(u url.URL) (*azcore.Request, error) {
	u.Path = path.Join(u.Path, "/complex/polymorphism/valid")
	return azcore.NewRequest(http.MethodGet, u), nil
}

// GetValidHandleResponse handles the GetValid response.
func (PolymorphismOperations) GetValidHandleResponse(resp *azcore.Response) (*PolymorphismGetValidResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := PolymorphismGetValidResponse{StatusCode: resp.StatusCode}
	return &result, resp.UnmarshalAsJSON(&result.Fish)
}

// PutComplicatedCreateRequest creates the PutComplicated request.
func (PolymorphismOperations) PutComplicatedCreateRequest(u url.URL, complexBody Salmon) (*azcore.Request, error) {
	u.Path = path.Join(u.Path, "/complex/polymorphism/complicated")
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsJSON(complexBody)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutComplicatedHandleResponse handles the PutComplicated response.
func (PolymorphismOperations) PutComplicatedHandleResponse(resp *azcore.Response) (*PolymorphismPutComplicatedResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &PolymorphismPutComplicatedResponse{StatusCode: resp.StatusCode}, nil
}

// PutMissingDiscriminatorCreateRequest creates the PutMissingDiscriminator request.
func (PolymorphismOperations) PutMissingDiscriminatorCreateRequest(u url.URL, complexBody Salmon) (*azcore.Request, error) {
	u.Path = path.Join(u.Path, "/complex/polymorphism/missingdiscriminator")
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsJSON(complexBody)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutMissingDiscriminatorHandleResponse handles the PutMissingDiscriminator response.
func (PolymorphismOperations) PutMissingDiscriminatorHandleResponse(resp *azcore.Response) (*PolymorphismPutMissingDiscriminatorResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := PolymorphismPutMissingDiscriminatorResponse{StatusCode: resp.StatusCode}
	return &result, resp.UnmarshalAsJSON(&result.Salmon)
}

// PutValidCreateRequest creates the PutValid request.
func (PolymorphismOperations) PutValidCreateRequest(u url.URL, complexBody Fish) (*azcore.Request, error) {
	u.Path = path.Join(u.Path, "/complex/polymorphism/valid")
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsJSON(complexBody)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutValidHandleResponse handles the PutValid response.
func (PolymorphismOperations) PutValidHandleResponse(resp *azcore.Response) (*PolymorphismPutValidResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &PolymorphismPutValidResponse{StatusCode: resp.StatusCode}, nil
}

// PutValidMissingRequiredCreateRequest creates the PutValidMissingRequired request.
func (PolymorphismOperations) PutValidMissingRequiredCreateRequest(u url.URL, complexBody Fish) (*azcore.Request, error) {
	u.Path = path.Join(u.Path, "/complex/polymorphism/missingrequired/invalid")
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsJSON(complexBody)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutValidMissingRequiredHandleResponse handles the PutValidMissingRequired response.
func (PolymorphismOperations) PutValidMissingRequiredHandleResponse(resp *azcore.Response) (*PolymorphismPutValidMissingRequiredResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &PolymorphismPutValidMissingRequiredResponse{StatusCode: resp.StatusCode}, nil
}

