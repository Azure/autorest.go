// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package complexgroup

import (
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"path"
)

type DictionaryOperations struct{}

// GetEmptyCreateRequest creates the GetEmpty request.
func (DictionaryOperations) GetEmptyCreateRequest(u url.URL) (*azcore.Request, error) {
	u.Path = path.Join(u.Path, "/complex/dictionary/typed/empty")
	return azcore.NewRequest(http.MethodGet, u), nil
}

// GetEmptyHandleResponse handles the GetEmpty response.
func (DictionaryOperations) GetEmptyHandleResponse(resp *azcore.Response) (*DictionaryGetEmptyResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := DictionaryGetEmptyResponse{StatusCode: resp.StatusCode}
	return &result, resp.UnmarshalAsJSON(&result.DictionaryWrapper)
}

// GetNotProvidedCreateRequest creates the GetNotProvided request.
func (DictionaryOperations) GetNotProvidedCreateRequest(u url.URL) (*azcore.Request, error) {
	u.Path = path.Join(u.Path, "/complex/dictionary/typed/notprovided")
	return azcore.NewRequest(http.MethodGet, u), nil
}

// GetNotProvidedHandleResponse handles the GetNotProvided response.
func (DictionaryOperations) GetNotProvidedHandleResponse(resp *azcore.Response) (*DictionaryGetNotProvidedResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := DictionaryGetNotProvidedResponse{StatusCode: resp.StatusCode}
	return &result, resp.UnmarshalAsJSON(&result.DictionaryWrapper)
}

// GetNullCreateRequest creates the GetNull request.
func (DictionaryOperations) GetNullCreateRequest(u url.URL) (*azcore.Request, error) {
	u.Path = path.Join(u.Path, "/complex/dictionary/typed/null")
	return azcore.NewRequest(http.MethodGet, u), nil
}

// GetNullHandleResponse handles the GetNull response.
func (DictionaryOperations) GetNullHandleResponse(resp *azcore.Response) (*DictionaryGetNullResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := DictionaryGetNullResponse{StatusCode: resp.StatusCode}
	return &result, resp.UnmarshalAsJSON(&result.DictionaryWrapper)
}

// GetValidCreateRequest creates the GetValid request.
func (DictionaryOperations) GetValidCreateRequest(u url.URL) (*azcore.Request, error) {
	u.Path = path.Join(u.Path, "/complex/dictionary/typed/valid")
	return azcore.NewRequest(http.MethodGet, u), nil
}

// GetValidHandleResponse handles the GetValid response.
func (DictionaryOperations) GetValidHandleResponse(resp *azcore.Response) (*DictionaryGetValidResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := DictionaryGetValidResponse{StatusCode: resp.StatusCode}
	return &result, resp.UnmarshalAsJSON(&result.DictionaryWrapper)
}

// PutEmptyCreateRequest creates the PutEmpty request.
func (DictionaryOperations) PutEmptyCreateRequest(u url.URL, complexBody DictionaryWrapper) (*azcore.Request, error) {
	u.Path = path.Join(u.Path, "/complex/dictionary/typed/empty")
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsJSON(complexBody)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutEmptyHandleResponse handles the PutEmpty response.
func (DictionaryOperations) PutEmptyHandleResponse(resp *azcore.Response) (*DictionaryPutEmptyResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &DictionaryPutEmptyResponse{StatusCode: resp.StatusCode}, nil
}

// PutValidCreateRequest creates the PutValid request.
func (DictionaryOperations) PutValidCreateRequest(u url.URL, complexBody DictionaryWrapper) (*azcore.Request, error) {
	u.Path = path.Join(u.Path, "/complex/dictionary/typed/valid")
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsJSON(complexBody)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutValidHandleResponse handles the PutValid response.
func (DictionaryOperations) PutValidHandleResponse(resp *azcore.Response) (*DictionaryPutValidResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &DictionaryPutValidResponse{StatusCode: resp.StatusCode}, nil
}

