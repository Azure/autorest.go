// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package complexgroup

import (
	"context"
	azinternal "generatortests/autorest/generated/complexgroup/internal/complexgroup"
)

// DictionaryOperations contains the methods for the Dictionary group.
type DictionaryOperations interface {
	// GetEmpty - Get complex types with dictionary property which is empty 
	GetEmpty(ctx context.Context) (*DictionaryGetEmptyResponse, error)
	// GetNotProvided - Get complex types with dictionary property while server doesn't provide a response payload 
	GetNotProvided(ctx context.Context) (*DictionaryGetNotProvidedResponse, error)
	// GetNull - Get complex types with dictionary property which is null 
	GetNull(ctx context.Context) (*DictionaryGetNullResponse, error)
	// GetValid - Get complex types with dictionary property 
	GetValid(ctx context.Context) (*DictionaryGetValidResponse, error)
	// PutEmpty - Put complex types with dictionary property which is empty 
	PutEmpty(ctx context.Context, complexBody DictionaryWrapper) (*DictionaryPutEmptyResponse, error)
	// PutValid - Put complex types with dictionary property 
	PutValid(ctx context.Context, complexBody DictionaryWrapper) (*DictionaryPutValidResponse, error)
}

type dictionaryOperations struct {
	*Client
	azinternal.DictionaryOperations
}

// GetEmpty - Get complex types with dictionary property which is empty 
func (client *dictionaryOperations) GetEmpty(ctx context.Context) (*DictionaryGetEmptyResponse, error) {
	req, err := client.GetEmptyCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetNotProvided - Get complex types with dictionary property while server doesn't provide a response payload 
func (client *dictionaryOperations) GetNotProvided(ctx context.Context) (*DictionaryGetNotProvidedResponse, error) {
	req, err := client.GetNotProvidedCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetNotProvidedHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetNull - Get complex types with dictionary property which is null 
func (client *dictionaryOperations) GetNull(ctx context.Context) (*DictionaryGetNullResponse, error) {
	req, err := client.GetNullCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetValid - Get complex types with dictionary property 
func (client *dictionaryOperations) GetValid(ctx context.Context) (*DictionaryGetValidResponse, error) {
	req, err := client.GetValidCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutEmpty - Put complex types with dictionary property which is empty 
func (client *dictionaryOperations) PutEmpty(ctx context.Context, complexBody DictionaryWrapper) (*DictionaryPutEmptyResponse, error) {
	req, err := client.PutEmptyCreateRequest(*client.u, complexBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutValid - Put complex types with dictionary property 
func (client *dictionaryOperations) PutValid(ctx context.Context, complexBody DictionaryWrapper) (*DictionaryPutValidResponse, error) {
	req, err := client.PutValidCreateRequest(*client.u, complexBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

var _ DictionaryOperations = (*dictionaryOperations)(nil)
