// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package complexgroup

import (
	"context"
	azinternal "generatortests/autorest/generated/complexgroup/internal/complexgroup"
)

// PolymorphismOperations contains the methods for the Polymorphism group.
type PolymorphismOperations interface {
	// GetComplicated - Get complex types that are polymorphic, but not at the root of the hierarchy; also have additional properties 
	GetComplicated(ctx context.Context) (*PolymorphismGetComplicatedResponse, error)
	// GetComposedWithDiscriminator - Get complex object composing a polymorphic scalar property and array property with polymorphic element type, with discriminator specified. Deserialization must NOT fail and use the discriminator type specified on the wire. 
	GetComposedWithDiscriminator(ctx context.Context) (*PolymorphismGetComposedWithDiscriminatorResponse, error)
	// GetComposedWithoutDiscriminator - Get complex object composing a polymorphic scalar property and array property with polymorphic element type, without discriminator specified on wire. Deserialization must NOT fail and use the explicit type of the property. 
	GetComposedWithoutDiscriminator(ctx context.Context) (*PolymorphismGetComposedWithoutDiscriminatorResponse, error)
	// GetDotSyntax - Get complex types that are polymorphic, JSON key contains a dot 
	GetDotSyntax(ctx context.Context) (*PolymorphismGetDotSyntaxResponse, error)
	// GetValid - Get complex types that are polymorphic 
	GetValid(ctx context.Context) (*PolymorphismGetValidResponse, error)
	// PutComplicated - Put complex types that are polymorphic, but not at the root of the hierarchy; also have additional properties 
	PutComplicated(ctx context.Context, complexBody Salmon) (*PolymorphismPutComplicatedResponse, error)
	// PutMissingDiscriminator - Put complex types that are polymorphic, omitting the discriminator 
	PutMissingDiscriminator(ctx context.Context, complexBody Salmon) (*PolymorphismPutMissingDiscriminatorResponse, error)
	// PutValid - Put complex types that are polymorphic 
	PutValid(ctx context.Context, complexBody Fish) (*PolymorphismPutValidResponse, error)
	// PutValidMissingRequired - Put complex types that are polymorphic, attempting to omit required 'birthday' field - the request should not be allowed from the client 
	PutValidMissingRequired(ctx context.Context, complexBody Fish) (*PolymorphismPutValidMissingRequiredResponse, error)
}

type polymorphismOperations struct {
	*Client
	azinternal.PolymorphismOperations
}

// GetComplicated - Get complex types that are polymorphic, but not at the root of the hierarchy; also have additional properties 
func (client *polymorphismOperations) GetComplicated(ctx context.Context) (*PolymorphismGetComplicatedResponse, error) {
	req, err := client.GetComplicatedCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetComplicatedHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetComposedWithDiscriminator - Get complex object composing a polymorphic scalar property and array property with polymorphic element type, with discriminator specified. Deserialization must NOT fail and use the discriminator type specified on the wire. 
func (client *polymorphismOperations) GetComposedWithDiscriminator(ctx context.Context) (*PolymorphismGetComposedWithDiscriminatorResponse, error) {
	req, err := client.GetComposedWithDiscriminatorCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetComposedWithDiscriminatorHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetComposedWithoutDiscriminator - Get complex object composing a polymorphic scalar property and array property with polymorphic element type, without discriminator specified on wire. Deserialization must NOT fail and use the explicit type of the property. 
func (client *polymorphismOperations) GetComposedWithoutDiscriminator(ctx context.Context) (*PolymorphismGetComposedWithoutDiscriminatorResponse, error) {
	req, err := client.GetComposedWithoutDiscriminatorCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetComposedWithoutDiscriminatorHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetDotSyntax - Get complex types that are polymorphic, JSON key contains a dot 
func (client *polymorphismOperations) GetDotSyntax(ctx context.Context) (*PolymorphismGetDotSyntaxResponse, error) {
	req, err := client.GetDotSyntaxCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetDotSyntaxHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetValid - Get complex types that are polymorphic 
func (client *polymorphismOperations) GetValid(ctx context.Context) (*PolymorphismGetValidResponse, error) {
	req, err := client.GetValidCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutComplicated - Put complex types that are polymorphic, but not at the root of the hierarchy; also have additional properties 
func (client *polymorphismOperations) PutComplicated(ctx context.Context, complexBody Salmon) (*PolymorphismPutComplicatedResponse, error) {
	req, err := client.PutComplicatedCreateRequest(*client.u, complexBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutComplicatedHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutMissingDiscriminator - Put complex types that are polymorphic, omitting the discriminator 
func (client *polymorphismOperations) PutMissingDiscriminator(ctx context.Context, complexBody Salmon) (*PolymorphismPutMissingDiscriminatorResponse, error) {
	req, err := client.PutMissingDiscriminatorCreateRequest(*client.u, complexBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutMissingDiscriminatorHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutValid - Put complex types that are polymorphic 
func (client *polymorphismOperations) PutValid(ctx context.Context, complexBody Fish) (*PolymorphismPutValidResponse, error) {
	req, err := client.PutValidCreateRequest(*client.u, complexBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutValidMissingRequired - Put complex types that are polymorphic, attempting to omit required 'birthday' field - the request should not be allowed from the client 
func (client *polymorphismOperations) PutValidMissingRequired(ctx context.Context, complexBody Fish) (*PolymorphismPutValidMissingRequiredResponse, error) {
	req, err := client.PutValidMissingRequiredCreateRequest(*client.u, complexBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutValidMissingRequiredHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

var _ PolymorphismOperations = (*polymorphismOperations)(nil)
