// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package complexgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// PolymorphismOperations contains the methods for the Polymorphism group.
type PolymorphismOperations interface {
	// GetComplicated - Get complex types that are polymorphic, but not at the root of the hierarchy; also have additional properties
	GetComplicated(ctx context.Context) (*SalmonResponse, error)
	// GetComposedWithDiscriminator - Get complex object composing a polymorphic scalar property and array property with polymorphic element type, with discriminator specified. Deserialization must NOT fail and use the discriminator type specified on the wire.
	GetComposedWithDiscriminator(ctx context.Context) (*DotFishMarketResponse, error)
	// GetComposedWithoutDiscriminator - Get complex object composing a polymorphic scalar property and array property with polymorphic element type, without discriminator specified on wire. Deserialization must NOT fail and use the explicit type of the property.
	GetComposedWithoutDiscriminator(ctx context.Context) (*DotFishMarketResponse, error)
	// GetDotSyntax - Get complex types that are polymorphic, JSON key contains a dot
	GetDotSyntax(ctx context.Context) (*DotFishResponse, error)
	// GetValid - Get complex types that are polymorphic
	GetValid(ctx context.Context) (*FishResponse, error)
	// PutComplicated - Put complex types that are polymorphic, but not at the root of the hierarchy; also have additional properties
	PutComplicated(ctx context.Context, complexBody SalmonType) (*http.Response, error)
	// PutMissingDiscriminator - Put complex types that are polymorphic, omitting the discriminator
	PutMissingDiscriminator(ctx context.Context, complexBody SalmonType) (*SalmonResponse, error)
	// PutValid - Put complex types that are polymorphic
	PutValid(ctx context.Context, complexBody FishType) (*http.Response, error)
	// PutValidMissingRequired - Put complex types that are polymorphic, attempting to omit required 'birthday' field - the request should not be allowed from the client
	PutValidMissingRequired(ctx context.Context, complexBody FishType) (*http.Response, error)
}

// polymorphismOperations implements the PolymorphismOperations interface.
type polymorphismOperations struct {
	*Client
}

// GetComplicated - Get complex types that are polymorphic, but not at the root of the hierarchy; also have additional properties
func (client *polymorphismOperations) GetComplicated(ctx context.Context) (*SalmonResponse, error) {
	req, err := client.getComplicatedCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getComplicatedHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getComplicatedCreateRequest creates the GetComplicated request.
func (client *polymorphismOperations) getComplicatedCreateRequest() (*azcore.Request, error) {
	urlPath := "/complex/polymorphism/complicated"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getComplicatedHandleResponse handles the GetComplicated response.
func (client *polymorphismOperations) getComplicatedHandleResponse(resp *azcore.Response) (*SalmonResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := SalmonResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result)
}

// GetComposedWithDiscriminator - Get complex object composing a polymorphic scalar property and array property with polymorphic element type, with discriminator specified. Deserialization must NOT fail and use the discriminator type specified on the wire.
func (client *polymorphismOperations) GetComposedWithDiscriminator(ctx context.Context) (*DotFishMarketResponse, error) {
	req, err := client.getComposedWithDiscriminatorCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getComposedWithDiscriminatorHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getComposedWithDiscriminatorCreateRequest creates the GetComposedWithDiscriminator request.
func (client *polymorphismOperations) getComposedWithDiscriminatorCreateRequest() (*azcore.Request, error) {
	urlPath := "/complex/polymorphism/composedWithDiscriminator"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getComposedWithDiscriminatorHandleResponse handles the GetComposedWithDiscriminator response.
func (client *polymorphismOperations) getComposedWithDiscriminatorHandleResponse(resp *azcore.Response) (*DotFishMarketResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := DotFishMarketResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.DotFishMarket)
}

// GetComposedWithoutDiscriminator - Get complex object composing a polymorphic scalar property and array property with polymorphic element type, without discriminator specified on wire. Deserialization must NOT fail and use the explicit type of the property.
func (client *polymorphismOperations) GetComposedWithoutDiscriminator(ctx context.Context) (*DotFishMarketResponse, error) {
	req, err := client.getComposedWithoutDiscriminatorCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getComposedWithoutDiscriminatorHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getComposedWithoutDiscriminatorCreateRequest creates the GetComposedWithoutDiscriminator request.
func (client *polymorphismOperations) getComposedWithoutDiscriminatorCreateRequest() (*azcore.Request, error) {
	urlPath := "/complex/polymorphism/composedWithoutDiscriminator"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getComposedWithoutDiscriminatorHandleResponse handles the GetComposedWithoutDiscriminator response.
func (client *polymorphismOperations) getComposedWithoutDiscriminatorHandleResponse(resp *azcore.Response) (*DotFishMarketResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := DotFishMarketResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.DotFishMarket)
}

// GetDotSyntax - Get complex types that are polymorphic, JSON key contains a dot
func (client *polymorphismOperations) GetDotSyntax(ctx context.Context) (*DotFishResponse, error) {
	req, err := client.getDotSyntaxCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDotSyntaxHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDotSyntaxCreateRequest creates the GetDotSyntax request.
func (client *polymorphismOperations) getDotSyntaxCreateRequest() (*azcore.Request, error) {
	urlPath := "/complex/polymorphism/dotsyntax"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDotSyntaxHandleResponse handles the GetDotSyntax response.
func (client *polymorphismOperations) getDotSyntaxHandleResponse(resp *azcore.Response) (*DotFishResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := DotFishResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result)
}

// GetValid - Get complex types that are polymorphic
func (client *polymorphismOperations) GetValid(ctx context.Context) (*FishResponse, error) {
	req, err := client.getValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getValidCreateRequest creates the GetValid request.
func (client *polymorphismOperations) getValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/complex/polymorphism/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getValidHandleResponse handles the GetValid response.
func (client *polymorphismOperations) getValidHandleResponse(resp *azcore.Response) (*FishResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := FishResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result)
}

// PutComplicated - Put complex types that are polymorphic, but not at the root of the hierarchy; also have additional properties
func (client *polymorphismOperations) PutComplicated(ctx context.Context, complexBody SalmonType) (*http.Response, error) {
	req, err := client.putComplicatedCreateRequest(complexBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putComplicatedHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putComplicatedCreateRequest creates the PutComplicated request.
func (client *polymorphismOperations) putComplicatedCreateRequest(complexBody SalmonType) (*azcore.Request, error) {
	urlPath := "/complex/polymorphism/complicated"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(complexBody)
}

// putComplicatedHandleResponse handles the PutComplicated response.
func (client *polymorphismOperations) putComplicatedHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return resp.Response, nil
}

// PutMissingDiscriminator - Put complex types that are polymorphic, omitting the discriminator
func (client *polymorphismOperations) PutMissingDiscriminator(ctx context.Context, complexBody SalmonType) (*SalmonResponse, error) {
	req, err := client.putMissingDiscriminatorCreateRequest(complexBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putMissingDiscriminatorHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putMissingDiscriminatorCreateRequest creates the PutMissingDiscriminator request.
func (client *polymorphismOperations) putMissingDiscriminatorCreateRequest(complexBody SalmonType) (*azcore.Request, error) {
	urlPath := "/complex/polymorphism/missingdiscriminator"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(complexBody)
}

// putMissingDiscriminatorHandleResponse handles the PutMissingDiscriminator response.
func (client *polymorphismOperations) putMissingDiscriminatorHandleResponse(resp *azcore.Response) (*SalmonResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := SalmonResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result)
}

// PutValid - Put complex types that are polymorphic
func (client *polymorphismOperations) PutValid(ctx context.Context, complexBody FishType) (*http.Response, error) {
	req, err := client.putValidCreateRequest(complexBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putValidCreateRequest creates the PutValid request.
func (client *polymorphismOperations) putValidCreateRequest(complexBody FishType) (*azcore.Request, error) {
	urlPath := "/complex/polymorphism/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(complexBody)
}

// putValidHandleResponse handles the PutValid response.
func (client *polymorphismOperations) putValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return resp.Response, nil
}

// PutValidMissingRequired - Put complex types that are polymorphic, attempting to omit required 'birthday' field - the request should not be allowed from the client
func (client *polymorphismOperations) PutValidMissingRequired(ctx context.Context, complexBody FishType) (*http.Response, error) {
	req, err := client.putValidMissingRequiredCreateRequest(complexBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putValidMissingRequiredHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putValidMissingRequiredCreateRequest creates the PutValidMissingRequired request.
func (client *polymorphismOperations) putValidMissingRequiredCreateRequest(complexBody FishType) (*azcore.Request, error) {
	urlPath := "/complex/polymorphism/missingrequired/invalid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(complexBody)
}

// putValidMissingRequiredHandleResponse handles the PutValidMissingRequired response.
func (client *polymorphismOperations) putValidMissingRequiredHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return resp.Response, nil
}
