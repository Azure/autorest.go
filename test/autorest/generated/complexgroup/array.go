// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package complexgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"path"
)

// ArrayOperations contains the methods for the Array group.
type ArrayOperations interface {
	// GetEmpty - Get complex types with array property which is empty
	GetEmpty(ctx context.Context) (*ArrayWrapperResponse, error)
	// GetNotProvided - Get complex types with array property while server doesn't provide a response payload
	GetNotProvided(ctx context.Context) (*ArrayWrapperResponse, error)
	// GetValid - Get complex types with array property
	GetValid(ctx context.Context) (*ArrayWrapperResponse, error)
	// PutEmpty - Put complex types with array property which is empty
	PutEmpty(ctx context.Context, complexBody ArrayWrapper) (*http.Response, error)
	// PutValid - Put complex types with array property
	PutValid(ctx context.Context, complexBody ArrayWrapper) (*http.Response, error)
}

// ArrayClient implements the ArrayOperations interface.
// Don't use this type directly, use NewArrayClient() instead.
type ArrayClient struct {
	*Client
}

// NewArrayClient creates a new instance of ArrayClient with the specified values.
func NewArrayClient(c *Client) ArrayOperations {
	return &ArrayClient{Client: c}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *ArrayClient) Do(ctx context.Context, req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(ctx, req)
}

// GetEmpty - Get complex types with array property which is empty
func (client *ArrayClient) GetEmpty(ctx context.Context) (*ArrayWrapperResponse, error) {
	req, err := client.GetEmptyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetEmptyCreateRequest creates the GetEmpty request.
func (client *ArrayClient) GetEmptyCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/array/empty"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetEmptyHandleResponse handles the GetEmpty response.
func (client *ArrayClient) GetEmptyHandleResponse(resp *azcore.Response) (*ArrayWrapperResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetEmptyHandleError(resp)
	}
	result := ArrayWrapperResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ArrayWrapper)
}

// GetEmptyHandleError handles the GetEmpty error response.
func (client *ArrayClient) GetEmptyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetNotProvided - Get complex types with array property while server doesn't provide a response payload
func (client *ArrayClient) GetNotProvided(ctx context.Context) (*ArrayWrapperResponse, error) {
	req, err := client.GetNotProvidedCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetNotProvidedHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetNotProvidedCreateRequest creates the GetNotProvided request.
func (client *ArrayClient) GetNotProvidedCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/array/notprovided"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetNotProvidedHandleResponse handles the GetNotProvided response.
func (client *ArrayClient) GetNotProvidedHandleResponse(resp *azcore.Response) (*ArrayWrapperResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetNotProvidedHandleError(resp)
	}
	result := ArrayWrapperResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ArrayWrapper)
}

// GetNotProvidedHandleError handles the GetNotProvided error response.
func (client *ArrayClient) GetNotProvidedHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetValid - Get complex types with array property
func (client *ArrayClient) GetValid(ctx context.Context) (*ArrayWrapperResponse, error) {
	req, err := client.GetValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetValidCreateRequest creates the GetValid request.
func (client *ArrayClient) GetValidCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/array/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetValidHandleResponse handles the GetValid response.
func (client *ArrayClient) GetValidHandleResponse(resp *azcore.Response) (*ArrayWrapperResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetValidHandleError(resp)
	}
	result := ArrayWrapperResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ArrayWrapper)
}

// GetValidHandleError handles the GetValid error response.
func (client *ArrayClient) GetValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutEmpty - Put complex types with array property which is empty
func (client *ArrayClient) PutEmpty(ctx context.Context, complexBody ArrayWrapper) (*http.Response, error) {
	req, err := client.PutEmptyCreateRequest(complexBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutEmptyCreateRequest creates the PutEmpty request.
func (client *ArrayClient) PutEmptyCreateRequest(complexBody ArrayWrapper) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/array/empty"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(complexBody)
}

// PutEmptyHandleResponse handles the PutEmpty response.
func (client *ArrayClient) PutEmptyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutEmptyHandleError(resp)
	}
	return resp.Response, nil
}

// PutEmptyHandleError handles the PutEmpty error response.
func (client *ArrayClient) PutEmptyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutValid - Put complex types with array property
func (client *ArrayClient) PutValid(ctx context.Context, complexBody ArrayWrapper) (*http.Response, error) {
	req, err := client.PutValidCreateRequest(complexBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutValidCreateRequest creates the PutValid request.
func (client *ArrayClient) PutValidCreateRequest(complexBody ArrayWrapper) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/array/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(complexBody)
}

// PutValidHandleResponse handles the PutValid response.
func (client *ArrayClient) PutValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutValidHandleError(resp)
	}
	return resp.Response, nil
}

// PutValidHandleError handles the PutValid error response.
func (client *ArrayClient) PutValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
