// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package complexgroup

import (
	"context"
	azinternal "generatortests/autorest/generated/complexgroup/internal/complexgroup"
)

// ArrayOperations contains the methods for the Array group.
type ArrayOperations interface {
	// GetEmpty - Get complex types with array property which is empty 
	GetEmpty(ctx context.Context) (*ArrayGetEmptyResponse, error)
	// GetNotProvided - Get complex types with array property while server doesn't provide a response payload 
	GetNotProvided(ctx context.Context) (*ArrayGetNotProvidedResponse, error)
	// GetValid - Get complex types with array property 
	GetValid(ctx context.Context) (*ArrayGetValidResponse, error)
	// PutEmpty - Put complex types with array property which is empty 
	PutEmpty(ctx context.Context, complexBody ArrayWrapper) (*ArrayPutEmptyResponse, error)
	// PutValid - Put complex types with array property 
	PutValid(ctx context.Context, complexBody ArrayWrapper) (*ArrayPutValidResponse, error)
}

type arrayOperations struct {
	*Client
	azinternal.ArrayOperations
}

// GetEmpty - Get complex types with array property which is empty 
func (client *arrayOperations) GetEmpty(ctx context.Context) (*ArrayGetEmptyResponse, error) {
	req, err := client.GetEmptyCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetNotProvided - Get complex types with array property while server doesn't provide a response payload 
func (client *arrayOperations) GetNotProvided(ctx context.Context) (*ArrayGetNotProvidedResponse, error) {
	req, err := client.GetNotProvidedCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetNotProvidedHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetValid - Get complex types with array property 
func (client *arrayOperations) GetValid(ctx context.Context) (*ArrayGetValidResponse, error) {
	req, err := client.GetValidCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutEmpty - Put complex types with array property which is empty 
func (client *arrayOperations) PutEmpty(ctx context.Context, complexBody ArrayWrapper) (*ArrayPutEmptyResponse, error) {
	req, err := client.PutEmptyCreateRequest(*client.u, complexBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutValid - Put complex types with array property 
func (client *arrayOperations) PutValid(ctx context.Context, complexBody ArrayWrapper) (*ArrayPutValidResponse, error) {
	req, err := client.PutValidCreateRequest(*client.u, complexBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

var _ ArrayOperations = (*arrayOperations)(nil)
