// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package complexgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"path"
)

// PrimitiveOperations contains the methods for the Primitive group.
type PrimitiveOperations interface {
	// GetBool - Get complex types with bool properties
	GetBool(ctx context.Context) (*BooleanWrapperResponse, error)
	// GetByte - Get complex types with byte properties
	GetByte(ctx context.Context) (*ByteWrapperResponse, error)
	// GetDate - Get complex types with date properties
	GetDate(ctx context.Context) (*DateWrapperResponse, error)
	// GetDateTime - Get complex types with datetime properties
	GetDateTime(ctx context.Context) (*DatetimeWrapperResponse, error)
	// GetDateTimeRFC1123 - Get complex types with datetimeRfc1123 properties
	GetDateTimeRFC1123(ctx context.Context) (*Datetimerfc1123WrapperResponse, error)
	// GetDouble - Get complex types with double properties
	GetDouble(ctx context.Context) (*DoubleWrapperResponse, error)
	// GetDuration - Get complex types with duration properties
	GetDuration(ctx context.Context) (*DurationWrapperResponse, error)
	// GetFloat - Get complex types with float properties
	GetFloat(ctx context.Context) (*FloatWrapperResponse, error)
	// GetInt - Get complex types with integer properties
	GetInt(ctx context.Context) (*IntWrapperResponse, error)
	// GetLong - Get complex types with long properties
	GetLong(ctx context.Context) (*LongWrapperResponse, error)
	// GetString - Get complex types with string properties
	GetString(ctx context.Context) (*StringWrapperResponse, error)
	// PutBool - Put complex types with bool properties
	PutBool(ctx context.Context, complexBody BooleanWrapper) (*http.Response, error)
	// PutByte - Put complex types with byte properties
	PutByte(ctx context.Context, complexBody ByteWrapper) (*http.Response, error)
	// PutDate - Put complex types with date properties
	PutDate(ctx context.Context, complexBody DateWrapper) (*http.Response, error)
	// PutDateTime - Put complex types with datetime properties
	PutDateTime(ctx context.Context, complexBody DatetimeWrapper) (*http.Response, error)
	// PutDateTimeRFC1123 - Put complex types with datetimeRfc1123 properties
	PutDateTimeRFC1123(ctx context.Context, complexBody Datetimerfc1123Wrapper) (*http.Response, error)
	// PutDouble - Put complex types with double properties
	PutDouble(ctx context.Context, complexBody DoubleWrapper) (*http.Response, error)
	// PutDuration - Put complex types with duration properties
	PutDuration(ctx context.Context, complexBody DurationWrapper) (*http.Response, error)
	// PutFloat - Put complex types with float properties
	PutFloat(ctx context.Context, complexBody FloatWrapper) (*http.Response, error)
	// PutInt - Put complex types with integer properties
	PutInt(ctx context.Context, complexBody IntWrapper) (*http.Response, error)
	// PutLong - Put complex types with long properties
	PutLong(ctx context.Context, complexBody LongWrapper) (*http.Response, error)
	// PutString - Put complex types with string properties
	PutString(ctx context.Context, complexBody StringWrapper) (*http.Response, error)
}

// PrimitiveClient implements the PrimitiveOperations interface.
// Don't use this type directly, use NewPrimitiveClient() instead.
type PrimitiveClient struct {
	*Client
}

// NewPrimitiveClient creates a new instance of PrimitiveClient with the specified values.
func NewPrimitiveClient(c *Client) PrimitiveOperations {
	return &PrimitiveClient{Client: c}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *PrimitiveClient) Do(ctx context.Context, req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(ctx, req)
}

// GetBool - Get complex types with bool properties
func (client *PrimitiveClient) GetBool(ctx context.Context) (*BooleanWrapperResponse, error) {
	req, err := client.GetBoolCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetBoolHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetBoolCreateRequest creates the GetBool request.
func (client *PrimitiveClient) GetBoolCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/primitive/bool"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetBoolHandleResponse handles the GetBool response.
func (client *PrimitiveClient) GetBoolHandleResponse(resp *azcore.Response) (*BooleanWrapperResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetBoolHandleError(resp)
	}
	result := BooleanWrapperResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.BooleanWrapper)
}

// GetBoolHandleError handles the GetBool error response.
func (client *PrimitiveClient) GetBoolHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetByte - Get complex types with byte properties
func (client *PrimitiveClient) GetByte(ctx context.Context) (*ByteWrapperResponse, error) {
	req, err := client.GetByteCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetByteHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetByteCreateRequest creates the GetByte request.
func (client *PrimitiveClient) GetByteCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/primitive/byte"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetByteHandleResponse handles the GetByte response.
func (client *PrimitiveClient) GetByteHandleResponse(resp *azcore.Response) (*ByteWrapperResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetByteHandleError(resp)
	}
	result := ByteWrapperResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ByteWrapper)
}

// GetByteHandleError handles the GetByte error response.
func (client *PrimitiveClient) GetByteHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDate - Get complex types with date properties
func (client *PrimitiveClient) GetDate(ctx context.Context) (*DateWrapperResponse, error) {
	req, err := client.GetDateCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetDateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetDateCreateRequest creates the GetDate request.
func (client *PrimitiveClient) GetDateCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/primitive/date"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetDateHandleResponse handles the GetDate response.
func (client *PrimitiveClient) GetDateHandleResponse(resp *azcore.Response) (*DateWrapperResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDateHandleError(resp)
	}
	result := DateWrapperResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.DateWrapper)
}

// GetDateHandleError handles the GetDate error response.
func (client *PrimitiveClient) GetDateHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDateTime - Get complex types with datetime properties
func (client *PrimitiveClient) GetDateTime(ctx context.Context) (*DatetimeWrapperResponse, error) {
	req, err := client.GetDateTimeCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetDateTimeHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetDateTimeCreateRequest creates the GetDateTime request.
func (client *PrimitiveClient) GetDateTimeCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/primitive/datetime"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetDateTimeHandleResponse handles the GetDateTime response.
func (client *PrimitiveClient) GetDateTimeHandleResponse(resp *azcore.Response) (*DatetimeWrapperResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDateTimeHandleError(resp)
	}
	result := DatetimeWrapperResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.DatetimeWrapper)
}

// GetDateTimeHandleError handles the GetDateTime error response.
func (client *PrimitiveClient) GetDateTimeHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDateTimeRFC1123 - Get complex types with datetimeRfc1123 properties
func (client *PrimitiveClient) GetDateTimeRFC1123(ctx context.Context) (*Datetimerfc1123WrapperResponse, error) {
	req, err := client.GetDateTimeRFC1123CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetDateTimeRFC1123HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetDateTimeRFC1123CreateRequest creates the GetDateTimeRFC1123 request.
func (client *PrimitiveClient) GetDateTimeRFC1123CreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/primitive/datetimerfc1123"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetDateTimeRFC1123HandleResponse handles the GetDateTimeRFC1123 response.
func (client *PrimitiveClient) GetDateTimeRFC1123HandleResponse(resp *azcore.Response) (*Datetimerfc1123WrapperResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDateTimeRFC1123HandleError(resp)
	}
	result := Datetimerfc1123WrapperResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Datetimerfc1123Wrapper)
}

// GetDateTimeRFC1123HandleError handles the GetDateTimeRFC1123 error response.
func (client *PrimitiveClient) GetDateTimeRFC1123HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDouble - Get complex types with double properties
func (client *PrimitiveClient) GetDouble(ctx context.Context) (*DoubleWrapperResponse, error) {
	req, err := client.GetDoubleCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetDoubleHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetDoubleCreateRequest creates the GetDouble request.
func (client *PrimitiveClient) GetDoubleCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/primitive/double"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetDoubleHandleResponse handles the GetDouble response.
func (client *PrimitiveClient) GetDoubleHandleResponse(resp *azcore.Response) (*DoubleWrapperResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDoubleHandleError(resp)
	}
	result := DoubleWrapperResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.DoubleWrapper)
}

// GetDoubleHandleError handles the GetDouble error response.
func (client *PrimitiveClient) GetDoubleHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDuration - Get complex types with duration properties
func (client *PrimitiveClient) GetDuration(ctx context.Context) (*DurationWrapperResponse, error) {
	req, err := client.GetDurationCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetDurationHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetDurationCreateRequest creates the GetDuration request.
func (client *PrimitiveClient) GetDurationCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/primitive/duration"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetDurationHandleResponse handles the GetDuration response.
func (client *PrimitiveClient) GetDurationHandleResponse(resp *azcore.Response) (*DurationWrapperResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDurationHandleError(resp)
	}
	result := DurationWrapperResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.DurationWrapper)
}

// GetDurationHandleError handles the GetDuration error response.
func (client *PrimitiveClient) GetDurationHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetFloat - Get complex types with float properties
func (client *PrimitiveClient) GetFloat(ctx context.Context) (*FloatWrapperResponse, error) {
	req, err := client.GetFloatCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetFloatHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetFloatCreateRequest creates the GetFloat request.
func (client *PrimitiveClient) GetFloatCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/primitive/float"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetFloatHandleResponse handles the GetFloat response.
func (client *PrimitiveClient) GetFloatHandleResponse(resp *azcore.Response) (*FloatWrapperResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetFloatHandleError(resp)
	}
	result := FloatWrapperResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.FloatWrapper)
}

// GetFloatHandleError handles the GetFloat error response.
func (client *PrimitiveClient) GetFloatHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetInt - Get complex types with integer properties
func (client *PrimitiveClient) GetInt(ctx context.Context) (*IntWrapperResponse, error) {
	req, err := client.GetIntCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetIntHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetIntCreateRequest creates the GetInt request.
func (client *PrimitiveClient) GetIntCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/primitive/integer"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetIntHandleResponse handles the GetInt response.
func (client *PrimitiveClient) GetIntHandleResponse(resp *azcore.Response) (*IntWrapperResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetIntHandleError(resp)
	}
	result := IntWrapperResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.IntWrapper)
}

// GetIntHandleError handles the GetInt error response.
func (client *PrimitiveClient) GetIntHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetLong - Get complex types with long properties
func (client *PrimitiveClient) GetLong(ctx context.Context) (*LongWrapperResponse, error) {
	req, err := client.GetLongCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetLongHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetLongCreateRequest creates the GetLong request.
func (client *PrimitiveClient) GetLongCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/primitive/long"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetLongHandleResponse handles the GetLong response.
func (client *PrimitiveClient) GetLongHandleResponse(resp *azcore.Response) (*LongWrapperResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetLongHandleError(resp)
	}
	result := LongWrapperResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.LongWrapper)
}

// GetLongHandleError handles the GetLong error response.
func (client *PrimitiveClient) GetLongHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetString - Get complex types with string properties
func (client *PrimitiveClient) GetString(ctx context.Context) (*StringWrapperResponse, error) {
	req, err := client.GetStringCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetStringHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetStringCreateRequest creates the GetString request.
func (client *PrimitiveClient) GetStringCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/primitive/string"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetStringHandleResponse handles the GetString response.
func (client *PrimitiveClient) GetStringHandleResponse(resp *azcore.Response) (*StringWrapperResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetStringHandleError(resp)
	}
	result := StringWrapperResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringWrapper)
}

// GetStringHandleError handles the GetString error response.
func (client *PrimitiveClient) GetStringHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutBool - Put complex types with bool properties
func (client *PrimitiveClient) PutBool(ctx context.Context, complexBody BooleanWrapper) (*http.Response, error) {
	req, err := client.PutBoolCreateRequest(complexBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutBoolHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutBoolCreateRequest creates the PutBool request.
func (client *PrimitiveClient) PutBoolCreateRequest(complexBody BooleanWrapper) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/primitive/bool"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(complexBody)
}

// PutBoolHandleResponse handles the PutBool response.
func (client *PrimitiveClient) PutBoolHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutBoolHandleError(resp)
	}
	return resp.Response, nil
}

// PutBoolHandleError handles the PutBool error response.
func (client *PrimitiveClient) PutBoolHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutByte - Put complex types with byte properties
func (client *PrimitiveClient) PutByte(ctx context.Context, complexBody ByteWrapper) (*http.Response, error) {
	req, err := client.PutByteCreateRequest(complexBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutByteHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutByteCreateRequest creates the PutByte request.
func (client *PrimitiveClient) PutByteCreateRequest(complexBody ByteWrapper) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/primitive/byte"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(complexBody)
}

// PutByteHandleResponse handles the PutByte response.
func (client *PrimitiveClient) PutByteHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutByteHandleError(resp)
	}
	return resp.Response, nil
}

// PutByteHandleError handles the PutByte error response.
func (client *PrimitiveClient) PutByteHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutDate - Put complex types with date properties
func (client *PrimitiveClient) PutDate(ctx context.Context, complexBody DateWrapper) (*http.Response, error) {
	req, err := client.PutDateCreateRequest(complexBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutDateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutDateCreateRequest creates the PutDate request.
func (client *PrimitiveClient) PutDateCreateRequest(complexBody DateWrapper) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/primitive/date"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(complexBody)
}

// PutDateHandleResponse handles the PutDate response.
func (client *PrimitiveClient) PutDateHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutDateHandleError(resp)
	}
	return resp.Response, nil
}

// PutDateHandleError handles the PutDate error response.
func (client *PrimitiveClient) PutDateHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutDateTime - Put complex types with datetime properties
func (client *PrimitiveClient) PutDateTime(ctx context.Context, complexBody DatetimeWrapper) (*http.Response, error) {
	req, err := client.PutDateTimeCreateRequest(complexBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutDateTimeHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutDateTimeCreateRequest creates the PutDateTime request.
func (client *PrimitiveClient) PutDateTimeCreateRequest(complexBody DatetimeWrapper) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/primitive/datetime"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(complexBody)
}

// PutDateTimeHandleResponse handles the PutDateTime response.
func (client *PrimitiveClient) PutDateTimeHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutDateTimeHandleError(resp)
	}
	return resp.Response, nil
}

// PutDateTimeHandleError handles the PutDateTime error response.
func (client *PrimitiveClient) PutDateTimeHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutDateTimeRFC1123 - Put complex types with datetimeRfc1123 properties
func (client *PrimitiveClient) PutDateTimeRFC1123(ctx context.Context, complexBody Datetimerfc1123Wrapper) (*http.Response, error) {
	req, err := client.PutDateTimeRFC1123CreateRequest(complexBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutDateTimeRFC1123HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutDateTimeRFC1123CreateRequest creates the PutDateTimeRFC1123 request.
func (client *PrimitiveClient) PutDateTimeRFC1123CreateRequest(complexBody Datetimerfc1123Wrapper) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/primitive/datetimerfc1123"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(complexBody)
}

// PutDateTimeRFC1123HandleResponse handles the PutDateTimeRFC1123 response.
func (client *PrimitiveClient) PutDateTimeRFC1123HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutDateTimeRFC1123HandleError(resp)
	}
	return resp.Response, nil
}

// PutDateTimeRFC1123HandleError handles the PutDateTimeRFC1123 error response.
func (client *PrimitiveClient) PutDateTimeRFC1123HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutDouble - Put complex types with double properties
func (client *PrimitiveClient) PutDouble(ctx context.Context, complexBody DoubleWrapper) (*http.Response, error) {
	req, err := client.PutDoubleCreateRequest(complexBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutDoubleHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutDoubleCreateRequest creates the PutDouble request.
func (client *PrimitiveClient) PutDoubleCreateRequest(complexBody DoubleWrapper) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/primitive/double"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(complexBody)
}

// PutDoubleHandleResponse handles the PutDouble response.
func (client *PrimitiveClient) PutDoubleHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutDoubleHandleError(resp)
	}
	return resp.Response, nil
}

// PutDoubleHandleError handles the PutDouble error response.
func (client *PrimitiveClient) PutDoubleHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutDuration - Put complex types with duration properties
func (client *PrimitiveClient) PutDuration(ctx context.Context, complexBody DurationWrapper) (*http.Response, error) {
	req, err := client.PutDurationCreateRequest(complexBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutDurationHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutDurationCreateRequest creates the PutDuration request.
func (client *PrimitiveClient) PutDurationCreateRequest(complexBody DurationWrapper) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/primitive/duration"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(complexBody)
}

// PutDurationHandleResponse handles the PutDuration response.
func (client *PrimitiveClient) PutDurationHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutDurationHandleError(resp)
	}
	return resp.Response, nil
}

// PutDurationHandleError handles the PutDuration error response.
func (client *PrimitiveClient) PutDurationHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutFloat - Put complex types with float properties
func (client *PrimitiveClient) PutFloat(ctx context.Context, complexBody FloatWrapper) (*http.Response, error) {
	req, err := client.PutFloatCreateRequest(complexBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutFloatHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutFloatCreateRequest creates the PutFloat request.
func (client *PrimitiveClient) PutFloatCreateRequest(complexBody FloatWrapper) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/primitive/float"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(complexBody)
}

// PutFloatHandleResponse handles the PutFloat response.
func (client *PrimitiveClient) PutFloatHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutFloatHandleError(resp)
	}
	return resp.Response, nil
}

// PutFloatHandleError handles the PutFloat error response.
func (client *PrimitiveClient) PutFloatHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutInt - Put complex types with integer properties
func (client *PrimitiveClient) PutInt(ctx context.Context, complexBody IntWrapper) (*http.Response, error) {
	req, err := client.PutIntCreateRequest(complexBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutIntHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutIntCreateRequest creates the PutInt request.
func (client *PrimitiveClient) PutIntCreateRequest(complexBody IntWrapper) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/primitive/integer"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(complexBody)
}

// PutIntHandleResponse handles the PutInt response.
func (client *PrimitiveClient) PutIntHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutIntHandleError(resp)
	}
	return resp.Response, nil
}

// PutIntHandleError handles the PutInt error response.
func (client *PrimitiveClient) PutIntHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutLong - Put complex types with long properties
func (client *PrimitiveClient) PutLong(ctx context.Context, complexBody LongWrapper) (*http.Response, error) {
	req, err := client.PutLongCreateRequest(complexBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutLongHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutLongCreateRequest creates the PutLong request.
func (client *PrimitiveClient) PutLongCreateRequest(complexBody LongWrapper) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/primitive/long"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(complexBody)
}

// PutLongHandleResponse handles the PutLong response.
func (client *PrimitiveClient) PutLongHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutLongHandleError(resp)
	}
	return resp.Response, nil
}

// PutLongHandleError handles the PutLong error response.
func (client *PrimitiveClient) PutLongHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutString - Put complex types with string properties
func (client *PrimitiveClient) PutString(ctx context.Context, complexBody StringWrapper) (*http.Response, error) {
	req, err := client.PutStringCreateRequest(complexBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutStringHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutStringCreateRequest creates the PutString request.
func (client *PrimitiveClient) PutStringCreateRequest(complexBody StringWrapper) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/primitive/string"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(complexBody)
}

// PutStringHandleResponse handles the PutString response.
func (client *PrimitiveClient) PutStringHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutStringHandleError(resp)
	}
	return resp.Response, nil
}

// PutStringHandleError handles the PutString error response.
func (client *PrimitiveClient) PutStringHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
