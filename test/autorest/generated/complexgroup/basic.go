// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package complexgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"path"
)

// BasicOperations contains the methods for the Basic group.
type BasicOperations interface {
	// GetEmpty - Get a basic complex type that is empty
	GetEmpty(ctx context.Context) (*BasicResponse, error)
	// GetInvalid - Get a basic complex type that is invalid for the local strong type
	GetInvalid(ctx context.Context) (*BasicResponse, error)
	// GetNotProvided - Get a basic complex type while the server doesn't provide a response payload
	GetNotProvided(ctx context.Context) (*BasicResponse, error)
	// GetNull - Get a basic complex type whose properties are null
	GetNull(ctx context.Context) (*BasicResponse, error)
	// GetValid - Get complex type {id: 2, name: 'abc', color: 'YELLOW'}
	GetValid(ctx context.Context) (*BasicResponse, error)
	// PutValid - Please put {id: 2, name: 'abc', color: 'Magenta'}
	PutValid(ctx context.Context, complexBody Basic) (*http.Response, error)
}

// basicOperations implements the BasicOperations interface.
type basicOperations struct {
	*Client
}

// GetEmpty - Get a basic complex type that is empty
func (client *basicOperations) GetEmpty(ctx context.Context) (*BasicResponse, error) {
	req, err := client.getEmptyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getEmptyCreateRequest creates the GetEmpty request.
func (client *basicOperations) getEmptyCreateRequest() (*azcore.Request, error) {
	urlPath := "/complex/basic/empty"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getEmptyHandleResponse handles the GetEmpty response.
func (client *basicOperations) getEmptyHandleResponse(resp *azcore.Response) (*BasicResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getEmptyHandleError(resp)
	}
	result := BasicResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Basic)
}

// getEmptyHandleError handles the GetEmpty error response.
func (client *basicOperations) getEmptyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetInvalid - Get a basic complex type that is invalid for the local strong type
func (client *basicOperations) GetInvalid(ctx context.Context) (*BasicResponse, error) {
	req, err := client.getInvalidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getInvalidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getInvalidCreateRequest creates the GetInvalid request.
func (client *basicOperations) getInvalidCreateRequest() (*azcore.Request, error) {
	urlPath := "/complex/basic/invalid"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getInvalidHandleResponse handles the GetInvalid response.
func (client *basicOperations) getInvalidHandleResponse(resp *azcore.Response) (*BasicResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getInvalidHandleError(resp)
	}
	result := BasicResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Basic)
}

// getInvalidHandleError handles the GetInvalid error response.
func (client *basicOperations) getInvalidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetNotProvided - Get a basic complex type while the server doesn't provide a response payload
func (client *basicOperations) GetNotProvided(ctx context.Context) (*BasicResponse, error) {
	req, err := client.getNotProvidedCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getNotProvidedHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getNotProvidedCreateRequest creates the GetNotProvided request.
func (client *basicOperations) getNotProvidedCreateRequest() (*azcore.Request, error) {
	urlPath := "/complex/basic/notprovided"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getNotProvidedHandleResponse handles the GetNotProvided response.
func (client *basicOperations) getNotProvidedHandleResponse(resp *azcore.Response) (*BasicResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getNotProvidedHandleError(resp)
	}
	result := BasicResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Basic)
}

// getNotProvidedHandleError handles the GetNotProvided error response.
func (client *basicOperations) getNotProvidedHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetNull - Get a basic complex type whose properties are null
func (client *basicOperations) GetNull(ctx context.Context) (*BasicResponse, error) {
	req, err := client.getNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getNullCreateRequest creates the GetNull request.
func (client *basicOperations) getNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/complex/basic/null"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getNullHandleResponse handles the GetNull response.
func (client *basicOperations) getNullHandleResponse(resp *azcore.Response) (*BasicResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getNullHandleError(resp)
	}
	result := BasicResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Basic)
}

// getNullHandleError handles the GetNull error response.
func (client *basicOperations) getNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetValid - Get complex type {id: 2, name: 'abc', color: 'YELLOW'}
func (client *basicOperations) GetValid(ctx context.Context) (*BasicResponse, error) {
	req, err := client.getValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getValidCreateRequest creates the GetValid request.
func (client *basicOperations) getValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/complex/basic/valid"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getValidHandleResponse handles the GetValid response.
func (client *basicOperations) getValidHandleResponse(resp *azcore.Response) (*BasicResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getValidHandleError(resp)
	}
	result := BasicResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Basic)
}

// getValidHandleError handles the GetValid error response.
func (client *basicOperations) getValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutValid - Please put {id: 2, name: 'abc', color: 'Magenta'}
func (client *basicOperations) PutValid(ctx context.Context, complexBody Basic) (*http.Response, error) {
	req, err := client.putValidCreateRequest(complexBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putValidCreateRequest creates the PutValid request.
func (client *basicOperations) putValidCreateRequest(complexBody Basic) (*azcore.Request, error) {
	urlPath := "/complex/basic/valid"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2016-02-29")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(complexBody)
}

// putValidHandleResponse handles the PutValid response.
func (client *basicOperations) putValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putValidHandleError(resp)
	}
	return resp.Response, nil
}

// putValidHandleError handles the PutValid error response.
func (client *basicOperations) putValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
