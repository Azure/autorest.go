// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package complexgroup

import (
	"context"
	azinternal "generatortests/autorest/generated/complexgroup/internal/complexgroup"
)

// BasicOperations contains the methods for the Basic group.
type BasicOperations interface {
	// GetEmpty - Get a basic complex type that is empty
	GetEmpty(ctx context.Context) (*BasicGetEmptyResponse, error)
	// GetInvalid - Get a basic complex type that is invalid for the local strong type
	GetInvalid(ctx context.Context) (*BasicGetInvalidResponse, error)
	// GetNotProvided - Get a basic complex type while the server doesn't provide a response payload
	GetNotProvided(ctx context.Context) (*BasicGetNotProvidedResponse, error)
	// GetNull - Get a basic complex type whose properties are null
	GetNull(ctx context.Context) (*BasicGetNullResponse, error)
	// GetValid - Get complex type {id: 2, name: 'abc', color: 'YELLOW'}
	GetValid(ctx context.Context) (*BasicGetValidResponse, error)
	// PutValid - Please put {id: 2, name: 'abc', color: 'Magenta'}
	PutValid(ctx context.Context, complexBody Basic) (*BasicPutValidResponse, error)
}

type basicOperations struct {
	*Client
	azinternal.BasicOperations
}

// GetEmpty - Get a basic complex type that is empty
func (client *basicOperations) GetEmpty(ctx context.Context) (*BasicGetEmptyResponse, error) {
	req, err := client.GetEmptyCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetInvalid - Get a basic complex type that is invalid for the local strong type
func (client *basicOperations) GetInvalid(ctx context.Context) (*BasicGetInvalidResponse, error) {
	req, err := client.GetInvalidCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetInvalidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetNotProvided - Get a basic complex type while the server doesn't provide a response payload
func (client *basicOperations) GetNotProvided(ctx context.Context) (*BasicGetNotProvidedResponse, error) {
	req, err := client.GetNotProvidedCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetNotProvidedHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetNull - Get a basic complex type whose properties are null
func (client *basicOperations) GetNull(ctx context.Context) (*BasicGetNullResponse, error) {
	req, err := client.GetNullCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetValid - Get complex type {id: 2, name: 'abc', color: 'YELLOW'}
func (client *basicOperations) GetValid(ctx context.Context) (*BasicGetValidResponse, error) {
	req, err := client.GetValidCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutValid - Please put {id: 2, name: 'abc', color: 'Magenta'}
func (client *basicOperations) PutValid(ctx context.Context, complexBody Basic) (*BasicPutValidResponse, error) {
	req, err := client.PutValidCreateRequest(*client.u, complexBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

var _ BasicOperations = (*basicOperations)(nil)
