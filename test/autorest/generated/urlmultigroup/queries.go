// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package urlmultigroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"path"
)

// QueriesOperations contains the methods for the Queries group.
type QueriesOperations interface {
	// ArrayStringMultiEmpty - Get an empty array [] of string using the multi-array format
	ArrayStringMultiEmpty(ctx context.Context, queriesArrayStringMultiEmptyOptions *QueriesArrayStringMultiEmptyOptions) (*http.Response, error)
	// ArrayStringMultiNull - Get a null array of string using the multi-array format
	ArrayStringMultiNull(ctx context.Context, queriesArrayStringMultiNullOptions *QueriesArrayStringMultiNullOptions) (*http.Response, error)
	// ArrayStringMultiValid - Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the mult-array format
	ArrayStringMultiValid(ctx context.Context, queriesArrayStringMultiValidOptions *QueriesArrayStringMultiValidOptions) (*http.Response, error)
}

// queriesOperations implements the QueriesOperations interface.
type queriesOperations struct {
	*Client
}

// ArrayStringMultiEmpty - Get an empty array [] of string using the multi-array format
func (client *queriesOperations) ArrayStringMultiEmpty(ctx context.Context, queriesArrayStringMultiEmptyOptions *QueriesArrayStringMultiEmptyOptions) (*http.Response, error) {
	req, err := client.arrayStringMultiEmptyCreateRequest(queriesArrayStringMultiEmptyOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.arrayStringMultiEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// arrayStringMultiEmptyCreateRequest creates the ArrayStringMultiEmpty request.
func (client *queriesOperations) arrayStringMultiEmptyCreateRequest(queriesArrayStringMultiEmptyOptions *QueriesArrayStringMultiEmptyOptions) (*azcore.Request, error) {
	urlPath := "/queries/array/multi/string/empty"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if queriesArrayStringMultiEmptyOptions != nil && queriesArrayStringMultiEmptyOptions.ArrayQuery != nil {
		for _, qv := range *queriesArrayStringMultiEmptyOptions.ArrayQuery {
			query.Add("arrayQuery", qv)
		}
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// arrayStringMultiEmptyHandleResponse handles the ArrayStringMultiEmpty response.
func (client *queriesOperations) arrayStringMultiEmptyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.arrayStringMultiEmptyHandleError(resp)
	}
	return resp.Response, nil
}

// arrayStringMultiEmptyHandleError handles the ArrayStringMultiEmpty error response.
func (client *queriesOperations) arrayStringMultiEmptyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ArrayStringMultiNull - Get a null array of string using the multi-array format
func (client *queriesOperations) ArrayStringMultiNull(ctx context.Context, queriesArrayStringMultiNullOptions *QueriesArrayStringMultiNullOptions) (*http.Response, error) {
	req, err := client.arrayStringMultiNullCreateRequest(queriesArrayStringMultiNullOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.arrayStringMultiNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// arrayStringMultiNullCreateRequest creates the ArrayStringMultiNull request.
func (client *queriesOperations) arrayStringMultiNullCreateRequest(queriesArrayStringMultiNullOptions *QueriesArrayStringMultiNullOptions) (*azcore.Request, error) {
	urlPath := "/queries/array/multi/string/null"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if queriesArrayStringMultiNullOptions != nil && queriesArrayStringMultiNullOptions.ArrayQuery != nil {
		for _, qv := range *queriesArrayStringMultiNullOptions.ArrayQuery {
			query.Add("arrayQuery", qv)
		}
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// arrayStringMultiNullHandleResponse handles the ArrayStringMultiNull response.
func (client *queriesOperations) arrayStringMultiNullHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.arrayStringMultiNullHandleError(resp)
	}
	return resp.Response, nil
}

// arrayStringMultiNullHandleError handles the ArrayStringMultiNull error response.
func (client *queriesOperations) arrayStringMultiNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ArrayStringMultiValid - Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the mult-array format
func (client *queriesOperations) ArrayStringMultiValid(ctx context.Context, queriesArrayStringMultiValidOptions *QueriesArrayStringMultiValidOptions) (*http.Response, error) {
	req, err := client.arrayStringMultiValidCreateRequest(queriesArrayStringMultiValidOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.arrayStringMultiValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// arrayStringMultiValidCreateRequest creates the ArrayStringMultiValid request.
func (client *queriesOperations) arrayStringMultiValidCreateRequest(queriesArrayStringMultiValidOptions *QueriesArrayStringMultiValidOptions) (*azcore.Request, error) {
	urlPath := "/queries/array/multi/string/valid"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if queriesArrayStringMultiValidOptions != nil && queriesArrayStringMultiValidOptions.ArrayQuery != nil {
		for _, qv := range *queriesArrayStringMultiValidOptions.ArrayQuery {
			query.Add("arrayQuery", qv)
		}
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// arrayStringMultiValidHandleResponse handles the ArrayStringMultiValid response.
func (client *queriesOperations) arrayStringMultiValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.arrayStringMultiValidHandleError(resp)
	}
	return resp.Response, nil
}

// arrayStringMultiValidHandleError handles the ArrayStringMultiValid error response.
func (client *queriesOperations) arrayStringMultiValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
