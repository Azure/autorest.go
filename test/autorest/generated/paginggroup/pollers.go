// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package paginggroup

import (
	"context"
	"encoding/json"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"time"
)

// PagingGetMultiplePagesLroPoller provides polling facilities until the operation completes
type PagingGetMultiplePagesLroPoller interface {
	Poll(context.Context) bool
	Response() (ProductResultPager, error)
	ResumeToken() (string, error)
	Wait(ctx context.Context, pollingInterval time.Duration) (ProductResultPager, error)
}

type pagingGetMultiplePagesLroPoller struct {
	// the client for making the request
	client *pagingOperations
	// polling tracker
	pt pollingTracker
}

// Poll returns false if there was an error or polling has reached a terminal state
func (p *pagingGetMultiplePagesLroPoller) Poll(ctx context.Context) bool {
	done, err := p.done(ctx)
	if err != nil {
		return false
	}
	return !done
}

// Response returns the latest response that is stored from the latest polling operation
func (p *pagingGetMultiplePagesLroPoller) Response() (ProductResultPager, error) {
	client := p.client
	u, err := url.Parse(p.pt.pollingURL())
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return &productResultPager{
		client:    client,
		request:   req,
		responder: client.getMultiplePagesLroHandleResponse,
		advancer: func(resp *ProductResultResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.ProductResult.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.ProductResult.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil

}

// ResumeToken generates the string token that can be used with the ResumePagingGetMultiplePagesLroPoller method
// on the client to create a new poller from the data held in the current poller type
func (p *pagingGetMultiplePagesLroPoller) ResumeToken() (string, error) {
	if p.pt.hasTerminated() {
		return "", errors.New("cannot create a ResumeToken from a poller in a terminal state")
	}
	js, err := json.Marshal(p.pt)
	if err != nil {
		return "", err
	}
	return string(js), nil
}

// Wait will continue to poll until a terminal state is reached or an error is encountered. Wait will use the
// duration specified in the retry-after header, if the header is not specified then the pollingInterval that
// is specified will be used to wait between polling requests.
func (p *pagingGetMultiplePagesLroPoller) Wait(ctx context.Context, pollingInterval time.Duration) (ProductResultPager, error) {
	for p.Poll(context.Background()) {
		if delay := p.response().RetryAfter(); delay > 0 {
			time.Sleep(delay)
		} else {
			time.Sleep(pollingInterval)
		}
	}
	return p.Response()
}

// response returns the last HTTP response.
func (p *pagingGetMultiplePagesLroPoller) response() *azcore.Response {
	return p.pt.latestResponse()
}

// done queries the service to see if the operation has completed.
func (p *pagingGetMultiplePagesLroPoller) done(ctx context.Context) (done bool, err error) {
	if p.pt.hasTerminated() {
		return true, p.pt.pollingError()
	}
	if err := p.pt.pollForStatus(ctx, p.client.p); err != nil {
		return false, err
	}
	if err := p.pt.checkForErrors(); err != nil {
		return p.pt.hasTerminated(), err
	}
	if err := p.pt.updatePollingState(p.pt.provisioningStateApplicable()); err != nil {
		return false, err
	}
	if err := p.pt.initPollingMethod(); err != nil {
		return false, err
	}
	if err := p.pt.updatePollingMethod(); err != nil {
		return false, err
	}
	return p.pt.hasTerminated(), p.pt.pollingError()
}
