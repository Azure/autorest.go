// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package paginggroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
)

// OdataProductResultPager provides iteration over OdataProductResult pages.
type OdataProductResultPager interface {
	// NextPage returns true if the pager advanced to the next page.
	// Returns false if there are no more pages or an error occurred.
	NextPage(context.Context) bool

	// Page returns the current OdataProductResultResponse.
	PageResponse() *OdataProductResultResponse

	// Err returns the last error encountered while paging.
	Err() error
}

type odataProductResultHandleResponse func(*azcore.Response) (*OdataProductResultResponse, error)

type odataProductResultAdvancePage func(*OdataProductResultResponse) (*azcore.Request, error)

type odataProductResultPager struct {
	cli *pagingOperations
	req *azcore.Request
	hnd odataProductResultHandleResponse
	adv odataProductResultAdvancePage
	cur *OdataProductResultResponse
	err error
}

func (p *odataProductResultPager) Err() error {
	return p.err
}

func (p *odataProductResultPager) NextPage(ctx context.Context) bool {
	if p.cur != nil {
		if p.cur.OdataProductResult.OdataNextLink == nil || len(*p.cur.OdataProductResult.OdataNextLink) == 0 {
			return false
		}
		req, err := p.adv(p.cur)
		if err != nil {
			p.err = err
			return false
		}
		p.req = req
	}
	resp, err := p.cli.p.Do(ctx, p.req)
	if err != nil {
		p.err = err
		return false
	}
	result, err := p.hnd(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.cur = result
	return true
}

func (p *odataProductResultPager) PageResponse() *OdataProductResultResponse {
	return p.cur
}

// ProductResultPager provides iteration over ProductResult pages.
type ProductResultPager interface {
	// NextPage returns true if the pager advanced to the next page.
	// Returns false if there are no more pages or an error occurred.
	NextPage(context.Context) bool

	// Page returns the current ProductResultResponse.
	PageResponse() *ProductResultResponse

	// Err returns the last error encountered while paging.
	Err() error
}

type productResultHandleResponse func(*azcore.Response) (*ProductResultResponse, error)

type productResultAdvancePage func(*ProductResultResponse) (*azcore.Request, error)

type productResultPager struct {
	cli *pagingOperations
	req *azcore.Request
	hnd productResultHandleResponse
	adv productResultAdvancePage
	cur *ProductResultResponse
	err error
}

func (p *productResultPager) Err() error {
	return p.err
}

func (p *productResultPager) NextPage(ctx context.Context) bool {
	if p.cur != nil {
		if p.cur.ProductResult.NextLink == nil || len(*p.cur.ProductResult.NextLink) == 0 {
			return false
		}
		req, err := p.adv(p.cur)
		if err != nil {
			p.err = err
			return false
		}
		p.req = req
	}
	resp, err := p.cli.p.Do(ctx, p.req)
	if err != nil {
		p.err = err
		return false
	}
	result, err := p.hnd(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.cur = result
	return true
}

func (p *productResultPager) PageResponse() *ProductResultResponse {
	return p.cur
}

// ProductResultValuePager provides iteration over ProductResultValue pages.
type ProductResultValuePager interface {
	// NextPage returns true if the pager advanced to the next page.
	// Returns false if there are no more pages or an error occurred.
	NextPage(context.Context) bool

	// Page returns the current ProductResultValueResponse.
	PageResponse() *ProductResultValueResponse

	// Err returns the last error encountered while paging.
	Err() error
}

type productResultValueHandleResponse func(*azcore.Response) (*ProductResultValueResponse, error)

type productResultValueAdvancePage func(*ProductResultValueResponse) (*azcore.Request, error)

type productResultValuePager struct {
	cli *pagingOperations
	req *azcore.Request
	hnd productResultValueHandleResponse
	adv productResultValueAdvancePage
	cur *ProductResultValueResponse
	err error
}

func (p *productResultValuePager) Err() error {
	return p.err
}

func (p *productResultValuePager) NextPage(ctx context.Context) bool {
	if p.cur != nil {
		if p.cur.ProductResultValue.NextLink == nil || len(*p.cur.ProductResultValue.NextLink) == 0 {
			return false
		}
		req, err := p.adv(p.cur)
		if err != nil {
			p.err = err
			return false
		}
		p.req = req
	}
	resp, err := p.cli.p.Do(ctx, p.req)
	if err != nil {
		p.err = err
		return false
	}
	result, err := p.hnd(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.cur = result
	return true
}

func (p *productResultValuePager) PageResponse() *ProductResultValueResponse {
	return p.cur
}
