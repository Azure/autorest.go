// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package arraygroup

import (
	"fmt"
	"net/http"
	"time"
)

// BoolArrayResponse is the response envelope for operations that return a []bool type.
type BoolArrayResponse struct {
	// The array value [true, false, false, true]
	BoolArray *[]bool

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ByteArrayArrayResponse is the response envelope for operations that return a [][]byte type.
type ByteArrayArrayResponse struct {
	// The array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each elementencoded in base 64
	ByteArrayArray *[][]byte

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DurationArrayResponse is the response envelope for operations that return a []time.Duration type.
type DurationArrayResponse struct {
	// The array value ['P123DT22H14M12.011S', 'P5DT1H0M0S']
	DurationArray *[]time.Duration

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Enum0ArrayResponse is the response envelope for operations that return a []Enum0 type.
type Enum0ArrayResponse struct {
	// The array value ['foo1', 'foo2', 'foo3']
	Enum0Array *[]Enum0

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

type Error struct {
	Message *string `json:"message,omitempty"`
	Status  *int32  `json:"status,omitempty"`
}

// Error implements the error interface for type Error.
func (e Error) Error() string {
	msg := ""
	if e.Message != nil {
		msg += fmt.Sprintf("Message: %v\n", *e.Message)
	}
	if e.Status != nil {
		msg += fmt.Sprintf("Status: %v\n", *e.Status)
	}
	if msg == "" {
		msg = "missing error info"
	}
	return msg
}

// Float32ArrayResponse is the response envelope for operations that return a []float32 type.
type Float32ArrayResponse struct {
	// The array value [0, -0.01, 1.2e20]
	Float32Array *[]float32

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Float64ArrayResponse is the response envelope for operations that return a []float64 type.
type Float64ArrayResponse struct {
	// The array value [0, -0.01, 1.2e20]
	Float64Array *[]float64

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FooEnumArrayResponse is the response envelope for operations that return a []FooEnum type.
type FooEnumArrayResponse struct {
	// The array value ['foo1', 'foo2', 'foo3']
	FooEnumArray *[]FooEnum

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Int32ArrayResponse is the response envelope for operations that return a []int32 type.
type Int32ArrayResponse struct {
	// The null Array value
	Int32Array *[]int32

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Int64ArrayResponse is the response envelope for operations that return a []int64 type.
type Int64ArrayResponse struct {
	// The array value [1, -1, 3, 300]
	Int64Array *[]int64

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MapOfStringArrayResponse is the response envelope for operations that return a []map[string]string type.
type MapOfStringArrayResponse struct {
	// An array of Dictionaries with value null
	MapOfStringArray *[]map[string]string

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

type Product struct {
	Integer *int32  `json:"integer,omitempty"`
	String  *string `json:"string,omitempty"`
}

// ProductArrayResponse is the response envelope for operations that return a []Product type.
type ProductArrayResponse struct {
	// array of complex type with null value
	ProductArray *[]Product

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StringArrayArrayResponse is the response envelope for operations that return a [][]string type.
type StringArrayArrayResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// a null array
	StringArrayArray *[][]string
}

// StringArrayResponse is the response envelope for operations that return a []string type.
type StringArrayResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The array value ['foo1', 'foo2', 'foo3']
	StringArray *[]string
}

// TimeArrayResponse is the response envelope for operations that return a []time.Time type.
type TimeArrayResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The array value ['2000-12-01', '1980-01-02', '1492-10-12']
	TimeArray *[]time.Time
}
