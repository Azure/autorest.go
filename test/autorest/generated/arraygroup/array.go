// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package arraygroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"time"
)

// ArrayOperations contains the methods for the Array group.
type ArrayOperations interface {
	// GetArrayEmpty - Get an empty array []
	GetArrayEmpty(ctx context.Context) (*StringArrayArrayResponse, error)
	// GetArrayItemEmpty - Get an array of array of strings [['1', '2', '3'], [], ['7', '8', '9']]
	GetArrayItemEmpty(ctx context.Context) (*StringArrayArrayResponse, error)
	// GetArrayItemNull - Get an array of array of strings [['1', '2', '3'], null, ['7', '8', '9']]
	GetArrayItemNull(ctx context.Context) (*StringArrayArrayResponse, error)
	// GetArrayNull - Get a null array
	GetArrayNull(ctx context.Context) (*StringArrayArrayResponse, error)
	// GetArrayValid - Get an array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
	GetArrayValid(ctx context.Context) (*StringArrayArrayResponse, error)
	// GetBase64URL - Get array value ['a string that gets encoded with base64url', 'test string' 'Lorem ipsum'] with the items base64url encoded
	GetBase64URL(ctx context.Context) (*ByteArrayArrayResponse, error)
	// GetBooleanInvalidNull - Get boolean array value [true, null, false]
	GetBooleanInvalidNull(ctx context.Context) (*BoolArrayResponse, error)
	// GetBooleanInvalidString - Get boolean array value [true, 'boolean', false]
	GetBooleanInvalidString(ctx context.Context) (*BoolArrayResponse, error)
	// GetBooleanTfft - Get boolean array value [true, false, false, true]
	GetBooleanTfft(ctx context.Context) (*BoolArrayResponse, error)
	// GetByteInvalidNull - Get byte array value [hex(AB, AC, AD), null] with the first item base64 encoded
	GetByteInvalidNull(ctx context.Context) (*ByteArrayArrayResponse, error)
	// GetByteValid - Get byte array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each item encoded in base64
	GetByteValid(ctx context.Context) (*ByteArrayArrayResponse, error)
	// GetComplexEmpty - Get empty array of complex type []
	GetComplexEmpty(ctx context.Context) (*ProductArrayResponse, error)
	// GetComplexItemEmpty - Get array of complex type with empty item [{'integer': 1 'string': '2'}, {}, {'integer': 5, 'string': '6'}]
	GetComplexItemEmpty(ctx context.Context) (*ProductArrayResponse, error)
	// GetComplexItemNull - Get array of complex type with null item [{'integer': 1 'string': '2'}, null, {'integer': 5, 'string': '6'}]
	GetComplexItemNull(ctx context.Context) (*ProductArrayResponse, error)
	// GetComplexNull - Get array of complex type null value
	GetComplexNull(ctx context.Context) (*ProductArrayResponse, error)
	// GetComplexValid - Get array of complex type with [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer': 5, 'string': '6'}]
	GetComplexValid(ctx context.Context) (*ProductArrayResponse, error)
	// GetDateInvalidChars - Get date array value ['2011-03-22', 'date']
	GetDateInvalidChars(ctx context.Context) (*TimeArrayResponse, error)
	// GetDateInvalidNull - Get date array value ['2012-01-01', null, '1776-07-04']
	GetDateInvalidNull(ctx context.Context) (*TimeArrayResponse, error)
	// GetDateTimeInvalidChars - Get date array value ['2000-12-01t00:00:01z', 'date-time']
	GetDateTimeInvalidChars(ctx context.Context) (*TimeArrayResponse, error)
	// GetDateTimeInvalidNull - Get date array value ['2000-12-01t00:00:01z', null]
	GetDateTimeInvalidNull(ctx context.Context) (*TimeArrayResponse, error)
	// GetDateTimeRFC1123Valid - Get date-time array value ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct 1492 10:15:01 GMT']
	GetDateTimeRFC1123Valid(ctx context.Context) (*TimeArrayResponse, error)
	// GetDateTimeValid - Get date-time array value ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00']
	GetDateTimeValid(ctx context.Context) (*TimeArrayResponse, error)
	// GetDateValid - Get integer array value ['2000-12-01', '1980-01-02', '1492-10-12']
	GetDateValid(ctx context.Context) (*TimeArrayResponse, error)
	// GetDictionaryEmpty - Get an array of Dictionaries of type <string, string> with value []
	GetDictionaryEmpty(ctx context.Context) (*MapOfStringArrayResponse, error)
	// GetDictionaryItemEmpty - Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3': 'three'}, {}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
	GetDictionaryItemEmpty(ctx context.Context) (*MapOfStringArrayResponse, error)
	// GetDictionaryItemNull - Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3': 'three'}, null, {'7': 'seven', '8': 'eight', '9': 'nine'}]
	GetDictionaryItemNull(ctx context.Context) (*MapOfStringArrayResponse, error)
	// GetDictionaryNull - Get an array of Dictionaries with value null
	GetDictionaryNull(ctx context.Context) (*MapOfStringArrayResponse, error)
	// GetDictionaryValid - Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
	GetDictionaryValid(ctx context.Context) (*MapOfStringArrayResponse, error)
	// GetDoubleInvalidNull - Get float array value [0.0, null, -1.2e20]
	GetDoubleInvalidNull(ctx context.Context) (*Float64ArrayResponse, error)
	// GetDoubleInvalidString - Get boolean array value [1.0, 'number', 0.0]
	GetDoubleInvalidString(ctx context.Context) (*Float64ArrayResponse, error)
	// GetDoubleValid - Get float array value [0, -0.01, 1.2e20]
	GetDoubleValid(ctx context.Context) (*Float64ArrayResponse, error)
	// GetDurationValid - Get duration array value ['P123DT22H14M12.011S', 'P5DT1H0M0S']
	GetDurationValid(ctx context.Context) (*DurationArrayResponse, error)
	// GetEmpty - Get empty array value []
	GetEmpty(ctx context.Context) (*Int32ArrayResponse, error)
	// GetEnumValid - Get enum array value ['foo1', 'foo2', 'foo3']
	GetEnumValid(ctx context.Context) (*FooEnumArrayResponse, error)
	// GetFloatInvalidNull - Get float array value [0.0, null, -1.2e20]
	GetFloatInvalidNull(ctx context.Context) (*Float32ArrayResponse, error)
	// GetFloatInvalidString - Get boolean array value [1.0, 'number', 0.0]
	GetFloatInvalidString(ctx context.Context) (*Float32ArrayResponse, error)
	// GetFloatValid - Get float array value [0, -0.01, 1.2e20]
	GetFloatValid(ctx context.Context) (*Float32ArrayResponse, error)
	// GetIntInvalidNull - Get integer array value [1, null, 0]
	GetIntInvalidNull(ctx context.Context) (*Int32ArrayResponse, error)
	// GetIntInvalidString - Get integer array value [1, 'integer', 0]
	GetIntInvalidString(ctx context.Context) (*Int32ArrayResponse, error)
	// GetIntegerValid - Get integer array value [1, -1, 3, 300]
	GetIntegerValid(ctx context.Context) (*Int32ArrayResponse, error)
	// GetInvalid - Get invalid array [1, 2, 3
	GetInvalid(ctx context.Context) (*Int32ArrayResponse, error)
	// GetLongInvalidNull - Get long array value [1, null, 0]
	GetLongInvalidNull(ctx context.Context) (*Int64ArrayResponse, error)
	// GetLongInvalidString - Get long array value [1, 'integer', 0]
	GetLongInvalidString(ctx context.Context) (*Int64ArrayResponse, error)
	// GetLongValid - Get integer array value [1, -1, 3, 300]
	GetLongValid(ctx context.Context) (*Int64ArrayResponse, error)
	// GetNull - Get null array value
	GetNull(ctx context.Context) (*Int32ArrayResponse, error)
	// GetStringEnumValid - Get enum array value ['foo1', 'foo2', 'foo3']
	GetStringEnumValid(ctx context.Context) (*Enum0ArrayResponse, error)
	// GetStringValid - Get string array value ['foo1', 'foo2', 'foo3']
	GetStringValid(ctx context.Context) (*StringArrayResponse, error)
	// GetStringWithInvalid - Get string array value ['foo', 123, 'foo2']
	GetStringWithInvalid(ctx context.Context) (*StringArrayResponse, error)
	// GetStringWithNull - Get string array value ['foo', null, 'foo2']
	GetStringWithNull(ctx context.Context) (*StringArrayResponse, error)
	// GetUUIDInvalidChars - Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'foo']
	GetUUIDInvalidChars(ctx context.Context) (*StringArrayResponse, error)
	// GetUUIDValid - Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
	GetUUIDValid(ctx context.Context) (*StringArrayResponse, error)
	// PutArrayValid - Put An array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
	PutArrayValid(ctx context.Context, arrayBody [][]string) (*http.Response, error)
	// PutBooleanTfft - Set array value empty [true, false, false, true]
	PutBooleanTfft(ctx context.Context, arrayBody []bool) (*http.Response, error)
	// PutByteValid - Put the array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each elementencoded in base 64
	PutByteValid(ctx context.Context, arrayBody [][]byte) (*http.Response, error)
	// PutComplexValid - Put an array of complex type with values [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer': 5, 'string': '6'}]
	PutComplexValid(ctx context.Context, arrayBody []Product) (*http.Response, error)
	// PutDateTimeRFC1123Valid - Set array value  ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct 1492 10:15:01 GMT']
	PutDateTimeRFC1123Valid(ctx context.Context, arrayBody []time.Time) (*http.Response, error)
	// PutDateTimeValid - Set array value  ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00']
	PutDateTimeValid(ctx context.Context, arrayBody []time.Time) (*http.Response, error)
	// PutDateValid - Set array value  ['2000-12-01', '1980-01-02', '1492-10-12']
	PutDateValid(ctx context.Context, arrayBody []time.Time) (*http.Response, error)
	// PutDictionaryValid - Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
	PutDictionaryValid(ctx context.Context, arrayBody []map[string]string) (*http.Response, error)
	// PutDoubleValid - Set array value [0, -0.01, 1.2e20]
	PutDoubleValid(ctx context.Context, arrayBody []float64) (*http.Response, error)
	// PutDurationValid - Set array value  ['P123DT22H14M12.011S', 'P5DT1H0M0S']
	PutDurationValid(ctx context.Context, arrayBody []time.Duration) (*http.Response, error)
	// PutEmpty - Set array value empty []
	PutEmpty(ctx context.Context, arrayBody []string) (*http.Response, error)
	// PutEnumValid - Set array value ['foo1', 'foo2', 'foo3']
	PutEnumValid(ctx context.Context, arrayBody []FooEnum) (*http.Response, error)
	// PutFloatValid - Set array value [0, -0.01, 1.2e20]
	PutFloatValid(ctx context.Context, arrayBody []float32) (*http.Response, error)
	// PutIntegerValid - Set array value empty [1, -1, 3, 300]
	PutIntegerValid(ctx context.Context, arrayBody []int32) (*http.Response, error)
	// PutLongValid - Set array value empty [1, -1, 3, 300]
	PutLongValid(ctx context.Context, arrayBody []int64) (*http.Response, error)
	// PutStringEnumValid - Set array value ['foo1', 'foo2', 'foo3']
	PutStringEnumValid(ctx context.Context, arrayBody []Enum1) (*http.Response, error)
	// PutStringValid - Set array value ['foo1', 'foo2', 'foo3']
	PutStringValid(ctx context.Context, arrayBody []string) (*http.Response, error)
	// PutUUIDValid - Set array value  ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
	PutUUIDValid(ctx context.Context, arrayBody []string) (*http.Response, error)
}

// arrayOperations implements the ArrayOperations interface.
type arrayOperations struct {
	*Client
}

// GetArrayEmpty - Get an empty array []
func (client *arrayOperations) GetArrayEmpty(ctx context.Context) (*StringArrayArrayResponse, error) {
	req, err := client.getArrayEmptyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getArrayEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getArrayEmptyCreateRequest creates the GetArrayEmpty request.
func (client *arrayOperations) getArrayEmptyCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/array/empty"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getArrayEmptyHandleResponse handles the GetArrayEmpty response.
func (client *arrayOperations) getArrayEmptyHandleResponse(resp *azcore.Response) (*StringArrayArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getArrayEmptyHandleError(resp)
	}
	result := StringArrayArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArrayArray)
}

// getArrayEmptyHandleError handles the GetArrayEmpty error response.
func (client *arrayOperations) getArrayEmptyHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetArrayItemEmpty - Get an array of array of strings [['1', '2', '3'], [], ['7', '8', '9']]
func (client *arrayOperations) GetArrayItemEmpty(ctx context.Context) (*StringArrayArrayResponse, error) {
	req, err := client.getArrayItemEmptyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getArrayItemEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getArrayItemEmptyCreateRequest creates the GetArrayItemEmpty request.
func (client *arrayOperations) getArrayItemEmptyCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/array/itemempty"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getArrayItemEmptyHandleResponse handles the GetArrayItemEmpty response.
func (client *arrayOperations) getArrayItemEmptyHandleResponse(resp *azcore.Response) (*StringArrayArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getArrayItemEmptyHandleError(resp)
	}
	result := StringArrayArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArrayArray)
}

// getArrayItemEmptyHandleError handles the GetArrayItemEmpty error response.
func (client *arrayOperations) getArrayItemEmptyHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetArrayItemNull - Get an array of array of strings [['1', '2', '3'], null, ['7', '8', '9']]
func (client *arrayOperations) GetArrayItemNull(ctx context.Context) (*StringArrayArrayResponse, error) {
	req, err := client.getArrayItemNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getArrayItemNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getArrayItemNullCreateRequest creates the GetArrayItemNull request.
func (client *arrayOperations) getArrayItemNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/array/itemnull"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getArrayItemNullHandleResponse handles the GetArrayItemNull response.
func (client *arrayOperations) getArrayItemNullHandleResponse(resp *azcore.Response) (*StringArrayArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getArrayItemNullHandleError(resp)
	}
	result := StringArrayArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArrayArray)
}

// getArrayItemNullHandleError handles the GetArrayItemNull error response.
func (client *arrayOperations) getArrayItemNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetArrayNull - Get a null array
func (client *arrayOperations) GetArrayNull(ctx context.Context) (*StringArrayArrayResponse, error) {
	req, err := client.getArrayNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getArrayNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getArrayNullCreateRequest creates the GetArrayNull request.
func (client *arrayOperations) getArrayNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/array/null"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getArrayNullHandleResponse handles the GetArrayNull response.
func (client *arrayOperations) getArrayNullHandleResponse(resp *azcore.Response) (*StringArrayArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getArrayNullHandleError(resp)
	}
	result := StringArrayArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArrayArray)
}

// getArrayNullHandleError handles the GetArrayNull error response.
func (client *arrayOperations) getArrayNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetArrayValid - Get an array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
func (client *arrayOperations) GetArrayValid(ctx context.Context) (*StringArrayArrayResponse, error) {
	req, err := client.getArrayValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getArrayValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getArrayValidCreateRequest creates the GetArrayValid request.
func (client *arrayOperations) getArrayValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/array/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getArrayValidHandleResponse handles the GetArrayValid response.
func (client *arrayOperations) getArrayValidHandleResponse(resp *azcore.Response) (*StringArrayArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getArrayValidHandleError(resp)
	}
	result := StringArrayArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArrayArray)
}

// getArrayValidHandleError handles the GetArrayValid error response.
func (client *arrayOperations) getArrayValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetBase64URL - Get array value ['a string that gets encoded with base64url', 'test string' 'Lorem ipsum'] with the items base64url encoded
func (client *arrayOperations) GetBase64URL(ctx context.Context) (*ByteArrayArrayResponse, error) {
	req, err := client.getBase64UrlCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getBase64UrlHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getBase64UrlCreateRequest creates the GetBase64URL request.
func (client *arrayOperations) getBase64UrlCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/base64url/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getBase64UrlHandleResponse handles the GetBase64URL response.
func (client *arrayOperations) getBase64UrlHandleResponse(resp *azcore.Response) (*ByteArrayArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getBase64UrlHandleError(resp)
	}
	result := ByteArrayArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ByteArrayArray)
}

// getBase64UrlHandleError handles the GetBase64URL error response.
func (client *arrayOperations) getBase64UrlHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetBooleanInvalidNull - Get boolean array value [true, null, false]
func (client *arrayOperations) GetBooleanInvalidNull(ctx context.Context) (*BoolArrayResponse, error) {
	req, err := client.getBooleanInvalidNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getBooleanInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getBooleanInvalidNullCreateRequest creates the GetBooleanInvalidNull request.
func (client *arrayOperations) getBooleanInvalidNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/boolean/true.null.false"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getBooleanInvalidNullHandleResponse handles the GetBooleanInvalidNull response.
func (client *arrayOperations) getBooleanInvalidNullHandleResponse(resp *azcore.Response) (*BoolArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getBooleanInvalidNullHandleError(resp)
	}
	result := BoolArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.BoolArray)
}

// getBooleanInvalidNullHandleError handles the GetBooleanInvalidNull error response.
func (client *arrayOperations) getBooleanInvalidNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetBooleanInvalidString - Get boolean array value [true, 'boolean', false]
func (client *arrayOperations) GetBooleanInvalidString(ctx context.Context) (*BoolArrayResponse, error) {
	req, err := client.getBooleanInvalidStringCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getBooleanInvalidStringHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getBooleanInvalidStringCreateRequest creates the GetBooleanInvalidString request.
func (client *arrayOperations) getBooleanInvalidStringCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/boolean/true.boolean.false"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getBooleanInvalidStringHandleResponse handles the GetBooleanInvalidString response.
func (client *arrayOperations) getBooleanInvalidStringHandleResponse(resp *azcore.Response) (*BoolArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getBooleanInvalidStringHandleError(resp)
	}
	result := BoolArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.BoolArray)
}

// getBooleanInvalidStringHandleError handles the GetBooleanInvalidString error response.
func (client *arrayOperations) getBooleanInvalidStringHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetBooleanTfft - Get boolean array value [true, false, false, true]
func (client *arrayOperations) GetBooleanTfft(ctx context.Context) (*BoolArrayResponse, error) {
	req, err := client.getBooleanTfftCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getBooleanTfftHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getBooleanTfftCreateRequest creates the GetBooleanTfft request.
func (client *arrayOperations) getBooleanTfftCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/boolean/tfft"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getBooleanTfftHandleResponse handles the GetBooleanTfft response.
func (client *arrayOperations) getBooleanTfftHandleResponse(resp *azcore.Response) (*BoolArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getBooleanTfftHandleError(resp)
	}
	result := BoolArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.BoolArray)
}

// getBooleanTfftHandleError handles the GetBooleanTfft error response.
func (client *arrayOperations) getBooleanTfftHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetByteInvalidNull - Get byte array value [hex(AB, AC, AD), null] with the first item base64 encoded
func (client *arrayOperations) GetByteInvalidNull(ctx context.Context) (*ByteArrayArrayResponse, error) {
	req, err := client.getByteInvalidNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getByteInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getByteInvalidNullCreateRequest creates the GetByteInvalidNull request.
func (client *arrayOperations) getByteInvalidNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/byte/invalidnull"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getByteInvalidNullHandleResponse handles the GetByteInvalidNull response.
func (client *arrayOperations) getByteInvalidNullHandleResponse(resp *azcore.Response) (*ByteArrayArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getByteInvalidNullHandleError(resp)
	}
	result := ByteArrayArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ByteArrayArray)
}

// getByteInvalidNullHandleError handles the GetByteInvalidNull error response.
func (client *arrayOperations) getByteInvalidNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetByteValid - Get byte array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each item encoded in base64
func (client *arrayOperations) GetByteValid(ctx context.Context) (*ByteArrayArrayResponse, error) {
	req, err := client.getByteValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getByteValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getByteValidCreateRequest creates the GetByteValid request.
func (client *arrayOperations) getByteValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/byte/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getByteValidHandleResponse handles the GetByteValid response.
func (client *arrayOperations) getByteValidHandleResponse(resp *azcore.Response) (*ByteArrayArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getByteValidHandleError(resp)
	}
	result := ByteArrayArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ByteArrayArray)
}

// getByteValidHandleError handles the GetByteValid error response.
func (client *arrayOperations) getByteValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetComplexEmpty - Get empty array of complex type []
func (client *arrayOperations) GetComplexEmpty(ctx context.Context) (*ProductArrayResponse, error) {
	req, err := client.getComplexEmptyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getComplexEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getComplexEmptyCreateRequest creates the GetComplexEmpty request.
func (client *arrayOperations) getComplexEmptyCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/complex/empty"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getComplexEmptyHandleResponse handles the GetComplexEmpty response.
func (client *arrayOperations) getComplexEmptyHandleResponse(resp *azcore.Response) (*ProductArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getComplexEmptyHandleError(resp)
	}
	result := ProductArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ProductArray)
}

// getComplexEmptyHandleError handles the GetComplexEmpty error response.
func (client *arrayOperations) getComplexEmptyHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetComplexItemEmpty - Get array of complex type with empty item [{'integer': 1 'string': '2'}, {}, {'integer': 5, 'string': '6'}]
func (client *arrayOperations) GetComplexItemEmpty(ctx context.Context) (*ProductArrayResponse, error) {
	req, err := client.getComplexItemEmptyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getComplexItemEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getComplexItemEmptyCreateRequest creates the GetComplexItemEmpty request.
func (client *arrayOperations) getComplexItemEmptyCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/complex/itemempty"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getComplexItemEmptyHandleResponse handles the GetComplexItemEmpty response.
func (client *arrayOperations) getComplexItemEmptyHandleResponse(resp *azcore.Response) (*ProductArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getComplexItemEmptyHandleError(resp)
	}
	result := ProductArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ProductArray)
}

// getComplexItemEmptyHandleError handles the GetComplexItemEmpty error response.
func (client *arrayOperations) getComplexItemEmptyHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetComplexItemNull - Get array of complex type with null item [{'integer': 1 'string': '2'}, null, {'integer': 5, 'string': '6'}]
func (client *arrayOperations) GetComplexItemNull(ctx context.Context) (*ProductArrayResponse, error) {
	req, err := client.getComplexItemNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getComplexItemNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getComplexItemNullCreateRequest creates the GetComplexItemNull request.
func (client *arrayOperations) getComplexItemNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/complex/itemnull"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getComplexItemNullHandleResponse handles the GetComplexItemNull response.
func (client *arrayOperations) getComplexItemNullHandleResponse(resp *azcore.Response) (*ProductArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getComplexItemNullHandleError(resp)
	}
	result := ProductArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ProductArray)
}

// getComplexItemNullHandleError handles the GetComplexItemNull error response.
func (client *arrayOperations) getComplexItemNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetComplexNull - Get array of complex type null value
func (client *arrayOperations) GetComplexNull(ctx context.Context) (*ProductArrayResponse, error) {
	req, err := client.getComplexNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getComplexNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getComplexNullCreateRequest creates the GetComplexNull request.
func (client *arrayOperations) getComplexNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/complex/null"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getComplexNullHandleResponse handles the GetComplexNull response.
func (client *arrayOperations) getComplexNullHandleResponse(resp *azcore.Response) (*ProductArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getComplexNullHandleError(resp)
	}
	result := ProductArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ProductArray)
}

// getComplexNullHandleError handles the GetComplexNull error response.
func (client *arrayOperations) getComplexNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetComplexValid - Get array of complex type with [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer': 5, 'string': '6'}]
func (client *arrayOperations) GetComplexValid(ctx context.Context) (*ProductArrayResponse, error) {
	req, err := client.getComplexValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getComplexValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getComplexValidCreateRequest creates the GetComplexValid request.
func (client *arrayOperations) getComplexValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/complex/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getComplexValidHandleResponse handles the GetComplexValid response.
func (client *arrayOperations) getComplexValidHandleResponse(resp *azcore.Response) (*ProductArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getComplexValidHandleError(resp)
	}
	result := ProductArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ProductArray)
}

// getComplexValidHandleError handles the GetComplexValid error response.
func (client *arrayOperations) getComplexValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDateInvalidChars - Get date array value ['2011-03-22', 'date']
func (client *arrayOperations) GetDateInvalidChars(ctx context.Context) (*TimeArrayResponse, error) {
	req, err := client.getDateInvalidCharsCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDateInvalidCharsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDateInvalidCharsCreateRequest creates the GetDateInvalidChars request.
func (client *arrayOperations) getDateInvalidCharsCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/date/invalidchars"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDateInvalidCharsHandleResponse handles the GetDateInvalidChars response.
func (client *arrayOperations) getDateInvalidCharsHandleResponse(resp *azcore.Response) (*TimeArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDateInvalidCharsHandleError(resp)
	}
	result := TimeArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.TimeArray)
}

// getDateInvalidCharsHandleError handles the GetDateInvalidChars error response.
func (client *arrayOperations) getDateInvalidCharsHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDateInvalidNull - Get date array value ['2012-01-01', null, '1776-07-04']
func (client *arrayOperations) GetDateInvalidNull(ctx context.Context) (*TimeArrayResponse, error) {
	req, err := client.getDateInvalidNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDateInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDateInvalidNullCreateRequest creates the GetDateInvalidNull request.
func (client *arrayOperations) getDateInvalidNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/date/invalidnull"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDateInvalidNullHandleResponse handles the GetDateInvalidNull response.
func (client *arrayOperations) getDateInvalidNullHandleResponse(resp *azcore.Response) (*TimeArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDateInvalidNullHandleError(resp)
	}
	result := TimeArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.TimeArray)
}

// getDateInvalidNullHandleError handles the GetDateInvalidNull error response.
func (client *arrayOperations) getDateInvalidNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDateTimeInvalidChars - Get date array value ['2000-12-01t00:00:01z', 'date-time']
func (client *arrayOperations) GetDateTimeInvalidChars(ctx context.Context) (*TimeArrayResponse, error) {
	req, err := client.getDateTimeInvalidCharsCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDateTimeInvalidCharsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDateTimeInvalidCharsCreateRequest creates the GetDateTimeInvalidChars request.
func (client *arrayOperations) getDateTimeInvalidCharsCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/date-time/invalidchars"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDateTimeInvalidCharsHandleResponse handles the GetDateTimeInvalidChars response.
func (client *arrayOperations) getDateTimeInvalidCharsHandleResponse(resp *azcore.Response) (*TimeArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDateTimeInvalidCharsHandleError(resp)
	}
	var aux *[]timeRFC3339
	if err := resp.UnmarshalAsJSON(&aux); err != nil {
		return nil, err
	}
	cp := make([]time.Time, len(*aux), len(*aux))
	for i := 0; i < len(*aux); i++ {
		cp[i] = time.Time((*aux)[i])
	}
	return &TimeArrayResponse{RawResponse: resp.Response, TimeArray: &cp}, nil
}

// getDateTimeInvalidCharsHandleError handles the GetDateTimeInvalidChars error response.
func (client *arrayOperations) getDateTimeInvalidCharsHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDateTimeInvalidNull - Get date array value ['2000-12-01t00:00:01z', null]
func (client *arrayOperations) GetDateTimeInvalidNull(ctx context.Context) (*TimeArrayResponse, error) {
	req, err := client.getDateTimeInvalidNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDateTimeInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDateTimeInvalidNullCreateRequest creates the GetDateTimeInvalidNull request.
func (client *arrayOperations) getDateTimeInvalidNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/date-time/invalidnull"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDateTimeInvalidNullHandleResponse handles the GetDateTimeInvalidNull response.
func (client *arrayOperations) getDateTimeInvalidNullHandleResponse(resp *azcore.Response) (*TimeArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDateTimeInvalidNullHandleError(resp)
	}
	var aux *[]timeRFC3339
	if err := resp.UnmarshalAsJSON(&aux); err != nil {
		return nil, err
	}
	cp := make([]time.Time, len(*aux), len(*aux))
	for i := 0; i < len(*aux); i++ {
		cp[i] = time.Time((*aux)[i])
	}
	return &TimeArrayResponse{RawResponse: resp.Response, TimeArray: &cp}, nil
}

// getDateTimeInvalidNullHandleError handles the GetDateTimeInvalidNull error response.
func (client *arrayOperations) getDateTimeInvalidNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDateTimeRFC1123Valid - Get date-time array value ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct 1492 10:15:01 GMT']
func (client *arrayOperations) GetDateTimeRFC1123Valid(ctx context.Context) (*TimeArrayResponse, error) {
	req, err := client.getDateTimeRfc1123ValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDateTimeRfc1123ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDateTimeRfc1123ValidCreateRequest creates the GetDateTimeRFC1123Valid request.
func (client *arrayOperations) getDateTimeRfc1123ValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/date-time-rfc1123/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDateTimeRfc1123ValidHandleResponse handles the GetDateTimeRFC1123Valid response.
func (client *arrayOperations) getDateTimeRfc1123ValidHandleResponse(resp *azcore.Response) (*TimeArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDateTimeRfc1123ValidHandleError(resp)
	}
	var aux *[]timeRFC1123
	if err := resp.UnmarshalAsJSON(&aux); err != nil {
		return nil, err
	}
	cp := make([]time.Time, len(*aux), len(*aux))
	for i := 0; i < len(*aux); i++ {
		cp[i] = time.Time((*aux)[i])
	}
	return &TimeArrayResponse{RawResponse: resp.Response, TimeArray: &cp}, nil
}

// getDateTimeRfc1123ValidHandleError handles the GetDateTimeRFC1123Valid error response.
func (client *arrayOperations) getDateTimeRfc1123ValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDateTimeValid - Get date-time array value ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00']
func (client *arrayOperations) GetDateTimeValid(ctx context.Context) (*TimeArrayResponse, error) {
	req, err := client.getDateTimeValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDateTimeValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDateTimeValidCreateRequest creates the GetDateTimeValid request.
func (client *arrayOperations) getDateTimeValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/date-time/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDateTimeValidHandleResponse handles the GetDateTimeValid response.
func (client *arrayOperations) getDateTimeValidHandleResponse(resp *azcore.Response) (*TimeArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDateTimeValidHandleError(resp)
	}
	var aux *[]timeRFC3339
	if err := resp.UnmarshalAsJSON(&aux); err != nil {
		return nil, err
	}
	cp := make([]time.Time, len(*aux), len(*aux))
	for i := 0; i < len(*aux); i++ {
		cp[i] = time.Time((*aux)[i])
	}
	return &TimeArrayResponse{RawResponse: resp.Response, TimeArray: &cp}, nil
}

// getDateTimeValidHandleError handles the GetDateTimeValid error response.
func (client *arrayOperations) getDateTimeValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDateValid - Get integer array value ['2000-12-01', '1980-01-02', '1492-10-12']
func (client *arrayOperations) GetDateValid(ctx context.Context) (*TimeArrayResponse, error) {
	req, err := client.getDateValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDateValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDateValidCreateRequest creates the GetDateValid request.
func (client *arrayOperations) getDateValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/date/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDateValidHandleResponse handles the GetDateValid response.
func (client *arrayOperations) getDateValidHandleResponse(resp *azcore.Response) (*TimeArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDateValidHandleError(resp)
	}
	result := TimeArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.TimeArray)
}

// getDateValidHandleError handles the GetDateValid error response.
func (client *arrayOperations) getDateValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDictionaryEmpty - Get an array of Dictionaries of type <string, string> with value []
func (client *arrayOperations) GetDictionaryEmpty(ctx context.Context) (*MapOfStringArrayResponse, error) {
	req, err := client.getDictionaryEmptyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDictionaryEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDictionaryEmptyCreateRequest creates the GetDictionaryEmpty request.
func (client *arrayOperations) getDictionaryEmptyCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/dictionary/empty"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDictionaryEmptyHandleResponse handles the GetDictionaryEmpty response.
func (client *arrayOperations) getDictionaryEmptyHandleResponse(resp *azcore.Response) (*MapOfStringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDictionaryEmptyHandleError(resp)
	}
	result := MapOfStringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MapOfStringArray)
}

// getDictionaryEmptyHandleError handles the GetDictionaryEmpty error response.
func (client *arrayOperations) getDictionaryEmptyHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDictionaryItemEmpty - Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3': 'three'}, {}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
func (client *arrayOperations) GetDictionaryItemEmpty(ctx context.Context) (*MapOfStringArrayResponse, error) {
	req, err := client.getDictionaryItemEmptyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDictionaryItemEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDictionaryItemEmptyCreateRequest creates the GetDictionaryItemEmpty request.
func (client *arrayOperations) getDictionaryItemEmptyCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/dictionary/itemempty"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDictionaryItemEmptyHandleResponse handles the GetDictionaryItemEmpty response.
func (client *arrayOperations) getDictionaryItemEmptyHandleResponse(resp *azcore.Response) (*MapOfStringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDictionaryItemEmptyHandleError(resp)
	}
	result := MapOfStringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MapOfStringArray)
}

// getDictionaryItemEmptyHandleError handles the GetDictionaryItemEmpty error response.
func (client *arrayOperations) getDictionaryItemEmptyHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDictionaryItemNull - Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3': 'three'}, null, {'7': 'seven', '8': 'eight', '9': 'nine'}]
func (client *arrayOperations) GetDictionaryItemNull(ctx context.Context) (*MapOfStringArrayResponse, error) {
	req, err := client.getDictionaryItemNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDictionaryItemNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDictionaryItemNullCreateRequest creates the GetDictionaryItemNull request.
func (client *arrayOperations) getDictionaryItemNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/dictionary/itemnull"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDictionaryItemNullHandleResponse handles the GetDictionaryItemNull response.
func (client *arrayOperations) getDictionaryItemNullHandleResponse(resp *azcore.Response) (*MapOfStringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDictionaryItemNullHandleError(resp)
	}
	result := MapOfStringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MapOfStringArray)
}

// getDictionaryItemNullHandleError handles the GetDictionaryItemNull error response.
func (client *arrayOperations) getDictionaryItemNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDictionaryNull - Get an array of Dictionaries with value null
func (client *arrayOperations) GetDictionaryNull(ctx context.Context) (*MapOfStringArrayResponse, error) {
	req, err := client.getDictionaryNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDictionaryNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDictionaryNullCreateRequest creates the GetDictionaryNull request.
func (client *arrayOperations) getDictionaryNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/dictionary/null"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDictionaryNullHandleResponse handles the GetDictionaryNull response.
func (client *arrayOperations) getDictionaryNullHandleResponse(resp *azcore.Response) (*MapOfStringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDictionaryNullHandleError(resp)
	}
	result := MapOfStringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MapOfStringArray)
}

// getDictionaryNullHandleError handles the GetDictionaryNull error response.
func (client *arrayOperations) getDictionaryNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDictionaryValid - Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
func (client *arrayOperations) GetDictionaryValid(ctx context.Context) (*MapOfStringArrayResponse, error) {
	req, err := client.getDictionaryValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDictionaryValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDictionaryValidCreateRequest creates the GetDictionaryValid request.
func (client *arrayOperations) getDictionaryValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/dictionary/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDictionaryValidHandleResponse handles the GetDictionaryValid response.
func (client *arrayOperations) getDictionaryValidHandleResponse(resp *azcore.Response) (*MapOfStringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDictionaryValidHandleError(resp)
	}
	result := MapOfStringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MapOfStringArray)
}

// getDictionaryValidHandleError handles the GetDictionaryValid error response.
func (client *arrayOperations) getDictionaryValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDoubleInvalidNull - Get float array value [0.0, null, -1.2e20]
func (client *arrayOperations) GetDoubleInvalidNull(ctx context.Context) (*Float64ArrayResponse, error) {
	req, err := client.getDoubleInvalidNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDoubleInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDoubleInvalidNullCreateRequest creates the GetDoubleInvalidNull request.
func (client *arrayOperations) getDoubleInvalidNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/double/0.0-null-1.2e20"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDoubleInvalidNullHandleResponse handles the GetDoubleInvalidNull response.
func (client *arrayOperations) getDoubleInvalidNullHandleResponse(resp *azcore.Response) (*Float64ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDoubleInvalidNullHandleError(resp)
	}
	result := Float64ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Float64Array)
}

// getDoubleInvalidNullHandleError handles the GetDoubleInvalidNull error response.
func (client *arrayOperations) getDoubleInvalidNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDoubleInvalidString - Get boolean array value [1.0, 'number', 0.0]
func (client *arrayOperations) GetDoubleInvalidString(ctx context.Context) (*Float64ArrayResponse, error) {
	req, err := client.getDoubleInvalidStringCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDoubleInvalidStringHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDoubleInvalidStringCreateRequest creates the GetDoubleInvalidString request.
func (client *arrayOperations) getDoubleInvalidStringCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/double/1.number.0"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDoubleInvalidStringHandleResponse handles the GetDoubleInvalidString response.
func (client *arrayOperations) getDoubleInvalidStringHandleResponse(resp *azcore.Response) (*Float64ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDoubleInvalidStringHandleError(resp)
	}
	result := Float64ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Float64Array)
}

// getDoubleInvalidStringHandleError handles the GetDoubleInvalidString error response.
func (client *arrayOperations) getDoubleInvalidStringHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDoubleValid - Get float array value [0, -0.01, 1.2e20]
func (client *arrayOperations) GetDoubleValid(ctx context.Context) (*Float64ArrayResponse, error) {
	req, err := client.getDoubleValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDoubleValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDoubleValidCreateRequest creates the GetDoubleValid request.
func (client *arrayOperations) getDoubleValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/double/0--0.01-1.2e20"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDoubleValidHandleResponse handles the GetDoubleValid response.
func (client *arrayOperations) getDoubleValidHandleResponse(resp *azcore.Response) (*Float64ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDoubleValidHandleError(resp)
	}
	result := Float64ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Float64Array)
}

// getDoubleValidHandleError handles the GetDoubleValid error response.
func (client *arrayOperations) getDoubleValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDurationValid - Get duration array value ['P123DT22H14M12.011S', 'P5DT1H0M0S']
func (client *arrayOperations) GetDurationValid(ctx context.Context) (*DurationArrayResponse, error) {
	req, err := client.getDurationValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDurationValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDurationValidCreateRequest creates the GetDurationValid request.
func (client *arrayOperations) getDurationValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/duration/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDurationValidHandleResponse handles the GetDurationValid response.
func (client *arrayOperations) getDurationValidHandleResponse(resp *azcore.Response) (*DurationArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDurationValidHandleError(resp)
	}
	result := DurationArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.DurationArray)
}

// getDurationValidHandleError handles the GetDurationValid error response.
func (client *arrayOperations) getDurationValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetEmpty - Get empty array value []
func (client *arrayOperations) GetEmpty(ctx context.Context) (*Int32ArrayResponse, error) {
	req, err := client.getEmptyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getEmptyCreateRequest creates the GetEmpty request.
func (client *arrayOperations) getEmptyCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/empty"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getEmptyHandleResponse handles the GetEmpty response.
func (client *arrayOperations) getEmptyHandleResponse(resp *azcore.Response) (*Int32ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getEmptyHandleError(resp)
	}
	result := Int32ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Int32Array)
}

// getEmptyHandleError handles the GetEmpty error response.
func (client *arrayOperations) getEmptyHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetEnumValid - Get enum array value ['foo1', 'foo2', 'foo3']
func (client *arrayOperations) GetEnumValid(ctx context.Context) (*FooEnumArrayResponse, error) {
	req, err := client.getEnumValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getEnumValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getEnumValidCreateRequest creates the GetEnumValid request.
func (client *arrayOperations) getEnumValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/enum/foo1.foo2.foo3"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getEnumValidHandleResponse handles the GetEnumValid response.
func (client *arrayOperations) getEnumValidHandleResponse(resp *azcore.Response) (*FooEnumArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getEnumValidHandleError(resp)
	}
	result := FooEnumArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.FooEnumArray)
}

// getEnumValidHandleError handles the GetEnumValid error response.
func (client *arrayOperations) getEnumValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetFloatInvalidNull - Get float array value [0.0, null, -1.2e20]
func (client *arrayOperations) GetFloatInvalidNull(ctx context.Context) (*Float32ArrayResponse, error) {
	req, err := client.getFloatInvalidNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getFloatInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getFloatInvalidNullCreateRequest creates the GetFloatInvalidNull request.
func (client *arrayOperations) getFloatInvalidNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/float/0.0-null-1.2e20"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getFloatInvalidNullHandleResponse handles the GetFloatInvalidNull response.
func (client *arrayOperations) getFloatInvalidNullHandleResponse(resp *azcore.Response) (*Float32ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getFloatInvalidNullHandleError(resp)
	}
	result := Float32ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Float32Array)
}

// getFloatInvalidNullHandleError handles the GetFloatInvalidNull error response.
func (client *arrayOperations) getFloatInvalidNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetFloatInvalidString - Get boolean array value [1.0, 'number', 0.0]
func (client *arrayOperations) GetFloatInvalidString(ctx context.Context) (*Float32ArrayResponse, error) {
	req, err := client.getFloatInvalidStringCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getFloatInvalidStringHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getFloatInvalidStringCreateRequest creates the GetFloatInvalidString request.
func (client *arrayOperations) getFloatInvalidStringCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/float/1.number.0"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getFloatInvalidStringHandleResponse handles the GetFloatInvalidString response.
func (client *arrayOperations) getFloatInvalidStringHandleResponse(resp *azcore.Response) (*Float32ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getFloatInvalidStringHandleError(resp)
	}
	result := Float32ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Float32Array)
}

// getFloatInvalidStringHandleError handles the GetFloatInvalidString error response.
func (client *arrayOperations) getFloatInvalidStringHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetFloatValid - Get float array value [0, -0.01, 1.2e20]
func (client *arrayOperations) GetFloatValid(ctx context.Context) (*Float32ArrayResponse, error) {
	req, err := client.getFloatValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getFloatValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getFloatValidCreateRequest creates the GetFloatValid request.
func (client *arrayOperations) getFloatValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/float/0--0.01-1.2e20"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getFloatValidHandleResponse handles the GetFloatValid response.
func (client *arrayOperations) getFloatValidHandleResponse(resp *azcore.Response) (*Float32ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getFloatValidHandleError(resp)
	}
	result := Float32ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Float32Array)
}

// getFloatValidHandleError handles the GetFloatValid error response.
func (client *arrayOperations) getFloatValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetIntInvalidNull - Get integer array value [1, null, 0]
func (client *arrayOperations) GetIntInvalidNull(ctx context.Context) (*Int32ArrayResponse, error) {
	req, err := client.getIntInvalidNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getIntInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getIntInvalidNullCreateRequest creates the GetIntInvalidNull request.
func (client *arrayOperations) getIntInvalidNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/integer/1.null.zero"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getIntInvalidNullHandleResponse handles the GetIntInvalidNull response.
func (client *arrayOperations) getIntInvalidNullHandleResponse(resp *azcore.Response) (*Int32ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getIntInvalidNullHandleError(resp)
	}
	result := Int32ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Int32Array)
}

// getIntInvalidNullHandleError handles the GetIntInvalidNull error response.
func (client *arrayOperations) getIntInvalidNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetIntInvalidString - Get integer array value [1, 'integer', 0]
func (client *arrayOperations) GetIntInvalidString(ctx context.Context) (*Int32ArrayResponse, error) {
	req, err := client.getIntInvalidStringCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getIntInvalidStringHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getIntInvalidStringCreateRequest creates the GetIntInvalidString request.
func (client *arrayOperations) getIntInvalidStringCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/integer/1.integer.0"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getIntInvalidStringHandleResponse handles the GetIntInvalidString response.
func (client *arrayOperations) getIntInvalidStringHandleResponse(resp *azcore.Response) (*Int32ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getIntInvalidStringHandleError(resp)
	}
	result := Int32ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Int32Array)
}

// getIntInvalidStringHandleError handles the GetIntInvalidString error response.
func (client *arrayOperations) getIntInvalidStringHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetIntegerValid - Get integer array value [1, -1, 3, 300]
func (client *arrayOperations) GetIntegerValid(ctx context.Context) (*Int32ArrayResponse, error) {
	req, err := client.getIntegerValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getIntegerValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getIntegerValidCreateRequest creates the GetIntegerValid request.
func (client *arrayOperations) getIntegerValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/integer/1.-1.3.300"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getIntegerValidHandleResponse handles the GetIntegerValid response.
func (client *arrayOperations) getIntegerValidHandleResponse(resp *azcore.Response) (*Int32ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getIntegerValidHandleError(resp)
	}
	result := Int32ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Int32Array)
}

// getIntegerValidHandleError handles the GetIntegerValid error response.
func (client *arrayOperations) getIntegerValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetInvalid - Get invalid array [1, 2, 3
func (client *arrayOperations) GetInvalid(ctx context.Context) (*Int32ArrayResponse, error) {
	req, err := client.getInvalidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getInvalidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getInvalidCreateRequest creates the GetInvalid request.
func (client *arrayOperations) getInvalidCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/invalid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getInvalidHandleResponse handles the GetInvalid response.
func (client *arrayOperations) getInvalidHandleResponse(resp *azcore.Response) (*Int32ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getInvalidHandleError(resp)
	}
	result := Int32ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Int32Array)
}

// getInvalidHandleError handles the GetInvalid error response.
func (client *arrayOperations) getInvalidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetLongInvalidNull - Get long array value [1, null, 0]
func (client *arrayOperations) GetLongInvalidNull(ctx context.Context) (*Int64ArrayResponse, error) {
	req, err := client.getLongInvalidNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getLongInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getLongInvalidNullCreateRequest creates the GetLongInvalidNull request.
func (client *arrayOperations) getLongInvalidNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/long/1.null.zero"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getLongInvalidNullHandleResponse handles the GetLongInvalidNull response.
func (client *arrayOperations) getLongInvalidNullHandleResponse(resp *azcore.Response) (*Int64ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getLongInvalidNullHandleError(resp)
	}
	result := Int64ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Int64Array)
}

// getLongInvalidNullHandleError handles the GetLongInvalidNull error response.
func (client *arrayOperations) getLongInvalidNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetLongInvalidString - Get long array value [1, 'integer', 0]
func (client *arrayOperations) GetLongInvalidString(ctx context.Context) (*Int64ArrayResponse, error) {
	req, err := client.getLongInvalidStringCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getLongInvalidStringHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getLongInvalidStringCreateRequest creates the GetLongInvalidString request.
func (client *arrayOperations) getLongInvalidStringCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/long/1.integer.0"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getLongInvalidStringHandleResponse handles the GetLongInvalidString response.
func (client *arrayOperations) getLongInvalidStringHandleResponse(resp *azcore.Response) (*Int64ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getLongInvalidStringHandleError(resp)
	}
	result := Int64ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Int64Array)
}

// getLongInvalidStringHandleError handles the GetLongInvalidString error response.
func (client *arrayOperations) getLongInvalidStringHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetLongValid - Get integer array value [1, -1, 3, 300]
func (client *arrayOperations) GetLongValid(ctx context.Context) (*Int64ArrayResponse, error) {
	req, err := client.getLongValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getLongValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getLongValidCreateRequest creates the GetLongValid request.
func (client *arrayOperations) getLongValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/long/1.-1.3.300"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getLongValidHandleResponse handles the GetLongValid response.
func (client *arrayOperations) getLongValidHandleResponse(resp *azcore.Response) (*Int64ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getLongValidHandleError(resp)
	}
	result := Int64ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Int64Array)
}

// getLongValidHandleError handles the GetLongValid error response.
func (client *arrayOperations) getLongValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetNull - Get null array value
func (client *arrayOperations) GetNull(ctx context.Context) (*Int32ArrayResponse, error) {
	req, err := client.getNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getNullCreateRequest creates the GetNull request.
func (client *arrayOperations) getNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/null"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getNullHandleResponse handles the GetNull response.
func (client *arrayOperations) getNullHandleResponse(resp *azcore.Response) (*Int32ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getNullHandleError(resp)
	}
	result := Int32ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Int32Array)
}

// getNullHandleError handles the GetNull error response.
func (client *arrayOperations) getNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetStringEnumValid - Get enum array value ['foo1', 'foo2', 'foo3']
func (client *arrayOperations) GetStringEnumValid(ctx context.Context) (*Enum0ArrayResponse, error) {
	req, err := client.getStringEnumValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getStringEnumValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getStringEnumValidCreateRequest creates the GetStringEnumValid request.
func (client *arrayOperations) getStringEnumValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/string-enum/foo1.foo2.foo3"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getStringEnumValidHandleResponse handles the GetStringEnumValid response.
func (client *arrayOperations) getStringEnumValidHandleResponse(resp *azcore.Response) (*Enum0ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getStringEnumValidHandleError(resp)
	}
	result := Enum0ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Enum0Array)
}

// getStringEnumValidHandleError handles the GetStringEnumValid error response.
func (client *arrayOperations) getStringEnumValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetStringValid - Get string array value ['foo1', 'foo2', 'foo3']
func (client *arrayOperations) GetStringValid(ctx context.Context) (*StringArrayResponse, error) {
	req, err := client.getStringValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getStringValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getStringValidCreateRequest creates the GetStringValid request.
func (client *arrayOperations) getStringValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/string/foo1.foo2.foo3"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getStringValidHandleResponse handles the GetStringValid response.
func (client *arrayOperations) getStringValidHandleResponse(resp *azcore.Response) (*StringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getStringValidHandleError(resp)
	}
	result := StringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArray)
}

// getStringValidHandleError handles the GetStringValid error response.
func (client *arrayOperations) getStringValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetStringWithInvalid - Get string array value ['foo', 123, 'foo2']
func (client *arrayOperations) GetStringWithInvalid(ctx context.Context) (*StringArrayResponse, error) {
	req, err := client.getStringWithInvalidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getStringWithInvalidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getStringWithInvalidCreateRequest creates the GetStringWithInvalid request.
func (client *arrayOperations) getStringWithInvalidCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/string/foo.123.foo2"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getStringWithInvalidHandleResponse handles the GetStringWithInvalid response.
func (client *arrayOperations) getStringWithInvalidHandleResponse(resp *azcore.Response) (*StringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getStringWithInvalidHandleError(resp)
	}
	result := StringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArray)
}

// getStringWithInvalidHandleError handles the GetStringWithInvalid error response.
func (client *arrayOperations) getStringWithInvalidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetStringWithNull - Get string array value ['foo', null, 'foo2']
func (client *arrayOperations) GetStringWithNull(ctx context.Context) (*StringArrayResponse, error) {
	req, err := client.getStringWithNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getStringWithNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getStringWithNullCreateRequest creates the GetStringWithNull request.
func (client *arrayOperations) getStringWithNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/string/foo.null.foo2"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getStringWithNullHandleResponse handles the GetStringWithNull response.
func (client *arrayOperations) getStringWithNullHandleResponse(resp *azcore.Response) (*StringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getStringWithNullHandleError(resp)
	}
	result := StringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArray)
}

// getStringWithNullHandleError handles the GetStringWithNull error response.
func (client *arrayOperations) getStringWithNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetUUIDInvalidChars - Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'foo']
func (client *arrayOperations) GetUUIDInvalidChars(ctx context.Context) (*StringArrayResponse, error) {
	req, err := client.getUuidInvalidCharsCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getUuidInvalidCharsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getUuidInvalidCharsCreateRequest creates the GetUUIDInvalidChars request.
func (client *arrayOperations) getUuidInvalidCharsCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/uuid/invalidchars"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getUuidInvalidCharsHandleResponse handles the GetUUIDInvalidChars response.
func (client *arrayOperations) getUuidInvalidCharsHandleResponse(resp *azcore.Response) (*StringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getUuidInvalidCharsHandleError(resp)
	}
	result := StringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArray)
}

// getUuidInvalidCharsHandleError handles the GetUUIDInvalidChars error response.
func (client *arrayOperations) getUuidInvalidCharsHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetUUIDValid - Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
func (client *arrayOperations) GetUUIDValid(ctx context.Context) (*StringArrayResponse, error) {
	req, err := client.getUuidValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getUuidValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getUuidValidCreateRequest creates the GetUUIDValid request.
func (client *arrayOperations) getUuidValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/array/prim/uuid/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getUuidValidHandleResponse handles the GetUUIDValid response.
func (client *arrayOperations) getUuidValidHandleResponse(resp *azcore.Response) (*StringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getUuidValidHandleError(resp)
	}
	result := StringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArray)
}

// getUuidValidHandleError handles the GetUUIDValid error response.
func (client *arrayOperations) getUuidValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutArrayValid - Put An array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
func (client *arrayOperations) PutArrayValid(ctx context.Context, arrayBody [][]string) (*http.Response, error) {
	req, err := client.putArrayValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putArrayValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putArrayValidCreateRequest creates the PutArrayValid request.
func (client *arrayOperations) putArrayValidCreateRequest(arrayBody [][]string) (*azcore.Request, error) {
	urlPath := "/array/array/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putArrayValidHandleResponse handles the PutArrayValid response.
func (client *arrayOperations) putArrayValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putArrayValidHandleError(resp)
	}
	return resp.Response, nil
}

// putArrayValidHandleError handles the PutArrayValid error response.
func (client *arrayOperations) putArrayValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutBooleanTfft - Set array value empty [true, false, false, true]
func (client *arrayOperations) PutBooleanTfft(ctx context.Context, arrayBody []bool) (*http.Response, error) {
	req, err := client.putBooleanTfftCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putBooleanTfftHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putBooleanTfftCreateRequest creates the PutBooleanTfft request.
func (client *arrayOperations) putBooleanTfftCreateRequest(arrayBody []bool) (*azcore.Request, error) {
	urlPath := "/array/prim/boolean/tfft"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putBooleanTfftHandleResponse handles the PutBooleanTfft response.
func (client *arrayOperations) putBooleanTfftHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putBooleanTfftHandleError(resp)
	}
	return resp.Response, nil
}

// putBooleanTfftHandleError handles the PutBooleanTfft error response.
func (client *arrayOperations) putBooleanTfftHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutByteValid - Put the array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each elementencoded in base 64
func (client *arrayOperations) PutByteValid(ctx context.Context, arrayBody [][]byte) (*http.Response, error) {
	req, err := client.putByteValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putByteValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putByteValidCreateRequest creates the PutByteValid request.
func (client *arrayOperations) putByteValidCreateRequest(arrayBody [][]byte) (*azcore.Request, error) {
	urlPath := "/array/prim/byte/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putByteValidHandleResponse handles the PutByteValid response.
func (client *arrayOperations) putByteValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putByteValidHandleError(resp)
	}
	return resp.Response, nil
}

// putByteValidHandleError handles the PutByteValid error response.
func (client *arrayOperations) putByteValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutComplexValid - Put an array of complex type with values [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer': 5, 'string': '6'}]
func (client *arrayOperations) PutComplexValid(ctx context.Context, arrayBody []Product) (*http.Response, error) {
	req, err := client.putComplexValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putComplexValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putComplexValidCreateRequest creates the PutComplexValid request.
func (client *arrayOperations) putComplexValidCreateRequest(arrayBody []Product) (*azcore.Request, error) {
	urlPath := "/array/complex/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putComplexValidHandleResponse handles the PutComplexValid response.
func (client *arrayOperations) putComplexValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putComplexValidHandleError(resp)
	}
	return resp.Response, nil
}

// putComplexValidHandleError handles the PutComplexValid error response.
func (client *arrayOperations) putComplexValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutDateTimeRFC1123Valid - Set array value  ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct 1492 10:15:01 GMT']
func (client *arrayOperations) PutDateTimeRFC1123Valid(ctx context.Context, arrayBody []time.Time) (*http.Response, error) {
	req, err := client.putDateTimeRfc1123ValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putDateTimeRfc1123ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putDateTimeRfc1123ValidCreateRequest creates the PutDateTimeRFC1123Valid request.
func (client *arrayOperations) putDateTimeRfc1123ValidCreateRequest(arrayBody []time.Time) (*azcore.Request, error) {
	urlPath := "/array/prim/date-time-rfc1123/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	aux := make([]timeRFC1123, len(arrayBody), len(arrayBody))
	for i := 0; i < len(arrayBody); i++ {
		aux[i] = timeRFC1123(arrayBody[i])
	}
	return req, req.MarshalAsJSON(aux)
}

// putDateTimeRfc1123ValidHandleResponse handles the PutDateTimeRFC1123Valid response.
func (client *arrayOperations) putDateTimeRfc1123ValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putDateTimeRfc1123ValidHandleError(resp)
	}
	return resp.Response, nil
}

// putDateTimeRfc1123ValidHandleError handles the PutDateTimeRFC1123Valid error response.
func (client *arrayOperations) putDateTimeRfc1123ValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutDateTimeValid - Set array value  ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00']
func (client *arrayOperations) PutDateTimeValid(ctx context.Context, arrayBody []time.Time) (*http.Response, error) {
	req, err := client.putDateTimeValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putDateTimeValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putDateTimeValidCreateRequest creates the PutDateTimeValid request.
func (client *arrayOperations) putDateTimeValidCreateRequest(arrayBody []time.Time) (*azcore.Request, error) {
	urlPath := "/array/prim/date-time/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putDateTimeValidHandleResponse handles the PutDateTimeValid response.
func (client *arrayOperations) putDateTimeValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putDateTimeValidHandleError(resp)
	}
	return resp.Response, nil
}

// putDateTimeValidHandleError handles the PutDateTimeValid error response.
func (client *arrayOperations) putDateTimeValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutDateValid - Set array value  ['2000-12-01', '1980-01-02', '1492-10-12']
func (client *arrayOperations) PutDateValid(ctx context.Context, arrayBody []time.Time) (*http.Response, error) {
	req, err := client.putDateValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putDateValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putDateValidCreateRequest creates the PutDateValid request.
func (client *arrayOperations) putDateValidCreateRequest(arrayBody []time.Time) (*azcore.Request, error) {
	urlPath := "/array/prim/date/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putDateValidHandleResponse handles the PutDateValid response.
func (client *arrayOperations) putDateValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putDateValidHandleError(resp)
	}
	return resp.Response, nil
}

// putDateValidHandleError handles the PutDateValid error response.
func (client *arrayOperations) putDateValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutDictionaryValid - Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
func (client *arrayOperations) PutDictionaryValid(ctx context.Context, arrayBody []map[string]string) (*http.Response, error) {
	req, err := client.putDictionaryValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putDictionaryValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putDictionaryValidCreateRequest creates the PutDictionaryValid request.
func (client *arrayOperations) putDictionaryValidCreateRequest(arrayBody []map[string]string) (*azcore.Request, error) {
	urlPath := "/array/dictionary/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putDictionaryValidHandleResponse handles the PutDictionaryValid response.
func (client *arrayOperations) putDictionaryValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putDictionaryValidHandleError(resp)
	}
	return resp.Response, nil
}

// putDictionaryValidHandleError handles the PutDictionaryValid error response.
func (client *arrayOperations) putDictionaryValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutDoubleValid - Set array value [0, -0.01, 1.2e20]
func (client *arrayOperations) PutDoubleValid(ctx context.Context, arrayBody []float64) (*http.Response, error) {
	req, err := client.putDoubleValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putDoubleValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putDoubleValidCreateRequest creates the PutDoubleValid request.
func (client *arrayOperations) putDoubleValidCreateRequest(arrayBody []float64) (*azcore.Request, error) {
	urlPath := "/array/prim/double/0--0.01-1.2e20"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putDoubleValidHandleResponse handles the PutDoubleValid response.
func (client *arrayOperations) putDoubleValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putDoubleValidHandleError(resp)
	}
	return resp.Response, nil
}

// putDoubleValidHandleError handles the PutDoubleValid error response.
func (client *arrayOperations) putDoubleValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutDurationValid - Set array value  ['P123DT22H14M12.011S', 'P5DT1H0M0S']
func (client *arrayOperations) PutDurationValid(ctx context.Context, arrayBody []time.Duration) (*http.Response, error) {
	req, err := client.putDurationValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putDurationValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putDurationValidCreateRequest creates the PutDurationValid request.
func (client *arrayOperations) putDurationValidCreateRequest(arrayBody []time.Duration) (*azcore.Request, error) {
	urlPath := "/array/prim/duration/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putDurationValidHandleResponse handles the PutDurationValid response.
func (client *arrayOperations) putDurationValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putDurationValidHandleError(resp)
	}
	return resp.Response, nil
}

// putDurationValidHandleError handles the PutDurationValid error response.
func (client *arrayOperations) putDurationValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutEmpty - Set array value empty []
func (client *arrayOperations) PutEmpty(ctx context.Context, arrayBody []string) (*http.Response, error) {
	req, err := client.putEmptyCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putEmptyCreateRequest creates the PutEmpty request.
func (client *arrayOperations) putEmptyCreateRequest(arrayBody []string) (*azcore.Request, error) {
	urlPath := "/array/empty"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putEmptyHandleResponse handles the PutEmpty response.
func (client *arrayOperations) putEmptyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putEmptyHandleError(resp)
	}
	return resp.Response, nil
}

// putEmptyHandleError handles the PutEmpty error response.
func (client *arrayOperations) putEmptyHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutEnumValid - Set array value ['foo1', 'foo2', 'foo3']
func (client *arrayOperations) PutEnumValid(ctx context.Context, arrayBody []FooEnum) (*http.Response, error) {
	req, err := client.putEnumValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putEnumValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putEnumValidCreateRequest creates the PutEnumValid request.
func (client *arrayOperations) putEnumValidCreateRequest(arrayBody []FooEnum) (*azcore.Request, error) {
	urlPath := "/array/prim/enum/foo1.foo2.foo3"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putEnumValidHandleResponse handles the PutEnumValid response.
func (client *arrayOperations) putEnumValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putEnumValidHandleError(resp)
	}
	return resp.Response, nil
}

// putEnumValidHandleError handles the PutEnumValid error response.
func (client *arrayOperations) putEnumValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutFloatValid - Set array value [0, -0.01, 1.2e20]
func (client *arrayOperations) PutFloatValid(ctx context.Context, arrayBody []float32) (*http.Response, error) {
	req, err := client.putFloatValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putFloatValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putFloatValidCreateRequest creates the PutFloatValid request.
func (client *arrayOperations) putFloatValidCreateRequest(arrayBody []float32) (*azcore.Request, error) {
	urlPath := "/array/prim/float/0--0.01-1.2e20"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putFloatValidHandleResponse handles the PutFloatValid response.
func (client *arrayOperations) putFloatValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putFloatValidHandleError(resp)
	}
	return resp.Response, nil
}

// putFloatValidHandleError handles the PutFloatValid error response.
func (client *arrayOperations) putFloatValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutIntegerValid - Set array value empty [1, -1, 3, 300]
func (client *arrayOperations) PutIntegerValid(ctx context.Context, arrayBody []int32) (*http.Response, error) {
	req, err := client.putIntegerValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putIntegerValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putIntegerValidCreateRequest creates the PutIntegerValid request.
func (client *arrayOperations) putIntegerValidCreateRequest(arrayBody []int32) (*azcore.Request, error) {
	urlPath := "/array/prim/integer/1.-1.3.300"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putIntegerValidHandleResponse handles the PutIntegerValid response.
func (client *arrayOperations) putIntegerValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putIntegerValidHandleError(resp)
	}
	return resp.Response, nil
}

// putIntegerValidHandleError handles the PutIntegerValid error response.
func (client *arrayOperations) putIntegerValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutLongValid - Set array value empty [1, -1, 3, 300]
func (client *arrayOperations) PutLongValid(ctx context.Context, arrayBody []int64) (*http.Response, error) {
	req, err := client.putLongValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putLongValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putLongValidCreateRequest creates the PutLongValid request.
func (client *arrayOperations) putLongValidCreateRequest(arrayBody []int64) (*azcore.Request, error) {
	urlPath := "/array/prim/long/1.-1.3.300"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putLongValidHandleResponse handles the PutLongValid response.
func (client *arrayOperations) putLongValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putLongValidHandleError(resp)
	}
	return resp.Response, nil
}

// putLongValidHandleError handles the PutLongValid error response.
func (client *arrayOperations) putLongValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutStringEnumValid - Set array value ['foo1', 'foo2', 'foo3']
func (client *arrayOperations) PutStringEnumValid(ctx context.Context, arrayBody []Enum1) (*http.Response, error) {
	req, err := client.putStringEnumValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putStringEnumValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putStringEnumValidCreateRequest creates the PutStringEnumValid request.
func (client *arrayOperations) putStringEnumValidCreateRequest(arrayBody []Enum1) (*azcore.Request, error) {
	urlPath := "/array/prim/string-enum/foo1.foo2.foo3"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putStringEnumValidHandleResponse handles the PutStringEnumValid response.
func (client *arrayOperations) putStringEnumValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putStringEnumValidHandleError(resp)
	}
	return resp.Response, nil
}

// putStringEnumValidHandleError handles the PutStringEnumValid error response.
func (client *arrayOperations) putStringEnumValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutStringValid - Set array value ['foo1', 'foo2', 'foo3']
func (client *arrayOperations) PutStringValid(ctx context.Context, arrayBody []string) (*http.Response, error) {
	req, err := client.putStringValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putStringValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putStringValidCreateRequest creates the PutStringValid request.
func (client *arrayOperations) putStringValidCreateRequest(arrayBody []string) (*azcore.Request, error) {
	urlPath := "/array/prim/string/foo1.foo2.foo3"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putStringValidHandleResponse handles the PutStringValid response.
func (client *arrayOperations) putStringValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putStringValidHandleError(resp)
	}
	return resp.Response, nil
}

// putStringValidHandleError handles the PutStringValid error response.
func (client *arrayOperations) putStringValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutUUIDValid - Set array value  ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
func (client *arrayOperations) PutUUIDValid(ctx context.Context, arrayBody []string) (*http.Response, error) {
	req, err := client.putUuidValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putUuidValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putUuidValidCreateRequest creates the PutUUIDValid request.
func (client *arrayOperations) putUuidValidCreateRequest(arrayBody []string) (*azcore.Request, error) {
	urlPath := "/array/prim/uuid/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putUuidValidHandleResponse handles the PutUUIDValid response.
func (client *arrayOperations) putUuidValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putUuidValidHandleError(resp)
	}
	return resp.Response, nil
}

// putUuidValidHandleError handles the PutUUIDValid error response.
func (client *arrayOperations) putUuidValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
