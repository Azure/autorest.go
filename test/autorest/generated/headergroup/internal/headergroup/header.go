// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package headergroup

import (
	"encoding/base64"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"path"
	"strconv"
	"time"
)

// HeaderOperations contains the methods for the Header group.
type HeaderOperations struct{}

// CustomRequestIDCreateRequest creates the CustomRequestID request.
func (HeaderOperations) CustomRequestIDCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/header/custom/x-ms-client-request-id/9C4D50EE-2D56-4CD3-8152-34347DC9F2B0"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	return req, nil
}

// CustomRequestIDHandleResponse handles the CustomRequestID response.
func (HeaderOperations) CustomRequestIDHandleResponse(resp *azcore.Response) (*HeaderCustomRequestIDResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &HeaderCustomRequestIDResponse{RawResponse: resp.Response}, nil
}

// ParamBoolCreateRequest creates the ParamBool request.
func (HeaderOperations) ParamBoolCreateRequest(u url.URL, scenario string, value bool) (*azcore.Request, error) {
	urlPath := "/header/param/prim/bool"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	req.Header.Set("scenario", scenario)
	req.Header.Set("value", strconv.FormatBool(value))
	return req, nil
}

// ParamBoolHandleResponse handles the ParamBool response.
func (HeaderOperations) ParamBoolHandleResponse(resp *azcore.Response) (*HeaderParamBoolResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &HeaderParamBoolResponse{RawResponse: resp.Response}, nil
}

// ParamByteCreateRequest creates the ParamByte request.
func (HeaderOperations) ParamByteCreateRequest(u url.URL, scenario string, value []byte) (*azcore.Request, error) {
	urlPath := "/header/param/prim/byte"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	req.Header.Set("scenario", scenario)
	req.Header.Set("value", base64.StdEncoding.EncodeToString(value))
	return req, nil
}

// ParamByteHandleResponse handles the ParamByte response.
func (HeaderOperations) ParamByteHandleResponse(resp *azcore.Response) (*HeaderParamByteResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &HeaderParamByteResponse{RawResponse: resp.Response}, nil
}

// ParamDateCreateRequest creates the ParamDate request.
func (HeaderOperations) ParamDateCreateRequest(u url.URL, scenario string, value time.Time) (*azcore.Request, error) {
	urlPath := "/header/param/prim/date"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	req.Header.Set("scenario", scenario)
	req.Header.Set("value", value.Format("2006-01-02"))
	return req, nil
}

// ParamDateHandleResponse handles the ParamDate response.
func (HeaderOperations) ParamDateHandleResponse(resp *azcore.Response) (*HeaderParamDateResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &HeaderParamDateResponse{RawResponse: resp.Response}, nil
}

// ParamDatetimeCreateRequest creates the ParamDatetime request.
func (HeaderOperations) ParamDatetimeCreateRequest(u url.URL, scenario string, value time.Time) (*azcore.Request, error) {
	urlPath := "/header/param/prim/datetime"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	req.Header.Set("scenario", scenario)
	req.Header.Set("value", value.Format(time.RFC3339))
	return req, nil
}

// ParamDatetimeHandleResponse handles the ParamDatetime response.
func (HeaderOperations) ParamDatetimeHandleResponse(resp *azcore.Response) (*HeaderParamDatetimeResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &HeaderParamDatetimeResponse{RawResponse: resp.Response}, nil
}

// ParamDatetimeRFC1123CreateRequest creates the ParamDatetimeRFC1123 request.
func (HeaderOperations) ParamDatetimeRFC1123CreateRequest(u url.URL, scenario string, options *HeaderParamDatetimeRFC1123Options) (*azcore.Request, error) {
	urlPath := "/header/param/prim/datetimerfc1123"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	req.Header.Set("scenario", scenario)
	req.Header.Set("value", options.Value.Format(time.RFC1123))
	return req, nil
}

// ParamDatetimeRFC1123HandleResponse handles the ParamDatetimeRFC1123 response.
func (HeaderOperations) ParamDatetimeRFC1123HandleResponse(resp *azcore.Response) (*HeaderParamDatetimeRFC1123Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &HeaderParamDatetimeRFC1123Response{RawResponse: resp.Response}, nil
}

// ParamDoubleCreateRequest creates the ParamDouble request.
func (HeaderOperations) ParamDoubleCreateRequest(u url.URL, scenario string, value float64) (*azcore.Request, error) {
	urlPath := "/header/param/prim/double"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	req.Header.Set("scenario", scenario)
	req.Header.Set("value", strconv.FormatFloat(value, 'f', -1, 64))
	return req, nil
}

// ParamDoubleHandleResponse handles the ParamDouble response.
func (HeaderOperations) ParamDoubleHandleResponse(resp *azcore.Response) (*HeaderParamDoubleResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &HeaderParamDoubleResponse{RawResponse: resp.Response}, nil
}

// ParamDurationCreateRequest creates the ParamDuration request.
func (HeaderOperations) ParamDurationCreateRequest(u url.URL, scenario string, value time.Duration) (*azcore.Request, error) {
	urlPath := "/header/param/prim/duration"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	req.Header.Set("scenario", scenario)
	req.Header.Set("value", value.String())
	return req, nil
}

// ParamDurationHandleResponse handles the ParamDuration response.
func (HeaderOperations) ParamDurationHandleResponse(resp *azcore.Response) (*HeaderParamDurationResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &HeaderParamDurationResponse{RawResponse: resp.Response}, nil
}

// ParamEnumCreateRequest creates the ParamEnum request.
func (HeaderOperations) ParamEnumCreateRequest(u url.URL, scenario string, options *HeaderParamEnumOptions) (*azcore.Request, error) {
	urlPath := "/header/param/prim/enum"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	req.Header.Set("scenario", scenario)
	req.Header.Set("value", string(*options.Value))
	return req, nil
}

// ParamEnumHandleResponse handles the ParamEnum response.
func (HeaderOperations) ParamEnumHandleResponse(resp *azcore.Response) (*HeaderParamEnumResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &HeaderParamEnumResponse{RawResponse: resp.Response}, nil
}

// ParamExistingKeyCreateRequest creates the ParamExistingKey request.
func (HeaderOperations) ParamExistingKeyCreateRequest(u url.URL, userAgent string) (*azcore.Request, error) {
	urlPath := "/header/param/existingkey"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	req.Header.Set("User-Agent", userAgent)
	return req, nil
}

// ParamExistingKeyHandleResponse handles the ParamExistingKey response.
func (HeaderOperations) ParamExistingKeyHandleResponse(resp *azcore.Response) (*HeaderParamExistingKeyResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &HeaderParamExistingKeyResponse{RawResponse: resp.Response}, nil
}

// ParamFloatCreateRequest creates the ParamFloat request.
func (HeaderOperations) ParamFloatCreateRequest(u url.URL, scenario string, value float32) (*azcore.Request, error) {
	urlPath := "/header/param/prim/float"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	req.Header.Set("scenario", scenario)
	req.Header.Set("value", strconv.FormatFloat(float64(value), 'f', -1, 32))
	return req, nil
}

// ParamFloatHandleResponse handles the ParamFloat response.
func (HeaderOperations) ParamFloatHandleResponse(resp *azcore.Response) (*HeaderParamFloatResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &HeaderParamFloatResponse{RawResponse: resp.Response}, nil
}

// ParamIntegerCreateRequest creates the ParamInteger request.
func (HeaderOperations) ParamIntegerCreateRequest(u url.URL, scenario string, value int32) (*azcore.Request, error) {
	urlPath := "/header/param/prim/integer"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	req.Header.Set("scenario", scenario)
	req.Header.Set("value", strconv.FormatInt(int64(value), 10))
	return req, nil
}

// ParamIntegerHandleResponse handles the ParamInteger response.
func (HeaderOperations) ParamIntegerHandleResponse(resp *azcore.Response) (*HeaderParamIntegerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &HeaderParamIntegerResponse{RawResponse: resp.Response}, nil
}

// ParamLongCreateRequest creates the ParamLong request.
func (HeaderOperations) ParamLongCreateRequest(u url.URL, scenario string, value int64) (*azcore.Request, error) {
	urlPath := "/header/param/prim/long"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	req.Header.Set("scenario", scenario)
	req.Header.Set("value", strconv.FormatInt(value, 10))
	return req, nil
}

// ParamLongHandleResponse handles the ParamLong response.
func (HeaderOperations) ParamLongHandleResponse(resp *azcore.Response) (*HeaderParamLongResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &HeaderParamLongResponse{RawResponse: resp.Response}, nil
}

// ParamProtectedKeyCreateRequest creates the ParamProtectedKey request.
func (HeaderOperations) ParamProtectedKeyCreateRequest(u url.URL, contentType string) (*azcore.Request, error) {
	urlPath := "/header/param/protectedkey"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	req.Header.Set("Content-Type", contentType)
	return req, nil
}

// ParamProtectedKeyHandleResponse handles the ParamProtectedKey response.
func (HeaderOperations) ParamProtectedKeyHandleResponse(resp *azcore.Response) (*HeaderParamProtectedKeyResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &HeaderParamProtectedKeyResponse{RawResponse: resp.Response}, nil
}

// ParamStringCreateRequest creates the ParamString request.
func (HeaderOperations) ParamStringCreateRequest(u url.URL, scenario string, options *HeaderParamStringOptions) (*azcore.Request, error) {
	urlPath := "/header/param/prim/string"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	req.Header.Set("scenario", scenario)
	req.Header.Set("value", *options.Value)
	return req, nil
}

// ParamStringHandleResponse handles the ParamString response.
func (HeaderOperations) ParamStringHandleResponse(resp *azcore.Response) (*HeaderParamStringResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &HeaderParamStringResponse{RawResponse: resp.Response}, nil
}

// ResponseBoolCreateRequest creates the ResponseBool request.
func (HeaderOperations) ResponseBoolCreateRequest(u url.URL, scenario string) (*azcore.Request, error) {
	urlPath := "/header/response/prim/bool"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	req.Header.Set("scenario", scenario)
	return req, nil
}

// ResponseBoolHandleResponse handles the ResponseBool response.
func (HeaderOperations) ResponseBoolHandleResponse(resp *azcore.Response) (*HeaderResponseBoolResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	value, err := strconv.ParseBool(resp.Header.Get("value"))
	if err != nil {
		return nil, err
	}
	return &HeaderResponseBoolResponse{RawResponse: resp.Response, Value: &value}, nil
}

// ResponseByteCreateRequest creates the ResponseByte request.
func (HeaderOperations) ResponseByteCreateRequest(u url.URL, scenario string) (*azcore.Request, error) {
	urlPath := "/header/response/prim/byte"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	req.Header.Set("scenario", scenario)
	return req, nil
}

// ResponseByteHandleResponse handles the ResponseByte response.
func (HeaderOperations) ResponseByteHandleResponse(resp *azcore.Response) (*HeaderResponseByteResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	value, err := base64.StdEncoding.DecodeString(resp.Header.Get("value"))
	if err != nil {
		return nil, err
	}
	return &HeaderResponseByteResponse{RawResponse: resp.Response, Value: &value}, nil
}

// ResponseDateCreateRequest creates the ResponseDate request.
func (HeaderOperations) ResponseDateCreateRequest(u url.URL, scenario string) (*azcore.Request, error) {
	urlPath := "/header/response/prim/date"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	req.Header.Set("scenario", scenario)
	return req, nil
}

// ResponseDateHandleResponse handles the ResponseDate response.
func (HeaderOperations) ResponseDateHandleResponse(resp *azcore.Response) (*HeaderResponseDateResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	value, err := time.Parse("2006-01-02", resp.Header.Get("value"))
	if err != nil {
		return nil, err
	}
	return &HeaderResponseDateResponse{RawResponse: resp.Response, Value: &value}, nil
}

// ResponseDatetimeCreateRequest creates the ResponseDatetime request.
func (HeaderOperations) ResponseDatetimeCreateRequest(u url.URL, scenario string) (*azcore.Request, error) {
	urlPath := "/header/response/prim/datetime"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	req.Header.Set("scenario", scenario)
	return req, nil
}

// ResponseDatetimeHandleResponse handles the ResponseDatetime response.
func (HeaderOperations) ResponseDatetimeHandleResponse(resp *azcore.Response) (*HeaderResponseDatetimeResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	value, err := time.Parse(time.RFC3339, resp.Header.Get("value"))
	if err != nil {
		return nil, err
	}
	return &HeaderResponseDatetimeResponse{RawResponse: resp.Response, Value: &value}, nil
}

// ResponseDatetimeRFC1123CreateRequest creates the ResponseDatetimeRFC1123 request.
func (HeaderOperations) ResponseDatetimeRFC1123CreateRequest(u url.URL, scenario string) (*azcore.Request, error) {
	urlPath := "/header/response/prim/datetimerfc1123"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	req.Header.Set("scenario", scenario)
	return req, nil
}

// ResponseDatetimeRFC1123HandleResponse handles the ResponseDatetimeRFC1123 response.
func (HeaderOperations) ResponseDatetimeRFC1123HandleResponse(resp *azcore.Response) (*HeaderResponseDatetimeRFC1123Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	value, err := time.Parse(time.RFC1123, resp.Header.Get("value"))
	if err != nil {
		return nil, err
	}
	return &HeaderResponseDatetimeRFC1123Response{RawResponse: resp.Response, Value: &value}, nil
}

// ResponseDoubleCreateRequest creates the ResponseDouble request.
func (HeaderOperations) ResponseDoubleCreateRequest(u url.URL, scenario string) (*azcore.Request, error) {
	urlPath := "/header/response/prim/double"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	req.Header.Set("scenario", scenario)
	return req, nil
}

// ResponseDoubleHandleResponse handles the ResponseDouble response.
func (HeaderOperations) ResponseDoubleHandleResponse(resp *azcore.Response) (*HeaderResponseDoubleResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	value, err := strconv.ParseFloat(resp.Header.Get("value"), 64)
	if err != nil {
		return nil, err
	}
	return &HeaderResponseDoubleResponse{RawResponse: resp.Response, Value: &value}, nil
}

// ResponseDurationCreateRequest creates the ResponseDuration request.
func (HeaderOperations) ResponseDurationCreateRequest(u url.URL, scenario string) (*azcore.Request, error) {
	urlPath := "/header/response/prim/duration"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	req.Header.Set("scenario", scenario)
	return req, nil
}

// ResponseDurationHandleResponse handles the ResponseDuration response.
func (HeaderOperations) ResponseDurationHandleResponse(resp *azcore.Response) (*HeaderResponseDurationResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	value, err := time.ParseDuration(resp.Header.Get("value"))
	if err != nil {
		return nil, err
	}
	return &HeaderResponseDurationResponse{RawResponse: resp.Response, Value: &value}, nil
}

// ResponseEnumCreateRequest creates the ResponseEnum request.
func (HeaderOperations) ResponseEnumCreateRequest(u url.URL, scenario string) (*azcore.Request, error) {
	urlPath := "/header/response/prim/enum"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	req.Header.Set("scenario", scenario)
	return req, nil
}

// ResponseEnumHandleResponse handles the ResponseEnum response.
func (HeaderOperations) ResponseEnumHandleResponse(resp *azcore.Response) (*HeaderResponseEnumResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	value := GreyscaleColors(resp.Header.Get("value"))
	return &HeaderResponseEnumResponse{RawResponse: resp.Response, Value: &value}, nil
}

// ResponseExistingKeyCreateRequest creates the ResponseExistingKey request.
func (HeaderOperations) ResponseExistingKeyCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/header/response/existingkey"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	return req, nil
}

// ResponseExistingKeyHandleResponse handles the ResponseExistingKey response.
func (HeaderOperations) ResponseExistingKeyHandleResponse(resp *azcore.Response) (*HeaderResponseExistingKeyResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	userAgent := resp.Header.Get("User-Agent")
	return &HeaderResponseExistingKeyResponse{RawResponse: resp.Response, UserAgent: &userAgent}, nil
}

// ResponseFloatCreateRequest creates the ResponseFloat request.
func (HeaderOperations) ResponseFloatCreateRequest(u url.URL, scenario string) (*azcore.Request, error) {
	urlPath := "/header/response/prim/float"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	req.Header.Set("scenario", scenario)
	return req, nil
}

// ResponseFloatHandleResponse handles the ResponseFloat response.
func (HeaderOperations) ResponseFloatHandleResponse(resp *azcore.Response) (*HeaderResponseFloatResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	value32, err := strconv.ParseFloat(resp.Header.Get("value"), 32)
	value := float32(value32)
	if err != nil {
		return nil, err
	}
	return &HeaderResponseFloatResponse{RawResponse: resp.Response, Value: &value}, nil
}

// ResponseIntegerCreateRequest creates the ResponseInteger request.
func (HeaderOperations) ResponseIntegerCreateRequest(u url.URL, scenario string) (*azcore.Request, error) {
	urlPath := "/header/response/prim/integer"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	req.Header.Set("scenario", scenario)
	return req, nil
}

// ResponseIntegerHandleResponse handles the ResponseInteger response.
func (HeaderOperations) ResponseIntegerHandleResponse(resp *azcore.Response) (*HeaderResponseIntegerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	value32, err := strconv.ParseInt(resp.Header.Get("value"), 10, 32)
	value := int32(value32)
	if err != nil {
		return nil, err
	}
	return &HeaderResponseIntegerResponse{RawResponse: resp.Response, Value: &value}, nil
}

// ResponseLongCreateRequest creates the ResponseLong request.
func (HeaderOperations) ResponseLongCreateRequest(u url.URL, scenario string) (*azcore.Request, error) {
	urlPath := "/header/response/prim/long"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	req.Header.Set("scenario", scenario)
	return req, nil
}

// ResponseLongHandleResponse handles the ResponseLong response.
func (HeaderOperations) ResponseLongHandleResponse(resp *azcore.Response) (*HeaderResponseLongResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	value, err := strconv.ParseInt(resp.Header.Get("value"), 10, 64)
	if err != nil {
		return nil, err
	}
	return &HeaderResponseLongResponse{RawResponse: resp.Response, Value: &value}, nil
}

// ResponseProtectedKeyCreateRequest creates the ResponseProtectedKey request.
func (HeaderOperations) ResponseProtectedKeyCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/header/response/protectedkey"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	return req, nil
}

// ResponseProtectedKeyHandleResponse handles the ResponseProtectedKey response.
func (HeaderOperations) ResponseProtectedKeyHandleResponse(resp *azcore.Response) (*HeaderResponseProtectedKeyResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	contentType := resp.Header.Get("Content-Type")
	return &HeaderResponseProtectedKeyResponse{RawResponse: resp.Response, ContentType: &contentType}, nil
}

// ResponseStringCreateRequest creates the ResponseString request.
func (HeaderOperations) ResponseStringCreateRequest(u url.URL, scenario string) (*azcore.Request, error) {
	urlPath := "/header/response/prim/string"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPost, u)
	req.Header.Set("scenario", scenario)
	return req, nil
}

// ResponseStringHandleResponse handles the ResponseString response.
func (HeaderOperations) ResponseStringHandleResponse(resp *azcore.Response) (*HeaderResponseStringResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	value := resp.Header.Get("value")
	return &HeaderResponseStringResponse{RawResponse: resp.Response, Value: &value}, nil
}
