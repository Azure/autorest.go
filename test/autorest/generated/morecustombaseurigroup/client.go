// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package morecustombaseurigroup

import (
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"strings"
)

const telemetryInfo = "azsdk-go-morecustombaseurigroup/<version>"

// ClientOptions contains configuration settings for the default client's pipeline.
type ClientOptions struct {
	// HTTPClient sets the transport for making HTTP requests.
	HTTPClient azcore.Transport
	// LogOptions configures the built-in request logging policy behavior.
	LogOptions azcore.RequestLogOptions
	// Retry configures the built-in retry policy behavior.
	Retry azcore.RetryOptions
	// Telemetry configures the built-in telemetry policy behavior.
	Telemetry azcore.TelemetryOptions
	// ApplicationID is an application-specific identification string used in telemetry.
	// It has a maximum length of 24 characters and must not contain any spaces.
	ApplicationID string
}

// DefaultClientOptions creates a ClientOptions type initialized with default values.
func DefaultClientOptions() ClientOptions {
	return ClientOptions{
		HTTPClient: azcore.DefaultHTTPClientTransport(),
		Retry:      azcore.DefaultRetryOptions(),
	}
}

func (c *ClientOptions) telemetryOptions() azcore.TelemetryOptions {
	t := telemetryInfo
	if c.ApplicationID != "" {
		a := strings.ReplaceAll(c.ApplicationID, " ", "/")
		if len(a) > 24 {
			a = a[:24]
		}
		t = fmt.Sprintf("%s %s", a, telemetryInfo)
	}
	if c.Telemetry.Value == "" {
		return azcore.TelemetryOptions{Value: t}
	}
	return azcore.TelemetryOptions{Value: fmt.Sprintf("%s %s", c.Telemetry.Value, t)}
}

// Client - Test Infrastructure for AutoRest
type Client struct {
	dnsSuffix string
	p         azcore.Pipeline
}

// NewClient creates an instance of the Client type with the specified endpoint.
func NewClient(dnsSuffix *string, options *ClientOptions) (*Client, error) {
	if options == nil {
		o := DefaultClientOptions()
		options = &o
	}
	p := azcore.NewPipeline(options.HTTPClient,
		azcore.NewTelemetryPolicy(options.telemetryOptions()),
		azcore.NewUniqueRequestIDPolicy(),
		azcore.NewRetryPolicy(&options.Retry),
		azcore.NewRequestLogPolicy(options.LogOptions))
	return NewClientWithPipeline(dnsSuffix, p)
}

// NewClientWithPipeline creates an instance of the Client type with the specified endpoint and pipeline.
func NewClientWithPipeline(dnsSuffix *string, p azcore.Pipeline) (*Client, error) {
	client := &Client{
		p:         p,
		dnsSuffix: "host",
	}
	if dnsSuffix != nil {
		client.dnsSuffix = *dnsSuffix
	}
	return client, nil
}

// PathsOperations returns the PathsOperations associated with this client.
func (client *Client) PathsOperations(subscriptionID string) PathsOperations {
	return &pathsOperations{Client: client, subscriptionID: subscriptionID}
}
