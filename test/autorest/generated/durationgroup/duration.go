// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package durationgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"path"
)

// DurationOperations contains the methods for the Duration group.
type DurationOperations interface {
	// GetInvalid - Get an invalid duration value
	GetInvalid(ctx context.Context) (*StringResponse, error)
	// GetNull - Get null duration value
	GetNull(ctx context.Context) (*StringResponse, error)
	// GetPositiveDuration - Get a positive duration value
	GetPositiveDuration(ctx context.Context) (*StringResponse, error)
	// PutPositiveDuration - Put a positive duration value
	PutPositiveDuration(ctx context.Context, durationBody string) (*http.Response, error)
}

// durationOperations implements the DurationOperations interface.
type durationOperations struct {
	*Client
}

// GetInvalid - Get an invalid duration value
func (client *durationOperations) GetInvalid(ctx context.Context) (*StringResponse, error) {
	req, err := client.getInvalidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getInvalidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getInvalidCreateRequest creates the GetInvalid request.
func (client *durationOperations) getInvalidCreateRequest() (*azcore.Request, error) {
	urlPath := "/duration/invalid"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getInvalidHandleResponse handles the GetInvalid response.
func (client *durationOperations) getInvalidHandleResponse(resp *azcore.Response) (*StringResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getInvalidHandleError(resp)
	}
	result := StringResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getInvalidHandleError handles the GetInvalid error response.
func (client *durationOperations) getInvalidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetNull - Get null duration value
func (client *durationOperations) GetNull(ctx context.Context) (*StringResponse, error) {
	req, err := client.getNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getNullCreateRequest creates the GetNull request.
func (client *durationOperations) getNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/duration/null"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getNullHandleResponse handles the GetNull response.
func (client *durationOperations) getNullHandleResponse(resp *azcore.Response) (*StringResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getNullHandleError(resp)
	}
	result := StringResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getNullHandleError handles the GetNull error response.
func (client *durationOperations) getNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetPositiveDuration - Get a positive duration value
func (client *durationOperations) GetPositiveDuration(ctx context.Context) (*StringResponse, error) {
	req, err := client.getPositiveDurationCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getPositiveDurationHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getPositiveDurationCreateRequest creates the GetPositiveDuration request.
func (client *durationOperations) getPositiveDurationCreateRequest() (*azcore.Request, error) {
	urlPath := "/duration/positiveduration"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getPositiveDurationHandleResponse handles the GetPositiveDuration response.
func (client *durationOperations) getPositiveDurationHandleResponse(resp *azcore.Response) (*StringResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getPositiveDurationHandleError(resp)
	}
	result := StringResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getPositiveDurationHandleError handles the GetPositiveDuration error response.
func (client *durationOperations) getPositiveDurationHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutPositiveDuration - Put a positive duration value
func (client *durationOperations) PutPositiveDuration(ctx context.Context, durationBody string) (*http.Response, error) {
	req, err := client.putPositiveDurationCreateRequest(durationBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putPositiveDurationHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putPositiveDurationCreateRequest creates the PutPositiveDuration request.
func (client *durationOperations) putPositiveDurationCreateRequest(durationBody string) (*azcore.Request, error) {
	urlPath := "/duration/positiveduration"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(durationBody)
}

// putPositiveDurationHandleResponse handles the PutPositiveDuration response.
func (client *durationOperations) putPositiveDurationHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putPositiveDurationHandleError(resp)
	}
	return resp.Response, nil
}

// putPositiveDurationHandleError handles the PutPositiveDuration error response.
func (client *durationOperations) putPositiveDurationHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
