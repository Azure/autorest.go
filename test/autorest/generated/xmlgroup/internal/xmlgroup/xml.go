// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package xmlgroup

import (
	"encoding/xml"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"path"
)

type XMLOperations struct{}

// GetACLsCreateRequest creates the GetACLs request.
func (XMLOperations) GetACLsCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/xml/mycontainer"
	u.Path = path.Join(u.Path, urlPath)
	query := u.Query()
	query.Set("comp", "acl")
	query.Set("restype", "container")
	u.RawQuery = query.Encode()
	return azcore.NewRequest(http.MethodGet, u), nil
}

// GetACLsHandleResponse handles the GetACLs response.
func (XMLOperations) GetACLsHandleResponse(resp *azcore.Response) (*XMLGetACLsResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := XMLGetACLsResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result)
}

// GetComplexTypeRefNoMetaCreateRequest creates the GetComplexTypeRefNoMeta request.
func (XMLOperations) GetComplexTypeRefNoMetaCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/xml/complex-type-ref-no-meta"
	u.Path = path.Join(u.Path, urlPath)
	return azcore.NewRequest(http.MethodGet, u), nil
}

// GetComplexTypeRefNoMetaHandleResponse handles the GetComplexTypeRefNoMeta response.
func (XMLOperations) GetComplexTypeRefNoMetaHandleResponse(resp *azcore.Response) (*XMLGetComplexTypeRefNoMetaResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := XMLGetComplexTypeRefNoMetaResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result.RootWithRefAndNoMeta)
}

// GetComplexTypeRefWithMetaCreateRequest creates the GetComplexTypeRefWithMeta request.
func (XMLOperations) GetComplexTypeRefWithMetaCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/xml/complex-type-ref-with-meta"
	u.Path = path.Join(u.Path, urlPath)
	return azcore.NewRequest(http.MethodGet, u), nil
}

// GetComplexTypeRefWithMetaHandleResponse handles the GetComplexTypeRefWithMeta response.
func (XMLOperations) GetComplexTypeRefWithMetaHandleResponse(resp *azcore.Response) (*XMLGetComplexTypeRefWithMetaResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := XMLGetComplexTypeRefWithMetaResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result.RootWithRefAndMeta)
}

// GetEmptyChildElementCreateRequest creates the GetEmptyChildElement request.
func (XMLOperations) GetEmptyChildElementCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/xml/empty-child-element"
	u.Path = path.Join(u.Path, urlPath)
	return azcore.NewRequest(http.MethodGet, u), nil
}

// GetEmptyChildElementHandleResponse handles the GetEmptyChildElement response.
func (XMLOperations) GetEmptyChildElementHandleResponse(resp *azcore.Response) (*XMLGetEmptyChildElementResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := XMLGetEmptyChildElementResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result.Banana)
}

// GetEmptyListCreateRequest creates the GetEmptyList request.
func (XMLOperations) GetEmptyListCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/xml/empty-list"
	u.Path = path.Join(u.Path, urlPath)
	return azcore.NewRequest(http.MethodGet, u), nil
}

// GetEmptyListHandleResponse handles the GetEmptyList response.
func (XMLOperations) GetEmptyListHandleResponse(resp *azcore.Response) (*XMLGetEmptyListResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := XMLGetEmptyListResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result.Slideshow)
}

// GetEmptyRootListCreateRequest creates the GetEmptyRootList request.
func (XMLOperations) GetEmptyRootListCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/xml/empty-root-list"
	u.Path = path.Join(u.Path, urlPath)
	return azcore.NewRequest(http.MethodGet, u), nil
}

// GetEmptyRootListHandleResponse handles the GetEmptyRootList response.
func (XMLOperations) GetEmptyRootListHandleResponse(resp *azcore.Response) (*XMLGetEmptyRootListResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := XMLGetEmptyRootListResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result)
}

// GetEmptyWrappedListsCreateRequest creates the GetEmptyWrappedLists request.
func (XMLOperations) GetEmptyWrappedListsCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/xml/empty-wrapped-lists"
	u.Path = path.Join(u.Path, urlPath)
	return azcore.NewRequest(http.MethodGet, u), nil
}

// GetEmptyWrappedListsHandleResponse handles the GetEmptyWrappedLists response.
func (XMLOperations) GetEmptyWrappedListsHandleResponse(resp *azcore.Response) (*XMLGetEmptyWrappedListsResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := XMLGetEmptyWrappedListsResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result.AppleBarrel)
}

// GetHeadersCreateRequest creates the GetHeaders request.
func (XMLOperations) GetHeadersCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/xml/headers"
	u.Path = path.Join(u.Path, urlPath)
	return azcore.NewRequest(http.MethodGet, u), nil
}

// GetHeadersHandleResponse handles the GetHeaders response.
func (XMLOperations) GetHeadersHandleResponse(resp *azcore.Response) (*XMLGetHeadersResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	val := resp.Header.Get("Custom-Header")
	return &XMLGetHeadersResponse{RawResponse: resp.Response, CustomHeader: &val}, nil
}

// GetRootListCreateRequest creates the GetRootList request.
func (XMLOperations) GetRootListCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/xml/root-list"
	u.Path = path.Join(u.Path, urlPath)
	return azcore.NewRequest(http.MethodGet, u), nil
}

// GetRootListHandleResponse handles the GetRootList response.
func (XMLOperations) GetRootListHandleResponse(resp *azcore.Response) (*XMLGetRootListResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := XMLGetRootListResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result)
}

// GetRootListSingleItemCreateRequest creates the GetRootListSingleItem request.
func (XMLOperations) GetRootListSingleItemCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/xml/root-list-single-item"
	u.Path = path.Join(u.Path, urlPath)
	return azcore.NewRequest(http.MethodGet, u), nil
}

// GetRootListSingleItemHandleResponse handles the GetRootListSingleItem response.
func (XMLOperations) GetRootListSingleItemHandleResponse(resp *azcore.Response) (*XMLGetRootListSingleItemResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := XMLGetRootListSingleItemResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result)
}

// GetServicePropertiesCreateRequest creates the GetServiceProperties request.
func (XMLOperations) GetServicePropertiesCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/xml/"
	u.Path = path.Join(u.Path, urlPath)
	query := u.Query()
	query.Set("comp", "properties")
	query.Set("restype", "service")
	u.RawQuery = query.Encode()
	return azcore.NewRequest(http.MethodGet, u), nil
}

// GetServicePropertiesHandleResponse handles the GetServiceProperties response.
func (XMLOperations) GetServicePropertiesHandleResponse(resp *azcore.Response) (*XMLGetServicePropertiesResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := XMLGetServicePropertiesResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result.StorageServiceProperties)
}

// GetSimpleCreateRequest creates the GetSimple request.
func (XMLOperations) GetSimpleCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/xml/simple"
	u.Path = path.Join(u.Path, urlPath)
	return azcore.NewRequest(http.MethodGet, u), nil
}

// GetSimpleHandleResponse handles the GetSimple response.
func (XMLOperations) GetSimpleHandleResponse(resp *azcore.Response) (*XMLGetSimpleResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := XMLGetSimpleResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result.Slideshow)
}

// GetWrappedListsCreateRequest creates the GetWrappedLists request.
func (XMLOperations) GetWrappedListsCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/xml/wrapped-lists"
	u.Path = path.Join(u.Path, urlPath)
	return azcore.NewRequest(http.MethodGet, u), nil
}

// GetWrappedListsHandleResponse handles the GetWrappedLists response.
func (XMLOperations) GetWrappedListsHandleResponse(resp *azcore.Response) (*XMLGetWrappedListsResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := XMLGetWrappedListsResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result.AppleBarrel)
}

// JSONInputCreateRequest creates the JSONInput request.
func (XMLOperations) JSONInputCreateRequest(u url.URL, properties JSONInput) (*azcore.Request, error) {
	urlPath := "/xml/jsoninput"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsJSON(properties)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// JSONInputHandleResponse handles the JSONInput response.
func (XMLOperations) JSONInputHandleResponse(resp *azcore.Response) (*XMLJSONInputResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &XMLJSONInputResponse{RawResponse: resp.Response}, nil
}

// JSONOutputCreateRequest creates the JSONOutput request.
func (XMLOperations) JSONOutputCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/xml/jsonoutput"
	u.Path = path.Join(u.Path, urlPath)
	return azcore.NewRequest(http.MethodGet, u), nil
}

// JSONOutputHandleResponse handles the JSONOutput response.
func (XMLOperations) JSONOutputHandleResponse(resp *azcore.Response) (*XMLJSONOutputResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := XMLJSONOutputResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.JSONOutput)
}

// ListBlobsCreateRequest creates the ListBlobs request.
func (XMLOperations) ListBlobsCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/xml/mycontainer"
	u.Path = path.Join(u.Path, urlPath)
	query := u.Query()
	query.Set("comp", "list")
	query.Set("restype", "container")
	u.RawQuery = query.Encode()
	return azcore.NewRequest(http.MethodGet, u), nil
}

// ListBlobsHandleResponse handles the ListBlobs response.
func (XMLOperations) ListBlobsHandleResponse(resp *azcore.Response) (*XMLListBlobsResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := XMLListBlobsResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result.EnumerationResults)
}

// ListContainersCreateRequest creates the ListContainers request.
func (XMLOperations) ListContainersCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/xml/"
	u.Path = path.Join(u.Path, urlPath)
	query := u.Query()
	query.Set("comp", "list")
	u.RawQuery = query.Encode()
	return azcore.NewRequest(http.MethodGet, u), nil
}

// ListContainersHandleResponse handles the ListContainers response.
func (XMLOperations) ListContainersHandleResponse(resp *azcore.Response) (*XMLListContainersResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := XMLListContainersResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result.EnumerationResults)
}

// PutACLsCreateRequest creates the PutACLs request.
func (XMLOperations) PutACLsCreateRequest(u url.URL, properties []SignedIDentifier) (*azcore.Request, error) {
	urlPath := "/xml/mycontainer"
	u.Path = path.Join(u.Path, urlPath)
	query := u.Query()
	query.Set("comp", "acl")
	query.Set("restype", "container")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, u)
	type wrapper struct {
		XMLName    xml.Name            `xml:"SignedIdentifiers"`
		Properties *[]SignedIDentifier `xml:"SignedIdentifier"`
	}
	err := req.MarshalAsXML(wrapper{Properties: &properties})
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutACLsHandleResponse handles the PutACLs response.
func (XMLOperations) PutACLsHandleResponse(resp *azcore.Response) (*XMLPutACLsResponse, error) {
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, newError(resp)
	}
	return &XMLPutACLsResponse{RawResponse: resp.Response}, nil
}

// PutComplexTypeRefNoMetaCreateRequest creates the PutComplexTypeRefNoMeta request.
func (XMLOperations) PutComplexTypeRefNoMetaCreateRequest(u url.URL, model RootWithRefAndNoMeta) (*azcore.Request, error) {
	urlPath := "/xml/complex-type-ref-no-meta"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsXML(model)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutComplexTypeRefNoMetaHandleResponse handles the PutComplexTypeRefNoMeta response.
func (XMLOperations) PutComplexTypeRefNoMetaHandleResponse(resp *azcore.Response) (*XMLPutComplexTypeRefNoMetaResponse, error) {
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, newError(resp)
	}
	return &XMLPutComplexTypeRefNoMetaResponse{RawResponse: resp.Response}, nil
}

// PutComplexTypeRefWithMetaCreateRequest creates the PutComplexTypeRefWithMeta request.
func (XMLOperations) PutComplexTypeRefWithMetaCreateRequest(u url.URL, model RootWithRefAndMeta) (*azcore.Request, error) {
	urlPath := "/xml/complex-type-ref-with-meta"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsXML(model)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutComplexTypeRefWithMetaHandleResponse handles the PutComplexTypeRefWithMeta response.
func (XMLOperations) PutComplexTypeRefWithMetaHandleResponse(resp *azcore.Response) (*XMLPutComplexTypeRefWithMetaResponse, error) {
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, newError(resp)
	}
	return &XMLPutComplexTypeRefWithMetaResponse{RawResponse: resp.Response}, nil
}

// PutEmptyChildElementCreateRequest creates the PutEmptyChildElement request.
func (XMLOperations) PutEmptyChildElementCreateRequest(u url.URL, banana Banana) (*azcore.Request, error) {
	urlPath := "/xml/empty-child-element"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	type wrapper struct {
		XMLName xml.Name `xml:"banana"`
		*Banana
	}
	err := req.MarshalAsXML(wrapper{Banana: &banana})
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutEmptyChildElementHandleResponse handles the PutEmptyChildElement response.
func (XMLOperations) PutEmptyChildElementHandleResponse(resp *azcore.Response) (*XMLPutEmptyChildElementResponse, error) {
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, newError(resp)
	}
	return &XMLPutEmptyChildElementResponse{RawResponse: resp.Response}, nil
}

// PutEmptyListCreateRequest creates the PutEmptyList request.
func (XMLOperations) PutEmptyListCreateRequest(u url.URL, slideshow Slideshow) (*azcore.Request, error) {
	urlPath := "/xml/empty-list"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	type wrapper struct {
		XMLName xml.Name `xml:"slideshow"`
		*Slideshow
	}
	err := req.MarshalAsXML(wrapper{Slideshow: &slideshow})
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutEmptyListHandleResponse handles the PutEmptyList response.
func (XMLOperations) PutEmptyListHandleResponse(resp *azcore.Response) (*XMLPutEmptyListResponse, error) {
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, newError(resp)
	}
	return &XMLPutEmptyListResponse{RawResponse: resp.Response}, nil
}

// PutEmptyRootListCreateRequest creates the PutEmptyRootList request.
func (XMLOperations) PutEmptyRootListCreateRequest(u url.URL, bananas []Banana) (*azcore.Request, error) {
	urlPath := "/xml/empty-root-list"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	type wrapper struct {
		XMLName xml.Name  `xml:"bananas"`
		Bananas *[]Banana `xml:"banana"`
	}
	err := req.MarshalAsXML(wrapper{Bananas: &bananas})
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutEmptyRootListHandleResponse handles the PutEmptyRootList response.
func (XMLOperations) PutEmptyRootListHandleResponse(resp *azcore.Response) (*XMLPutEmptyRootListResponse, error) {
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, newError(resp)
	}
	return &XMLPutEmptyRootListResponse{RawResponse: resp.Response}, nil
}

// PutEmptyWrappedListsCreateRequest creates the PutEmptyWrappedLists request.
func (XMLOperations) PutEmptyWrappedListsCreateRequest(u url.URL, appleBarrel AppleBarrel) (*azcore.Request, error) {
	urlPath := "/xml/empty-wrapped-lists"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsXML(appleBarrel)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutEmptyWrappedListsHandleResponse handles the PutEmptyWrappedLists response.
func (XMLOperations) PutEmptyWrappedListsHandleResponse(resp *azcore.Response) (*XMLPutEmptyWrappedListsResponse, error) {
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, newError(resp)
	}
	return &XMLPutEmptyWrappedListsResponse{RawResponse: resp.Response}, nil
}

// PutRootListCreateRequest creates the PutRootList request.
func (XMLOperations) PutRootListCreateRequest(u url.URL, bananas []Banana) (*azcore.Request, error) {
	urlPath := "/xml/root-list"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	type wrapper struct {
		XMLName xml.Name  `xml:"bananas"`
		Bananas *[]Banana `xml:"banana"`
	}
	err := req.MarshalAsXML(wrapper{Bananas: &bananas})
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutRootListHandleResponse handles the PutRootList response.
func (XMLOperations) PutRootListHandleResponse(resp *azcore.Response) (*XMLPutRootListResponse, error) {
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, newError(resp)
	}
	return &XMLPutRootListResponse{RawResponse: resp.Response}, nil
}

// PutRootListSingleItemCreateRequest creates the PutRootListSingleItem request.
func (XMLOperations) PutRootListSingleItemCreateRequest(u url.URL, bananas []Banana) (*azcore.Request, error) {
	urlPath := "/xml/root-list-single-item"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	type wrapper struct {
		XMLName xml.Name  `xml:"bananas"`
		Bananas *[]Banana `xml:"banana"`
	}
	err := req.MarshalAsXML(wrapper{Bananas: &bananas})
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutRootListSingleItemHandleResponse handles the PutRootListSingleItem response.
func (XMLOperations) PutRootListSingleItemHandleResponse(resp *azcore.Response) (*XMLPutRootListSingleItemResponse, error) {
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, newError(resp)
	}
	return &XMLPutRootListSingleItemResponse{RawResponse: resp.Response}, nil
}

// PutServicePropertiesCreateRequest creates the PutServiceProperties request.
func (XMLOperations) PutServicePropertiesCreateRequest(u url.URL, properties StorageServiceProperties) (*azcore.Request, error) {
	urlPath := "/xml/"
	u.Path = path.Join(u.Path, urlPath)
	query := u.Query()
	query.Set("comp", "properties")
	query.Set("restype", "service")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsXML(properties)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutServicePropertiesHandleResponse handles the PutServiceProperties response.
func (XMLOperations) PutServicePropertiesHandleResponse(resp *azcore.Response) (*XMLPutServicePropertiesResponse, error) {
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, newError(resp)
	}
	return &XMLPutServicePropertiesResponse{RawResponse: resp.Response}, nil
}

// PutSimpleCreateRequest creates the PutSimple request.
func (XMLOperations) PutSimpleCreateRequest(u url.URL, slideshow Slideshow) (*azcore.Request, error) {
	urlPath := "/xml/simple"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	type wrapper struct {
		XMLName xml.Name `xml:"slideshow"`
		*Slideshow
	}
	err := req.MarshalAsXML(wrapper{Slideshow: &slideshow})
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutSimpleHandleResponse handles the PutSimple response.
func (XMLOperations) PutSimpleHandleResponse(resp *azcore.Response) (*XMLPutSimpleResponse, error) {
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, newError(resp)
	}
	return &XMLPutSimpleResponse{RawResponse: resp.Response}, nil
}

// PutWrappedListsCreateRequest creates the PutWrappedLists request.
func (XMLOperations) PutWrappedListsCreateRequest(u url.URL, wrappedLists AppleBarrel) (*azcore.Request, error) {
	urlPath := "/xml/wrapped-lists"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsXML(wrappedLists)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutWrappedListsHandleResponse handles the PutWrappedLists response.
func (XMLOperations) PutWrappedListsHandleResponse(resp *azcore.Response) (*XMLPutWrappedListsResponse, error) {
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, newError(resp)
	}
	return &XMLPutWrappedListsResponse{RawResponse: resp.Response}, nil
}
