// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package xmlgroup

import (
	"context"
	azinternal "generatortests/autorest/generated/xmlgroup/internal/xmlgroup"
)

// XMLOperations contains the methods for the XML group.
type XMLOperations interface {
	// GetACLs - Gets storage ACLs for a container.
	GetACLs(ctx context.Context) (*XMLGetACLsResponse, error)
	// GetComplexTypeRefNoMeta - Get a complex type that has a ref to a complex type with no XML node
	GetComplexTypeRefNoMeta(ctx context.Context) (*XMLGetComplexTypeRefNoMetaResponse, error)
	// GetComplexTypeRefWithMeta - Get a complex type that has a ref to a complex type with XML node
	GetComplexTypeRefWithMeta(ctx context.Context) (*XMLGetComplexTypeRefWithMetaResponse, error)
	// GetEmptyChildElement - Gets an XML document with an empty child element.
	GetEmptyChildElement(ctx context.Context) (*XMLGetEmptyChildElementResponse, error)
	// GetEmptyList - Get an empty list.
	GetEmptyList(ctx context.Context) (*XMLGetEmptyListResponse, error)
	// GetEmptyRootList - Gets an empty list as the root element.
	GetEmptyRootList(ctx context.Context) (*XMLGetEmptyRootListResponse, error)
	// GetEmptyWrappedLists - Gets some empty wrapped lists.
	GetEmptyWrappedLists(ctx context.Context) (*XMLGetEmptyWrappedListsResponse, error)
	// GetHeaders - Get strongly-typed response headers.
	GetHeaders(ctx context.Context) (*XMLGetHeadersResponse, error)
	// GetRootList - Gets a list as the root element.
	GetRootList(ctx context.Context) (*XMLGetRootListResponse, error)
	// GetRootListSingleItem - Gets a list with a single item.
	GetRootListSingleItem(ctx context.Context) (*XMLGetRootListSingleItemResponse, error)
	// GetServiceProperties - Gets storage service properties.
	GetServiceProperties(ctx context.Context) (*XMLGetServicePropertiesResponse, error)
	// GetSimple - Get a simple XML document
	GetSimple(ctx context.Context) (*XMLGetSimpleResponse, error)
	// GetWrappedLists - Get an XML document with multiple wrapped lists
	GetWrappedLists(ctx context.Context) (*XMLGetWrappedListsResponse, error)
	// JSONInput - A Swagger with XML that has one operation that takes JSON as input. You need to send the ID number 42
	JSONInput(ctx context.Context, properties JSONInput) (*XMLJSONInputResponse, error)
	// JSONOutput - A Swagger with XML that has one operation that returns JSON. ID number 42
	JSONOutput(ctx context.Context) (*XMLJSONOutputResponse, error)
	// ListBlobs - Lists blobs in a storage container.
	ListBlobs(ctx context.Context) (*XMLListBlobsResponse, error)
	// ListContainers - Lists containers in a storage account.
	ListContainers(ctx context.Context) (*XMLListContainersResponse, error)
	// PutACLs - Puts storage ACLs for a container.
	PutACLs(ctx context.Context, properties []SignedIDentifier) (*XMLPutACLsResponse, error)
	// PutComplexTypeRefNoMeta - Puts a complex type that has a ref to a complex type with no XML node
	PutComplexTypeRefNoMeta(ctx context.Context, model RootWithRefAndNoMeta) (*XMLPutComplexTypeRefNoMetaResponse, error)
	// PutComplexTypeRefWithMeta - Puts a complex type that has a ref to a complex type with XML node
	PutComplexTypeRefWithMeta(ctx context.Context, model RootWithRefAndMeta) (*XMLPutComplexTypeRefWithMetaResponse, error)
	// PutEmptyChildElement - Puts a value with an empty child element.
	PutEmptyChildElement(ctx context.Context, banana Banana) (*XMLPutEmptyChildElementResponse, error)
	// PutEmptyList - Puts an empty list.
	PutEmptyList(ctx context.Context, slideshow Slideshow) (*XMLPutEmptyListResponse, error)
	// PutEmptyRootList - Puts an empty list as the root element.
	PutEmptyRootList(ctx context.Context, bananas []Banana) (*XMLPutEmptyRootListResponse, error)
	// PutEmptyWrappedLists - Puts some empty wrapped lists.
	PutEmptyWrappedLists(ctx context.Context, appleBarrel AppleBarrel) (*XMLPutEmptyWrappedListsResponse, error)
	// PutRootList - Puts a list as the root element.
	PutRootList(ctx context.Context, bananas []Banana) (*XMLPutRootListResponse, error)
	// PutRootListSingleItem - Puts a list with a single item.
	PutRootListSingleItem(ctx context.Context, bananas []Banana) (*XMLPutRootListSingleItemResponse, error)
	// PutServiceProperties - Puts storage service properties.
	PutServiceProperties(ctx context.Context, properties StorageServiceProperties) (*XMLPutServicePropertiesResponse, error)
	// PutSimple - Put a simple XML document
	PutSimple(ctx context.Context, slideshow Slideshow) (*XMLPutSimpleResponse, error)
	// PutWrappedLists - Put an XML document with multiple wrapped lists
	PutWrappedLists(ctx context.Context, wrappedLists AppleBarrel) (*XMLPutWrappedListsResponse, error)
}

type xmlOperations struct {
	*Client
	azinternal.XMLOperations
}

// GetACLs - Gets storage ACLs for a container.
func (client *xmlOperations) GetACLs(ctx context.Context) (*XMLGetACLsResponse, error) {
	req, err := client.GetACLsCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetACLsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetComplexTypeRefNoMeta - Get a complex type that has a ref to a complex type with no XML node
func (client *xmlOperations) GetComplexTypeRefNoMeta(ctx context.Context) (*XMLGetComplexTypeRefNoMetaResponse, error) {
	req, err := client.GetComplexTypeRefNoMetaCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetComplexTypeRefNoMetaHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetComplexTypeRefWithMeta - Get a complex type that has a ref to a complex type with XML node
func (client *xmlOperations) GetComplexTypeRefWithMeta(ctx context.Context) (*XMLGetComplexTypeRefWithMetaResponse, error) {
	req, err := client.GetComplexTypeRefWithMetaCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetComplexTypeRefWithMetaHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetEmptyChildElement - Gets an XML document with an empty child element.
func (client *xmlOperations) GetEmptyChildElement(ctx context.Context) (*XMLGetEmptyChildElementResponse, error) {
	req, err := client.GetEmptyChildElementCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetEmptyChildElementHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetEmptyList - Get an empty list.
func (client *xmlOperations) GetEmptyList(ctx context.Context) (*XMLGetEmptyListResponse, error) {
	req, err := client.GetEmptyListCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetEmptyListHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetEmptyRootList - Gets an empty list as the root element.
func (client *xmlOperations) GetEmptyRootList(ctx context.Context) (*XMLGetEmptyRootListResponse, error) {
	req, err := client.GetEmptyRootListCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetEmptyRootListHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetEmptyWrappedLists - Gets some empty wrapped lists.
func (client *xmlOperations) GetEmptyWrappedLists(ctx context.Context) (*XMLGetEmptyWrappedListsResponse, error) {
	req, err := client.GetEmptyWrappedListsCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetEmptyWrappedListsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetHeaders - Get strongly-typed response headers.
func (client *xmlOperations) GetHeaders(ctx context.Context) (*XMLGetHeadersResponse, error) {
	req, err := client.GetHeadersCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetHeadersHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetRootList - Gets a list as the root element.
func (client *xmlOperations) GetRootList(ctx context.Context) (*XMLGetRootListResponse, error) {
	req, err := client.GetRootListCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetRootListHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetRootListSingleItem - Gets a list with a single item.
func (client *xmlOperations) GetRootListSingleItem(ctx context.Context) (*XMLGetRootListSingleItemResponse, error) {
	req, err := client.GetRootListSingleItemCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetRootListSingleItemHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetServiceProperties - Gets storage service properties.
func (client *xmlOperations) GetServiceProperties(ctx context.Context) (*XMLGetServicePropertiesResponse, error) {
	req, err := client.GetServicePropertiesCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetServicePropertiesHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetSimple - Get a simple XML document
func (client *xmlOperations) GetSimple(ctx context.Context) (*XMLGetSimpleResponse, error) {
	req, err := client.GetSimpleCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetSimpleHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetWrappedLists - Get an XML document with multiple wrapped lists
func (client *xmlOperations) GetWrappedLists(ctx context.Context) (*XMLGetWrappedListsResponse, error) {
	req, err := client.GetWrappedListsCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetWrappedListsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// JSONInput - A Swagger with XML that has one operation that takes JSON as input. You need to send the ID number 42
func (client *xmlOperations) JSONInput(ctx context.Context, properties JSONInput) (*XMLJSONInputResponse, error) {
	req, err := client.JSONInputCreateRequest(*client.u, properties)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.JSONInputHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// JSONOutput - A Swagger with XML that has one operation that returns JSON. ID number 42
func (client *xmlOperations) JSONOutput(ctx context.Context) (*XMLJSONOutputResponse, error) {
	req, err := client.JSONOutputCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.JSONOutputHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ListBlobs - Lists blobs in a storage container.
func (client *xmlOperations) ListBlobs(ctx context.Context) (*XMLListBlobsResponse, error) {
	req, err := client.ListBlobsCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.ListBlobsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ListContainers - Lists containers in a storage account.
func (client *xmlOperations) ListContainers(ctx context.Context) (*XMLListContainersResponse, error) {
	req, err := client.ListContainersCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.ListContainersHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutACLs - Puts storage ACLs for a container.
func (client *xmlOperations) PutACLs(ctx context.Context, properties []SignedIDentifier) (*XMLPutACLsResponse, error) {
	req, err := client.PutACLsCreateRequest(*client.u, properties)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutACLsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutComplexTypeRefNoMeta - Puts a complex type that has a ref to a complex type with no XML node
func (client *xmlOperations) PutComplexTypeRefNoMeta(ctx context.Context, model RootWithRefAndNoMeta) (*XMLPutComplexTypeRefNoMetaResponse, error) {
	req, err := client.PutComplexTypeRefNoMetaCreateRequest(*client.u, model)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutComplexTypeRefNoMetaHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutComplexTypeRefWithMeta - Puts a complex type that has a ref to a complex type with XML node
func (client *xmlOperations) PutComplexTypeRefWithMeta(ctx context.Context, model RootWithRefAndMeta) (*XMLPutComplexTypeRefWithMetaResponse, error) {
	req, err := client.PutComplexTypeRefWithMetaCreateRequest(*client.u, model)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutComplexTypeRefWithMetaHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutEmptyChildElement - Puts a value with an empty child element.
func (client *xmlOperations) PutEmptyChildElement(ctx context.Context, banana Banana) (*XMLPutEmptyChildElementResponse, error) {
	req, err := client.PutEmptyChildElementCreateRequest(*client.u, banana)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutEmptyChildElementHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutEmptyList - Puts an empty list.
func (client *xmlOperations) PutEmptyList(ctx context.Context, slideshow Slideshow) (*XMLPutEmptyListResponse, error) {
	req, err := client.PutEmptyListCreateRequest(*client.u, slideshow)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutEmptyListHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutEmptyRootList - Puts an empty list as the root element.
func (client *xmlOperations) PutEmptyRootList(ctx context.Context, bananas []Banana) (*XMLPutEmptyRootListResponse, error) {
	req, err := client.PutEmptyRootListCreateRequest(*client.u, bananas)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutEmptyRootListHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutEmptyWrappedLists - Puts some empty wrapped lists.
func (client *xmlOperations) PutEmptyWrappedLists(ctx context.Context, appleBarrel AppleBarrel) (*XMLPutEmptyWrappedListsResponse, error) {
	req, err := client.PutEmptyWrappedListsCreateRequest(*client.u, appleBarrel)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutEmptyWrappedListsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutRootList - Puts a list as the root element.
func (client *xmlOperations) PutRootList(ctx context.Context, bananas []Banana) (*XMLPutRootListResponse, error) {
	req, err := client.PutRootListCreateRequest(*client.u, bananas)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutRootListHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutRootListSingleItem - Puts a list with a single item.
func (client *xmlOperations) PutRootListSingleItem(ctx context.Context, bananas []Banana) (*XMLPutRootListSingleItemResponse, error) {
	req, err := client.PutRootListSingleItemCreateRequest(*client.u, bananas)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutRootListSingleItemHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutServiceProperties - Puts storage service properties.
func (client *xmlOperations) PutServiceProperties(ctx context.Context, properties StorageServiceProperties) (*XMLPutServicePropertiesResponse, error) {
	req, err := client.PutServicePropertiesCreateRequest(*client.u, properties)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutServicePropertiesHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutSimple - Put a simple XML document
func (client *xmlOperations) PutSimple(ctx context.Context, slideshow Slideshow) (*XMLPutSimpleResponse, error) {
	req, err := client.PutSimpleCreateRequest(*client.u, slideshow)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutSimpleHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutWrappedLists - Put an XML document with multiple wrapped lists
func (client *xmlOperations) PutWrappedLists(ctx context.Context, wrappedLists AppleBarrel) (*XMLPutWrappedListsResponse, error) {
	req, err := client.PutWrappedListsCreateRequest(*client.u, wrappedLists)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutWrappedListsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

var _ XMLOperations = (*xmlOperations)(nil)
