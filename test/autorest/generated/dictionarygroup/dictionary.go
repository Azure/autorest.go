// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package dictionarygroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"time"
)

// DictionaryOperations contains the methods for the Dictionary group.
type DictionaryOperations interface {
	// GetArrayEmpty - Get an empty dictionary {}
	GetArrayEmpty(ctx context.Context) (*MapOfStringArrayResponse, error)
	// GetArrayItemEmpty - Get an array of array of strings [{"0": ["1", "2", "3"], "1": [], "2": ["7", "8", "9"]}
	GetArrayItemEmpty(ctx context.Context) (*MapOfStringArrayResponse, error)
	// GetArrayItemNull - Get an dictionary of array of strings {"0": ["1", "2", "3"], "1": null, "2": ["7", "8", "9"]}
	GetArrayItemNull(ctx context.Context) (*MapOfStringArrayResponse, error)
	// GetArrayNull - Get a null array
	GetArrayNull(ctx context.Context) (*MapOfStringArrayResponse, error)
	// GetArrayValid - Get an array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8", "9"]}
	GetArrayValid(ctx context.Context) (*MapOfStringArrayResponse, error)
	// GetBase64URL - Get base64url dictionary value {"0": "a string that gets encoded with base64url", "1": "test string", "2": "Lorem ipsum"}
	GetBase64URL(ctx context.Context) (*MapOfByteArrayResponse, error)
	// GetBooleanInvalidNull - Get boolean dictionary value {"0": true, "1": null, "2": false }
	GetBooleanInvalidNull(ctx context.Context) (*MapOfBoolResponse, error)
	// GetBooleanInvalidString - Get boolean dictionary value '{"0": true, "1": "boolean", "2": false}'
	GetBooleanInvalidString(ctx context.Context) (*MapOfBoolResponse, error)
	// GetBooleanTfft - Get boolean dictionary value {"0": true, "1": false, "2": false, "3": true }
	GetBooleanTfft(ctx context.Context) (*MapOfBoolResponse, error)
	// GetByteInvalidNull - Get byte dictionary value {"0": hex(FF FF FF FA), "1": null} with the first item base64 encoded
	GetByteInvalidNull(ctx context.Context) (*MapOfByteArrayResponse, error)
	// GetByteValid - Get byte dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)} with each item encoded in base64
	GetByteValid(ctx context.Context) (*MapOfByteArrayResponse, error)
	// GetComplexEmpty - Get empty dictionary of complex type {}
	GetComplexEmpty(ctx context.Context) (*MapOfWidgetResponse, error)
	// GetComplexItemEmpty - Get dictionary of complex type with empty item {"0": {"integer": 1, "string": "2"}, "1:" {}, "2": {"integer": 5, "string": "6"}}
	GetComplexItemEmpty(ctx context.Context) (*MapOfWidgetResponse, error)
	// GetComplexItemNull - Get dictionary of complex type with null item {"0": {"integer": 1, "string": "2"}, "1": null, "2": {"integer": 5, "string": "6"}}
	GetComplexItemNull(ctx context.Context) (*MapOfWidgetResponse, error)
	// GetComplexNull - Get dictionary of complex type null value
	GetComplexNull(ctx context.Context) (*MapOfWidgetResponse, error)
	// GetComplexValid - Get dictionary of complex type with {"0": {"integer": 1, "string": "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}
	GetComplexValid(ctx context.Context) (*MapOfWidgetResponse, error)
	// GetDateInvalidChars - Get date dictionary value {"0": "2011-03-22", "1": "date"}
	GetDateInvalidChars(ctx context.Context) (*MapOfTimeResponse, error)
	// GetDateInvalidNull - Get date dictionary value {"0": "2012-01-01", "1": null, "2": "1776-07-04"}
	GetDateInvalidNull(ctx context.Context) (*MapOfTimeResponse, error)
	// GetDateTimeInvalidChars - Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": "date-time"}
	GetDateTimeInvalidChars(ctx context.Context) (*MapOfTimeResponse, error)
	// GetDateTimeInvalidNull - Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": null}
	GetDateTimeInvalidNull(ctx context.Context) (*MapOfTimeResponse, error)
	// GetDateTimeRFC1123Valid - Get date-time-rfc1123 dictionary value {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}
	GetDateTimeRFC1123Valid(ctx context.Context) (*MapOfTimeResponse, error)
	// GetDateTimeValid - Get date-time dictionary value {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}
	GetDateTimeValid(ctx context.Context) (*MapOfTimeResponse, error)
	// GetDateValid - Get integer dictionary value {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}
	GetDateValid(ctx context.Context) (*MapOfTimeResponse, error)
	// GetDictionaryEmpty - Get an dictionaries of dictionaries of type <string, string> with value {}
	GetDictionaryEmpty(ctx context.Context) (*MapOfInterfaceResponse, error)
	// GetDictionaryItemEmpty - Get an dictionaries of dictionaries of type <string, string> with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
	GetDictionaryItemEmpty(ctx context.Context) (*MapOfInterfaceResponse, error)
	// GetDictionaryItemNull - Get an dictionaries of dictionaries of type <string, string> with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": null, "2": {"7": "seven", "8": "eight", "9": "nine"}}
	GetDictionaryItemNull(ctx context.Context) (*MapOfInterfaceResponse, error)
	// GetDictionaryNull - Get an dictionaries of dictionaries with value null
	GetDictionaryNull(ctx context.Context) (*MapOfInterfaceResponse, error)
	// GetDictionaryValid - Get an dictionaries of dictionaries of type <string, string> with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
	GetDictionaryValid(ctx context.Context) (*MapOfInterfaceResponse, error)
	// GetDoubleInvalidNull - Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
	GetDoubleInvalidNull(ctx context.Context) (*MapOfFloat64Response, error)
	// GetDoubleInvalidString - Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
	GetDoubleInvalidString(ctx context.Context) (*MapOfFloat64Response, error)
	// GetDoubleValid - Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
	GetDoubleValid(ctx context.Context) (*MapOfFloat64Response, error)
	// GetDurationValid - Get duration dictionary value {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}
	GetDurationValid(ctx context.Context) (*MapOfDurationResponse, error)
	// GetEmpty - Get empty dictionary value {}
	GetEmpty(ctx context.Context) (*MapOfInt32Response, error)
	// GetEmptyStringKey - Get Dictionary with key as empty string
	GetEmptyStringKey(ctx context.Context) (*MapOfStringResponse, error)
	// GetFloatInvalidNull - Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
	GetFloatInvalidNull(ctx context.Context) (*MapOfFloat32Response, error)
	// GetFloatInvalidString - Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
	GetFloatInvalidString(ctx context.Context) (*MapOfFloat32Response, error)
	// GetFloatValid - Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
	GetFloatValid(ctx context.Context) (*MapOfFloat32Response, error)
	// GetIntInvalidNull - Get integer dictionary value {"0": 1, "1": null, "2": 0}
	GetIntInvalidNull(ctx context.Context) (*MapOfInt32Response, error)
	// GetIntInvalidString - Get integer dictionary value {"0": 1, "1": "integer", "2": 0}
	GetIntInvalidString(ctx context.Context) (*MapOfInt32Response, error)
	// GetIntegerValid - Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
	GetIntegerValid(ctx context.Context) (*MapOfInt32Response, error)
	// GetInvalid - Get invalid Dictionary value
	GetInvalid(ctx context.Context) (*MapOfStringResponse, error)
	// GetLongInvalidNull - Get long dictionary value {"0": 1, "1": null, "2": 0}
	GetLongInvalidNull(ctx context.Context) (*MapOfInt64Response, error)
	// GetLongInvalidString - Get long dictionary value {"0": 1, "1": "integer", "2": 0}
	GetLongInvalidString(ctx context.Context) (*MapOfInt64Response, error)
	// GetLongValid - Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
	GetLongValid(ctx context.Context) (*MapOfInt64Response, error)
	// GetNull - Get null dictionary value
	GetNull(ctx context.Context) (*MapOfInt32Response, error)
	// GetNullKey - Get Dictionary with null key
	GetNullKey(ctx context.Context) (*MapOfStringResponse, error)
	// GetNullValue - Get Dictionary with null value
	GetNullValue(ctx context.Context) (*MapOfStringResponse, error)
	// GetStringValid - Get string dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
	GetStringValid(ctx context.Context) (*MapOfStringResponse, error)
	// GetStringWithInvalid - Get string dictionary value {"0": "foo", "1": 123, "2": "foo2"}
	GetStringWithInvalid(ctx context.Context) (*MapOfStringResponse, error)
	// GetStringWithNull - Get string dictionary value {"0": "foo", "1": null, "2": "foo2"}
	GetStringWithNull(ctx context.Context) (*MapOfStringResponse, error)
	// PutArrayValid - Put An array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8", "9"]}
	PutArrayValid(ctx context.Context, arrayBody map[string][]string) (*http.Response, error)
	// PutBooleanTfft - Set dictionary value empty {"0": true, "1": false, "2": false, "3": true }
	PutBooleanTfft(ctx context.Context, arrayBody map[string]bool) (*http.Response, error)
	// PutByteValid - Put the dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)} with each elementencoded in base 64
	PutByteValid(ctx context.Context, arrayBody map[string][]byte) (*http.Response, error)
	// PutComplexValid - Put an dictionary of complex type with values {"0": {"integer": 1, "string": "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}
	PutComplexValid(ctx context.Context, arrayBody map[string]Widget) (*http.Response, error)
	// PutDateTimeRFC1123Valid - Set dictionary value empty {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}
	PutDateTimeRFC1123Valid(ctx context.Context, arrayBody map[string]time.Time) (*http.Response, error)
	// PutDateTimeValid - Set dictionary value  {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}
	PutDateTimeValid(ctx context.Context, arrayBody map[string]time.Time) (*http.Response, error)
	// PutDateValid - Set dictionary value  {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}
	PutDateValid(ctx context.Context, arrayBody map[string]time.Time) (*http.Response, error)
	// PutDictionaryValid - Get an dictionaries of dictionaries of type <string, string> with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
	PutDictionaryValid(ctx context.Context, arrayBody map[string]interface{}) (*http.Response, error)
	// PutDoubleValid - Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
	PutDoubleValid(ctx context.Context, arrayBody map[string]float64) (*http.Response, error)
	// PutDurationValid - Set dictionary value  {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}
	PutDurationValid(ctx context.Context, arrayBody map[string]time.Duration) (*http.Response, error)
	// PutEmpty - Set dictionary value empty {}
	PutEmpty(ctx context.Context, arrayBody map[string]string) (*http.Response, error)
	// PutFloatValid - Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
	PutFloatValid(ctx context.Context, arrayBody map[string]float32) (*http.Response, error)
	// PutIntegerValid - Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
	PutIntegerValid(ctx context.Context, arrayBody map[string]int32) (*http.Response, error)
	// PutLongValid - Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
	PutLongValid(ctx context.Context, arrayBody map[string]int64) (*http.Response, error)
	// PutStringValid - Set dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
	PutStringValid(ctx context.Context, arrayBody map[string]string) (*http.Response, error)
}

// dictionaryOperations implements the DictionaryOperations interface.
type dictionaryOperations struct {
	*Client
}

// GetArrayEmpty - Get an empty dictionary {}
func (client *dictionaryOperations) GetArrayEmpty(ctx context.Context) (*MapOfStringArrayResponse, error) {
	req, err := client.getArrayEmptyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getArrayEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getArrayEmptyCreateRequest creates the GetArrayEmpty request.
func (client *dictionaryOperations) getArrayEmptyCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/array/empty"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getArrayEmptyHandleResponse handles the GetArrayEmpty response.
func (client *dictionaryOperations) getArrayEmptyHandleResponse(resp *azcore.Response) (*MapOfStringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getArrayEmptyHandleError(resp)
	}
	result := MapOfStringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getArrayEmptyHandleError handles the GetArrayEmpty error response.
func (client *dictionaryOperations) getArrayEmptyHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetArrayItemEmpty - Get an array of array of strings [{"0": ["1", "2", "3"], "1": [], "2": ["7", "8", "9"]}
func (client *dictionaryOperations) GetArrayItemEmpty(ctx context.Context) (*MapOfStringArrayResponse, error) {
	req, err := client.getArrayItemEmptyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getArrayItemEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getArrayItemEmptyCreateRequest creates the GetArrayItemEmpty request.
func (client *dictionaryOperations) getArrayItemEmptyCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/array/itemempty"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getArrayItemEmptyHandleResponse handles the GetArrayItemEmpty response.
func (client *dictionaryOperations) getArrayItemEmptyHandleResponse(resp *azcore.Response) (*MapOfStringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getArrayItemEmptyHandleError(resp)
	}
	result := MapOfStringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getArrayItemEmptyHandleError handles the GetArrayItemEmpty error response.
func (client *dictionaryOperations) getArrayItemEmptyHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetArrayItemNull - Get an dictionary of array of strings {"0": ["1", "2", "3"], "1": null, "2": ["7", "8", "9"]}
func (client *dictionaryOperations) GetArrayItemNull(ctx context.Context) (*MapOfStringArrayResponse, error) {
	req, err := client.getArrayItemNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getArrayItemNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getArrayItemNullCreateRequest creates the GetArrayItemNull request.
func (client *dictionaryOperations) getArrayItemNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/array/itemnull"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getArrayItemNullHandleResponse handles the GetArrayItemNull response.
func (client *dictionaryOperations) getArrayItemNullHandleResponse(resp *azcore.Response) (*MapOfStringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getArrayItemNullHandleError(resp)
	}
	result := MapOfStringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getArrayItemNullHandleError handles the GetArrayItemNull error response.
func (client *dictionaryOperations) getArrayItemNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetArrayNull - Get a null array
func (client *dictionaryOperations) GetArrayNull(ctx context.Context) (*MapOfStringArrayResponse, error) {
	req, err := client.getArrayNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getArrayNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getArrayNullCreateRequest creates the GetArrayNull request.
func (client *dictionaryOperations) getArrayNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/array/null"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getArrayNullHandleResponse handles the GetArrayNull response.
func (client *dictionaryOperations) getArrayNullHandleResponse(resp *azcore.Response) (*MapOfStringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getArrayNullHandleError(resp)
	}
	result := MapOfStringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getArrayNullHandleError handles the GetArrayNull error response.
func (client *dictionaryOperations) getArrayNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetArrayValid - Get an array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8", "9"]}
func (client *dictionaryOperations) GetArrayValid(ctx context.Context) (*MapOfStringArrayResponse, error) {
	req, err := client.getArrayValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getArrayValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getArrayValidCreateRequest creates the GetArrayValid request.
func (client *dictionaryOperations) getArrayValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/array/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getArrayValidHandleResponse handles the GetArrayValid response.
func (client *dictionaryOperations) getArrayValidHandleResponse(resp *azcore.Response) (*MapOfStringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getArrayValidHandleError(resp)
	}
	result := MapOfStringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getArrayValidHandleError handles the GetArrayValid error response.
func (client *dictionaryOperations) getArrayValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetBase64URL - Get base64url dictionary value {"0": "a string that gets encoded with base64url", "1": "test string", "2": "Lorem ipsum"}
func (client *dictionaryOperations) GetBase64URL(ctx context.Context) (*MapOfByteArrayResponse, error) {
	req, err := client.getBase64UrlCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getBase64UrlHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getBase64UrlCreateRequest creates the GetBase64URL request.
func (client *dictionaryOperations) getBase64UrlCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/base64url/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getBase64UrlHandleResponse handles the GetBase64URL response.
func (client *dictionaryOperations) getBase64UrlHandleResponse(resp *azcore.Response) (*MapOfByteArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getBase64UrlHandleError(resp)
	}
	result := MapOfByteArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getBase64UrlHandleError handles the GetBase64URL error response.
func (client *dictionaryOperations) getBase64UrlHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetBooleanInvalidNull - Get boolean dictionary value {"0": true, "1": null, "2": false }
func (client *dictionaryOperations) GetBooleanInvalidNull(ctx context.Context) (*MapOfBoolResponse, error) {
	req, err := client.getBooleanInvalidNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getBooleanInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getBooleanInvalidNullCreateRequest creates the GetBooleanInvalidNull request.
func (client *dictionaryOperations) getBooleanInvalidNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/boolean/true.null.false"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getBooleanInvalidNullHandleResponse handles the GetBooleanInvalidNull response.
func (client *dictionaryOperations) getBooleanInvalidNullHandleResponse(resp *azcore.Response) (*MapOfBoolResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getBooleanInvalidNullHandleError(resp)
	}
	result := MapOfBoolResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getBooleanInvalidNullHandleError handles the GetBooleanInvalidNull error response.
func (client *dictionaryOperations) getBooleanInvalidNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetBooleanInvalidString - Get boolean dictionary value '{"0": true, "1": "boolean", "2": false}'
func (client *dictionaryOperations) GetBooleanInvalidString(ctx context.Context) (*MapOfBoolResponse, error) {
	req, err := client.getBooleanInvalidStringCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getBooleanInvalidStringHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getBooleanInvalidStringCreateRequest creates the GetBooleanInvalidString request.
func (client *dictionaryOperations) getBooleanInvalidStringCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/boolean/true.boolean.false"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getBooleanInvalidStringHandleResponse handles the GetBooleanInvalidString response.
func (client *dictionaryOperations) getBooleanInvalidStringHandleResponse(resp *azcore.Response) (*MapOfBoolResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getBooleanInvalidStringHandleError(resp)
	}
	result := MapOfBoolResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getBooleanInvalidStringHandleError handles the GetBooleanInvalidString error response.
func (client *dictionaryOperations) getBooleanInvalidStringHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetBooleanTfft - Get boolean dictionary value {"0": true, "1": false, "2": false, "3": true }
func (client *dictionaryOperations) GetBooleanTfft(ctx context.Context) (*MapOfBoolResponse, error) {
	req, err := client.getBooleanTfftCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getBooleanTfftHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getBooleanTfftCreateRequest creates the GetBooleanTfft request.
func (client *dictionaryOperations) getBooleanTfftCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/boolean/tfft"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getBooleanTfftHandleResponse handles the GetBooleanTfft response.
func (client *dictionaryOperations) getBooleanTfftHandleResponse(resp *azcore.Response) (*MapOfBoolResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getBooleanTfftHandleError(resp)
	}
	result := MapOfBoolResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getBooleanTfftHandleError handles the GetBooleanTfft error response.
func (client *dictionaryOperations) getBooleanTfftHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetByteInvalidNull - Get byte dictionary value {"0": hex(FF FF FF FA), "1": null} with the first item base64 encoded
func (client *dictionaryOperations) GetByteInvalidNull(ctx context.Context) (*MapOfByteArrayResponse, error) {
	req, err := client.getByteInvalidNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getByteInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getByteInvalidNullCreateRequest creates the GetByteInvalidNull request.
func (client *dictionaryOperations) getByteInvalidNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/byte/invalidnull"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getByteInvalidNullHandleResponse handles the GetByteInvalidNull response.
func (client *dictionaryOperations) getByteInvalidNullHandleResponse(resp *azcore.Response) (*MapOfByteArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getByteInvalidNullHandleError(resp)
	}
	result := MapOfByteArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getByteInvalidNullHandleError handles the GetByteInvalidNull error response.
func (client *dictionaryOperations) getByteInvalidNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetByteValid - Get byte dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)} with each item encoded in base64
func (client *dictionaryOperations) GetByteValid(ctx context.Context) (*MapOfByteArrayResponse, error) {
	req, err := client.getByteValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getByteValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getByteValidCreateRequest creates the GetByteValid request.
func (client *dictionaryOperations) getByteValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/byte/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getByteValidHandleResponse handles the GetByteValid response.
func (client *dictionaryOperations) getByteValidHandleResponse(resp *azcore.Response) (*MapOfByteArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getByteValidHandleError(resp)
	}
	result := MapOfByteArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getByteValidHandleError handles the GetByteValid error response.
func (client *dictionaryOperations) getByteValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetComplexEmpty - Get empty dictionary of complex type {}
func (client *dictionaryOperations) GetComplexEmpty(ctx context.Context) (*MapOfWidgetResponse, error) {
	req, err := client.getComplexEmptyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getComplexEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getComplexEmptyCreateRequest creates the GetComplexEmpty request.
func (client *dictionaryOperations) getComplexEmptyCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/complex/empty"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getComplexEmptyHandleResponse handles the GetComplexEmpty response.
func (client *dictionaryOperations) getComplexEmptyHandleResponse(resp *azcore.Response) (*MapOfWidgetResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getComplexEmptyHandleError(resp)
	}
	result := MapOfWidgetResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getComplexEmptyHandleError handles the GetComplexEmpty error response.
func (client *dictionaryOperations) getComplexEmptyHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetComplexItemEmpty - Get dictionary of complex type with empty item {"0": {"integer": 1, "string": "2"}, "1:" {}, "2": {"integer": 5, "string": "6"}}
func (client *dictionaryOperations) GetComplexItemEmpty(ctx context.Context) (*MapOfWidgetResponse, error) {
	req, err := client.getComplexItemEmptyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getComplexItemEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getComplexItemEmptyCreateRequest creates the GetComplexItemEmpty request.
func (client *dictionaryOperations) getComplexItemEmptyCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/complex/itemempty"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getComplexItemEmptyHandleResponse handles the GetComplexItemEmpty response.
func (client *dictionaryOperations) getComplexItemEmptyHandleResponse(resp *azcore.Response) (*MapOfWidgetResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getComplexItemEmptyHandleError(resp)
	}
	result := MapOfWidgetResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getComplexItemEmptyHandleError handles the GetComplexItemEmpty error response.
func (client *dictionaryOperations) getComplexItemEmptyHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetComplexItemNull - Get dictionary of complex type with null item {"0": {"integer": 1, "string": "2"}, "1": null, "2": {"integer": 5, "string": "6"}}
func (client *dictionaryOperations) GetComplexItemNull(ctx context.Context) (*MapOfWidgetResponse, error) {
	req, err := client.getComplexItemNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getComplexItemNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getComplexItemNullCreateRequest creates the GetComplexItemNull request.
func (client *dictionaryOperations) getComplexItemNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/complex/itemnull"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getComplexItemNullHandleResponse handles the GetComplexItemNull response.
func (client *dictionaryOperations) getComplexItemNullHandleResponse(resp *azcore.Response) (*MapOfWidgetResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getComplexItemNullHandleError(resp)
	}
	result := MapOfWidgetResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getComplexItemNullHandleError handles the GetComplexItemNull error response.
func (client *dictionaryOperations) getComplexItemNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetComplexNull - Get dictionary of complex type null value
func (client *dictionaryOperations) GetComplexNull(ctx context.Context) (*MapOfWidgetResponse, error) {
	req, err := client.getComplexNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getComplexNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getComplexNullCreateRequest creates the GetComplexNull request.
func (client *dictionaryOperations) getComplexNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/complex/null"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getComplexNullHandleResponse handles the GetComplexNull response.
func (client *dictionaryOperations) getComplexNullHandleResponse(resp *azcore.Response) (*MapOfWidgetResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getComplexNullHandleError(resp)
	}
	result := MapOfWidgetResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getComplexNullHandleError handles the GetComplexNull error response.
func (client *dictionaryOperations) getComplexNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetComplexValid - Get dictionary of complex type with {"0": {"integer": 1, "string": "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}
func (client *dictionaryOperations) GetComplexValid(ctx context.Context) (*MapOfWidgetResponse, error) {
	req, err := client.getComplexValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getComplexValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getComplexValidCreateRequest creates the GetComplexValid request.
func (client *dictionaryOperations) getComplexValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/complex/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getComplexValidHandleResponse handles the GetComplexValid response.
func (client *dictionaryOperations) getComplexValidHandleResponse(resp *azcore.Response) (*MapOfWidgetResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getComplexValidHandleError(resp)
	}
	result := MapOfWidgetResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getComplexValidHandleError handles the GetComplexValid error response.
func (client *dictionaryOperations) getComplexValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDateInvalidChars - Get date dictionary value {"0": "2011-03-22", "1": "date"}
func (client *dictionaryOperations) GetDateInvalidChars(ctx context.Context) (*MapOfTimeResponse, error) {
	req, err := client.getDateInvalidCharsCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDateInvalidCharsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDateInvalidCharsCreateRequest creates the GetDateInvalidChars request.
func (client *dictionaryOperations) getDateInvalidCharsCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/date/invalidchars"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDateInvalidCharsHandleResponse handles the GetDateInvalidChars response.
func (client *dictionaryOperations) getDateInvalidCharsHandleResponse(resp *azcore.Response) (*MapOfTimeResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDateInvalidCharsHandleError(resp)
	}
	result := MapOfTimeResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getDateInvalidCharsHandleError handles the GetDateInvalidChars error response.
func (client *dictionaryOperations) getDateInvalidCharsHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDateInvalidNull - Get date dictionary value {"0": "2012-01-01", "1": null, "2": "1776-07-04"}
func (client *dictionaryOperations) GetDateInvalidNull(ctx context.Context) (*MapOfTimeResponse, error) {
	req, err := client.getDateInvalidNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDateInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDateInvalidNullCreateRequest creates the GetDateInvalidNull request.
func (client *dictionaryOperations) getDateInvalidNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/date/invalidnull"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDateInvalidNullHandleResponse handles the GetDateInvalidNull response.
func (client *dictionaryOperations) getDateInvalidNullHandleResponse(resp *azcore.Response) (*MapOfTimeResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDateInvalidNullHandleError(resp)
	}
	result := MapOfTimeResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getDateInvalidNullHandleError handles the GetDateInvalidNull error response.
func (client *dictionaryOperations) getDateInvalidNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDateTimeInvalidChars - Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": "date-time"}
func (client *dictionaryOperations) GetDateTimeInvalidChars(ctx context.Context) (*MapOfTimeResponse, error) {
	req, err := client.getDateTimeInvalidCharsCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDateTimeInvalidCharsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDateTimeInvalidCharsCreateRequest creates the GetDateTimeInvalidChars request.
func (client *dictionaryOperations) getDateTimeInvalidCharsCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/date-time/invalidchars"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDateTimeInvalidCharsHandleResponse handles the GetDateTimeInvalidChars response.
func (client *dictionaryOperations) getDateTimeInvalidCharsHandleResponse(resp *azcore.Response) (*MapOfTimeResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDateTimeInvalidCharsHandleError(resp)
	}
	aux := map[string]timeRFC3339{}
	if err := resp.UnmarshalAsJSON(&aux); err != nil {
		return nil, err
	}
	cp := map[string]time.Time{}
	for k, v := range aux {
		cp[k] = time.Time(v)
	}
	return &MapOfTimeResponse{RawResponse: resp.Response, Value: &cp}, nil
}

// getDateTimeInvalidCharsHandleError handles the GetDateTimeInvalidChars error response.
func (client *dictionaryOperations) getDateTimeInvalidCharsHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDateTimeInvalidNull - Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": null}
func (client *dictionaryOperations) GetDateTimeInvalidNull(ctx context.Context) (*MapOfTimeResponse, error) {
	req, err := client.getDateTimeInvalidNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDateTimeInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDateTimeInvalidNullCreateRequest creates the GetDateTimeInvalidNull request.
func (client *dictionaryOperations) getDateTimeInvalidNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/date-time/invalidnull"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDateTimeInvalidNullHandleResponse handles the GetDateTimeInvalidNull response.
func (client *dictionaryOperations) getDateTimeInvalidNullHandleResponse(resp *azcore.Response) (*MapOfTimeResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDateTimeInvalidNullHandleError(resp)
	}
	aux := map[string]timeRFC3339{}
	if err := resp.UnmarshalAsJSON(&aux); err != nil {
		return nil, err
	}
	cp := map[string]time.Time{}
	for k, v := range aux {
		cp[k] = time.Time(v)
	}
	return &MapOfTimeResponse{RawResponse: resp.Response, Value: &cp}, nil
}

// getDateTimeInvalidNullHandleError handles the GetDateTimeInvalidNull error response.
func (client *dictionaryOperations) getDateTimeInvalidNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDateTimeRFC1123Valid - Get date-time-rfc1123 dictionary value {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}
func (client *dictionaryOperations) GetDateTimeRFC1123Valid(ctx context.Context) (*MapOfTimeResponse, error) {
	req, err := client.getDateTimeRfc1123ValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDateTimeRfc1123ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDateTimeRfc1123ValidCreateRequest creates the GetDateTimeRFC1123Valid request.
func (client *dictionaryOperations) getDateTimeRfc1123ValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/date-time-rfc1123/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDateTimeRfc1123ValidHandleResponse handles the GetDateTimeRFC1123Valid response.
func (client *dictionaryOperations) getDateTimeRfc1123ValidHandleResponse(resp *azcore.Response) (*MapOfTimeResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDateTimeRfc1123ValidHandleError(resp)
	}
	aux := map[string]timeRFC1123{}
	if err := resp.UnmarshalAsJSON(&aux); err != nil {
		return nil, err
	}
	cp := map[string]time.Time{}
	for k, v := range aux {
		cp[k] = time.Time(v)
	}
	return &MapOfTimeResponse{RawResponse: resp.Response, Value: &cp}, nil
}

// getDateTimeRfc1123ValidHandleError handles the GetDateTimeRFC1123Valid error response.
func (client *dictionaryOperations) getDateTimeRfc1123ValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDateTimeValid - Get date-time dictionary value {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}
func (client *dictionaryOperations) GetDateTimeValid(ctx context.Context) (*MapOfTimeResponse, error) {
	req, err := client.getDateTimeValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDateTimeValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDateTimeValidCreateRequest creates the GetDateTimeValid request.
func (client *dictionaryOperations) getDateTimeValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/date-time/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDateTimeValidHandleResponse handles the GetDateTimeValid response.
func (client *dictionaryOperations) getDateTimeValidHandleResponse(resp *azcore.Response) (*MapOfTimeResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDateTimeValidHandleError(resp)
	}
	aux := map[string]timeRFC3339{}
	if err := resp.UnmarshalAsJSON(&aux); err != nil {
		return nil, err
	}
	cp := map[string]time.Time{}
	for k, v := range aux {
		cp[k] = time.Time(v)
	}
	return &MapOfTimeResponse{RawResponse: resp.Response, Value: &cp}, nil
}

// getDateTimeValidHandleError handles the GetDateTimeValid error response.
func (client *dictionaryOperations) getDateTimeValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDateValid - Get integer dictionary value {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}
func (client *dictionaryOperations) GetDateValid(ctx context.Context) (*MapOfTimeResponse, error) {
	req, err := client.getDateValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDateValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDateValidCreateRequest creates the GetDateValid request.
func (client *dictionaryOperations) getDateValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/date/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDateValidHandleResponse handles the GetDateValid response.
func (client *dictionaryOperations) getDateValidHandleResponse(resp *azcore.Response) (*MapOfTimeResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDateValidHandleError(resp)
	}
	result := MapOfTimeResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getDateValidHandleError handles the GetDateValid error response.
func (client *dictionaryOperations) getDateValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDictionaryEmpty - Get an dictionaries of dictionaries of type <string, string> with value {}
func (client *dictionaryOperations) GetDictionaryEmpty(ctx context.Context) (*MapOfInterfaceResponse, error) {
	req, err := client.getDictionaryEmptyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDictionaryEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDictionaryEmptyCreateRequest creates the GetDictionaryEmpty request.
func (client *dictionaryOperations) getDictionaryEmptyCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/dictionary/empty"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDictionaryEmptyHandleResponse handles the GetDictionaryEmpty response.
func (client *dictionaryOperations) getDictionaryEmptyHandleResponse(resp *azcore.Response) (*MapOfInterfaceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDictionaryEmptyHandleError(resp)
	}
	result := MapOfInterfaceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getDictionaryEmptyHandleError handles the GetDictionaryEmpty error response.
func (client *dictionaryOperations) getDictionaryEmptyHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDictionaryItemEmpty - Get an dictionaries of dictionaries of type <string, string> with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
func (client *dictionaryOperations) GetDictionaryItemEmpty(ctx context.Context) (*MapOfInterfaceResponse, error) {
	req, err := client.getDictionaryItemEmptyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDictionaryItemEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDictionaryItemEmptyCreateRequest creates the GetDictionaryItemEmpty request.
func (client *dictionaryOperations) getDictionaryItemEmptyCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/dictionary/itemempty"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDictionaryItemEmptyHandleResponse handles the GetDictionaryItemEmpty response.
func (client *dictionaryOperations) getDictionaryItemEmptyHandleResponse(resp *azcore.Response) (*MapOfInterfaceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDictionaryItemEmptyHandleError(resp)
	}
	result := MapOfInterfaceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getDictionaryItemEmptyHandleError handles the GetDictionaryItemEmpty error response.
func (client *dictionaryOperations) getDictionaryItemEmptyHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDictionaryItemNull - Get an dictionaries of dictionaries of type <string, string> with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": null, "2": {"7": "seven", "8": "eight", "9": "nine"}}
func (client *dictionaryOperations) GetDictionaryItemNull(ctx context.Context) (*MapOfInterfaceResponse, error) {
	req, err := client.getDictionaryItemNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDictionaryItemNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDictionaryItemNullCreateRequest creates the GetDictionaryItemNull request.
func (client *dictionaryOperations) getDictionaryItemNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/dictionary/itemnull"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDictionaryItemNullHandleResponse handles the GetDictionaryItemNull response.
func (client *dictionaryOperations) getDictionaryItemNullHandleResponse(resp *azcore.Response) (*MapOfInterfaceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDictionaryItemNullHandleError(resp)
	}
	result := MapOfInterfaceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getDictionaryItemNullHandleError handles the GetDictionaryItemNull error response.
func (client *dictionaryOperations) getDictionaryItemNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDictionaryNull - Get an dictionaries of dictionaries with value null
func (client *dictionaryOperations) GetDictionaryNull(ctx context.Context) (*MapOfInterfaceResponse, error) {
	req, err := client.getDictionaryNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDictionaryNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDictionaryNullCreateRequest creates the GetDictionaryNull request.
func (client *dictionaryOperations) getDictionaryNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/dictionary/null"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDictionaryNullHandleResponse handles the GetDictionaryNull response.
func (client *dictionaryOperations) getDictionaryNullHandleResponse(resp *azcore.Response) (*MapOfInterfaceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDictionaryNullHandleError(resp)
	}
	result := MapOfInterfaceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getDictionaryNullHandleError handles the GetDictionaryNull error response.
func (client *dictionaryOperations) getDictionaryNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDictionaryValid - Get an dictionaries of dictionaries of type <string, string> with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
func (client *dictionaryOperations) GetDictionaryValid(ctx context.Context) (*MapOfInterfaceResponse, error) {
	req, err := client.getDictionaryValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDictionaryValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDictionaryValidCreateRequest creates the GetDictionaryValid request.
func (client *dictionaryOperations) getDictionaryValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/dictionary/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDictionaryValidHandleResponse handles the GetDictionaryValid response.
func (client *dictionaryOperations) getDictionaryValidHandleResponse(resp *azcore.Response) (*MapOfInterfaceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDictionaryValidHandleError(resp)
	}
	result := MapOfInterfaceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getDictionaryValidHandleError handles the GetDictionaryValid error response.
func (client *dictionaryOperations) getDictionaryValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDoubleInvalidNull - Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
func (client *dictionaryOperations) GetDoubleInvalidNull(ctx context.Context) (*MapOfFloat64Response, error) {
	req, err := client.getDoubleInvalidNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDoubleInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDoubleInvalidNullCreateRequest creates the GetDoubleInvalidNull request.
func (client *dictionaryOperations) getDoubleInvalidNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/double/0.0-null-1.2e20"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDoubleInvalidNullHandleResponse handles the GetDoubleInvalidNull response.
func (client *dictionaryOperations) getDoubleInvalidNullHandleResponse(resp *azcore.Response) (*MapOfFloat64Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDoubleInvalidNullHandleError(resp)
	}
	result := MapOfFloat64Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getDoubleInvalidNullHandleError handles the GetDoubleInvalidNull error response.
func (client *dictionaryOperations) getDoubleInvalidNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDoubleInvalidString - Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
func (client *dictionaryOperations) GetDoubleInvalidString(ctx context.Context) (*MapOfFloat64Response, error) {
	req, err := client.getDoubleInvalidStringCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDoubleInvalidStringHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDoubleInvalidStringCreateRequest creates the GetDoubleInvalidString request.
func (client *dictionaryOperations) getDoubleInvalidStringCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/double/1.number.0"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDoubleInvalidStringHandleResponse handles the GetDoubleInvalidString response.
func (client *dictionaryOperations) getDoubleInvalidStringHandleResponse(resp *azcore.Response) (*MapOfFloat64Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDoubleInvalidStringHandleError(resp)
	}
	result := MapOfFloat64Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getDoubleInvalidStringHandleError handles the GetDoubleInvalidString error response.
func (client *dictionaryOperations) getDoubleInvalidStringHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDoubleValid - Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
func (client *dictionaryOperations) GetDoubleValid(ctx context.Context) (*MapOfFloat64Response, error) {
	req, err := client.getDoubleValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDoubleValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDoubleValidCreateRequest creates the GetDoubleValid request.
func (client *dictionaryOperations) getDoubleValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/double/0--0.01-1.2e20"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDoubleValidHandleResponse handles the GetDoubleValid response.
func (client *dictionaryOperations) getDoubleValidHandleResponse(resp *azcore.Response) (*MapOfFloat64Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDoubleValidHandleError(resp)
	}
	result := MapOfFloat64Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getDoubleValidHandleError handles the GetDoubleValid error response.
func (client *dictionaryOperations) getDoubleValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDurationValid - Get duration dictionary value {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}
func (client *dictionaryOperations) GetDurationValid(ctx context.Context) (*MapOfDurationResponse, error) {
	req, err := client.getDurationValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDurationValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDurationValidCreateRequest creates the GetDurationValid request.
func (client *dictionaryOperations) getDurationValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/duration/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDurationValidHandleResponse handles the GetDurationValid response.
func (client *dictionaryOperations) getDurationValidHandleResponse(resp *azcore.Response) (*MapOfDurationResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDurationValidHandleError(resp)
	}
	result := MapOfDurationResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getDurationValidHandleError handles the GetDurationValid error response.
func (client *dictionaryOperations) getDurationValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetEmpty - Get empty dictionary value {}
func (client *dictionaryOperations) GetEmpty(ctx context.Context) (*MapOfInt32Response, error) {
	req, err := client.getEmptyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getEmptyCreateRequest creates the GetEmpty request.
func (client *dictionaryOperations) getEmptyCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/empty"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getEmptyHandleResponse handles the GetEmpty response.
func (client *dictionaryOperations) getEmptyHandleResponse(resp *azcore.Response) (*MapOfInt32Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getEmptyHandleError(resp)
	}
	result := MapOfInt32Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getEmptyHandleError handles the GetEmpty error response.
func (client *dictionaryOperations) getEmptyHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetEmptyStringKey - Get Dictionary with key as empty string
func (client *dictionaryOperations) GetEmptyStringKey(ctx context.Context) (*MapOfStringResponse, error) {
	req, err := client.getEmptyStringKeyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getEmptyStringKeyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getEmptyStringKeyCreateRequest creates the GetEmptyStringKey request.
func (client *dictionaryOperations) getEmptyStringKeyCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/keyemptystring"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getEmptyStringKeyHandleResponse handles the GetEmptyStringKey response.
func (client *dictionaryOperations) getEmptyStringKeyHandleResponse(resp *azcore.Response) (*MapOfStringResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getEmptyStringKeyHandleError(resp)
	}
	result := MapOfStringResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getEmptyStringKeyHandleError handles the GetEmptyStringKey error response.
func (client *dictionaryOperations) getEmptyStringKeyHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetFloatInvalidNull - Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
func (client *dictionaryOperations) GetFloatInvalidNull(ctx context.Context) (*MapOfFloat32Response, error) {
	req, err := client.getFloatInvalidNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getFloatInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getFloatInvalidNullCreateRequest creates the GetFloatInvalidNull request.
func (client *dictionaryOperations) getFloatInvalidNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/float/0.0-null-1.2e20"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getFloatInvalidNullHandleResponse handles the GetFloatInvalidNull response.
func (client *dictionaryOperations) getFloatInvalidNullHandleResponse(resp *azcore.Response) (*MapOfFloat32Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getFloatInvalidNullHandleError(resp)
	}
	result := MapOfFloat32Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getFloatInvalidNullHandleError handles the GetFloatInvalidNull error response.
func (client *dictionaryOperations) getFloatInvalidNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetFloatInvalidString - Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
func (client *dictionaryOperations) GetFloatInvalidString(ctx context.Context) (*MapOfFloat32Response, error) {
	req, err := client.getFloatInvalidStringCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getFloatInvalidStringHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getFloatInvalidStringCreateRequest creates the GetFloatInvalidString request.
func (client *dictionaryOperations) getFloatInvalidStringCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/float/1.number.0"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getFloatInvalidStringHandleResponse handles the GetFloatInvalidString response.
func (client *dictionaryOperations) getFloatInvalidStringHandleResponse(resp *azcore.Response) (*MapOfFloat32Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getFloatInvalidStringHandleError(resp)
	}
	result := MapOfFloat32Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getFloatInvalidStringHandleError handles the GetFloatInvalidString error response.
func (client *dictionaryOperations) getFloatInvalidStringHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetFloatValid - Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
func (client *dictionaryOperations) GetFloatValid(ctx context.Context) (*MapOfFloat32Response, error) {
	req, err := client.getFloatValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getFloatValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getFloatValidCreateRequest creates the GetFloatValid request.
func (client *dictionaryOperations) getFloatValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/float/0--0.01-1.2e20"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getFloatValidHandleResponse handles the GetFloatValid response.
func (client *dictionaryOperations) getFloatValidHandleResponse(resp *azcore.Response) (*MapOfFloat32Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getFloatValidHandleError(resp)
	}
	result := MapOfFloat32Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getFloatValidHandleError handles the GetFloatValid error response.
func (client *dictionaryOperations) getFloatValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetIntInvalidNull - Get integer dictionary value {"0": 1, "1": null, "2": 0}
func (client *dictionaryOperations) GetIntInvalidNull(ctx context.Context) (*MapOfInt32Response, error) {
	req, err := client.getIntInvalidNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getIntInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getIntInvalidNullCreateRequest creates the GetIntInvalidNull request.
func (client *dictionaryOperations) getIntInvalidNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/integer/1.null.zero"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getIntInvalidNullHandleResponse handles the GetIntInvalidNull response.
func (client *dictionaryOperations) getIntInvalidNullHandleResponse(resp *azcore.Response) (*MapOfInt32Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getIntInvalidNullHandleError(resp)
	}
	result := MapOfInt32Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getIntInvalidNullHandleError handles the GetIntInvalidNull error response.
func (client *dictionaryOperations) getIntInvalidNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetIntInvalidString - Get integer dictionary value {"0": 1, "1": "integer", "2": 0}
func (client *dictionaryOperations) GetIntInvalidString(ctx context.Context) (*MapOfInt32Response, error) {
	req, err := client.getIntInvalidStringCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getIntInvalidStringHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getIntInvalidStringCreateRequest creates the GetIntInvalidString request.
func (client *dictionaryOperations) getIntInvalidStringCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/integer/1.integer.0"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getIntInvalidStringHandleResponse handles the GetIntInvalidString response.
func (client *dictionaryOperations) getIntInvalidStringHandleResponse(resp *azcore.Response) (*MapOfInt32Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getIntInvalidStringHandleError(resp)
	}
	result := MapOfInt32Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getIntInvalidStringHandleError handles the GetIntInvalidString error response.
func (client *dictionaryOperations) getIntInvalidStringHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetIntegerValid - Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
func (client *dictionaryOperations) GetIntegerValid(ctx context.Context) (*MapOfInt32Response, error) {
	req, err := client.getIntegerValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getIntegerValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getIntegerValidCreateRequest creates the GetIntegerValid request.
func (client *dictionaryOperations) getIntegerValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/integer/1.-1.3.300"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getIntegerValidHandleResponse handles the GetIntegerValid response.
func (client *dictionaryOperations) getIntegerValidHandleResponse(resp *azcore.Response) (*MapOfInt32Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getIntegerValidHandleError(resp)
	}
	result := MapOfInt32Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getIntegerValidHandleError handles the GetIntegerValid error response.
func (client *dictionaryOperations) getIntegerValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetInvalid - Get invalid Dictionary value
func (client *dictionaryOperations) GetInvalid(ctx context.Context) (*MapOfStringResponse, error) {
	req, err := client.getInvalidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getInvalidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getInvalidCreateRequest creates the GetInvalid request.
func (client *dictionaryOperations) getInvalidCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/invalid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getInvalidHandleResponse handles the GetInvalid response.
func (client *dictionaryOperations) getInvalidHandleResponse(resp *azcore.Response) (*MapOfStringResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getInvalidHandleError(resp)
	}
	result := MapOfStringResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getInvalidHandleError handles the GetInvalid error response.
func (client *dictionaryOperations) getInvalidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetLongInvalidNull - Get long dictionary value {"0": 1, "1": null, "2": 0}
func (client *dictionaryOperations) GetLongInvalidNull(ctx context.Context) (*MapOfInt64Response, error) {
	req, err := client.getLongInvalidNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getLongInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getLongInvalidNullCreateRequest creates the GetLongInvalidNull request.
func (client *dictionaryOperations) getLongInvalidNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/long/1.null.zero"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getLongInvalidNullHandleResponse handles the GetLongInvalidNull response.
func (client *dictionaryOperations) getLongInvalidNullHandleResponse(resp *azcore.Response) (*MapOfInt64Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getLongInvalidNullHandleError(resp)
	}
	result := MapOfInt64Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getLongInvalidNullHandleError handles the GetLongInvalidNull error response.
func (client *dictionaryOperations) getLongInvalidNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetLongInvalidString - Get long dictionary value {"0": 1, "1": "integer", "2": 0}
func (client *dictionaryOperations) GetLongInvalidString(ctx context.Context) (*MapOfInt64Response, error) {
	req, err := client.getLongInvalidStringCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getLongInvalidStringHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getLongInvalidStringCreateRequest creates the GetLongInvalidString request.
func (client *dictionaryOperations) getLongInvalidStringCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/long/1.integer.0"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getLongInvalidStringHandleResponse handles the GetLongInvalidString response.
func (client *dictionaryOperations) getLongInvalidStringHandleResponse(resp *azcore.Response) (*MapOfInt64Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getLongInvalidStringHandleError(resp)
	}
	result := MapOfInt64Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getLongInvalidStringHandleError handles the GetLongInvalidString error response.
func (client *dictionaryOperations) getLongInvalidStringHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetLongValid - Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
func (client *dictionaryOperations) GetLongValid(ctx context.Context) (*MapOfInt64Response, error) {
	req, err := client.getLongValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getLongValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getLongValidCreateRequest creates the GetLongValid request.
func (client *dictionaryOperations) getLongValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/long/1.-1.3.300"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getLongValidHandleResponse handles the GetLongValid response.
func (client *dictionaryOperations) getLongValidHandleResponse(resp *azcore.Response) (*MapOfInt64Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getLongValidHandleError(resp)
	}
	result := MapOfInt64Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getLongValidHandleError handles the GetLongValid error response.
func (client *dictionaryOperations) getLongValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetNull - Get null dictionary value
func (client *dictionaryOperations) GetNull(ctx context.Context) (*MapOfInt32Response, error) {
	req, err := client.getNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getNullCreateRequest creates the GetNull request.
func (client *dictionaryOperations) getNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/null"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getNullHandleResponse handles the GetNull response.
func (client *dictionaryOperations) getNullHandleResponse(resp *azcore.Response) (*MapOfInt32Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getNullHandleError(resp)
	}
	result := MapOfInt32Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getNullHandleError handles the GetNull error response.
func (client *dictionaryOperations) getNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetNullKey - Get Dictionary with null key
func (client *dictionaryOperations) GetNullKey(ctx context.Context) (*MapOfStringResponse, error) {
	req, err := client.getNullKeyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getNullKeyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getNullKeyCreateRequest creates the GetNullKey request.
func (client *dictionaryOperations) getNullKeyCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/nullkey"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getNullKeyHandleResponse handles the GetNullKey response.
func (client *dictionaryOperations) getNullKeyHandleResponse(resp *azcore.Response) (*MapOfStringResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getNullKeyHandleError(resp)
	}
	result := MapOfStringResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getNullKeyHandleError handles the GetNullKey error response.
func (client *dictionaryOperations) getNullKeyHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetNullValue - Get Dictionary with null value
func (client *dictionaryOperations) GetNullValue(ctx context.Context) (*MapOfStringResponse, error) {
	req, err := client.getNullValueCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getNullValueHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getNullValueCreateRequest creates the GetNullValue request.
func (client *dictionaryOperations) getNullValueCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/nullvalue"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getNullValueHandleResponse handles the GetNullValue response.
func (client *dictionaryOperations) getNullValueHandleResponse(resp *azcore.Response) (*MapOfStringResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getNullValueHandleError(resp)
	}
	result := MapOfStringResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getNullValueHandleError handles the GetNullValue error response.
func (client *dictionaryOperations) getNullValueHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetStringValid - Get string dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
func (client *dictionaryOperations) GetStringValid(ctx context.Context) (*MapOfStringResponse, error) {
	req, err := client.getStringValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getStringValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getStringValidCreateRequest creates the GetStringValid request.
func (client *dictionaryOperations) getStringValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/string/foo1.foo2.foo3"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getStringValidHandleResponse handles the GetStringValid response.
func (client *dictionaryOperations) getStringValidHandleResponse(resp *azcore.Response) (*MapOfStringResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getStringValidHandleError(resp)
	}
	result := MapOfStringResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getStringValidHandleError handles the GetStringValid error response.
func (client *dictionaryOperations) getStringValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetStringWithInvalid - Get string dictionary value {"0": "foo", "1": 123, "2": "foo2"}
func (client *dictionaryOperations) GetStringWithInvalid(ctx context.Context) (*MapOfStringResponse, error) {
	req, err := client.getStringWithInvalidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getStringWithInvalidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getStringWithInvalidCreateRequest creates the GetStringWithInvalid request.
func (client *dictionaryOperations) getStringWithInvalidCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/string/foo.123.foo2"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getStringWithInvalidHandleResponse handles the GetStringWithInvalid response.
func (client *dictionaryOperations) getStringWithInvalidHandleResponse(resp *azcore.Response) (*MapOfStringResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getStringWithInvalidHandleError(resp)
	}
	result := MapOfStringResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getStringWithInvalidHandleError handles the GetStringWithInvalid error response.
func (client *dictionaryOperations) getStringWithInvalidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetStringWithNull - Get string dictionary value {"0": "foo", "1": null, "2": "foo2"}
func (client *dictionaryOperations) GetStringWithNull(ctx context.Context) (*MapOfStringResponse, error) {
	req, err := client.getStringWithNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getStringWithNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getStringWithNullCreateRequest creates the GetStringWithNull request.
func (client *dictionaryOperations) getStringWithNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/dictionary/prim/string/foo.null.foo2"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getStringWithNullHandleResponse handles the GetStringWithNull response.
func (client *dictionaryOperations) getStringWithNullHandleResponse(resp *azcore.Response) (*MapOfStringResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getStringWithNullHandleError(resp)
	}
	result := MapOfStringResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getStringWithNullHandleError handles the GetStringWithNull error response.
func (client *dictionaryOperations) getStringWithNullHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutArrayValid - Put An array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8", "9"]}
func (client *dictionaryOperations) PutArrayValid(ctx context.Context, arrayBody map[string][]string) (*http.Response, error) {
	req, err := client.putArrayValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putArrayValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putArrayValidCreateRequest creates the PutArrayValid request.
func (client *dictionaryOperations) putArrayValidCreateRequest(arrayBody map[string][]string) (*azcore.Request, error) {
	urlPath := "/dictionary/array/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putArrayValidHandleResponse handles the PutArrayValid response.
func (client *dictionaryOperations) putArrayValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putArrayValidHandleError(resp)
	}
	return resp.Response, nil
}

// putArrayValidHandleError handles the PutArrayValid error response.
func (client *dictionaryOperations) putArrayValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutBooleanTfft - Set dictionary value empty {"0": true, "1": false, "2": false, "3": true }
func (client *dictionaryOperations) PutBooleanTfft(ctx context.Context, arrayBody map[string]bool) (*http.Response, error) {
	req, err := client.putBooleanTfftCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putBooleanTfftHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putBooleanTfftCreateRequest creates the PutBooleanTfft request.
func (client *dictionaryOperations) putBooleanTfftCreateRequest(arrayBody map[string]bool) (*azcore.Request, error) {
	urlPath := "/dictionary/prim/boolean/tfft"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putBooleanTfftHandleResponse handles the PutBooleanTfft response.
func (client *dictionaryOperations) putBooleanTfftHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putBooleanTfftHandleError(resp)
	}
	return resp.Response, nil
}

// putBooleanTfftHandleError handles the PutBooleanTfft error response.
func (client *dictionaryOperations) putBooleanTfftHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutByteValid - Put the dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)} with each elementencoded in base 64
func (client *dictionaryOperations) PutByteValid(ctx context.Context, arrayBody map[string][]byte) (*http.Response, error) {
	req, err := client.putByteValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putByteValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putByteValidCreateRequest creates the PutByteValid request.
func (client *dictionaryOperations) putByteValidCreateRequest(arrayBody map[string][]byte) (*azcore.Request, error) {
	urlPath := "/dictionary/prim/byte/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putByteValidHandleResponse handles the PutByteValid response.
func (client *dictionaryOperations) putByteValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putByteValidHandleError(resp)
	}
	return resp.Response, nil
}

// putByteValidHandleError handles the PutByteValid error response.
func (client *dictionaryOperations) putByteValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutComplexValid - Put an dictionary of complex type with values {"0": {"integer": 1, "string": "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}
func (client *dictionaryOperations) PutComplexValid(ctx context.Context, arrayBody map[string]Widget) (*http.Response, error) {
	req, err := client.putComplexValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putComplexValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putComplexValidCreateRequest creates the PutComplexValid request.
func (client *dictionaryOperations) putComplexValidCreateRequest(arrayBody map[string]Widget) (*azcore.Request, error) {
	urlPath := "/dictionary/complex/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putComplexValidHandleResponse handles the PutComplexValid response.
func (client *dictionaryOperations) putComplexValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putComplexValidHandleError(resp)
	}
	return resp.Response, nil
}

// putComplexValidHandleError handles the PutComplexValid error response.
func (client *dictionaryOperations) putComplexValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutDateTimeRFC1123Valid - Set dictionary value empty {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}
func (client *dictionaryOperations) PutDateTimeRFC1123Valid(ctx context.Context, arrayBody map[string]time.Time) (*http.Response, error) {
	req, err := client.putDateTimeRfc1123ValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putDateTimeRfc1123ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putDateTimeRfc1123ValidCreateRequest creates the PutDateTimeRFC1123Valid request.
func (client *dictionaryOperations) putDateTimeRfc1123ValidCreateRequest(arrayBody map[string]time.Time) (*azcore.Request, error) {
	urlPath := "/dictionary/prim/date-time-rfc1123/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	aux := map[string]timeRFC1123{}
	for k, v := range arrayBody {
		aux[k] = timeRFC1123(v)
	}
	return req, req.MarshalAsJSON(aux)
}

// putDateTimeRfc1123ValidHandleResponse handles the PutDateTimeRFC1123Valid response.
func (client *dictionaryOperations) putDateTimeRfc1123ValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putDateTimeRfc1123ValidHandleError(resp)
	}
	return resp.Response, nil
}

// putDateTimeRfc1123ValidHandleError handles the PutDateTimeRFC1123Valid error response.
func (client *dictionaryOperations) putDateTimeRfc1123ValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutDateTimeValid - Set dictionary value  {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}
func (client *dictionaryOperations) PutDateTimeValid(ctx context.Context, arrayBody map[string]time.Time) (*http.Response, error) {
	req, err := client.putDateTimeValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putDateTimeValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putDateTimeValidCreateRequest creates the PutDateTimeValid request.
func (client *dictionaryOperations) putDateTimeValidCreateRequest(arrayBody map[string]time.Time) (*azcore.Request, error) {
	urlPath := "/dictionary/prim/date-time/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	aux := map[string]timeRFC3339{}
	for k, v := range arrayBody {
		aux[k] = timeRFC3339(v)
	}
	return req, req.MarshalAsJSON(aux)
}

// putDateTimeValidHandleResponse handles the PutDateTimeValid response.
func (client *dictionaryOperations) putDateTimeValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putDateTimeValidHandleError(resp)
	}
	return resp.Response, nil
}

// putDateTimeValidHandleError handles the PutDateTimeValid error response.
func (client *dictionaryOperations) putDateTimeValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutDateValid - Set dictionary value  {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}
func (client *dictionaryOperations) PutDateValid(ctx context.Context, arrayBody map[string]time.Time) (*http.Response, error) {
	req, err := client.putDateValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putDateValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putDateValidCreateRequest creates the PutDateValid request.
func (client *dictionaryOperations) putDateValidCreateRequest(arrayBody map[string]time.Time) (*azcore.Request, error) {
	urlPath := "/dictionary/prim/date/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putDateValidHandleResponse handles the PutDateValid response.
func (client *dictionaryOperations) putDateValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putDateValidHandleError(resp)
	}
	return resp.Response, nil
}

// putDateValidHandleError handles the PutDateValid error response.
func (client *dictionaryOperations) putDateValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutDictionaryValid - Get an dictionaries of dictionaries of type <string, string> with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
func (client *dictionaryOperations) PutDictionaryValid(ctx context.Context, arrayBody map[string]interface{}) (*http.Response, error) {
	req, err := client.putDictionaryValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putDictionaryValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putDictionaryValidCreateRequest creates the PutDictionaryValid request.
func (client *dictionaryOperations) putDictionaryValidCreateRequest(arrayBody map[string]interface{}) (*azcore.Request, error) {
	urlPath := "/dictionary/dictionary/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putDictionaryValidHandleResponse handles the PutDictionaryValid response.
func (client *dictionaryOperations) putDictionaryValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putDictionaryValidHandleError(resp)
	}
	return resp.Response, nil
}

// putDictionaryValidHandleError handles the PutDictionaryValid error response.
func (client *dictionaryOperations) putDictionaryValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutDoubleValid - Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
func (client *dictionaryOperations) PutDoubleValid(ctx context.Context, arrayBody map[string]float64) (*http.Response, error) {
	req, err := client.putDoubleValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putDoubleValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putDoubleValidCreateRequest creates the PutDoubleValid request.
func (client *dictionaryOperations) putDoubleValidCreateRequest(arrayBody map[string]float64) (*azcore.Request, error) {
	urlPath := "/dictionary/prim/double/0--0.01-1.2e20"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putDoubleValidHandleResponse handles the PutDoubleValid response.
func (client *dictionaryOperations) putDoubleValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putDoubleValidHandleError(resp)
	}
	return resp.Response, nil
}

// putDoubleValidHandleError handles the PutDoubleValid error response.
func (client *dictionaryOperations) putDoubleValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutDurationValid - Set dictionary value  {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}
func (client *dictionaryOperations) PutDurationValid(ctx context.Context, arrayBody map[string]time.Duration) (*http.Response, error) {
	req, err := client.putDurationValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putDurationValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putDurationValidCreateRequest creates the PutDurationValid request.
func (client *dictionaryOperations) putDurationValidCreateRequest(arrayBody map[string]time.Duration) (*azcore.Request, error) {
	urlPath := "/dictionary/prim/duration/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putDurationValidHandleResponse handles the PutDurationValid response.
func (client *dictionaryOperations) putDurationValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putDurationValidHandleError(resp)
	}
	return resp.Response, nil
}

// putDurationValidHandleError handles the PutDurationValid error response.
func (client *dictionaryOperations) putDurationValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutEmpty - Set dictionary value empty {}
func (client *dictionaryOperations) PutEmpty(ctx context.Context, arrayBody map[string]string) (*http.Response, error) {
	req, err := client.putEmptyCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putEmptyCreateRequest creates the PutEmpty request.
func (client *dictionaryOperations) putEmptyCreateRequest(arrayBody map[string]string) (*azcore.Request, error) {
	urlPath := "/dictionary/empty"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putEmptyHandleResponse handles the PutEmpty response.
func (client *dictionaryOperations) putEmptyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putEmptyHandleError(resp)
	}
	return resp.Response, nil
}

// putEmptyHandleError handles the PutEmpty error response.
func (client *dictionaryOperations) putEmptyHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutFloatValid - Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
func (client *dictionaryOperations) PutFloatValid(ctx context.Context, arrayBody map[string]float32) (*http.Response, error) {
	req, err := client.putFloatValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putFloatValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putFloatValidCreateRequest creates the PutFloatValid request.
func (client *dictionaryOperations) putFloatValidCreateRequest(arrayBody map[string]float32) (*azcore.Request, error) {
	urlPath := "/dictionary/prim/float/0--0.01-1.2e20"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putFloatValidHandleResponse handles the PutFloatValid response.
func (client *dictionaryOperations) putFloatValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putFloatValidHandleError(resp)
	}
	return resp.Response, nil
}

// putFloatValidHandleError handles the PutFloatValid error response.
func (client *dictionaryOperations) putFloatValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutIntegerValid - Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
func (client *dictionaryOperations) PutIntegerValid(ctx context.Context, arrayBody map[string]int32) (*http.Response, error) {
	req, err := client.putIntegerValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putIntegerValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putIntegerValidCreateRequest creates the PutIntegerValid request.
func (client *dictionaryOperations) putIntegerValidCreateRequest(arrayBody map[string]int32) (*azcore.Request, error) {
	urlPath := "/dictionary/prim/integer/1.-1.3.300"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putIntegerValidHandleResponse handles the PutIntegerValid response.
func (client *dictionaryOperations) putIntegerValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putIntegerValidHandleError(resp)
	}
	return resp.Response, nil
}

// putIntegerValidHandleError handles the PutIntegerValid error response.
func (client *dictionaryOperations) putIntegerValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutLongValid - Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
func (client *dictionaryOperations) PutLongValid(ctx context.Context, arrayBody map[string]int64) (*http.Response, error) {
	req, err := client.putLongValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putLongValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putLongValidCreateRequest creates the PutLongValid request.
func (client *dictionaryOperations) putLongValidCreateRequest(arrayBody map[string]int64) (*azcore.Request, error) {
	urlPath := "/dictionary/prim/long/1.-1.3.300"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putLongValidHandleResponse handles the PutLongValid response.
func (client *dictionaryOperations) putLongValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putLongValidHandleError(resp)
	}
	return resp.Response, nil
}

// putLongValidHandleError handles the PutLongValid error response.
func (client *dictionaryOperations) putLongValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutStringValid - Set dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
func (client *dictionaryOperations) PutStringValid(ctx context.Context, arrayBody map[string]string) (*http.Response, error) {
	req, err := client.putStringValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putStringValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putStringValidCreateRequest creates the PutStringValid request.
func (client *dictionaryOperations) putStringValidCreateRequest(arrayBody map[string]string) (*azcore.Request, error) {
	urlPath := "/dictionary/prim/string/foo1.foo2.foo3"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// putStringValidHandleResponse handles the PutStringValid response.
func (client *dictionaryOperations) putStringValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putStringValidHandleError(resp)
	}
	return resp.Response, nil
}

// putStringValidHandleError handles the PutStringValid error response.
func (client *dictionaryOperations) putStringValidHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
