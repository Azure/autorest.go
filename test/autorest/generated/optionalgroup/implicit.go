// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package optionalgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// ImplicitOperations contains the methods for the Implicit group.
type ImplicitOperations interface {
	// GetOptionalGlobalQuery - Test implicitly optional query parameter
	GetOptionalGlobalQuery(ctx context.Context) (*http.Response, error)
	// GetRequiredGlobalPath - Test implicitly required path parameter
	GetRequiredGlobalPath(ctx context.Context) (*http.Response, error)
	// GetRequiredGlobalQuery - Test implicitly required query parameter
	GetRequiredGlobalQuery(ctx context.Context) (*http.Response, error)
	// GetRequiredPath - Test implicitly required path parameter
	GetRequiredPath(ctx context.Context, pathParameter string) (*http.Response, error)
	// PutOptionalBody - Test implicitly optional body parameter
	PutOptionalBody(ctx context.Context, implicitPutOptionalBodyOptions *ImplicitPutOptionalBodyOptions) (*http.Response, error)
	// PutOptionalHeader - Test implicitly optional header parameter
	PutOptionalHeader(ctx context.Context, implicitPutOptionalHeaderOptions *ImplicitPutOptionalHeaderOptions) (*http.Response, error)
	// PutOptionalQuery - Test implicitly optional query parameter
	PutOptionalQuery(ctx context.Context, implicitPutOptionalQueryOptions *ImplicitPutOptionalQueryOptions) (*http.Response, error)
}

// implicitOperations implements the ImplicitOperations interface.
type implicitOperations struct {
	*Client
	requiredGlobalPath  string
	requiredGlobalQuery string
	optionalGlobalQuery *int32
}

// GetOptionalGlobalQuery - Test implicitly optional query parameter
func (client *implicitOperations) GetOptionalGlobalQuery(ctx context.Context) (*http.Response, error) {
	req, err := client.getOptionalGlobalQueryCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getOptionalGlobalQueryHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getOptionalGlobalQueryCreateRequest creates the GetOptionalGlobalQuery request.
func (client *implicitOperations) getOptionalGlobalQueryCreateRequest() (*azcore.Request, error) {
	urlPath := "/reqopt/global/optional/query"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if client.optionalGlobalQuery != nil {
		query.Set("optional-global-query", strconv.FormatInt(int64(*client.optionalGlobalQuery), 10))
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getOptionalGlobalQueryHandleResponse handles the GetOptionalGlobalQuery response.
func (client *implicitOperations) getOptionalGlobalQueryHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return resp.Response, nil
}

// GetRequiredGlobalPath - Test implicitly required path parameter
func (client *implicitOperations) GetRequiredGlobalPath(ctx context.Context) (*http.Response, error) {
	req, err := client.getRequiredGlobalPathCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getRequiredGlobalPathHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getRequiredGlobalPathCreateRequest creates the GetRequiredGlobalPath request.
func (client *implicitOperations) getRequiredGlobalPathCreateRequest() (*azcore.Request, error) {
	urlPath := "/reqopt/global/required/path/{required-global-path}"
	urlPath = strings.ReplaceAll(urlPath, "{required-global-path}", url.PathEscape(client.requiredGlobalPath))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getRequiredGlobalPathHandleResponse handles the GetRequiredGlobalPath response.
func (client *implicitOperations) getRequiredGlobalPathHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return resp.Response, nil
}

// GetRequiredGlobalQuery - Test implicitly required query parameter
func (client *implicitOperations) GetRequiredGlobalQuery(ctx context.Context) (*http.Response, error) {
	req, err := client.getRequiredGlobalQueryCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getRequiredGlobalQueryHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getRequiredGlobalQueryCreateRequest creates the GetRequiredGlobalQuery request.
func (client *implicitOperations) getRequiredGlobalQueryCreateRequest() (*azcore.Request, error) {
	urlPath := "/reqopt/global/required/query"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("required-global-query", client.requiredGlobalQuery)
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getRequiredGlobalQueryHandleResponse handles the GetRequiredGlobalQuery response.
func (client *implicitOperations) getRequiredGlobalQueryHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return resp.Response, nil
}

// GetRequiredPath - Test implicitly required path parameter
func (client *implicitOperations) GetRequiredPath(ctx context.Context, pathParameter string) (*http.Response, error) {
	req, err := client.getRequiredPathCreateRequest(pathParameter)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getRequiredPathHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getRequiredPathCreateRequest creates the GetRequiredPath request.
func (client *implicitOperations) getRequiredPathCreateRequest(pathParameter string) (*azcore.Request, error) {
	urlPath := "/reqopt/implicit/required/path/{pathParameter}"
	urlPath = strings.ReplaceAll(urlPath, "{pathParameter}", url.PathEscape(pathParameter))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getRequiredPathHandleResponse handles the GetRequiredPath response.
func (client *implicitOperations) getRequiredPathHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return resp.Response, nil
}

// PutOptionalBody - Test implicitly optional body parameter
func (client *implicitOperations) PutOptionalBody(ctx context.Context, implicitPutOptionalBodyOptions *ImplicitPutOptionalBodyOptions) (*http.Response, error) {
	req, err := client.putOptionalBodyCreateRequest(implicitPutOptionalBodyOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putOptionalBodyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putOptionalBodyCreateRequest creates the PutOptionalBody request.
func (client *implicitOperations) putOptionalBodyCreateRequest(implicitPutOptionalBodyOptions *ImplicitPutOptionalBodyOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/implicit/optional/body"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	if implicitPutOptionalBodyOptions != nil {
		return req, req.MarshalAsJSON(implicitPutOptionalBodyOptions.BodyParameter)
	}
	return req, nil
}

// putOptionalBodyHandleResponse handles the PutOptionalBody response.
func (client *implicitOperations) putOptionalBodyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return resp.Response, nil
}

// PutOptionalHeader - Test implicitly optional header parameter
func (client *implicitOperations) PutOptionalHeader(ctx context.Context, implicitPutOptionalHeaderOptions *ImplicitPutOptionalHeaderOptions) (*http.Response, error) {
	req, err := client.putOptionalHeaderCreateRequest(implicitPutOptionalHeaderOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putOptionalHeaderHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putOptionalHeaderCreateRequest creates the PutOptionalHeader request.
func (client *implicitOperations) putOptionalHeaderCreateRequest(implicitPutOptionalHeaderOptions *ImplicitPutOptionalHeaderOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/implicit/optional/header"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	if implicitPutOptionalHeaderOptions != nil && implicitPutOptionalHeaderOptions.QueryParameter != nil {
		req.Header.Set("queryParameter", *implicitPutOptionalHeaderOptions.QueryParameter)
	}
	return req, nil
}

// putOptionalHeaderHandleResponse handles the PutOptionalHeader response.
func (client *implicitOperations) putOptionalHeaderHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return resp.Response, nil
}

// PutOptionalQuery - Test implicitly optional query parameter
func (client *implicitOperations) PutOptionalQuery(ctx context.Context, implicitPutOptionalQueryOptions *ImplicitPutOptionalQueryOptions) (*http.Response, error) {
	req, err := client.putOptionalQueryCreateRequest(implicitPutOptionalQueryOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putOptionalQueryHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putOptionalQueryCreateRequest creates the PutOptionalQuery request.
func (client *implicitOperations) putOptionalQueryCreateRequest(implicitPutOptionalQueryOptions *ImplicitPutOptionalQueryOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/implicit/optional/query"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if implicitPutOptionalQueryOptions != nil && implicitPutOptionalQueryOptions.QueryParameter != nil {
		query.Set("queryParameter", *implicitPutOptionalQueryOptions.QueryParameter)
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, nil
}

// putOptionalQueryHandleResponse handles the PutOptionalQuery response.
func (client *implicitOperations) putOptionalQueryHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return resp.Response, nil
}
