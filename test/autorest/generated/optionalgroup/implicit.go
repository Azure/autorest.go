// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package optionalgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"path"
	"strconv"
	"strings"
)

// ImplicitOperations contains the methods for the Implicit group.
type ImplicitOperations interface {
	// GetOptionalGlobalQuery - Test implicitly optional query parameter
	GetOptionalGlobalQuery(ctx context.Context) (*http.Response, error)
	// GetRequiredGlobalPath - Test implicitly required path parameter
	GetRequiredGlobalPath(ctx context.Context) (*http.Response, error)
	// GetRequiredGlobalQuery - Test implicitly required query parameter
	GetRequiredGlobalQuery(ctx context.Context) (*http.Response, error)
	// GetRequiredPath - Test implicitly required path parameter
	GetRequiredPath(ctx context.Context, pathParameter string) (*http.Response, error)
	// PutOptionalBody - Test implicitly optional body parameter
	PutOptionalBody(ctx context.Context, implicitPutOptionalBodyOptions *ImplicitPutOptionalBodyOptions) (*http.Response, error)
	// PutOptionalHeader - Test implicitly optional header parameter
	PutOptionalHeader(ctx context.Context, implicitPutOptionalHeaderOptions *ImplicitPutOptionalHeaderOptions) (*http.Response, error)
	// PutOptionalQuery - Test implicitly optional query parameter
	PutOptionalQuery(ctx context.Context, implicitPutOptionalQueryOptions *ImplicitPutOptionalQueryOptions) (*http.Response, error)
}

// ImplicitClient implements the ImplicitOperations interface.
// Don't use this type directly, use NewImplicitClient() instead.
type ImplicitClient struct {
	*Client
	requiredGlobalPath  string
	requiredGlobalQuery string
	optionalGlobalQuery *int32
}

// NewImplicitClient creates a new instance of ImplicitClient with the specified values.
func NewImplicitClient(c *Client, requiredGlobalPath string, requiredGlobalQuery string, optionalGlobalQuery *int32) ImplicitOperations {
	return &ImplicitClient{Client: c, requiredGlobalPath: requiredGlobalPath, requiredGlobalQuery: requiredGlobalQuery, optionalGlobalQuery: optionalGlobalQuery}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *ImplicitClient) Do(ctx context.Context, req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(ctx, req)
}

// GetOptionalGlobalQuery - Test implicitly optional query parameter
func (client *ImplicitClient) GetOptionalGlobalQuery(ctx context.Context) (*http.Response, error) {
	req, err := client.GetOptionalGlobalQueryCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetOptionalGlobalQueryHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetOptionalGlobalQueryCreateRequest creates the GetOptionalGlobalQuery request.
func (client *ImplicitClient) GetOptionalGlobalQueryCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/reqopt/global/optional/query"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if client.optionalGlobalQuery != nil {
		query.Set("optional-global-query", strconv.FormatInt(int64(*client.optionalGlobalQuery), 10))
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetOptionalGlobalQueryHandleResponse handles the GetOptionalGlobalQuery response.
func (client *ImplicitClient) GetOptionalGlobalQueryHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetOptionalGlobalQueryHandleError(resp)
	}
	return resp.Response, nil
}

// GetOptionalGlobalQueryHandleError handles the GetOptionalGlobalQuery error response.
func (client *ImplicitClient) GetOptionalGlobalQueryHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetRequiredGlobalPath - Test implicitly required path parameter
func (client *ImplicitClient) GetRequiredGlobalPath(ctx context.Context) (*http.Response, error) {
	req, err := client.GetRequiredGlobalPathCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetRequiredGlobalPathHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetRequiredGlobalPathCreateRequest creates the GetRequiredGlobalPath request.
func (client *ImplicitClient) GetRequiredGlobalPathCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/reqopt/global/required/path/{required-global-path}"
	urlPath = strings.ReplaceAll(urlPath, "{required-global-path}", url.PathEscape(client.requiredGlobalPath))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetRequiredGlobalPathHandleResponse handles the GetRequiredGlobalPath response.
func (client *ImplicitClient) GetRequiredGlobalPathHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetRequiredGlobalPathHandleError(resp)
	}
	return resp.Response, nil
}

// GetRequiredGlobalPathHandleError handles the GetRequiredGlobalPath error response.
func (client *ImplicitClient) GetRequiredGlobalPathHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetRequiredGlobalQuery - Test implicitly required query parameter
func (client *ImplicitClient) GetRequiredGlobalQuery(ctx context.Context) (*http.Response, error) {
	req, err := client.GetRequiredGlobalQueryCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetRequiredGlobalQueryHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetRequiredGlobalQueryCreateRequest creates the GetRequiredGlobalQuery request.
func (client *ImplicitClient) GetRequiredGlobalQueryCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/reqopt/global/required/query"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("required-global-query", client.requiredGlobalQuery)
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetRequiredGlobalQueryHandleResponse handles the GetRequiredGlobalQuery response.
func (client *ImplicitClient) GetRequiredGlobalQueryHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetRequiredGlobalQueryHandleError(resp)
	}
	return resp.Response, nil
}

// GetRequiredGlobalQueryHandleError handles the GetRequiredGlobalQuery error response.
func (client *ImplicitClient) GetRequiredGlobalQueryHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetRequiredPath - Test implicitly required path parameter
func (client *ImplicitClient) GetRequiredPath(ctx context.Context, pathParameter string) (*http.Response, error) {
	req, err := client.GetRequiredPathCreateRequest(pathParameter)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetRequiredPathHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetRequiredPathCreateRequest creates the GetRequiredPath request.
func (client *ImplicitClient) GetRequiredPathCreateRequest(pathParameter string) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/reqopt/implicit/required/path/{pathParameter}"
	urlPath = strings.ReplaceAll(urlPath, "{pathParameter}", url.PathEscape(pathParameter))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetRequiredPathHandleResponse handles the GetRequiredPath response.
func (client *ImplicitClient) GetRequiredPathHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetRequiredPathHandleError(resp)
	}
	return resp.Response, nil
}

// GetRequiredPathHandleError handles the GetRequiredPath error response.
func (client *ImplicitClient) GetRequiredPathHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutOptionalBody - Test implicitly optional body parameter
func (client *ImplicitClient) PutOptionalBody(ctx context.Context, implicitPutOptionalBodyOptions *ImplicitPutOptionalBodyOptions) (*http.Response, error) {
	req, err := client.PutOptionalBodyCreateRequest(implicitPutOptionalBodyOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutOptionalBodyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutOptionalBodyCreateRequest creates the PutOptionalBody request.
func (client *ImplicitClient) PutOptionalBodyCreateRequest(implicitPutOptionalBodyOptions *ImplicitPutOptionalBodyOptions) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/reqopt/implicit/optional/body"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	if implicitPutOptionalBodyOptions != nil {
		return req, req.MarshalAsJSON(implicitPutOptionalBodyOptions.BodyParameter)
	}
	return req, nil
}

// PutOptionalBodyHandleResponse handles the PutOptionalBody response.
func (client *ImplicitClient) PutOptionalBodyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutOptionalBodyHandleError(resp)
	}
	return resp.Response, nil
}

// PutOptionalBodyHandleError handles the PutOptionalBody error response.
func (client *ImplicitClient) PutOptionalBodyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutOptionalHeader - Test implicitly optional header parameter
func (client *ImplicitClient) PutOptionalHeader(ctx context.Context, implicitPutOptionalHeaderOptions *ImplicitPutOptionalHeaderOptions) (*http.Response, error) {
	req, err := client.PutOptionalHeaderCreateRequest(implicitPutOptionalHeaderOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutOptionalHeaderHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutOptionalHeaderCreateRequest creates the PutOptionalHeader request.
func (client *ImplicitClient) PutOptionalHeaderCreateRequest(implicitPutOptionalHeaderOptions *ImplicitPutOptionalHeaderOptions) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/reqopt/implicit/optional/header"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	if implicitPutOptionalHeaderOptions != nil && implicitPutOptionalHeaderOptions.QueryParameter != nil {
		req.Header.Set("queryParameter", *implicitPutOptionalHeaderOptions.QueryParameter)
	}
	return req, nil
}

// PutOptionalHeaderHandleResponse handles the PutOptionalHeader response.
func (client *ImplicitClient) PutOptionalHeaderHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutOptionalHeaderHandleError(resp)
	}
	return resp.Response, nil
}

// PutOptionalHeaderHandleError handles the PutOptionalHeader error response.
func (client *ImplicitClient) PutOptionalHeaderHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutOptionalQuery - Test implicitly optional query parameter
func (client *ImplicitClient) PutOptionalQuery(ctx context.Context, implicitPutOptionalQueryOptions *ImplicitPutOptionalQueryOptions) (*http.Response, error) {
	req, err := client.PutOptionalQueryCreateRequest(implicitPutOptionalQueryOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutOptionalQueryHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutOptionalQueryCreateRequest creates the PutOptionalQuery request.
func (client *ImplicitClient) PutOptionalQueryCreateRequest(implicitPutOptionalQueryOptions *ImplicitPutOptionalQueryOptions) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/reqopt/implicit/optional/query"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if implicitPutOptionalQueryOptions != nil && implicitPutOptionalQueryOptions.QueryParameter != nil {
		query.Set("queryParameter", *implicitPutOptionalQueryOptions.QueryParameter)
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, nil
}

// PutOptionalQueryHandleResponse handles the PutOptionalQuery response.
func (client *ImplicitClient) PutOptionalQueryHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutOptionalQueryHandleError(resp)
	}
	return resp.Response, nil
}

// PutOptionalQueryHandleError handles the PutOptionalQuery error response.
func (client *ImplicitClient) PutOptionalQueryHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
