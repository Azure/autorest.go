// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package optionalgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"path"
	"strconv"
	"strings"
)

// ExplicitOperations contains the methods for the Explicit group.
type ExplicitOperations interface {
	// PostOptionalArrayHeader - Test explicitly optional integer. Please put a header 'headerParameter' => null.
	PostOptionalArrayHeader(ctx context.Context, explicitPostOptionalArrayHeaderOptions *ExplicitPostOptionalArrayHeaderOptions) (*http.Response, error)
	// PostOptionalArrayParameter - Test explicitly optional array. Please put null.
	PostOptionalArrayParameter(ctx context.Context, explicitPostOptionalArrayParameterOptions *ExplicitPostOptionalArrayParameterOptions) (*http.Response, error)
	// PostOptionalArrayProperty - Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
	PostOptionalArrayProperty(ctx context.Context, explicitPostOptionalArrayPropertyOptions *ExplicitPostOptionalArrayPropertyOptions) (*http.Response, error)
	// PostOptionalClassParameter - Test explicitly optional complex object. Please put null.
	PostOptionalClassParameter(ctx context.Context, explicitPostOptionalClassParameterOptions *ExplicitPostOptionalClassParameterOptions) (*http.Response, error)
	// PostOptionalClassProperty - Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
	PostOptionalClassProperty(ctx context.Context, explicitPostOptionalClassPropertyOptions *ExplicitPostOptionalClassPropertyOptions) (*http.Response, error)
	// PostOptionalIntegerHeader - Test explicitly optional integer. Please put a header 'headerParameter' => null.
	PostOptionalIntegerHeader(ctx context.Context, explicitPostOptionalIntegerHeaderOptions *ExplicitPostOptionalIntegerHeaderOptions) (*http.Response, error)
	// PostOptionalIntegerParameter - Test explicitly optional integer. Please put null.
	PostOptionalIntegerParameter(ctx context.Context, explicitPostOptionalIntegerParameterOptions *ExplicitPostOptionalIntegerParameterOptions) (*http.Response, error)
	// PostOptionalIntegerProperty - Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
	PostOptionalIntegerProperty(ctx context.Context, explicitPostOptionalIntegerPropertyOptions *ExplicitPostOptionalIntegerPropertyOptions) (*http.Response, error)
	// PostOptionalStringHeader - Test explicitly optional string. Please put a header 'headerParameter' => null.
	PostOptionalStringHeader(ctx context.Context, explicitPostOptionalStringHeaderOptions *ExplicitPostOptionalStringHeaderOptions) (*http.Response, error)
	// PostOptionalStringParameter - Test explicitly optional string. Please put null.
	PostOptionalStringParameter(ctx context.Context, explicitPostOptionalStringParameterOptions *ExplicitPostOptionalStringParameterOptions) (*http.Response, error)
	// PostOptionalStringProperty - Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
	PostOptionalStringProperty(ctx context.Context, explicitPostOptionalStringPropertyOptions *ExplicitPostOptionalStringPropertyOptions) (*http.Response, error)
	// PostRequiredArrayHeader - Test explicitly required array. Please put a header 'headerParameter' => null and the client library should throw before the request is sent.
	PostRequiredArrayHeader(ctx context.Context, headerParameter []string) (*http.Response, error)
	// PostRequiredArrayParameter - Test explicitly required array. Please put null and the client library should throw before the request is sent.
	PostRequiredArrayParameter(ctx context.Context, bodyParameter []string) (*http.Response, error)
	// PostRequiredArrayProperty - Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the client library should throw before the request is sent.
	PostRequiredArrayProperty(ctx context.Context, bodyParameter ArrayWrapper) (*http.Response, error)
	// PostRequiredClassParameter - Test explicitly required complex object. Please put null and the client library should throw before the request is sent.
	PostRequiredClassParameter(ctx context.Context, bodyParameter Product) (*http.Response, error)
	// PostRequiredClassProperty - Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null and the client library should throw before the request is sent.
	PostRequiredClassProperty(ctx context.Context, bodyParameter ClassWrapper) (*http.Response, error)
	// PostRequiredIntegerHeader - Test explicitly required integer. Please put a header 'headerParameter' => null and the client library should throw before the request is sent.
	PostRequiredIntegerHeader(ctx context.Context, headerParameter int32) (*http.Response, error)
	// PostRequiredIntegerParameter - Test explicitly required integer. Please put null and the client library should throw before the request is sent.
	PostRequiredIntegerParameter(ctx context.Context, bodyParameter int32) (*http.Response, error)
	// PostRequiredIntegerProperty - Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the client library should throw before the request is sent.
	PostRequiredIntegerProperty(ctx context.Context, bodyParameter IntWrapper) (*http.Response, error)
	// PostRequiredStringHeader - Test explicitly required string. Please put a header 'headerParameter' => null and the client library should throw before the request is sent.
	PostRequiredStringHeader(ctx context.Context, headerParameter string) (*http.Response, error)
	// PostRequiredStringParameter - Test explicitly required string. Please put null and the client library should throw before the request is sent.
	PostRequiredStringParameter(ctx context.Context, bodyParameter string) (*http.Response, error)
	// PostRequiredStringProperty - Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the client library should throw before the request is sent.
	PostRequiredStringProperty(ctx context.Context, bodyParameter StringWrapper) (*http.Response, error)
}

// explicitOperations implements the ExplicitOperations interface.
type explicitOperations struct {
	*Client
}

// PostOptionalArrayHeader - Test explicitly optional integer. Please put a header 'headerParameter' => null.
func (client *explicitOperations) PostOptionalArrayHeader(ctx context.Context, explicitPostOptionalArrayHeaderOptions *ExplicitPostOptionalArrayHeaderOptions) (*http.Response, error) {
	req, err := client.postOptionalArrayHeaderCreateRequest(explicitPostOptionalArrayHeaderOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.postOptionalArrayHeaderHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// postOptionalArrayHeaderCreateRequest creates the PostOptionalArrayHeader request.
func (client *explicitOperations) postOptionalArrayHeaderCreateRequest(explicitPostOptionalArrayHeaderOptions *ExplicitPostOptionalArrayHeaderOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/array/header"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	if explicitPostOptionalArrayHeaderOptions != nil && explicitPostOptionalArrayHeaderOptions.HeaderParameter != nil {
		req.Header.Set("headerParameter", strings.Join(*explicitPostOptionalArrayHeaderOptions.HeaderParameter, ","))
	}
	return req, nil
}

// postOptionalArrayHeaderHandleResponse handles the PostOptionalArrayHeader response.
func (client *explicitOperations) postOptionalArrayHeaderHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.postOptionalArrayHeaderHandleError(resp)
	}
	return resp.Response, nil
}

// postOptionalArrayHeaderHandleError handles the PostOptionalArrayHeader error response.
func (client *explicitOperations) postOptionalArrayHeaderHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostOptionalArrayParameter - Test explicitly optional array. Please put null.
func (client *explicitOperations) PostOptionalArrayParameter(ctx context.Context, explicitPostOptionalArrayParameterOptions *ExplicitPostOptionalArrayParameterOptions) (*http.Response, error) {
	req, err := client.postOptionalArrayParameterCreateRequest(explicitPostOptionalArrayParameterOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.postOptionalArrayParameterHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// postOptionalArrayParameterCreateRequest creates the PostOptionalArrayParameter request.
func (client *explicitOperations) postOptionalArrayParameterCreateRequest(explicitPostOptionalArrayParameterOptions *ExplicitPostOptionalArrayParameterOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/array/parameter"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	if explicitPostOptionalArrayParameterOptions != nil {
		return req, req.MarshalAsJSON(explicitPostOptionalArrayParameterOptions.BodyParameter)
	}
	return req, nil
}

// postOptionalArrayParameterHandleResponse handles the PostOptionalArrayParameter response.
func (client *explicitOperations) postOptionalArrayParameterHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.postOptionalArrayParameterHandleError(resp)
	}
	return resp.Response, nil
}

// postOptionalArrayParameterHandleError handles the PostOptionalArrayParameter error response.
func (client *explicitOperations) postOptionalArrayParameterHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostOptionalArrayProperty - Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
func (client *explicitOperations) PostOptionalArrayProperty(ctx context.Context, explicitPostOptionalArrayPropertyOptions *ExplicitPostOptionalArrayPropertyOptions) (*http.Response, error) {
	req, err := client.postOptionalArrayPropertyCreateRequest(explicitPostOptionalArrayPropertyOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.postOptionalArrayPropertyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// postOptionalArrayPropertyCreateRequest creates the PostOptionalArrayProperty request.
func (client *explicitOperations) postOptionalArrayPropertyCreateRequest(explicitPostOptionalArrayPropertyOptions *ExplicitPostOptionalArrayPropertyOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/array/property"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	if explicitPostOptionalArrayPropertyOptions != nil {
		return req, req.MarshalAsJSON(explicitPostOptionalArrayPropertyOptions.BodyParameter)
	}
	return req, nil
}

// postOptionalArrayPropertyHandleResponse handles the PostOptionalArrayProperty response.
func (client *explicitOperations) postOptionalArrayPropertyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.postOptionalArrayPropertyHandleError(resp)
	}
	return resp.Response, nil
}

// postOptionalArrayPropertyHandleError handles the PostOptionalArrayProperty error response.
func (client *explicitOperations) postOptionalArrayPropertyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostOptionalClassParameter - Test explicitly optional complex object. Please put null.
func (client *explicitOperations) PostOptionalClassParameter(ctx context.Context, explicitPostOptionalClassParameterOptions *ExplicitPostOptionalClassParameterOptions) (*http.Response, error) {
	req, err := client.postOptionalClassParameterCreateRequest(explicitPostOptionalClassParameterOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.postOptionalClassParameterHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// postOptionalClassParameterCreateRequest creates the PostOptionalClassParameter request.
func (client *explicitOperations) postOptionalClassParameterCreateRequest(explicitPostOptionalClassParameterOptions *ExplicitPostOptionalClassParameterOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/class/parameter"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	if explicitPostOptionalClassParameterOptions != nil {
		return req, req.MarshalAsJSON(explicitPostOptionalClassParameterOptions.BodyParameter)
	}
	return req, nil
}

// postOptionalClassParameterHandleResponse handles the PostOptionalClassParameter response.
func (client *explicitOperations) postOptionalClassParameterHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.postOptionalClassParameterHandleError(resp)
	}
	return resp.Response, nil
}

// postOptionalClassParameterHandleError handles the PostOptionalClassParameter error response.
func (client *explicitOperations) postOptionalClassParameterHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostOptionalClassProperty - Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
func (client *explicitOperations) PostOptionalClassProperty(ctx context.Context, explicitPostOptionalClassPropertyOptions *ExplicitPostOptionalClassPropertyOptions) (*http.Response, error) {
	req, err := client.postOptionalClassPropertyCreateRequest(explicitPostOptionalClassPropertyOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.postOptionalClassPropertyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// postOptionalClassPropertyCreateRequest creates the PostOptionalClassProperty request.
func (client *explicitOperations) postOptionalClassPropertyCreateRequest(explicitPostOptionalClassPropertyOptions *ExplicitPostOptionalClassPropertyOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/class/property"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	if explicitPostOptionalClassPropertyOptions != nil {
		return req, req.MarshalAsJSON(explicitPostOptionalClassPropertyOptions.BodyParameter)
	}
	return req, nil
}

// postOptionalClassPropertyHandleResponse handles the PostOptionalClassProperty response.
func (client *explicitOperations) postOptionalClassPropertyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.postOptionalClassPropertyHandleError(resp)
	}
	return resp.Response, nil
}

// postOptionalClassPropertyHandleError handles the PostOptionalClassProperty error response.
func (client *explicitOperations) postOptionalClassPropertyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostOptionalIntegerHeader - Test explicitly optional integer. Please put a header 'headerParameter' => null.
func (client *explicitOperations) PostOptionalIntegerHeader(ctx context.Context, explicitPostOptionalIntegerHeaderOptions *ExplicitPostOptionalIntegerHeaderOptions) (*http.Response, error) {
	req, err := client.postOptionalIntegerHeaderCreateRequest(explicitPostOptionalIntegerHeaderOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.postOptionalIntegerHeaderHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// postOptionalIntegerHeaderCreateRequest creates the PostOptionalIntegerHeader request.
func (client *explicitOperations) postOptionalIntegerHeaderCreateRequest(explicitPostOptionalIntegerHeaderOptions *ExplicitPostOptionalIntegerHeaderOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/integer/header"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	if explicitPostOptionalIntegerHeaderOptions != nil && explicitPostOptionalIntegerHeaderOptions.HeaderParameter != nil {
		req.Header.Set("headerParameter", strconv.FormatInt(int64(*explicitPostOptionalIntegerHeaderOptions.HeaderParameter), 10))
	}
	return req, nil
}

// postOptionalIntegerHeaderHandleResponse handles the PostOptionalIntegerHeader response.
func (client *explicitOperations) postOptionalIntegerHeaderHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.postOptionalIntegerHeaderHandleError(resp)
	}
	return resp.Response, nil
}

// postOptionalIntegerHeaderHandleError handles the PostOptionalIntegerHeader error response.
func (client *explicitOperations) postOptionalIntegerHeaderHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostOptionalIntegerParameter - Test explicitly optional integer. Please put null.
func (client *explicitOperations) PostOptionalIntegerParameter(ctx context.Context, explicitPostOptionalIntegerParameterOptions *ExplicitPostOptionalIntegerParameterOptions) (*http.Response, error) {
	req, err := client.postOptionalIntegerParameterCreateRequest(explicitPostOptionalIntegerParameterOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.postOptionalIntegerParameterHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// postOptionalIntegerParameterCreateRequest creates the PostOptionalIntegerParameter request.
func (client *explicitOperations) postOptionalIntegerParameterCreateRequest(explicitPostOptionalIntegerParameterOptions *ExplicitPostOptionalIntegerParameterOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/integer/parameter"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	if explicitPostOptionalIntegerParameterOptions != nil {
		return req, req.MarshalAsJSON(explicitPostOptionalIntegerParameterOptions.BodyParameter)
	}
	return req, nil
}

// postOptionalIntegerParameterHandleResponse handles the PostOptionalIntegerParameter response.
func (client *explicitOperations) postOptionalIntegerParameterHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.postOptionalIntegerParameterHandleError(resp)
	}
	return resp.Response, nil
}

// postOptionalIntegerParameterHandleError handles the PostOptionalIntegerParameter error response.
func (client *explicitOperations) postOptionalIntegerParameterHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostOptionalIntegerProperty - Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
func (client *explicitOperations) PostOptionalIntegerProperty(ctx context.Context, explicitPostOptionalIntegerPropertyOptions *ExplicitPostOptionalIntegerPropertyOptions) (*http.Response, error) {
	req, err := client.postOptionalIntegerPropertyCreateRequest(explicitPostOptionalIntegerPropertyOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.postOptionalIntegerPropertyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// postOptionalIntegerPropertyCreateRequest creates the PostOptionalIntegerProperty request.
func (client *explicitOperations) postOptionalIntegerPropertyCreateRequest(explicitPostOptionalIntegerPropertyOptions *ExplicitPostOptionalIntegerPropertyOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/integer/property"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	if explicitPostOptionalIntegerPropertyOptions != nil {
		return req, req.MarshalAsJSON(explicitPostOptionalIntegerPropertyOptions.BodyParameter)
	}
	return req, nil
}

// postOptionalIntegerPropertyHandleResponse handles the PostOptionalIntegerProperty response.
func (client *explicitOperations) postOptionalIntegerPropertyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.postOptionalIntegerPropertyHandleError(resp)
	}
	return resp.Response, nil
}

// postOptionalIntegerPropertyHandleError handles the PostOptionalIntegerProperty error response.
func (client *explicitOperations) postOptionalIntegerPropertyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostOptionalStringHeader - Test explicitly optional string. Please put a header 'headerParameter' => null.
func (client *explicitOperations) PostOptionalStringHeader(ctx context.Context, explicitPostOptionalStringHeaderOptions *ExplicitPostOptionalStringHeaderOptions) (*http.Response, error) {
	req, err := client.postOptionalStringHeaderCreateRequest(explicitPostOptionalStringHeaderOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.postOptionalStringHeaderHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// postOptionalStringHeaderCreateRequest creates the PostOptionalStringHeader request.
func (client *explicitOperations) postOptionalStringHeaderCreateRequest(explicitPostOptionalStringHeaderOptions *ExplicitPostOptionalStringHeaderOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/string/header"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	if explicitPostOptionalStringHeaderOptions != nil && explicitPostOptionalStringHeaderOptions.BodyParameter != nil {
		req.Header.Set("bodyParameter", *explicitPostOptionalStringHeaderOptions.BodyParameter)
	}
	return req, nil
}

// postOptionalStringHeaderHandleResponse handles the PostOptionalStringHeader response.
func (client *explicitOperations) postOptionalStringHeaderHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.postOptionalStringHeaderHandleError(resp)
	}
	return resp.Response, nil
}

// postOptionalStringHeaderHandleError handles the PostOptionalStringHeader error response.
func (client *explicitOperations) postOptionalStringHeaderHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostOptionalStringParameter - Test explicitly optional string. Please put null.
func (client *explicitOperations) PostOptionalStringParameter(ctx context.Context, explicitPostOptionalStringParameterOptions *ExplicitPostOptionalStringParameterOptions) (*http.Response, error) {
	req, err := client.postOptionalStringParameterCreateRequest(explicitPostOptionalStringParameterOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.postOptionalStringParameterHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// postOptionalStringParameterCreateRequest creates the PostOptionalStringParameter request.
func (client *explicitOperations) postOptionalStringParameterCreateRequest(explicitPostOptionalStringParameterOptions *ExplicitPostOptionalStringParameterOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/string/parameter"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	if explicitPostOptionalStringParameterOptions != nil {
		return req, req.MarshalAsJSON(explicitPostOptionalStringParameterOptions.BodyParameter)
	}
	return req, nil
}

// postOptionalStringParameterHandleResponse handles the PostOptionalStringParameter response.
func (client *explicitOperations) postOptionalStringParameterHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.postOptionalStringParameterHandleError(resp)
	}
	return resp.Response, nil
}

// postOptionalStringParameterHandleError handles the PostOptionalStringParameter error response.
func (client *explicitOperations) postOptionalStringParameterHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostOptionalStringProperty - Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
func (client *explicitOperations) PostOptionalStringProperty(ctx context.Context, explicitPostOptionalStringPropertyOptions *ExplicitPostOptionalStringPropertyOptions) (*http.Response, error) {
	req, err := client.postOptionalStringPropertyCreateRequest(explicitPostOptionalStringPropertyOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.postOptionalStringPropertyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// postOptionalStringPropertyCreateRequest creates the PostOptionalStringProperty request.
func (client *explicitOperations) postOptionalStringPropertyCreateRequest(explicitPostOptionalStringPropertyOptions *ExplicitPostOptionalStringPropertyOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/string/property"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	if explicitPostOptionalStringPropertyOptions != nil {
		return req, req.MarshalAsJSON(explicitPostOptionalStringPropertyOptions.BodyParameter)
	}
	return req, nil
}

// postOptionalStringPropertyHandleResponse handles the PostOptionalStringProperty response.
func (client *explicitOperations) postOptionalStringPropertyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.postOptionalStringPropertyHandleError(resp)
	}
	return resp.Response, nil
}

// postOptionalStringPropertyHandleError handles the PostOptionalStringProperty error response.
func (client *explicitOperations) postOptionalStringPropertyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostRequiredArrayHeader - Test explicitly required array. Please put a header 'headerParameter' => null and the client library should throw before the request is sent.
func (client *explicitOperations) PostRequiredArrayHeader(ctx context.Context, headerParameter []string) (*http.Response, error) {
	req, err := client.postRequiredArrayHeaderCreateRequest(headerParameter)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.postRequiredArrayHeaderHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// postRequiredArrayHeaderCreateRequest creates the PostRequiredArrayHeader request.
func (client *explicitOperations) postRequiredArrayHeaderCreateRequest(headerParameter []string) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/array/header"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	req.Header.Set("headerParameter", strings.Join(headerParameter, ","))
	return req, nil
}

// postRequiredArrayHeaderHandleResponse handles the PostRequiredArrayHeader response.
func (client *explicitOperations) postRequiredArrayHeaderHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.postRequiredArrayHeaderHandleError(resp)
	}
	return resp.Response, nil
}

// postRequiredArrayHeaderHandleError handles the PostRequiredArrayHeader error response.
func (client *explicitOperations) postRequiredArrayHeaderHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostRequiredArrayParameter - Test explicitly required array. Please put null and the client library should throw before the request is sent.
func (client *explicitOperations) PostRequiredArrayParameter(ctx context.Context, bodyParameter []string) (*http.Response, error) {
	req, err := client.postRequiredArrayParameterCreateRequest(bodyParameter)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.postRequiredArrayParameterHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// postRequiredArrayParameterCreateRequest creates the PostRequiredArrayParameter request.
func (client *explicitOperations) postRequiredArrayParameterCreateRequest(bodyParameter []string) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/array/parameter"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(bodyParameter)
}

// postRequiredArrayParameterHandleResponse handles the PostRequiredArrayParameter response.
func (client *explicitOperations) postRequiredArrayParameterHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.postRequiredArrayParameterHandleError(resp)
	}
	return resp.Response, nil
}

// postRequiredArrayParameterHandleError handles the PostRequiredArrayParameter error response.
func (client *explicitOperations) postRequiredArrayParameterHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostRequiredArrayProperty - Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the client library should throw before the request is sent.
func (client *explicitOperations) PostRequiredArrayProperty(ctx context.Context, bodyParameter ArrayWrapper) (*http.Response, error) {
	req, err := client.postRequiredArrayPropertyCreateRequest(bodyParameter)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.postRequiredArrayPropertyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// postRequiredArrayPropertyCreateRequest creates the PostRequiredArrayProperty request.
func (client *explicitOperations) postRequiredArrayPropertyCreateRequest(bodyParameter ArrayWrapper) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/array/property"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(bodyParameter)
}

// postRequiredArrayPropertyHandleResponse handles the PostRequiredArrayProperty response.
func (client *explicitOperations) postRequiredArrayPropertyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.postRequiredArrayPropertyHandleError(resp)
	}
	return resp.Response, nil
}

// postRequiredArrayPropertyHandleError handles the PostRequiredArrayProperty error response.
func (client *explicitOperations) postRequiredArrayPropertyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostRequiredClassParameter - Test explicitly required complex object. Please put null and the client library should throw before the request is sent.
func (client *explicitOperations) PostRequiredClassParameter(ctx context.Context, bodyParameter Product) (*http.Response, error) {
	req, err := client.postRequiredClassParameterCreateRequest(bodyParameter)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.postRequiredClassParameterHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// postRequiredClassParameterCreateRequest creates the PostRequiredClassParameter request.
func (client *explicitOperations) postRequiredClassParameterCreateRequest(bodyParameter Product) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/class/parameter"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(bodyParameter)
}

// postRequiredClassParameterHandleResponse handles the PostRequiredClassParameter response.
func (client *explicitOperations) postRequiredClassParameterHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.postRequiredClassParameterHandleError(resp)
	}
	return resp.Response, nil
}

// postRequiredClassParameterHandleError handles the PostRequiredClassParameter error response.
func (client *explicitOperations) postRequiredClassParameterHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostRequiredClassProperty - Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null and the client library should throw before the request is sent.
func (client *explicitOperations) PostRequiredClassProperty(ctx context.Context, bodyParameter ClassWrapper) (*http.Response, error) {
	req, err := client.postRequiredClassPropertyCreateRequest(bodyParameter)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.postRequiredClassPropertyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// postRequiredClassPropertyCreateRequest creates the PostRequiredClassProperty request.
func (client *explicitOperations) postRequiredClassPropertyCreateRequest(bodyParameter ClassWrapper) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/class/property"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(bodyParameter)
}

// postRequiredClassPropertyHandleResponse handles the PostRequiredClassProperty response.
func (client *explicitOperations) postRequiredClassPropertyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.postRequiredClassPropertyHandleError(resp)
	}
	return resp.Response, nil
}

// postRequiredClassPropertyHandleError handles the PostRequiredClassProperty error response.
func (client *explicitOperations) postRequiredClassPropertyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostRequiredIntegerHeader - Test explicitly required integer. Please put a header 'headerParameter' => null and the client library should throw before the request is sent.
func (client *explicitOperations) PostRequiredIntegerHeader(ctx context.Context, headerParameter int32) (*http.Response, error) {
	req, err := client.postRequiredIntegerHeaderCreateRequest(headerParameter)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.postRequiredIntegerHeaderHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// postRequiredIntegerHeaderCreateRequest creates the PostRequiredIntegerHeader request.
func (client *explicitOperations) postRequiredIntegerHeaderCreateRequest(headerParameter int32) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/integer/header"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	req.Header.Set("headerParameter", strconv.FormatInt(int64(headerParameter), 10))
	return req, nil
}

// postRequiredIntegerHeaderHandleResponse handles the PostRequiredIntegerHeader response.
func (client *explicitOperations) postRequiredIntegerHeaderHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.postRequiredIntegerHeaderHandleError(resp)
	}
	return resp.Response, nil
}

// postRequiredIntegerHeaderHandleError handles the PostRequiredIntegerHeader error response.
func (client *explicitOperations) postRequiredIntegerHeaderHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostRequiredIntegerParameter - Test explicitly required integer. Please put null and the client library should throw before the request is sent.
func (client *explicitOperations) PostRequiredIntegerParameter(ctx context.Context, bodyParameter int32) (*http.Response, error) {
	req, err := client.postRequiredIntegerParameterCreateRequest(bodyParameter)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.postRequiredIntegerParameterHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// postRequiredIntegerParameterCreateRequest creates the PostRequiredIntegerParameter request.
func (client *explicitOperations) postRequiredIntegerParameterCreateRequest(bodyParameter int32) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/integer/parameter"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(bodyParameter)
}

// postRequiredIntegerParameterHandleResponse handles the PostRequiredIntegerParameter response.
func (client *explicitOperations) postRequiredIntegerParameterHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.postRequiredIntegerParameterHandleError(resp)
	}
	return resp.Response, nil
}

// postRequiredIntegerParameterHandleError handles the PostRequiredIntegerParameter error response.
func (client *explicitOperations) postRequiredIntegerParameterHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostRequiredIntegerProperty - Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the client library should throw before the request is sent.
func (client *explicitOperations) PostRequiredIntegerProperty(ctx context.Context, bodyParameter IntWrapper) (*http.Response, error) {
	req, err := client.postRequiredIntegerPropertyCreateRequest(bodyParameter)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.postRequiredIntegerPropertyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// postRequiredIntegerPropertyCreateRequest creates the PostRequiredIntegerProperty request.
func (client *explicitOperations) postRequiredIntegerPropertyCreateRequest(bodyParameter IntWrapper) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/integer/property"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(bodyParameter)
}

// postRequiredIntegerPropertyHandleResponse handles the PostRequiredIntegerProperty response.
func (client *explicitOperations) postRequiredIntegerPropertyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.postRequiredIntegerPropertyHandleError(resp)
	}
	return resp.Response, nil
}

// postRequiredIntegerPropertyHandleError handles the PostRequiredIntegerProperty error response.
func (client *explicitOperations) postRequiredIntegerPropertyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostRequiredStringHeader - Test explicitly required string. Please put a header 'headerParameter' => null and the client library should throw before the request is sent.
func (client *explicitOperations) PostRequiredStringHeader(ctx context.Context, headerParameter string) (*http.Response, error) {
	req, err := client.postRequiredStringHeaderCreateRequest(headerParameter)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.postRequiredStringHeaderHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// postRequiredStringHeaderCreateRequest creates the PostRequiredStringHeader request.
func (client *explicitOperations) postRequiredStringHeaderCreateRequest(headerParameter string) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/string/header"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	req.Header.Set("headerParameter", headerParameter)
	return req, nil
}

// postRequiredStringHeaderHandleResponse handles the PostRequiredStringHeader response.
func (client *explicitOperations) postRequiredStringHeaderHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.postRequiredStringHeaderHandleError(resp)
	}
	return resp.Response, nil
}

// postRequiredStringHeaderHandleError handles the PostRequiredStringHeader error response.
func (client *explicitOperations) postRequiredStringHeaderHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostRequiredStringParameter - Test explicitly required string. Please put null and the client library should throw before the request is sent.
func (client *explicitOperations) PostRequiredStringParameter(ctx context.Context, bodyParameter string) (*http.Response, error) {
	req, err := client.postRequiredStringParameterCreateRequest(bodyParameter)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.postRequiredStringParameterHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// postRequiredStringParameterCreateRequest creates the PostRequiredStringParameter request.
func (client *explicitOperations) postRequiredStringParameterCreateRequest(bodyParameter string) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/string/parameter"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(bodyParameter)
}

// postRequiredStringParameterHandleResponse handles the PostRequiredStringParameter response.
func (client *explicitOperations) postRequiredStringParameterHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.postRequiredStringParameterHandleError(resp)
	}
	return resp.Response, nil
}

// postRequiredStringParameterHandleError handles the PostRequiredStringParameter error response.
func (client *explicitOperations) postRequiredStringParameterHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostRequiredStringProperty - Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the client library should throw before the request is sent.
func (client *explicitOperations) PostRequiredStringProperty(ctx context.Context, bodyParameter StringWrapper) (*http.Response, error) {
	req, err := client.postRequiredStringPropertyCreateRequest(bodyParameter)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.postRequiredStringPropertyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// postRequiredStringPropertyCreateRequest creates the PostRequiredStringProperty request.
func (client *explicitOperations) postRequiredStringPropertyCreateRequest(bodyParameter StringWrapper) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/string/property"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(bodyParameter)
}

// postRequiredStringPropertyHandleResponse handles the PostRequiredStringProperty response.
func (client *explicitOperations) postRequiredStringPropertyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.postRequiredStringPropertyHandleError(resp)
	}
	return resp.Response, nil
}

// postRequiredStringPropertyHandleError handles the PostRequiredStringProperty error response.
func (client *explicitOperations) postRequiredStringPropertyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
