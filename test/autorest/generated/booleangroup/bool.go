// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package booleangroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// BoolOperations contains the methods for the Bool group.
type BoolOperations interface {
	// GetFalse - Get false Boolean value
	GetFalse(ctx context.Context) (*BoolResponse, error)
	// GetInvalid - Get invalid Boolean value
	GetInvalid(ctx context.Context) (*BoolResponse, error)
	// GetNull - Get null Boolean value
	GetNull(ctx context.Context) (*BoolResponse, error)
	// GetTrue - Get true Boolean value
	GetTrue(ctx context.Context) (*BoolResponse, error)
	// PutFalse - Set Boolean value false
	PutFalse(ctx context.Context) (*http.Response, error)
	// PutTrue - Set Boolean value true
	PutTrue(ctx context.Context) (*http.Response, error)
}

// boolOperations implements the BoolOperations interface.
type boolOperations struct {
	*Client
}

// GetFalse - Get false Boolean value
func (client *boolOperations) GetFalse(ctx context.Context) (*BoolResponse, error) {
	req, err := client.getFalseCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getFalseHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getFalseCreateRequest creates the GetFalse request.
func (client *boolOperations) getFalseCreateRequest() (*azcore.Request, error) {
	urlPath := "/bool/false"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getFalseHandleResponse handles the GetFalse response.
func (client *boolOperations) getFalseHandleResponse(resp *azcore.Response) (*BoolResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getFalseHandleError(resp)
	}
	result := BoolResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getFalseHandleError handles the GetFalse error response.
func (client *boolOperations) getFalseHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetInvalid - Get invalid Boolean value
func (client *boolOperations) GetInvalid(ctx context.Context) (*BoolResponse, error) {
	req, err := client.getInvalidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getInvalidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getInvalidCreateRequest creates the GetInvalid request.
func (client *boolOperations) getInvalidCreateRequest() (*azcore.Request, error) {
	urlPath := "/bool/invalid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getInvalidHandleResponse handles the GetInvalid response.
func (client *boolOperations) getInvalidHandleResponse(resp *azcore.Response) (*BoolResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getInvalidHandleError(resp)
	}
	result := BoolResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getInvalidHandleError handles the GetInvalid error response.
func (client *boolOperations) getInvalidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetNull - Get null Boolean value
func (client *boolOperations) GetNull(ctx context.Context) (*BoolResponse, error) {
	req, err := client.getNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getNullCreateRequest creates the GetNull request.
func (client *boolOperations) getNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/bool/null"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getNullHandleResponse handles the GetNull response.
func (client *boolOperations) getNullHandleResponse(resp *azcore.Response) (*BoolResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getNullHandleError(resp)
	}
	result := BoolResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getNullHandleError handles the GetNull error response.
func (client *boolOperations) getNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetTrue - Get true Boolean value
func (client *boolOperations) GetTrue(ctx context.Context) (*BoolResponse, error) {
	req, err := client.getTrueCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getTrueHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getTrueCreateRequest creates the GetTrue request.
func (client *boolOperations) getTrueCreateRequest() (*azcore.Request, error) {
	urlPath := "/bool/true"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getTrueHandleResponse handles the GetTrue response.
func (client *boolOperations) getTrueHandleResponse(resp *azcore.Response) (*BoolResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getTrueHandleError(resp)
	}
	result := BoolResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getTrueHandleError handles the GetTrue error response.
func (client *boolOperations) getTrueHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutFalse - Set Boolean value false
func (client *boolOperations) PutFalse(ctx context.Context) (*http.Response, error) {
	req, err := client.putFalseCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putFalseHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putFalseCreateRequest creates the PutFalse request.
func (client *boolOperations) putFalseCreateRequest() (*azcore.Request, error) {
	urlPath := "/bool/false"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(false)
}

// putFalseHandleResponse handles the PutFalse response.
func (client *boolOperations) putFalseHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putFalseHandleError(resp)
	}
	return resp.Response, nil
}

// putFalseHandleError handles the PutFalse error response.
func (client *boolOperations) putFalseHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutTrue - Set Boolean value true
func (client *boolOperations) PutTrue(ctx context.Context) (*http.Response, error) {
	req, err := client.putTrueCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putTrueHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putTrueCreateRequest creates the PutTrue request.
func (client *boolOperations) putTrueCreateRequest() (*azcore.Request, error) {
	urlPath := "/bool/true"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(true)
}

// putTrueHandleResponse handles the PutTrue response.
func (client *boolOperations) putTrueHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putTrueHandleError(resp)
	}
	return resp.Response, nil
}

// putTrueHandleError handles the PutTrue error response.
func (client *boolOperations) putTrueHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
