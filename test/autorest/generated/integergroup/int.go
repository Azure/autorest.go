// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package integergroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"path"
	"time"
)

// IntOperations contains the methods for the Int group.
type IntOperations interface {
	// GetInvalid - Get invalid Int value
	GetInvalid(ctx context.Context) (*Int32Response, error)
	// GetInvalidUnixTime - Get invalid Unix time value
	GetInvalidUnixTime(ctx context.Context) (*TimeResponse, error)
	// GetNull - Get null Int value
	GetNull(ctx context.Context) (*Int32Response, error)
	// GetNullUnixTime - Get null Unix time value
	GetNullUnixTime(ctx context.Context) (*TimeResponse, error)
	// GetOverflowInt32 - Get overflow Int32 value
	GetOverflowInt32(ctx context.Context) (*Int32Response, error)
	// GetOverflowInt64 - Get overflow Int64 value
	GetOverflowInt64(ctx context.Context) (*Int64Response, error)
	// GetUnderflowInt32 - Get underflow Int32 value
	GetUnderflowInt32(ctx context.Context) (*Int32Response, error)
	// GetUnderflowInt64 - Get underflow Int64 value
	GetUnderflowInt64(ctx context.Context) (*Int64Response, error)
	// GetUnixTime - Get datetime encoded as Unix time value
	GetUnixTime(ctx context.Context) (*TimeResponse, error)
	// PutMax32 - Put max int32 value
	PutMax32(ctx context.Context, intBody int32) (*http.Response, error)
	// PutMax64 - Put max int64 value
	PutMax64(ctx context.Context, intBody int64) (*http.Response, error)
	// PutMin32 - Put min int32 value
	PutMin32(ctx context.Context, intBody int32) (*http.Response, error)
	// PutMin64 - Put min int64 value
	PutMin64(ctx context.Context, intBody int64) (*http.Response, error)
	// PutUnixTimeDate - Put datetime encoded as Unix time
	PutUnixTimeDate(ctx context.Context, intBody time.Time) (*http.Response, error)
}

// intOperations implements the IntOperations interface.
type intOperations struct {
	*Client
}

// GetInvalid - Get invalid Int value
func (client *intOperations) GetInvalid(ctx context.Context) (*Int32Response, error) {
	req, err := client.getInvalidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getInvalidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getInvalidCreateRequest creates the GetInvalid request.
func (client *intOperations) getInvalidCreateRequest() (*azcore.Request, error) {
	urlPath := "/int/invalid"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getInvalidHandleResponse handles the GetInvalid response.
func (client *intOperations) getInvalidHandleResponse(resp *azcore.Response) (*Int32Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getInvalidHandleError(resp)
	}
	result := Int32Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getInvalidHandleError handles the GetInvalid error response.
func (client *intOperations) getInvalidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetInvalidUnixTime - Get invalid Unix time value
func (client *intOperations) GetInvalidUnixTime(ctx context.Context) (*TimeResponse, error) {
	req, err := client.getInvalidUnixTimeCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getInvalidUnixTimeHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getInvalidUnixTimeCreateRequest creates the GetInvalidUnixTime request.
func (client *intOperations) getInvalidUnixTimeCreateRequest() (*azcore.Request, error) {
	urlPath := "/int/invalidunixtime"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getInvalidUnixTimeHandleResponse handles the GetInvalidUnixTime response.
func (client *intOperations) getInvalidUnixTimeHandleResponse(resp *azcore.Response) (*TimeResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getInvalidUnixTimeHandleError(resp)
	}
	var aux *timeUnix
	err := resp.UnmarshalAsJSON(&aux)
	return &TimeResponse{RawResponse: resp.Response, Value: (*time.Time)(aux)}, err
}

// getInvalidUnixTimeHandleError handles the GetInvalidUnixTime error response.
func (client *intOperations) getInvalidUnixTimeHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetNull - Get null Int value
func (client *intOperations) GetNull(ctx context.Context) (*Int32Response, error) {
	req, err := client.getNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getNullCreateRequest creates the GetNull request.
func (client *intOperations) getNullCreateRequest() (*azcore.Request, error) {
	urlPath := "/int/null"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getNullHandleResponse handles the GetNull response.
func (client *intOperations) getNullHandleResponse(resp *azcore.Response) (*Int32Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getNullHandleError(resp)
	}
	result := Int32Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getNullHandleError handles the GetNull error response.
func (client *intOperations) getNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetNullUnixTime - Get null Unix time value
func (client *intOperations) GetNullUnixTime(ctx context.Context) (*TimeResponse, error) {
	req, err := client.getNullUnixTimeCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getNullUnixTimeHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getNullUnixTimeCreateRequest creates the GetNullUnixTime request.
func (client *intOperations) getNullUnixTimeCreateRequest() (*azcore.Request, error) {
	urlPath := "/int/nullunixtime"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getNullUnixTimeHandleResponse handles the GetNullUnixTime response.
func (client *intOperations) getNullUnixTimeHandleResponse(resp *azcore.Response) (*TimeResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getNullUnixTimeHandleError(resp)
	}
	var aux *timeUnix
	err := resp.UnmarshalAsJSON(&aux)
	return &TimeResponse{RawResponse: resp.Response, Value: (*time.Time)(aux)}, err
}

// getNullUnixTimeHandleError handles the GetNullUnixTime error response.
func (client *intOperations) getNullUnixTimeHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetOverflowInt32 - Get overflow Int32 value
func (client *intOperations) GetOverflowInt32(ctx context.Context) (*Int32Response, error) {
	req, err := client.getOverflowInt32CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getOverflowInt32HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getOverflowInt32CreateRequest creates the GetOverflowInt32 request.
func (client *intOperations) getOverflowInt32CreateRequest() (*azcore.Request, error) {
	urlPath := "/int/overflowint32"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getOverflowInt32HandleResponse handles the GetOverflowInt32 response.
func (client *intOperations) getOverflowInt32HandleResponse(resp *azcore.Response) (*Int32Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getOverflowInt32HandleError(resp)
	}
	result := Int32Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getOverflowInt32HandleError handles the GetOverflowInt32 error response.
func (client *intOperations) getOverflowInt32HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetOverflowInt64 - Get overflow Int64 value
func (client *intOperations) GetOverflowInt64(ctx context.Context) (*Int64Response, error) {
	req, err := client.getOverflowInt64CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getOverflowInt64HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getOverflowInt64CreateRequest creates the GetOverflowInt64 request.
func (client *intOperations) getOverflowInt64CreateRequest() (*azcore.Request, error) {
	urlPath := "/int/overflowint64"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getOverflowInt64HandleResponse handles the GetOverflowInt64 response.
func (client *intOperations) getOverflowInt64HandleResponse(resp *azcore.Response) (*Int64Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getOverflowInt64HandleError(resp)
	}
	result := Int64Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getOverflowInt64HandleError handles the GetOverflowInt64 error response.
func (client *intOperations) getOverflowInt64HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetUnderflowInt32 - Get underflow Int32 value
func (client *intOperations) GetUnderflowInt32(ctx context.Context) (*Int32Response, error) {
	req, err := client.getUnderflowInt32CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getUnderflowInt32HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getUnderflowInt32CreateRequest creates the GetUnderflowInt32 request.
func (client *intOperations) getUnderflowInt32CreateRequest() (*azcore.Request, error) {
	urlPath := "/int/underflowint32"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getUnderflowInt32HandleResponse handles the GetUnderflowInt32 response.
func (client *intOperations) getUnderflowInt32HandleResponse(resp *azcore.Response) (*Int32Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getUnderflowInt32HandleError(resp)
	}
	result := Int32Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getUnderflowInt32HandleError handles the GetUnderflowInt32 error response.
func (client *intOperations) getUnderflowInt32HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetUnderflowInt64 - Get underflow Int64 value
func (client *intOperations) GetUnderflowInt64(ctx context.Context) (*Int64Response, error) {
	req, err := client.getUnderflowInt64CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getUnderflowInt64HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getUnderflowInt64CreateRequest creates the GetUnderflowInt64 request.
func (client *intOperations) getUnderflowInt64CreateRequest() (*azcore.Request, error) {
	urlPath := "/int/underflowint64"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getUnderflowInt64HandleResponse handles the GetUnderflowInt64 response.
func (client *intOperations) getUnderflowInt64HandleResponse(resp *azcore.Response) (*Int64Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getUnderflowInt64HandleError(resp)
	}
	result := Int64Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getUnderflowInt64HandleError handles the GetUnderflowInt64 error response.
func (client *intOperations) getUnderflowInt64HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetUnixTime - Get datetime encoded as Unix time value
func (client *intOperations) GetUnixTime(ctx context.Context) (*TimeResponse, error) {
	req, err := client.getUnixTimeCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getUnixTimeHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getUnixTimeCreateRequest creates the GetUnixTime request.
func (client *intOperations) getUnixTimeCreateRequest() (*azcore.Request, error) {
	urlPath := "/int/unixtime"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getUnixTimeHandleResponse handles the GetUnixTime response.
func (client *intOperations) getUnixTimeHandleResponse(resp *azcore.Response) (*TimeResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getUnixTimeHandleError(resp)
	}
	var aux *timeUnix
	err := resp.UnmarshalAsJSON(&aux)
	return &TimeResponse{RawResponse: resp.Response, Value: (*time.Time)(aux)}, err
}

// getUnixTimeHandleError handles the GetUnixTime error response.
func (client *intOperations) getUnixTimeHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutMax32 - Put max int32 value
func (client *intOperations) PutMax32(ctx context.Context, intBody int32) (*http.Response, error) {
	req, err := client.putMax32CreateRequest(intBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putMax32HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putMax32CreateRequest creates the PutMax32 request.
func (client *intOperations) putMax32CreateRequest(intBody int32) (*azcore.Request, error) {
	urlPath := "/int/max/32"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(intBody)
}

// putMax32HandleResponse handles the PutMax32 response.
func (client *intOperations) putMax32HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putMax32HandleError(resp)
	}
	return resp.Response, nil
}

// putMax32HandleError handles the PutMax32 error response.
func (client *intOperations) putMax32HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutMax64 - Put max int64 value
func (client *intOperations) PutMax64(ctx context.Context, intBody int64) (*http.Response, error) {
	req, err := client.putMax64CreateRequest(intBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putMax64HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putMax64CreateRequest creates the PutMax64 request.
func (client *intOperations) putMax64CreateRequest(intBody int64) (*azcore.Request, error) {
	urlPath := "/int/max/64"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(intBody)
}

// putMax64HandleResponse handles the PutMax64 response.
func (client *intOperations) putMax64HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putMax64HandleError(resp)
	}
	return resp.Response, nil
}

// putMax64HandleError handles the PutMax64 error response.
func (client *intOperations) putMax64HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutMin32 - Put min int32 value
func (client *intOperations) PutMin32(ctx context.Context, intBody int32) (*http.Response, error) {
	req, err := client.putMin32CreateRequest(intBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putMin32HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putMin32CreateRequest creates the PutMin32 request.
func (client *intOperations) putMin32CreateRequest(intBody int32) (*azcore.Request, error) {
	urlPath := "/int/min/32"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(intBody)
}

// putMin32HandleResponse handles the PutMin32 response.
func (client *intOperations) putMin32HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putMin32HandleError(resp)
	}
	return resp.Response, nil
}

// putMin32HandleError handles the PutMin32 error response.
func (client *intOperations) putMin32HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutMin64 - Put min int64 value
func (client *intOperations) PutMin64(ctx context.Context, intBody int64) (*http.Response, error) {
	req, err := client.putMin64CreateRequest(intBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putMin64HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putMin64CreateRequest creates the PutMin64 request.
func (client *intOperations) putMin64CreateRequest(intBody int64) (*azcore.Request, error) {
	urlPath := "/int/min/64"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(intBody)
}

// putMin64HandleResponse handles the PutMin64 response.
func (client *intOperations) putMin64HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putMin64HandleError(resp)
	}
	return resp.Response, nil
}

// putMin64HandleError handles the PutMin64 error response.
func (client *intOperations) putMin64HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutUnixTimeDate - Put datetime encoded as Unix time
func (client *intOperations) PutUnixTimeDate(ctx context.Context, intBody time.Time) (*http.Response, error) {
	req, err := client.putUnixTimeDateCreateRequest(intBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putUnixTimeDateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putUnixTimeDateCreateRequest creates the PutUnixTimeDate request.
func (client *intOperations) putUnixTimeDateCreateRequest(intBody time.Time) (*azcore.Request, error) {
	urlPath := "/int/unixtime"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	aux := timeUnix(intBody)
	return req, req.MarshalAsJSON(aux)
}

// putUnixTimeDateHandleResponse handles the PutUnixTimeDate response.
func (client *intOperations) putUnixTimeDateHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putUnixTimeDateHandleError(resp)
	}
	return resp.Response, nil
}

// putUnixTimeDateHandleError handles the PutUnixTimeDate error response.
func (client *intOperations) putUnixTimeDateHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
