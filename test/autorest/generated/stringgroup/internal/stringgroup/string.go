// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package stringgroup

import (
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"path"
)

// StringOperations contains the methods for the String group.
type StringOperations struct{}

// GetBase64EncodedCreateRequest creates the GetBase64Encoded request.
func (StringOperations) GetBase64EncodedCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/string/base64Encoding"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodGet, u)
	return req, nil
}

// GetBase64EncodedHandleResponse handles the GetBase64Encoded response.
func (StringOperations) GetBase64EncodedHandleResponse(resp *azcore.Response) (*StringGetBase64EncodedResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := StringGetBase64EncodedResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetBase64URLEncodedCreateRequest creates the GetBase64URLEncoded request.
func (StringOperations) GetBase64URLEncodedCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/string/base64UrlEncoding"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodGet, u)
	return req, nil
}

// GetBase64URLEncodedHandleResponse handles the GetBase64URLEncoded response.
func (StringOperations) GetBase64URLEncodedHandleResponse(resp *azcore.Response) (*StringGetBase64URLEncodedResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := StringGetBase64URLEncodedResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetEmptyCreateRequest creates the GetEmpty request.
func (StringOperations) GetEmptyCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/string/empty"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodGet, u)
	return req, nil
}

// GetEmptyHandleResponse handles the GetEmpty response.
func (StringOperations) GetEmptyHandleResponse(resp *azcore.Response) (*StringGetEmptyResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := StringGetEmptyResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetMBCSCreateRequest creates the GetMBCS request.
func (StringOperations) GetMBCSCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/string/mbcs"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodGet, u)
	return req, nil
}

// GetMBCSHandleResponse handles the GetMBCS response.
func (StringOperations) GetMBCSHandleResponse(resp *azcore.Response) (*StringGetMBCSResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := StringGetMBCSResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetNotProvidedCreateRequest creates the GetNotProvided request.
func (StringOperations) GetNotProvidedCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/string/notProvided"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodGet, u)
	return req, nil
}

// GetNotProvidedHandleResponse handles the GetNotProvided response.
func (StringOperations) GetNotProvidedHandleResponse(resp *azcore.Response) (*StringGetNotProvidedResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := StringGetNotProvidedResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetNullCreateRequest creates the GetNull request.
func (StringOperations) GetNullCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/string/null"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodGet, u)
	return req, nil
}

// GetNullHandleResponse handles the GetNull response.
func (StringOperations) GetNullHandleResponse(resp *azcore.Response) (*StringGetNullResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := StringGetNullResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetNullBase64URLEncodedCreateRequest creates the GetNullBase64URLEncoded request.
func (StringOperations) GetNullBase64URLEncodedCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/string/nullBase64UrlEncoding"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodGet, u)
	return req, nil
}

// GetNullBase64URLEncodedHandleResponse handles the GetNullBase64URLEncoded response.
func (StringOperations) GetNullBase64URLEncodedHandleResponse(resp *azcore.Response) (*StringGetNullBase64URLEncodedResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := StringGetNullBase64URLEncodedResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetWhitespaceCreateRequest creates the GetWhitespace request.
func (StringOperations) GetWhitespaceCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/string/whitespace"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodGet, u)
	return req, nil
}

// GetWhitespaceHandleResponse handles the GetWhitespace response.
func (StringOperations) GetWhitespaceHandleResponse(resp *azcore.Response) (*StringGetWhitespaceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := StringGetWhitespaceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// PutBase64URLEncodedCreateRequest creates the PutBase64URLEncoded request.
func (StringOperations) PutBase64URLEncodedCreateRequest(u url.URL, stringBody []byte) (*azcore.Request, error) {
	urlPath := "/string/base64UrlEncoding"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsJSON(stringBody)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutBase64URLEncodedHandleResponse handles the PutBase64URLEncoded response.
func (StringOperations) PutBase64URLEncodedHandleResponse(resp *azcore.Response) (*StringPutBase64URLEncodedResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &StringPutBase64URLEncodedResponse{RawResponse: resp.Response}, nil
}

// PutEmptyCreateRequest creates the PutEmpty request.
func (StringOperations) PutEmptyCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/string/empty"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsJSON("")
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutEmptyHandleResponse handles the PutEmpty response.
func (StringOperations) PutEmptyHandleResponse(resp *azcore.Response) (*StringPutEmptyResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &StringPutEmptyResponse{RawResponse: resp.Response}, nil
}

// PutMBCSCreateRequest creates the PutMBCS request.
func (StringOperations) PutMBCSCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/string/mbcs"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsJSON("啊齄丂狛狜隣郎隣兀﨩ˊ〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€")
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutMBCSHandleResponse handles the PutMBCS response.
func (StringOperations) PutMBCSHandleResponse(resp *azcore.Response) (*StringPutMBCSResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &StringPutMBCSResponse{RawResponse: resp.Response}, nil
}

// PutNullCreateRequest creates the PutNull request.
func (StringOperations) PutNullCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/string/null"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsJSON(nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutNullHandleResponse handles the PutNull response.
func (StringOperations) PutNullHandleResponse(resp *azcore.Response) (*StringPutNullResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &StringPutNullResponse{RawResponse: resp.Response}, nil
}

// PutWhitespaceCreateRequest creates the PutWhitespace request.
func (StringOperations) PutWhitespaceCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/string/whitespace"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsJSON("    Now is the time for all good men to come to the aid of their country    ")
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutWhitespaceHandleResponse handles the PutWhitespace response.
func (StringOperations) PutWhitespaceHandleResponse(resp *azcore.Response) (*StringPutWhitespaceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &StringPutWhitespaceResponse{RawResponse: resp.Response}, nil
}
