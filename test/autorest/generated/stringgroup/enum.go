// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package stringgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"path"
)

// EnumOperations contains the methods for the Enum group.
type EnumOperations interface {
	// GetNotExpandable - Get enum value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'.
	GetNotExpandable(ctx context.Context) (*ColorsResponse, error)
	// GetReferenced - Get enum value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'.
	GetReferenced(ctx context.Context) (*ColorsResponse, error)
	// GetReferencedConstant - Get value 'green-color' from the constant.
	GetReferencedConstant(ctx context.Context) (*RefColorConstantResponse, error)
	// PutNotExpandable - Sends value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'
	PutNotExpandable(ctx context.Context, stringBody Colors) (*http.Response, error)
	// PutReferenced - Sends value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'
	PutReferenced(ctx context.Context, enumStringBody Colors) (*http.Response, error)
	// PutReferencedConstant - Sends value 'green-color' from a constant
	PutReferencedConstant(ctx context.Context, enumStringBody RefColorConstant) (*http.Response, error)
}

// enumOperations implements the EnumOperations interface.
type enumOperations struct {
	*Client
}

// GetNotExpandable - Get enum value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'.
func (client *enumOperations) GetNotExpandable(ctx context.Context) (*ColorsResponse, error) {
	req, err := client.getNotExpandableCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getNotExpandableHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getNotExpandableCreateRequest creates the GetNotExpandable request.
func (client *enumOperations) getNotExpandableCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/string/enum/notExpandable"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodGet, u)
	return req, nil
}

// getNotExpandableHandleResponse handles the GetNotExpandable response.
func (client *enumOperations) getNotExpandableHandleResponse(resp *azcore.Response) (*ColorsResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := ColorsResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetReferenced - Get enum value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'.
func (client *enumOperations) GetReferenced(ctx context.Context) (*ColorsResponse, error) {
	req, err := client.getReferencedCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getReferencedHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getReferencedCreateRequest creates the GetReferenced request.
func (client *enumOperations) getReferencedCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/string/enum/Referenced"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodGet, u)
	return req, nil
}

// getReferencedHandleResponse handles the GetReferenced response.
func (client *enumOperations) getReferencedHandleResponse(resp *azcore.Response) (*ColorsResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := ColorsResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetReferencedConstant - Get value 'green-color' from the constant.
func (client *enumOperations) GetReferencedConstant(ctx context.Context) (*RefColorConstantResponse, error) {
	req, err := client.getReferencedConstantCreateRequest(*client.u)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getReferencedConstantHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getReferencedConstantCreateRequest creates the GetReferencedConstant request.
func (client *enumOperations) getReferencedConstantCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/string/enum/ReferencedConstant"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodGet, u)
	return req, nil
}

// getReferencedConstantHandleResponse handles the GetReferencedConstant response.
func (client *enumOperations) getReferencedConstantHandleResponse(resp *azcore.Response) (*RefColorConstantResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := RefColorConstantResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.RefColorConstant)
}

// PutNotExpandable - Sends value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'
func (client *enumOperations) PutNotExpandable(ctx context.Context, stringBody Colors) (*http.Response, error) {
	req, err := client.putNotExpandableCreateRequest(*client.u, stringBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putNotExpandableHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putNotExpandableCreateRequest creates the PutNotExpandable request.
func (client *enumOperations) putNotExpandableCreateRequest(u url.URL, stringBody Colors) (*azcore.Request, error) {
	urlPath := "/string/enum/notExpandable"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsJSON(stringBody)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// putNotExpandableHandleResponse handles the PutNotExpandable response.
func (client *enumOperations) putNotExpandableHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return resp.Response, nil
}

// PutReferenced - Sends value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'
func (client *enumOperations) PutReferenced(ctx context.Context, enumStringBody Colors) (*http.Response, error) {
	req, err := client.putReferencedCreateRequest(*client.u, enumStringBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putReferencedHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putReferencedCreateRequest creates the PutReferenced request.
func (client *enumOperations) putReferencedCreateRequest(u url.URL, enumStringBody Colors) (*azcore.Request, error) {
	urlPath := "/string/enum/Referenced"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsJSON(enumStringBody)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// putReferencedHandleResponse handles the PutReferenced response.
func (client *enumOperations) putReferencedHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return resp.Response, nil
}

// PutReferencedConstant - Sends value 'green-color' from a constant
func (client *enumOperations) PutReferencedConstant(ctx context.Context, enumStringBody RefColorConstant) (*http.Response, error) {
	req, err := client.putReferencedConstantCreateRequest(*client.u, enumStringBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putReferencedConstantHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putReferencedConstantCreateRequest creates the PutReferencedConstant request.
func (client *enumOperations) putReferencedConstantCreateRequest(u url.URL, enumStringBody RefColorConstant) (*azcore.Request, error) {
	urlPath := "/string/enum/ReferencedConstant"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsJSON(enumStringBody)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// putReferencedConstantHandleResponse handles the PutReferencedConstant response.
func (client *enumOperations) putReferencedConstantHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return resp.Response, nil
}
