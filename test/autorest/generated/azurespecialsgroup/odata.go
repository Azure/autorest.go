// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azurespecialsgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"path"
	"strconv"
)

// OdataOperations contains the methods for the Odata group.
type OdataOperations interface {
	// GetWithFilter - Specify filter parameter with value '$filter=id gt 5 and name eq 'foo'&$orderby=id&$top=10'
	GetWithFilter(ctx context.Context, odataGetWithFilterOptions *OdataGetWithFilterOptions) (*http.Response, error)
}

// odataOperations implements the OdataOperations interface.
type odataOperations struct {
	*Client
}

// GetWithFilter - Specify filter parameter with value '$filter=id gt 5 and name eq 'foo'&$orderby=id&$top=10'
func (client *odataOperations) GetWithFilter(ctx context.Context, odataGetWithFilterOptions *OdataGetWithFilterOptions) (*http.Response, error) {
	req, err := client.getWithFilterCreateRequest(odataGetWithFilterOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getWithFilterHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getWithFilterCreateRequest creates the GetWithFilter request.
func (client *odataOperations) getWithFilterCreateRequest(odataGetWithFilterOptions *OdataGetWithFilterOptions) (*azcore.Request, error) {
	urlPath := "/azurespecials/odata/filter"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if odataGetWithFilterOptions != nil && odataGetWithFilterOptions.Filter != nil {
		query.Set("$filter", *odataGetWithFilterOptions.Filter)
	}
	if odataGetWithFilterOptions != nil && odataGetWithFilterOptions.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*odataGetWithFilterOptions.Top), 10))
	}
	if odataGetWithFilterOptions != nil && odataGetWithFilterOptions.Orderby != nil {
		query.Set("$orderby", *odataGetWithFilterOptions.Orderby)
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getWithFilterHandleResponse handles the GetWithFilter response.
func (client *odataOperations) getWithFilterHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getWithFilterHandleError(resp)
	}
	return resp.Response, nil
}

// getWithFilterHandleError handles the GetWithFilter error response.
func (client *odataOperations) getWithFilterHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
