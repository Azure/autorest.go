// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azurespecialsgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"path"
	"strings"
)

// SkipURLEncodingOperations contains the methods for the SkipURLEncoding group.
type SkipURLEncodingOperations interface {
	// GetMethodPathValid - Get method with unencoded path parameter with value 'path1/path2/path3'
	GetMethodPathValid(ctx context.Context, unencodedPathParam string) (*http.Response, error)
	// GetMethodQueryNull - Get method with unencoded query parameter with value null
	GetMethodQueryNull(ctx context.Context, skipUrlEncodingGetMethodQueryNullOptions *SkipURLEncodingGetMethodQueryNullOptions) (*http.Response, error)
	// GetMethodQueryValid - Get method with unencoded query parameter with value 'value1&q2=value2&q3=value3'
	GetMethodQueryValid(ctx context.Context, q1 string) (*http.Response, error)
	// GetPathQueryValid - Get method with unencoded query parameter with value 'value1&q2=value2&q3=value3'
	GetPathQueryValid(ctx context.Context, q1 string) (*http.Response, error)
	// GetPathValid - Get method with unencoded path parameter with value 'path1/path2/path3'
	GetPathValid(ctx context.Context, unencodedPathParam string) (*http.Response, error)
	// GetSwaggerPathValid - Get method with unencoded path parameter with value 'path1/path2/path3'
	GetSwaggerPathValid(ctx context.Context) (*http.Response, error)
	// GetSwaggerQueryValid - Get method with unencoded query parameter with value 'value1&q2=value2&q3=value3'
	GetSwaggerQueryValid(ctx context.Context) (*http.Response, error)
}

// skipUrlEncodingOperations implements the SkipURLEncodingOperations interface.
type skipUrlEncodingOperations struct {
	*Client
}

// GetMethodPathValid - Get method with unencoded path parameter with value 'path1/path2/path3'
func (client *skipUrlEncodingOperations) GetMethodPathValid(ctx context.Context, unencodedPathParam string) (*http.Response, error) {
	req, err := client.getMethodPathValidCreateRequest(unencodedPathParam)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getMethodPathValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getMethodPathValidCreateRequest creates the GetMethodPathValid request.
func (client *skipUrlEncodingOperations) getMethodPathValidCreateRequest(unencodedPathParam string) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/azurespecials/skipUrlEncoding/method/path/valid/{unencodedPathParam}"
	urlPath = strings.ReplaceAll(urlPath, "{unencodedPathParam}", unencodedPathParam)
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getMethodPathValidHandleResponse handles the GetMethodPathValid response.
func (client *skipUrlEncodingOperations) getMethodPathValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getMethodPathValidHandleError(resp)
	}
	return resp.Response, nil
}

// getMethodPathValidHandleError handles the GetMethodPathValid error response.
func (client *skipUrlEncodingOperations) getMethodPathValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetMethodQueryNull - Get method with unencoded query parameter with value null
func (client *skipUrlEncodingOperations) GetMethodQueryNull(ctx context.Context, skipUrlEncodingGetMethodQueryNullOptions *SkipURLEncodingGetMethodQueryNullOptions) (*http.Response, error) {
	req, err := client.getMethodQueryNullCreateRequest(skipUrlEncodingGetMethodQueryNullOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getMethodQueryNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getMethodQueryNullCreateRequest creates the GetMethodQueryNull request.
func (client *skipUrlEncodingOperations) getMethodQueryNullCreateRequest(skipUrlEncodingGetMethodQueryNullOptions *SkipURLEncodingGetMethodQueryNullOptions) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/azurespecials/skipUrlEncoding/method/query/null"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	unencodedParams := []string{}
	if skipUrlEncodingGetMethodQueryNullOptions != nil && skipUrlEncodingGetMethodQueryNullOptions.Q1 != nil {
		unencodedParams = append(unencodedParams, "q1="+*skipUrlEncodingGetMethodQueryNullOptions.Q1)
	}
	u.RawQuery = strings.Join(unencodedParams, "&")
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getMethodQueryNullHandleResponse handles the GetMethodQueryNull response.
func (client *skipUrlEncodingOperations) getMethodQueryNullHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getMethodQueryNullHandleError(resp)
	}
	return resp.Response, nil
}

// getMethodQueryNullHandleError handles the GetMethodQueryNull error response.
func (client *skipUrlEncodingOperations) getMethodQueryNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetMethodQueryValid - Get method with unencoded query parameter with value 'value1&q2=value2&q3=value3'
func (client *skipUrlEncodingOperations) GetMethodQueryValid(ctx context.Context, q1 string) (*http.Response, error) {
	req, err := client.getMethodQueryValidCreateRequest(q1)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getMethodQueryValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getMethodQueryValidCreateRequest creates the GetMethodQueryValid request.
func (client *skipUrlEncodingOperations) getMethodQueryValidCreateRequest(q1 string) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/azurespecials/skipUrlEncoding/method/query/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	unencodedParams := []string{}
	unencodedParams = append(unencodedParams, "q1="+q1)
	u.RawQuery = strings.Join(unencodedParams, "&")
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getMethodQueryValidHandleResponse handles the GetMethodQueryValid response.
func (client *skipUrlEncodingOperations) getMethodQueryValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getMethodQueryValidHandleError(resp)
	}
	return resp.Response, nil
}

// getMethodQueryValidHandleError handles the GetMethodQueryValid error response.
func (client *skipUrlEncodingOperations) getMethodQueryValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetPathQueryValid - Get method with unencoded query parameter with value 'value1&q2=value2&q3=value3'
func (client *skipUrlEncodingOperations) GetPathQueryValid(ctx context.Context, q1 string) (*http.Response, error) {
	req, err := client.getPathQueryValidCreateRequest(q1)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getPathQueryValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getPathQueryValidCreateRequest creates the GetPathQueryValid request.
func (client *skipUrlEncodingOperations) getPathQueryValidCreateRequest(q1 string) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/azurespecials/skipUrlEncoding/path/query/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	unencodedParams := []string{}
	unencodedParams = append(unencodedParams, "q1="+q1)
	u.RawQuery = strings.Join(unencodedParams, "&")
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getPathQueryValidHandleResponse handles the GetPathQueryValid response.
func (client *skipUrlEncodingOperations) getPathQueryValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getPathQueryValidHandleError(resp)
	}
	return resp.Response, nil
}

// getPathQueryValidHandleError handles the GetPathQueryValid error response.
func (client *skipUrlEncodingOperations) getPathQueryValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetPathValid - Get method with unencoded path parameter with value 'path1/path2/path3'
func (client *skipUrlEncodingOperations) GetPathValid(ctx context.Context, unencodedPathParam string) (*http.Response, error) {
	req, err := client.getPathValidCreateRequest(unencodedPathParam)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getPathValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getPathValidCreateRequest creates the GetPathValid request.
func (client *skipUrlEncodingOperations) getPathValidCreateRequest(unencodedPathParam string) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/azurespecials/skipUrlEncoding/path/path/valid/{unencodedPathParam}"
	urlPath = strings.ReplaceAll(urlPath, "{unencodedPathParam}", unencodedPathParam)
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getPathValidHandleResponse handles the GetPathValid response.
func (client *skipUrlEncodingOperations) getPathValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getPathValidHandleError(resp)
	}
	return resp.Response, nil
}

// getPathValidHandleError handles the GetPathValid error response.
func (client *skipUrlEncodingOperations) getPathValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetSwaggerPathValid - Get method with unencoded path parameter with value 'path1/path2/path3'
func (client *skipUrlEncodingOperations) GetSwaggerPathValid(ctx context.Context) (*http.Response, error) {
	req, err := client.getSwaggerPathValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getSwaggerPathValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getSwaggerPathValidCreateRequest creates the GetSwaggerPathValid request.
func (client *skipUrlEncodingOperations) getSwaggerPathValidCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/azurespecials/skipUrlEncoding/swagger/path/valid/{unencodedPathParam}"
	urlPath = strings.ReplaceAll(urlPath, "{unencodedPathParam}", "path1/path2/path3")
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getSwaggerPathValidHandleResponse handles the GetSwaggerPathValid response.
func (client *skipUrlEncodingOperations) getSwaggerPathValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getSwaggerPathValidHandleError(resp)
	}
	return resp.Response, nil
}

// getSwaggerPathValidHandleError handles the GetSwaggerPathValid error response.
func (client *skipUrlEncodingOperations) getSwaggerPathValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetSwaggerQueryValid - Get method with unencoded query parameter with value 'value1&q2=value2&q3=value3'
func (client *skipUrlEncodingOperations) GetSwaggerQueryValid(ctx context.Context) (*http.Response, error) {
	req, err := client.getSwaggerQueryValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getSwaggerQueryValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getSwaggerQueryValidCreateRequest creates the GetSwaggerQueryValid request.
func (client *skipUrlEncodingOperations) getSwaggerQueryValidCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/azurespecials/skipUrlEncoding/swagger/query/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	unencodedParams := []string{}
	unencodedParams = append(unencodedParams, "q1="+"value1&q2=value2&q3=value3")
	u.RawQuery = strings.Join(unencodedParams, "&")
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getSwaggerQueryValidHandleResponse handles the GetSwaggerQueryValid response.
func (client *skipUrlEncodingOperations) getSwaggerQueryValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getSwaggerQueryValidHandleError(resp)
	}
	return resp.Response, nil
}

// getSwaggerQueryValidHandleError handles the GetSwaggerQueryValid error response.
func (client *skipUrlEncodingOperations) getSwaggerQueryValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
