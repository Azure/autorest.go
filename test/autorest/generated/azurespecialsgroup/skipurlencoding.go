// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azurespecialsgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"path"
	"strings"
)

// SkipURLEncodingOperations contains the methods for the SkipURLEncoding group.
type SkipURLEncodingOperations interface {
	// GetMethodPathValid - Get method with unencoded path parameter with value 'path1/path2/path3'
	GetMethodPathValid(ctx context.Context, unencodedPathParam string) (*http.Response, error)
	// GetMethodQueryNull - Get method with unencoded query parameter with value null
	GetMethodQueryNull(ctx context.Context, skipUrlEncodingGetMethodQueryNullOptions *SkipURLEncodingGetMethodQueryNullOptions) (*http.Response, error)
	// GetMethodQueryValid - Get method with unencoded query parameter with value 'value1&q2=value2&q3=value3'
	GetMethodQueryValid(ctx context.Context, q1 string) (*http.Response, error)
	// GetPathQueryValid - Get method with unencoded query parameter with value 'value1&q2=value2&q3=value3'
	GetPathQueryValid(ctx context.Context, q1 string) (*http.Response, error)
	// GetPathValid - Get method with unencoded path parameter with value 'path1/path2/path3'
	GetPathValid(ctx context.Context, unencodedPathParam string) (*http.Response, error)
	// GetSwaggerPathValid - Get method with unencoded path parameter with value 'path1/path2/path3'
	GetSwaggerPathValid(ctx context.Context) (*http.Response, error)
	// GetSwaggerQueryValid - Get method with unencoded query parameter with value 'value1&q2=value2&q3=value3'
	GetSwaggerQueryValid(ctx context.Context) (*http.Response, error)
}

// SkipURLEncodingClient implements the SkipURLEncodingOperations interface.
// Don't use this type directly, use NewSkipURLEncodingClient() instead.
type SkipURLEncodingClient struct {
	*Client
}

// NewSkipURLEncodingClient creates a new instance of SkipURLEncodingClient with the specified values.
func NewSkipURLEncodingClient(c *Client) SkipURLEncodingOperations {
	return &SkipURLEncodingClient{Client: c}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *SkipURLEncodingClient) Do(ctx context.Context, req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(ctx, req)
}

// GetMethodPathValid - Get method with unencoded path parameter with value 'path1/path2/path3'
func (client *SkipURLEncodingClient) GetMethodPathValid(ctx context.Context, unencodedPathParam string) (*http.Response, error) {
	req, err := client.GetMethodPathValidCreateRequest(unencodedPathParam)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetMethodPathValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetMethodPathValidCreateRequest creates the GetMethodPathValid request.
func (client *SkipURLEncodingClient) GetMethodPathValidCreateRequest(unencodedPathParam string) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/azurespecials/skipUrlEncoding/method/path/valid/{unencodedPathParam}"
	urlPath = strings.ReplaceAll(urlPath, "{unencodedPathParam}", unencodedPathParam)
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetMethodPathValidHandleResponse handles the GetMethodPathValid response.
func (client *SkipURLEncodingClient) GetMethodPathValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetMethodPathValidHandleError(resp)
	}
	return resp.Response, nil
}

// GetMethodPathValidHandleError handles the GetMethodPathValid error response.
func (client *SkipURLEncodingClient) GetMethodPathValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetMethodQueryNull - Get method with unencoded query parameter with value null
func (client *SkipURLEncodingClient) GetMethodQueryNull(ctx context.Context, skipUrlEncodingGetMethodQueryNullOptions *SkipURLEncodingGetMethodQueryNullOptions) (*http.Response, error) {
	req, err := client.GetMethodQueryNullCreateRequest(skipUrlEncodingGetMethodQueryNullOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetMethodQueryNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetMethodQueryNullCreateRequest creates the GetMethodQueryNull request.
func (client *SkipURLEncodingClient) GetMethodQueryNullCreateRequest(skipUrlEncodingGetMethodQueryNullOptions *SkipURLEncodingGetMethodQueryNullOptions) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/azurespecials/skipUrlEncoding/method/query/null"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	unencodedParams := []string{}
	if skipUrlEncodingGetMethodQueryNullOptions != nil && skipUrlEncodingGetMethodQueryNullOptions.Q1 != nil {
		unencodedParams = append(unencodedParams, "q1="+*skipUrlEncodingGetMethodQueryNullOptions.Q1)
	}
	u.RawQuery = strings.Join(unencodedParams, "&")
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetMethodQueryNullHandleResponse handles the GetMethodQueryNull response.
func (client *SkipURLEncodingClient) GetMethodQueryNullHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetMethodQueryNullHandleError(resp)
	}
	return resp.Response, nil
}

// GetMethodQueryNullHandleError handles the GetMethodQueryNull error response.
func (client *SkipURLEncodingClient) GetMethodQueryNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetMethodQueryValid - Get method with unencoded query parameter with value 'value1&q2=value2&q3=value3'
func (client *SkipURLEncodingClient) GetMethodQueryValid(ctx context.Context, q1 string) (*http.Response, error) {
	req, err := client.GetMethodQueryValidCreateRequest(q1)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetMethodQueryValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetMethodQueryValidCreateRequest creates the GetMethodQueryValid request.
func (client *SkipURLEncodingClient) GetMethodQueryValidCreateRequest(q1 string) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/azurespecials/skipUrlEncoding/method/query/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	unencodedParams := []string{}
	unencodedParams = append(unencodedParams, "q1="+q1)
	u.RawQuery = strings.Join(unencodedParams, "&")
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetMethodQueryValidHandleResponse handles the GetMethodQueryValid response.
func (client *SkipURLEncodingClient) GetMethodQueryValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetMethodQueryValidHandleError(resp)
	}
	return resp.Response, nil
}

// GetMethodQueryValidHandleError handles the GetMethodQueryValid error response.
func (client *SkipURLEncodingClient) GetMethodQueryValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetPathQueryValid - Get method with unencoded query parameter with value 'value1&q2=value2&q3=value3'
func (client *SkipURLEncodingClient) GetPathQueryValid(ctx context.Context, q1 string) (*http.Response, error) {
	req, err := client.GetPathQueryValidCreateRequest(q1)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetPathQueryValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetPathQueryValidCreateRequest creates the GetPathQueryValid request.
func (client *SkipURLEncodingClient) GetPathQueryValidCreateRequest(q1 string) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/azurespecials/skipUrlEncoding/path/query/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	unencodedParams := []string{}
	unencodedParams = append(unencodedParams, "q1="+q1)
	u.RawQuery = strings.Join(unencodedParams, "&")
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetPathQueryValidHandleResponse handles the GetPathQueryValid response.
func (client *SkipURLEncodingClient) GetPathQueryValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetPathQueryValidHandleError(resp)
	}
	return resp.Response, nil
}

// GetPathQueryValidHandleError handles the GetPathQueryValid error response.
func (client *SkipURLEncodingClient) GetPathQueryValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetPathValid - Get method with unencoded path parameter with value 'path1/path2/path3'
func (client *SkipURLEncodingClient) GetPathValid(ctx context.Context, unencodedPathParam string) (*http.Response, error) {
	req, err := client.GetPathValidCreateRequest(unencodedPathParam)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetPathValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetPathValidCreateRequest creates the GetPathValid request.
func (client *SkipURLEncodingClient) GetPathValidCreateRequest(unencodedPathParam string) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/azurespecials/skipUrlEncoding/path/path/valid/{unencodedPathParam}"
	urlPath = strings.ReplaceAll(urlPath, "{unencodedPathParam}", unencodedPathParam)
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetPathValidHandleResponse handles the GetPathValid response.
func (client *SkipURLEncodingClient) GetPathValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetPathValidHandleError(resp)
	}
	return resp.Response, nil
}

// GetPathValidHandleError handles the GetPathValid error response.
func (client *SkipURLEncodingClient) GetPathValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetSwaggerPathValid - Get method with unencoded path parameter with value 'path1/path2/path3'
func (client *SkipURLEncodingClient) GetSwaggerPathValid(ctx context.Context) (*http.Response, error) {
	req, err := client.GetSwaggerPathValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetSwaggerPathValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetSwaggerPathValidCreateRequest creates the GetSwaggerPathValid request.
func (client *SkipURLEncodingClient) GetSwaggerPathValidCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/azurespecials/skipUrlEncoding/swagger/path/valid/{unencodedPathParam}"
	urlPath = strings.ReplaceAll(urlPath, "{unencodedPathParam}", "path1/path2/path3")
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetSwaggerPathValidHandleResponse handles the GetSwaggerPathValid response.
func (client *SkipURLEncodingClient) GetSwaggerPathValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetSwaggerPathValidHandleError(resp)
	}
	return resp.Response, nil
}

// GetSwaggerPathValidHandleError handles the GetSwaggerPathValid error response.
func (client *SkipURLEncodingClient) GetSwaggerPathValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetSwaggerQueryValid - Get method with unencoded query parameter with value 'value1&q2=value2&q3=value3'
func (client *SkipURLEncodingClient) GetSwaggerQueryValid(ctx context.Context) (*http.Response, error) {
	req, err := client.GetSwaggerQueryValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetSwaggerQueryValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetSwaggerQueryValidCreateRequest creates the GetSwaggerQueryValid request.
func (client *SkipURLEncodingClient) GetSwaggerQueryValidCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/azurespecials/skipUrlEncoding/swagger/query/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	unencodedParams := []string{}
	unencodedParams = append(unencodedParams, "q1="+"value1&q2=value2&q3=value3")
	u.RawQuery = strings.Join(unencodedParams, "&")
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetSwaggerQueryValidHandleResponse handles the GetSwaggerQueryValid response.
func (client *SkipURLEncodingClient) GetSwaggerQueryValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetSwaggerQueryValidHandleError(resp)
	}
	return resp.Response, nil
}

// GetSwaggerQueryValidHandleError handles the GetSwaggerQueryValid error response.
func (client *SkipURLEncodingClient) GetSwaggerQueryValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
