// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package nonstringenumgroup

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
)

// IntOperations contains the methods for the Int group.
type IntOperations interface {
	// Get - Get an int enum
	Get(ctx context.Context) (*IntEnumResponse, error)
	// Put - Put an int enum
	Put(ctx context.Context, intPutOptions *IntPutOptions) (*StringResponse, error)
}

// intOperations implements the IntOperations interface.
type intOperations struct {
	*Client
}

// Get - Get an int enum
func (client *intOperations) Get(ctx context.Context) (*IntEnumResponse, error) {
	req, err := client.getCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getCreateRequest creates the Get request.
func (client *intOperations) getCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/nonStringEnums/int/get"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *intOperations) getHandleResponse(resp *azcore.Response) (*IntEnumResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getHandleError(resp)
	}
	result := IntEnumResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getHandleError handles the Get error response.
func (client *intOperations) getHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// Put - Put an int enum
func (client *intOperations) Put(ctx context.Context, intPutOptions *IntPutOptions) (*StringResponse, error) {
	req, err := client.putCreateRequest(intPutOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.putHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// putCreateRequest creates the Put request.
func (client *intOperations) putCreateRequest(intPutOptions *IntPutOptions) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/nonStringEnums/int/put"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	if intPutOptions != nil {
		return req, req.MarshalAsJSON(intPutOptions.Input)
	}
	return req, nil
}

// putHandleResponse handles the Put response.
func (client *intOperations) putHandleResponse(resp *azcore.Response) (*StringResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putHandleError(resp)
	}
	result := StringResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// putHandleError handles the Put error response.
func (client *intOperations) putHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}
