// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package httpinfrastructuregroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// HTTPRetryOperations contains the methods for the HTTPRetry group.
type HTTPRetryOperations interface {
	// Delete503 - Return 503 status code, then 200 after retry
	Delete503(ctx context.Context) (*http.Response, error)
	// Get502 - Return 502 status code, then 200 after retry
	Get502(ctx context.Context) (*http.Response, error)
	// Head408 - Return 408 status code, then 200 after retry
	Head408(ctx context.Context) (*http.Response, error)
	// Options502 - Return 502 status code, then 200 after retry
	Options502(ctx context.Context) (*BoolResponse, error)
	// Patch500 - Return 500 status code, then 200 after retry
	Patch500(ctx context.Context) (*http.Response, error)
	// Patch504 - Return 504 status code, then 200 after retry
	Patch504(ctx context.Context) (*http.Response, error)
	// Post503 - Return 503 status code, then 200 after retry
	Post503(ctx context.Context) (*http.Response, error)
	// Put500 - Return 500 status code, then 200 after retry
	Put500(ctx context.Context) (*http.Response, error)
	// Put504 - Return 504 status code, then 200 after retry
	Put504(ctx context.Context) (*http.Response, error)
}

// httpRetryOperations implements the HTTPRetryOperations interface.
type httpRetryOperations struct {
	*Client
}

// Delete503 - Return 503 status code, then 200 after retry
func (client *httpRetryOperations) Delete503(ctx context.Context) (*http.Response, error) {
	req, err := client.delete503CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.delete503HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// delete503CreateRequest creates the Delete503 request.
func (client *httpRetryOperations) delete503CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/retry/503"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, req.MarshalAsJSON(true)
}

// delete503HandleResponse handles the Delete503 response.
func (client *httpRetryOperations) delete503HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return resp.Response, nil
}

// Get502 - Return 502 status code, then 200 after retry
func (client *httpRetryOperations) Get502(ctx context.Context) (*http.Response, error) {
	req, err := client.get502CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get502HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get502CreateRequest creates the Get502 request.
func (client *httpRetryOperations) get502CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/retry/502"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get502HandleResponse handles the Get502 response.
func (client *httpRetryOperations) get502HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return resp.Response, nil
}

// Head408 - Return 408 status code, then 200 after retry
func (client *httpRetryOperations) Head408(ctx context.Context) (*http.Response, error) {
	req, err := client.head408CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.head408HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// head408CreateRequest creates the Head408 request.
func (client *httpRetryOperations) head408CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/retry/408"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodHead, *u)
	return req, nil
}

// head408HandleResponse handles the Head408 response.
func (client *httpRetryOperations) head408HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return resp.Response, nil
}

// Options502 - Return 502 status code, then 200 after retry
func (client *httpRetryOperations) Options502(ctx context.Context) (*BoolResponse, error) {
	req, err := client.options502CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.options502HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// options502CreateRequest creates the Options502 request.
func (client *httpRetryOperations) options502CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/retry/502"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodOptions, *u)
	return req, nil
}

// options502HandleResponse handles the Options502 response.
func (client *httpRetryOperations) options502HandleResponse(resp *azcore.Response) (*BoolResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := BoolResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// Patch500 - Return 500 status code, then 200 after retry
func (client *httpRetryOperations) Patch500(ctx context.Context) (*http.Response, error) {
	req, err := client.patch500CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.patch500HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// patch500CreateRequest creates the Patch500 request.
func (client *httpRetryOperations) patch500CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/retry/500"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPatch, *u)
	return req, req.MarshalAsJSON(true)
}

// patch500HandleResponse handles the Patch500 response.
func (client *httpRetryOperations) patch500HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return resp.Response, nil
}

// Patch504 - Return 504 status code, then 200 after retry
func (client *httpRetryOperations) Patch504(ctx context.Context) (*http.Response, error) {
	req, err := client.patch504CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.patch504HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// patch504CreateRequest creates the Patch504 request.
func (client *httpRetryOperations) patch504CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/retry/504"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPatch, *u)
	return req, req.MarshalAsJSON(true)
}

// patch504HandleResponse handles the Patch504 response.
func (client *httpRetryOperations) patch504HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return resp.Response, nil
}

// Post503 - Return 503 status code, then 200 after retry
func (client *httpRetryOperations) Post503(ctx context.Context) (*http.Response, error) {
	req, err := client.post503CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.post503HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// post503CreateRequest creates the Post503 request.
func (client *httpRetryOperations) post503CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/retry/503"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(true)
}

// post503HandleResponse handles the Post503 response.
func (client *httpRetryOperations) post503HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return resp.Response, nil
}

// Put500 - Return 500 status code, then 200 after retry
func (client *httpRetryOperations) Put500(ctx context.Context) (*http.Response, error) {
	req, err := client.put500CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.put500HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// put500CreateRequest creates the Put500 request.
func (client *httpRetryOperations) put500CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/retry/500"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(true)
}

// put500HandleResponse handles the Put500 response.
func (client *httpRetryOperations) put500HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return resp.Response, nil
}

// Put504 - Return 504 status code, then 200 after retry
func (client *httpRetryOperations) Put504(ctx context.Context) (*http.Response, error) {
	req, err := client.put504CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.put504HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// put504CreateRequest creates the Put504 request.
func (client *httpRetryOperations) put504CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/retry/504"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(true)
}

// put504HandleResponse handles the Put504 response.
func (client *httpRetryOperations) put504HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return resp.Response, nil
}
