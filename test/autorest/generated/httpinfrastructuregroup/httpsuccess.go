// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package httpinfrastructuregroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"path"
)

// HTTPSuccessOperations contains the methods for the HTTPSuccess group.
type HTTPSuccessOperations interface {
	// Delete200 - Delete simple boolean value true returns 200
	Delete200(ctx context.Context) (*http.Response, error)
	// Delete202 - Delete true Boolean value in request returns 202 (accepted)
	Delete202(ctx context.Context) (*http.Response, error)
	// Delete204 - Delete true Boolean value in request returns 204 (no content)
	Delete204(ctx context.Context) (*http.Response, error)
	// Get200 - Get 200 success
	Get200(ctx context.Context) (*BoolResponse, error)
	// Head200 - Return 200 status code if successful
	Head200(ctx context.Context) (*http.Response, error)
	// Head204 - Return 204 status code if successful
	Head204(ctx context.Context) (*http.Response, error)
	// Head404 - Return 404 status code
	Head404(ctx context.Context) (*http.Response, error)
	// Options200 - Options 200 success
	Options200(ctx context.Context) (*BoolResponse, error)
	// Patch200 - Patch true Boolean value in request returning 200
	Patch200(ctx context.Context) (*http.Response, error)
	// Patch202 - Patch true Boolean value in request returns 202
	Patch202(ctx context.Context) (*http.Response, error)
	// Patch204 - Patch true Boolean value in request returns 204 (no content)
	Patch204(ctx context.Context) (*http.Response, error)
	// Post200 - Post bollean value true in request that returns a 200
	Post200(ctx context.Context) (*http.Response, error)
	// Post201 - Post true Boolean value in request returns 201 (Created)
	Post201(ctx context.Context) (*http.Response, error)
	// Post202 - Post true Boolean value in request returns 202 (Accepted)
	Post202(ctx context.Context) (*http.Response, error)
	// Post204 - Post true Boolean value in request returns 204 (no content)
	Post204(ctx context.Context) (*http.Response, error)
	// Put200 - Put boolean value true returning 200 success
	Put200(ctx context.Context) (*http.Response, error)
	// Put201 - Put true Boolean value in request returns 201
	Put201(ctx context.Context) (*http.Response, error)
	// Put202 - Put true Boolean value in request returns 202 (Accepted)
	Put202(ctx context.Context) (*http.Response, error)
	// Put204 - Put true Boolean value in request returns 204 (no content)
	Put204(ctx context.Context) (*http.Response, error)
}

// httpSuccessOperations implements the HTTPSuccessOperations interface.
type httpSuccessOperations struct {
	*Client
}

// Delete200 - Delete simple boolean value true returns 200
func (client *httpSuccessOperations) Delete200(ctx context.Context) (*http.Response, error) {
	req, err := client.delete200CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.delete200HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// delete200CreateRequest creates the Delete200 request.
func (client *httpSuccessOperations) delete200CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/success/200"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, req.MarshalAsJSON(true)
}

// delete200HandleResponse handles the Delete200 response.
func (client *httpSuccessOperations) delete200HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.delete200HandleError(resp)
	}
	return resp.Response, nil
}

// delete200HandleError handles the Delete200 error response.
func (client *httpSuccessOperations) delete200HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Delete202 - Delete true Boolean value in request returns 202 (accepted)
func (client *httpSuccessOperations) Delete202(ctx context.Context) (*http.Response, error) {
	req, err := client.delete202CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.delete202HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// delete202CreateRequest creates the Delete202 request.
func (client *httpSuccessOperations) delete202CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/success/202"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, req.MarshalAsJSON(true)
}

// delete202HandleResponse handles the Delete202 response.
func (client *httpSuccessOperations) delete202HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusAccepted) {
		return nil, client.delete202HandleError(resp)
	}
	return resp.Response, nil
}

// delete202HandleError handles the Delete202 error response.
func (client *httpSuccessOperations) delete202HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Delete204 - Delete true Boolean value in request returns 204 (no content)
func (client *httpSuccessOperations) Delete204(ctx context.Context) (*http.Response, error) {
	req, err := client.delete204CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.delete204HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// delete204CreateRequest creates the Delete204 request.
func (client *httpSuccessOperations) delete204CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/success/204"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, req.MarshalAsJSON(true)
}

// delete204HandleResponse handles the Delete204 response.
func (client *httpSuccessOperations) delete204HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusNoContent) {
		return nil, client.delete204HandleError(resp)
	}
	return resp.Response, nil
}

// delete204HandleError handles the Delete204 error response.
func (client *httpSuccessOperations) delete204HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Get200 - Get 200 success
func (client *httpSuccessOperations) Get200(ctx context.Context) (*BoolResponse, error) {
	req, err := client.get200CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get200HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get200CreateRequest creates the Get200 request.
func (client *httpSuccessOperations) get200CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/success/200"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get200HandleResponse handles the Get200 response.
func (client *httpSuccessOperations) get200HandleResponse(resp *azcore.Response) (*BoolResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.get200HandleError(resp)
	}
	result := BoolResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// get200HandleError handles the Get200 error response.
func (client *httpSuccessOperations) get200HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Head200 - Return 200 status code if successful
func (client *httpSuccessOperations) Head200(ctx context.Context) (*http.Response, error) {
	req, err := client.head200CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.head200HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// head200CreateRequest creates the Head200 request.
func (client *httpSuccessOperations) head200CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/success/200"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodHead, *u)
	return req, nil
}

// head200HandleResponse handles the Head200 response.
func (client *httpSuccessOperations) head200HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.head200HandleError(resp)
	}
	return resp.Response, nil
}

// head200HandleError handles the Head200 error response.
func (client *httpSuccessOperations) head200HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Head204 - Return 204 status code if successful
func (client *httpSuccessOperations) Head204(ctx context.Context) (*http.Response, error) {
	req, err := client.head204CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.head204HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// head204CreateRequest creates the Head204 request.
func (client *httpSuccessOperations) head204CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/success/204"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodHead, *u)
	return req, nil
}

// head204HandleResponse handles the Head204 response.
func (client *httpSuccessOperations) head204HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusNoContent) {
		return nil, client.head204HandleError(resp)
	}
	return resp.Response, nil
}

// head204HandleError handles the Head204 error response.
func (client *httpSuccessOperations) head204HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Head404 - Return 404 status code
func (client *httpSuccessOperations) Head404(ctx context.Context) (*http.Response, error) {
	req, err := client.head404CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.head404HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// head404CreateRequest creates the Head404 request.
func (client *httpSuccessOperations) head404CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/success/404"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodHead, *u)
	return req, nil
}

// head404HandleResponse handles the Head404 response.
func (client *httpSuccessOperations) head404HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusNoContent, http.StatusNotFound) {
		return nil, client.head404HandleError(resp)
	}
	return resp.Response, nil
}

// head404HandleError handles the Head404 error response.
func (client *httpSuccessOperations) head404HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Options200 - Options 200 success
func (client *httpSuccessOperations) Options200(ctx context.Context) (*BoolResponse, error) {
	req, err := client.options200CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.options200HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// options200CreateRequest creates the Options200 request.
func (client *httpSuccessOperations) options200CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/success/200"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodOptions, *u)
	return req, nil
}

// options200HandleResponse handles the Options200 response.
func (client *httpSuccessOperations) options200HandleResponse(resp *azcore.Response) (*BoolResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.options200HandleError(resp)
	}
	result := BoolResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// options200HandleError handles the Options200 error response.
func (client *httpSuccessOperations) options200HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Patch200 - Patch true Boolean value in request returning 200
func (client *httpSuccessOperations) Patch200(ctx context.Context) (*http.Response, error) {
	req, err := client.patch200CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.patch200HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// patch200CreateRequest creates the Patch200 request.
func (client *httpSuccessOperations) patch200CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/success/200"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPatch, *u)
	return req, req.MarshalAsJSON(true)
}

// patch200HandleResponse handles the Patch200 response.
func (client *httpSuccessOperations) patch200HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.patch200HandleError(resp)
	}
	return resp.Response, nil
}

// patch200HandleError handles the Patch200 error response.
func (client *httpSuccessOperations) patch200HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Patch202 - Patch true Boolean value in request returns 202
func (client *httpSuccessOperations) Patch202(ctx context.Context) (*http.Response, error) {
	req, err := client.patch202CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.patch202HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// patch202CreateRequest creates the Patch202 request.
func (client *httpSuccessOperations) patch202CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/success/202"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPatch, *u)
	return req, req.MarshalAsJSON(true)
}

// patch202HandleResponse handles the Patch202 response.
func (client *httpSuccessOperations) patch202HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusAccepted) {
		return nil, client.patch202HandleError(resp)
	}
	return resp.Response, nil
}

// patch202HandleError handles the Patch202 error response.
func (client *httpSuccessOperations) patch202HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Patch204 - Patch true Boolean value in request returns 204 (no content)
func (client *httpSuccessOperations) Patch204(ctx context.Context) (*http.Response, error) {
	req, err := client.patch204CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.patch204HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// patch204CreateRequest creates the Patch204 request.
func (client *httpSuccessOperations) patch204CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/success/204"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPatch, *u)
	return req, req.MarshalAsJSON(true)
}

// patch204HandleResponse handles the Patch204 response.
func (client *httpSuccessOperations) patch204HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusNoContent) {
		return nil, client.patch204HandleError(resp)
	}
	return resp.Response, nil
}

// patch204HandleError handles the Patch204 error response.
func (client *httpSuccessOperations) patch204HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Post200 - Post bollean value true in request that returns a 200
func (client *httpSuccessOperations) Post200(ctx context.Context) (*http.Response, error) {
	req, err := client.post200CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.post200HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// post200CreateRequest creates the Post200 request.
func (client *httpSuccessOperations) post200CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/success/200"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(true)
}

// post200HandleResponse handles the Post200 response.
func (client *httpSuccessOperations) post200HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.post200HandleError(resp)
	}
	return resp.Response, nil
}

// post200HandleError handles the Post200 error response.
func (client *httpSuccessOperations) post200HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Post201 - Post true Boolean value in request returns 201 (Created)
func (client *httpSuccessOperations) Post201(ctx context.Context) (*http.Response, error) {
	req, err := client.post201CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.post201HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// post201CreateRequest creates the Post201 request.
func (client *httpSuccessOperations) post201CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/success/201"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(true)
}

// post201HandleResponse handles the Post201 response.
func (client *httpSuccessOperations) post201HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, client.post201HandleError(resp)
	}
	return resp.Response, nil
}

// post201HandleError handles the Post201 error response.
func (client *httpSuccessOperations) post201HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Post202 - Post true Boolean value in request returns 202 (Accepted)
func (client *httpSuccessOperations) Post202(ctx context.Context) (*http.Response, error) {
	req, err := client.post202CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.post202HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// post202CreateRequest creates the Post202 request.
func (client *httpSuccessOperations) post202CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/success/202"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(true)
}

// post202HandleResponse handles the Post202 response.
func (client *httpSuccessOperations) post202HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusAccepted) {
		return nil, client.post202HandleError(resp)
	}
	return resp.Response, nil
}

// post202HandleError handles the Post202 error response.
func (client *httpSuccessOperations) post202HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Post204 - Post true Boolean value in request returns 204 (no content)
func (client *httpSuccessOperations) Post204(ctx context.Context) (*http.Response, error) {
	req, err := client.post204CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.post204HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// post204CreateRequest creates the Post204 request.
func (client *httpSuccessOperations) post204CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/success/204"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(true)
}

// post204HandleResponse handles the Post204 response.
func (client *httpSuccessOperations) post204HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusNoContent) {
		return nil, client.post204HandleError(resp)
	}
	return resp.Response, nil
}

// post204HandleError handles the Post204 error response.
func (client *httpSuccessOperations) post204HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Put200 - Put boolean value true returning 200 success
func (client *httpSuccessOperations) Put200(ctx context.Context) (*http.Response, error) {
	req, err := client.put200CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.put200HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// put200CreateRequest creates the Put200 request.
func (client *httpSuccessOperations) put200CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/success/200"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(true)
}

// put200HandleResponse handles the Put200 response.
func (client *httpSuccessOperations) put200HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.put200HandleError(resp)
	}
	return resp.Response, nil
}

// put200HandleError handles the Put200 error response.
func (client *httpSuccessOperations) put200HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Put201 - Put true Boolean value in request returns 201
func (client *httpSuccessOperations) Put201(ctx context.Context) (*http.Response, error) {
	req, err := client.put201CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.put201HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// put201CreateRequest creates the Put201 request.
func (client *httpSuccessOperations) put201CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/success/201"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(true)
}

// put201HandleResponse handles the Put201 response.
func (client *httpSuccessOperations) put201HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, client.put201HandleError(resp)
	}
	return resp.Response, nil
}

// put201HandleError handles the Put201 error response.
func (client *httpSuccessOperations) put201HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Put202 - Put true Boolean value in request returns 202 (Accepted)
func (client *httpSuccessOperations) Put202(ctx context.Context) (*http.Response, error) {
	req, err := client.put202CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.put202HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// put202CreateRequest creates the Put202 request.
func (client *httpSuccessOperations) put202CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/success/202"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(true)
}

// put202HandleResponse handles the Put202 response.
func (client *httpSuccessOperations) put202HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusAccepted) {
		return nil, client.put202HandleError(resp)
	}
	return resp.Response, nil
}

// put202HandleError handles the Put202 error response.
func (client *httpSuccessOperations) put202HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Put204 - Put true Boolean value in request returns 204 (no content)
func (client *httpSuccessOperations) Put204(ctx context.Context) (*http.Response, error) {
	req, err := client.put204CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.put204HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// put204CreateRequest creates the Put204 request.
func (client *httpSuccessOperations) put204CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/success/204"
	u, err := client.u.Parse(path.Join(client.u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(true)
}

// put204HandleResponse handles the Put204 response.
func (client *httpSuccessOperations) put204HandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusNoContent) {
		return nil, client.put204HandleError(resp)
	}
	return resp.Response, nil
}

// put204HandleError handles the Put204 error response.
func (client *httpSuccessOperations) put204HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
