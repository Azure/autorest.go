// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package httpinfrastructuregroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// HTTPRedirectsOperations contains the methods for the HTTPRedirects group.
type HTTPRedirectsOperations interface {
	// Delete307 - Delete redirected with 307, resulting in a 200 after redirect
	Delete307(ctx context.Context) (*HTTPRedirectsDelete307Response, error)
	// Get300 - Return 300 status code and redirect to /http/success/200
	Get300(ctx context.Context) (*HTTPRedirectsGet300Response, error)
	// Get301 - Return 301 status code and redirect to /http/success/200
	Get301(ctx context.Context) (*HTTPRedirectsGet301Response, error)
	// Get302 - Return 302 status code and redirect to /http/success/200
	Get302(ctx context.Context) (*HTTPRedirectsGet302Response, error)
	// Get307 - Redirect get with 307, resulting in a 200 success
	Get307(ctx context.Context) (*HTTPRedirectsGet307Response, error)
	// Head300 - Return 300 status code and redirect to /http/success/200
	Head300(ctx context.Context) (*HTTPRedirectsHead300Response, error)
	// Head301 - Return 301 status code and redirect to /http/success/200
	Head301(ctx context.Context) (*HTTPRedirectsHead301Response, error)
	// Head302 - Return 302 status code and redirect to /http/success/200
	Head302(ctx context.Context) (*HTTPRedirectsHead302Response, error)
	// Head307 - Redirect with 307, resulting in a 200 success
	Head307(ctx context.Context) (*HTTPRedirectsHead307Response, error)
	// Options307 - options redirected with 307, resulting in a 200 after redirect
	Options307(ctx context.Context) (*HTTPRedirectsOptions307Response, error)
	// Patch302 - Patch true Boolean value in request returns 302.  This request should not be automatically redirected, but should return the received 302 to the caller for evaluation
	Patch302(ctx context.Context) (*HTTPRedirectsPatch302Response, error)
	// Patch307 - Patch redirected with 307, resulting in a 200 after redirect
	Patch307(ctx context.Context) (*HTTPRedirectsPatch307Response, error)
	// Post303 - Post true Boolean value in request returns 303.  This request should be automatically redirected usign a get, ultimately returning a 200 status code
	Post303(ctx context.Context) (*HTTPRedirectsPost303Response, error)
	// Post307 - Post redirected with 307, resulting in a 200 after redirect
	Post307(ctx context.Context) (*HTTPRedirectsPost307Response, error)
	// Put301 - Put true Boolean value in request returns 301.  This request should not be automatically redirected, but should return the received 301 to the caller for evaluation
	Put301(ctx context.Context) (*HTTPRedirectsPut301Response, error)
	// Put307 - Put redirected with 307, resulting in a 200 after redirect
	Put307(ctx context.Context) (*HTTPRedirectsPut307Response, error)
}

// httpRedirectsOperations implements the HTTPRedirectsOperations interface.
type httpRedirectsOperations struct {
	*Client
}

// Delete307 - Delete redirected with 307, resulting in a 200 after redirect
func (client *httpRedirectsOperations) Delete307(ctx context.Context) (*HTTPRedirectsDelete307Response, error) {
	req, err := client.delete307CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.delete307HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// delete307CreateRequest creates the Delete307 request.
func (client *httpRedirectsOperations) delete307CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/redirect/307"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, req.MarshalAsJSON(true)
}

// delete307HandleResponse handles the Delete307 response.
func (client *httpRedirectsOperations) delete307HandleResponse(resp *azcore.Response) (*HTTPRedirectsDelete307Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := HTTPRedirectsDelete307Response{RawResponse: resp.Response}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	return &result, nil
}

// Get300 - Return 300 status code and redirect to /http/success/200
func (client *httpRedirectsOperations) Get300(ctx context.Context) (*HTTPRedirectsGet300Response, error) {
	req, err := client.get300CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get300HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get300CreateRequest creates the Get300 request.
func (client *httpRedirectsOperations) get300CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/redirect/300"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get300HandleResponse handles the Get300 response.
func (client *httpRedirectsOperations) get300HandleResponse(resp *azcore.Response) (*HTTPRedirectsGet300Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := HTTPRedirectsGet300Response{RawResponse: resp.Response}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	return &result, nil
}

// Get301 - Return 301 status code and redirect to /http/success/200
func (client *httpRedirectsOperations) Get301(ctx context.Context) (*HTTPRedirectsGet301Response, error) {
	req, err := client.get301CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get301HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get301CreateRequest creates the Get301 request.
func (client *httpRedirectsOperations) get301CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/redirect/301"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get301HandleResponse handles the Get301 response.
func (client *httpRedirectsOperations) get301HandleResponse(resp *azcore.Response) (*HTTPRedirectsGet301Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := HTTPRedirectsGet301Response{RawResponse: resp.Response}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	return &result, nil
}

// Get302 - Return 302 status code and redirect to /http/success/200
func (client *httpRedirectsOperations) Get302(ctx context.Context) (*HTTPRedirectsGet302Response, error) {
	req, err := client.get302CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get302HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get302CreateRequest creates the Get302 request.
func (client *httpRedirectsOperations) get302CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/redirect/302"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get302HandleResponse handles the Get302 response.
func (client *httpRedirectsOperations) get302HandleResponse(resp *azcore.Response) (*HTTPRedirectsGet302Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := HTTPRedirectsGet302Response{RawResponse: resp.Response}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	return &result, nil
}

// Get307 - Redirect get with 307, resulting in a 200 success
func (client *httpRedirectsOperations) Get307(ctx context.Context) (*HTTPRedirectsGet307Response, error) {
	req, err := client.get307CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get307HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get307CreateRequest creates the Get307 request.
func (client *httpRedirectsOperations) get307CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/redirect/307"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get307HandleResponse handles the Get307 response.
func (client *httpRedirectsOperations) get307HandleResponse(resp *azcore.Response) (*HTTPRedirectsGet307Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := HTTPRedirectsGet307Response{RawResponse: resp.Response}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	return &result, nil
}

// Head300 - Return 300 status code and redirect to /http/success/200
func (client *httpRedirectsOperations) Head300(ctx context.Context) (*HTTPRedirectsHead300Response, error) {
	req, err := client.head300CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.head300HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// head300CreateRequest creates the Head300 request.
func (client *httpRedirectsOperations) head300CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/redirect/300"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodHead, *u)
	return req, nil
}

// head300HandleResponse handles the Head300 response.
func (client *httpRedirectsOperations) head300HandleResponse(resp *azcore.Response) (*HTTPRedirectsHead300Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := HTTPRedirectsHead300Response{RawResponse: resp.Response}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	return &result, nil
}

// Head301 - Return 301 status code and redirect to /http/success/200
func (client *httpRedirectsOperations) Head301(ctx context.Context) (*HTTPRedirectsHead301Response, error) {
	req, err := client.head301CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.head301HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// head301CreateRequest creates the Head301 request.
func (client *httpRedirectsOperations) head301CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/redirect/301"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodHead, *u)
	return req, nil
}

// head301HandleResponse handles the Head301 response.
func (client *httpRedirectsOperations) head301HandleResponse(resp *azcore.Response) (*HTTPRedirectsHead301Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := HTTPRedirectsHead301Response{RawResponse: resp.Response}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	return &result, nil
}

// Head302 - Return 302 status code and redirect to /http/success/200
func (client *httpRedirectsOperations) Head302(ctx context.Context) (*HTTPRedirectsHead302Response, error) {
	req, err := client.head302CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.head302HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// head302CreateRequest creates the Head302 request.
func (client *httpRedirectsOperations) head302CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/redirect/302"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodHead, *u)
	return req, nil
}

// head302HandleResponse handles the Head302 response.
func (client *httpRedirectsOperations) head302HandleResponse(resp *azcore.Response) (*HTTPRedirectsHead302Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := HTTPRedirectsHead302Response{RawResponse: resp.Response}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	return &result, nil
}

// Head307 - Redirect with 307, resulting in a 200 success
func (client *httpRedirectsOperations) Head307(ctx context.Context) (*HTTPRedirectsHead307Response, error) {
	req, err := client.head307CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.head307HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// head307CreateRequest creates the Head307 request.
func (client *httpRedirectsOperations) head307CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/redirect/307"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodHead, *u)
	return req, nil
}

// head307HandleResponse handles the Head307 response.
func (client *httpRedirectsOperations) head307HandleResponse(resp *azcore.Response) (*HTTPRedirectsHead307Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := HTTPRedirectsHead307Response{RawResponse: resp.Response}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	return &result, nil
}

// Options307 - options redirected with 307, resulting in a 200 after redirect
func (client *httpRedirectsOperations) Options307(ctx context.Context) (*HTTPRedirectsOptions307Response, error) {
	req, err := client.options307CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.options307HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// options307CreateRequest creates the Options307 request.
func (client *httpRedirectsOperations) options307CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/redirect/307"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodOptions, *u)
	return req, nil
}

// options307HandleResponse handles the Options307 response.
func (client *httpRedirectsOperations) options307HandleResponse(resp *azcore.Response) (*HTTPRedirectsOptions307Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := HTTPRedirectsOptions307Response{RawResponse: resp.Response}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	return &result, nil
}

// Patch302 - Patch true Boolean value in request returns 302.  This request should not be automatically redirected, but should return the received 302 to the caller for evaluation
func (client *httpRedirectsOperations) Patch302(ctx context.Context) (*HTTPRedirectsPatch302Response, error) {
	req, err := client.patch302CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.patch302HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// patch302CreateRequest creates the Patch302 request.
func (client *httpRedirectsOperations) patch302CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/redirect/302"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPatch, *u)
	return req, req.MarshalAsJSON(true)
}

// patch302HandleResponse handles the Patch302 response.
func (client *httpRedirectsOperations) patch302HandleResponse(resp *azcore.Response) (*HTTPRedirectsPatch302Response, error) {
	if !resp.HasStatusCode(http.StatusFound) {
		return nil, newError(resp)
	}
	result := HTTPRedirectsPatch302Response{RawResponse: resp.Response}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	return &result, nil
}

// Patch307 - Patch redirected with 307, resulting in a 200 after redirect
func (client *httpRedirectsOperations) Patch307(ctx context.Context) (*HTTPRedirectsPatch307Response, error) {
	req, err := client.patch307CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.patch307HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// patch307CreateRequest creates the Patch307 request.
func (client *httpRedirectsOperations) patch307CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/redirect/307"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPatch, *u)
	return req, req.MarshalAsJSON(true)
}

// patch307HandleResponse handles the Patch307 response.
func (client *httpRedirectsOperations) patch307HandleResponse(resp *azcore.Response) (*HTTPRedirectsPatch307Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := HTTPRedirectsPatch307Response{RawResponse: resp.Response}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	return &result, nil
}

// Post303 - Post true Boolean value in request returns 303.  This request should be automatically redirected usign a get, ultimately returning a 200 status code
func (client *httpRedirectsOperations) Post303(ctx context.Context) (*HTTPRedirectsPost303Response, error) {
	req, err := client.post303CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.post303HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// post303CreateRequest creates the Post303 request.
func (client *httpRedirectsOperations) post303CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/redirect/303"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(true)
}

// post303HandleResponse handles the Post303 response.
func (client *httpRedirectsOperations) post303HandleResponse(resp *azcore.Response) (*HTTPRedirectsPost303Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := HTTPRedirectsPost303Response{RawResponse: resp.Response}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	return &result, nil
}

// Post307 - Post redirected with 307, resulting in a 200 after redirect
func (client *httpRedirectsOperations) Post307(ctx context.Context) (*HTTPRedirectsPost307Response, error) {
	req, err := client.post307CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.post307HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// post307CreateRequest creates the Post307 request.
func (client *httpRedirectsOperations) post307CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/redirect/307"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(true)
}

// post307HandleResponse handles the Post307 response.
func (client *httpRedirectsOperations) post307HandleResponse(resp *azcore.Response) (*HTTPRedirectsPost307Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := HTTPRedirectsPost307Response{RawResponse: resp.Response}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	return &result, nil
}

// Put301 - Put true Boolean value in request returns 301.  This request should not be automatically redirected, but should return the received 301 to the caller for evaluation
func (client *httpRedirectsOperations) Put301(ctx context.Context) (*HTTPRedirectsPut301Response, error) {
	req, err := client.put301CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.put301HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// put301CreateRequest creates the Put301 request.
func (client *httpRedirectsOperations) put301CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/redirect/301"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(true)
}

// put301HandleResponse handles the Put301 response.
func (client *httpRedirectsOperations) put301HandleResponse(resp *azcore.Response) (*HTTPRedirectsPut301Response, error) {
	if !resp.HasStatusCode(http.StatusMovedPermanently) {
		return nil, newError(resp)
	}
	result := HTTPRedirectsPut301Response{RawResponse: resp.Response}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	return &result, nil
}

// Put307 - Put redirected with 307, resulting in a 200 after redirect
func (client *httpRedirectsOperations) Put307(ctx context.Context) (*HTTPRedirectsPut307Response, error) {
	req, err := client.put307CreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.put307HandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// put307CreateRequest creates the Put307 request.
func (client *httpRedirectsOperations) put307CreateRequest() (*azcore.Request, error) {
	urlPath := "/http/redirect/307"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(true)
}

// put307HandleResponse handles the Put307 response.
func (client *httpRedirectsOperations) put307HandleResponse(resp *azcore.Response) (*HTTPRedirectsPut307Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := HTTPRedirectsPut307Response{RawResponse: resp.Response}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	return &result, nil
}
