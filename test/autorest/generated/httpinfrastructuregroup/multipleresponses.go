// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package httpinfrastructuregroup

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// MultipleResponsesOperations contains the methods for the MultipleResponses group.
type MultipleResponsesOperations interface {
	// Get200Model201ModelDefaultError200Valid - Send a 200 response with valid payload: {'statusCode': '200'}
	Get200Model201ModelDefaultError200Valid(ctx context.Context) (*MyExceptionResponse, error)
	// Get200Model201ModelDefaultError201Valid - Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}
	Get200Model201ModelDefaultError201Valid(ctx context.Context) (*MyExceptionResponse, error)
	// Get200Model201ModelDefaultError400Valid - Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
	Get200Model201ModelDefaultError400Valid(ctx context.Context) (*MyExceptionResponse, error)
	// Get200Model204NoModelDefaultError200Valid - Send a 200 response with valid payload: {'statusCode': '200'}
	Get200Model204NoModelDefaultError200Valid(ctx context.Context) (*MyExceptionResponse, error)
	// Get200Model204NoModelDefaultError201Invalid - Send a 201 response with valid payload: {'statusCode': '201'}
	Get200Model204NoModelDefaultError201Invalid(ctx context.Context) (*MyExceptionResponse, error)
	// Get200Model204NoModelDefaultError202None - Send a 202 response with no payload:
	Get200Model204NoModelDefaultError202None(ctx context.Context) (*MyExceptionResponse, error)
	// Get200Model204NoModelDefaultError204Valid - Send a 204 response with no payload
	Get200Model204NoModelDefaultError204Valid(ctx context.Context) (*MyExceptionResponse, error)
	// Get200Model204NoModelDefaultError400Valid - Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}
	Get200Model204NoModelDefaultError400Valid(ctx context.Context) (*MyExceptionResponse, error)
	// Get200ModelA200Invalid - Send a 200 response with invalid payload {'statusCodeInvalid': '200'}
	Get200ModelA200Invalid(ctx context.Context) (*MyExceptionResponse, error)
	// Get200ModelA200None - Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type for model A
	Get200ModelA200None(ctx context.Context) (*MyExceptionResponse, error)
	// Get200ModelA200Valid - Send a 200 response with payload {'statusCode': '200'}
	Get200ModelA200Valid(ctx context.Context) (*MyExceptionResponse, error)
	// Get200ModelA201ModelC404ModelDDefaultError200Valid - Send a 200 response with valid payload: {'statusCode': '200'}
	Get200ModelA201ModelC404ModelDDefaultError200Valid(ctx context.Context) (*MyExceptionResponse, error)
	// Get200ModelA201ModelC404ModelDDefaultError201Valid - Send a 200 response with valid payload: {'httpCode': '201'}
	Get200ModelA201ModelC404ModelDDefaultError201Valid(ctx context.Context) (*MyExceptionResponse, error)
	// Get200ModelA201ModelC404ModelDDefaultError400Valid - Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
	Get200ModelA201ModelC404ModelDDefaultError400Valid(ctx context.Context) (*MyExceptionResponse, error)
	// Get200ModelA201ModelC404ModelDDefaultError404Valid - Send a 200 response with valid payload: {'httpStatusCode': '404'}
	Get200ModelA201ModelC404ModelDDefaultError404Valid(ctx context.Context) (*MyExceptionResponse, error)
	// Get200ModelA202Valid - Send a 202 response with payload {'statusCode': '202'}
	Get200ModelA202Valid(ctx context.Context) (*MyExceptionResponse, error)
	// Get200ModelA400Invalid - Send a 200 response with invalid payload {'statusCodeInvalid': '400'}
	Get200ModelA400Invalid(ctx context.Context) (*MyExceptionResponse, error)
	// Get200ModelA400None - Send a 400 response with no payload client should treat as an http error with no error model
	Get200ModelA400None(ctx context.Context) (*MyExceptionResponse, error)
	// Get200ModelA400Valid - Send a 200 response with payload {'statusCode': '400'}
	Get200ModelA400Valid(ctx context.Context) (*MyExceptionResponse, error)
	// Get202None204NoneDefaultError202None - Send a 202 response with no payload
	Get202None204NoneDefaultError202None(ctx context.Context) (*http.Response, error)
	// Get202None204NoneDefaultError204None - Send a 204 response with no payload
	Get202None204NoneDefaultError204None(ctx context.Context) (*http.Response, error)
	// Get202None204NoneDefaultError400Valid - Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
	Get202None204NoneDefaultError400Valid(ctx context.Context) (*http.Response, error)
	// Get202None204NoneDefaultNone202Invalid - Send a 202 response with an unexpected payload {'property': 'value'}
	Get202None204NoneDefaultNone202Invalid(ctx context.Context) (*http.Response, error)
	// Get202None204NoneDefaultNone204None - Send a 204 response with no payload
	Get202None204NoneDefaultNone204None(ctx context.Context) (*http.Response, error)
	// Get202None204NoneDefaultNone400Invalid - Send a 400 response with an unexpected payload {'property': 'value'}
	Get202None204NoneDefaultNone400Invalid(ctx context.Context) (*http.Response, error)
	// Get202None204NoneDefaultNone400None - Send a 400 response with no payload
	Get202None204NoneDefaultNone400None(ctx context.Context) (*http.Response, error)
	// GetDefaultModelA200None - Send a 200 response with no payload
	GetDefaultModelA200None(ctx context.Context) (*MyExceptionResponse, error)
	// GetDefaultModelA200Valid - Send a 200 response with valid payload: {'statusCode': '200'}
	GetDefaultModelA200Valid(ctx context.Context) (*MyExceptionResponse, error)
	// GetDefaultModelA400None - Send a 400 response with no payload
	GetDefaultModelA400None(ctx context.Context) (*http.Response, error)
	// GetDefaultModelA400Valid - Send a 400 response with valid payload: {'statusCode': '400'}
	GetDefaultModelA400Valid(ctx context.Context) (*http.Response, error)
	// GetDefaultNone200Invalid - Send a 200 response with invalid payload: {'statusCode': '200'}
	GetDefaultNone200Invalid(ctx context.Context) (*http.Response, error)
	// GetDefaultNone200None - Send a 200 response with no payload
	GetDefaultNone200None(ctx context.Context) (*http.Response, error)
	// GetDefaultNone400Invalid - Send a 400 response with valid payload: {'statusCode': '400'}
	GetDefaultNone400Invalid(ctx context.Context) (*http.Response, error)
	// GetDefaultNone400None - Send a 400 response with no payload
	GetDefaultNone400None(ctx context.Context) (*http.Response, error)
}

// multipleResponsesOperations implements the MultipleResponsesOperations interface.
type multipleResponsesOperations struct {
	*Client
}

// Get200Model201ModelDefaultError200Valid - Send a 200 response with valid payload: {'statusCode': '200'}
func (client *multipleResponsesOperations) Get200Model201ModelDefaultError200Valid(ctx context.Context) (*MyExceptionResponse, error) {
	req, err := client.get200Model201ModelDefaultError200ValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get200Model201ModelDefaultError200ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get200Model201ModelDefaultError200ValidCreateRequest creates the Get200Model201ModelDefaultError200Valid request.
func (client *multipleResponsesOperations) get200Model201ModelDefaultError200ValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/201/B/default/Error/response/200/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get200Model201ModelDefaultError200ValidHandleResponse handles the Get200Model201ModelDefaultError200Valid response.
func (client *multipleResponsesOperations) get200Model201ModelDefaultError200ValidHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200Model201ModelDefaultError201Valid - Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}
func (client *multipleResponsesOperations) Get200Model201ModelDefaultError201Valid(ctx context.Context) (*MyExceptionResponse, error) {
	req, err := client.get200Model201ModelDefaultError201ValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get200Model201ModelDefaultError201ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get200Model201ModelDefaultError201ValidCreateRequest creates the Get200Model201ModelDefaultError201Valid request.
func (client *multipleResponsesOperations) get200Model201ModelDefaultError201ValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/201/B/default/Error/response/201/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get200Model201ModelDefaultError201ValidHandleResponse handles the Get200Model201ModelDefaultError201Valid response.
func (client *multipleResponsesOperations) get200Model201ModelDefaultError201ValidHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200Model201ModelDefaultError400Valid - Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
func (client *multipleResponsesOperations) Get200Model201ModelDefaultError400Valid(ctx context.Context) (*MyExceptionResponse, error) {
	req, err := client.get200Model201ModelDefaultError400ValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get200Model201ModelDefaultError400ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get200Model201ModelDefaultError400ValidCreateRequest creates the Get200Model201ModelDefaultError400Valid request.
func (client *multipleResponsesOperations) get200Model201ModelDefaultError400ValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/201/B/default/Error/response/400/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get200Model201ModelDefaultError400ValidHandleResponse handles the Get200Model201ModelDefaultError400Valid response.
func (client *multipleResponsesOperations) get200Model201ModelDefaultError400ValidHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200Model204NoModelDefaultError200Valid - Send a 200 response with valid payload: {'statusCode': '200'}
func (client *multipleResponsesOperations) Get200Model204NoModelDefaultError200Valid(ctx context.Context) (*MyExceptionResponse, error) {
	req, err := client.get200Model204NoModelDefaultError200ValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get200Model204NoModelDefaultError200ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get200Model204NoModelDefaultError200ValidCreateRequest creates the Get200Model204NoModelDefaultError200Valid request.
func (client *multipleResponsesOperations) get200Model204NoModelDefaultError200ValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/204/none/default/Error/response/200/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get200Model204NoModelDefaultError200ValidHandleResponse handles the Get200Model204NoModelDefaultError200Valid response.
func (client *multipleResponsesOperations) get200Model204NoModelDefaultError200ValidHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200Model204NoModelDefaultError201Invalid - Send a 201 response with valid payload: {'statusCode': '201'}
func (client *multipleResponsesOperations) Get200Model204NoModelDefaultError201Invalid(ctx context.Context) (*MyExceptionResponse, error) {
	req, err := client.get200Model204NoModelDefaultError201InvalidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get200Model204NoModelDefaultError201InvalidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get200Model204NoModelDefaultError201InvalidCreateRequest creates the Get200Model204NoModelDefaultError201Invalid request.
func (client *multipleResponsesOperations) get200Model204NoModelDefaultError201InvalidCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/204/none/default/Error/response/201/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get200Model204NoModelDefaultError201InvalidHandleResponse handles the Get200Model204NoModelDefaultError201Invalid response.
func (client *multipleResponsesOperations) get200Model204NoModelDefaultError201InvalidHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200Model204NoModelDefaultError202None - Send a 202 response with no payload:
func (client *multipleResponsesOperations) Get200Model204NoModelDefaultError202None(ctx context.Context) (*MyExceptionResponse, error) {
	req, err := client.get200Model204NoModelDefaultError202NoneCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get200Model204NoModelDefaultError202NoneHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get200Model204NoModelDefaultError202NoneCreateRequest creates the Get200Model204NoModelDefaultError202None request.
func (client *multipleResponsesOperations) get200Model204NoModelDefaultError202NoneCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/204/none/default/Error/response/202/none"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get200Model204NoModelDefaultError202NoneHandleResponse handles the Get200Model204NoModelDefaultError202None response.
func (client *multipleResponsesOperations) get200Model204NoModelDefaultError202NoneHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200Model204NoModelDefaultError204Valid - Send a 204 response with no payload
func (client *multipleResponsesOperations) Get200Model204NoModelDefaultError204Valid(ctx context.Context) (*MyExceptionResponse, error) {
	req, err := client.get200Model204NoModelDefaultError204ValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get200Model204NoModelDefaultError204ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get200Model204NoModelDefaultError204ValidCreateRequest creates the Get200Model204NoModelDefaultError204Valid request.
func (client *multipleResponsesOperations) get200Model204NoModelDefaultError204ValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/204/none/default/Error/response/204/none"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get200Model204NoModelDefaultError204ValidHandleResponse handles the Get200Model204NoModelDefaultError204Valid response.
func (client *multipleResponsesOperations) get200Model204NoModelDefaultError204ValidHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200Model204NoModelDefaultError400Valid - Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}
func (client *multipleResponsesOperations) Get200Model204NoModelDefaultError400Valid(ctx context.Context) (*MyExceptionResponse, error) {
	req, err := client.get200Model204NoModelDefaultError400ValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get200Model204NoModelDefaultError400ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get200Model204NoModelDefaultError400ValidCreateRequest creates the Get200Model204NoModelDefaultError400Valid request.
func (client *multipleResponsesOperations) get200Model204NoModelDefaultError400ValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/204/none/default/Error/response/400/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get200Model204NoModelDefaultError400ValidHandleResponse handles the Get200Model204NoModelDefaultError400Valid response.
func (client *multipleResponsesOperations) get200Model204NoModelDefaultError400ValidHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200ModelA200Invalid - Send a 200 response with invalid payload {'statusCodeInvalid': '200'}
func (client *multipleResponsesOperations) Get200ModelA200Invalid(ctx context.Context) (*MyExceptionResponse, error) {
	req, err := client.get200ModelA200InvalidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get200ModelA200InvalidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get200ModelA200InvalidCreateRequest creates the Get200ModelA200Invalid request.
func (client *multipleResponsesOperations) get200ModelA200InvalidCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/response/200/invalid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get200ModelA200InvalidHandleResponse handles the Get200ModelA200Invalid response.
func (client *multipleResponsesOperations) get200ModelA200InvalidHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, errors.New(resp.Status)
	}
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200ModelA200None - Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type for model A
func (client *multipleResponsesOperations) Get200ModelA200None(ctx context.Context) (*MyExceptionResponse, error) {
	req, err := client.get200ModelA200NoneCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get200ModelA200NoneHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get200ModelA200NoneCreateRequest creates the Get200ModelA200None request.
func (client *multipleResponsesOperations) get200ModelA200NoneCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/response/200/none"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get200ModelA200NoneHandleResponse handles the Get200ModelA200None response.
func (client *multipleResponsesOperations) get200ModelA200NoneHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, errors.New(resp.Status)
	}
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200ModelA200Valid - Send a 200 response with payload {'statusCode': '200'}
func (client *multipleResponsesOperations) Get200ModelA200Valid(ctx context.Context) (*MyExceptionResponse, error) {
	req, err := client.get200ModelA200ValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get200ModelA200ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get200ModelA200ValidCreateRequest creates the Get200ModelA200Valid request.
func (client *multipleResponsesOperations) get200ModelA200ValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/response/200/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get200ModelA200ValidHandleResponse handles the Get200ModelA200Valid response.
func (client *multipleResponsesOperations) get200ModelA200ValidHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, errors.New(resp.Status)
	}
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200ModelA201ModelC404ModelDDefaultError200Valid - Send a 200 response with valid payload: {'statusCode': '200'}
func (client *multipleResponsesOperations) Get200ModelA201ModelC404ModelDDefaultError200Valid(ctx context.Context) (*MyExceptionResponse, error) {
	req, err := client.get200ModelA201ModelC404ModelDDefaultError200ValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get200ModelA201ModelC404ModelDDefaultError200ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get200ModelA201ModelC404ModelDDefaultError200ValidCreateRequest creates the Get200ModelA201ModelC404ModelDDefaultError200Valid request.
func (client *multipleResponsesOperations) get200ModelA201ModelC404ModelDDefaultError200ValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/201/C/404/D/default/Error/response/200/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get200ModelA201ModelC404ModelDDefaultError200ValidHandleResponse handles the Get200ModelA201ModelC404ModelDDefaultError200Valid response.
func (client *multipleResponsesOperations) get200ModelA201ModelC404ModelDDefaultError200ValidHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200ModelA201ModelC404ModelDDefaultError201Valid - Send a 200 response with valid payload: {'httpCode': '201'}
func (client *multipleResponsesOperations) Get200ModelA201ModelC404ModelDDefaultError201Valid(ctx context.Context) (*MyExceptionResponse, error) {
	req, err := client.get200ModelA201ModelC404ModelDDefaultError201ValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get200ModelA201ModelC404ModelDDefaultError201ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get200ModelA201ModelC404ModelDDefaultError201ValidCreateRequest creates the Get200ModelA201ModelC404ModelDDefaultError201Valid request.
func (client *multipleResponsesOperations) get200ModelA201ModelC404ModelDDefaultError201ValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/201/C/404/D/default/Error/response/201/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get200ModelA201ModelC404ModelDDefaultError201ValidHandleResponse handles the Get200ModelA201ModelC404ModelDDefaultError201Valid response.
func (client *multipleResponsesOperations) get200ModelA201ModelC404ModelDDefaultError201ValidHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200ModelA201ModelC404ModelDDefaultError400Valid - Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
func (client *multipleResponsesOperations) Get200ModelA201ModelC404ModelDDefaultError400Valid(ctx context.Context) (*MyExceptionResponse, error) {
	req, err := client.get200ModelA201ModelC404ModelDDefaultError400ValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get200ModelA201ModelC404ModelDDefaultError400ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get200ModelA201ModelC404ModelDDefaultError400ValidCreateRequest creates the Get200ModelA201ModelC404ModelDDefaultError400Valid request.
func (client *multipleResponsesOperations) get200ModelA201ModelC404ModelDDefaultError400ValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/201/C/404/D/default/Error/response/400/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get200ModelA201ModelC404ModelDDefaultError400ValidHandleResponse handles the Get200ModelA201ModelC404ModelDDefaultError400Valid response.
func (client *multipleResponsesOperations) get200ModelA201ModelC404ModelDDefaultError400ValidHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200ModelA201ModelC404ModelDDefaultError404Valid - Send a 200 response with valid payload: {'httpStatusCode': '404'}
func (client *multipleResponsesOperations) Get200ModelA201ModelC404ModelDDefaultError404Valid(ctx context.Context) (*MyExceptionResponse, error) {
	req, err := client.get200ModelA201ModelC404ModelDDefaultError404ValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get200ModelA201ModelC404ModelDDefaultError404ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get200ModelA201ModelC404ModelDDefaultError404ValidCreateRequest creates the Get200ModelA201ModelC404ModelDDefaultError404Valid request.
func (client *multipleResponsesOperations) get200ModelA201ModelC404ModelDDefaultError404ValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/201/C/404/D/default/Error/response/404/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get200ModelA201ModelC404ModelDDefaultError404ValidHandleResponse handles the Get200ModelA201ModelC404ModelDDefaultError404Valid response.
func (client *multipleResponsesOperations) get200ModelA201ModelC404ModelDDefaultError404ValidHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200ModelA202Valid - Send a 202 response with payload {'statusCode': '202'}
func (client *multipleResponsesOperations) Get200ModelA202Valid(ctx context.Context) (*MyExceptionResponse, error) {
	req, err := client.get200ModelA202ValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get200ModelA202ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get200ModelA202ValidCreateRequest creates the Get200ModelA202Valid request.
func (client *multipleResponsesOperations) get200ModelA202ValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/response/202/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get200ModelA202ValidHandleResponse handles the Get200ModelA202Valid response.
func (client *multipleResponsesOperations) get200ModelA202ValidHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, errors.New(resp.Status)
	}
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200ModelA400Invalid - Send a 200 response with invalid payload {'statusCodeInvalid': '400'}
func (client *multipleResponsesOperations) Get200ModelA400Invalid(ctx context.Context) (*MyExceptionResponse, error) {
	req, err := client.get200ModelA400InvalidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get200ModelA400InvalidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get200ModelA400InvalidCreateRequest creates the Get200ModelA400Invalid request.
func (client *multipleResponsesOperations) get200ModelA400InvalidCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/response/400/invalid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get200ModelA400InvalidHandleResponse handles the Get200ModelA400Invalid response.
func (client *multipleResponsesOperations) get200ModelA400InvalidHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, errors.New(resp.Status)
	}
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200ModelA400None - Send a 400 response with no payload client should treat as an http error with no error model
func (client *multipleResponsesOperations) Get200ModelA400None(ctx context.Context) (*MyExceptionResponse, error) {
	req, err := client.get200ModelA400NoneCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get200ModelA400NoneHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get200ModelA400NoneCreateRequest creates the Get200ModelA400None request.
func (client *multipleResponsesOperations) get200ModelA400NoneCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/response/400/none"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get200ModelA400NoneHandleResponse handles the Get200ModelA400None response.
func (client *multipleResponsesOperations) get200ModelA400NoneHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, errors.New(resp.Status)
	}
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200ModelA400Valid - Send a 200 response with payload {'statusCode': '400'}
func (client *multipleResponsesOperations) Get200ModelA400Valid(ctx context.Context) (*MyExceptionResponse, error) {
	req, err := client.get200ModelA400ValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get200ModelA400ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get200ModelA400ValidCreateRequest creates the Get200ModelA400Valid request.
func (client *multipleResponsesOperations) get200ModelA400ValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/response/400/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get200ModelA400ValidHandleResponse handles the Get200ModelA400Valid response.
func (client *multipleResponsesOperations) get200ModelA400ValidHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, errors.New(resp.Status)
	}
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get202None204NoneDefaultError202None - Send a 202 response with no payload
func (client *multipleResponsesOperations) Get202None204NoneDefaultError202None(ctx context.Context) (*http.Response, error) {
	req, err := client.get202None204NoneDefaultError202NoneCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get202None204NoneDefaultError202NoneHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get202None204NoneDefaultError202NoneCreateRequest creates the Get202None204NoneDefaultError202None request.
func (client *multipleResponsesOperations) get202None204NoneDefaultError202NoneCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/202/none/204/none/default/Error/response/202/none"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get202None204NoneDefaultError202NoneHandleResponse handles the Get202None204NoneDefaultError202None response.
func (client *multipleResponsesOperations) get202None204NoneDefaultError202NoneHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusAccepted, http.StatusNoContent) {
		return nil, newError(resp)
	}
	return resp.Response, nil
}

// Get202None204NoneDefaultError204None - Send a 204 response with no payload
func (client *multipleResponsesOperations) Get202None204NoneDefaultError204None(ctx context.Context) (*http.Response, error) {
	req, err := client.get202None204NoneDefaultError204NoneCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get202None204NoneDefaultError204NoneHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get202None204NoneDefaultError204NoneCreateRequest creates the Get202None204NoneDefaultError204None request.
func (client *multipleResponsesOperations) get202None204NoneDefaultError204NoneCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/202/none/204/none/default/Error/response/204/none"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get202None204NoneDefaultError204NoneHandleResponse handles the Get202None204NoneDefaultError204None response.
func (client *multipleResponsesOperations) get202None204NoneDefaultError204NoneHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusAccepted, http.StatusNoContent) {
		return nil, newError(resp)
	}
	return resp.Response, nil
}

// Get202None204NoneDefaultError400Valid - Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
func (client *multipleResponsesOperations) Get202None204NoneDefaultError400Valid(ctx context.Context) (*http.Response, error) {
	req, err := client.get202None204NoneDefaultError400ValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get202None204NoneDefaultError400ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get202None204NoneDefaultError400ValidCreateRequest creates the Get202None204NoneDefaultError400Valid request.
func (client *multipleResponsesOperations) get202None204NoneDefaultError400ValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/202/none/204/none/default/Error/response/400/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get202None204NoneDefaultError400ValidHandleResponse handles the Get202None204NoneDefaultError400Valid response.
func (client *multipleResponsesOperations) get202None204NoneDefaultError400ValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusAccepted, http.StatusNoContent) {
		return nil, newError(resp)
	}
	return resp.Response, nil
}

// Get202None204NoneDefaultNone202Invalid - Send a 202 response with an unexpected payload {'property': 'value'}
func (client *multipleResponsesOperations) Get202None204NoneDefaultNone202Invalid(ctx context.Context) (*http.Response, error) {
	req, err := client.get202None204NoneDefaultNone202InvalidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get202None204NoneDefaultNone202InvalidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get202None204NoneDefaultNone202InvalidCreateRequest creates the Get202None204NoneDefaultNone202Invalid request.
func (client *multipleResponsesOperations) get202None204NoneDefaultNone202InvalidCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/202/none/204/none/default/none/response/202/invalid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get202None204NoneDefaultNone202InvalidHandleResponse handles the Get202None204NoneDefaultNone202Invalid response.
func (client *multipleResponsesOperations) get202None204NoneDefaultNone202InvalidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusAccepted, http.StatusNoContent) {
		return nil, errors.New(resp.Status)
	}
	return resp.Response, nil
}

// Get202None204NoneDefaultNone204None - Send a 204 response with no payload
func (client *multipleResponsesOperations) Get202None204NoneDefaultNone204None(ctx context.Context) (*http.Response, error) {
	req, err := client.get202None204NoneDefaultNone204NoneCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get202None204NoneDefaultNone204NoneHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get202None204NoneDefaultNone204NoneCreateRequest creates the Get202None204NoneDefaultNone204None request.
func (client *multipleResponsesOperations) get202None204NoneDefaultNone204NoneCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/202/none/204/none/default/none/response/204/none"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get202None204NoneDefaultNone204NoneHandleResponse handles the Get202None204NoneDefaultNone204None response.
func (client *multipleResponsesOperations) get202None204NoneDefaultNone204NoneHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusAccepted, http.StatusNoContent) {
		return nil, errors.New(resp.Status)
	}
	return resp.Response, nil
}

// Get202None204NoneDefaultNone400Invalid - Send a 400 response with an unexpected payload {'property': 'value'}
func (client *multipleResponsesOperations) Get202None204NoneDefaultNone400Invalid(ctx context.Context) (*http.Response, error) {
	req, err := client.get202None204NoneDefaultNone400InvalidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get202None204NoneDefaultNone400InvalidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get202None204NoneDefaultNone400InvalidCreateRequest creates the Get202None204NoneDefaultNone400Invalid request.
func (client *multipleResponsesOperations) get202None204NoneDefaultNone400InvalidCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/202/none/204/none/default/none/response/400/invalid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get202None204NoneDefaultNone400InvalidHandleResponse handles the Get202None204NoneDefaultNone400Invalid response.
func (client *multipleResponsesOperations) get202None204NoneDefaultNone400InvalidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusAccepted, http.StatusNoContent) {
		return nil, errors.New(resp.Status)
	}
	return resp.Response, nil
}

// Get202None204NoneDefaultNone400None - Send a 400 response with no payload
func (client *multipleResponsesOperations) Get202None204NoneDefaultNone400None(ctx context.Context) (*http.Response, error) {
	req, err := client.get202None204NoneDefaultNone400NoneCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.get202None204NoneDefaultNone400NoneHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// get202None204NoneDefaultNone400NoneCreateRequest creates the Get202None204NoneDefaultNone400None request.
func (client *multipleResponsesOperations) get202None204NoneDefaultNone400NoneCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/202/none/204/none/default/none/response/400/none"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// get202None204NoneDefaultNone400NoneHandleResponse handles the Get202None204NoneDefaultNone400None response.
func (client *multipleResponsesOperations) get202None204NoneDefaultNone400NoneHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusAccepted, http.StatusNoContent) {
		return nil, errors.New(resp.Status)
	}
	return resp.Response, nil
}

// GetDefaultModelA200None - Send a 200 response with no payload
func (client *multipleResponsesOperations) GetDefaultModelA200None(ctx context.Context) (*MyExceptionResponse, error) {
	req, err := client.getDefaultModelA200NoneCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDefaultModelA200NoneHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDefaultModelA200NoneCreateRequest creates the GetDefaultModelA200None request.
func (client *multipleResponsesOperations) getDefaultModelA200NoneCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/default/A/response/200/none"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDefaultModelA200NoneHandleResponse handles the GetDefaultModelA200None response.
func (client *multipleResponsesOperations) getDefaultModelA200NoneHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, errors.New(resp.Status)
	}
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// GetDefaultModelA200Valid - Send a 200 response with valid payload: {'statusCode': '200'}
func (client *multipleResponsesOperations) GetDefaultModelA200Valid(ctx context.Context) (*MyExceptionResponse, error) {
	req, err := client.getDefaultModelA200ValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDefaultModelA200ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDefaultModelA200ValidCreateRequest creates the GetDefaultModelA200Valid request.
func (client *multipleResponsesOperations) getDefaultModelA200ValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/default/A/response/200/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDefaultModelA200ValidHandleResponse handles the GetDefaultModelA200Valid response.
func (client *multipleResponsesOperations) getDefaultModelA200ValidHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, errors.New(resp.Status)
	}
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// GetDefaultModelA400None - Send a 400 response with no payload
func (client *multipleResponsesOperations) GetDefaultModelA400None(ctx context.Context) (*http.Response, error) {
	req, err := client.getDefaultModelA400NoneCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDefaultModelA400NoneHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDefaultModelA400NoneCreateRequest creates the GetDefaultModelA400None request.
func (client *multipleResponsesOperations) getDefaultModelA400NoneCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/default/A/response/400/none"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDefaultModelA400NoneHandleResponse handles the GetDefaultModelA400None response.
func (client *multipleResponsesOperations) getDefaultModelA400NoneHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newMyException(resp)
	}
	return resp.Response, nil
}

// GetDefaultModelA400Valid - Send a 400 response with valid payload: {'statusCode': '400'}
func (client *multipleResponsesOperations) GetDefaultModelA400Valid(ctx context.Context) (*http.Response, error) {
	req, err := client.getDefaultModelA400ValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDefaultModelA400ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDefaultModelA400ValidCreateRequest creates the GetDefaultModelA400Valid request.
func (client *multipleResponsesOperations) getDefaultModelA400ValidCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/default/A/response/400/valid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDefaultModelA400ValidHandleResponse handles the GetDefaultModelA400Valid response.
func (client *multipleResponsesOperations) getDefaultModelA400ValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newMyException(resp)
	}
	return resp.Response, nil
}

// GetDefaultNone200Invalid - Send a 200 response with invalid payload: {'statusCode': '200'}
func (client *multipleResponsesOperations) GetDefaultNone200Invalid(ctx context.Context) (*http.Response, error) {
	req, err := client.getDefaultNone200InvalidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDefaultNone200InvalidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDefaultNone200InvalidCreateRequest creates the GetDefaultNone200Invalid request.
func (client *multipleResponsesOperations) getDefaultNone200InvalidCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/default/none/response/200/invalid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDefaultNone200InvalidHandleResponse handles the GetDefaultNone200Invalid response.
func (client *multipleResponsesOperations) getDefaultNone200InvalidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, errors.New(resp.Status)
	}
	return resp.Response, nil
}

// GetDefaultNone200None - Send a 200 response with no payload
func (client *multipleResponsesOperations) GetDefaultNone200None(ctx context.Context) (*http.Response, error) {
	req, err := client.getDefaultNone200NoneCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDefaultNone200NoneHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDefaultNone200NoneCreateRequest creates the GetDefaultNone200None request.
func (client *multipleResponsesOperations) getDefaultNone200NoneCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/default/none/response/200/none"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDefaultNone200NoneHandleResponse handles the GetDefaultNone200None response.
func (client *multipleResponsesOperations) getDefaultNone200NoneHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, errors.New(resp.Status)
	}
	return resp.Response, nil
}

// GetDefaultNone400Invalid - Send a 400 response with valid payload: {'statusCode': '400'}
func (client *multipleResponsesOperations) GetDefaultNone400Invalid(ctx context.Context) (*http.Response, error) {
	req, err := client.getDefaultNone400InvalidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDefaultNone400InvalidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDefaultNone400InvalidCreateRequest creates the GetDefaultNone400Invalid request.
func (client *multipleResponsesOperations) getDefaultNone400InvalidCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/default/none/response/400/invalid"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDefaultNone400InvalidHandleResponse handles the GetDefaultNone400Invalid response.
func (client *multipleResponsesOperations) getDefaultNone400InvalidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, errors.New(resp.Status)
	}
	return resp.Response, nil
}

// GetDefaultNone400None - Send a 400 response with no payload
func (client *multipleResponsesOperations) GetDefaultNone400None(ctx context.Context) (*http.Response, error) {
	req, err := client.getDefaultNone400NoneCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDefaultNone400NoneHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDefaultNone400NoneCreateRequest creates the GetDefaultNone400None request.
func (client *multipleResponsesOperations) getDefaultNone400NoneCreateRequest() (*azcore.Request, error) {
	urlPath := "/http/payloads/default/none/response/400/none"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDefaultNone400NoneHandleResponse handles the GetDefaultNone400None response.
func (client *multipleResponsesOperations) getDefaultNone400NoneHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, errors.New(resp.Status)
	}
	return resp.Response, nil
}
