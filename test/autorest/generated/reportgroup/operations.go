// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package reportgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// Operations contains the methods for the Operations group.
type Operations interface {
	// GetOptionalReport - Get optional test coverage report
	GetOptionalReport(ctx context.Context, operationsGetOptionalReportOptions *OperationsGetOptionalReportOptions) (*MapOfInt32Response, error)
	// GetReport - Get test coverage report
	GetReport(ctx context.Context, operationsGetReportOptions *OperationsGetReportOptions) (*MapOfInt32Response, error)
}

// operations implements the Operations interface.
type operations struct {
	*Client
}

// GetOptionalReport - Get optional test coverage report
func (client *operations) GetOptionalReport(ctx context.Context, operationsGetOptionalReportOptions *OperationsGetOptionalReportOptions) (*MapOfInt32Response, error) {
	req, err := client.getOptionalReportCreateRequest(operationsGetOptionalReportOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getOptionalReportHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getOptionalReportCreateRequest creates the GetOptionalReport request.
func (client *operations) getOptionalReportCreateRequest(operationsGetOptionalReportOptions *OperationsGetOptionalReportOptions) (*azcore.Request, error) {
	urlPath := "/report/optional"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if operationsGetOptionalReportOptions != nil && operationsGetOptionalReportOptions.Qualifier != nil {
		query.Set("qualifier", *operationsGetOptionalReportOptions.Qualifier)
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getOptionalReportHandleResponse handles the GetOptionalReport response.
func (client *operations) getOptionalReportHandleResponse(resp *azcore.Response) (*MapOfInt32Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getOptionalReportHandleError(resp)
	}
	result := MapOfInt32Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getOptionalReportHandleError handles the GetOptionalReport error response.
func (client *operations) getOptionalReportHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetReport - Get test coverage report
func (client *operations) GetReport(ctx context.Context, operationsGetReportOptions *OperationsGetReportOptions) (*MapOfInt32Response, error) {
	req, err := client.getReportCreateRequest(operationsGetReportOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getReportHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getReportCreateRequest creates the GetReport request.
func (client *operations) getReportCreateRequest(operationsGetReportOptions *OperationsGetReportOptions) (*azcore.Request, error) {
	urlPath := "/report"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if operationsGetReportOptions != nil && operationsGetReportOptions.Qualifier != nil {
		query.Set("qualifier", *operationsGetReportOptions.Qualifier)
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getReportHandleResponse handles the GetReport response.
func (client *operations) getReportHandleResponse(resp *azcore.Response) (*MapOfInt32Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getReportHandleError(resp)
	}
	result := MapOfInt32Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// getReportHandleError handles the GetReport error response.
func (client *operations) getReportHandleError(resp *azcore.Response) error {
	err := Error{}
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
