// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package additionalpropertiesgroup

import (
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"path"
)

type PetsOperations struct{}

// CreateApInPropertiesCreateRequest creates the CreateApInProperties request.
func (PetsOperations) CreateApInPropertiesCreateRequest(u url.URL, createParameters PetApInProperties) (*azcore.Request, error) {
	urlPath := "/additionalProperties/in/properties"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsJSON(createParameters)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// CreateApInPropertiesHandleResponse handles the CreateApInProperties response.
func (PetsOperations) CreateApInPropertiesHandleResponse(resp *azcore.Response) (*PetsCreateApInPropertiesResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := PetsCreateApInPropertiesResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.PetApInProperties)
}

// CreateApInPropertiesWithApstringCreateRequest creates the CreateApInPropertiesWithApstring request.
func (PetsOperations) CreateApInPropertiesWithApstringCreateRequest(u url.URL, createParameters PetApInPropertiesWithApstring) (*azcore.Request, error) {
	urlPath := "/additionalProperties/in/properties/with/additionalProperties/string"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsJSON(createParameters)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// CreateApInPropertiesWithApstringHandleResponse handles the CreateApInPropertiesWithApstring response.
func (PetsOperations) CreateApInPropertiesWithApstringHandleResponse(resp *azcore.Response) (*PetsCreateApInPropertiesWithApstringResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := PetsCreateApInPropertiesWithApstringResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.PetApInPropertiesWithApstring)
}

// CreateApObjectCreateRequest creates the CreateApObject request.
func (PetsOperations) CreateApObjectCreateRequest(u url.URL, createParameters PetApObject) (*azcore.Request, error) {
	urlPath := "/additionalProperties/type/object"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsJSON(createParameters)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// CreateApObjectHandleResponse handles the CreateApObject response.
func (PetsOperations) CreateApObjectHandleResponse(resp *azcore.Response) (*PetsCreateApObjectResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := PetsCreateApObjectResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.PetApObject)
}

// CreateApStringCreateRequest creates the CreateApString request.
func (PetsOperations) CreateApStringCreateRequest(u url.URL, createParameters PetApString) (*azcore.Request, error) {
	urlPath := "/additionalProperties/type/string"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsJSON(createParameters)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// CreateApStringHandleResponse handles the CreateApString response.
func (PetsOperations) CreateApStringHandleResponse(resp *azcore.Response) (*PetsCreateApStringResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := PetsCreateApStringResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.PetApString)
}

// CreateApTrueCreateRequest creates the CreateApTrue request.
func (PetsOperations) CreateApTrueCreateRequest(u url.URL, createParameters PetApTrue) (*azcore.Request, error) {
	urlPath := "/additionalProperties/true"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsJSON(createParameters)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// CreateApTrueHandleResponse handles the CreateApTrue response.
func (PetsOperations) CreateApTrueHandleResponse(resp *azcore.Response) (*PetsCreateApTrueResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := PetsCreateApTrueResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.PetApTrue)
}

// CreateCatApTrueCreateRequest creates the CreateCatApTrue request.
func (PetsOperations) CreateCatApTrueCreateRequest(u url.URL, createParameters CatApTrue) (*azcore.Request, error) {
	urlPath := "/additionalProperties/true-subclass"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsJSON(createParameters)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// CreateCatApTrueHandleResponse handles the CreateCatApTrue response.
func (PetsOperations) CreateCatApTrueHandleResponse(resp *azcore.Response) (*PetsCreateCatApTrueResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	result := PetsCreateCatApTrueResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.CatApTrue)
}
