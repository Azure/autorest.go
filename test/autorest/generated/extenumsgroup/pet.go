// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package extenumsgroup

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
)

// PetOperations contains the methods for the Pet group.
type PetOperations interface {
	// AddPet - add pet
	AddPet(ctx context.Context, petAddPetOptions *PetAddPetOptions) (*PetResponse, error)
	// GetByPetID - get pet by id
	GetByPetID(ctx context.Context, petId string) (*PetResponse, error)
}

// petOperations implements the PetOperations interface.
type petOperations struct {
	*Client
}

// AddPet - add pet
func (client *petOperations) AddPet(ctx context.Context, petAddPetOptions *PetAddPetOptions) (*PetResponse, error) {
	req, err := client.addPetCreateRequest(petAddPetOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.addPetHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// addPetCreateRequest creates the AddPet request.
func (client *petOperations) addPetCreateRequest(petAddPetOptions *PetAddPetOptions) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/extensibleenums/pet/addPet"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPost, *u)
	if petAddPetOptions != nil {
		return req, req.MarshalAsJSON(petAddPetOptions.PetParam)
	}
	return req, nil
}

// addPetHandleResponse handles the AddPet response.
func (client *petOperations) addPetHandleResponse(resp *azcore.Response) (*PetResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.addPetHandleError(resp)
	}
	result := PetResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Pet)
}

// addPetHandleError handles the AddPet error response.
func (client *petOperations) addPetHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// GetByPetID - get pet by id
func (client *petOperations) GetByPetID(ctx context.Context, petId string) (*PetResponse, error) {
	req, err := client.getByPetIdCreateRequest(petId)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getByPetIdHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getByPetIdCreateRequest creates the GetByPetID request.
func (client *petOperations) getByPetIdCreateRequest(petId string) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/extensibleenums/pet/{petId}"
	urlPath = strings.ReplaceAll(urlPath, "{petId}", url.PathEscape(petId))
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getByPetIdHandleResponse handles the GetByPetID response.
func (client *petOperations) getByPetIdHandleResponse(resp *azcore.Response) (*PetResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getByPetIdHandleError(resp)
	}
	result := PetResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Pet)
}

// getByPetIdHandleError handles the GetByPetID error response.
func (client *petOperations) getByPetIdHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}
