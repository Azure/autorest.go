// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package datetimegroup

import (
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"path"
	"time"
)

// DatetimeOperations contains the methods for the Datetime group.
type DatetimeOperations struct{}

// GetInvalidCreateRequest creates the GetInvalid request.
func (DatetimeOperations) GetInvalidCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/datetime/invalid"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodGet, u)
	return req, nil
}

// GetInvalidHandleResponse handles the GetInvalid response.
func (DatetimeOperations) GetInvalidHandleResponse(resp *azcore.Response) (*DatetimeGetInvalidResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	var aux *timeRFC3339
	err := resp.UnmarshalAsJSON(&aux)
	result := DatetimeGetInvalidResponse{RawResponse: resp.Response}
	result.Value = aux.ToTime()
	return &result, err
}

// GetLocalNegativeOffsetLowercaseMaxDateTimeCreateRequest creates the GetLocalNegativeOffsetLowercaseMaxDateTime request.
func (DatetimeOperations) GetLocalNegativeOffsetLowercaseMaxDateTimeCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/datetime/max/localnegativeoffset/lowercase"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodGet, u)
	return req, nil
}

// GetLocalNegativeOffsetLowercaseMaxDateTimeHandleResponse handles the GetLocalNegativeOffsetLowercaseMaxDateTime response.
func (DatetimeOperations) GetLocalNegativeOffsetLowercaseMaxDateTimeHandleResponse(resp *azcore.Response) (*DatetimeGetLocalNegativeOffsetLowercaseMaxDateTimeResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	var aux *timeRFC3339
	err := resp.UnmarshalAsJSON(&aux)
	result := DatetimeGetLocalNegativeOffsetLowercaseMaxDateTimeResponse{RawResponse: resp.Response}
	result.Value = aux.ToTime()
	return &result, err
}

// GetLocalNegativeOffsetMinDateTimeCreateRequest creates the GetLocalNegativeOffsetMinDateTime request.
func (DatetimeOperations) GetLocalNegativeOffsetMinDateTimeCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/datetime/min/localnegativeoffset"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodGet, u)
	return req, nil
}

// GetLocalNegativeOffsetMinDateTimeHandleResponse handles the GetLocalNegativeOffsetMinDateTime response.
func (DatetimeOperations) GetLocalNegativeOffsetMinDateTimeHandleResponse(resp *azcore.Response) (*DatetimeGetLocalNegativeOffsetMinDateTimeResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	var aux *timeRFC3339
	err := resp.UnmarshalAsJSON(&aux)
	result := DatetimeGetLocalNegativeOffsetMinDateTimeResponse{RawResponse: resp.Response}
	result.Value = aux.ToTime()
	return &result, err
}

// GetLocalNegativeOffsetUppercaseMaxDateTimeCreateRequest creates the GetLocalNegativeOffsetUppercaseMaxDateTime request.
func (DatetimeOperations) GetLocalNegativeOffsetUppercaseMaxDateTimeCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/datetime/max/localnegativeoffset/uppercase"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodGet, u)
	return req, nil
}

// GetLocalNegativeOffsetUppercaseMaxDateTimeHandleResponse handles the GetLocalNegativeOffsetUppercaseMaxDateTime response.
func (DatetimeOperations) GetLocalNegativeOffsetUppercaseMaxDateTimeHandleResponse(resp *azcore.Response) (*DatetimeGetLocalNegativeOffsetUppercaseMaxDateTimeResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	var aux *timeRFC3339
	err := resp.UnmarshalAsJSON(&aux)
	result := DatetimeGetLocalNegativeOffsetUppercaseMaxDateTimeResponse{RawResponse: resp.Response}
	result.Value = aux.ToTime()
	return &result, err
}

// GetLocalPositiveOffsetLowercaseMaxDateTimeCreateRequest creates the GetLocalPositiveOffsetLowercaseMaxDateTime request.
func (DatetimeOperations) GetLocalPositiveOffsetLowercaseMaxDateTimeCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/datetime/max/localpositiveoffset/lowercase"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodGet, u)
	return req, nil
}

// GetLocalPositiveOffsetLowercaseMaxDateTimeHandleResponse handles the GetLocalPositiveOffsetLowercaseMaxDateTime response.
func (DatetimeOperations) GetLocalPositiveOffsetLowercaseMaxDateTimeHandleResponse(resp *azcore.Response) (*DatetimeGetLocalPositiveOffsetLowercaseMaxDateTimeResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	var aux *timeRFC3339
	err := resp.UnmarshalAsJSON(&aux)
	result := DatetimeGetLocalPositiveOffsetLowercaseMaxDateTimeResponse{RawResponse: resp.Response}
	result.Value = aux.ToTime()
	return &result, err
}

// GetLocalPositiveOffsetMinDateTimeCreateRequest creates the GetLocalPositiveOffsetMinDateTime request.
func (DatetimeOperations) GetLocalPositiveOffsetMinDateTimeCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/datetime/min/localpositiveoffset"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodGet, u)
	return req, nil
}

// GetLocalPositiveOffsetMinDateTimeHandleResponse handles the GetLocalPositiveOffsetMinDateTime response.
func (DatetimeOperations) GetLocalPositiveOffsetMinDateTimeHandleResponse(resp *azcore.Response) (*DatetimeGetLocalPositiveOffsetMinDateTimeResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	var aux *timeRFC3339
	err := resp.UnmarshalAsJSON(&aux)
	result := DatetimeGetLocalPositiveOffsetMinDateTimeResponse{RawResponse: resp.Response}
	result.Value = aux.ToTime()
	return &result, err
}

// GetLocalPositiveOffsetUppercaseMaxDateTimeCreateRequest creates the GetLocalPositiveOffsetUppercaseMaxDateTime request.
func (DatetimeOperations) GetLocalPositiveOffsetUppercaseMaxDateTimeCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/datetime/max/localpositiveoffset/uppercase"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodGet, u)
	return req, nil
}

// GetLocalPositiveOffsetUppercaseMaxDateTimeHandleResponse handles the GetLocalPositiveOffsetUppercaseMaxDateTime response.
func (DatetimeOperations) GetLocalPositiveOffsetUppercaseMaxDateTimeHandleResponse(resp *azcore.Response) (*DatetimeGetLocalPositiveOffsetUppercaseMaxDateTimeResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	var aux *timeRFC3339
	err := resp.UnmarshalAsJSON(&aux)
	result := DatetimeGetLocalPositiveOffsetUppercaseMaxDateTimeResponse{RawResponse: resp.Response}
	result.Value = aux.ToTime()
	return &result, err
}

// GetNullCreateRequest creates the GetNull request.
func (DatetimeOperations) GetNullCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/datetime/null"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodGet, u)
	return req, nil
}

// GetNullHandleResponse handles the GetNull response.
func (DatetimeOperations) GetNullHandleResponse(resp *azcore.Response) (*DatetimeGetNullResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	var aux *timeRFC3339
	err := resp.UnmarshalAsJSON(&aux)
	result := DatetimeGetNullResponse{RawResponse: resp.Response}
	result.Value = aux.ToTime()
	return &result, err
}

// GetOverflowCreateRequest creates the GetOverflow request.
func (DatetimeOperations) GetOverflowCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/datetime/overflow"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodGet, u)
	return req, nil
}

// GetOverflowHandleResponse handles the GetOverflow response.
func (DatetimeOperations) GetOverflowHandleResponse(resp *azcore.Response) (*DatetimeGetOverflowResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	var aux *timeRFC3339
	err := resp.UnmarshalAsJSON(&aux)
	result := DatetimeGetOverflowResponse{RawResponse: resp.Response}
	result.Value = aux.ToTime()
	return &result, err
}

// GetUTCLowercaseMaxDateTimeCreateRequest creates the GetUTCLowercaseMaxDateTime request.
func (DatetimeOperations) GetUTCLowercaseMaxDateTimeCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/datetime/max/utc/lowercase"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodGet, u)
	return req, nil
}

// GetUTCLowercaseMaxDateTimeHandleResponse handles the GetUTCLowercaseMaxDateTime response.
func (DatetimeOperations) GetUTCLowercaseMaxDateTimeHandleResponse(resp *azcore.Response) (*DatetimeGetUTCLowercaseMaxDateTimeResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	var aux *timeRFC3339
	err := resp.UnmarshalAsJSON(&aux)
	result := DatetimeGetUTCLowercaseMaxDateTimeResponse{RawResponse: resp.Response}
	result.Value = aux.ToTime()
	return &result, err
}

// GetUTCMinDateTimeCreateRequest creates the GetUTCMinDateTime request.
func (DatetimeOperations) GetUTCMinDateTimeCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/datetime/min/utc"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodGet, u)
	return req, nil
}

// GetUTCMinDateTimeHandleResponse handles the GetUTCMinDateTime response.
func (DatetimeOperations) GetUTCMinDateTimeHandleResponse(resp *azcore.Response) (*DatetimeGetUTCMinDateTimeResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	var aux *timeRFC3339
	err := resp.UnmarshalAsJSON(&aux)
	result := DatetimeGetUTCMinDateTimeResponse{RawResponse: resp.Response}
	result.Value = aux.ToTime()
	return &result, err
}

// GetUTCUppercaseMaxDateTimeCreateRequest creates the GetUTCUppercaseMaxDateTime request.
func (DatetimeOperations) GetUTCUppercaseMaxDateTimeCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/datetime/max/utc/uppercase"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodGet, u)
	return req, nil
}

// GetUTCUppercaseMaxDateTimeHandleResponse handles the GetUTCUppercaseMaxDateTime response.
func (DatetimeOperations) GetUTCUppercaseMaxDateTimeHandleResponse(resp *azcore.Response) (*DatetimeGetUTCUppercaseMaxDateTimeResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	var aux *timeRFC3339
	err := resp.UnmarshalAsJSON(&aux)
	result := DatetimeGetUTCUppercaseMaxDateTimeResponse{RawResponse: resp.Response}
	result.Value = aux.ToTime()
	return &result, err
}

// GetUTCUppercaseMaxDateTime7DigitsCreateRequest creates the GetUTCUppercaseMaxDateTime7Digits request.
func (DatetimeOperations) GetUTCUppercaseMaxDateTime7DigitsCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/datetime/max/utc7ms/uppercase"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodGet, u)
	return req, nil
}

// GetUTCUppercaseMaxDateTime7DigitsHandleResponse handles the GetUTCUppercaseMaxDateTime7Digits response.
func (DatetimeOperations) GetUTCUppercaseMaxDateTime7DigitsHandleResponse(resp *azcore.Response) (*DatetimeGetUTCUppercaseMaxDateTime7DigitsResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	var aux *timeRFC3339
	err := resp.UnmarshalAsJSON(&aux)
	result := DatetimeGetUTCUppercaseMaxDateTime7DigitsResponse{RawResponse: resp.Response}
	result.Value = aux.ToTime()
	return &result, err
}

// GetUnderflowCreateRequest creates the GetUnderflow request.
func (DatetimeOperations) GetUnderflowCreateRequest(u url.URL) (*azcore.Request, error) {
	urlPath := "/datetime/underflow"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodGet, u)
	return req, nil
}

// GetUnderflowHandleResponse handles the GetUnderflow response.
func (DatetimeOperations) GetUnderflowHandleResponse(resp *azcore.Response) (*DatetimeGetUnderflowResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	var aux *timeRFC3339
	err := resp.UnmarshalAsJSON(&aux)
	result := DatetimeGetUnderflowResponse{RawResponse: resp.Response}
	result.Value = aux.ToTime()
	return &result, err
}

// PutLocalNegativeOffsetMaxDateTimeCreateRequest creates the PutLocalNegativeOffsetMaxDateTime request.
func (DatetimeOperations) PutLocalNegativeOffsetMaxDateTimeCreateRequest(u url.URL, datetimeBody time.Time) (*azcore.Request, error) {
	urlPath := "/datetime/max/localnegativeoffset"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsJSON(datetimeBody)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutLocalNegativeOffsetMaxDateTimeHandleResponse handles the PutLocalNegativeOffsetMaxDateTime response.
func (DatetimeOperations) PutLocalNegativeOffsetMaxDateTimeHandleResponse(resp *azcore.Response) (*DatetimePutLocalNegativeOffsetMaxDateTimeResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &DatetimePutLocalNegativeOffsetMaxDateTimeResponse{RawResponse: resp.Response}, nil
}

// PutLocalNegativeOffsetMinDateTimeCreateRequest creates the PutLocalNegativeOffsetMinDateTime request.
func (DatetimeOperations) PutLocalNegativeOffsetMinDateTimeCreateRequest(u url.URL, datetimeBody time.Time) (*azcore.Request, error) {
	urlPath := "/datetime/min/localnegativeoffset"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsJSON(datetimeBody)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutLocalNegativeOffsetMinDateTimeHandleResponse handles the PutLocalNegativeOffsetMinDateTime response.
func (DatetimeOperations) PutLocalNegativeOffsetMinDateTimeHandleResponse(resp *azcore.Response) (*DatetimePutLocalNegativeOffsetMinDateTimeResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &DatetimePutLocalNegativeOffsetMinDateTimeResponse{RawResponse: resp.Response}, nil
}

// PutLocalPositiveOffsetMaxDateTimeCreateRequest creates the PutLocalPositiveOffsetMaxDateTime request.
func (DatetimeOperations) PutLocalPositiveOffsetMaxDateTimeCreateRequest(u url.URL, datetimeBody time.Time) (*azcore.Request, error) {
	urlPath := "/datetime/max/localpositiveoffset"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsJSON(datetimeBody)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutLocalPositiveOffsetMaxDateTimeHandleResponse handles the PutLocalPositiveOffsetMaxDateTime response.
func (DatetimeOperations) PutLocalPositiveOffsetMaxDateTimeHandleResponse(resp *azcore.Response) (*DatetimePutLocalPositiveOffsetMaxDateTimeResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &DatetimePutLocalPositiveOffsetMaxDateTimeResponse{RawResponse: resp.Response}, nil
}

// PutLocalPositiveOffsetMinDateTimeCreateRequest creates the PutLocalPositiveOffsetMinDateTime request.
func (DatetimeOperations) PutLocalPositiveOffsetMinDateTimeCreateRequest(u url.URL, datetimeBody time.Time) (*azcore.Request, error) {
	urlPath := "/datetime/min/localpositiveoffset"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsJSON(datetimeBody)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutLocalPositiveOffsetMinDateTimeHandleResponse handles the PutLocalPositiveOffsetMinDateTime response.
func (DatetimeOperations) PutLocalPositiveOffsetMinDateTimeHandleResponse(resp *azcore.Response) (*DatetimePutLocalPositiveOffsetMinDateTimeResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &DatetimePutLocalPositiveOffsetMinDateTimeResponse{RawResponse: resp.Response}, nil
}

// PutUTCMaxDateTimeCreateRequest creates the PutUTCMaxDateTime request.
func (DatetimeOperations) PutUTCMaxDateTimeCreateRequest(u url.URL, datetimeBody time.Time) (*azcore.Request, error) {
	urlPath := "/datetime/max/utc"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsJSON(datetimeBody)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutUTCMaxDateTimeHandleResponse handles the PutUTCMaxDateTime response.
func (DatetimeOperations) PutUTCMaxDateTimeHandleResponse(resp *azcore.Response) (*DatetimePutUTCMaxDateTimeResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &DatetimePutUTCMaxDateTimeResponse{RawResponse: resp.Response}, nil
}

// PutUTCMaxDateTime7DigitsCreateRequest creates the PutUTCMaxDateTime7Digits request.
func (DatetimeOperations) PutUTCMaxDateTime7DigitsCreateRequest(u url.URL, datetimeBody time.Time) (*azcore.Request, error) {
	urlPath := "/datetime/max/utc7ms"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsJSON(datetimeBody)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutUTCMaxDateTime7DigitsHandleResponse handles the PutUTCMaxDateTime7Digits response.
func (DatetimeOperations) PutUTCMaxDateTime7DigitsHandleResponse(resp *azcore.Response) (*DatetimePutUTCMaxDateTime7DigitsResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &DatetimePutUTCMaxDateTime7DigitsResponse{RawResponse: resp.Response}, nil
}

// PutUTCMinDateTimeCreateRequest creates the PutUTCMinDateTime request.
func (DatetimeOperations) PutUTCMinDateTimeCreateRequest(u url.URL, datetimeBody time.Time) (*azcore.Request, error) {
	urlPath := "/datetime/min/utc"
	u.Path = path.Join(u.Path, urlPath)
	req := azcore.NewRequest(http.MethodPut, u)
	err := req.MarshalAsJSON(datetimeBody)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutUTCMinDateTimeHandleResponse handles the PutUTCMinDateTime response.
func (DatetimeOperations) PutUTCMinDateTimeHandleResponse(resp *azcore.Response) (*DatetimePutUTCMinDateTimeResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, newError(resp)
	}
	return &DatetimePutUTCMinDateTimeResponse{RawResponse: resp.Response}, nil
}
