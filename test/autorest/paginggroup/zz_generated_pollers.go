//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package paginggroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"time"
)

// PagingClientGetMultiplePagesLROPoller provides polling facilities until the operation reaches a terminal state.
type PagingClientGetMultiplePagesLROPoller struct {
	pt     *azcore.Poller
	client *PagingClient
}

// Done returns true if the LRO has reached a terminal state.
func (p *PagingClientGetMultiplePagesLROPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.
// If the LRO has completed successfully, the poller's state is updated and the
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// a zero-value response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// response or error.
func (p *PagingClientGetMultiplePagesLROPoller) Poll(ctx context.Context) (*PagingClientGetMultiplePagesLROPager, error) {
	result := &PagingClientGetMultiplePagesLROPager{}
	if _, err := p.pt.Poll(ctx); err != nil {
		return nil, err
	}
	if !p.Done() {
		return nil, nil
	}
	_, err := p.pt.FinalResponse(ctx, &result.current.ProductResult)
	if err != nil {
		return nil, err
	}
	result.client = p.client
	return result, err
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
func (p *PagingClientGetMultiplePagesLROPoller) PollUntilDone(ctx context.Context, freq time.Duration) (*PagingClientGetMultiplePagesLROPager, error) {
	result := &PagingClientGetMultiplePagesLROPager{client: p.client}
	_, err := p.pt.PollUntilDone(ctx, freq, &result.current.ProductResult)
	if err != nil {
		return nil, err
	}
	return result, err
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
// Returns an error if the poller is in a terminal state.
func (p *PagingClientGetMultiplePagesLROPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// Resume rehydrates a PagingClientGetMultiplePagesLROPoller from the provided client and resume token.
// Returns an error if the token is isn't applicable to this poller type.
func (p *PagingClientGetMultiplePagesLROPoller) Resume(ctx context.Context, client *PagingClient, token string) (*PagingClientGetMultiplePagesLROPager, error) {
	var err error
	if p.pt, err = armruntime.NewPollerFromResumeToken("PagingClient.GetMultiplePagesLRO", token, client.pl); err != nil {
		return nil, err
	}
	p.client = client
	return p.Poll(ctx)
}
