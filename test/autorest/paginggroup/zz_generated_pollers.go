// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package paginggroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"time"
)

// ProductResultPagerPoller provides polling facilities until the operation completes
type ProductResultPagerPoller interface {
	azcore.Poller

	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ProductResultPager will be returned.
	FinalResponse(ctx context.Context) (ProductResultPager, error)
}

type productResultPagerPoller struct {
	// the client for making the request
	pipeline    azcore.Pipeline
	errHandler  productResultHandleError
	respHandler productResultHandleResponse
	statusCodes []int
	pt          armcore.Poller
}

// Done returns true if there was an error or polling has reached a terminal state
func (p *productResultPagerPoller) Done() bool {
	return p.pt.Done()
}

// Poll will send poll the service endpoint and return an http.Response or error received from the service
func (p *productResultPagerPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx, p.pipeline)
}

func (p *productResultPagerPoller) FinalResponse(ctx context.Context) (ProductResultPager, error) {
	respType := &productResultPager{}
	resp, err := p.pt.FinalResponse(ctx, p.pipeline, respType)
	if err != nil {
		return nil, err
	}
	return p.handleResponse(&azcore.Response{Response: resp})
}

// ResumeToken generates the string token that can be used with the ResumeProductResultPagerPoller method
// on the client to create a new poller from the data held in the current poller type
func (p *productResultPagerPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *productResultPagerPoller) pollUntilDone(ctx context.Context, frequency time.Duration) (ProductResultPager, error) {
	respType := &productResultPager{}
	resp, err := p.pt.PollUntilDone(ctx, frequency, p.pipeline, respType)
	if err != nil {
		return nil, err
	}
	return p.handleResponse(&azcore.Response{Response: resp})
}

func (p *productResultPagerPoller) handleResponse(resp *azcore.Response) (ProductResultPager, error) {
	return &productResultPager{
		pipeline:  p.pipeline,
		resp:      resp,
		errorer:   p.errHandler,
		responder: p.respHandler,
		advancer: func(ctx context.Context, resp ProductResultResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.ProductResult.NextLink)
		},
		statusCodes: p.statusCodes,
	}, nil
}
