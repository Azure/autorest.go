// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package paginggroup

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// CustomParameterGroup contains a group of parameters for the Paging.GetMultiplePagesFragmentWithGroupingNextLink method.
type CustomParameterGroup struct {
	// Sets the api version to use.
	APIVersion string
	// Sets the tenant to use.
	Tenant string
}

type ODataProductResult struct {
	ODataNextLink *string    `json:"odata.nextLink,omitempty"`
	Values        []*Product `json:"values,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ODataProductResult.
func (o ODataProductResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "odata.nextLink", o.ODataNextLink)
	populate(objectMap, "values", o.Values)
	return json.Marshal(objectMap)
}

type OperationResult struct {
	// The status of the request
	Status *OperationResultStatus `json:"status,omitempty"`
}

// PagingBeginGetMultiplePagesLROOptions contains the optional parameters for the Paging.BeginGetMultiplePagesLRO method.
type PagingBeginGetMultiplePagesLROOptions struct {
	ClientRequestID *string
	// Sets the maximum number of items to return in the response.
	Maxresults *int32
	// Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
	Timeout *int32
}

// PagingFirstResponseEmptyOptions contains the optional parameters for the Paging.FirstResponseEmpty method.
type PagingFirstResponseEmptyOptions struct {
	// placeholder for future optional parameters
}

// PagingGetMultiplePagesFailureOptions contains the optional parameters for the Paging.GetMultiplePagesFailure method.
type PagingGetMultiplePagesFailureOptions struct {
	// placeholder for future optional parameters
}

// PagingGetMultiplePagesFailureURIOptions contains the optional parameters for the Paging.GetMultiplePagesFailureURI method.
type PagingGetMultiplePagesFailureURIOptions struct {
	// placeholder for future optional parameters
}

// PagingGetMultiplePagesFragmentNextLinkOptions contains the optional parameters for the Paging.GetMultiplePagesFragmentNextLink method.
type PagingGetMultiplePagesFragmentNextLinkOptions struct {
	// placeholder for future optional parameters
}

// PagingGetMultiplePagesFragmentWithGroupingNextLinkOptions contains the optional parameters for the Paging.GetMultiplePagesFragmentWithGroupingNextLink
// method.
type PagingGetMultiplePagesFragmentWithGroupingNextLinkOptions struct {
	// placeholder for future optional parameters
}

// PagingGetMultiplePagesOptions contains the optional parameters for the Paging.GetMultiplePages method.
type PagingGetMultiplePagesOptions struct {
	ClientRequestID *string
	// Sets the maximum number of items to return in the response.
	Maxresults *int32
	// Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
	Timeout *int32
}

// PagingGetMultiplePagesRetryFirstOptions contains the optional parameters for the Paging.GetMultiplePagesRetryFirst method.
type PagingGetMultiplePagesRetryFirstOptions struct {
	// placeholder for future optional parameters
}

// PagingGetMultiplePagesRetrySecondOptions contains the optional parameters for the Paging.GetMultiplePagesRetrySecond method.
type PagingGetMultiplePagesRetrySecondOptions struct {
	// placeholder for future optional parameters
}

// PagingGetMultiplePagesWithOffsetOptions contains the optional parameters for the Paging.GetMultiplePagesWithOffset method.
type PagingGetMultiplePagesWithOffsetOptions struct {
	ClientRequestID *string
	// Sets the maximum number of items to return in the response.
	Maxresults *int32
	// Offset of return value
	Offset int32
	// Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
	Timeout *int32
}

// PagingGetNoItemNamePagesOptions contains the optional parameters for the Paging.GetNoItemNamePages method.
type PagingGetNoItemNamePagesOptions struct {
	// placeholder for future optional parameters
}

// PagingGetNullNextLinkNamePagesOptions contains the optional parameters for the Paging.GetNullNextLinkNamePages method.
type PagingGetNullNextLinkNamePagesOptions struct {
	// placeholder for future optional parameters
}

// PagingGetODataMultiplePagesOptions contains the optional parameters for the Paging.GetODataMultiplePages method.
type PagingGetODataMultiplePagesOptions struct {
	ClientRequestID *string
	// Sets the maximum number of items to return in the response.
	Maxresults *int32
	// Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
	Timeout *int32
}

// PagingGetPagingModelWithItemNameWithXMSClientNameOptions contains the optional parameters for the Paging.GetPagingModelWithItemNameWithXMSClientName
// method.
type PagingGetPagingModelWithItemNameWithXMSClientNameOptions struct {
	// placeholder for future optional parameters
}

// PagingGetSinglePagesFailureOptions contains the optional parameters for the Paging.GetSinglePagesFailure method.
type PagingGetSinglePagesFailureOptions struct {
	// placeholder for future optional parameters
}

// PagingGetSinglePagesOptions contains the optional parameters for the Paging.GetSinglePages method.
type PagingGetSinglePagesOptions struct {
	// placeholder for future optional parameters
}

// PagingGetWithQueryParamsOptions contains the optional parameters for the Paging.GetWithQueryParams method.
type PagingGetWithQueryParamsOptions struct {
	// placeholder for future optional parameters
}

type Product struct {
	Properties *ProductProperties `json:"properties,omitempty"`
}

type ProductProperties struct {
	ID   *int32  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

type ProductResult struct {
	NextLink *string    `json:"nextLink,omitempty"`
	Values   []*Product `json:"values,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ProductResult.
func (p ProductResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "values", p.Values)
	return json.Marshal(objectMap)
}

type ProductResultValue struct {
	NextLink *string    `json:"nextLink,omitempty"`
	Value    []*Product `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ProductResultValue.
func (p ProductResultValue) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

type ProductResultValueWithXMSClientName struct {
	Indexes  []*Product `json:"values,omitempty"`
	NextLink *string    `json:"nextLink,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ProductResultValueWithXMSClientName.
func (p ProductResultValueWithXMSClientName) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "values", p.Indexes)
	populate(objectMap, "nextLink", p.NextLink)
	return json.Marshal(objectMap)
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}
