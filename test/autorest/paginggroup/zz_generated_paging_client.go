//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package paginggroup

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// PagingClient contains the methods for the Paging group.
// Don't use this type directly, use NewPagingClient() instead.
type PagingClient struct {
	pl runtime.Pipeline
}

// NewPagingClient creates a new instance of PagingClient with the specified values.
// pl - the pipeline used for sending requests and handling responses.
func NewPagingClient(pl runtime.Pipeline) *PagingClient {
	client := &PagingClient{
		pl: pl,
	}
	return client
}

// NewDuplicateParamsPager - Define filter as a query param for all calls. However, the returned next link will also include
// the filter as part of it. Make sure you don't end up duplicating the filter param in the url sent.
// Generated from API version 1.0.0
// options - PagingClientDuplicateParamsOptions contains the optional parameters for the PagingClient.DuplicateParams method.
func (client *PagingClient) NewDuplicateParamsPager(options *PagingClientDuplicateParamsOptions) *runtime.Pager[PagingClientDuplicateParamsResponse] {
	return runtime.NewPager(runtime.PagingHandler[PagingClientDuplicateParamsResponse]{
		More: func(page PagingClientDuplicateParamsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PagingClientDuplicateParamsResponse) (PagingClientDuplicateParamsResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.duplicateParamsCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return PagingClientDuplicateParamsResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return PagingClientDuplicateParamsResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return PagingClientDuplicateParamsResponse{}, runtime.NewResponseError(resp)
			}
			return client.duplicateParamsHandleResponse(resp)
		},
	})
}

// duplicateParamsCreateRequest creates the DuplicateParams request.
func (client *PagingClient) duplicateParamsCreateRequest(ctx context.Context, options *PagingClientDuplicateParamsOptions) (*policy.Request, error) {
	urlPath := "/paging/multiple/duplicateParams/1"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// duplicateParamsHandleResponse handles the DuplicateParams response.
func (client *PagingClient) duplicateParamsHandleResponse(resp *http.Response) (PagingClientDuplicateParamsResponse, error) {
	result := PagingClientDuplicateParamsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductResult); err != nil {
		return PagingClientDuplicateParamsResponse{}, err
	}
	return result, nil
}

// NewFirstResponseEmptyPager - A paging operation whose first response's items list is empty, but still returns a next link.
// Second (and final) call, will give you an items list of 1.
// Generated from API version 1.0.0
// options - PagingClientFirstResponseEmptyOptions contains the optional parameters for the PagingClient.FirstResponseEmpty
// method.
func (client *PagingClient) NewFirstResponseEmptyPager(options *PagingClientFirstResponseEmptyOptions) *runtime.Pager[PagingClientFirstResponseEmptyResponse] {
	return runtime.NewPager(runtime.PagingHandler[PagingClientFirstResponseEmptyResponse]{
		More: func(page PagingClientFirstResponseEmptyResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PagingClientFirstResponseEmptyResponse) (PagingClientFirstResponseEmptyResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.firstResponseEmptyCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return PagingClientFirstResponseEmptyResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return PagingClientFirstResponseEmptyResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return PagingClientFirstResponseEmptyResponse{}, runtime.NewResponseError(resp)
			}
			return client.firstResponseEmptyHandleResponse(resp)
		},
	})
}

// firstResponseEmptyCreateRequest creates the FirstResponseEmpty request.
func (client *PagingClient) firstResponseEmptyCreateRequest(ctx context.Context, options *PagingClientFirstResponseEmptyOptions) (*policy.Request, error) {
	urlPath := "/paging/firstResponseEmpty/1"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// firstResponseEmptyHandleResponse handles the FirstResponseEmpty response.
func (client *PagingClient) firstResponseEmptyHandleResponse(resp *http.Response) (PagingClientFirstResponseEmptyResponse, error) {
	result := PagingClientFirstResponseEmptyResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductResultValue); err != nil {
		return PagingClientFirstResponseEmptyResponse{}, err
	}
	return result, nil
}

// NewGetMultiplePagesPager - A paging operation that includes a nextLink that has 10 pages
// Generated from API version 1.0.0
// options - PagingClientGetMultiplePagesOptions contains the optional parameters for the PagingClient.GetMultiplePages method.
func (client *PagingClient) NewGetMultiplePagesPager(options *PagingClientGetMultiplePagesOptions) *runtime.Pager[PagingClientGetMultiplePagesResponse] {
	return runtime.NewPager(runtime.PagingHandler[PagingClientGetMultiplePagesResponse]{
		More: func(page PagingClientGetMultiplePagesResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PagingClientGetMultiplePagesResponse) (PagingClientGetMultiplePagesResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.getMultiplePagesCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return PagingClientGetMultiplePagesResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return PagingClientGetMultiplePagesResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return PagingClientGetMultiplePagesResponse{}, runtime.NewResponseError(resp)
			}
			return client.getMultiplePagesHandleResponse(resp)
		},
	})
}

// getMultiplePagesCreateRequest creates the GetMultiplePages request.
func (client *PagingClient) getMultiplePagesCreateRequest(ctx context.Context, options *PagingClientGetMultiplePagesOptions) (*policy.Request, error) {
	urlPath := "/paging/multiple"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	if options != nil && options.ClientRequestID != nil {
		req.Raw().Header["client-request-id"] = []string{*options.ClientRequestID}
	}
	if options != nil && options.Maxresults != nil {
		req.Raw().Header["maxresults"] = []string{strconv.FormatInt(int64(*options.Maxresults), 10)}
	}
	if options != nil && options.Timeout != nil {
		req.Raw().Header["timeout"] = []string{strconv.FormatInt(int64(*options.Timeout), 10)}
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getMultiplePagesHandleResponse handles the GetMultiplePages response.
func (client *PagingClient) getMultiplePagesHandleResponse(resp *http.Response) (PagingClientGetMultiplePagesResponse, error) {
	result := PagingClientGetMultiplePagesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductResult); err != nil {
		return PagingClientGetMultiplePagesResponse{}, err
	}
	return result, nil
}

// NewGetMultiplePagesFailurePager - A paging operation that receives a 400 on the second call
// Generated from API version 1.0.0
// options - PagingClientGetMultiplePagesFailureOptions contains the optional parameters for the PagingClient.GetMultiplePagesFailure
// method.
func (client *PagingClient) NewGetMultiplePagesFailurePager(options *PagingClientGetMultiplePagesFailureOptions) *runtime.Pager[PagingClientGetMultiplePagesFailureResponse] {
	return runtime.NewPager(runtime.PagingHandler[PagingClientGetMultiplePagesFailureResponse]{
		More: func(page PagingClientGetMultiplePagesFailureResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PagingClientGetMultiplePagesFailureResponse) (PagingClientGetMultiplePagesFailureResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.getMultiplePagesFailureCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return PagingClientGetMultiplePagesFailureResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return PagingClientGetMultiplePagesFailureResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return PagingClientGetMultiplePagesFailureResponse{}, runtime.NewResponseError(resp)
			}
			return client.getMultiplePagesFailureHandleResponse(resp)
		},
	})
}

// getMultiplePagesFailureCreateRequest creates the GetMultiplePagesFailure request.
func (client *PagingClient) getMultiplePagesFailureCreateRequest(ctx context.Context, options *PagingClientGetMultiplePagesFailureOptions) (*policy.Request, error) {
	urlPath := "/paging/multiple/failure"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getMultiplePagesFailureHandleResponse handles the GetMultiplePagesFailure response.
func (client *PagingClient) getMultiplePagesFailureHandleResponse(resp *http.Response) (PagingClientGetMultiplePagesFailureResponse, error) {
	result := PagingClientGetMultiplePagesFailureResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductResult); err != nil {
		return PagingClientGetMultiplePagesFailureResponse{}, err
	}
	return result, nil
}

// NewGetMultiplePagesFailureURIPager - A paging operation that receives an invalid nextLink
// Generated from API version 1.0.0
// options - PagingClientGetMultiplePagesFailureURIOptions contains the optional parameters for the PagingClient.GetMultiplePagesFailureURI
// method.
func (client *PagingClient) NewGetMultiplePagesFailureURIPager(options *PagingClientGetMultiplePagesFailureURIOptions) *runtime.Pager[PagingClientGetMultiplePagesFailureURIResponse] {
	return runtime.NewPager(runtime.PagingHandler[PagingClientGetMultiplePagesFailureURIResponse]{
		More: func(page PagingClientGetMultiplePagesFailureURIResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PagingClientGetMultiplePagesFailureURIResponse) (PagingClientGetMultiplePagesFailureURIResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.getMultiplePagesFailureURICreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return PagingClientGetMultiplePagesFailureURIResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return PagingClientGetMultiplePagesFailureURIResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return PagingClientGetMultiplePagesFailureURIResponse{}, runtime.NewResponseError(resp)
			}
			return client.getMultiplePagesFailureURIHandleResponse(resp)
		},
	})
}

// getMultiplePagesFailureURICreateRequest creates the GetMultiplePagesFailureURI request.
func (client *PagingClient) getMultiplePagesFailureURICreateRequest(ctx context.Context, options *PagingClientGetMultiplePagesFailureURIOptions) (*policy.Request, error) {
	urlPath := "/paging/multiple/failureuri"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getMultiplePagesFailureURIHandleResponse handles the GetMultiplePagesFailureURI response.
func (client *PagingClient) getMultiplePagesFailureURIHandleResponse(resp *http.Response) (PagingClientGetMultiplePagesFailureURIResponse, error) {
	result := PagingClientGetMultiplePagesFailureURIResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductResult); err != nil {
		return PagingClientGetMultiplePagesFailureURIResponse{}, err
	}
	return result, nil
}

// NewGetMultiplePagesFragmentNextLinkPager - A paging operation that doesn't return a full URL, just a fragment
// Generated from API version 1.0.0
// apiVersion - Sets the api version to use.
// tenant - Sets the tenant to use.
// options - PagingClientGetMultiplePagesFragmentNextLinkOptions contains the optional parameters for the PagingClient.GetMultiplePagesFragmentNextLink
// method.
func (client *PagingClient) NewGetMultiplePagesFragmentNextLinkPager(apiVersion string, tenant string, options *PagingClientGetMultiplePagesFragmentNextLinkOptions) *runtime.Pager[PagingClientGetMultiplePagesFragmentNextLinkResponse] {
	return runtime.NewPager(runtime.PagingHandler[PagingClientGetMultiplePagesFragmentNextLinkResponse]{
		More: func(page PagingClientGetMultiplePagesFragmentNextLinkResponse) bool {
			return page.ODataNextLink != nil && len(*page.ODataNextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PagingClientGetMultiplePagesFragmentNextLinkResponse) (PagingClientGetMultiplePagesFragmentNextLinkResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.getMultiplePagesFragmentNextLinkCreateRequest(ctx, apiVersion, tenant, options)
			} else {
				req, err = client.nextFragmentCreateRequest(ctx, apiVersion, tenant, *page.ODataNextLink)
			}
			if err != nil {
				return PagingClientGetMultiplePagesFragmentNextLinkResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return PagingClientGetMultiplePagesFragmentNextLinkResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return PagingClientGetMultiplePagesFragmentNextLinkResponse{}, runtime.NewResponseError(resp)
			}
			return client.getMultiplePagesFragmentNextLinkHandleResponse(resp)
		},
	})
}

// getMultiplePagesFragmentNextLinkCreateRequest creates the GetMultiplePagesFragmentNextLink request.
func (client *PagingClient) getMultiplePagesFragmentNextLinkCreateRequest(ctx context.Context, apiVersion string, tenant string, options *PagingClientGetMultiplePagesFragmentNextLinkOptions) (*policy.Request, error) {
	urlPath := "/paging/multiple/fragment/{tenant}"
	if tenant == "" {
		return nil, errors.New("parameter tenant cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{tenant}", url.PathEscape(tenant))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api_version", apiVersion)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getMultiplePagesFragmentNextLinkHandleResponse handles the GetMultiplePagesFragmentNextLink response.
func (client *PagingClient) getMultiplePagesFragmentNextLinkHandleResponse(resp *http.Response) (PagingClientGetMultiplePagesFragmentNextLinkResponse, error) {
	result := PagingClientGetMultiplePagesFragmentNextLinkResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ODataProductResult); err != nil {
		return PagingClientGetMultiplePagesFragmentNextLinkResponse{}, err
	}
	return result, nil
}

// NewGetMultiplePagesFragmentWithGroupingNextLinkPager - A paging operation that doesn't return a full URL, just a fragment
// with parameters grouped
// Generated from API version 1.0.0
// CustomParameterGroup - CustomParameterGroup contains a group of parameters for the PagingClient.GetMultiplePagesFragmentWithGroupingNextLink
// method.
// options - PagingClientGetMultiplePagesFragmentWithGroupingNextLinkOptions contains the optional parameters for the PagingClient.GetMultiplePagesFragmentWithGroupingNextLink
// method.
func (client *PagingClient) NewGetMultiplePagesFragmentWithGroupingNextLinkPager(customParameterGroup CustomParameterGroup, options *PagingClientGetMultiplePagesFragmentWithGroupingNextLinkOptions) *runtime.Pager[PagingClientGetMultiplePagesFragmentWithGroupingNextLinkResponse] {
	return runtime.NewPager(runtime.PagingHandler[PagingClientGetMultiplePagesFragmentWithGroupingNextLinkResponse]{
		More: func(page PagingClientGetMultiplePagesFragmentWithGroupingNextLinkResponse) bool {
			return page.ODataNextLink != nil && len(*page.ODataNextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PagingClientGetMultiplePagesFragmentWithGroupingNextLinkResponse) (PagingClientGetMultiplePagesFragmentWithGroupingNextLinkResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.getMultiplePagesFragmentWithGroupingNextLinkCreateRequest(ctx, customParameterGroup, options)
			} else {
				req, err = client.nextFragmentWithGroupingCreateRequest(ctx, *page.ODataNextLink, customParameterGroup)
			}
			if err != nil {
				return PagingClientGetMultiplePagesFragmentWithGroupingNextLinkResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return PagingClientGetMultiplePagesFragmentWithGroupingNextLinkResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return PagingClientGetMultiplePagesFragmentWithGroupingNextLinkResponse{}, runtime.NewResponseError(resp)
			}
			return client.getMultiplePagesFragmentWithGroupingNextLinkHandleResponse(resp)
		},
	})
}

// getMultiplePagesFragmentWithGroupingNextLinkCreateRequest creates the GetMultiplePagesFragmentWithGroupingNextLink request.
func (client *PagingClient) getMultiplePagesFragmentWithGroupingNextLinkCreateRequest(ctx context.Context, customParameterGroup CustomParameterGroup, options *PagingClientGetMultiplePagesFragmentWithGroupingNextLinkOptions) (*policy.Request, error) {
	urlPath := "/paging/multiple/fragmentwithgrouping/{tenant}"
	if customParameterGroup.Tenant == "" {
		return nil, errors.New("parameter customParameterGroup.Tenant cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{tenant}", url.PathEscape(customParameterGroup.Tenant))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api_version", customParameterGroup.APIVersion)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getMultiplePagesFragmentWithGroupingNextLinkHandleResponse handles the GetMultiplePagesFragmentWithGroupingNextLink response.
func (client *PagingClient) getMultiplePagesFragmentWithGroupingNextLinkHandleResponse(resp *http.Response) (PagingClientGetMultiplePagesFragmentWithGroupingNextLinkResponse, error) {
	result := PagingClientGetMultiplePagesFragmentWithGroupingNextLinkResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ODataProductResult); err != nil {
		return PagingClientGetMultiplePagesFragmentWithGroupingNextLinkResponse{}, err
	}
	return result, nil
}

// BeginGetMultiplePagesLRO - A long-running paging operation that includes a nextLink that has 10 pages
// Generated from API version 1.0.0
// options - PagingClientBeginGetMultiplePagesLROOptions contains the optional parameters for the PagingClient.BeginGetMultiplePagesLRO
// method.
func (client *PagingClient) BeginGetMultiplePagesLRO(ctx context.Context, options *PagingClientBeginGetMultiplePagesLROOptions) (*runtime.Poller[*runtime.Pager[PagingClientGetMultiplePagesLROResponse]], error) {
	pager := runtime.NewPager(runtime.PagingHandler[PagingClientGetMultiplePagesLROResponse]{
		More: func(page PagingClientGetMultiplePagesLROResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PagingClientGetMultiplePagesLROResponse) (PagingClientGetMultiplePagesLROResponse, error) {
			req, err := runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			if err != nil {
				return PagingClientGetMultiplePagesLROResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return PagingClientGetMultiplePagesLROResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return PagingClientGetMultiplePagesLROResponse{}, runtime.NewResponseError(resp)
			}
			return client.getMultiplePagesLROHandleResponse(resp)
		},
	})
	if options == nil || options.ResumeToken == "" {
		resp, err := client.getMultiplePagesLRO(ctx, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[*runtime.Pager[PagingClientGetMultiplePagesLROResponse]]{
			Response: &pager,
		})
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.pl, &runtime.NewPollerFromResumeTokenOptions[*runtime.Pager[PagingClientGetMultiplePagesLROResponse]]{
			Response: &pager,
		})
	}
}

// GetMultiplePagesLRO - A long-running paging operation that includes a nextLink that has 10 pages
// Generated from API version 1.0.0
func (client *PagingClient) getMultiplePagesLRO(ctx context.Context, options *PagingClientBeginGetMultiplePagesLROOptions) (*http.Response, error) {
	req, err := client.getMultiplePagesLROCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// getMultiplePagesLROCreateRequest creates the GetMultiplePagesLRO request.
func (client *PagingClient) getMultiplePagesLROCreateRequest(ctx context.Context, options *PagingClientBeginGetMultiplePagesLROOptions) (*policy.Request, error) {
	urlPath := "/paging/multiple/lro"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	if options != nil && options.ClientRequestID != nil {
		req.Raw().Header["client-request-id"] = []string{*options.ClientRequestID}
	}
	if options != nil && options.Maxresults != nil {
		req.Raw().Header["maxresults"] = []string{strconv.FormatInt(int64(*options.Maxresults), 10)}
	}
	if options != nil && options.Timeout != nil {
		req.Raw().Header["timeout"] = []string{strconv.FormatInt(int64(*options.Timeout), 10)}
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getMultiplePagesLROHandleResponse handles the GetMultiplePagesLRO response.
func (client *PagingClient) getMultiplePagesLROHandleResponse(resp *http.Response) (PagingClientGetMultiplePagesLROResponse, error) {
	result := PagingClientGetMultiplePagesLROResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductResult); err != nil {
		return PagingClientGetMultiplePagesLROResponse{}, err
	}
	return result, nil
}

// NewGetMultiplePagesRetryFirstPager - A paging operation that fails on the first call with 500 and then retries and then
// get a response including a nextLink that has 10 pages
// Generated from API version 1.0.0
// options - PagingClientGetMultiplePagesRetryFirstOptions contains the optional parameters for the PagingClient.GetMultiplePagesRetryFirst
// method.
func (client *PagingClient) NewGetMultiplePagesRetryFirstPager(options *PagingClientGetMultiplePagesRetryFirstOptions) *runtime.Pager[PagingClientGetMultiplePagesRetryFirstResponse] {
	return runtime.NewPager(runtime.PagingHandler[PagingClientGetMultiplePagesRetryFirstResponse]{
		More: func(page PagingClientGetMultiplePagesRetryFirstResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PagingClientGetMultiplePagesRetryFirstResponse) (PagingClientGetMultiplePagesRetryFirstResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.getMultiplePagesRetryFirstCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return PagingClientGetMultiplePagesRetryFirstResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return PagingClientGetMultiplePagesRetryFirstResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return PagingClientGetMultiplePagesRetryFirstResponse{}, runtime.NewResponseError(resp)
			}
			return client.getMultiplePagesRetryFirstHandleResponse(resp)
		},
	})
}

// getMultiplePagesRetryFirstCreateRequest creates the GetMultiplePagesRetryFirst request.
func (client *PagingClient) getMultiplePagesRetryFirstCreateRequest(ctx context.Context, options *PagingClientGetMultiplePagesRetryFirstOptions) (*policy.Request, error) {
	urlPath := "/paging/multiple/retryfirst"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getMultiplePagesRetryFirstHandleResponse handles the GetMultiplePagesRetryFirst response.
func (client *PagingClient) getMultiplePagesRetryFirstHandleResponse(resp *http.Response) (PagingClientGetMultiplePagesRetryFirstResponse, error) {
	result := PagingClientGetMultiplePagesRetryFirstResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductResult); err != nil {
		return PagingClientGetMultiplePagesRetryFirstResponse{}, err
	}
	return result, nil
}

// NewGetMultiplePagesRetrySecondPager - A paging operation that includes a nextLink that has 10 pages, of which the 2nd call
// fails first with 500. The client should retry and finish all 10 pages eventually.
// Generated from API version 1.0.0
// options - PagingClientGetMultiplePagesRetrySecondOptions contains the optional parameters for the PagingClient.GetMultiplePagesRetrySecond
// method.
func (client *PagingClient) NewGetMultiplePagesRetrySecondPager(options *PagingClientGetMultiplePagesRetrySecondOptions) *runtime.Pager[PagingClientGetMultiplePagesRetrySecondResponse] {
	return runtime.NewPager(runtime.PagingHandler[PagingClientGetMultiplePagesRetrySecondResponse]{
		More: func(page PagingClientGetMultiplePagesRetrySecondResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PagingClientGetMultiplePagesRetrySecondResponse) (PagingClientGetMultiplePagesRetrySecondResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.getMultiplePagesRetrySecondCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return PagingClientGetMultiplePagesRetrySecondResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return PagingClientGetMultiplePagesRetrySecondResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return PagingClientGetMultiplePagesRetrySecondResponse{}, runtime.NewResponseError(resp)
			}
			return client.getMultiplePagesRetrySecondHandleResponse(resp)
		},
	})
}

// getMultiplePagesRetrySecondCreateRequest creates the GetMultiplePagesRetrySecond request.
func (client *PagingClient) getMultiplePagesRetrySecondCreateRequest(ctx context.Context, options *PagingClientGetMultiplePagesRetrySecondOptions) (*policy.Request, error) {
	urlPath := "/paging/multiple/retrysecond"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getMultiplePagesRetrySecondHandleResponse handles the GetMultiplePagesRetrySecond response.
func (client *PagingClient) getMultiplePagesRetrySecondHandleResponse(resp *http.Response) (PagingClientGetMultiplePagesRetrySecondResponse, error) {
	result := PagingClientGetMultiplePagesRetrySecondResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductResult); err != nil {
		return PagingClientGetMultiplePagesRetrySecondResponse{}, err
	}
	return result, nil
}

// NewGetMultiplePagesWithOffsetPager - A paging operation that includes a nextLink that has 10 pages
// Generated from API version 1.0.0
// options - PagingClientGetMultiplePagesWithOffsetOptions contains the optional parameters for the PagingClient.GetMultiplePagesWithOffset
// method.
func (client *PagingClient) NewGetMultiplePagesWithOffsetPager(options PagingClientGetMultiplePagesWithOffsetOptions) *runtime.Pager[PagingClientGetMultiplePagesWithOffsetResponse] {
	return runtime.NewPager(runtime.PagingHandler[PagingClientGetMultiplePagesWithOffsetResponse]{
		More: func(page PagingClientGetMultiplePagesWithOffsetResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PagingClientGetMultiplePagesWithOffsetResponse) (PagingClientGetMultiplePagesWithOffsetResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.getMultiplePagesWithOffsetCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return PagingClientGetMultiplePagesWithOffsetResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return PagingClientGetMultiplePagesWithOffsetResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return PagingClientGetMultiplePagesWithOffsetResponse{}, runtime.NewResponseError(resp)
			}
			return client.getMultiplePagesWithOffsetHandleResponse(resp)
		},
	})
}

// getMultiplePagesWithOffsetCreateRequest creates the GetMultiplePagesWithOffset request.
func (client *PagingClient) getMultiplePagesWithOffsetCreateRequest(ctx context.Context, options PagingClientGetMultiplePagesWithOffsetOptions) (*policy.Request, error) {
	urlPath := "/paging/multiple/withpath/{offset}"
	urlPath = strings.ReplaceAll(urlPath, "{offset}", url.PathEscape(strconv.FormatInt(int64(options.Offset), 10)))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	if options.ClientRequestID != nil {
		req.Raw().Header["client-request-id"] = []string{*options.ClientRequestID}
	}
	if options.Maxresults != nil {
		req.Raw().Header["maxresults"] = []string{strconv.FormatInt(int64(*options.Maxresults), 10)}
	}
	if options.Timeout != nil {
		req.Raw().Header["timeout"] = []string{strconv.FormatInt(int64(*options.Timeout), 10)}
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getMultiplePagesWithOffsetHandleResponse handles the GetMultiplePagesWithOffset response.
func (client *PagingClient) getMultiplePagesWithOffsetHandleResponse(resp *http.Response) (PagingClientGetMultiplePagesWithOffsetResponse, error) {
	result := PagingClientGetMultiplePagesWithOffsetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductResult); err != nil {
		return PagingClientGetMultiplePagesWithOffsetResponse{}, err
	}
	return result, nil
}

// NewGetNoItemNamePagesPager - A paging operation that must return result of the default 'value' node.
// Generated from API version 1.0.0
// options - PagingClientGetNoItemNamePagesOptions contains the optional parameters for the PagingClient.GetNoItemNamePages
// method.
func (client *PagingClient) NewGetNoItemNamePagesPager(options *PagingClientGetNoItemNamePagesOptions) *runtime.Pager[PagingClientGetNoItemNamePagesResponse] {
	return runtime.NewPager(runtime.PagingHandler[PagingClientGetNoItemNamePagesResponse]{
		More: func(page PagingClientGetNoItemNamePagesResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PagingClientGetNoItemNamePagesResponse) (PagingClientGetNoItemNamePagesResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.getNoItemNamePagesCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return PagingClientGetNoItemNamePagesResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return PagingClientGetNoItemNamePagesResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return PagingClientGetNoItemNamePagesResponse{}, runtime.NewResponseError(resp)
			}
			return client.getNoItemNamePagesHandleResponse(resp)
		},
	})
}

// getNoItemNamePagesCreateRequest creates the GetNoItemNamePages request.
func (client *PagingClient) getNoItemNamePagesCreateRequest(ctx context.Context, options *PagingClientGetNoItemNamePagesOptions) (*policy.Request, error) {
	urlPath := "/paging/noitemname"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getNoItemNamePagesHandleResponse handles the GetNoItemNamePages response.
func (client *PagingClient) getNoItemNamePagesHandleResponse(resp *http.Response) (PagingClientGetNoItemNamePagesResponse, error) {
	result := PagingClientGetNoItemNamePagesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductResultValue); err != nil {
		return PagingClientGetNoItemNamePagesResponse{}, err
	}
	return result, nil
}

// NewGetNullNextLinkNamePagesPager - A paging operation that must ignore any kind of nextLink, and stop after page 1.
// Generated from API version 1.0.0
// options - PagingClientGetNullNextLinkNamePagesOptions contains the optional parameters for the PagingClient.GetNullNextLinkNamePages
// method.
func (client *PagingClient) NewGetNullNextLinkNamePagesPager(options *PagingClientGetNullNextLinkNamePagesOptions) *runtime.Pager[PagingClientGetNullNextLinkNamePagesResponse] {
	return runtime.NewPager(runtime.PagingHandler[PagingClientGetNullNextLinkNamePagesResponse]{
		More: func(page PagingClientGetNullNextLinkNamePagesResponse) bool {
			return false
		},
		Fetcher: func(ctx context.Context, page *PagingClientGetNullNextLinkNamePagesResponse) (PagingClientGetNullNextLinkNamePagesResponse, error) {
			req, err := client.getNullNextLinkNamePagesCreateRequest(ctx, options)
			if err != nil {
				return PagingClientGetNullNextLinkNamePagesResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return PagingClientGetNullNextLinkNamePagesResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return PagingClientGetNullNextLinkNamePagesResponse{}, runtime.NewResponseError(resp)
			}
			return client.getNullNextLinkNamePagesHandleResponse(resp)
		},
	})
}

// getNullNextLinkNamePagesCreateRequest creates the GetNullNextLinkNamePages request.
func (client *PagingClient) getNullNextLinkNamePagesCreateRequest(ctx context.Context, options *PagingClientGetNullNextLinkNamePagesOptions) (*policy.Request, error) {
	urlPath := "/paging/nullnextlink"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getNullNextLinkNamePagesHandleResponse handles the GetNullNextLinkNamePages response.
func (client *PagingClient) getNullNextLinkNamePagesHandleResponse(resp *http.Response) (PagingClientGetNullNextLinkNamePagesResponse, error) {
	result := PagingClientGetNullNextLinkNamePagesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductResult); err != nil {
		return PagingClientGetNullNextLinkNamePagesResponse{}, err
	}
	return result, nil
}

// NewGetODataMultiplePagesPager - A paging operation that includes a nextLink in odata format that has 10 pages
// Generated from API version 1.0.0
// options - PagingClientGetODataMultiplePagesOptions contains the optional parameters for the PagingClient.GetODataMultiplePages
// method.
func (client *PagingClient) NewGetODataMultiplePagesPager(options *PagingClientGetODataMultiplePagesOptions) *runtime.Pager[PagingClientGetODataMultiplePagesResponse] {
	return runtime.NewPager(runtime.PagingHandler[PagingClientGetODataMultiplePagesResponse]{
		More: func(page PagingClientGetODataMultiplePagesResponse) bool {
			return page.ODataNextLink != nil && len(*page.ODataNextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PagingClientGetODataMultiplePagesResponse) (PagingClientGetODataMultiplePagesResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.getODataMultiplePagesCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.ODataNextLink)
			}
			if err != nil {
				return PagingClientGetODataMultiplePagesResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return PagingClientGetODataMultiplePagesResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return PagingClientGetODataMultiplePagesResponse{}, runtime.NewResponseError(resp)
			}
			return client.getODataMultiplePagesHandleResponse(resp)
		},
	})
}

// getODataMultiplePagesCreateRequest creates the GetODataMultiplePages request.
func (client *PagingClient) getODataMultiplePagesCreateRequest(ctx context.Context, options *PagingClientGetODataMultiplePagesOptions) (*policy.Request, error) {
	urlPath := "/paging/multiple/odata"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	if options != nil && options.ClientRequestID != nil {
		req.Raw().Header["client-request-id"] = []string{*options.ClientRequestID}
	}
	if options != nil && options.Maxresults != nil {
		req.Raw().Header["maxresults"] = []string{strconv.FormatInt(int64(*options.Maxresults), 10)}
	}
	if options != nil && options.Timeout != nil {
		req.Raw().Header["timeout"] = []string{strconv.FormatInt(int64(*options.Timeout), 10)}
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getODataMultiplePagesHandleResponse handles the GetODataMultiplePages response.
func (client *PagingClient) getODataMultiplePagesHandleResponse(resp *http.Response) (PagingClientGetODataMultiplePagesResponse, error) {
	result := PagingClientGetODataMultiplePagesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ODataProductResult); err != nil {
		return PagingClientGetODataMultiplePagesResponse{}, err
	}
	return result, nil
}

// NewGetPagingModelWithItemNameWithXMSClientNamePager - A paging operation that returns a paging model whose item name is
// is overriden by x-ms-client-name 'indexes'.
// Generated from API version 1.0.0
// options - PagingClientGetPagingModelWithItemNameWithXMSClientNameOptions contains the optional parameters for the PagingClient.GetPagingModelWithItemNameWithXMSClientName
// method.
func (client *PagingClient) NewGetPagingModelWithItemNameWithXMSClientNamePager(options *PagingClientGetPagingModelWithItemNameWithXMSClientNameOptions) *runtime.Pager[PagingClientGetPagingModelWithItemNameWithXMSClientNameResponse] {
	return runtime.NewPager(runtime.PagingHandler[PagingClientGetPagingModelWithItemNameWithXMSClientNameResponse]{
		More: func(page PagingClientGetPagingModelWithItemNameWithXMSClientNameResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PagingClientGetPagingModelWithItemNameWithXMSClientNameResponse) (PagingClientGetPagingModelWithItemNameWithXMSClientNameResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.getPagingModelWithItemNameWithXMSClientNameCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return PagingClientGetPagingModelWithItemNameWithXMSClientNameResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return PagingClientGetPagingModelWithItemNameWithXMSClientNameResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return PagingClientGetPagingModelWithItemNameWithXMSClientNameResponse{}, runtime.NewResponseError(resp)
			}
			return client.getPagingModelWithItemNameWithXMSClientNameHandleResponse(resp)
		},
	})
}

// getPagingModelWithItemNameWithXMSClientNameCreateRequest creates the GetPagingModelWithItemNameWithXMSClientName request.
func (client *PagingClient) getPagingModelWithItemNameWithXMSClientNameCreateRequest(ctx context.Context, options *PagingClientGetPagingModelWithItemNameWithXMSClientNameOptions) (*policy.Request, error) {
	urlPath := "/paging/itemNameWithXMSClientName"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getPagingModelWithItemNameWithXMSClientNameHandleResponse handles the GetPagingModelWithItemNameWithXMSClientName response.
func (client *PagingClient) getPagingModelWithItemNameWithXMSClientNameHandleResponse(resp *http.Response) (PagingClientGetPagingModelWithItemNameWithXMSClientNameResponse, error) {
	result := PagingClientGetPagingModelWithItemNameWithXMSClientNameResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductResultValueWithXMSClientName); err != nil {
		return PagingClientGetPagingModelWithItemNameWithXMSClientNameResponse{}, err
	}
	return result, nil
}

// NewGetSinglePagesPager - A paging operation that finishes on the first call without a nextlink
// Generated from API version 1.0.0
// options - PagingClientGetSinglePagesOptions contains the optional parameters for the PagingClient.GetSinglePages method.
func (client *PagingClient) NewGetSinglePagesPager(options *PagingClientGetSinglePagesOptions) *runtime.Pager[PagingClientGetSinglePagesResponse] {
	return runtime.NewPager(runtime.PagingHandler[PagingClientGetSinglePagesResponse]{
		More: func(page PagingClientGetSinglePagesResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PagingClientGetSinglePagesResponse) (PagingClientGetSinglePagesResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.getSinglePagesCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return PagingClientGetSinglePagesResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return PagingClientGetSinglePagesResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return PagingClientGetSinglePagesResponse{}, runtime.NewResponseError(resp)
			}
			return client.getSinglePagesHandleResponse(resp)
		},
	})
}

// getSinglePagesCreateRequest creates the GetSinglePages request.
func (client *PagingClient) getSinglePagesCreateRequest(ctx context.Context, options *PagingClientGetSinglePagesOptions) (*policy.Request, error) {
	urlPath := "/paging/single"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getSinglePagesHandleResponse handles the GetSinglePages response.
func (client *PagingClient) getSinglePagesHandleResponse(resp *http.Response) (PagingClientGetSinglePagesResponse, error) {
	result := PagingClientGetSinglePagesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductResult); err != nil {
		return PagingClientGetSinglePagesResponse{}, err
	}
	return result, nil
}

// NewGetSinglePagesFailurePager - A paging operation that receives a 400 on the first call
// Generated from API version 1.0.0
// options - PagingClientGetSinglePagesFailureOptions contains the optional parameters for the PagingClient.GetSinglePagesFailure
// method.
func (client *PagingClient) NewGetSinglePagesFailurePager(options *PagingClientGetSinglePagesFailureOptions) *runtime.Pager[PagingClientGetSinglePagesFailureResponse] {
	return runtime.NewPager(runtime.PagingHandler[PagingClientGetSinglePagesFailureResponse]{
		More: func(page PagingClientGetSinglePagesFailureResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PagingClientGetSinglePagesFailureResponse) (PagingClientGetSinglePagesFailureResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.getSinglePagesFailureCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return PagingClientGetSinglePagesFailureResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return PagingClientGetSinglePagesFailureResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return PagingClientGetSinglePagesFailureResponse{}, runtime.NewResponseError(resp)
			}
			return client.getSinglePagesFailureHandleResponse(resp)
		},
	})
}

// getSinglePagesFailureCreateRequest creates the GetSinglePagesFailure request.
func (client *PagingClient) getSinglePagesFailureCreateRequest(ctx context.Context, options *PagingClientGetSinglePagesFailureOptions) (*policy.Request, error) {
	urlPath := "/paging/single/failure"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getSinglePagesFailureHandleResponse handles the GetSinglePagesFailure response.
func (client *PagingClient) getSinglePagesFailureHandleResponse(resp *http.Response) (PagingClientGetSinglePagesFailureResponse, error) {
	result := PagingClientGetSinglePagesFailureResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductResult); err != nil {
		return PagingClientGetSinglePagesFailureResponse{}, err
	}
	return result, nil
}

// NewGetWithQueryParamsPager - A paging operation that includes a next operation. It has a different query parameter from
// it's next operation nextOperationWithQueryParams. Returns a ProductResult
// Generated from API version 1.0.0
// requiredQueryParameter - A required integer query parameter. Put in value '100' to pass test.
// options - PagingClientGetWithQueryParamsOptions contains the optional parameters for the PagingClient.GetWithQueryParams
// method.
func (client *PagingClient) NewGetWithQueryParamsPager(requiredQueryParameter int32, options *PagingClientGetWithQueryParamsOptions) *runtime.Pager[PagingClientGetWithQueryParamsResponse] {
	return runtime.NewPager(runtime.PagingHandler[PagingClientGetWithQueryParamsResponse]{
		More: func(page PagingClientGetWithQueryParamsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PagingClientGetWithQueryParamsResponse) (PagingClientGetWithQueryParamsResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.getWithQueryParamsCreateRequest(ctx, requiredQueryParameter, options)
			} else {
				req, err = client.nextOperationWithQueryParamsCreateRequest(ctx)
			}
			if err != nil {
				return PagingClientGetWithQueryParamsResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return PagingClientGetWithQueryParamsResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return PagingClientGetWithQueryParamsResponse{}, runtime.NewResponseError(resp)
			}
			return client.getWithQueryParamsHandleResponse(resp)
		},
	})
}

// getWithQueryParamsCreateRequest creates the GetWithQueryParams request.
func (client *PagingClient) getWithQueryParamsCreateRequest(ctx context.Context, requiredQueryParameter int32, options *PagingClientGetWithQueryParamsOptions) (*policy.Request, error) {
	urlPath := "/paging/multiple/getWithQueryParams"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("requiredQueryParameter", strconv.FormatInt(int64(requiredQueryParameter), 10))
	reqQP.Set("queryConstant", "true")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getWithQueryParamsHandleResponse handles the GetWithQueryParams response.
func (client *PagingClient) getWithQueryParamsHandleResponse(resp *http.Response) (PagingClientGetWithQueryParamsResponse, error) {
	result := PagingClientGetWithQueryParamsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductResult); err != nil {
		return PagingClientGetWithQueryParamsResponse{}, err
	}
	return result, nil
}

// nextFragmentCreateRequest creates the NextFragment request.
func (client *PagingClient) nextFragmentCreateRequest(ctx context.Context, apiVersion string, tenant string, nextLink string) (*policy.Request, error) {
	urlPath := "/paging/multiple/fragment/{tenant}/{nextLink}"
	if tenant == "" {
		return nil, errors.New("parameter tenant cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{tenant}", url.PathEscape(tenant))
	urlPath = strings.ReplaceAll(urlPath, "{nextLink}", nextLink)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api_version", apiVersion)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// nextFragmentHandleResponse handles the NextFragment response.
func (client *PagingClient) nextFragmentHandleResponse(resp *http.Response) (PagingClientNextFragmentResponse, error) {
	result := PagingClientNextFragmentResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ODataProductResult); err != nil {
		return PagingClientNextFragmentResponse{}, err
	}
	return result, nil
}

// nextFragmentWithGroupingCreateRequest creates the NextFragmentWithGrouping request.
func (client *PagingClient) nextFragmentWithGroupingCreateRequest(ctx context.Context, nextLink string, customParameterGroup CustomParameterGroup) (*policy.Request, error) {
	urlPath := "/paging/multiple/fragmentwithgrouping/{tenant}/{nextLink}"
	if customParameterGroup.Tenant == "" {
		return nil, errors.New("parameter customParameterGroup.Tenant cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{tenant}", url.PathEscape(customParameterGroup.Tenant))
	urlPath = strings.ReplaceAll(urlPath, "{nextLink}", nextLink)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api_version", customParameterGroup.APIVersion)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// nextFragmentWithGroupingHandleResponse handles the NextFragmentWithGrouping response.
func (client *PagingClient) nextFragmentWithGroupingHandleResponse(resp *http.Response) (PagingClientNextFragmentWithGroupingResponse, error) {
	result := PagingClientNextFragmentWithGroupingResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ODataProductResult); err != nil {
		return PagingClientNextFragmentWithGroupingResponse{}, err
	}
	return result, nil
}

// nextOperationWithQueryParamsCreateRequest creates the NextOperationWithQueryParams request.
func (client *PagingClient) nextOperationWithQueryParamsCreateRequest(ctx context.Context) (*policy.Request, error) {
	urlPath := "/paging/multiple/nextOperationWithQueryParams"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("queryConstant", "true")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// nextOperationWithQueryParamsHandleResponse handles the NextOperationWithQueryParams response.
func (client *PagingClient) nextOperationWithQueryParamsHandleResponse(resp *http.Response) (PagingClientNextOperationWithQueryParamsResponse, error) {
	result := PagingClientNextOperationWithQueryParamsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductResult); err != nil {
		return PagingClientNextOperationWithQueryParamsResponse{}, err
	}
	return result, nil
}
