//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package nonstringenumgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// IntClient contains the methods for the Int group.
// Don't use this type directly, use NewIntClient() instead.
type IntClient struct {
	pl runtime.Pipeline
}

// NewIntClient creates a new instance of IntClient with the specified values.
// pl - the pipeline used for sending requests and handling responses.
func NewIntClient(pl runtime.Pipeline) *IntClient {
	client := &IntClient{
		pl: pl,
	}
	return client
}

// Get - Get an int enum
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2.0-preview
// options - IntClientGetOptions contains the optional parameters for the IntClient.Get method.
func (client *IntClient) Get(ctx context.Context, options *IntClientGetOptions) (IntClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, options)
	if err != nil {
		return IntClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return IntClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return IntClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *IntClient) getCreateRequest(ctx context.Context, options *IntClientGetOptions) (*policy.Request, error) {
	urlPath := "/nonStringEnums/int/get"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *IntClient) getHandleResponse(resp *http.Response) (IntClientGetResponse, error) {
	result := IntClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return IntClientGetResponse{}, err
	}
	return result, nil
}

// Put - Put an int enum
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2.0-preview
// options - IntClientPutOptions contains the optional parameters for the IntClient.Put method.
func (client *IntClient) Put(ctx context.Context, options *IntClientPutOptions) (IntClientPutResponse, error) {
	req, err := client.putCreateRequest(ctx, options)
	if err != nil {
		return IntClientPutResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return IntClientPutResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return IntClientPutResponse{}, runtime.NewResponseError(resp)
	}
	return client.putHandleResponse(resp)
}

// putCreateRequest creates the Put request.
func (client *IntClient) putCreateRequest(ctx context.Context, options *IntClientPutOptions) (*policy.Request, error) {
	urlPath := "/nonStringEnums/int/put"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.Input != nil {
		return req, runtime.MarshalAsJSON(req, *options.Input)
	}
	return req, nil
}

// putHandleResponse handles the Put response.
func (client *IntClient) putHandleResponse(resp *http.Response) (IntClientPutResponse, error) {
	result := IntClientPutResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return IntClientPutResponse{}, err
	}
	return result, nil
}
