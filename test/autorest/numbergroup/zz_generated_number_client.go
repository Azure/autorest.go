// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package numbergroup

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// NumberClient contains the methods for the Number group.
// Don't use this type directly, use NewNumberClient() instead.
type NumberClient struct {
	con *Connection
}

// NewNumberClient creates a new instance of NumberClient with the specified values.
func NewNumberClient(con *Connection) *NumberClient {
	return &NumberClient{con: con}
}

// GetBigDecimal - Get big decimal value 2.5976931e+101
// If the operation fails it returns the *Error error type.
func (client *NumberClient) GetBigDecimal(ctx context.Context, options *NumberGetBigDecimalOptions) (NumberGetBigDecimalResponse, error) {
	req, err := client.getBigDecimalCreateRequest(ctx, options)
	if err != nil {
		return NumberGetBigDecimalResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return NumberGetBigDecimalResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return NumberGetBigDecimalResponse{}, client.getBigDecimalHandleError(resp)
	}
	return client.getBigDecimalHandleResponse(resp)
}

// getBigDecimalCreateRequest creates the GetBigDecimal request.
func (client *NumberClient) getBigDecimalCreateRequest(ctx context.Context, options *NumberGetBigDecimalOptions) (*azcore.Request, error) {
	urlPath := "/number/big/decimal/2.5976931e+101"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getBigDecimalHandleResponse handles the GetBigDecimal response.
func (client *NumberClient) getBigDecimalHandleResponse(resp *azcore.Response) (NumberGetBigDecimalResponse, error) {
	result := NumberGetBigDecimalResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.Value); err != nil {
		return NumberGetBigDecimalResponse{}, err
	}
	return result, nil
}

// getBigDecimalHandleError handles the GetBigDecimal error response.
func (client *NumberClient) getBigDecimalHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// GetBigDecimalNegativeDecimal - Get big decimal value -99999999.99
// If the operation fails it returns the *Error error type.
func (client *NumberClient) GetBigDecimalNegativeDecimal(ctx context.Context, options *NumberGetBigDecimalNegativeDecimalOptions) (NumberGetBigDecimalNegativeDecimalResponse, error) {
	req, err := client.getBigDecimalNegativeDecimalCreateRequest(ctx, options)
	if err != nil {
		return NumberGetBigDecimalNegativeDecimalResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return NumberGetBigDecimalNegativeDecimalResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return NumberGetBigDecimalNegativeDecimalResponse{}, client.getBigDecimalNegativeDecimalHandleError(resp)
	}
	return client.getBigDecimalNegativeDecimalHandleResponse(resp)
}

// getBigDecimalNegativeDecimalCreateRequest creates the GetBigDecimalNegativeDecimal request.
func (client *NumberClient) getBigDecimalNegativeDecimalCreateRequest(ctx context.Context, options *NumberGetBigDecimalNegativeDecimalOptions) (*azcore.Request, error) {
	urlPath := "/number/big/decimal/-99999999.99"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getBigDecimalNegativeDecimalHandleResponse handles the GetBigDecimalNegativeDecimal response.
func (client *NumberClient) getBigDecimalNegativeDecimalHandleResponse(resp *azcore.Response) (NumberGetBigDecimalNegativeDecimalResponse, error) {
	result := NumberGetBigDecimalNegativeDecimalResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.Value); err != nil {
		return NumberGetBigDecimalNegativeDecimalResponse{}, err
	}
	return result, nil
}

// getBigDecimalNegativeDecimalHandleError handles the GetBigDecimalNegativeDecimal error response.
func (client *NumberClient) getBigDecimalNegativeDecimalHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// GetBigDecimalPositiveDecimal - Get big decimal value 99999999.99
// If the operation fails it returns the *Error error type.
func (client *NumberClient) GetBigDecimalPositiveDecimal(ctx context.Context, options *NumberGetBigDecimalPositiveDecimalOptions) (NumberGetBigDecimalPositiveDecimalResponse, error) {
	req, err := client.getBigDecimalPositiveDecimalCreateRequest(ctx, options)
	if err != nil {
		return NumberGetBigDecimalPositiveDecimalResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return NumberGetBigDecimalPositiveDecimalResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return NumberGetBigDecimalPositiveDecimalResponse{}, client.getBigDecimalPositiveDecimalHandleError(resp)
	}
	return client.getBigDecimalPositiveDecimalHandleResponse(resp)
}

// getBigDecimalPositiveDecimalCreateRequest creates the GetBigDecimalPositiveDecimal request.
func (client *NumberClient) getBigDecimalPositiveDecimalCreateRequest(ctx context.Context, options *NumberGetBigDecimalPositiveDecimalOptions) (*azcore.Request, error) {
	urlPath := "/number/big/decimal/99999999.99"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getBigDecimalPositiveDecimalHandleResponse handles the GetBigDecimalPositiveDecimal response.
func (client *NumberClient) getBigDecimalPositiveDecimalHandleResponse(resp *azcore.Response) (NumberGetBigDecimalPositiveDecimalResponse, error) {
	result := NumberGetBigDecimalPositiveDecimalResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.Value); err != nil {
		return NumberGetBigDecimalPositiveDecimalResponse{}, err
	}
	return result, nil
}

// getBigDecimalPositiveDecimalHandleError handles the GetBigDecimalPositiveDecimal error response.
func (client *NumberClient) getBigDecimalPositiveDecimalHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// GetBigDouble - Get big double value 2.5976931e+101
// If the operation fails it returns the *Error error type.
func (client *NumberClient) GetBigDouble(ctx context.Context, options *NumberGetBigDoubleOptions) (NumberGetBigDoubleResponse, error) {
	req, err := client.getBigDoubleCreateRequest(ctx, options)
	if err != nil {
		return NumberGetBigDoubleResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return NumberGetBigDoubleResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return NumberGetBigDoubleResponse{}, client.getBigDoubleHandleError(resp)
	}
	return client.getBigDoubleHandleResponse(resp)
}

// getBigDoubleCreateRequest creates the GetBigDouble request.
func (client *NumberClient) getBigDoubleCreateRequest(ctx context.Context, options *NumberGetBigDoubleOptions) (*azcore.Request, error) {
	urlPath := "/number/big/double/2.5976931e+101"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getBigDoubleHandleResponse handles the GetBigDouble response.
func (client *NumberClient) getBigDoubleHandleResponse(resp *azcore.Response) (NumberGetBigDoubleResponse, error) {
	result := NumberGetBigDoubleResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.Value); err != nil {
		return NumberGetBigDoubleResponse{}, err
	}
	return result, nil
}

// getBigDoubleHandleError handles the GetBigDouble error response.
func (client *NumberClient) getBigDoubleHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// GetBigDoubleNegativeDecimal - Get big double value -99999999.99
// If the operation fails it returns the *Error error type.
func (client *NumberClient) GetBigDoubleNegativeDecimal(ctx context.Context, options *NumberGetBigDoubleNegativeDecimalOptions) (NumberGetBigDoubleNegativeDecimalResponse, error) {
	req, err := client.getBigDoubleNegativeDecimalCreateRequest(ctx, options)
	if err != nil {
		return NumberGetBigDoubleNegativeDecimalResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return NumberGetBigDoubleNegativeDecimalResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return NumberGetBigDoubleNegativeDecimalResponse{}, client.getBigDoubleNegativeDecimalHandleError(resp)
	}
	return client.getBigDoubleNegativeDecimalHandleResponse(resp)
}

// getBigDoubleNegativeDecimalCreateRequest creates the GetBigDoubleNegativeDecimal request.
func (client *NumberClient) getBigDoubleNegativeDecimalCreateRequest(ctx context.Context, options *NumberGetBigDoubleNegativeDecimalOptions) (*azcore.Request, error) {
	urlPath := "/number/big/double/-99999999.99"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getBigDoubleNegativeDecimalHandleResponse handles the GetBigDoubleNegativeDecimal response.
func (client *NumberClient) getBigDoubleNegativeDecimalHandleResponse(resp *azcore.Response) (NumberGetBigDoubleNegativeDecimalResponse, error) {
	result := NumberGetBigDoubleNegativeDecimalResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.Value); err != nil {
		return NumberGetBigDoubleNegativeDecimalResponse{}, err
	}
	return result, nil
}

// getBigDoubleNegativeDecimalHandleError handles the GetBigDoubleNegativeDecimal error response.
func (client *NumberClient) getBigDoubleNegativeDecimalHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// GetBigDoublePositiveDecimal - Get big double value 99999999.99
// If the operation fails it returns the *Error error type.
func (client *NumberClient) GetBigDoublePositiveDecimal(ctx context.Context, options *NumberGetBigDoublePositiveDecimalOptions) (NumberGetBigDoublePositiveDecimalResponse, error) {
	req, err := client.getBigDoublePositiveDecimalCreateRequest(ctx, options)
	if err != nil {
		return NumberGetBigDoublePositiveDecimalResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return NumberGetBigDoublePositiveDecimalResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return NumberGetBigDoublePositiveDecimalResponse{}, client.getBigDoublePositiveDecimalHandleError(resp)
	}
	return client.getBigDoublePositiveDecimalHandleResponse(resp)
}

// getBigDoublePositiveDecimalCreateRequest creates the GetBigDoublePositiveDecimal request.
func (client *NumberClient) getBigDoublePositiveDecimalCreateRequest(ctx context.Context, options *NumberGetBigDoublePositiveDecimalOptions) (*azcore.Request, error) {
	urlPath := "/number/big/double/99999999.99"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getBigDoublePositiveDecimalHandleResponse handles the GetBigDoublePositiveDecimal response.
func (client *NumberClient) getBigDoublePositiveDecimalHandleResponse(resp *azcore.Response) (NumberGetBigDoublePositiveDecimalResponse, error) {
	result := NumberGetBigDoublePositiveDecimalResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.Value); err != nil {
		return NumberGetBigDoublePositiveDecimalResponse{}, err
	}
	return result, nil
}

// getBigDoublePositiveDecimalHandleError handles the GetBigDoublePositiveDecimal error response.
func (client *NumberClient) getBigDoublePositiveDecimalHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// GetBigFloat - Get big float value 3.402823e+20
// If the operation fails it returns the *Error error type.
func (client *NumberClient) GetBigFloat(ctx context.Context, options *NumberGetBigFloatOptions) (NumberGetBigFloatResponse, error) {
	req, err := client.getBigFloatCreateRequest(ctx, options)
	if err != nil {
		return NumberGetBigFloatResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return NumberGetBigFloatResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return NumberGetBigFloatResponse{}, client.getBigFloatHandleError(resp)
	}
	return client.getBigFloatHandleResponse(resp)
}

// getBigFloatCreateRequest creates the GetBigFloat request.
func (client *NumberClient) getBigFloatCreateRequest(ctx context.Context, options *NumberGetBigFloatOptions) (*azcore.Request, error) {
	urlPath := "/number/big/float/3.402823e+20"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getBigFloatHandleResponse handles the GetBigFloat response.
func (client *NumberClient) getBigFloatHandleResponse(resp *azcore.Response) (NumberGetBigFloatResponse, error) {
	result := NumberGetBigFloatResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.Value); err != nil {
		return NumberGetBigFloatResponse{}, err
	}
	return result, nil
}

// getBigFloatHandleError handles the GetBigFloat error response.
func (client *NumberClient) getBigFloatHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// GetInvalidDecimal - Get invalid decimal Number value
// If the operation fails it returns the *Error error type.
func (client *NumberClient) GetInvalidDecimal(ctx context.Context, options *NumberGetInvalidDecimalOptions) (NumberGetInvalidDecimalResponse, error) {
	req, err := client.getInvalidDecimalCreateRequest(ctx, options)
	if err != nil {
		return NumberGetInvalidDecimalResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return NumberGetInvalidDecimalResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return NumberGetInvalidDecimalResponse{}, client.getInvalidDecimalHandleError(resp)
	}
	return client.getInvalidDecimalHandleResponse(resp)
}

// getInvalidDecimalCreateRequest creates the GetInvalidDecimal request.
func (client *NumberClient) getInvalidDecimalCreateRequest(ctx context.Context, options *NumberGetInvalidDecimalOptions) (*azcore.Request, error) {
	urlPath := "/number/invaliddecimal"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getInvalidDecimalHandleResponse handles the GetInvalidDecimal response.
func (client *NumberClient) getInvalidDecimalHandleResponse(resp *azcore.Response) (NumberGetInvalidDecimalResponse, error) {
	result := NumberGetInvalidDecimalResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.Value); err != nil {
		return NumberGetInvalidDecimalResponse{}, err
	}
	return result, nil
}

// getInvalidDecimalHandleError handles the GetInvalidDecimal error response.
func (client *NumberClient) getInvalidDecimalHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// GetInvalidDouble - Get invalid double Number value
// If the operation fails it returns the *Error error type.
func (client *NumberClient) GetInvalidDouble(ctx context.Context, options *NumberGetInvalidDoubleOptions) (NumberGetInvalidDoubleResponse, error) {
	req, err := client.getInvalidDoubleCreateRequest(ctx, options)
	if err != nil {
		return NumberGetInvalidDoubleResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return NumberGetInvalidDoubleResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return NumberGetInvalidDoubleResponse{}, client.getInvalidDoubleHandleError(resp)
	}
	return client.getInvalidDoubleHandleResponse(resp)
}

// getInvalidDoubleCreateRequest creates the GetInvalidDouble request.
func (client *NumberClient) getInvalidDoubleCreateRequest(ctx context.Context, options *NumberGetInvalidDoubleOptions) (*azcore.Request, error) {
	urlPath := "/number/invaliddouble"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getInvalidDoubleHandleResponse handles the GetInvalidDouble response.
func (client *NumberClient) getInvalidDoubleHandleResponse(resp *azcore.Response) (NumberGetInvalidDoubleResponse, error) {
	result := NumberGetInvalidDoubleResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.Value); err != nil {
		return NumberGetInvalidDoubleResponse{}, err
	}
	return result, nil
}

// getInvalidDoubleHandleError handles the GetInvalidDouble error response.
func (client *NumberClient) getInvalidDoubleHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// GetInvalidFloat - Get invalid float Number value
// If the operation fails it returns the *Error error type.
func (client *NumberClient) GetInvalidFloat(ctx context.Context, options *NumberGetInvalidFloatOptions) (NumberGetInvalidFloatResponse, error) {
	req, err := client.getInvalidFloatCreateRequest(ctx, options)
	if err != nil {
		return NumberGetInvalidFloatResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return NumberGetInvalidFloatResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return NumberGetInvalidFloatResponse{}, client.getInvalidFloatHandleError(resp)
	}
	return client.getInvalidFloatHandleResponse(resp)
}

// getInvalidFloatCreateRequest creates the GetInvalidFloat request.
func (client *NumberClient) getInvalidFloatCreateRequest(ctx context.Context, options *NumberGetInvalidFloatOptions) (*azcore.Request, error) {
	urlPath := "/number/invalidfloat"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getInvalidFloatHandleResponse handles the GetInvalidFloat response.
func (client *NumberClient) getInvalidFloatHandleResponse(resp *azcore.Response) (NumberGetInvalidFloatResponse, error) {
	result := NumberGetInvalidFloatResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.Value); err != nil {
		return NumberGetInvalidFloatResponse{}, err
	}
	return result, nil
}

// getInvalidFloatHandleError handles the GetInvalidFloat error response.
func (client *NumberClient) getInvalidFloatHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// GetNull - Get null Number value
// If the operation fails it returns the *Error error type.
func (client *NumberClient) GetNull(ctx context.Context, options *NumberGetNullOptions) (NumberGetNullResponse, error) {
	req, err := client.getNullCreateRequest(ctx, options)
	if err != nil {
		return NumberGetNullResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return NumberGetNullResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return NumberGetNullResponse{}, client.getNullHandleError(resp)
	}
	return client.getNullHandleResponse(resp)
}

// getNullCreateRequest creates the GetNull request.
func (client *NumberClient) getNullCreateRequest(ctx context.Context, options *NumberGetNullOptions) (*azcore.Request, error) {
	urlPath := "/number/null"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getNullHandleResponse handles the GetNull response.
func (client *NumberClient) getNullHandleResponse(resp *azcore.Response) (NumberGetNullResponse, error) {
	result := NumberGetNullResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.Value); err != nil {
		return NumberGetNullResponse{}, err
	}
	return result, nil
}

// getNullHandleError handles the GetNull error response.
func (client *NumberClient) getNullHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// GetSmallDecimal - Get small decimal value 2.5976931e-101
// If the operation fails it returns the *Error error type.
func (client *NumberClient) GetSmallDecimal(ctx context.Context, options *NumberGetSmallDecimalOptions) (NumberGetSmallDecimalResponse, error) {
	req, err := client.getSmallDecimalCreateRequest(ctx, options)
	if err != nil {
		return NumberGetSmallDecimalResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return NumberGetSmallDecimalResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return NumberGetSmallDecimalResponse{}, client.getSmallDecimalHandleError(resp)
	}
	return client.getSmallDecimalHandleResponse(resp)
}

// getSmallDecimalCreateRequest creates the GetSmallDecimal request.
func (client *NumberClient) getSmallDecimalCreateRequest(ctx context.Context, options *NumberGetSmallDecimalOptions) (*azcore.Request, error) {
	urlPath := "/number/small/decimal/2.5976931e-101"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getSmallDecimalHandleResponse handles the GetSmallDecimal response.
func (client *NumberClient) getSmallDecimalHandleResponse(resp *azcore.Response) (NumberGetSmallDecimalResponse, error) {
	result := NumberGetSmallDecimalResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.Value); err != nil {
		return NumberGetSmallDecimalResponse{}, err
	}
	return result, nil
}

// getSmallDecimalHandleError handles the GetSmallDecimal error response.
func (client *NumberClient) getSmallDecimalHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// GetSmallDouble - Get big double value 2.5976931e-101
// If the operation fails it returns the *Error error type.
func (client *NumberClient) GetSmallDouble(ctx context.Context, options *NumberGetSmallDoubleOptions) (NumberGetSmallDoubleResponse, error) {
	req, err := client.getSmallDoubleCreateRequest(ctx, options)
	if err != nil {
		return NumberGetSmallDoubleResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return NumberGetSmallDoubleResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return NumberGetSmallDoubleResponse{}, client.getSmallDoubleHandleError(resp)
	}
	return client.getSmallDoubleHandleResponse(resp)
}

// getSmallDoubleCreateRequest creates the GetSmallDouble request.
func (client *NumberClient) getSmallDoubleCreateRequest(ctx context.Context, options *NumberGetSmallDoubleOptions) (*azcore.Request, error) {
	urlPath := "/number/small/double/2.5976931e-101"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getSmallDoubleHandleResponse handles the GetSmallDouble response.
func (client *NumberClient) getSmallDoubleHandleResponse(resp *azcore.Response) (NumberGetSmallDoubleResponse, error) {
	result := NumberGetSmallDoubleResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.Value); err != nil {
		return NumberGetSmallDoubleResponse{}, err
	}
	return result, nil
}

// getSmallDoubleHandleError handles the GetSmallDouble error response.
func (client *NumberClient) getSmallDoubleHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// GetSmallFloat - Get big double value 3.402823e-20
// If the operation fails it returns the *Error error type.
func (client *NumberClient) GetSmallFloat(ctx context.Context, options *NumberGetSmallFloatOptions) (NumberGetSmallFloatResponse, error) {
	req, err := client.getSmallFloatCreateRequest(ctx, options)
	if err != nil {
		return NumberGetSmallFloatResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return NumberGetSmallFloatResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return NumberGetSmallFloatResponse{}, client.getSmallFloatHandleError(resp)
	}
	return client.getSmallFloatHandleResponse(resp)
}

// getSmallFloatCreateRequest creates the GetSmallFloat request.
func (client *NumberClient) getSmallFloatCreateRequest(ctx context.Context, options *NumberGetSmallFloatOptions) (*azcore.Request, error) {
	urlPath := "/number/small/float/3.402823e-20"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getSmallFloatHandleResponse handles the GetSmallFloat response.
func (client *NumberClient) getSmallFloatHandleResponse(resp *azcore.Response) (NumberGetSmallFloatResponse, error) {
	result := NumberGetSmallFloatResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.Value); err != nil {
		return NumberGetSmallFloatResponse{}, err
	}
	return result, nil
}

// getSmallFloatHandleError handles the GetSmallFloat error response.
func (client *NumberClient) getSmallFloatHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// PutBigDecimal - Put big decimal value 2.5976931e+101
// If the operation fails it returns the *Error error type.
func (client *NumberClient) PutBigDecimal(ctx context.Context, numberBody float64, options *NumberPutBigDecimalOptions) (NumberPutBigDecimalResponse, error) {
	req, err := client.putBigDecimalCreateRequest(ctx, numberBody, options)
	if err != nil {
		return NumberPutBigDecimalResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return NumberPutBigDecimalResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return NumberPutBigDecimalResponse{}, client.putBigDecimalHandleError(resp)
	}
	return NumberPutBigDecimalResponse{RawResponse: resp.Response}, nil
}

// putBigDecimalCreateRequest creates the PutBigDecimal request.
func (client *NumberClient) putBigDecimalCreateRequest(ctx context.Context, numberBody float64, options *NumberPutBigDecimalOptions) (*azcore.Request, error) {
	urlPath := "/number/big/decimal/2.5976931e+101"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(numberBody)
}

// putBigDecimalHandleError handles the PutBigDecimal error response.
func (client *NumberClient) putBigDecimalHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// PutBigDecimalNegativeDecimal - Put big decimal value -99999999.99
// If the operation fails it returns the *Error error type.
func (client *NumberClient) PutBigDecimalNegativeDecimal(ctx context.Context, options *NumberPutBigDecimalNegativeDecimalOptions) (NumberPutBigDecimalNegativeDecimalResponse, error) {
	req, err := client.putBigDecimalNegativeDecimalCreateRequest(ctx, options)
	if err != nil {
		return NumberPutBigDecimalNegativeDecimalResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return NumberPutBigDecimalNegativeDecimalResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return NumberPutBigDecimalNegativeDecimalResponse{}, client.putBigDecimalNegativeDecimalHandleError(resp)
	}
	return NumberPutBigDecimalNegativeDecimalResponse{RawResponse: resp.Response}, nil
}

// putBigDecimalNegativeDecimalCreateRequest creates the PutBigDecimalNegativeDecimal request.
func (client *NumberClient) putBigDecimalNegativeDecimalCreateRequest(ctx context.Context, options *NumberPutBigDecimalNegativeDecimalOptions) (*azcore.Request, error) {
	urlPath := "/number/big/decimal/-99999999.99"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(-99999999.99)
}

// putBigDecimalNegativeDecimalHandleError handles the PutBigDecimalNegativeDecimal error response.
func (client *NumberClient) putBigDecimalNegativeDecimalHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// PutBigDecimalPositiveDecimal - Put big decimal value 99999999.99
// If the operation fails it returns the *Error error type.
func (client *NumberClient) PutBigDecimalPositiveDecimal(ctx context.Context, options *NumberPutBigDecimalPositiveDecimalOptions) (NumberPutBigDecimalPositiveDecimalResponse, error) {
	req, err := client.putBigDecimalPositiveDecimalCreateRequest(ctx, options)
	if err != nil {
		return NumberPutBigDecimalPositiveDecimalResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return NumberPutBigDecimalPositiveDecimalResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return NumberPutBigDecimalPositiveDecimalResponse{}, client.putBigDecimalPositiveDecimalHandleError(resp)
	}
	return NumberPutBigDecimalPositiveDecimalResponse{RawResponse: resp.Response}, nil
}

// putBigDecimalPositiveDecimalCreateRequest creates the PutBigDecimalPositiveDecimal request.
func (client *NumberClient) putBigDecimalPositiveDecimalCreateRequest(ctx context.Context, options *NumberPutBigDecimalPositiveDecimalOptions) (*azcore.Request, error) {
	urlPath := "/number/big/decimal/99999999.99"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(99999999.99)
}

// putBigDecimalPositiveDecimalHandleError handles the PutBigDecimalPositiveDecimal error response.
func (client *NumberClient) putBigDecimalPositiveDecimalHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// PutBigDouble - Put big double value 2.5976931e+101
// If the operation fails it returns the *Error error type.
func (client *NumberClient) PutBigDouble(ctx context.Context, numberBody float64, options *NumberPutBigDoubleOptions) (NumberPutBigDoubleResponse, error) {
	req, err := client.putBigDoubleCreateRequest(ctx, numberBody, options)
	if err != nil {
		return NumberPutBigDoubleResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return NumberPutBigDoubleResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return NumberPutBigDoubleResponse{}, client.putBigDoubleHandleError(resp)
	}
	return NumberPutBigDoubleResponse{RawResponse: resp.Response}, nil
}

// putBigDoubleCreateRequest creates the PutBigDouble request.
func (client *NumberClient) putBigDoubleCreateRequest(ctx context.Context, numberBody float64, options *NumberPutBigDoubleOptions) (*azcore.Request, error) {
	urlPath := "/number/big/double/2.5976931e+101"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(numberBody)
}

// putBigDoubleHandleError handles the PutBigDouble error response.
func (client *NumberClient) putBigDoubleHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// PutBigDoubleNegativeDecimal - Put big double value -99999999.99
// If the operation fails it returns the *Error error type.
func (client *NumberClient) PutBigDoubleNegativeDecimal(ctx context.Context, options *NumberPutBigDoubleNegativeDecimalOptions) (NumberPutBigDoubleNegativeDecimalResponse, error) {
	req, err := client.putBigDoubleNegativeDecimalCreateRequest(ctx, options)
	if err != nil {
		return NumberPutBigDoubleNegativeDecimalResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return NumberPutBigDoubleNegativeDecimalResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return NumberPutBigDoubleNegativeDecimalResponse{}, client.putBigDoubleNegativeDecimalHandleError(resp)
	}
	return NumberPutBigDoubleNegativeDecimalResponse{RawResponse: resp.Response}, nil
}

// putBigDoubleNegativeDecimalCreateRequest creates the PutBigDoubleNegativeDecimal request.
func (client *NumberClient) putBigDoubleNegativeDecimalCreateRequest(ctx context.Context, options *NumberPutBigDoubleNegativeDecimalOptions) (*azcore.Request, error) {
	urlPath := "/number/big/double/-99999999.99"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(-99999999.99)
}

// putBigDoubleNegativeDecimalHandleError handles the PutBigDoubleNegativeDecimal error response.
func (client *NumberClient) putBigDoubleNegativeDecimalHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// PutBigDoublePositiveDecimal - Put big double value 99999999.99
// If the operation fails it returns the *Error error type.
func (client *NumberClient) PutBigDoublePositiveDecimal(ctx context.Context, options *NumberPutBigDoublePositiveDecimalOptions) (NumberPutBigDoublePositiveDecimalResponse, error) {
	req, err := client.putBigDoublePositiveDecimalCreateRequest(ctx, options)
	if err != nil {
		return NumberPutBigDoublePositiveDecimalResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return NumberPutBigDoublePositiveDecimalResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return NumberPutBigDoublePositiveDecimalResponse{}, client.putBigDoublePositiveDecimalHandleError(resp)
	}
	return NumberPutBigDoublePositiveDecimalResponse{RawResponse: resp.Response}, nil
}

// putBigDoublePositiveDecimalCreateRequest creates the PutBigDoublePositiveDecimal request.
func (client *NumberClient) putBigDoublePositiveDecimalCreateRequest(ctx context.Context, options *NumberPutBigDoublePositiveDecimalOptions) (*azcore.Request, error) {
	urlPath := "/number/big/double/99999999.99"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(99999999.99)
}

// putBigDoublePositiveDecimalHandleError handles the PutBigDoublePositiveDecimal error response.
func (client *NumberClient) putBigDoublePositiveDecimalHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// PutBigFloat - Put big float value 3.402823e+20
// If the operation fails it returns the *Error error type.
func (client *NumberClient) PutBigFloat(ctx context.Context, numberBody float32, options *NumberPutBigFloatOptions) (NumberPutBigFloatResponse, error) {
	req, err := client.putBigFloatCreateRequest(ctx, numberBody, options)
	if err != nil {
		return NumberPutBigFloatResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return NumberPutBigFloatResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return NumberPutBigFloatResponse{}, client.putBigFloatHandleError(resp)
	}
	return NumberPutBigFloatResponse{RawResponse: resp.Response}, nil
}

// putBigFloatCreateRequest creates the PutBigFloat request.
func (client *NumberClient) putBigFloatCreateRequest(ctx context.Context, numberBody float32, options *NumberPutBigFloatOptions) (*azcore.Request, error) {
	urlPath := "/number/big/float/3.402823e+20"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(numberBody)
}

// putBigFloatHandleError handles the PutBigFloat error response.
func (client *NumberClient) putBigFloatHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// PutSmallDecimal - Put small decimal value 2.5976931e-101
// If the operation fails it returns the *Error error type.
func (client *NumberClient) PutSmallDecimal(ctx context.Context, numberBody float64, options *NumberPutSmallDecimalOptions) (NumberPutSmallDecimalResponse, error) {
	req, err := client.putSmallDecimalCreateRequest(ctx, numberBody, options)
	if err != nil {
		return NumberPutSmallDecimalResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return NumberPutSmallDecimalResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return NumberPutSmallDecimalResponse{}, client.putSmallDecimalHandleError(resp)
	}
	return NumberPutSmallDecimalResponse{RawResponse: resp.Response}, nil
}

// putSmallDecimalCreateRequest creates the PutSmallDecimal request.
func (client *NumberClient) putSmallDecimalCreateRequest(ctx context.Context, numberBody float64, options *NumberPutSmallDecimalOptions) (*azcore.Request, error) {
	urlPath := "/number/small/decimal/2.5976931e-101"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(numberBody)
}

// putSmallDecimalHandleError handles the PutSmallDecimal error response.
func (client *NumberClient) putSmallDecimalHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// PutSmallDouble - Put small double value 2.5976931e-101
// If the operation fails it returns the *Error error type.
func (client *NumberClient) PutSmallDouble(ctx context.Context, numberBody float64, options *NumberPutSmallDoubleOptions) (NumberPutSmallDoubleResponse, error) {
	req, err := client.putSmallDoubleCreateRequest(ctx, numberBody, options)
	if err != nil {
		return NumberPutSmallDoubleResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return NumberPutSmallDoubleResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return NumberPutSmallDoubleResponse{}, client.putSmallDoubleHandleError(resp)
	}
	return NumberPutSmallDoubleResponse{RawResponse: resp.Response}, nil
}

// putSmallDoubleCreateRequest creates the PutSmallDouble request.
func (client *NumberClient) putSmallDoubleCreateRequest(ctx context.Context, numberBody float64, options *NumberPutSmallDoubleOptions) (*azcore.Request, error) {
	urlPath := "/number/small/double/2.5976931e-101"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(numberBody)
}

// putSmallDoubleHandleError handles the PutSmallDouble error response.
func (client *NumberClient) putSmallDoubleHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// PutSmallFloat - Put small float value 3.402823e-20
// If the operation fails it returns the *Error error type.
func (client *NumberClient) PutSmallFloat(ctx context.Context, numberBody float32, options *NumberPutSmallFloatOptions) (NumberPutSmallFloatResponse, error) {
	req, err := client.putSmallFloatCreateRequest(ctx, numberBody, options)
	if err != nil {
		return NumberPutSmallFloatResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return NumberPutSmallFloatResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return NumberPutSmallFloatResponse{}, client.putSmallFloatHandleError(resp)
	}
	return NumberPutSmallFloatResponse{RawResponse: resp.Response}, nil
}

// putSmallFloatCreateRequest creates the PutSmallFloat request.
func (client *NumberClient) putSmallFloatCreateRequest(ctx context.Context, numberBody float32, options *NumberPutSmallFloatOptions) (*azcore.Request, error) {
	urlPath := "/number/small/float/3.402823e-20"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(numberBody)
}

// putSmallFloatHandleError handles the PutSmallFloat error response.
func (client *NumberClient) putSmallFloatHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
