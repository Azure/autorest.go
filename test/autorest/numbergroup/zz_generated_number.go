// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package numbergroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// NumberOperations contains the methods for the Number group.
type NumberOperations interface {
	// GetBigDecimal - Get big decimal value 2.5976931e+101
	GetBigDecimal(ctx context.Context, options *NumberGetBigDecimalOptions) (*Float64Response, error)
	// GetBigDecimalNegativeDecimal - Get big decimal value -99999999.99
	GetBigDecimalNegativeDecimal(ctx context.Context, options *NumberGetBigDecimalNegativeDecimalOptions) (*Float64Response, error)
	// GetBigDecimalPositiveDecimal - Get big decimal value 99999999.99
	GetBigDecimalPositiveDecimal(ctx context.Context, options *NumberGetBigDecimalPositiveDecimalOptions) (*Float64Response, error)
	// GetBigDouble - Get big double value 2.5976931e+101
	GetBigDouble(ctx context.Context, options *NumberGetBigDoubleOptions) (*Float64Response, error)
	// GetBigDoubleNegativeDecimal - Get big double value -99999999.99
	GetBigDoubleNegativeDecimal(ctx context.Context, options *NumberGetBigDoubleNegativeDecimalOptions) (*Float64Response, error)
	// GetBigDoublePositiveDecimal - Get big double value 99999999.99
	GetBigDoublePositiveDecimal(ctx context.Context, options *NumberGetBigDoublePositiveDecimalOptions) (*Float64Response, error)
	// GetBigFloat - Get big float value 3.402823e+20
	GetBigFloat(ctx context.Context, options *NumberGetBigFloatOptions) (*Float32Response, error)
	// GetInvalidDecimal - Get invalid decimal Number value
	GetInvalidDecimal(ctx context.Context, options *NumberGetInvalidDecimalOptions) (*Float64Response, error)
	// GetInvalidDouble - Get invalid double Number value
	GetInvalidDouble(ctx context.Context, options *NumberGetInvalidDoubleOptions) (*Float64Response, error)
	// GetInvalidFloat - Get invalid float Number value
	GetInvalidFloat(ctx context.Context, options *NumberGetInvalidFloatOptions) (*Float32Response, error)
	// GetNull - Get null Number value
	GetNull(ctx context.Context, options *NumberGetNullOptions) (*Float32Response, error)
	// GetSmallDecimal - Get small decimal value 2.5976931e-101
	GetSmallDecimal(ctx context.Context, options *NumberGetSmallDecimalOptions) (*Float64Response, error)
	// GetSmallDouble - Get big double value 2.5976931e-101
	GetSmallDouble(ctx context.Context, options *NumberGetSmallDoubleOptions) (*Float64Response, error)
	// GetSmallFloat - Get big double value 3.402823e-20
	GetSmallFloat(ctx context.Context, options *NumberGetSmallFloatOptions) (*Float64Response, error)
	// PutBigDecimal - Put big decimal value 2.5976931e+101
	PutBigDecimal(ctx context.Context, numberBody float64, options *NumberPutBigDecimalOptions) (*http.Response, error)
	// PutBigDecimalNegativeDecimal - Put big decimal value -99999999.99
	PutBigDecimalNegativeDecimal(ctx context.Context, options *NumberPutBigDecimalNegativeDecimalOptions) (*http.Response, error)
	// PutBigDecimalPositiveDecimal - Put big decimal value 99999999.99
	PutBigDecimalPositiveDecimal(ctx context.Context, options *NumberPutBigDecimalPositiveDecimalOptions) (*http.Response, error)
	// PutBigDouble - Put big double value 2.5976931e+101
	PutBigDouble(ctx context.Context, numberBody float64, options *NumberPutBigDoubleOptions) (*http.Response, error)
	// PutBigDoubleNegativeDecimal - Put big double value -99999999.99
	PutBigDoubleNegativeDecimal(ctx context.Context, options *NumberPutBigDoubleNegativeDecimalOptions) (*http.Response, error)
	// PutBigDoublePositiveDecimal - Put big double value 99999999.99
	PutBigDoublePositiveDecimal(ctx context.Context, options *NumberPutBigDoublePositiveDecimalOptions) (*http.Response, error)
	// PutBigFloat - Put big float value 3.402823e+20
	PutBigFloat(ctx context.Context, numberBody float32, options *NumberPutBigFloatOptions) (*http.Response, error)
	// PutSmallDecimal - Put small decimal value 2.5976931e-101
	PutSmallDecimal(ctx context.Context, numberBody float64, options *NumberPutSmallDecimalOptions) (*http.Response, error)
	// PutSmallDouble - Put small double value 2.5976931e-101
	PutSmallDouble(ctx context.Context, numberBody float64, options *NumberPutSmallDoubleOptions) (*http.Response, error)
	// PutSmallFloat - Put small float value 3.402823e-20
	PutSmallFloat(ctx context.Context, numberBody float32, options *NumberPutSmallFloatOptions) (*http.Response, error)
}

// NumberClient implements the NumberOperations interface.
// Don't use this type directly, use NewNumberClient() instead.
type NumberClient struct {
	con *Connection
}

// NewNumberClient creates a new instance of NumberClient with the specified values.
func NewNumberClient(con *Connection) NumberOperations {
	return &NumberClient{con: con}
}

// Pipeline returns the pipeline associated with this client.
func (client *NumberClient) Pipeline() azcore.Pipeline {
	return client.con.Pipeline()
}

// GetBigDecimal - Get big decimal value 2.5976931e+101
func (client *NumberClient) GetBigDecimal(ctx context.Context, options *NumberGetBigDecimalOptions) (*Float64Response, error) {
	req, err := client.GetBigDecimalCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetBigDecimalHandleError(resp)
	}
	result, err := client.GetBigDecimalHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetBigDecimalCreateRequest creates the GetBigDecimal request.
func (client *NumberClient) GetBigDecimalCreateRequest(ctx context.Context, options *NumberGetBigDecimalOptions) (*azcore.Request, error) {
	urlPath := "/number/big/decimal/2.5976931e+101"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetBigDecimalHandleResponse handles the GetBigDecimal response.
func (client *NumberClient) GetBigDecimalHandleResponse(resp *azcore.Response) (*Float64Response, error) {
	result := Float64Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetBigDecimalHandleError handles the GetBigDecimal error response.
func (client *NumberClient) GetBigDecimalHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetBigDecimalNegativeDecimal - Get big decimal value -99999999.99
func (client *NumberClient) GetBigDecimalNegativeDecimal(ctx context.Context, options *NumberGetBigDecimalNegativeDecimalOptions) (*Float64Response, error) {
	req, err := client.GetBigDecimalNegativeDecimalCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetBigDecimalNegativeDecimalHandleError(resp)
	}
	result, err := client.GetBigDecimalNegativeDecimalHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetBigDecimalNegativeDecimalCreateRequest creates the GetBigDecimalNegativeDecimal request.
func (client *NumberClient) GetBigDecimalNegativeDecimalCreateRequest(ctx context.Context, options *NumberGetBigDecimalNegativeDecimalOptions) (*azcore.Request, error) {
	urlPath := "/number/big/decimal/-99999999.99"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetBigDecimalNegativeDecimalHandleResponse handles the GetBigDecimalNegativeDecimal response.
func (client *NumberClient) GetBigDecimalNegativeDecimalHandleResponse(resp *azcore.Response) (*Float64Response, error) {
	result := Float64Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetBigDecimalNegativeDecimalHandleError handles the GetBigDecimalNegativeDecimal error response.
func (client *NumberClient) GetBigDecimalNegativeDecimalHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetBigDecimalPositiveDecimal - Get big decimal value 99999999.99
func (client *NumberClient) GetBigDecimalPositiveDecimal(ctx context.Context, options *NumberGetBigDecimalPositiveDecimalOptions) (*Float64Response, error) {
	req, err := client.GetBigDecimalPositiveDecimalCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetBigDecimalPositiveDecimalHandleError(resp)
	}
	result, err := client.GetBigDecimalPositiveDecimalHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetBigDecimalPositiveDecimalCreateRequest creates the GetBigDecimalPositiveDecimal request.
func (client *NumberClient) GetBigDecimalPositiveDecimalCreateRequest(ctx context.Context, options *NumberGetBigDecimalPositiveDecimalOptions) (*azcore.Request, error) {
	urlPath := "/number/big/decimal/99999999.99"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetBigDecimalPositiveDecimalHandleResponse handles the GetBigDecimalPositiveDecimal response.
func (client *NumberClient) GetBigDecimalPositiveDecimalHandleResponse(resp *azcore.Response) (*Float64Response, error) {
	result := Float64Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetBigDecimalPositiveDecimalHandleError handles the GetBigDecimalPositiveDecimal error response.
func (client *NumberClient) GetBigDecimalPositiveDecimalHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetBigDouble - Get big double value 2.5976931e+101
func (client *NumberClient) GetBigDouble(ctx context.Context, options *NumberGetBigDoubleOptions) (*Float64Response, error) {
	req, err := client.GetBigDoubleCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetBigDoubleHandleError(resp)
	}
	result, err := client.GetBigDoubleHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetBigDoubleCreateRequest creates the GetBigDouble request.
func (client *NumberClient) GetBigDoubleCreateRequest(ctx context.Context, options *NumberGetBigDoubleOptions) (*azcore.Request, error) {
	urlPath := "/number/big/double/2.5976931e+101"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetBigDoubleHandleResponse handles the GetBigDouble response.
func (client *NumberClient) GetBigDoubleHandleResponse(resp *azcore.Response) (*Float64Response, error) {
	result := Float64Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetBigDoubleHandleError handles the GetBigDouble error response.
func (client *NumberClient) GetBigDoubleHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetBigDoubleNegativeDecimal - Get big double value -99999999.99
func (client *NumberClient) GetBigDoubleNegativeDecimal(ctx context.Context, options *NumberGetBigDoubleNegativeDecimalOptions) (*Float64Response, error) {
	req, err := client.GetBigDoubleNegativeDecimalCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetBigDoubleNegativeDecimalHandleError(resp)
	}
	result, err := client.GetBigDoubleNegativeDecimalHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetBigDoubleNegativeDecimalCreateRequest creates the GetBigDoubleNegativeDecimal request.
func (client *NumberClient) GetBigDoubleNegativeDecimalCreateRequest(ctx context.Context, options *NumberGetBigDoubleNegativeDecimalOptions) (*azcore.Request, error) {
	urlPath := "/number/big/double/-99999999.99"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetBigDoubleNegativeDecimalHandleResponse handles the GetBigDoubleNegativeDecimal response.
func (client *NumberClient) GetBigDoubleNegativeDecimalHandleResponse(resp *azcore.Response) (*Float64Response, error) {
	result := Float64Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetBigDoubleNegativeDecimalHandleError handles the GetBigDoubleNegativeDecimal error response.
func (client *NumberClient) GetBigDoubleNegativeDecimalHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetBigDoublePositiveDecimal - Get big double value 99999999.99
func (client *NumberClient) GetBigDoublePositiveDecimal(ctx context.Context, options *NumberGetBigDoublePositiveDecimalOptions) (*Float64Response, error) {
	req, err := client.GetBigDoublePositiveDecimalCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetBigDoublePositiveDecimalHandleError(resp)
	}
	result, err := client.GetBigDoublePositiveDecimalHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetBigDoublePositiveDecimalCreateRequest creates the GetBigDoublePositiveDecimal request.
func (client *NumberClient) GetBigDoublePositiveDecimalCreateRequest(ctx context.Context, options *NumberGetBigDoublePositiveDecimalOptions) (*azcore.Request, error) {
	urlPath := "/number/big/double/99999999.99"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetBigDoublePositiveDecimalHandleResponse handles the GetBigDoublePositiveDecimal response.
func (client *NumberClient) GetBigDoublePositiveDecimalHandleResponse(resp *azcore.Response) (*Float64Response, error) {
	result := Float64Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetBigDoublePositiveDecimalHandleError handles the GetBigDoublePositiveDecimal error response.
func (client *NumberClient) GetBigDoublePositiveDecimalHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetBigFloat - Get big float value 3.402823e+20
func (client *NumberClient) GetBigFloat(ctx context.Context, options *NumberGetBigFloatOptions) (*Float32Response, error) {
	req, err := client.GetBigFloatCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetBigFloatHandleError(resp)
	}
	result, err := client.GetBigFloatHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetBigFloatCreateRequest creates the GetBigFloat request.
func (client *NumberClient) GetBigFloatCreateRequest(ctx context.Context, options *NumberGetBigFloatOptions) (*azcore.Request, error) {
	urlPath := "/number/big/float/3.402823e+20"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetBigFloatHandleResponse handles the GetBigFloat response.
func (client *NumberClient) GetBigFloatHandleResponse(resp *azcore.Response) (*Float32Response, error) {
	result := Float32Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetBigFloatHandleError handles the GetBigFloat error response.
func (client *NumberClient) GetBigFloatHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetInvalidDecimal - Get invalid decimal Number value
func (client *NumberClient) GetInvalidDecimal(ctx context.Context, options *NumberGetInvalidDecimalOptions) (*Float64Response, error) {
	req, err := client.GetInvalidDecimalCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetInvalidDecimalHandleError(resp)
	}
	result, err := client.GetInvalidDecimalHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetInvalidDecimalCreateRequest creates the GetInvalidDecimal request.
func (client *NumberClient) GetInvalidDecimalCreateRequest(ctx context.Context, options *NumberGetInvalidDecimalOptions) (*azcore.Request, error) {
	urlPath := "/number/invaliddecimal"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetInvalidDecimalHandleResponse handles the GetInvalidDecimal response.
func (client *NumberClient) GetInvalidDecimalHandleResponse(resp *azcore.Response) (*Float64Response, error) {
	result := Float64Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetInvalidDecimalHandleError handles the GetInvalidDecimal error response.
func (client *NumberClient) GetInvalidDecimalHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetInvalidDouble - Get invalid double Number value
func (client *NumberClient) GetInvalidDouble(ctx context.Context, options *NumberGetInvalidDoubleOptions) (*Float64Response, error) {
	req, err := client.GetInvalidDoubleCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetInvalidDoubleHandleError(resp)
	}
	result, err := client.GetInvalidDoubleHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetInvalidDoubleCreateRequest creates the GetInvalidDouble request.
func (client *NumberClient) GetInvalidDoubleCreateRequest(ctx context.Context, options *NumberGetInvalidDoubleOptions) (*azcore.Request, error) {
	urlPath := "/number/invaliddouble"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetInvalidDoubleHandleResponse handles the GetInvalidDouble response.
func (client *NumberClient) GetInvalidDoubleHandleResponse(resp *azcore.Response) (*Float64Response, error) {
	result := Float64Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetInvalidDoubleHandleError handles the GetInvalidDouble error response.
func (client *NumberClient) GetInvalidDoubleHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetInvalidFloat - Get invalid float Number value
func (client *NumberClient) GetInvalidFloat(ctx context.Context, options *NumberGetInvalidFloatOptions) (*Float32Response, error) {
	req, err := client.GetInvalidFloatCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetInvalidFloatHandleError(resp)
	}
	result, err := client.GetInvalidFloatHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetInvalidFloatCreateRequest creates the GetInvalidFloat request.
func (client *NumberClient) GetInvalidFloatCreateRequest(ctx context.Context, options *NumberGetInvalidFloatOptions) (*azcore.Request, error) {
	urlPath := "/number/invalidfloat"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetInvalidFloatHandleResponse handles the GetInvalidFloat response.
func (client *NumberClient) GetInvalidFloatHandleResponse(resp *azcore.Response) (*Float32Response, error) {
	result := Float32Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetInvalidFloatHandleError handles the GetInvalidFloat error response.
func (client *NumberClient) GetInvalidFloatHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetNull - Get null Number value
func (client *NumberClient) GetNull(ctx context.Context, options *NumberGetNullOptions) (*Float32Response, error) {
	req, err := client.GetNullCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetNullHandleError(resp)
	}
	result, err := client.GetNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetNullCreateRequest creates the GetNull request.
func (client *NumberClient) GetNullCreateRequest(ctx context.Context, options *NumberGetNullOptions) (*azcore.Request, error) {
	urlPath := "/number/null"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetNullHandleResponse handles the GetNull response.
func (client *NumberClient) GetNullHandleResponse(resp *azcore.Response) (*Float32Response, error) {
	result := Float32Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetNullHandleError handles the GetNull error response.
func (client *NumberClient) GetNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetSmallDecimal - Get small decimal value 2.5976931e-101
func (client *NumberClient) GetSmallDecimal(ctx context.Context, options *NumberGetSmallDecimalOptions) (*Float64Response, error) {
	req, err := client.GetSmallDecimalCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetSmallDecimalHandleError(resp)
	}
	result, err := client.GetSmallDecimalHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetSmallDecimalCreateRequest creates the GetSmallDecimal request.
func (client *NumberClient) GetSmallDecimalCreateRequest(ctx context.Context, options *NumberGetSmallDecimalOptions) (*azcore.Request, error) {
	urlPath := "/number/small/decimal/2.5976931e-101"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetSmallDecimalHandleResponse handles the GetSmallDecimal response.
func (client *NumberClient) GetSmallDecimalHandleResponse(resp *azcore.Response) (*Float64Response, error) {
	result := Float64Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetSmallDecimalHandleError handles the GetSmallDecimal error response.
func (client *NumberClient) GetSmallDecimalHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetSmallDouble - Get big double value 2.5976931e-101
func (client *NumberClient) GetSmallDouble(ctx context.Context, options *NumberGetSmallDoubleOptions) (*Float64Response, error) {
	req, err := client.GetSmallDoubleCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetSmallDoubleHandleError(resp)
	}
	result, err := client.GetSmallDoubleHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetSmallDoubleCreateRequest creates the GetSmallDouble request.
func (client *NumberClient) GetSmallDoubleCreateRequest(ctx context.Context, options *NumberGetSmallDoubleOptions) (*azcore.Request, error) {
	urlPath := "/number/small/double/2.5976931e-101"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetSmallDoubleHandleResponse handles the GetSmallDouble response.
func (client *NumberClient) GetSmallDoubleHandleResponse(resp *azcore.Response) (*Float64Response, error) {
	result := Float64Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetSmallDoubleHandleError handles the GetSmallDouble error response.
func (client *NumberClient) GetSmallDoubleHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetSmallFloat - Get big double value 3.402823e-20
func (client *NumberClient) GetSmallFloat(ctx context.Context, options *NumberGetSmallFloatOptions) (*Float64Response, error) {
	req, err := client.GetSmallFloatCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetSmallFloatHandleError(resp)
	}
	result, err := client.GetSmallFloatHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetSmallFloatCreateRequest creates the GetSmallFloat request.
func (client *NumberClient) GetSmallFloatCreateRequest(ctx context.Context, options *NumberGetSmallFloatOptions) (*azcore.Request, error) {
	urlPath := "/number/small/float/3.402823e-20"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetSmallFloatHandleResponse handles the GetSmallFloat response.
func (client *NumberClient) GetSmallFloatHandleResponse(resp *azcore.Response) (*Float64Response, error) {
	result := Float64Response{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// GetSmallFloatHandleError handles the GetSmallFloat error response.
func (client *NumberClient) GetSmallFloatHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutBigDecimal - Put big decimal value 2.5976931e+101
func (client *NumberClient) PutBigDecimal(ctx context.Context, numberBody float64, options *NumberPutBigDecimalOptions) (*http.Response, error) {
	req, err := client.PutBigDecimalCreateRequest(ctx, numberBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutBigDecimalHandleError(resp)
	}
	return resp.Response, nil
}

// PutBigDecimalCreateRequest creates the PutBigDecimal request.
func (client *NumberClient) PutBigDecimalCreateRequest(ctx context.Context, numberBody float64, options *NumberPutBigDecimalOptions) (*azcore.Request, error) {
	urlPath := "/number/big/decimal/2.5976931e+101"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(numberBody)
}

// PutBigDecimalHandleError handles the PutBigDecimal error response.
func (client *NumberClient) PutBigDecimalHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutBigDecimalNegativeDecimal - Put big decimal value -99999999.99
func (client *NumberClient) PutBigDecimalNegativeDecimal(ctx context.Context, options *NumberPutBigDecimalNegativeDecimalOptions) (*http.Response, error) {
	req, err := client.PutBigDecimalNegativeDecimalCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutBigDecimalNegativeDecimalHandleError(resp)
	}
	return resp.Response, nil
}

// PutBigDecimalNegativeDecimalCreateRequest creates the PutBigDecimalNegativeDecimal request.
func (client *NumberClient) PutBigDecimalNegativeDecimalCreateRequest(ctx context.Context, options *NumberPutBigDecimalNegativeDecimalOptions) (*azcore.Request, error) {
	urlPath := "/number/big/decimal/-99999999.99"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(-99999999.99)
}

// PutBigDecimalNegativeDecimalHandleError handles the PutBigDecimalNegativeDecimal error response.
func (client *NumberClient) PutBigDecimalNegativeDecimalHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutBigDecimalPositiveDecimal - Put big decimal value 99999999.99
func (client *NumberClient) PutBigDecimalPositiveDecimal(ctx context.Context, options *NumberPutBigDecimalPositiveDecimalOptions) (*http.Response, error) {
	req, err := client.PutBigDecimalPositiveDecimalCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutBigDecimalPositiveDecimalHandleError(resp)
	}
	return resp.Response, nil
}

// PutBigDecimalPositiveDecimalCreateRequest creates the PutBigDecimalPositiveDecimal request.
func (client *NumberClient) PutBigDecimalPositiveDecimalCreateRequest(ctx context.Context, options *NumberPutBigDecimalPositiveDecimalOptions) (*azcore.Request, error) {
	urlPath := "/number/big/decimal/99999999.99"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(99999999.99)
}

// PutBigDecimalPositiveDecimalHandleError handles the PutBigDecimalPositiveDecimal error response.
func (client *NumberClient) PutBigDecimalPositiveDecimalHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutBigDouble - Put big double value 2.5976931e+101
func (client *NumberClient) PutBigDouble(ctx context.Context, numberBody float64, options *NumberPutBigDoubleOptions) (*http.Response, error) {
	req, err := client.PutBigDoubleCreateRequest(ctx, numberBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutBigDoubleHandleError(resp)
	}
	return resp.Response, nil
}

// PutBigDoubleCreateRequest creates the PutBigDouble request.
func (client *NumberClient) PutBigDoubleCreateRequest(ctx context.Context, numberBody float64, options *NumberPutBigDoubleOptions) (*azcore.Request, error) {
	urlPath := "/number/big/double/2.5976931e+101"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(numberBody)
}

// PutBigDoubleHandleError handles the PutBigDouble error response.
func (client *NumberClient) PutBigDoubleHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutBigDoubleNegativeDecimal - Put big double value -99999999.99
func (client *NumberClient) PutBigDoubleNegativeDecimal(ctx context.Context, options *NumberPutBigDoubleNegativeDecimalOptions) (*http.Response, error) {
	req, err := client.PutBigDoubleNegativeDecimalCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutBigDoubleNegativeDecimalHandleError(resp)
	}
	return resp.Response, nil
}

// PutBigDoubleNegativeDecimalCreateRequest creates the PutBigDoubleNegativeDecimal request.
func (client *NumberClient) PutBigDoubleNegativeDecimalCreateRequest(ctx context.Context, options *NumberPutBigDoubleNegativeDecimalOptions) (*azcore.Request, error) {
	urlPath := "/number/big/double/-99999999.99"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(-99999999.99)
}

// PutBigDoubleNegativeDecimalHandleError handles the PutBigDoubleNegativeDecimal error response.
func (client *NumberClient) PutBigDoubleNegativeDecimalHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutBigDoublePositiveDecimal - Put big double value 99999999.99
func (client *NumberClient) PutBigDoublePositiveDecimal(ctx context.Context, options *NumberPutBigDoublePositiveDecimalOptions) (*http.Response, error) {
	req, err := client.PutBigDoublePositiveDecimalCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutBigDoublePositiveDecimalHandleError(resp)
	}
	return resp.Response, nil
}

// PutBigDoublePositiveDecimalCreateRequest creates the PutBigDoublePositiveDecimal request.
func (client *NumberClient) PutBigDoublePositiveDecimalCreateRequest(ctx context.Context, options *NumberPutBigDoublePositiveDecimalOptions) (*azcore.Request, error) {
	urlPath := "/number/big/double/99999999.99"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(99999999.99)
}

// PutBigDoublePositiveDecimalHandleError handles the PutBigDoublePositiveDecimal error response.
func (client *NumberClient) PutBigDoublePositiveDecimalHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutBigFloat - Put big float value 3.402823e+20
func (client *NumberClient) PutBigFloat(ctx context.Context, numberBody float32, options *NumberPutBigFloatOptions) (*http.Response, error) {
	req, err := client.PutBigFloatCreateRequest(ctx, numberBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutBigFloatHandleError(resp)
	}
	return resp.Response, nil
}

// PutBigFloatCreateRequest creates the PutBigFloat request.
func (client *NumberClient) PutBigFloatCreateRequest(ctx context.Context, numberBody float32, options *NumberPutBigFloatOptions) (*azcore.Request, error) {
	urlPath := "/number/big/float/3.402823e+20"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(numberBody)
}

// PutBigFloatHandleError handles the PutBigFloat error response.
func (client *NumberClient) PutBigFloatHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutSmallDecimal - Put small decimal value 2.5976931e-101
func (client *NumberClient) PutSmallDecimal(ctx context.Context, numberBody float64, options *NumberPutSmallDecimalOptions) (*http.Response, error) {
	req, err := client.PutSmallDecimalCreateRequest(ctx, numberBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutSmallDecimalHandleError(resp)
	}
	return resp.Response, nil
}

// PutSmallDecimalCreateRequest creates the PutSmallDecimal request.
func (client *NumberClient) PutSmallDecimalCreateRequest(ctx context.Context, numberBody float64, options *NumberPutSmallDecimalOptions) (*azcore.Request, error) {
	urlPath := "/number/small/decimal/2.5976931e-101"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(numberBody)
}

// PutSmallDecimalHandleError handles the PutSmallDecimal error response.
func (client *NumberClient) PutSmallDecimalHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutSmallDouble - Put small double value 2.5976931e-101
func (client *NumberClient) PutSmallDouble(ctx context.Context, numberBody float64, options *NumberPutSmallDoubleOptions) (*http.Response, error) {
	req, err := client.PutSmallDoubleCreateRequest(ctx, numberBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutSmallDoubleHandleError(resp)
	}
	return resp.Response, nil
}

// PutSmallDoubleCreateRequest creates the PutSmallDouble request.
func (client *NumberClient) PutSmallDoubleCreateRequest(ctx context.Context, numberBody float64, options *NumberPutSmallDoubleOptions) (*azcore.Request, error) {
	urlPath := "/number/small/double/2.5976931e-101"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(numberBody)
}

// PutSmallDoubleHandleError handles the PutSmallDouble error response.
func (client *NumberClient) PutSmallDoubleHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutSmallFloat - Put small float value 3.402823e-20
func (client *NumberClient) PutSmallFloat(ctx context.Context, numberBody float32, options *NumberPutSmallFloatOptions) (*http.Response, error) {
	req, err := client.PutSmallFloatCreateRequest(ctx, numberBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutSmallFloatHandleError(resp)
	}
	return resp.Response, nil
}

// PutSmallFloatCreateRequest creates the PutSmallFloat request.
func (client *NumberClient) PutSmallFloatCreateRequest(ctx context.Context, numberBody float32, options *NumberPutSmallFloatOptions) (*azcore.Request, error) {
	urlPath := "/number/small/float/3.402823e-20"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(numberBody)
}

// PutSmallFloatHandleError handles the PutSmallFloat error response.
func (client *NumberClient) PutSmallFloatHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}
