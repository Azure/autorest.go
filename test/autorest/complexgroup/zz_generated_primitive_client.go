//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package complexgroup

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// PrimitiveClient contains the methods for the Primitive group.
// Don't use this type directly, use NewPrimitiveClient() instead.
type PrimitiveClient struct {
	pl runtime.Pipeline
}

// NewPrimitiveClient creates a new instance of PrimitiveClient with the specified values.
// options - pass nil to accept the default values.
func NewPrimitiveClient(options *azcore.ClientOptions) *PrimitiveClient {
	cp := azcore.ClientOptions{}
	if options != nil {
		cp = *options
	}
	client := &PrimitiveClient{
		pl: runtime.NewPipeline(module, version, nil, nil, &cp),
	}
	return client
}

// GetBool - Get complex types with bool properties
// If the operation fails it returns the *Error error type.
// options - PrimitiveClientGetBoolOptions contains the optional parameters for the PrimitiveClient.GetBool method.
func (client *PrimitiveClient) GetBool(ctx context.Context, options *PrimitiveClientGetBoolOptions) (PrimitiveClientGetBoolResponse, error) {
	req, err := client.getBoolCreateRequest(ctx, options)
	if err != nil {
		return PrimitiveClientGetBoolResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PrimitiveClientGetBoolResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PrimitiveClientGetBoolResponse{}, client.getBoolHandleError(resp)
	}
	return client.getBoolHandleResponse(resp)
}

// getBoolCreateRequest creates the GetBool request.
func (client *PrimitiveClient) getBoolCreateRequest(ctx context.Context, options *PrimitiveClientGetBoolOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/bool"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getBoolHandleResponse handles the GetBool response.
func (client *PrimitiveClient) getBoolHandleResponse(resp *http.Response) (PrimitiveClientGetBoolResponse, error) {
	result := PrimitiveClientGetBoolResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.BooleanWrapper); err != nil {
		return PrimitiveClientGetBoolResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getBoolHandleError handles the GetBool error response.
func (client *PrimitiveClient) getBoolHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetByte - Get complex types with byte properties
// If the operation fails it returns the *Error error type.
// options - PrimitiveClientGetByteOptions contains the optional parameters for the PrimitiveClient.GetByte method.
func (client *PrimitiveClient) GetByte(ctx context.Context, options *PrimitiveClientGetByteOptions) (PrimitiveClientGetByteResponse, error) {
	req, err := client.getByteCreateRequest(ctx, options)
	if err != nil {
		return PrimitiveClientGetByteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PrimitiveClientGetByteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PrimitiveClientGetByteResponse{}, client.getByteHandleError(resp)
	}
	return client.getByteHandleResponse(resp)
}

// getByteCreateRequest creates the GetByte request.
func (client *PrimitiveClient) getByteCreateRequest(ctx context.Context, options *PrimitiveClientGetByteOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/byte"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getByteHandleResponse handles the GetByte response.
func (client *PrimitiveClient) getByteHandleResponse(resp *http.Response) (PrimitiveClientGetByteResponse, error) {
	result := PrimitiveClientGetByteResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ByteWrapper); err != nil {
		return PrimitiveClientGetByteResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getByteHandleError handles the GetByte error response.
func (client *PrimitiveClient) getByteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDate - Get complex types with date properties
// If the operation fails it returns the *Error error type.
// options - PrimitiveClientGetDateOptions contains the optional parameters for the PrimitiveClient.GetDate method.
func (client *PrimitiveClient) GetDate(ctx context.Context, options *PrimitiveClientGetDateOptions) (PrimitiveClientGetDateResponse, error) {
	req, err := client.getDateCreateRequest(ctx, options)
	if err != nil {
		return PrimitiveClientGetDateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PrimitiveClientGetDateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PrimitiveClientGetDateResponse{}, client.getDateHandleError(resp)
	}
	return client.getDateHandleResponse(resp)
}

// getDateCreateRequest creates the GetDate request.
func (client *PrimitiveClient) getDateCreateRequest(ctx context.Context, options *PrimitiveClientGetDateOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/date"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDateHandleResponse handles the GetDate response.
func (client *PrimitiveClient) getDateHandleResponse(resp *http.Response) (PrimitiveClientGetDateResponse, error) {
	result := PrimitiveClientGetDateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DateWrapper); err != nil {
		return PrimitiveClientGetDateResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getDateHandleError handles the GetDate error response.
func (client *PrimitiveClient) getDateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDateTime - Get complex types with datetime properties
// If the operation fails it returns the *Error error type.
// options - PrimitiveClientGetDateTimeOptions contains the optional parameters for the PrimitiveClient.GetDateTime method.
func (client *PrimitiveClient) GetDateTime(ctx context.Context, options *PrimitiveClientGetDateTimeOptions) (PrimitiveClientGetDateTimeResponse, error) {
	req, err := client.getDateTimeCreateRequest(ctx, options)
	if err != nil {
		return PrimitiveClientGetDateTimeResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PrimitiveClientGetDateTimeResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PrimitiveClientGetDateTimeResponse{}, client.getDateTimeHandleError(resp)
	}
	return client.getDateTimeHandleResponse(resp)
}

// getDateTimeCreateRequest creates the GetDateTime request.
func (client *PrimitiveClient) getDateTimeCreateRequest(ctx context.Context, options *PrimitiveClientGetDateTimeOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/datetime"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDateTimeHandleResponse handles the GetDateTime response.
func (client *PrimitiveClient) getDateTimeHandleResponse(resp *http.Response) (PrimitiveClientGetDateTimeResponse, error) {
	result := PrimitiveClientGetDateTimeResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DatetimeWrapper); err != nil {
		return PrimitiveClientGetDateTimeResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getDateTimeHandleError handles the GetDateTime error response.
func (client *PrimitiveClient) getDateTimeHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDateTimeRFC1123 - Get complex types with datetimeRfc1123 properties
// If the operation fails it returns the *Error error type.
// options - PrimitiveClientGetDateTimeRFC1123Options contains the optional parameters for the PrimitiveClient.GetDateTimeRFC1123
// method.
func (client *PrimitiveClient) GetDateTimeRFC1123(ctx context.Context, options *PrimitiveClientGetDateTimeRFC1123Options) (PrimitiveClientGetDateTimeRFC1123Response, error) {
	req, err := client.getDateTimeRFC1123CreateRequest(ctx, options)
	if err != nil {
		return PrimitiveClientGetDateTimeRFC1123Response{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PrimitiveClientGetDateTimeRFC1123Response{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PrimitiveClientGetDateTimeRFC1123Response{}, client.getDateTimeRFC1123HandleError(resp)
	}
	return client.getDateTimeRFC1123HandleResponse(resp)
}

// getDateTimeRFC1123CreateRequest creates the GetDateTimeRFC1123 request.
func (client *PrimitiveClient) getDateTimeRFC1123CreateRequest(ctx context.Context, options *PrimitiveClientGetDateTimeRFC1123Options) (*policy.Request, error) {
	urlPath := "/complex/primitive/datetimerfc1123"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDateTimeRFC1123HandleResponse handles the GetDateTimeRFC1123 response.
func (client *PrimitiveClient) getDateTimeRFC1123HandleResponse(resp *http.Response) (PrimitiveClientGetDateTimeRFC1123Response, error) {
	result := PrimitiveClientGetDateTimeRFC1123Response{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Datetimerfc1123Wrapper); err != nil {
		return PrimitiveClientGetDateTimeRFC1123Response{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getDateTimeRFC1123HandleError handles the GetDateTimeRFC1123 error response.
func (client *PrimitiveClient) getDateTimeRFC1123HandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDouble - Get complex types with double properties
// If the operation fails it returns the *Error error type.
// options - PrimitiveClientGetDoubleOptions contains the optional parameters for the PrimitiveClient.GetDouble method.
func (client *PrimitiveClient) GetDouble(ctx context.Context, options *PrimitiveClientGetDoubleOptions) (PrimitiveClientGetDoubleResponse, error) {
	req, err := client.getDoubleCreateRequest(ctx, options)
	if err != nil {
		return PrimitiveClientGetDoubleResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PrimitiveClientGetDoubleResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PrimitiveClientGetDoubleResponse{}, client.getDoubleHandleError(resp)
	}
	return client.getDoubleHandleResponse(resp)
}

// getDoubleCreateRequest creates the GetDouble request.
func (client *PrimitiveClient) getDoubleCreateRequest(ctx context.Context, options *PrimitiveClientGetDoubleOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/double"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDoubleHandleResponse handles the GetDouble response.
func (client *PrimitiveClient) getDoubleHandleResponse(resp *http.Response) (PrimitiveClientGetDoubleResponse, error) {
	result := PrimitiveClientGetDoubleResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DoubleWrapper); err != nil {
		return PrimitiveClientGetDoubleResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getDoubleHandleError handles the GetDouble error response.
func (client *PrimitiveClient) getDoubleHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDuration - Get complex types with duration properties
// If the operation fails it returns the *Error error type.
// options - PrimitiveClientGetDurationOptions contains the optional parameters for the PrimitiveClient.GetDuration method.
func (client *PrimitiveClient) GetDuration(ctx context.Context, options *PrimitiveClientGetDurationOptions) (PrimitiveClientGetDurationResponse, error) {
	req, err := client.getDurationCreateRequest(ctx, options)
	if err != nil {
		return PrimitiveClientGetDurationResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PrimitiveClientGetDurationResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PrimitiveClientGetDurationResponse{}, client.getDurationHandleError(resp)
	}
	return client.getDurationHandleResponse(resp)
}

// getDurationCreateRequest creates the GetDuration request.
func (client *PrimitiveClient) getDurationCreateRequest(ctx context.Context, options *PrimitiveClientGetDurationOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/duration"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDurationHandleResponse handles the GetDuration response.
func (client *PrimitiveClient) getDurationHandleResponse(resp *http.Response) (PrimitiveClientGetDurationResponse, error) {
	result := PrimitiveClientGetDurationResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DurationWrapper); err != nil {
		return PrimitiveClientGetDurationResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getDurationHandleError handles the GetDuration error response.
func (client *PrimitiveClient) getDurationHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetFloat - Get complex types with float properties
// If the operation fails it returns the *Error error type.
// options - PrimitiveClientGetFloatOptions contains the optional parameters for the PrimitiveClient.GetFloat method.
func (client *PrimitiveClient) GetFloat(ctx context.Context, options *PrimitiveClientGetFloatOptions) (PrimitiveClientGetFloatResponse, error) {
	req, err := client.getFloatCreateRequest(ctx, options)
	if err != nil {
		return PrimitiveClientGetFloatResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PrimitiveClientGetFloatResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PrimitiveClientGetFloatResponse{}, client.getFloatHandleError(resp)
	}
	return client.getFloatHandleResponse(resp)
}

// getFloatCreateRequest creates the GetFloat request.
func (client *PrimitiveClient) getFloatCreateRequest(ctx context.Context, options *PrimitiveClientGetFloatOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/float"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getFloatHandleResponse handles the GetFloat response.
func (client *PrimitiveClient) getFloatHandleResponse(resp *http.Response) (PrimitiveClientGetFloatResponse, error) {
	result := PrimitiveClientGetFloatResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.FloatWrapper); err != nil {
		return PrimitiveClientGetFloatResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getFloatHandleError handles the GetFloat error response.
func (client *PrimitiveClient) getFloatHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetInt - Get complex types with integer properties
// If the operation fails it returns the *Error error type.
// options - PrimitiveClientGetIntOptions contains the optional parameters for the PrimitiveClient.GetInt method.
func (client *PrimitiveClient) GetInt(ctx context.Context, options *PrimitiveClientGetIntOptions) (PrimitiveClientGetIntResponse, error) {
	req, err := client.getIntCreateRequest(ctx, options)
	if err != nil {
		return PrimitiveClientGetIntResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PrimitiveClientGetIntResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PrimitiveClientGetIntResponse{}, client.getIntHandleError(resp)
	}
	return client.getIntHandleResponse(resp)
}

// getIntCreateRequest creates the GetInt request.
func (client *PrimitiveClient) getIntCreateRequest(ctx context.Context, options *PrimitiveClientGetIntOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/integer"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getIntHandleResponse handles the GetInt response.
func (client *PrimitiveClient) getIntHandleResponse(resp *http.Response) (PrimitiveClientGetIntResponse, error) {
	result := PrimitiveClientGetIntResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.IntWrapper); err != nil {
		return PrimitiveClientGetIntResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getIntHandleError handles the GetInt error response.
func (client *PrimitiveClient) getIntHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetLong - Get complex types with long properties
// If the operation fails it returns the *Error error type.
// options - PrimitiveClientGetLongOptions contains the optional parameters for the PrimitiveClient.GetLong method.
func (client *PrimitiveClient) GetLong(ctx context.Context, options *PrimitiveClientGetLongOptions) (PrimitiveClientGetLongResponse, error) {
	req, err := client.getLongCreateRequest(ctx, options)
	if err != nil {
		return PrimitiveClientGetLongResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PrimitiveClientGetLongResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PrimitiveClientGetLongResponse{}, client.getLongHandleError(resp)
	}
	return client.getLongHandleResponse(resp)
}

// getLongCreateRequest creates the GetLong request.
func (client *PrimitiveClient) getLongCreateRequest(ctx context.Context, options *PrimitiveClientGetLongOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/long"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getLongHandleResponse handles the GetLong response.
func (client *PrimitiveClient) getLongHandleResponse(resp *http.Response) (PrimitiveClientGetLongResponse, error) {
	result := PrimitiveClientGetLongResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.LongWrapper); err != nil {
		return PrimitiveClientGetLongResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getLongHandleError handles the GetLong error response.
func (client *PrimitiveClient) getLongHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetString - Get complex types with string properties
// If the operation fails it returns the *Error error type.
// options - PrimitiveClientGetStringOptions contains the optional parameters for the PrimitiveClient.GetString method.
func (client *PrimitiveClient) GetString(ctx context.Context, options *PrimitiveClientGetStringOptions) (PrimitiveClientGetStringResponse, error) {
	req, err := client.getStringCreateRequest(ctx, options)
	if err != nil {
		return PrimitiveClientGetStringResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PrimitiveClientGetStringResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PrimitiveClientGetStringResponse{}, client.getStringHandleError(resp)
	}
	return client.getStringHandleResponse(resp)
}

// getStringCreateRequest creates the GetString request.
func (client *PrimitiveClient) getStringCreateRequest(ctx context.Context, options *PrimitiveClientGetStringOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/string"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getStringHandleResponse handles the GetString response.
func (client *PrimitiveClient) getStringHandleResponse(resp *http.Response) (PrimitiveClientGetStringResponse, error) {
	result := PrimitiveClientGetStringResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.StringWrapper); err != nil {
		return PrimitiveClientGetStringResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getStringHandleError handles the GetString error response.
func (client *PrimitiveClient) getStringHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutBool - Put complex types with bool properties
// If the operation fails it returns the *Error error type.
// complexBody - Please put true and false
// options - PrimitiveClientPutBoolOptions contains the optional parameters for the PrimitiveClient.PutBool method.
func (client *PrimitiveClient) PutBool(ctx context.Context, complexBody BooleanWrapper, options *PrimitiveClientPutBoolOptions) (PrimitiveClientPutBoolResponse, error) {
	req, err := client.putBoolCreateRequest(ctx, complexBody, options)
	if err != nil {
		return PrimitiveClientPutBoolResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PrimitiveClientPutBoolResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PrimitiveClientPutBoolResponse{}, client.putBoolHandleError(resp)
	}
	return PrimitiveClientPutBoolResponse{RawResponse: resp}, nil
}

// putBoolCreateRequest creates the PutBool request.
func (client *PrimitiveClient) putBoolCreateRequest(ctx context.Context, complexBody BooleanWrapper, options *PrimitiveClientPutBoolOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/bool"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, complexBody)
}

// putBoolHandleError handles the PutBool error response.
func (client *PrimitiveClient) putBoolHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutByte - Put complex types with byte properties
// If the operation fails it returns the *Error error type.
// complexBody - Please put non-ascii byte string hex(FF FE FD FC 00 FA F9 F8 F7 F6)
// options - PrimitiveClientPutByteOptions contains the optional parameters for the PrimitiveClient.PutByte method.
func (client *PrimitiveClient) PutByte(ctx context.Context, complexBody ByteWrapper, options *PrimitiveClientPutByteOptions) (PrimitiveClientPutByteResponse, error) {
	req, err := client.putByteCreateRequest(ctx, complexBody, options)
	if err != nil {
		return PrimitiveClientPutByteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PrimitiveClientPutByteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PrimitiveClientPutByteResponse{}, client.putByteHandleError(resp)
	}
	return PrimitiveClientPutByteResponse{RawResponse: resp}, nil
}

// putByteCreateRequest creates the PutByte request.
func (client *PrimitiveClient) putByteCreateRequest(ctx context.Context, complexBody ByteWrapper, options *PrimitiveClientPutByteOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/byte"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, complexBody)
}

// putByteHandleError handles the PutByte error response.
func (client *PrimitiveClient) putByteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutDate - Put complex types with date properties
// If the operation fails it returns the *Error error type.
// complexBody - Please put '0001-01-01' and '2016-02-29'
// options - PrimitiveClientPutDateOptions contains the optional parameters for the PrimitiveClient.PutDate method.
func (client *PrimitiveClient) PutDate(ctx context.Context, complexBody DateWrapper, options *PrimitiveClientPutDateOptions) (PrimitiveClientPutDateResponse, error) {
	req, err := client.putDateCreateRequest(ctx, complexBody, options)
	if err != nil {
		return PrimitiveClientPutDateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PrimitiveClientPutDateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PrimitiveClientPutDateResponse{}, client.putDateHandleError(resp)
	}
	return PrimitiveClientPutDateResponse{RawResponse: resp}, nil
}

// putDateCreateRequest creates the PutDate request.
func (client *PrimitiveClient) putDateCreateRequest(ctx context.Context, complexBody DateWrapper, options *PrimitiveClientPutDateOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/date"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, complexBody)
}

// putDateHandleError handles the PutDate error response.
func (client *PrimitiveClient) putDateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutDateTime - Put complex types with datetime properties
// If the operation fails it returns the *Error error type.
// complexBody - Please put '0001-01-01T12:00:00-04:00' and '2015-05-18T11:38:00-08:00'
// options - PrimitiveClientPutDateTimeOptions contains the optional parameters for the PrimitiveClient.PutDateTime method.
func (client *PrimitiveClient) PutDateTime(ctx context.Context, complexBody DatetimeWrapper, options *PrimitiveClientPutDateTimeOptions) (PrimitiveClientPutDateTimeResponse, error) {
	req, err := client.putDateTimeCreateRequest(ctx, complexBody, options)
	if err != nil {
		return PrimitiveClientPutDateTimeResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PrimitiveClientPutDateTimeResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PrimitiveClientPutDateTimeResponse{}, client.putDateTimeHandleError(resp)
	}
	return PrimitiveClientPutDateTimeResponse{RawResponse: resp}, nil
}

// putDateTimeCreateRequest creates the PutDateTime request.
func (client *PrimitiveClient) putDateTimeCreateRequest(ctx context.Context, complexBody DatetimeWrapper, options *PrimitiveClientPutDateTimeOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/datetime"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, complexBody)
}

// putDateTimeHandleError handles the PutDateTime error response.
func (client *PrimitiveClient) putDateTimeHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutDateTimeRFC1123 - Put complex types with datetimeRfc1123 properties
// If the operation fails it returns the *Error error type.
// complexBody - Please put 'Mon, 01 Jan 0001 12:00:00 GMT' and 'Mon, 18 May 2015 11:38:00 GMT'
// options - PrimitiveClientPutDateTimeRFC1123Options contains the optional parameters for the PrimitiveClient.PutDateTimeRFC1123
// method.
func (client *PrimitiveClient) PutDateTimeRFC1123(ctx context.Context, complexBody Datetimerfc1123Wrapper, options *PrimitiveClientPutDateTimeRFC1123Options) (PrimitiveClientPutDateTimeRFC1123Response, error) {
	req, err := client.putDateTimeRFC1123CreateRequest(ctx, complexBody, options)
	if err != nil {
		return PrimitiveClientPutDateTimeRFC1123Response{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PrimitiveClientPutDateTimeRFC1123Response{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PrimitiveClientPutDateTimeRFC1123Response{}, client.putDateTimeRFC1123HandleError(resp)
	}
	return PrimitiveClientPutDateTimeRFC1123Response{RawResponse: resp}, nil
}

// putDateTimeRFC1123CreateRequest creates the PutDateTimeRFC1123 request.
func (client *PrimitiveClient) putDateTimeRFC1123CreateRequest(ctx context.Context, complexBody Datetimerfc1123Wrapper, options *PrimitiveClientPutDateTimeRFC1123Options) (*policy.Request, error) {
	urlPath := "/complex/primitive/datetimerfc1123"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, complexBody)
}

// putDateTimeRFC1123HandleError handles the PutDateTimeRFC1123 error response.
func (client *PrimitiveClient) putDateTimeRFC1123HandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutDouble - Put complex types with double properties
// If the operation fails it returns the *Error error type.
// complexBody - Please put 3e-100 and -0.000000000000000000000000000000000000000000000000000000005
// options - PrimitiveClientPutDoubleOptions contains the optional parameters for the PrimitiveClient.PutDouble method.
func (client *PrimitiveClient) PutDouble(ctx context.Context, complexBody DoubleWrapper, options *PrimitiveClientPutDoubleOptions) (PrimitiveClientPutDoubleResponse, error) {
	req, err := client.putDoubleCreateRequest(ctx, complexBody, options)
	if err != nil {
		return PrimitiveClientPutDoubleResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PrimitiveClientPutDoubleResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PrimitiveClientPutDoubleResponse{}, client.putDoubleHandleError(resp)
	}
	return PrimitiveClientPutDoubleResponse{RawResponse: resp}, nil
}

// putDoubleCreateRequest creates the PutDouble request.
func (client *PrimitiveClient) putDoubleCreateRequest(ctx context.Context, complexBody DoubleWrapper, options *PrimitiveClientPutDoubleOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/double"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, complexBody)
}

// putDoubleHandleError handles the PutDouble error response.
func (client *PrimitiveClient) putDoubleHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutDuration - Put complex types with duration properties
// If the operation fails it returns the *Error error type.
// complexBody - Please put 'P123DT22H14M12.011S'
// options - PrimitiveClientPutDurationOptions contains the optional parameters for the PrimitiveClient.PutDuration method.
func (client *PrimitiveClient) PutDuration(ctx context.Context, complexBody DurationWrapper, options *PrimitiveClientPutDurationOptions) (PrimitiveClientPutDurationResponse, error) {
	req, err := client.putDurationCreateRequest(ctx, complexBody, options)
	if err != nil {
		return PrimitiveClientPutDurationResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PrimitiveClientPutDurationResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PrimitiveClientPutDurationResponse{}, client.putDurationHandleError(resp)
	}
	return PrimitiveClientPutDurationResponse{RawResponse: resp}, nil
}

// putDurationCreateRequest creates the PutDuration request.
func (client *PrimitiveClient) putDurationCreateRequest(ctx context.Context, complexBody DurationWrapper, options *PrimitiveClientPutDurationOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/duration"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, complexBody)
}

// putDurationHandleError handles the PutDuration error response.
func (client *PrimitiveClient) putDurationHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutFloat - Put complex types with float properties
// If the operation fails it returns the *Error error type.
// complexBody - Please put 1.05 and -0.003
// options - PrimitiveClientPutFloatOptions contains the optional parameters for the PrimitiveClient.PutFloat method.
func (client *PrimitiveClient) PutFloat(ctx context.Context, complexBody FloatWrapper, options *PrimitiveClientPutFloatOptions) (PrimitiveClientPutFloatResponse, error) {
	req, err := client.putFloatCreateRequest(ctx, complexBody, options)
	if err != nil {
		return PrimitiveClientPutFloatResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PrimitiveClientPutFloatResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PrimitiveClientPutFloatResponse{}, client.putFloatHandleError(resp)
	}
	return PrimitiveClientPutFloatResponse{RawResponse: resp}, nil
}

// putFloatCreateRequest creates the PutFloat request.
func (client *PrimitiveClient) putFloatCreateRequest(ctx context.Context, complexBody FloatWrapper, options *PrimitiveClientPutFloatOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/float"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, complexBody)
}

// putFloatHandleError handles the PutFloat error response.
func (client *PrimitiveClient) putFloatHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutInt - Put complex types with integer properties
// If the operation fails it returns the *Error error type.
// complexBody - Please put -1 and 2
// options - PrimitiveClientPutIntOptions contains the optional parameters for the PrimitiveClient.PutInt method.
func (client *PrimitiveClient) PutInt(ctx context.Context, complexBody IntWrapper, options *PrimitiveClientPutIntOptions) (PrimitiveClientPutIntResponse, error) {
	req, err := client.putIntCreateRequest(ctx, complexBody, options)
	if err != nil {
		return PrimitiveClientPutIntResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PrimitiveClientPutIntResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PrimitiveClientPutIntResponse{}, client.putIntHandleError(resp)
	}
	return PrimitiveClientPutIntResponse{RawResponse: resp}, nil
}

// putIntCreateRequest creates the PutInt request.
func (client *PrimitiveClient) putIntCreateRequest(ctx context.Context, complexBody IntWrapper, options *PrimitiveClientPutIntOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/integer"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, complexBody)
}

// putIntHandleError handles the PutInt error response.
func (client *PrimitiveClient) putIntHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutLong - Put complex types with long properties
// If the operation fails it returns the *Error error type.
// complexBody - Please put 1099511627775 and -999511627788
// options - PrimitiveClientPutLongOptions contains the optional parameters for the PrimitiveClient.PutLong method.
func (client *PrimitiveClient) PutLong(ctx context.Context, complexBody LongWrapper, options *PrimitiveClientPutLongOptions) (PrimitiveClientPutLongResponse, error) {
	req, err := client.putLongCreateRequest(ctx, complexBody, options)
	if err != nil {
		return PrimitiveClientPutLongResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PrimitiveClientPutLongResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PrimitiveClientPutLongResponse{}, client.putLongHandleError(resp)
	}
	return PrimitiveClientPutLongResponse{RawResponse: resp}, nil
}

// putLongCreateRequest creates the PutLong request.
func (client *PrimitiveClient) putLongCreateRequest(ctx context.Context, complexBody LongWrapper, options *PrimitiveClientPutLongOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/long"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, complexBody)
}

// putLongHandleError handles the PutLong error response.
func (client *PrimitiveClient) putLongHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutString - Put complex types with string properties
// If the operation fails it returns the *Error error type.
// complexBody - Please put 'goodrequest', '', and null
// options - PrimitiveClientPutStringOptions contains the optional parameters for the PrimitiveClient.PutString method.
func (client *PrimitiveClient) PutString(ctx context.Context, complexBody StringWrapper, options *PrimitiveClientPutStringOptions) (PrimitiveClientPutStringResponse, error) {
	req, err := client.putStringCreateRequest(ctx, complexBody, options)
	if err != nil {
		return PrimitiveClientPutStringResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PrimitiveClientPutStringResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PrimitiveClientPutStringResponse{}, client.putStringHandleError(resp)
	}
	return PrimitiveClientPutStringResponse{RawResponse: resp}, nil
}

// putStringCreateRequest creates the PutString request.
func (client *PrimitiveClient) putStringCreateRequest(ctx context.Context, complexBody StringWrapper, options *PrimitiveClientPutStringOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/string"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, complexBody)
}

// putStringHandleError handles the PutString error response.
func (client *PrimitiveClient) putStringHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
