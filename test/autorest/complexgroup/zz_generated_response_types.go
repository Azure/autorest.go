// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package complexgroup

import "net/http"

// ArrayWrapperResponse is the response envelope for operations that return a ArrayWrapper type.
type ArrayWrapperResponse struct {
	ArrayWrapper *ArrayWrapper

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BasicResponse is the response envelope for operations that return a Basic type.
type BasicResponse struct {
	Basic *Basic

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BooleanWrapperResponse is the response envelope for operations that return a BooleanWrapper type.
type BooleanWrapperResponse struct {
	BooleanWrapper *BooleanWrapper

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ByteWrapperResponse is the response envelope for operations that return a ByteWrapper type.
type ByteWrapperResponse struct {
	ByteWrapper *ByteWrapper

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DateWrapperResponse is the response envelope for operations that return a DateWrapper type.
type DateWrapperResponse struct {
	DateWrapper *DateWrapper

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DatetimeWrapperResponse is the response envelope for operations that return a DatetimeWrapper type.
type DatetimeWrapperResponse struct {
	DatetimeWrapper *DatetimeWrapper

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Datetimerfc1123WrapperResponse is the response envelope for operations that return a Datetimerfc1123Wrapper type.
type Datetimerfc1123WrapperResponse struct {
	Datetimerfc1123Wrapper *Datetimerfc1123Wrapper

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DictionaryWrapperResponse is the response envelope for operations that return a DictionaryWrapper type.
type DictionaryWrapperResponse struct {
	DictionaryWrapper *DictionaryWrapper

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DotFishMarketResponse is the response envelope for operations that return a DotFishMarket type.
type DotFishMarketResponse struct {
	DotFishMarket *DotFishMarket

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DotFishResponse is the response envelope for operations that return a DotFish type.
type DotFishResponse struct {
	DotFish DotFishClassification

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DotFishResponse.
func (d *DotFishResponse) UnmarshalJSON(data []byte) error {
	res, err := unmarshalDotFishClassification(data)
	if err != nil {
		return err
	}
	d.DotFish = res
	return nil
}

// DoubleWrapperResponse is the response envelope for operations that return a DoubleWrapper type.
type DoubleWrapperResponse struct {
	DoubleWrapper *DoubleWrapper

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DurationWrapperResponse is the response envelope for operations that return a DurationWrapper type.
type DurationWrapperResponse struct {
	DurationWrapper *DurationWrapper

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FishResponse is the response envelope for operations that return a Fish type.
type FishResponse struct {
	Fish FishClassification

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// UnmarshalJSON implements the json.Unmarshaller interface for type FishResponse.
func (f *FishResponse) UnmarshalJSON(data []byte) error {
	res, err := unmarshalFishClassification(data)
	if err != nil {
		return err
	}
	f.Fish = res
	return nil
}

// FloatWrapperResponse is the response envelope for operations that return a FloatWrapper type.
type FloatWrapperResponse struct {
	FloatWrapper *FloatWrapper

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IntWrapperResponse is the response envelope for operations that return a IntWrapper type.
type IntWrapperResponse struct {
	IntWrapper *IntWrapper

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LongWrapperResponse is the response envelope for operations that return a LongWrapper type.
type LongWrapperResponse struct {
	LongWrapper *LongWrapper

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MyBaseTypeResponse is the response envelope for operations that return a MyBaseType type.
type MyBaseTypeResponse struct {
	MyBaseType MyBaseTypeClassification

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MyBaseTypeResponse.
func (m *MyBaseTypeResponse) UnmarshalJSON(data []byte) error {
	res, err := unmarshalMyBaseTypeClassification(data)
	if err != nil {
		return err
	}
	m.MyBaseType = res
	return nil
}

// ReadonlyObjResponse is the response envelope for operations that return a ReadonlyObj type.
type ReadonlyObjResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
	ReadonlyObj *ReadonlyObj
}

// SalmonResponse is the response envelope for operations that return a Salmon type.
type SalmonResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
	Salmon      SalmonClassification
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SalmonResponse.
func (s *SalmonResponse) UnmarshalJSON(data []byte) error {
	res, err := unmarshalSalmonClassification(data)
	if err != nil {
		return err
	}
	s.Salmon = res
	return nil
}

// SiameseResponse is the response envelope for operations that return a Siamese type.
type SiameseResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
	Siamese     *Siamese
}

// StringWrapperResponse is the response envelope for operations that return a StringWrapper type.
type StringWrapperResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse   *http.Response
	StringWrapper *StringWrapper
}
