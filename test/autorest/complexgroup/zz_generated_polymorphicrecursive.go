// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package complexgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"path"
)

// PolymorphicrecursiveOperations contains the methods for the Polymorphicrecursive group.
type PolymorphicrecursiveOperations interface {
	// GetValid - Get complex types that are polymorphic and have recursive references
	GetValid(ctx context.Context) (*FishResponse, error)
	// PutValid - Put complex types that are polymorphic and have recursive references
	PutValid(ctx context.Context, complexBody FishClassification) (*http.Response, error)
}

// PolymorphicrecursiveClient implements the PolymorphicrecursiveOperations interface.
// Don't use this type directly, use NewPolymorphicrecursiveClient() instead.
type PolymorphicrecursiveClient struct {
	*Client
}

// NewPolymorphicrecursiveClient creates a new instance of PolymorphicrecursiveClient with the specified values.
func NewPolymorphicrecursiveClient(c *Client) PolymorphicrecursiveOperations {
	return &PolymorphicrecursiveClient{Client: c}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *PolymorphicrecursiveClient) Do(ctx context.Context, req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(ctx, req)
}

// GetValid - Get complex types that are polymorphic and have recursive references
func (client *PolymorphicrecursiveClient) GetValid(ctx context.Context) (*FishResponse, error) {
	req, err := client.GetValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetValidCreateRequest creates the GetValid request.
func (client *PolymorphicrecursiveClient) GetValidCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/polymorphicrecursive/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetValidHandleResponse handles the GetValid response.
func (client *PolymorphicrecursiveClient) GetValidHandleResponse(resp *azcore.Response) (*FishResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetValidHandleError(resp)
	}
	result := FishResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result)
}

// GetValidHandleError handles the GetValid error response.
func (client *PolymorphicrecursiveClient) GetValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutValid - Put complex types that are polymorphic and have recursive references
func (client *PolymorphicrecursiveClient) PutValid(ctx context.Context, complexBody FishClassification) (*http.Response, error) {
	req, err := client.PutValidCreateRequest(complexBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutValidCreateRequest creates the PutValid request.
func (client *PolymorphicrecursiveClient) PutValidCreateRequest(complexBody FishClassification) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/complex/polymorphicrecursive/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(complexBody)
}

// PutValidHandleResponse handles the PutValid response.
func (client *PolymorphicrecursiveClient) PutValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutValidHandleError(resp)
	}
	return resp.Response, nil
}

// PutValidHandleError handles the PutValid error response.
func (client *PolymorphicrecursiveClient) PutValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
