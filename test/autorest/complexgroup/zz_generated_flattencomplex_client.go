//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package complexgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// FlattencomplexClient contains the methods for the Flattencomplex group.
// Don't use this type directly, use NewFlattencomplexClient() instead.
type FlattencomplexClient struct {
	pl runtime.Pipeline
}

// NewFlattencomplexClient creates a new instance of FlattencomplexClient with the specified values.
// pl - the pipeline used for sending requests and handling responses.
func NewFlattencomplexClient(pl runtime.Pipeline) *FlattencomplexClient {
	client := &FlattencomplexClient{
		pl: pl,
	}
	return client
}

// GetValid -
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2016-02-29
// options - FlattencomplexClientGetValidOptions contains the optional parameters for the FlattencomplexClient.GetValid method.
func (client *FlattencomplexClient) GetValid(ctx context.Context, options *FlattencomplexClientGetValidOptions) (FlattencomplexClientGetValidResponse, error) {
	req, err := client.getValidCreateRequest(ctx, options)
	if err != nil {
		return FlattencomplexClientGetValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return FlattencomplexClientGetValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return FlattencomplexClientGetValidResponse{}, runtime.NewResponseError(resp)
	}
	return client.getValidHandleResponse(resp)
}

// getValidCreateRequest creates the GetValid request.
func (client *FlattencomplexClient) getValidCreateRequest(ctx context.Context, options *FlattencomplexClientGetValidOptions) (*policy.Request, error) {
	urlPath := "/complex/flatten/valid"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getValidHandleResponse handles the GetValid response.
func (client *FlattencomplexClient) getValidHandleResponse(resp *http.Response) (FlattencomplexClientGetValidResponse, error) {
	result := FlattencomplexClientGetValidResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result); err != nil {
		return FlattencomplexClientGetValidResponse{}, err
	}
	return result, nil
}
