// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package complexgroup

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// InheritanceClient contains the methods for the Inheritance group.
// Don't use this type directly, use NewInheritanceClient() instead.
type InheritanceClient struct {
	con *Connection
}

// NewInheritanceClient creates a new instance of InheritanceClient with the specified values.
func NewInheritanceClient(con *Connection) *InheritanceClient {
	return &InheritanceClient{con: con}
}

// GetValid - Get complex types that extend others
// If the operation fails it returns the *Error error type.
func (client *InheritanceClient) GetValid(ctx context.Context, options *InheritanceGetValidOptions) (InheritanceGetValidResponse, error) {
	req, err := client.getValidCreateRequest(ctx, options)
	if err != nil {
		return InheritanceGetValidResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return InheritanceGetValidResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return InheritanceGetValidResponse{}, client.getValidHandleError(resp)
	}
	return client.getValidHandleResponse(resp)
}

// getValidCreateRequest creates the GetValid request.
func (client *InheritanceClient) getValidCreateRequest(ctx context.Context, options *InheritanceGetValidOptions) (*azcore.Request, error) {
	urlPath := "/complex/inheritance/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getValidHandleResponse handles the GetValid response.
func (client *InheritanceClient) getValidHandleResponse(resp *azcore.Response) (InheritanceGetValidResponse, error) {
	result := InheritanceGetValidResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.Siamese); err != nil {
		return InheritanceGetValidResponse{}, err
	}
	return result, nil
}

// getValidHandleError handles the GetValid error response.
func (client *InheritanceClient) getValidHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// PutValid - Put complex types that extend others
// If the operation fails it returns the *Error error type.
func (client *InheritanceClient) PutValid(ctx context.Context, complexBody Siamese, options *InheritancePutValidOptions) (InheritancePutValidResponse, error) {
	req, err := client.putValidCreateRequest(ctx, complexBody, options)
	if err != nil {
		return InheritancePutValidResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return InheritancePutValidResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return InheritancePutValidResponse{}, client.putValidHandleError(resp)
	}
	return InheritancePutValidResponse{RawResponse: resp.Response}, nil
}

// putValidCreateRequest creates the PutValid request.
func (client *InheritanceClient) putValidCreateRequest(ctx context.Context, complexBody Siamese, options *InheritancePutValidOptions) (*azcore.Request, error) {
	urlPath := "/complex/inheritance/valid"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(complexBody)
}

// putValidHandleError handles the PutValid error response.
func (client *InheritanceClient) putValidHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := Error{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
