// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package complexgroup

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"io/ioutil"
	"net/http"
)

// FlattencomplexClient contains the methods for the Flattencomplex group.
// Don't use this type directly, use NewFlattencomplexClient() instead.
type FlattencomplexClient struct {
	con *Connection
}

// NewFlattencomplexClient creates a new instance of FlattencomplexClient with the specified values.
func NewFlattencomplexClient(con *Connection) FlattencomplexClient {
	return FlattencomplexClient{con: con}
}

// Pipeline returns the pipeline associated with this client.
func (client FlattencomplexClient) Pipeline() azcore.Pipeline {
	return client.con.Pipeline()
}

func (client FlattencomplexClient) GetValid(ctx context.Context, options *FlattencomplexGetValidOptions) (*MyBaseTypeResponse, error) {
	req, err := client.getValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getValidHandleError(resp)
	}
	result, err := client.getValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getValidCreateRequest creates the GetValid request.
func (client FlattencomplexClient) getValidCreateRequest(ctx context.Context, options *FlattencomplexGetValidOptions) (*azcore.Request, error) {
	urlPath := "/complex/flatten/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getValidHandleResponse handles the GetValid response.
func (client FlattencomplexClient) getValidHandleResponse(resp *azcore.Response) (*MyBaseTypeResponse, error) {
	result := MyBaseTypeResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result)
}

// getValidHandleError handles the GetValid error response.
func (client FlattencomplexClient) getValidHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}
