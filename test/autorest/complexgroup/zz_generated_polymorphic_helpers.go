//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package complexgroup

import "encoding/json"

func unmarshalDotFishClassification(rawMsg json.RawMessage) (DotFishClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b DotFishClassification
	switch m["fish.type"] {
	case "DotSalmon":
		b = &DotSalmon{}
	default:
		b = &DotFish{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalDotFishClassificationArray(rawMsg json.RawMessage) ([]DotFishClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]DotFishClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalDotFishClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalFishClassification(rawMsg json.RawMessage) (FishClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b FishClassification
	switch m["fishtype"] {
	case "cookiecuttershark":
		b = &Cookiecuttershark{}
	case "goblin":
		b = &Goblinshark{}
	case "salmon":
		b = &Salmon{}
	case "sawshark":
		b = &Sawshark{}
	case "shark":
		b = &Shark{}
	case "smart_salmon":
		b = &SmartSalmon{}
	default:
		b = &Fish{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalFishClassificationArray(rawMsg json.RawMessage) ([]FishClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]FishClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalFishClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalMyBaseTypeClassification(rawMsg json.RawMessage) (MyBaseTypeClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b MyBaseTypeClassification
	switch m["kind"] {
	case string(MyKindKind1):
		b = &MyDerivedType{}
	default:
		b = &MyBaseType{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalMyBaseTypeClassificationArray(rawMsg json.RawMessage) ([]MyBaseTypeClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]MyBaseTypeClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalMyBaseTypeClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalSalmonClassification(rawMsg json.RawMessage) (SalmonClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b SalmonClassification
	switch m["fishtype"] {
	case "smart_salmon":
		b = &SmartSalmon{}
	default:
		b = &Salmon{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalSalmonClassificationArray(rawMsg json.RawMessage) ([]SalmonClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]SalmonClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalSalmonClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalSharkClassification(rawMsg json.RawMessage) (SharkClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b SharkClassification
	switch m["fishtype"] {
	case "cookiecuttershark":
		b = &Cookiecuttershark{}
	case "goblin":
		b = &Goblinshark{}
	case "sawshark":
		b = &Sawshark{}
	default:
		b = &Shark{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalSharkClassificationArray(rawMsg json.RawMessage) ([]SharkClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]SharkClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalSharkClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}
