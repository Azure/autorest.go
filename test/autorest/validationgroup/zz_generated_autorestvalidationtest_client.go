// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package validationgroup

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"io/ioutil"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// AutoRestValidationTestClient contains the methods for the AutoRestValidationTest group.
// Don't use this type directly, use NewAutoRestValidationTestClient() instead.
type AutoRestValidationTestClient struct {
	con            *Connection
	subscriptionID string
}

// NewAutoRestValidationTestClient creates a new instance of AutoRestValidationTestClient with the specified values.
func NewAutoRestValidationTestClient(con *Connection, subscriptionID string) *AutoRestValidationTestClient {
	return &AutoRestValidationTestClient{con: con, subscriptionID: subscriptionID}
}

func (client *AutoRestValidationTestClient) GetWithConstantInPath(ctx context.Context, options *AutoRestValidationTestGetWithConstantInPathOptions) (*http.Response, error) {
	req, err := client.getWithConstantInPathCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getWithConstantInPathHandleError(resp)
	}
	return resp.Response, nil
}

// getWithConstantInPathCreateRequest creates the GetWithConstantInPath request.
func (client *AutoRestValidationTestClient) getWithConstantInPathCreateRequest(ctx context.Context, options *AutoRestValidationTestGetWithConstantInPathOptions) (*azcore.Request, error) {
	urlPath := "/validation/constantsInPath/{constantParam}/value"
	urlPath = strings.ReplaceAll(urlPath, "{constantParam}", url.PathEscape("constant"))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	return req, nil
}

// getWithConstantInPathHandleError handles the GetWithConstantInPath error response.
func (client *AutoRestValidationTestClient) getWithConstantInPathHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

func (client *AutoRestValidationTestClient) PostWithConstantInBody(ctx context.Context, options *AutoRestValidationTestPostWithConstantInBodyOptions) (ProductResponse, error) {
	req, err := client.postWithConstantInBodyCreateRequest(ctx, options)
	if err != nil {
		return ProductResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ProductResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return ProductResponse{}, client.postWithConstantInBodyHandleError(resp)
	}
	return client.postWithConstantInBodyHandleResponse(resp)
}

// postWithConstantInBodyCreateRequest creates the PostWithConstantInBody request.
func (client *AutoRestValidationTestClient) postWithConstantInBodyCreateRequest(ctx context.Context, options *AutoRestValidationTestPostWithConstantInBodyOptions) (*azcore.Request, error) {
	urlPath := "/validation/constantsInPath/{constantParam}/value"
	urlPath = strings.ReplaceAll(urlPath, "{constantParam}", url.PathEscape("constant"))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil && options.Body != nil {
		return req, req.MarshalAsJSON(options.Body)
	}
	return req, nil
}

// postWithConstantInBodyHandleResponse handles the PostWithConstantInBody response.
func (client *AutoRestValidationTestClient) postWithConstantInBodyHandleResponse(resp *azcore.Response) (ProductResponse, error) {
	var val *Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductResponse{}, err
	}
	return ProductResponse{RawResponse: resp.Response, Product: val}, nil
}

// postWithConstantInBodyHandleError handles the PostWithConstantInBody error response.
func (client *AutoRestValidationTestClient) postWithConstantInBodyHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// ValidationOfBody - Validates body parameters on the method. See swagger for details.
func (client *AutoRestValidationTestClient) ValidationOfBody(ctx context.Context, resourceGroupName string, id int32, options *AutoRestValidationTestValidationOfBodyOptions) (ProductResponse, error) {
	req, err := client.validationOfBodyCreateRequest(ctx, resourceGroupName, id, options)
	if err != nil {
		return ProductResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ProductResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return ProductResponse{}, client.validationOfBodyHandleError(resp)
	}
	return client.validationOfBodyHandleResponse(resp)
}

// validationOfBodyCreateRequest creates the ValidationOfBody request.
func (client *AutoRestValidationTestClient) validationOfBodyCreateRequest(ctx context.Context, resourceGroupName string, id int32, options *AutoRestValidationTestValidationOfBodyOptions) (*azcore.Request, error) {
	urlPath := "/fakepath/{subscriptionId}/{resourceGroupName}/{id}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(strconv.FormatInt(int64(id), 10)))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("apiVersion", "1.0.0")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	if options != nil && options.Body != nil {
		return req, req.MarshalAsJSON(options.Body)
	}
	return req, nil
}

// validationOfBodyHandleResponse handles the ValidationOfBody response.
func (client *AutoRestValidationTestClient) validationOfBodyHandleResponse(resp *azcore.Response) (ProductResponse, error) {
	var val *Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductResponse{}, err
	}
	return ProductResponse{RawResponse: resp.Response, Product: val}, nil
}

// validationOfBodyHandleError handles the ValidationOfBody error response.
func (client *AutoRestValidationTestClient) validationOfBodyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// ValidationOfMethodParameters - Validates input parameters on the method. See swagger for details.
func (client *AutoRestValidationTestClient) ValidationOfMethodParameters(ctx context.Context, resourceGroupName string, id int32, options *AutoRestValidationTestValidationOfMethodParametersOptions) (ProductResponse, error) {
	req, err := client.validationOfMethodParametersCreateRequest(ctx, resourceGroupName, id, options)
	if err != nil {
		return ProductResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ProductResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return ProductResponse{}, client.validationOfMethodParametersHandleError(resp)
	}
	return client.validationOfMethodParametersHandleResponse(resp)
}

// validationOfMethodParametersCreateRequest creates the ValidationOfMethodParameters request.
func (client *AutoRestValidationTestClient) validationOfMethodParametersCreateRequest(ctx context.Context, resourceGroupName string, id int32, options *AutoRestValidationTestValidationOfMethodParametersOptions) (*azcore.Request, error) {
	urlPath := "/fakepath/{subscriptionId}/{resourceGroupName}/{id}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(strconv.FormatInt(int64(id), 10)))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("apiVersion", "1.0.0")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// validationOfMethodParametersHandleResponse handles the ValidationOfMethodParameters response.
func (client *AutoRestValidationTestClient) validationOfMethodParametersHandleResponse(resp *azcore.Response) (ProductResponse, error) {
	var val *Product
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ProductResponse{}, err
	}
	return ProductResponse{RawResponse: resp.Response, Product: val}, nil
}

// validationOfMethodParametersHandleError handles the ValidationOfMethodParameters error response.
func (client *AutoRestValidationTestClient) validationOfMethodParametersHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}
