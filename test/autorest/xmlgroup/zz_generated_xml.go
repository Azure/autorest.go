// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package xmlgroup

import (
	"context"
	"encoding/xml"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"io/ioutil"
	"net/http"
)

// XMLOperations contains the methods for the XML group.
type XMLOperations interface {
	// GetACLs - Gets storage ACLs for a container.
	GetACLs(ctx context.Context, options *XMLGetACLsOptions) (*SignedIDentifierArrayResponse, error)
	// GetComplexTypeRefNoMeta - Get a complex type that has a ref to a complex type with no XML node
	GetComplexTypeRefNoMeta(ctx context.Context, options *XMLGetComplexTypeRefNoMetaOptions) (*RootWithRefAndNoMetaResponse, error)
	// GetComplexTypeRefWithMeta - Get a complex type that has a ref to a complex type with XML node
	GetComplexTypeRefWithMeta(ctx context.Context, options *XMLGetComplexTypeRefWithMetaOptions) (*RootWithRefAndMetaResponse, error)
	// GetEmptyChildElement - Gets an XML document with an empty child element.
	GetEmptyChildElement(ctx context.Context, options *XMLGetEmptyChildElementOptions) (*BananaResponse, error)
	// GetEmptyList - Get an empty list.
	GetEmptyList(ctx context.Context, options *XMLGetEmptyListOptions) (*SlideshowResponse, error)
	// GetEmptyRootList - Gets an empty list as the root element.
	GetEmptyRootList(ctx context.Context, options *XMLGetEmptyRootListOptions) (*BananaArrayResponse, error)
	// GetEmptyWrappedLists - Gets some empty wrapped lists.
	GetEmptyWrappedLists(ctx context.Context, options *XMLGetEmptyWrappedListsOptions) (*AppleBarrelResponse, error)
	// GetHeaders - Get strongly-typed response headers.
	GetHeaders(ctx context.Context, options *XMLGetHeadersOptions) (*XMLGetHeadersResponse, error)
	// GetRootList - Gets a list as the root element.
	GetRootList(ctx context.Context, options *XMLGetRootListOptions) (*BananaArrayResponse, error)
	// GetRootListSingleItem - Gets a list with a single item.
	GetRootListSingleItem(ctx context.Context, options *XMLGetRootListSingleItemOptions) (*BananaArrayResponse, error)
	// GetServiceProperties - Gets storage service properties.
	GetServiceProperties(ctx context.Context, options *XMLGetServicePropertiesOptions) (*StorageServicePropertiesResponse, error)
	// GetSimple - Get a simple XML document
	GetSimple(ctx context.Context, options *XMLGetSimpleOptions) (*SlideshowResponse, error)
	// GetWrappedLists - Get an XML document with multiple wrapped lists
	GetWrappedLists(ctx context.Context, options *XMLGetWrappedListsOptions) (*AppleBarrelResponse, error)
	// GetXMSText - Get back an XML object with an x-ms-text property, which should translate to the returned object's 'language' property being 'english' and its 'content' property being 'I am text'
	GetXMSText(ctx context.Context, options *XMLGetXMSTextOptions) (*ObjectWithXMSTextPropertyResponse, error)
	// JSONInput - A Swagger with XML that has one operation that takes JSON as input. You need to send the ID number 42
	JSONInput(ctx context.Context, properties JSONInput, options *XMLJSONInputOptions) (*http.Response, error)
	// JSONOutput - A Swagger with XML that has one operation that returns JSON. ID number 42
	JSONOutput(ctx context.Context, options *XMLJSONOutputOptions) (*JSONOutputResponse, error)
	// ListBlobs - Lists blobs in a storage container.
	ListBlobs(ctx context.Context, options *XMLListBlobsOptions) (*ListBlobsResponseResponse, error)
	// ListContainers - Lists containers in a storage account.
	ListContainers(ctx context.Context, options *XMLListContainersOptions) (*ListContainersResponseResponse, error)
	// PutACLs - Puts storage ACLs for a container.
	PutACLs(ctx context.Context, properties []SignedIDentifier, options *XMLPutACLsOptions) (*http.Response, error)
	// PutComplexTypeRefNoMeta - Puts a complex type that has a ref to a complex type with no XML node
	PutComplexTypeRefNoMeta(ctx context.Context, model RootWithRefAndNoMeta, options *XMLPutComplexTypeRefNoMetaOptions) (*http.Response, error)
	// PutComplexTypeRefWithMeta - Puts a complex type that has a ref to a complex type with XML node
	PutComplexTypeRefWithMeta(ctx context.Context, model RootWithRefAndMeta, options *XMLPutComplexTypeRefWithMetaOptions) (*http.Response, error)
	// PutEmptyChildElement - Puts a value with an empty child element.
	PutEmptyChildElement(ctx context.Context, banana Banana, options *XMLPutEmptyChildElementOptions) (*http.Response, error)
	// PutEmptyList - Puts an empty list.
	PutEmptyList(ctx context.Context, slideshow Slideshow, options *XMLPutEmptyListOptions) (*http.Response, error)
	// PutEmptyRootList - Puts an empty list as the root element.
	PutEmptyRootList(ctx context.Context, bananas []Banana, options *XMLPutEmptyRootListOptions) (*http.Response, error)
	// PutEmptyWrappedLists - Puts some empty wrapped lists.
	PutEmptyWrappedLists(ctx context.Context, appleBarrel AppleBarrel, options *XMLPutEmptyWrappedListsOptions) (*http.Response, error)
	// PutRootList - Puts a list as the root element.
	PutRootList(ctx context.Context, bananas []Banana, options *XMLPutRootListOptions) (*http.Response, error)
	// PutRootListSingleItem - Puts a list with a single item.
	PutRootListSingleItem(ctx context.Context, bananas []Banana, options *XMLPutRootListSingleItemOptions) (*http.Response, error)
	// PutServiceProperties - Puts storage service properties.
	PutServiceProperties(ctx context.Context, properties StorageServiceProperties, options *XMLPutServicePropertiesOptions) (*http.Response, error)
	// PutSimple - Put a simple XML document
	PutSimple(ctx context.Context, slideshow Slideshow, options *XMLPutSimpleOptions) (*http.Response, error)
	// PutWrappedLists - Put an XML document with multiple wrapped lists
	PutWrappedLists(ctx context.Context, wrappedLists AppleBarrel, options *XMLPutWrappedListsOptions) (*http.Response, error)
}

// XMLClient implements the XMLOperations interface.
// Don't use this type directly, use NewXMLClient() instead.
type XMLClient struct {
	*Client
}

// NewXMLClient creates a new instance of XMLClient with the specified values.
func NewXMLClient(c *Client) XMLOperations {
	return &XMLClient{Client: c}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *XMLClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// GetACLs - Gets storage ACLs for a container.
func (client *XMLClient) GetACLs(ctx context.Context, options *XMLGetACLsOptions) (*SignedIDentifierArrayResponse, error) {
	req, err := client.GetACLsCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetACLsHandleError(resp)
	}
	result, err := client.GetACLsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetACLsCreateRequest creates the GetACLs request.
func (client *XMLClient) GetACLsCreateRequest(ctx context.Context, options *XMLGetACLsOptions) (*azcore.Request, error) {
	urlPath := "/xml/mycontainer"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("comp", "acl")
	query.Set("restype", "container")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// GetACLsHandleResponse handles the GetACLs response.
func (client *XMLClient) GetACLsHandleResponse(resp *azcore.Response) (*SignedIDentifierArrayResponse, error) {
	result := SignedIDentifierArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result)
}

// GetACLsHandleError handles the GetACLs error response.
func (client *XMLClient) GetACLsHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// GetComplexTypeRefNoMeta - Get a complex type that has a ref to a complex type with no XML node
func (client *XMLClient) GetComplexTypeRefNoMeta(ctx context.Context, options *XMLGetComplexTypeRefNoMetaOptions) (*RootWithRefAndNoMetaResponse, error) {
	req, err := client.GetComplexTypeRefNoMetaCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetComplexTypeRefNoMetaHandleError(resp)
	}
	result, err := client.GetComplexTypeRefNoMetaHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetComplexTypeRefNoMetaCreateRequest creates the GetComplexTypeRefNoMeta request.
func (client *XMLClient) GetComplexTypeRefNoMetaCreateRequest(ctx context.Context, options *XMLGetComplexTypeRefNoMetaOptions) (*azcore.Request, error) {
	urlPath := "/xml/complex-type-ref-no-meta"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// GetComplexTypeRefNoMetaHandleResponse handles the GetComplexTypeRefNoMeta response.
func (client *XMLClient) GetComplexTypeRefNoMetaHandleResponse(resp *azcore.Response) (*RootWithRefAndNoMetaResponse, error) {
	result := RootWithRefAndNoMetaResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result.RootWithRefAndNoMeta)
}

// GetComplexTypeRefNoMetaHandleError handles the GetComplexTypeRefNoMeta error response.
func (client *XMLClient) GetComplexTypeRefNoMetaHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// GetComplexTypeRefWithMeta - Get a complex type that has a ref to a complex type with XML node
func (client *XMLClient) GetComplexTypeRefWithMeta(ctx context.Context, options *XMLGetComplexTypeRefWithMetaOptions) (*RootWithRefAndMetaResponse, error) {
	req, err := client.GetComplexTypeRefWithMetaCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetComplexTypeRefWithMetaHandleError(resp)
	}
	result, err := client.GetComplexTypeRefWithMetaHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetComplexTypeRefWithMetaCreateRequest creates the GetComplexTypeRefWithMeta request.
func (client *XMLClient) GetComplexTypeRefWithMetaCreateRequest(ctx context.Context, options *XMLGetComplexTypeRefWithMetaOptions) (*azcore.Request, error) {
	urlPath := "/xml/complex-type-ref-with-meta"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// GetComplexTypeRefWithMetaHandleResponse handles the GetComplexTypeRefWithMeta response.
func (client *XMLClient) GetComplexTypeRefWithMetaHandleResponse(resp *azcore.Response) (*RootWithRefAndMetaResponse, error) {
	result := RootWithRefAndMetaResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result.RootWithRefAndMeta)
}

// GetComplexTypeRefWithMetaHandleError handles the GetComplexTypeRefWithMeta error response.
func (client *XMLClient) GetComplexTypeRefWithMetaHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// GetEmptyChildElement - Gets an XML document with an empty child element.
func (client *XMLClient) GetEmptyChildElement(ctx context.Context, options *XMLGetEmptyChildElementOptions) (*BananaResponse, error) {
	req, err := client.GetEmptyChildElementCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetEmptyChildElementHandleError(resp)
	}
	result, err := client.GetEmptyChildElementHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetEmptyChildElementCreateRequest creates the GetEmptyChildElement request.
func (client *XMLClient) GetEmptyChildElementCreateRequest(ctx context.Context, options *XMLGetEmptyChildElementOptions) (*azcore.Request, error) {
	urlPath := "/xml/empty-child-element"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// GetEmptyChildElementHandleResponse handles the GetEmptyChildElement response.
func (client *XMLClient) GetEmptyChildElementHandleResponse(resp *azcore.Response) (*BananaResponse, error) {
	result := BananaResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result.Banana)
}

// GetEmptyChildElementHandleError handles the GetEmptyChildElement error response.
func (client *XMLClient) GetEmptyChildElementHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// GetEmptyList - Get an empty list.
func (client *XMLClient) GetEmptyList(ctx context.Context, options *XMLGetEmptyListOptions) (*SlideshowResponse, error) {
	req, err := client.GetEmptyListCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetEmptyListHandleError(resp)
	}
	result, err := client.GetEmptyListHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetEmptyListCreateRequest creates the GetEmptyList request.
func (client *XMLClient) GetEmptyListCreateRequest(ctx context.Context, options *XMLGetEmptyListOptions) (*azcore.Request, error) {
	urlPath := "/xml/empty-list"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// GetEmptyListHandleResponse handles the GetEmptyList response.
func (client *XMLClient) GetEmptyListHandleResponse(resp *azcore.Response) (*SlideshowResponse, error) {
	result := SlideshowResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result.Slideshow)
}

// GetEmptyListHandleError handles the GetEmptyList error response.
func (client *XMLClient) GetEmptyListHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// GetEmptyRootList - Gets an empty list as the root element.
func (client *XMLClient) GetEmptyRootList(ctx context.Context, options *XMLGetEmptyRootListOptions) (*BananaArrayResponse, error) {
	req, err := client.GetEmptyRootListCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetEmptyRootListHandleError(resp)
	}
	result, err := client.GetEmptyRootListHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetEmptyRootListCreateRequest creates the GetEmptyRootList request.
func (client *XMLClient) GetEmptyRootListCreateRequest(ctx context.Context, options *XMLGetEmptyRootListOptions) (*azcore.Request, error) {
	urlPath := "/xml/empty-root-list"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// GetEmptyRootListHandleResponse handles the GetEmptyRootList response.
func (client *XMLClient) GetEmptyRootListHandleResponse(resp *azcore.Response) (*BananaArrayResponse, error) {
	result := BananaArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result)
}

// GetEmptyRootListHandleError handles the GetEmptyRootList error response.
func (client *XMLClient) GetEmptyRootListHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// GetEmptyWrappedLists - Gets some empty wrapped lists.
func (client *XMLClient) GetEmptyWrappedLists(ctx context.Context, options *XMLGetEmptyWrappedListsOptions) (*AppleBarrelResponse, error) {
	req, err := client.GetEmptyWrappedListsCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetEmptyWrappedListsHandleError(resp)
	}
	result, err := client.GetEmptyWrappedListsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetEmptyWrappedListsCreateRequest creates the GetEmptyWrappedLists request.
func (client *XMLClient) GetEmptyWrappedListsCreateRequest(ctx context.Context, options *XMLGetEmptyWrappedListsOptions) (*azcore.Request, error) {
	urlPath := "/xml/empty-wrapped-lists"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// GetEmptyWrappedListsHandleResponse handles the GetEmptyWrappedLists response.
func (client *XMLClient) GetEmptyWrappedListsHandleResponse(resp *azcore.Response) (*AppleBarrelResponse, error) {
	result := AppleBarrelResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result.AppleBarrel)
}

// GetEmptyWrappedListsHandleError handles the GetEmptyWrappedLists error response.
func (client *XMLClient) GetEmptyWrappedListsHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// GetHeaders - Get strongly-typed response headers.
func (client *XMLClient) GetHeaders(ctx context.Context, options *XMLGetHeadersOptions) (*XMLGetHeadersResponse, error) {
	req, err := client.GetHeadersCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetHeadersHandleError(resp)
	}
	result, err := client.GetHeadersHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetHeadersCreateRequest creates the GetHeaders request.
func (client *XMLClient) GetHeadersCreateRequest(ctx context.Context, options *XMLGetHeadersOptions) (*azcore.Request, error) {
	urlPath := "/xml/headers"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// GetHeadersHandleResponse handles the GetHeaders response.
func (client *XMLClient) GetHeadersHandleResponse(resp *azcore.Response) (*XMLGetHeadersResponse, error) {
	result := XMLGetHeadersResponse{RawResponse: resp.Response}
	if val := resp.Header.Get("Custom-Header"); val != "" {
		result.CustomHeader = &val
	}
	return &result, nil
}

// GetHeadersHandleError handles the GetHeaders error response.
func (client *XMLClient) GetHeadersHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// GetRootList - Gets a list as the root element.
func (client *XMLClient) GetRootList(ctx context.Context, options *XMLGetRootListOptions) (*BananaArrayResponse, error) {
	req, err := client.GetRootListCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetRootListHandleError(resp)
	}
	result, err := client.GetRootListHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetRootListCreateRequest creates the GetRootList request.
func (client *XMLClient) GetRootListCreateRequest(ctx context.Context, options *XMLGetRootListOptions) (*azcore.Request, error) {
	urlPath := "/xml/root-list"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// GetRootListHandleResponse handles the GetRootList response.
func (client *XMLClient) GetRootListHandleResponse(resp *azcore.Response) (*BananaArrayResponse, error) {
	result := BananaArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result)
}

// GetRootListHandleError handles the GetRootList error response.
func (client *XMLClient) GetRootListHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// GetRootListSingleItem - Gets a list with a single item.
func (client *XMLClient) GetRootListSingleItem(ctx context.Context, options *XMLGetRootListSingleItemOptions) (*BananaArrayResponse, error) {
	req, err := client.GetRootListSingleItemCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetRootListSingleItemHandleError(resp)
	}
	result, err := client.GetRootListSingleItemHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetRootListSingleItemCreateRequest creates the GetRootListSingleItem request.
func (client *XMLClient) GetRootListSingleItemCreateRequest(ctx context.Context, options *XMLGetRootListSingleItemOptions) (*azcore.Request, error) {
	urlPath := "/xml/root-list-single-item"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// GetRootListSingleItemHandleResponse handles the GetRootListSingleItem response.
func (client *XMLClient) GetRootListSingleItemHandleResponse(resp *azcore.Response) (*BananaArrayResponse, error) {
	result := BananaArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result)
}

// GetRootListSingleItemHandleError handles the GetRootListSingleItem error response.
func (client *XMLClient) GetRootListSingleItemHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// GetServiceProperties - Gets storage service properties.
func (client *XMLClient) GetServiceProperties(ctx context.Context, options *XMLGetServicePropertiesOptions) (*StorageServicePropertiesResponse, error) {
	req, err := client.GetServicePropertiesCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetServicePropertiesHandleError(resp)
	}
	result, err := client.GetServicePropertiesHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetServicePropertiesCreateRequest creates the GetServiceProperties request.
func (client *XMLClient) GetServicePropertiesCreateRequest(ctx context.Context, options *XMLGetServicePropertiesOptions) (*azcore.Request, error) {
	urlPath := "/xml/"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("comp", "properties")
	query.Set("restype", "service")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// GetServicePropertiesHandleResponse handles the GetServiceProperties response.
func (client *XMLClient) GetServicePropertiesHandleResponse(resp *azcore.Response) (*StorageServicePropertiesResponse, error) {
	result := StorageServicePropertiesResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result.StorageServiceProperties)
}

// GetServicePropertiesHandleError handles the GetServiceProperties error response.
func (client *XMLClient) GetServicePropertiesHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// GetSimple - Get a simple XML document
func (client *XMLClient) GetSimple(ctx context.Context, options *XMLGetSimpleOptions) (*SlideshowResponse, error) {
	req, err := client.GetSimpleCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetSimpleHandleError(resp)
	}
	result, err := client.GetSimpleHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetSimpleCreateRequest creates the GetSimple request.
func (client *XMLClient) GetSimpleCreateRequest(ctx context.Context, options *XMLGetSimpleOptions) (*azcore.Request, error) {
	urlPath := "/xml/simple"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// GetSimpleHandleResponse handles the GetSimple response.
func (client *XMLClient) GetSimpleHandleResponse(resp *azcore.Response) (*SlideshowResponse, error) {
	result := SlideshowResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result.Slideshow)
}

// GetSimpleHandleError handles the GetSimple error response.
func (client *XMLClient) GetSimpleHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsXML(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetWrappedLists - Get an XML document with multiple wrapped lists
func (client *XMLClient) GetWrappedLists(ctx context.Context, options *XMLGetWrappedListsOptions) (*AppleBarrelResponse, error) {
	req, err := client.GetWrappedListsCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetWrappedListsHandleError(resp)
	}
	result, err := client.GetWrappedListsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetWrappedListsCreateRequest creates the GetWrappedLists request.
func (client *XMLClient) GetWrappedListsCreateRequest(ctx context.Context, options *XMLGetWrappedListsOptions) (*azcore.Request, error) {
	urlPath := "/xml/wrapped-lists"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// GetWrappedListsHandleResponse handles the GetWrappedLists response.
func (client *XMLClient) GetWrappedListsHandleResponse(resp *azcore.Response) (*AppleBarrelResponse, error) {
	result := AppleBarrelResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result.AppleBarrel)
}

// GetWrappedListsHandleError handles the GetWrappedLists error response.
func (client *XMLClient) GetWrappedListsHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// GetXMSText - Get back an XML object with an x-ms-text property, which should translate to the returned object's 'language' property being 'english' and its 'content' property being 'I am text'
func (client *XMLClient) GetXMSText(ctx context.Context, options *XMLGetXMSTextOptions) (*ObjectWithXMSTextPropertyResponse, error) {
	req, err := client.GetXMSTextCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetXMSTextHandleError(resp)
	}
	result, err := client.GetXMSTextHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetXMSTextCreateRequest creates the GetXMSText request.
func (client *XMLClient) GetXMSTextCreateRequest(ctx context.Context, options *XMLGetXMSTextOptions) (*azcore.Request, error) {
	urlPath := "/xml/x-ms-text"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// GetXMSTextHandleResponse handles the GetXMSText response.
func (client *XMLClient) GetXMSTextHandleResponse(resp *azcore.Response) (*ObjectWithXMSTextPropertyResponse, error) {
	result := ObjectWithXMSTextPropertyResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result.Data)
}

// GetXMSTextHandleError handles the GetXMSText error response.
func (client *XMLClient) GetXMSTextHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// JSONInput - A Swagger with XML that has one operation that takes JSON as input. You need to send the ID number 42
func (client *XMLClient) JSONInput(ctx context.Context, properties JSONInput, options *XMLJSONInputOptions) (*http.Response, error) {
	req, err := client.JSONInputCreateRequest(ctx, properties, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.JSONInputHandleError(resp)
	}
	return resp.Response, nil
}

// JSONInputCreateRequest creates the JSONInput request.
func (client *XMLClient) JSONInputCreateRequest(ctx context.Context, properties JSONInput, options *XMLJSONInputOptions) (*azcore.Request, error) {
	urlPath := "/xml/jsoninput"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	return req, req.MarshalAsJSON(properties)
}

// JSONInputHandleError handles the JSONInput error response.
func (client *XMLClient) JSONInputHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// JSONOutput - A Swagger with XML that has one operation that returns JSON. ID number 42
func (client *XMLClient) JSONOutput(ctx context.Context, options *XMLJSONOutputOptions) (*JSONOutputResponse, error) {
	req, err := client.JSONOutputCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.JSONOutputHandleError(resp)
	}
	result, err := client.JSONOutputHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// JSONOutputCreateRequest creates the JSONOutput request.
func (client *XMLClient) JSONOutputCreateRequest(ctx context.Context, options *XMLJSONOutputOptions) (*azcore.Request, error) {
	urlPath := "/xml/jsonoutput"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// JSONOutputHandleResponse handles the JSONOutput response.
func (client *XMLClient) JSONOutputHandleResponse(resp *azcore.Response) (*JSONOutputResponse, error) {
	result := JSONOutputResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.JSONOutput)
}

// JSONOutputHandleError handles the JSONOutput error response.
func (client *XMLClient) JSONOutputHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// ListBlobs - Lists blobs in a storage container.
func (client *XMLClient) ListBlobs(ctx context.Context, options *XMLListBlobsOptions) (*ListBlobsResponseResponse, error) {
	req, err := client.ListBlobsCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.ListBlobsHandleError(resp)
	}
	result, err := client.ListBlobsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ListBlobsCreateRequest creates the ListBlobs request.
func (client *XMLClient) ListBlobsCreateRequest(ctx context.Context, options *XMLListBlobsOptions) (*azcore.Request, error) {
	urlPath := "/xml/mycontainer"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("comp", "list")
	query.Set("restype", "container")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// ListBlobsHandleResponse handles the ListBlobs response.
func (client *XMLClient) ListBlobsHandleResponse(resp *azcore.Response) (*ListBlobsResponseResponse, error) {
	result := ListBlobsResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result.EnumerationResults)
}

// ListBlobsHandleError handles the ListBlobs error response.
func (client *XMLClient) ListBlobsHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// ListContainers - Lists containers in a storage account.
func (client *XMLClient) ListContainers(ctx context.Context, options *XMLListContainersOptions) (*ListContainersResponseResponse, error) {
	req, err := client.ListContainersCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.ListContainersHandleError(resp)
	}
	result, err := client.ListContainersHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ListContainersCreateRequest creates the ListContainers request.
func (client *XMLClient) ListContainersCreateRequest(ctx context.Context, options *XMLListContainersOptions) (*azcore.Request, error) {
	urlPath := "/xml/"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("comp", "list")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// ListContainersHandleResponse handles the ListContainers response.
func (client *XMLClient) ListContainersHandleResponse(resp *azcore.Response) (*ListContainersResponseResponse, error) {
	result := ListContainersResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsXML(&result.EnumerationResults)
}

// ListContainersHandleError handles the ListContainers error response.
func (client *XMLClient) ListContainersHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// PutACLs - Puts storage ACLs for a container.
func (client *XMLClient) PutACLs(ctx context.Context, properties []SignedIDentifier, options *XMLPutACLsOptions) (*http.Response, error) {
	req, err := client.PutACLsCreateRequest(ctx, properties, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, client.PutACLsHandleError(resp)
	}
	return resp.Response, nil
}

// PutACLsCreateRequest creates the PutACLs request.
func (client *XMLClient) PutACLsCreateRequest(ctx context.Context, properties []SignedIDentifier, options *XMLPutACLsOptions) (*azcore.Request, error) {
	urlPath := "/xml/mycontainer"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("comp", "acl")
	query.Set("restype", "container")
	req.URL.RawQuery = query.Encode()
	type wrapper struct {
		XMLName    xml.Name            `xml:"SignedIdentifiers"`
		Properties *[]SignedIDentifier `xml:"SignedIdentifier"`
	}
	return req, req.MarshalAsXML(wrapper{Properties: &properties})
}

// PutACLsHandleError handles the PutACLs error response.
func (client *XMLClient) PutACLsHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// PutComplexTypeRefNoMeta - Puts a complex type that has a ref to a complex type with no XML node
func (client *XMLClient) PutComplexTypeRefNoMeta(ctx context.Context, model RootWithRefAndNoMeta, options *XMLPutComplexTypeRefNoMetaOptions) (*http.Response, error) {
	req, err := client.PutComplexTypeRefNoMetaCreateRequest(ctx, model, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, client.PutComplexTypeRefNoMetaHandleError(resp)
	}
	return resp.Response, nil
}

// PutComplexTypeRefNoMetaCreateRequest creates the PutComplexTypeRefNoMeta request.
func (client *XMLClient) PutComplexTypeRefNoMetaCreateRequest(ctx context.Context, model RootWithRefAndNoMeta, options *XMLPutComplexTypeRefNoMetaOptions) (*azcore.Request, error) {
	urlPath := "/xml/complex-type-ref-no-meta"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	return req, req.MarshalAsXML(model)
}

// PutComplexTypeRefNoMetaHandleError handles the PutComplexTypeRefNoMeta error response.
func (client *XMLClient) PutComplexTypeRefNoMetaHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// PutComplexTypeRefWithMeta - Puts a complex type that has a ref to a complex type with XML node
func (client *XMLClient) PutComplexTypeRefWithMeta(ctx context.Context, model RootWithRefAndMeta, options *XMLPutComplexTypeRefWithMetaOptions) (*http.Response, error) {
	req, err := client.PutComplexTypeRefWithMetaCreateRequest(ctx, model, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, client.PutComplexTypeRefWithMetaHandleError(resp)
	}
	return resp.Response, nil
}

// PutComplexTypeRefWithMetaCreateRequest creates the PutComplexTypeRefWithMeta request.
func (client *XMLClient) PutComplexTypeRefWithMetaCreateRequest(ctx context.Context, model RootWithRefAndMeta, options *XMLPutComplexTypeRefWithMetaOptions) (*azcore.Request, error) {
	urlPath := "/xml/complex-type-ref-with-meta"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	return req, req.MarshalAsXML(model)
}

// PutComplexTypeRefWithMetaHandleError handles the PutComplexTypeRefWithMeta error response.
func (client *XMLClient) PutComplexTypeRefWithMetaHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// PutEmptyChildElement - Puts a value with an empty child element.
func (client *XMLClient) PutEmptyChildElement(ctx context.Context, banana Banana, options *XMLPutEmptyChildElementOptions) (*http.Response, error) {
	req, err := client.PutEmptyChildElementCreateRequest(ctx, banana, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, client.PutEmptyChildElementHandleError(resp)
	}
	return resp.Response, nil
}

// PutEmptyChildElementCreateRequest creates the PutEmptyChildElement request.
func (client *XMLClient) PutEmptyChildElementCreateRequest(ctx context.Context, banana Banana, options *XMLPutEmptyChildElementOptions) (*azcore.Request, error) {
	urlPath := "/xml/empty-child-element"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	return req, req.MarshalAsXML(banana)
}

// PutEmptyChildElementHandleError handles the PutEmptyChildElement error response.
func (client *XMLClient) PutEmptyChildElementHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// PutEmptyList - Puts an empty list.
func (client *XMLClient) PutEmptyList(ctx context.Context, slideshow Slideshow, options *XMLPutEmptyListOptions) (*http.Response, error) {
	req, err := client.PutEmptyListCreateRequest(ctx, slideshow, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, client.PutEmptyListHandleError(resp)
	}
	return resp.Response, nil
}

// PutEmptyListCreateRequest creates the PutEmptyList request.
func (client *XMLClient) PutEmptyListCreateRequest(ctx context.Context, slideshow Slideshow, options *XMLPutEmptyListOptions) (*azcore.Request, error) {
	urlPath := "/xml/empty-list"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	return req, req.MarshalAsXML(slideshow)
}

// PutEmptyListHandleError handles the PutEmptyList error response.
func (client *XMLClient) PutEmptyListHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// PutEmptyRootList - Puts an empty list as the root element.
func (client *XMLClient) PutEmptyRootList(ctx context.Context, bananas []Banana, options *XMLPutEmptyRootListOptions) (*http.Response, error) {
	req, err := client.PutEmptyRootListCreateRequest(ctx, bananas, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, client.PutEmptyRootListHandleError(resp)
	}
	return resp.Response, nil
}

// PutEmptyRootListCreateRequest creates the PutEmptyRootList request.
func (client *XMLClient) PutEmptyRootListCreateRequest(ctx context.Context, bananas []Banana, options *XMLPutEmptyRootListOptions) (*azcore.Request, error) {
	urlPath := "/xml/empty-root-list"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	type wrapper struct {
		XMLName xml.Name  `xml:"bananas"`
		Bananas *[]Banana `xml:"banana"`
	}
	return req, req.MarshalAsXML(wrapper{Bananas: &bananas})
}

// PutEmptyRootListHandleError handles the PutEmptyRootList error response.
func (client *XMLClient) PutEmptyRootListHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// PutEmptyWrappedLists - Puts some empty wrapped lists.
func (client *XMLClient) PutEmptyWrappedLists(ctx context.Context, appleBarrel AppleBarrel, options *XMLPutEmptyWrappedListsOptions) (*http.Response, error) {
	req, err := client.PutEmptyWrappedListsCreateRequest(ctx, appleBarrel, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, client.PutEmptyWrappedListsHandleError(resp)
	}
	return resp.Response, nil
}

// PutEmptyWrappedListsCreateRequest creates the PutEmptyWrappedLists request.
func (client *XMLClient) PutEmptyWrappedListsCreateRequest(ctx context.Context, appleBarrel AppleBarrel, options *XMLPutEmptyWrappedListsOptions) (*azcore.Request, error) {
	urlPath := "/xml/empty-wrapped-lists"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	return req, req.MarshalAsXML(appleBarrel)
}

// PutEmptyWrappedListsHandleError handles the PutEmptyWrappedLists error response.
func (client *XMLClient) PutEmptyWrappedListsHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// PutRootList - Puts a list as the root element.
func (client *XMLClient) PutRootList(ctx context.Context, bananas []Banana, options *XMLPutRootListOptions) (*http.Response, error) {
	req, err := client.PutRootListCreateRequest(ctx, bananas, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, client.PutRootListHandleError(resp)
	}
	return resp.Response, nil
}

// PutRootListCreateRequest creates the PutRootList request.
func (client *XMLClient) PutRootListCreateRequest(ctx context.Context, bananas []Banana, options *XMLPutRootListOptions) (*azcore.Request, error) {
	urlPath := "/xml/root-list"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	type wrapper struct {
		XMLName xml.Name  `xml:"bananas"`
		Bananas *[]Banana `xml:"banana"`
	}
	return req, req.MarshalAsXML(wrapper{Bananas: &bananas})
}

// PutRootListHandleError handles the PutRootList error response.
func (client *XMLClient) PutRootListHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// PutRootListSingleItem - Puts a list with a single item.
func (client *XMLClient) PutRootListSingleItem(ctx context.Context, bananas []Banana, options *XMLPutRootListSingleItemOptions) (*http.Response, error) {
	req, err := client.PutRootListSingleItemCreateRequest(ctx, bananas, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, client.PutRootListSingleItemHandleError(resp)
	}
	return resp.Response, nil
}

// PutRootListSingleItemCreateRequest creates the PutRootListSingleItem request.
func (client *XMLClient) PutRootListSingleItemCreateRequest(ctx context.Context, bananas []Banana, options *XMLPutRootListSingleItemOptions) (*azcore.Request, error) {
	urlPath := "/xml/root-list-single-item"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	type wrapper struct {
		XMLName xml.Name  `xml:"bananas"`
		Bananas *[]Banana `xml:"banana"`
	}
	return req, req.MarshalAsXML(wrapper{Bananas: &bananas})
}

// PutRootListSingleItemHandleError handles the PutRootListSingleItem error response.
func (client *XMLClient) PutRootListSingleItemHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// PutServiceProperties - Puts storage service properties.
func (client *XMLClient) PutServiceProperties(ctx context.Context, properties StorageServiceProperties, options *XMLPutServicePropertiesOptions) (*http.Response, error) {
	req, err := client.PutServicePropertiesCreateRequest(ctx, properties, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, client.PutServicePropertiesHandleError(resp)
	}
	return resp.Response, nil
}

// PutServicePropertiesCreateRequest creates the PutServiceProperties request.
func (client *XMLClient) PutServicePropertiesCreateRequest(ctx context.Context, properties StorageServiceProperties, options *XMLPutServicePropertiesOptions) (*azcore.Request, error) {
	urlPath := "/xml/"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("comp", "properties")
	query.Set("restype", "service")
	req.URL.RawQuery = query.Encode()
	return req, req.MarshalAsXML(properties)
}

// PutServicePropertiesHandleError handles the PutServiceProperties error response.
func (client *XMLClient) PutServicePropertiesHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// PutSimple - Put a simple XML document
func (client *XMLClient) PutSimple(ctx context.Context, slideshow Slideshow, options *XMLPutSimpleOptions) (*http.Response, error) {
	req, err := client.PutSimpleCreateRequest(ctx, slideshow, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, client.PutSimpleHandleError(resp)
	}
	return resp.Response, nil
}

// PutSimpleCreateRequest creates the PutSimple request.
func (client *XMLClient) PutSimpleCreateRequest(ctx context.Context, slideshow Slideshow, options *XMLPutSimpleOptions) (*azcore.Request, error) {
	urlPath := "/xml/simple"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/xml")
	return req, req.MarshalAsXML(slideshow)
}

// PutSimpleHandleError handles the PutSimple error response.
func (client *XMLClient) PutSimpleHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsXML(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutWrappedLists - Put an XML document with multiple wrapped lists
func (client *XMLClient) PutWrappedLists(ctx context.Context, wrappedLists AppleBarrel, options *XMLPutWrappedListsOptions) (*http.Response, error) {
	req, err := client.PutWrappedListsCreateRequest(ctx, wrappedLists, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, client.PutWrappedListsHandleError(resp)
	}
	return resp.Response, nil
}

// PutWrappedListsCreateRequest creates the PutWrappedLists request.
func (client *XMLClient) PutWrappedListsCreateRequest(ctx context.Context, wrappedLists AppleBarrel, options *XMLPutWrappedListsOptions) (*azcore.Request, error) {
	urlPath := "/xml/wrapped-lists"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/xml")
	return req, req.MarshalAsXML(wrappedLists)
}

// PutWrappedListsHandleError handles the PutWrappedLists error response.
func (client *XMLClient) PutWrappedListsHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsXML(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}
