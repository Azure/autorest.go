//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package xmlgroup

import (
	"context"
	"encoding/xml"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// XMLClient contains the methods for the XML group.
// Don't use this type directly, use NewXMLClient() instead.
type XMLClient struct {
	pl runtime.Pipeline
}

// NewXMLClient creates a new instance of XMLClient with the specified values.
// options - pass nil to accept the default values.
func NewXMLClient(options *azcore.ClientOptions) *XMLClient {
	cp := azcore.ClientOptions{}
	if options != nil {
		cp = *options
	}
	client := &XMLClient{
		pl: runtime.NewPipeline(module, version, nil, nil, &cp),
	}
	return client
}

// GetACLs - Gets storage ACLs for a container.
// If the operation fails it returns a generic error.
// options - XMLClientGetACLsOptions contains the optional parameters for the XMLClient.GetACLs method.
func (client *XMLClient) GetACLs(ctx context.Context, options *XMLClientGetACLsOptions) (XMLClientGetACLsResponse, error) {
	req, err := client.getACLsCreateRequest(ctx, options)
	if err != nil {
		return XMLClientGetACLsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientGetACLsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return XMLClientGetACLsResponse{}, client.getACLsHandleError(resp)
	}
	return client.getACLsHandleResponse(resp)
}

// getACLsCreateRequest creates the GetACLs request.
func (client *XMLClient) getACLsCreateRequest(ctx context.Context, options *XMLClientGetACLsOptions) (*policy.Request, error) {
	urlPath := "/xml/mycontainer"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("comp", "acl")
	reqQP.Set("restype", "container")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/xml")
	return req, nil
}

// getACLsHandleResponse handles the GetACLs response.
func (client *XMLClient) getACLsHandleResponse(resp *http.Response) (XMLClientGetACLsResponse, error) {
	result := XMLClientGetACLsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsXML(resp, &result); err != nil {
		return XMLClientGetACLsResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getACLsHandleError handles the GetACLs error response.
func (client *XMLClient) getACLsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// GetBytes - Get an XML document with binary property
// If the operation fails it returns the *Error error type.
// options - XMLClientGetBytesOptions contains the optional parameters for the XMLClient.GetBytes method.
func (client *XMLClient) GetBytes(ctx context.Context, options *XMLClientGetBytesOptions) (XMLClientGetBytesResponse, error) {
	req, err := client.getBytesCreateRequest(ctx, options)
	if err != nil {
		return XMLClientGetBytesResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientGetBytesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return XMLClientGetBytesResponse{}, client.getBytesHandleError(resp)
	}
	return client.getBytesHandleResponse(resp)
}

// getBytesCreateRequest creates the GetBytes request.
func (client *XMLClient) getBytesCreateRequest(ctx context.Context, options *XMLClientGetBytesOptions) (*policy.Request, error) {
	urlPath := "/xml/bytes"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/xml")
	return req, nil
}

// getBytesHandleResponse handles the GetBytes response.
func (client *XMLClient) getBytesHandleResponse(resp *http.Response) (XMLClientGetBytesResponse, error) {
	result := XMLClientGetBytesResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsXML(resp, &result.ModelWithByteProperty); err != nil {
		return XMLClientGetBytesResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getBytesHandleError handles the GetBytes error response.
func (client *XMLClient) getBytesHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsXML(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetComplexTypeRefNoMeta - Get a complex type that has a ref to a complex type with no XML node
// If the operation fails it returns a generic error.
// options - XMLClientGetComplexTypeRefNoMetaOptions contains the optional parameters for the XMLClient.GetComplexTypeRefNoMeta
// method.
func (client *XMLClient) GetComplexTypeRefNoMeta(ctx context.Context, options *XMLClientGetComplexTypeRefNoMetaOptions) (XMLClientGetComplexTypeRefNoMetaResponse, error) {
	req, err := client.getComplexTypeRefNoMetaCreateRequest(ctx, options)
	if err != nil {
		return XMLClientGetComplexTypeRefNoMetaResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientGetComplexTypeRefNoMetaResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return XMLClientGetComplexTypeRefNoMetaResponse{}, client.getComplexTypeRefNoMetaHandleError(resp)
	}
	return client.getComplexTypeRefNoMetaHandleResponse(resp)
}

// getComplexTypeRefNoMetaCreateRequest creates the GetComplexTypeRefNoMeta request.
func (client *XMLClient) getComplexTypeRefNoMetaCreateRequest(ctx context.Context, options *XMLClientGetComplexTypeRefNoMetaOptions) (*policy.Request, error) {
	urlPath := "/xml/complex-type-ref-no-meta"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/xml")
	return req, nil
}

// getComplexTypeRefNoMetaHandleResponse handles the GetComplexTypeRefNoMeta response.
func (client *XMLClient) getComplexTypeRefNoMetaHandleResponse(resp *http.Response) (XMLClientGetComplexTypeRefNoMetaResponse, error) {
	result := XMLClientGetComplexTypeRefNoMetaResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsXML(resp, &result.RootWithRefAndNoMeta); err != nil {
		return XMLClientGetComplexTypeRefNoMetaResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getComplexTypeRefNoMetaHandleError handles the GetComplexTypeRefNoMeta error response.
func (client *XMLClient) getComplexTypeRefNoMetaHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// GetComplexTypeRefWithMeta - Get a complex type that has a ref to a complex type with XML node
// If the operation fails it returns a generic error.
// options - XMLClientGetComplexTypeRefWithMetaOptions contains the optional parameters for the XMLClient.GetComplexTypeRefWithMeta
// method.
func (client *XMLClient) GetComplexTypeRefWithMeta(ctx context.Context, options *XMLClientGetComplexTypeRefWithMetaOptions) (XMLClientGetComplexTypeRefWithMetaResponse, error) {
	req, err := client.getComplexTypeRefWithMetaCreateRequest(ctx, options)
	if err != nil {
		return XMLClientGetComplexTypeRefWithMetaResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientGetComplexTypeRefWithMetaResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return XMLClientGetComplexTypeRefWithMetaResponse{}, client.getComplexTypeRefWithMetaHandleError(resp)
	}
	return client.getComplexTypeRefWithMetaHandleResponse(resp)
}

// getComplexTypeRefWithMetaCreateRequest creates the GetComplexTypeRefWithMeta request.
func (client *XMLClient) getComplexTypeRefWithMetaCreateRequest(ctx context.Context, options *XMLClientGetComplexTypeRefWithMetaOptions) (*policy.Request, error) {
	urlPath := "/xml/complex-type-ref-with-meta"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/xml")
	return req, nil
}

// getComplexTypeRefWithMetaHandleResponse handles the GetComplexTypeRefWithMeta response.
func (client *XMLClient) getComplexTypeRefWithMetaHandleResponse(resp *http.Response) (XMLClientGetComplexTypeRefWithMetaResponse, error) {
	result := XMLClientGetComplexTypeRefWithMetaResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsXML(resp, &result.RootWithRefAndMeta); err != nil {
		return XMLClientGetComplexTypeRefWithMetaResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getComplexTypeRefWithMetaHandleError handles the GetComplexTypeRefWithMeta error response.
func (client *XMLClient) getComplexTypeRefWithMetaHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// GetEmptyChildElement - Gets an XML document with an empty child element.
// If the operation fails it returns a generic error.
// options - XMLClientGetEmptyChildElementOptions contains the optional parameters for the XMLClient.GetEmptyChildElement
// method.
func (client *XMLClient) GetEmptyChildElement(ctx context.Context, options *XMLClientGetEmptyChildElementOptions) (XMLClientGetEmptyChildElementResponse, error) {
	req, err := client.getEmptyChildElementCreateRequest(ctx, options)
	if err != nil {
		return XMLClientGetEmptyChildElementResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientGetEmptyChildElementResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return XMLClientGetEmptyChildElementResponse{}, client.getEmptyChildElementHandleError(resp)
	}
	return client.getEmptyChildElementHandleResponse(resp)
}

// getEmptyChildElementCreateRequest creates the GetEmptyChildElement request.
func (client *XMLClient) getEmptyChildElementCreateRequest(ctx context.Context, options *XMLClientGetEmptyChildElementOptions) (*policy.Request, error) {
	urlPath := "/xml/empty-child-element"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/xml")
	return req, nil
}

// getEmptyChildElementHandleResponse handles the GetEmptyChildElement response.
func (client *XMLClient) getEmptyChildElementHandleResponse(resp *http.Response) (XMLClientGetEmptyChildElementResponse, error) {
	result := XMLClientGetEmptyChildElementResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsXML(resp, &result.Banana); err != nil {
		return XMLClientGetEmptyChildElementResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getEmptyChildElementHandleError handles the GetEmptyChildElement error response.
func (client *XMLClient) getEmptyChildElementHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// GetEmptyList - Get an empty list.
// If the operation fails it returns a generic error.
// options - XMLClientGetEmptyListOptions contains the optional parameters for the XMLClient.GetEmptyList method.
func (client *XMLClient) GetEmptyList(ctx context.Context, options *XMLClientGetEmptyListOptions) (XMLClientGetEmptyListResponse, error) {
	req, err := client.getEmptyListCreateRequest(ctx, options)
	if err != nil {
		return XMLClientGetEmptyListResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientGetEmptyListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return XMLClientGetEmptyListResponse{}, client.getEmptyListHandleError(resp)
	}
	return client.getEmptyListHandleResponse(resp)
}

// getEmptyListCreateRequest creates the GetEmptyList request.
func (client *XMLClient) getEmptyListCreateRequest(ctx context.Context, options *XMLClientGetEmptyListOptions) (*policy.Request, error) {
	urlPath := "/xml/empty-list"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/xml")
	return req, nil
}

// getEmptyListHandleResponse handles the GetEmptyList response.
func (client *XMLClient) getEmptyListHandleResponse(resp *http.Response) (XMLClientGetEmptyListResponse, error) {
	result := XMLClientGetEmptyListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsXML(resp, &result.Slideshow); err != nil {
		return XMLClientGetEmptyListResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getEmptyListHandleError handles the GetEmptyList error response.
func (client *XMLClient) getEmptyListHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// GetEmptyRootList - Gets an empty list as the root element.
// If the operation fails it returns a generic error.
// options - XMLClientGetEmptyRootListOptions contains the optional parameters for the XMLClient.GetEmptyRootList method.
func (client *XMLClient) GetEmptyRootList(ctx context.Context, options *XMLClientGetEmptyRootListOptions) (XMLClientGetEmptyRootListResponse, error) {
	req, err := client.getEmptyRootListCreateRequest(ctx, options)
	if err != nil {
		return XMLClientGetEmptyRootListResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientGetEmptyRootListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return XMLClientGetEmptyRootListResponse{}, client.getEmptyRootListHandleError(resp)
	}
	return client.getEmptyRootListHandleResponse(resp)
}

// getEmptyRootListCreateRequest creates the GetEmptyRootList request.
func (client *XMLClient) getEmptyRootListCreateRequest(ctx context.Context, options *XMLClientGetEmptyRootListOptions) (*policy.Request, error) {
	urlPath := "/xml/empty-root-list"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/xml")
	return req, nil
}

// getEmptyRootListHandleResponse handles the GetEmptyRootList response.
func (client *XMLClient) getEmptyRootListHandleResponse(resp *http.Response) (XMLClientGetEmptyRootListResponse, error) {
	result := XMLClientGetEmptyRootListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsXML(resp, &result); err != nil {
		return XMLClientGetEmptyRootListResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getEmptyRootListHandleError handles the GetEmptyRootList error response.
func (client *XMLClient) getEmptyRootListHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// GetEmptyWrappedLists - Gets some empty wrapped lists.
// If the operation fails it returns a generic error.
// options - XMLClientGetEmptyWrappedListsOptions contains the optional parameters for the XMLClient.GetEmptyWrappedLists
// method.
func (client *XMLClient) GetEmptyWrappedLists(ctx context.Context, options *XMLClientGetEmptyWrappedListsOptions) (XMLClientGetEmptyWrappedListsResponse, error) {
	req, err := client.getEmptyWrappedListsCreateRequest(ctx, options)
	if err != nil {
		return XMLClientGetEmptyWrappedListsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientGetEmptyWrappedListsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return XMLClientGetEmptyWrappedListsResponse{}, client.getEmptyWrappedListsHandleError(resp)
	}
	return client.getEmptyWrappedListsHandleResponse(resp)
}

// getEmptyWrappedListsCreateRequest creates the GetEmptyWrappedLists request.
func (client *XMLClient) getEmptyWrappedListsCreateRequest(ctx context.Context, options *XMLClientGetEmptyWrappedListsOptions) (*policy.Request, error) {
	urlPath := "/xml/empty-wrapped-lists"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/xml")
	return req, nil
}

// getEmptyWrappedListsHandleResponse handles the GetEmptyWrappedLists response.
func (client *XMLClient) getEmptyWrappedListsHandleResponse(resp *http.Response) (XMLClientGetEmptyWrappedListsResponse, error) {
	result := XMLClientGetEmptyWrappedListsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsXML(resp, &result.AppleBarrel); err != nil {
		return XMLClientGetEmptyWrappedListsResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getEmptyWrappedListsHandleError handles the GetEmptyWrappedLists error response.
func (client *XMLClient) getEmptyWrappedListsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// GetHeaders - Get strongly-typed response headers.
// If the operation fails it returns a generic error.
// options - XMLClientGetHeadersOptions contains the optional parameters for the XMLClient.GetHeaders method.
func (client *XMLClient) GetHeaders(ctx context.Context, options *XMLClientGetHeadersOptions) (XMLClientGetHeadersResponse, error) {
	req, err := client.getHeadersCreateRequest(ctx, options)
	if err != nil {
		return XMLClientGetHeadersResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientGetHeadersResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return XMLClientGetHeadersResponse{}, client.getHeadersHandleError(resp)
	}
	return client.getHeadersHandleResponse(resp)
}

// getHeadersCreateRequest creates the GetHeaders request.
func (client *XMLClient) getHeadersCreateRequest(ctx context.Context, options *XMLClientGetHeadersOptions) (*policy.Request, error) {
	urlPath := "/xml/headers"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// getHeadersHandleResponse handles the GetHeaders response.
func (client *XMLClient) getHeadersHandleResponse(resp *http.Response) (XMLClientGetHeadersResponse, error) {
	result := XMLClientGetHeadersResponse{RawResponse: resp}
	if val := resp.Header.Get("Custom-Header"); val != "" {
		result.CustomHeader = &val
	}
	return result, nil
}

// getHeadersHandleError handles the GetHeaders error response.
func (client *XMLClient) getHeadersHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// GetRootList - Gets a list as the root element.
// If the operation fails it returns a generic error.
// options - XMLClientGetRootListOptions contains the optional parameters for the XMLClient.GetRootList method.
func (client *XMLClient) GetRootList(ctx context.Context, options *XMLClientGetRootListOptions) (XMLClientGetRootListResponse, error) {
	req, err := client.getRootListCreateRequest(ctx, options)
	if err != nil {
		return XMLClientGetRootListResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientGetRootListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return XMLClientGetRootListResponse{}, client.getRootListHandleError(resp)
	}
	return client.getRootListHandleResponse(resp)
}

// getRootListCreateRequest creates the GetRootList request.
func (client *XMLClient) getRootListCreateRequest(ctx context.Context, options *XMLClientGetRootListOptions) (*policy.Request, error) {
	urlPath := "/xml/root-list"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/xml")
	return req, nil
}

// getRootListHandleResponse handles the GetRootList response.
func (client *XMLClient) getRootListHandleResponse(resp *http.Response) (XMLClientGetRootListResponse, error) {
	result := XMLClientGetRootListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsXML(resp, &result); err != nil {
		return XMLClientGetRootListResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getRootListHandleError handles the GetRootList error response.
func (client *XMLClient) getRootListHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// GetRootListSingleItem - Gets a list with a single item.
// If the operation fails it returns a generic error.
// options - XMLClientGetRootListSingleItemOptions contains the optional parameters for the XMLClient.GetRootListSingleItem
// method.
func (client *XMLClient) GetRootListSingleItem(ctx context.Context, options *XMLClientGetRootListSingleItemOptions) (XMLClientGetRootListSingleItemResponse, error) {
	req, err := client.getRootListSingleItemCreateRequest(ctx, options)
	if err != nil {
		return XMLClientGetRootListSingleItemResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientGetRootListSingleItemResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return XMLClientGetRootListSingleItemResponse{}, client.getRootListSingleItemHandleError(resp)
	}
	return client.getRootListSingleItemHandleResponse(resp)
}

// getRootListSingleItemCreateRequest creates the GetRootListSingleItem request.
func (client *XMLClient) getRootListSingleItemCreateRequest(ctx context.Context, options *XMLClientGetRootListSingleItemOptions) (*policy.Request, error) {
	urlPath := "/xml/root-list-single-item"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/xml")
	return req, nil
}

// getRootListSingleItemHandleResponse handles the GetRootListSingleItem response.
func (client *XMLClient) getRootListSingleItemHandleResponse(resp *http.Response) (XMLClientGetRootListSingleItemResponse, error) {
	result := XMLClientGetRootListSingleItemResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsXML(resp, &result); err != nil {
		return XMLClientGetRootListSingleItemResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getRootListSingleItemHandleError handles the GetRootListSingleItem error response.
func (client *XMLClient) getRootListSingleItemHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// GetServiceProperties - Gets storage service properties.
// If the operation fails it returns a generic error.
// options - XMLClientGetServicePropertiesOptions contains the optional parameters for the XMLClient.GetServiceProperties
// method.
func (client *XMLClient) GetServiceProperties(ctx context.Context, options *XMLClientGetServicePropertiesOptions) (XMLClientGetServicePropertiesResponse, error) {
	req, err := client.getServicePropertiesCreateRequest(ctx, options)
	if err != nil {
		return XMLClientGetServicePropertiesResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientGetServicePropertiesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return XMLClientGetServicePropertiesResponse{}, client.getServicePropertiesHandleError(resp)
	}
	return client.getServicePropertiesHandleResponse(resp)
}

// getServicePropertiesCreateRequest creates the GetServiceProperties request.
func (client *XMLClient) getServicePropertiesCreateRequest(ctx context.Context, options *XMLClientGetServicePropertiesOptions) (*policy.Request, error) {
	urlPath := "/xml/"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("comp", "properties")
	reqQP.Set("restype", "service")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/xml")
	return req, nil
}

// getServicePropertiesHandleResponse handles the GetServiceProperties response.
func (client *XMLClient) getServicePropertiesHandleResponse(resp *http.Response) (XMLClientGetServicePropertiesResponse, error) {
	result := XMLClientGetServicePropertiesResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsXML(resp, &result.StorageServiceProperties); err != nil {
		return XMLClientGetServicePropertiesResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getServicePropertiesHandleError handles the GetServiceProperties error response.
func (client *XMLClient) getServicePropertiesHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// GetSimple - Get a simple XML document
// If the operation fails it returns the *Error error type.
// options - XMLClientGetSimpleOptions contains the optional parameters for the XMLClient.GetSimple method.
func (client *XMLClient) GetSimple(ctx context.Context, options *XMLClientGetSimpleOptions) (XMLClientGetSimpleResponse, error) {
	req, err := client.getSimpleCreateRequest(ctx, options)
	if err != nil {
		return XMLClientGetSimpleResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientGetSimpleResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return XMLClientGetSimpleResponse{}, client.getSimpleHandleError(resp)
	}
	return client.getSimpleHandleResponse(resp)
}

// getSimpleCreateRequest creates the GetSimple request.
func (client *XMLClient) getSimpleCreateRequest(ctx context.Context, options *XMLClientGetSimpleOptions) (*policy.Request, error) {
	urlPath := "/xml/simple"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/xml")
	return req, nil
}

// getSimpleHandleResponse handles the GetSimple response.
func (client *XMLClient) getSimpleHandleResponse(resp *http.Response) (XMLClientGetSimpleResponse, error) {
	result := XMLClientGetSimpleResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsXML(resp, &result.Slideshow); err != nil {
		return XMLClientGetSimpleResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getSimpleHandleError handles the GetSimple error response.
func (client *XMLClient) getSimpleHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsXML(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetURI - Get an XML document with uri property
// If the operation fails it returns the *Error error type.
// options - XMLClientGetURIOptions contains the optional parameters for the XMLClient.GetURI method.
func (client *XMLClient) GetURI(ctx context.Context, options *XMLClientGetURIOptions) (XMLClientGetURIResponse, error) {
	req, err := client.getURICreateRequest(ctx, options)
	if err != nil {
		return XMLClientGetURIResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientGetURIResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return XMLClientGetURIResponse{}, client.getURIHandleError(resp)
	}
	return client.getURIHandleResponse(resp)
}

// getURICreateRequest creates the GetURI request.
func (client *XMLClient) getURICreateRequest(ctx context.Context, options *XMLClientGetURIOptions) (*policy.Request, error) {
	urlPath := "/xml/url"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/xml")
	return req, nil
}

// getURIHandleResponse handles the GetURI response.
func (client *XMLClient) getURIHandleResponse(resp *http.Response) (XMLClientGetURIResponse, error) {
	result := XMLClientGetURIResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsXML(resp, &result.ModelWithURLProperty); err != nil {
		return XMLClientGetURIResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getURIHandleError handles the GetURI error response.
func (client *XMLClient) getURIHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsXML(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetWrappedLists - Get an XML document with multiple wrapped lists
// If the operation fails it returns a generic error.
// options - XMLClientGetWrappedListsOptions contains the optional parameters for the XMLClient.GetWrappedLists method.
func (client *XMLClient) GetWrappedLists(ctx context.Context, options *XMLClientGetWrappedListsOptions) (XMLClientGetWrappedListsResponse, error) {
	req, err := client.getWrappedListsCreateRequest(ctx, options)
	if err != nil {
		return XMLClientGetWrappedListsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientGetWrappedListsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return XMLClientGetWrappedListsResponse{}, client.getWrappedListsHandleError(resp)
	}
	return client.getWrappedListsHandleResponse(resp)
}

// getWrappedListsCreateRequest creates the GetWrappedLists request.
func (client *XMLClient) getWrappedListsCreateRequest(ctx context.Context, options *XMLClientGetWrappedListsOptions) (*policy.Request, error) {
	urlPath := "/xml/wrapped-lists"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/xml")
	return req, nil
}

// getWrappedListsHandleResponse handles the GetWrappedLists response.
func (client *XMLClient) getWrappedListsHandleResponse(resp *http.Response) (XMLClientGetWrappedListsResponse, error) {
	result := XMLClientGetWrappedListsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsXML(resp, &result.AppleBarrel); err != nil {
		return XMLClientGetWrappedListsResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getWrappedListsHandleError handles the GetWrappedLists error response.
func (client *XMLClient) getWrappedListsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// GetXMsText - Get back an XML object with an x-ms-text property, which should translate to the returned object's 'language'
// property being 'english' and its 'content' property being 'I am text'
// If the operation fails it returns a generic error.
// options - XMLClientGetXMsTextOptions contains the optional parameters for the XMLClient.GetXMsText method.
func (client *XMLClient) GetXMsText(ctx context.Context, options *XMLClientGetXMsTextOptions) (XMLClientGetXMsTextResponse, error) {
	req, err := client.getXMsTextCreateRequest(ctx, options)
	if err != nil {
		return XMLClientGetXMsTextResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientGetXMsTextResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return XMLClientGetXMsTextResponse{}, client.getXMsTextHandleError(resp)
	}
	return client.getXMsTextHandleResponse(resp)
}

// getXMsTextCreateRequest creates the GetXMsText request.
func (client *XMLClient) getXMsTextCreateRequest(ctx context.Context, options *XMLClientGetXMsTextOptions) (*policy.Request, error) {
	urlPath := "/xml/x-ms-text"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/xml")
	return req, nil
}

// getXMsTextHandleResponse handles the GetXMsText response.
func (client *XMLClient) getXMsTextHandleResponse(resp *http.Response) (XMLClientGetXMsTextResponse, error) {
	result := XMLClientGetXMsTextResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsXML(resp, &result.ObjectWithXMsTextProperty); err != nil {
		return XMLClientGetXMsTextResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getXMsTextHandleError handles the GetXMsText error response.
func (client *XMLClient) getXMsTextHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// JSONInput - A Swagger with XML that has one operation that takes JSON as input. You need to send the ID number 42
// If the operation fails it returns a generic error.
// options - XMLClientJSONInputOptions contains the optional parameters for the XMLClient.JSONInput method.
func (client *XMLClient) JSONInput(ctx context.Context, properties JSONInput, options *XMLClientJSONInputOptions) (XMLClientJSONInputResponse, error) {
	req, err := client.jsonInputCreateRequest(ctx, properties, options)
	if err != nil {
		return XMLClientJSONInputResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientJSONInputResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return XMLClientJSONInputResponse{}, client.jsonInputHandleError(resp)
	}
	return XMLClientJSONInputResponse{RawResponse: resp}, nil
}

// jsonInputCreateRequest creates the JSONInput request.
func (client *XMLClient) jsonInputCreateRequest(ctx context.Context, properties JSONInput, options *XMLClientJSONInputOptions) (*policy.Request, error) {
	urlPath := "/xml/jsoninput"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, runtime.MarshalAsJSON(req, properties)
}

// jsonInputHandleError handles the JSONInput error response.
func (client *XMLClient) jsonInputHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// JSONOutput - A Swagger with XML that has one operation that returns JSON. ID number 42
// If the operation fails it returns a generic error.
// options - XMLClientJSONOutputOptions contains the optional parameters for the XMLClient.JSONOutput method.
func (client *XMLClient) JSONOutput(ctx context.Context, options *XMLClientJSONOutputOptions) (XMLClientJSONOutputResponse, error) {
	req, err := client.jsonOutputCreateRequest(ctx, options)
	if err != nil {
		return XMLClientJSONOutputResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientJSONOutputResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return XMLClientJSONOutputResponse{}, client.jsonOutputHandleError(resp)
	}
	return client.jsonOutputHandleResponse(resp)
}

// jsonOutputCreateRequest creates the JSONOutput request.
func (client *XMLClient) jsonOutputCreateRequest(ctx context.Context, options *XMLClientJSONOutputOptions) (*policy.Request, error) {
	urlPath := "/xml/jsonoutput"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// jsonOutputHandleResponse handles the JSONOutput response.
func (client *XMLClient) jsonOutputHandleResponse(resp *http.Response) (XMLClientJSONOutputResponse, error) {
	result := XMLClientJSONOutputResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.JSONOutput); err != nil {
		return XMLClientJSONOutputResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// jsonOutputHandleError handles the JSONOutput error response.
func (client *XMLClient) jsonOutputHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// ListBlobs - Lists blobs in a storage container.
// If the operation fails it returns a generic error.
// options - XMLClientListBlobsOptions contains the optional parameters for the XMLClient.ListBlobs method.
func (client *XMLClient) ListBlobs(ctx context.Context, options *XMLClientListBlobsOptions) (XMLClientListBlobsResponse, error) {
	req, err := client.listBlobsCreateRequest(ctx, options)
	if err != nil {
		return XMLClientListBlobsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientListBlobsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return XMLClientListBlobsResponse{}, client.listBlobsHandleError(resp)
	}
	return client.listBlobsHandleResponse(resp)
}

// listBlobsCreateRequest creates the ListBlobs request.
func (client *XMLClient) listBlobsCreateRequest(ctx context.Context, options *XMLClientListBlobsOptions) (*policy.Request, error) {
	urlPath := "/xml/mycontainer"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("comp", "list")
	reqQP.Set("restype", "container")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/xml")
	return req, nil
}

// listBlobsHandleResponse handles the ListBlobs response.
func (client *XMLClient) listBlobsHandleResponse(resp *http.Response) (XMLClientListBlobsResponse, error) {
	result := XMLClientListBlobsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsXML(resp, &result.ListBlobsResponse); err != nil {
		return XMLClientListBlobsResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listBlobsHandleError handles the ListBlobs error response.
func (client *XMLClient) listBlobsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// ListContainers - Lists containers in a storage account.
// If the operation fails it returns a generic error.
// options - XMLClientListContainersOptions contains the optional parameters for the XMLClient.ListContainers method.
func (client *XMLClient) ListContainers(ctx context.Context, options *XMLClientListContainersOptions) (XMLClientListContainersResponse, error) {
	req, err := client.listContainersCreateRequest(ctx, options)
	if err != nil {
		return XMLClientListContainersResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientListContainersResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return XMLClientListContainersResponse{}, client.listContainersHandleError(resp)
	}
	return client.listContainersHandleResponse(resp)
}

// listContainersCreateRequest creates the ListContainers request.
func (client *XMLClient) listContainersCreateRequest(ctx context.Context, options *XMLClientListContainersOptions) (*policy.Request, error) {
	urlPath := "/xml/"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("comp", "list")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/xml")
	return req, nil
}

// listContainersHandleResponse handles the ListContainers response.
func (client *XMLClient) listContainersHandleResponse(resp *http.Response) (XMLClientListContainersResponse, error) {
	result := XMLClientListContainersResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsXML(resp, &result.ListContainersResponse); err != nil {
		return XMLClientListContainersResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listContainersHandleError handles the ListContainers error response.
func (client *XMLClient) listContainersHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// PutACLs - Puts storage ACLs for a container.
// If the operation fails it returns a generic error.
// options - XMLClientPutACLsOptions contains the optional parameters for the XMLClient.PutACLs method.
func (client *XMLClient) PutACLs(ctx context.Context, properties []*SignedIdentifier, options *XMLClientPutACLsOptions) (XMLClientPutACLsResponse, error) {
	req, err := client.putACLsCreateRequest(ctx, properties, options)
	if err != nil {
		return XMLClientPutACLsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientPutACLsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusCreated) {
		return XMLClientPutACLsResponse{}, client.putACLsHandleError(resp)
	}
	return XMLClientPutACLsResponse{RawResponse: resp}, nil
}

// putACLsCreateRequest creates the PutACLs request.
func (client *XMLClient) putACLsCreateRequest(ctx context.Context, properties []*SignedIdentifier, options *XMLClientPutACLsOptions) (*policy.Request, error) {
	urlPath := "/xml/mycontainer"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("comp", "acl")
	reqQP.Set("restype", "container")
	req.Raw().URL.RawQuery = reqQP.Encode()
	type wrapper struct {
		XMLName    xml.Name             `xml:"SignedIdentifiers"`
		Properties *[]*SignedIdentifier `xml:"SignedIdentifier"`
	}
	return req, runtime.MarshalAsXML(req, wrapper{Properties: &properties})
}

// putACLsHandleError handles the PutACLs error response.
func (client *XMLClient) putACLsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// PutBinary - Put an XML document with binary property
// If the operation fails it returns the *Error error type.
// options - XMLClientPutBinaryOptions contains the optional parameters for the XMLClient.PutBinary method.
func (client *XMLClient) PutBinary(ctx context.Context, slideshow ModelWithByteProperty, options *XMLClientPutBinaryOptions) (XMLClientPutBinaryResponse, error) {
	req, err := client.putBinaryCreateRequest(ctx, slideshow, options)
	if err != nil {
		return XMLClientPutBinaryResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientPutBinaryResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusCreated) {
		return XMLClientPutBinaryResponse{}, client.putBinaryHandleError(resp)
	}
	return XMLClientPutBinaryResponse{RawResponse: resp}, nil
}

// putBinaryCreateRequest creates the PutBinary request.
func (client *XMLClient) putBinaryCreateRequest(ctx context.Context, slideshow ModelWithByteProperty, options *XMLClientPutBinaryOptions) (*policy.Request, error) {
	urlPath := "/xml/bytes"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/xml")
	return req, runtime.MarshalAsXML(req, slideshow)
}

// putBinaryHandleError handles the PutBinary error response.
func (client *XMLClient) putBinaryHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsXML(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutComplexTypeRefNoMeta - Puts a complex type that has a ref to a complex type with no XML node
// If the operation fails it returns a generic error.
// options - XMLClientPutComplexTypeRefNoMetaOptions contains the optional parameters for the XMLClient.PutComplexTypeRefNoMeta
// method.
func (client *XMLClient) PutComplexTypeRefNoMeta(ctx context.Context, model RootWithRefAndNoMeta, options *XMLClientPutComplexTypeRefNoMetaOptions) (XMLClientPutComplexTypeRefNoMetaResponse, error) {
	req, err := client.putComplexTypeRefNoMetaCreateRequest(ctx, model, options)
	if err != nil {
		return XMLClientPutComplexTypeRefNoMetaResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientPutComplexTypeRefNoMetaResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusCreated) {
		return XMLClientPutComplexTypeRefNoMetaResponse{}, client.putComplexTypeRefNoMetaHandleError(resp)
	}
	return XMLClientPutComplexTypeRefNoMetaResponse{RawResponse: resp}, nil
}

// putComplexTypeRefNoMetaCreateRequest creates the PutComplexTypeRefNoMeta request.
func (client *XMLClient) putComplexTypeRefNoMetaCreateRequest(ctx context.Context, model RootWithRefAndNoMeta, options *XMLClientPutComplexTypeRefNoMetaOptions) (*policy.Request, error) {
	urlPath := "/xml/complex-type-ref-no-meta"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, runtime.MarshalAsXML(req, model)
}

// putComplexTypeRefNoMetaHandleError handles the PutComplexTypeRefNoMeta error response.
func (client *XMLClient) putComplexTypeRefNoMetaHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// PutComplexTypeRefWithMeta - Puts a complex type that has a ref to a complex type with XML node
// If the operation fails it returns a generic error.
// options - XMLClientPutComplexTypeRefWithMetaOptions contains the optional parameters for the XMLClient.PutComplexTypeRefWithMeta
// method.
func (client *XMLClient) PutComplexTypeRefWithMeta(ctx context.Context, model RootWithRefAndMeta, options *XMLClientPutComplexTypeRefWithMetaOptions) (XMLClientPutComplexTypeRefWithMetaResponse, error) {
	req, err := client.putComplexTypeRefWithMetaCreateRequest(ctx, model, options)
	if err != nil {
		return XMLClientPutComplexTypeRefWithMetaResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientPutComplexTypeRefWithMetaResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusCreated) {
		return XMLClientPutComplexTypeRefWithMetaResponse{}, client.putComplexTypeRefWithMetaHandleError(resp)
	}
	return XMLClientPutComplexTypeRefWithMetaResponse{RawResponse: resp}, nil
}

// putComplexTypeRefWithMetaCreateRequest creates the PutComplexTypeRefWithMeta request.
func (client *XMLClient) putComplexTypeRefWithMetaCreateRequest(ctx context.Context, model RootWithRefAndMeta, options *XMLClientPutComplexTypeRefWithMetaOptions) (*policy.Request, error) {
	urlPath := "/xml/complex-type-ref-with-meta"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, runtime.MarshalAsXML(req, model)
}

// putComplexTypeRefWithMetaHandleError handles the PutComplexTypeRefWithMeta error response.
func (client *XMLClient) putComplexTypeRefWithMetaHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// PutEmptyChildElement - Puts a value with an empty child element.
// If the operation fails it returns a generic error.
// options - XMLClientPutEmptyChildElementOptions contains the optional parameters for the XMLClient.PutEmptyChildElement
// method.
func (client *XMLClient) PutEmptyChildElement(ctx context.Context, banana Banana, options *XMLClientPutEmptyChildElementOptions) (XMLClientPutEmptyChildElementResponse, error) {
	req, err := client.putEmptyChildElementCreateRequest(ctx, banana, options)
	if err != nil {
		return XMLClientPutEmptyChildElementResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientPutEmptyChildElementResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusCreated) {
		return XMLClientPutEmptyChildElementResponse{}, client.putEmptyChildElementHandleError(resp)
	}
	return XMLClientPutEmptyChildElementResponse{RawResponse: resp}, nil
}

// putEmptyChildElementCreateRequest creates the PutEmptyChildElement request.
func (client *XMLClient) putEmptyChildElementCreateRequest(ctx context.Context, banana Banana, options *XMLClientPutEmptyChildElementOptions) (*policy.Request, error) {
	urlPath := "/xml/empty-child-element"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, runtime.MarshalAsXML(req, banana)
}

// putEmptyChildElementHandleError handles the PutEmptyChildElement error response.
func (client *XMLClient) putEmptyChildElementHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// PutEmptyList - Puts an empty list.
// If the operation fails it returns a generic error.
// options - XMLClientPutEmptyListOptions contains the optional parameters for the XMLClient.PutEmptyList method.
func (client *XMLClient) PutEmptyList(ctx context.Context, slideshow Slideshow, options *XMLClientPutEmptyListOptions) (XMLClientPutEmptyListResponse, error) {
	req, err := client.putEmptyListCreateRequest(ctx, slideshow, options)
	if err != nil {
		return XMLClientPutEmptyListResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientPutEmptyListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusCreated) {
		return XMLClientPutEmptyListResponse{}, client.putEmptyListHandleError(resp)
	}
	return XMLClientPutEmptyListResponse{RawResponse: resp}, nil
}

// putEmptyListCreateRequest creates the PutEmptyList request.
func (client *XMLClient) putEmptyListCreateRequest(ctx context.Context, slideshow Slideshow, options *XMLClientPutEmptyListOptions) (*policy.Request, error) {
	urlPath := "/xml/empty-list"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, runtime.MarshalAsXML(req, slideshow)
}

// putEmptyListHandleError handles the PutEmptyList error response.
func (client *XMLClient) putEmptyListHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// PutEmptyRootList - Puts an empty list as the root element.
// If the operation fails it returns a generic error.
// options - XMLClientPutEmptyRootListOptions contains the optional parameters for the XMLClient.PutEmptyRootList method.
func (client *XMLClient) PutEmptyRootList(ctx context.Context, bananas []*Banana, options *XMLClientPutEmptyRootListOptions) (XMLClientPutEmptyRootListResponse, error) {
	req, err := client.putEmptyRootListCreateRequest(ctx, bananas, options)
	if err != nil {
		return XMLClientPutEmptyRootListResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientPutEmptyRootListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusCreated) {
		return XMLClientPutEmptyRootListResponse{}, client.putEmptyRootListHandleError(resp)
	}
	return XMLClientPutEmptyRootListResponse{RawResponse: resp}, nil
}

// putEmptyRootListCreateRequest creates the PutEmptyRootList request.
func (client *XMLClient) putEmptyRootListCreateRequest(ctx context.Context, bananas []*Banana, options *XMLClientPutEmptyRootListOptions) (*policy.Request, error) {
	urlPath := "/xml/empty-root-list"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	type wrapper struct {
		XMLName xml.Name   `xml:"bananas"`
		Bananas *[]*Banana `xml:"banana"`
	}
	return req, runtime.MarshalAsXML(req, wrapper{Bananas: &bananas})
}

// putEmptyRootListHandleError handles the PutEmptyRootList error response.
func (client *XMLClient) putEmptyRootListHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// PutEmptyWrappedLists - Puts some empty wrapped lists.
// If the operation fails it returns a generic error.
// options - XMLClientPutEmptyWrappedListsOptions contains the optional parameters for the XMLClient.PutEmptyWrappedLists
// method.
func (client *XMLClient) PutEmptyWrappedLists(ctx context.Context, appleBarrel AppleBarrel, options *XMLClientPutEmptyWrappedListsOptions) (XMLClientPutEmptyWrappedListsResponse, error) {
	req, err := client.putEmptyWrappedListsCreateRequest(ctx, appleBarrel, options)
	if err != nil {
		return XMLClientPutEmptyWrappedListsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientPutEmptyWrappedListsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusCreated) {
		return XMLClientPutEmptyWrappedListsResponse{}, client.putEmptyWrappedListsHandleError(resp)
	}
	return XMLClientPutEmptyWrappedListsResponse{RawResponse: resp}, nil
}

// putEmptyWrappedListsCreateRequest creates the PutEmptyWrappedLists request.
func (client *XMLClient) putEmptyWrappedListsCreateRequest(ctx context.Context, appleBarrel AppleBarrel, options *XMLClientPutEmptyWrappedListsOptions) (*policy.Request, error) {
	urlPath := "/xml/empty-wrapped-lists"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, runtime.MarshalAsXML(req, appleBarrel)
}

// putEmptyWrappedListsHandleError handles the PutEmptyWrappedLists error response.
func (client *XMLClient) putEmptyWrappedListsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// PutRootList - Puts a list as the root element.
// If the operation fails it returns a generic error.
// options - XMLClientPutRootListOptions contains the optional parameters for the XMLClient.PutRootList method.
func (client *XMLClient) PutRootList(ctx context.Context, bananas []*Banana, options *XMLClientPutRootListOptions) (XMLClientPutRootListResponse, error) {
	req, err := client.putRootListCreateRequest(ctx, bananas, options)
	if err != nil {
		return XMLClientPutRootListResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientPutRootListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusCreated) {
		return XMLClientPutRootListResponse{}, client.putRootListHandleError(resp)
	}
	return XMLClientPutRootListResponse{RawResponse: resp}, nil
}

// putRootListCreateRequest creates the PutRootList request.
func (client *XMLClient) putRootListCreateRequest(ctx context.Context, bananas []*Banana, options *XMLClientPutRootListOptions) (*policy.Request, error) {
	urlPath := "/xml/root-list"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	type wrapper struct {
		XMLName xml.Name   `xml:"bananas"`
		Bananas *[]*Banana `xml:"banana"`
	}
	return req, runtime.MarshalAsXML(req, wrapper{Bananas: &bananas})
}

// putRootListHandleError handles the PutRootList error response.
func (client *XMLClient) putRootListHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// PutRootListSingleItem - Puts a list with a single item.
// If the operation fails it returns a generic error.
// options - XMLClientPutRootListSingleItemOptions contains the optional parameters for the XMLClient.PutRootListSingleItem
// method.
func (client *XMLClient) PutRootListSingleItem(ctx context.Context, bananas []*Banana, options *XMLClientPutRootListSingleItemOptions) (XMLClientPutRootListSingleItemResponse, error) {
	req, err := client.putRootListSingleItemCreateRequest(ctx, bananas, options)
	if err != nil {
		return XMLClientPutRootListSingleItemResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientPutRootListSingleItemResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusCreated) {
		return XMLClientPutRootListSingleItemResponse{}, client.putRootListSingleItemHandleError(resp)
	}
	return XMLClientPutRootListSingleItemResponse{RawResponse: resp}, nil
}

// putRootListSingleItemCreateRequest creates the PutRootListSingleItem request.
func (client *XMLClient) putRootListSingleItemCreateRequest(ctx context.Context, bananas []*Banana, options *XMLClientPutRootListSingleItemOptions) (*policy.Request, error) {
	urlPath := "/xml/root-list-single-item"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	type wrapper struct {
		XMLName xml.Name   `xml:"bananas"`
		Bananas *[]*Banana `xml:"banana"`
	}
	return req, runtime.MarshalAsXML(req, wrapper{Bananas: &bananas})
}

// putRootListSingleItemHandleError handles the PutRootListSingleItem error response.
func (client *XMLClient) putRootListSingleItemHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// PutServiceProperties - Puts storage service properties.
// If the operation fails it returns a generic error.
// options - XMLClientPutServicePropertiesOptions contains the optional parameters for the XMLClient.PutServiceProperties
// method.
func (client *XMLClient) PutServiceProperties(ctx context.Context, properties StorageServiceProperties, options *XMLClientPutServicePropertiesOptions) (XMLClientPutServicePropertiesResponse, error) {
	req, err := client.putServicePropertiesCreateRequest(ctx, properties, options)
	if err != nil {
		return XMLClientPutServicePropertiesResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientPutServicePropertiesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusCreated) {
		return XMLClientPutServicePropertiesResponse{}, client.putServicePropertiesHandleError(resp)
	}
	return XMLClientPutServicePropertiesResponse{RawResponse: resp}, nil
}

// putServicePropertiesCreateRequest creates the PutServiceProperties request.
func (client *XMLClient) putServicePropertiesCreateRequest(ctx context.Context, properties StorageServiceProperties, options *XMLClientPutServicePropertiesOptions) (*policy.Request, error) {
	urlPath := "/xml/"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("comp", "properties")
	reqQP.Set("restype", "service")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, runtime.MarshalAsXML(req, properties)
}

// putServicePropertiesHandleError handles the PutServiceProperties error response.
func (client *XMLClient) putServicePropertiesHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// PutSimple - Put a simple XML document
// If the operation fails it returns the *Error error type.
// options - XMLClientPutSimpleOptions contains the optional parameters for the XMLClient.PutSimple method.
func (client *XMLClient) PutSimple(ctx context.Context, slideshow Slideshow, options *XMLClientPutSimpleOptions) (XMLClientPutSimpleResponse, error) {
	req, err := client.putSimpleCreateRequest(ctx, slideshow, options)
	if err != nil {
		return XMLClientPutSimpleResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientPutSimpleResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusCreated) {
		return XMLClientPutSimpleResponse{}, client.putSimpleHandleError(resp)
	}
	return XMLClientPutSimpleResponse{RawResponse: resp}, nil
}

// putSimpleCreateRequest creates the PutSimple request.
func (client *XMLClient) putSimpleCreateRequest(ctx context.Context, slideshow Slideshow, options *XMLClientPutSimpleOptions) (*policy.Request, error) {
	urlPath := "/xml/simple"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/xml")
	return req, runtime.MarshalAsXML(req, slideshow)
}

// putSimpleHandleError handles the PutSimple error response.
func (client *XMLClient) putSimpleHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsXML(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutURI - Put an XML document with uri property
// If the operation fails it returns the *Error error type.
// options - XMLClientPutURIOptions contains the optional parameters for the XMLClient.PutURI method.
func (client *XMLClient) PutURI(ctx context.Context, model ModelWithURLProperty, options *XMLClientPutURIOptions) (XMLClientPutURIResponse, error) {
	req, err := client.putURICreateRequest(ctx, model, options)
	if err != nil {
		return XMLClientPutURIResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientPutURIResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusCreated) {
		return XMLClientPutURIResponse{}, client.putURIHandleError(resp)
	}
	return XMLClientPutURIResponse{RawResponse: resp}, nil
}

// putURICreateRequest creates the PutURI request.
func (client *XMLClient) putURICreateRequest(ctx context.Context, model ModelWithURLProperty, options *XMLClientPutURIOptions) (*policy.Request, error) {
	urlPath := "/xml/url"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/xml")
	return req, runtime.MarshalAsXML(req, model)
}

// putURIHandleError handles the PutURI error response.
func (client *XMLClient) putURIHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsXML(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutWrappedLists - Put an XML document with multiple wrapped lists
// If the operation fails it returns the *Error error type.
// options - XMLClientPutWrappedListsOptions contains the optional parameters for the XMLClient.PutWrappedLists method.
func (client *XMLClient) PutWrappedLists(ctx context.Context, wrappedLists AppleBarrel, options *XMLClientPutWrappedListsOptions) (XMLClientPutWrappedListsResponse, error) {
	req, err := client.putWrappedListsCreateRequest(ctx, wrappedLists, options)
	if err != nil {
		return XMLClientPutWrappedListsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMLClientPutWrappedListsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusCreated) {
		return XMLClientPutWrappedListsResponse{}, client.putWrappedListsHandleError(resp)
	}
	return XMLClientPutWrappedListsResponse{RawResponse: resp}, nil
}

// putWrappedListsCreateRequest creates the PutWrappedLists request.
func (client *XMLClient) putWrappedListsCreateRequest(ctx context.Context, wrappedLists AppleBarrel, options *XMLClientPutWrappedListsOptions) (*policy.Request, error) {
	urlPath := "/xml/wrapped-lists"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/xml")
	return req, runtime.MarshalAsXML(req, wrappedLists)
}

// putWrappedListsHandleError handles the PutWrappedLists error response.
func (client *XMLClient) putWrappedListsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsXML(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
