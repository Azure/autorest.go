//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package binarygroup

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"io"
	"net/http"
)

// UploadClient contains the methods for the Upload group.
// Don't use this type directly, use NewUploadClient() instead.
type UploadClient struct {
	pl runtime.Pipeline
}

// NewUploadClient creates a new instance of UploadClient with the specified values.
func NewUploadClient(options *azcore.ClientOptions) *UploadClient {
	cp := azcore.ClientOptions{}
	if options != nil {
		cp = *options
	}
	client := &UploadClient{
		pl: runtime.NewPipeline(module, version, nil, nil, &cp),
	}
	return client
}

// Binary - Uploading binary file
// If the operation fails it returns a generic error.
func (client *UploadClient) Binary(ctx context.Context, fileParam io.ReadSeekCloser, options *UploadBinaryOptions) (UploadBinaryResponse, error) {
	req, err := client.binaryCreateRequest(ctx, fileParam, options)
	if err != nil {
		return UploadBinaryResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return UploadBinaryResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return UploadBinaryResponse{}, client.binaryHandleError(resp)
	}
	return UploadBinaryResponse{RawResponse: resp}, nil
}

// binaryCreateRequest creates the Binary request.
func (client *UploadClient) binaryCreateRequest(ctx context.Context, fileParam io.ReadSeekCloser, options *UploadBinaryOptions) (*policy.Request, error) {
	urlPath := "/binary/octet"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, req.SetBody(fileParam, "application/octet-stream")
}

// binaryHandleError handles the Binary error response.
func (client *UploadClient) binaryHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// File - Uploading json file
// If the operation fails it returns a generic error.
func (client *UploadClient) File(ctx context.Context, fileParam io.ReadSeekCloser, options *UploadFileOptions) (UploadFileResponse, error) {
	req, err := client.fileCreateRequest(ctx, fileParam, options)
	if err != nil {
		return UploadFileResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return UploadFileResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return UploadFileResponse{}, client.fileHandleError(resp)
	}
	return UploadFileResponse{RawResponse: resp}, nil
}

// fileCreateRequest creates the File request.
func (client *UploadClient) fileCreateRequest(ctx context.Context, fileParam io.ReadSeekCloser, options *UploadFileOptions) (*policy.Request, error) {
	urlPath := "/binary/file"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, req.SetBody(fileParam, "application/json")
}

// fileHandleError handles the File error response.
func (client *UploadClient) fileHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}
