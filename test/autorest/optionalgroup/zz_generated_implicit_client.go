//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package optionalgroup

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// ImplicitClient contains the methods for the Implicit group.
// Don't use this type directly, use NewImplicitClient() instead.
type ImplicitClient struct {
	requiredGlobalPath  string
	requiredGlobalQuery string
	optionalGlobalQuery *int32
	pl                  runtime.Pipeline
}

// NewImplicitClient creates a new instance of ImplicitClient with the specified values.
// requiredGlobalPath - number of items to skip
// requiredGlobalQuery - number of items to skip
// optionalGlobalQuery - number of items to skip
// options - pass nil to accept the default values.
func NewImplicitClient(requiredGlobalPath string, requiredGlobalQuery string, optionalGlobalQuery *int32, options *azcore.ClientOptions) *ImplicitClient {
	cp := azcore.ClientOptions{}
	if options != nil {
		cp = *options
	}
	client := &ImplicitClient{
		requiredGlobalPath:  requiredGlobalPath,
		requiredGlobalQuery: requiredGlobalQuery,
		optionalGlobalQuery: optionalGlobalQuery,
		pl:                  runtime.NewPipeline(module, version, nil, nil, &cp),
	}
	return client
}

// GetOptionalGlobalQuery - Test implicitly optional query parameter
// If the operation fails it returns the *Error error type.
// options - ImplicitGetOptionalGlobalQueryOptions contains the optional parameters for the Implicit.GetOptionalGlobalQuery
// method.
func (client *ImplicitClient) GetOptionalGlobalQuery(ctx context.Context, options *ImplicitGetOptionalGlobalQueryOptions) (ImplicitGetOptionalGlobalQueryResponse, error) {
	req, err := client.getOptionalGlobalQueryCreateRequest(ctx, options)
	if err != nil {
		return ImplicitGetOptionalGlobalQueryResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ImplicitGetOptionalGlobalQueryResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ImplicitGetOptionalGlobalQueryResponse{}, client.getOptionalGlobalQueryHandleError(resp)
	}
	return ImplicitGetOptionalGlobalQueryResponse{RawResponse: resp}, nil
}

// getOptionalGlobalQueryCreateRequest creates the GetOptionalGlobalQuery request.
func (client *ImplicitClient) getOptionalGlobalQueryCreateRequest(ctx context.Context, options *ImplicitGetOptionalGlobalQueryOptions) (*policy.Request, error) {
	urlPath := "/reqopt/global/optional/query"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if client.optionalGlobalQuery != nil {
		reqQP.Set("optional-global-query", strconv.FormatInt(int64(*client.optionalGlobalQuery), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getOptionalGlobalQueryHandleError handles the GetOptionalGlobalQuery error response.
func (client *ImplicitClient) getOptionalGlobalQueryHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetRequiredGlobalPath - Test implicitly required path parameter
// If the operation fails it returns the *Error error type.
// options - ImplicitGetRequiredGlobalPathOptions contains the optional parameters for the Implicit.GetRequiredGlobalPath
// method.
func (client *ImplicitClient) GetRequiredGlobalPath(ctx context.Context, options *ImplicitGetRequiredGlobalPathOptions) (ImplicitGetRequiredGlobalPathResponse, error) {
	req, err := client.getRequiredGlobalPathCreateRequest(ctx, options)
	if err != nil {
		return ImplicitGetRequiredGlobalPathResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ImplicitGetRequiredGlobalPathResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ImplicitGetRequiredGlobalPathResponse{}, client.getRequiredGlobalPathHandleError(resp)
	}
	return ImplicitGetRequiredGlobalPathResponse{RawResponse: resp}, nil
}

// getRequiredGlobalPathCreateRequest creates the GetRequiredGlobalPath request.
func (client *ImplicitClient) getRequiredGlobalPathCreateRequest(ctx context.Context, options *ImplicitGetRequiredGlobalPathOptions) (*policy.Request, error) {
	urlPath := "/reqopt/global/required/path/{required-global-path}"
	if client.requiredGlobalPath == "" {
		return nil, errors.New("parameter client.requiredGlobalPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{required-global-path}", url.PathEscape(client.requiredGlobalPath))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getRequiredGlobalPathHandleError handles the GetRequiredGlobalPath error response.
func (client *ImplicitClient) getRequiredGlobalPathHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetRequiredGlobalQuery - Test implicitly required query parameter
// If the operation fails it returns the *Error error type.
// options - ImplicitGetRequiredGlobalQueryOptions contains the optional parameters for the Implicit.GetRequiredGlobalQuery
// method.
func (client *ImplicitClient) GetRequiredGlobalQuery(ctx context.Context, options *ImplicitGetRequiredGlobalQueryOptions) (ImplicitGetRequiredGlobalQueryResponse, error) {
	req, err := client.getRequiredGlobalQueryCreateRequest(ctx, options)
	if err != nil {
		return ImplicitGetRequiredGlobalQueryResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ImplicitGetRequiredGlobalQueryResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ImplicitGetRequiredGlobalQueryResponse{}, client.getRequiredGlobalQueryHandleError(resp)
	}
	return ImplicitGetRequiredGlobalQueryResponse{RawResponse: resp}, nil
}

// getRequiredGlobalQueryCreateRequest creates the GetRequiredGlobalQuery request.
func (client *ImplicitClient) getRequiredGlobalQueryCreateRequest(ctx context.Context, options *ImplicitGetRequiredGlobalQueryOptions) (*policy.Request, error) {
	urlPath := "/reqopt/global/required/query"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("required-global-query", client.requiredGlobalQuery)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getRequiredGlobalQueryHandleError handles the GetRequiredGlobalQuery error response.
func (client *ImplicitClient) getRequiredGlobalQueryHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetRequiredPath - Test implicitly required path parameter
// If the operation fails it returns the *Error error type.
// options - ImplicitGetRequiredPathOptions contains the optional parameters for the Implicit.GetRequiredPath method.
func (client *ImplicitClient) GetRequiredPath(ctx context.Context, pathParameter string, options *ImplicitGetRequiredPathOptions) (ImplicitGetRequiredPathResponse, error) {
	req, err := client.getRequiredPathCreateRequest(ctx, pathParameter, options)
	if err != nil {
		return ImplicitGetRequiredPathResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ImplicitGetRequiredPathResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ImplicitGetRequiredPathResponse{}, client.getRequiredPathHandleError(resp)
	}
	return ImplicitGetRequiredPathResponse{RawResponse: resp}, nil
}

// getRequiredPathCreateRequest creates the GetRequiredPath request.
func (client *ImplicitClient) getRequiredPathCreateRequest(ctx context.Context, pathParameter string, options *ImplicitGetRequiredPathOptions) (*policy.Request, error) {
	urlPath := "/reqopt/implicit/required/path/{pathParameter}"
	if pathParameter == "" {
		return nil, errors.New("parameter pathParameter cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{pathParameter}", url.PathEscape(pathParameter))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getRequiredPathHandleError handles the GetRequiredPath error response.
func (client *ImplicitClient) getRequiredPathHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutOptionalBinaryBody - Test implicitly optional body parameter
// If the operation fails it returns the *Error error type.
// options - ImplicitPutOptionalBinaryBodyOptions contains the optional parameters for the Implicit.PutOptionalBinaryBody
// method.
func (client *ImplicitClient) PutOptionalBinaryBody(ctx context.Context, options *ImplicitPutOptionalBinaryBodyOptions) (ImplicitPutOptionalBinaryBodyResponse, error) {
	req, err := client.putOptionalBinaryBodyCreateRequest(ctx, options)
	if err != nil {
		return ImplicitPutOptionalBinaryBodyResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ImplicitPutOptionalBinaryBodyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ImplicitPutOptionalBinaryBodyResponse{}, client.putOptionalBinaryBodyHandleError(resp)
	}
	return ImplicitPutOptionalBinaryBodyResponse{RawResponse: resp}, nil
}

// putOptionalBinaryBodyCreateRequest creates the PutOptionalBinaryBody request.
func (client *ImplicitClient) putOptionalBinaryBodyCreateRequest(ctx context.Context, options *ImplicitPutOptionalBinaryBodyOptions) (*policy.Request, error) {
	urlPath := "/reqopt/implicit/optional/binary-body"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.BodyParameter != nil {
		return req, req.SetBody(options.BodyParameter, "application/octet-stream")
	}
	return req, nil
}

// putOptionalBinaryBodyHandleError handles the PutOptionalBinaryBody error response.
func (client *ImplicitClient) putOptionalBinaryBodyHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutOptionalBody - Test implicitly optional body parameter
// If the operation fails it returns the *Error error type.
// options - ImplicitPutOptionalBodyOptions contains the optional parameters for the Implicit.PutOptionalBody method.
func (client *ImplicitClient) PutOptionalBody(ctx context.Context, options *ImplicitPutOptionalBodyOptions) (ImplicitPutOptionalBodyResponse, error) {
	req, err := client.putOptionalBodyCreateRequest(ctx, options)
	if err != nil {
		return ImplicitPutOptionalBodyResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ImplicitPutOptionalBodyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ImplicitPutOptionalBodyResponse{}, client.putOptionalBodyHandleError(resp)
	}
	return ImplicitPutOptionalBodyResponse{RawResponse: resp}, nil
}

// putOptionalBodyCreateRequest creates the PutOptionalBody request.
func (client *ImplicitClient) putOptionalBodyCreateRequest(ctx context.Context, options *ImplicitPutOptionalBodyOptions) (*policy.Request, error) {
	urlPath := "/reqopt/implicit/optional/body"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.BodyParameter != nil {
		return req, runtime.MarshalAsJSON(req, *options.BodyParameter)
	}
	return req, nil
}

// putOptionalBodyHandleError handles the PutOptionalBody error response.
func (client *ImplicitClient) putOptionalBodyHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutOptionalHeader - Test implicitly optional header parameter
// If the operation fails it returns the *Error error type.
// options - ImplicitPutOptionalHeaderOptions contains the optional parameters for the Implicit.PutOptionalHeader method.
func (client *ImplicitClient) PutOptionalHeader(ctx context.Context, options *ImplicitPutOptionalHeaderOptions) (ImplicitPutOptionalHeaderResponse, error) {
	req, err := client.putOptionalHeaderCreateRequest(ctx, options)
	if err != nil {
		return ImplicitPutOptionalHeaderResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ImplicitPutOptionalHeaderResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ImplicitPutOptionalHeaderResponse{}, client.putOptionalHeaderHandleError(resp)
	}
	return ImplicitPutOptionalHeaderResponse{RawResponse: resp}, nil
}

// putOptionalHeaderCreateRequest creates the PutOptionalHeader request.
func (client *ImplicitClient) putOptionalHeaderCreateRequest(ctx context.Context, options *ImplicitPutOptionalHeaderOptions) (*policy.Request, error) {
	urlPath := "/reqopt/implicit/optional/header"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	if options != nil && options.QueryParameter != nil {
		req.Raw().Header.Set("queryParameter", *options.QueryParameter)
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// putOptionalHeaderHandleError handles the PutOptionalHeader error response.
func (client *ImplicitClient) putOptionalHeaderHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutOptionalQuery - Test implicitly optional query parameter
// If the operation fails it returns the *Error error type.
// options - ImplicitPutOptionalQueryOptions contains the optional parameters for the Implicit.PutOptionalQuery method.
func (client *ImplicitClient) PutOptionalQuery(ctx context.Context, options *ImplicitPutOptionalQueryOptions) (ImplicitPutOptionalQueryResponse, error) {
	req, err := client.putOptionalQueryCreateRequest(ctx, options)
	if err != nil {
		return ImplicitPutOptionalQueryResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ImplicitPutOptionalQueryResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ImplicitPutOptionalQueryResponse{}, client.putOptionalQueryHandleError(resp)
	}
	return ImplicitPutOptionalQueryResponse{RawResponse: resp}, nil
}

// putOptionalQueryCreateRequest creates the PutOptionalQuery request.
func (client *ImplicitClient) putOptionalQueryCreateRequest(ctx context.Context, options *ImplicitPutOptionalQueryOptions) (*policy.Request, error) {
	urlPath := "/reqopt/implicit/optional/query"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.QueryParameter != nil {
		reqQP.Set("queryParameter", *options.QueryParameter)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// putOptionalQueryHandleError handles the PutOptionalQuery error response.
func (client *ImplicitClient) putOptionalQueryHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
