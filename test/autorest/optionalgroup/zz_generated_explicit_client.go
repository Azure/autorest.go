//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package optionalgroup

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"io"
	"net/http"
	"strconv"
	"strings"
)

// ExplicitClient contains the methods for the Explicit group.
// Don't use this type directly, use NewExplicitClient() instead.
type ExplicitClient struct {
	con *Connection
}

// NewExplicitClient creates a new instance of ExplicitClient with the specified values.
func NewExplicitClient(con *Connection) *ExplicitClient {
	return &ExplicitClient{con: con}
}

// PostOptionalArrayHeader - Test explicitly optional integer. Please put a header 'headerParameter' => null.
// If the operation fails it returns the *Error error type.
func (client *ExplicitClient) PostOptionalArrayHeader(ctx context.Context, options *ExplicitPostOptionalArrayHeaderOptions) (ExplicitPostOptionalArrayHeaderResponse, error) {
	req, err := client.postOptionalArrayHeaderCreateRequest(ctx, options)
	if err != nil {
		return ExplicitPostOptionalArrayHeaderResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ExplicitPostOptionalArrayHeaderResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExplicitPostOptionalArrayHeaderResponse{}, client.postOptionalArrayHeaderHandleError(resp)
	}
	return ExplicitPostOptionalArrayHeaderResponse{RawResponse: resp}, nil
}

// postOptionalArrayHeaderCreateRequest creates the PostOptionalArrayHeader request.
func (client *ExplicitClient) postOptionalArrayHeaderCreateRequest(ctx context.Context, options *ExplicitPostOptionalArrayHeaderOptions) (*policy.Request, error) {
	urlPath := "/reqopt/optional/array/header"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	if options != nil && options.HeaderParameter != nil {
		req.Raw().Header.Set("headerParameter", strings.Join(options.HeaderParameter, ","))
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// postOptionalArrayHeaderHandleError handles the PostOptionalArrayHeader error response.
func (client *ExplicitClient) postOptionalArrayHeaderHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PostOptionalArrayParameter - Test explicitly optional array. Please put null.
// If the operation fails it returns the *Error error type.
func (client *ExplicitClient) PostOptionalArrayParameter(ctx context.Context, options *ExplicitPostOptionalArrayParameterOptions) (ExplicitPostOptionalArrayParameterResponse, error) {
	req, err := client.postOptionalArrayParameterCreateRequest(ctx, options)
	if err != nil {
		return ExplicitPostOptionalArrayParameterResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ExplicitPostOptionalArrayParameterResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExplicitPostOptionalArrayParameterResponse{}, client.postOptionalArrayParameterHandleError(resp)
	}
	return ExplicitPostOptionalArrayParameterResponse{RawResponse: resp}, nil
}

// postOptionalArrayParameterCreateRequest creates the PostOptionalArrayParameter request.
func (client *ExplicitClient) postOptionalArrayParameterCreateRequest(ctx context.Context, options *ExplicitPostOptionalArrayParameterOptions) (*policy.Request, error) {
	urlPath := "/reqopt/optional/array/parameter"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.BodyParameter != nil {
		return req, runtime.MarshalAsJSON(req, options.BodyParameter)
	}
	return req, nil
}

// postOptionalArrayParameterHandleError handles the PostOptionalArrayParameter error response.
func (client *ExplicitClient) postOptionalArrayParameterHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PostOptionalArrayProperty - Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
// If the operation fails it returns the *Error error type.
func (client *ExplicitClient) PostOptionalArrayProperty(ctx context.Context, options *ExplicitPostOptionalArrayPropertyOptions) (ExplicitPostOptionalArrayPropertyResponse, error) {
	req, err := client.postOptionalArrayPropertyCreateRequest(ctx, options)
	if err != nil {
		return ExplicitPostOptionalArrayPropertyResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ExplicitPostOptionalArrayPropertyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExplicitPostOptionalArrayPropertyResponse{}, client.postOptionalArrayPropertyHandleError(resp)
	}
	return ExplicitPostOptionalArrayPropertyResponse{RawResponse: resp}, nil
}

// postOptionalArrayPropertyCreateRequest creates the PostOptionalArrayProperty request.
func (client *ExplicitClient) postOptionalArrayPropertyCreateRequest(ctx context.Context, options *ExplicitPostOptionalArrayPropertyOptions) (*policy.Request, error) {
	urlPath := "/reqopt/optional/array/property"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.BodyParameter != nil {
		return req, runtime.MarshalAsJSON(req, *options.BodyParameter)
	}
	return req, nil
}

// postOptionalArrayPropertyHandleError handles the PostOptionalArrayProperty error response.
func (client *ExplicitClient) postOptionalArrayPropertyHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PostOptionalClassParameter - Test explicitly optional complex object. Please put null.
// If the operation fails it returns the *Error error type.
func (client *ExplicitClient) PostOptionalClassParameter(ctx context.Context, options *ExplicitPostOptionalClassParameterOptions) (ExplicitPostOptionalClassParameterResponse, error) {
	req, err := client.postOptionalClassParameterCreateRequest(ctx, options)
	if err != nil {
		return ExplicitPostOptionalClassParameterResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ExplicitPostOptionalClassParameterResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExplicitPostOptionalClassParameterResponse{}, client.postOptionalClassParameterHandleError(resp)
	}
	return ExplicitPostOptionalClassParameterResponse{RawResponse: resp}, nil
}

// postOptionalClassParameterCreateRequest creates the PostOptionalClassParameter request.
func (client *ExplicitClient) postOptionalClassParameterCreateRequest(ctx context.Context, options *ExplicitPostOptionalClassParameterOptions) (*policy.Request, error) {
	urlPath := "/reqopt/optional/class/parameter"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.BodyParameter != nil {
		return req, runtime.MarshalAsJSON(req, *options.BodyParameter)
	}
	return req, nil
}

// postOptionalClassParameterHandleError handles the PostOptionalClassParameter error response.
func (client *ExplicitClient) postOptionalClassParameterHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PostOptionalClassProperty - Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
// If the operation fails it returns the *Error error type.
func (client *ExplicitClient) PostOptionalClassProperty(ctx context.Context, options *ExplicitPostOptionalClassPropertyOptions) (ExplicitPostOptionalClassPropertyResponse, error) {
	req, err := client.postOptionalClassPropertyCreateRequest(ctx, options)
	if err != nil {
		return ExplicitPostOptionalClassPropertyResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ExplicitPostOptionalClassPropertyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExplicitPostOptionalClassPropertyResponse{}, client.postOptionalClassPropertyHandleError(resp)
	}
	return ExplicitPostOptionalClassPropertyResponse{RawResponse: resp}, nil
}

// postOptionalClassPropertyCreateRequest creates the PostOptionalClassProperty request.
func (client *ExplicitClient) postOptionalClassPropertyCreateRequest(ctx context.Context, options *ExplicitPostOptionalClassPropertyOptions) (*policy.Request, error) {
	urlPath := "/reqopt/optional/class/property"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.BodyParameter != nil {
		return req, runtime.MarshalAsJSON(req, *options.BodyParameter)
	}
	return req, nil
}

// postOptionalClassPropertyHandleError handles the PostOptionalClassProperty error response.
func (client *ExplicitClient) postOptionalClassPropertyHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PostOptionalIntegerHeader - Test explicitly optional integer. Please put a header 'headerParameter' => null.
// If the operation fails it returns the *Error error type.
func (client *ExplicitClient) PostOptionalIntegerHeader(ctx context.Context, options *ExplicitPostOptionalIntegerHeaderOptions) (ExplicitPostOptionalIntegerHeaderResponse, error) {
	req, err := client.postOptionalIntegerHeaderCreateRequest(ctx, options)
	if err != nil {
		return ExplicitPostOptionalIntegerHeaderResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ExplicitPostOptionalIntegerHeaderResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExplicitPostOptionalIntegerHeaderResponse{}, client.postOptionalIntegerHeaderHandleError(resp)
	}
	return ExplicitPostOptionalIntegerHeaderResponse{RawResponse: resp}, nil
}

// postOptionalIntegerHeaderCreateRequest creates the PostOptionalIntegerHeader request.
func (client *ExplicitClient) postOptionalIntegerHeaderCreateRequest(ctx context.Context, options *ExplicitPostOptionalIntegerHeaderOptions) (*policy.Request, error) {
	urlPath := "/reqopt/optional/integer/header"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	if options != nil && options.HeaderParameter != nil {
		req.Raw().Header.Set("headerParameter", strconv.FormatInt(int64(*options.HeaderParameter), 10))
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// postOptionalIntegerHeaderHandleError handles the PostOptionalIntegerHeader error response.
func (client *ExplicitClient) postOptionalIntegerHeaderHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PostOptionalIntegerParameter - Test explicitly optional integer. Please put null.
// If the operation fails it returns the *Error error type.
func (client *ExplicitClient) PostOptionalIntegerParameter(ctx context.Context, options *ExplicitPostOptionalIntegerParameterOptions) (ExplicitPostOptionalIntegerParameterResponse, error) {
	req, err := client.postOptionalIntegerParameterCreateRequest(ctx, options)
	if err != nil {
		return ExplicitPostOptionalIntegerParameterResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ExplicitPostOptionalIntegerParameterResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExplicitPostOptionalIntegerParameterResponse{}, client.postOptionalIntegerParameterHandleError(resp)
	}
	return ExplicitPostOptionalIntegerParameterResponse{RawResponse: resp}, nil
}

// postOptionalIntegerParameterCreateRequest creates the PostOptionalIntegerParameter request.
func (client *ExplicitClient) postOptionalIntegerParameterCreateRequest(ctx context.Context, options *ExplicitPostOptionalIntegerParameterOptions) (*policy.Request, error) {
	urlPath := "/reqopt/optional/integer/parameter"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.BodyParameter != nil {
		return req, runtime.MarshalAsJSON(req, *options.BodyParameter)
	}
	return req, nil
}

// postOptionalIntegerParameterHandleError handles the PostOptionalIntegerParameter error response.
func (client *ExplicitClient) postOptionalIntegerParameterHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PostOptionalIntegerProperty - Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
// If the operation fails it returns the *Error error type.
func (client *ExplicitClient) PostOptionalIntegerProperty(ctx context.Context, options *ExplicitPostOptionalIntegerPropertyOptions) (ExplicitPostOptionalIntegerPropertyResponse, error) {
	req, err := client.postOptionalIntegerPropertyCreateRequest(ctx, options)
	if err != nil {
		return ExplicitPostOptionalIntegerPropertyResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ExplicitPostOptionalIntegerPropertyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExplicitPostOptionalIntegerPropertyResponse{}, client.postOptionalIntegerPropertyHandleError(resp)
	}
	return ExplicitPostOptionalIntegerPropertyResponse{RawResponse: resp}, nil
}

// postOptionalIntegerPropertyCreateRequest creates the PostOptionalIntegerProperty request.
func (client *ExplicitClient) postOptionalIntegerPropertyCreateRequest(ctx context.Context, options *ExplicitPostOptionalIntegerPropertyOptions) (*policy.Request, error) {
	urlPath := "/reqopt/optional/integer/property"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.BodyParameter != nil {
		return req, runtime.MarshalAsJSON(req, *options.BodyParameter)
	}
	return req, nil
}

// postOptionalIntegerPropertyHandleError handles the PostOptionalIntegerProperty error response.
func (client *ExplicitClient) postOptionalIntegerPropertyHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PostOptionalStringHeader - Test explicitly optional string. Please put a header 'headerParameter' => null.
// If the operation fails it returns the *Error error type.
func (client *ExplicitClient) PostOptionalStringHeader(ctx context.Context, options *ExplicitPostOptionalStringHeaderOptions) (ExplicitPostOptionalStringHeaderResponse, error) {
	req, err := client.postOptionalStringHeaderCreateRequest(ctx, options)
	if err != nil {
		return ExplicitPostOptionalStringHeaderResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ExplicitPostOptionalStringHeaderResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExplicitPostOptionalStringHeaderResponse{}, client.postOptionalStringHeaderHandleError(resp)
	}
	return ExplicitPostOptionalStringHeaderResponse{RawResponse: resp}, nil
}

// postOptionalStringHeaderCreateRequest creates the PostOptionalStringHeader request.
func (client *ExplicitClient) postOptionalStringHeaderCreateRequest(ctx context.Context, options *ExplicitPostOptionalStringHeaderOptions) (*policy.Request, error) {
	urlPath := "/reqopt/optional/string/header"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	if options != nil && options.BodyParameter != nil {
		req.Raw().Header.Set("bodyParameter", *options.BodyParameter)
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// postOptionalStringHeaderHandleError handles the PostOptionalStringHeader error response.
func (client *ExplicitClient) postOptionalStringHeaderHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PostOptionalStringParameter - Test explicitly optional string. Please put null.
// If the operation fails it returns the *Error error type.
func (client *ExplicitClient) PostOptionalStringParameter(ctx context.Context, options *ExplicitPostOptionalStringParameterOptions) (ExplicitPostOptionalStringParameterResponse, error) {
	req, err := client.postOptionalStringParameterCreateRequest(ctx, options)
	if err != nil {
		return ExplicitPostOptionalStringParameterResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ExplicitPostOptionalStringParameterResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExplicitPostOptionalStringParameterResponse{}, client.postOptionalStringParameterHandleError(resp)
	}
	return ExplicitPostOptionalStringParameterResponse{RawResponse: resp}, nil
}

// postOptionalStringParameterCreateRequest creates the PostOptionalStringParameter request.
func (client *ExplicitClient) postOptionalStringParameterCreateRequest(ctx context.Context, options *ExplicitPostOptionalStringParameterOptions) (*policy.Request, error) {
	urlPath := "/reqopt/optional/string/parameter"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.BodyParameter != nil {
		return req, runtime.MarshalAsJSON(req, *options.BodyParameter)
	}
	return req, nil
}

// postOptionalStringParameterHandleError handles the PostOptionalStringParameter error response.
func (client *ExplicitClient) postOptionalStringParameterHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PostOptionalStringProperty - Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
// If the operation fails it returns the *Error error type.
func (client *ExplicitClient) PostOptionalStringProperty(ctx context.Context, options *ExplicitPostOptionalStringPropertyOptions) (ExplicitPostOptionalStringPropertyResponse, error) {
	req, err := client.postOptionalStringPropertyCreateRequest(ctx, options)
	if err != nil {
		return ExplicitPostOptionalStringPropertyResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ExplicitPostOptionalStringPropertyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExplicitPostOptionalStringPropertyResponse{}, client.postOptionalStringPropertyHandleError(resp)
	}
	return ExplicitPostOptionalStringPropertyResponse{RawResponse: resp}, nil
}

// postOptionalStringPropertyCreateRequest creates the PostOptionalStringProperty request.
func (client *ExplicitClient) postOptionalStringPropertyCreateRequest(ctx context.Context, options *ExplicitPostOptionalStringPropertyOptions) (*policy.Request, error) {
	urlPath := "/reqopt/optional/string/property"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.BodyParameter != nil {
		return req, runtime.MarshalAsJSON(req, *options.BodyParameter)
	}
	return req, nil
}

// postOptionalStringPropertyHandleError handles the PostOptionalStringProperty error response.
func (client *ExplicitClient) postOptionalStringPropertyHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PostRequiredArrayHeader - Test explicitly required array. Please put a header 'headerParameter' => null and the client library should throw before the
// request is sent.
// If the operation fails it returns the *Error error type.
func (client *ExplicitClient) PostRequiredArrayHeader(ctx context.Context, headerParameter []string, options *ExplicitPostRequiredArrayHeaderOptions) (ExplicitPostRequiredArrayHeaderResponse, error) {
	req, err := client.postRequiredArrayHeaderCreateRequest(ctx, headerParameter, options)
	if err != nil {
		return ExplicitPostRequiredArrayHeaderResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ExplicitPostRequiredArrayHeaderResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExplicitPostRequiredArrayHeaderResponse{}, client.postRequiredArrayHeaderHandleError(resp)
	}
	return ExplicitPostRequiredArrayHeaderResponse{RawResponse: resp}, nil
}

// postRequiredArrayHeaderCreateRequest creates the PostRequiredArrayHeader request.
func (client *ExplicitClient) postRequiredArrayHeaderCreateRequest(ctx context.Context, headerParameter []string, options *ExplicitPostRequiredArrayHeaderOptions) (*policy.Request, error) {
	urlPath := "/reqopt/requied/array/header"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("headerParameter", strings.Join(headerParameter, ","))
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// postRequiredArrayHeaderHandleError handles the PostRequiredArrayHeader error response.
func (client *ExplicitClient) postRequiredArrayHeaderHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PostRequiredArrayParameter - Test explicitly required array. Please put null and the client library should throw before the request is sent.
// If the operation fails it returns the *Error error type.
func (client *ExplicitClient) PostRequiredArrayParameter(ctx context.Context, bodyParameter []*string, options *ExplicitPostRequiredArrayParameterOptions) (ExplicitPostRequiredArrayParameterResponse, error) {
	req, err := client.postRequiredArrayParameterCreateRequest(ctx, bodyParameter, options)
	if err != nil {
		return ExplicitPostRequiredArrayParameterResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ExplicitPostRequiredArrayParameterResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExplicitPostRequiredArrayParameterResponse{}, client.postRequiredArrayParameterHandleError(resp)
	}
	return ExplicitPostRequiredArrayParameterResponse{RawResponse: resp}, nil
}

// postRequiredArrayParameterCreateRequest creates the PostRequiredArrayParameter request.
func (client *ExplicitClient) postRequiredArrayParameterCreateRequest(ctx context.Context, bodyParameter []*string, options *ExplicitPostRequiredArrayParameterOptions) (*policy.Request, error) {
	urlPath := "/reqopt/requied/array/parameter"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, bodyParameter)
}

// postRequiredArrayParameterHandleError handles the PostRequiredArrayParameter error response.
func (client *ExplicitClient) postRequiredArrayParameterHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PostRequiredArrayProperty - Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the client library should throw
// before the request is sent.
// If the operation fails it returns the *Error error type.
func (client *ExplicitClient) PostRequiredArrayProperty(ctx context.Context, bodyParameter ArrayWrapper, options *ExplicitPostRequiredArrayPropertyOptions) (ExplicitPostRequiredArrayPropertyResponse, error) {
	req, err := client.postRequiredArrayPropertyCreateRequest(ctx, bodyParameter, options)
	if err != nil {
		return ExplicitPostRequiredArrayPropertyResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ExplicitPostRequiredArrayPropertyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExplicitPostRequiredArrayPropertyResponse{}, client.postRequiredArrayPropertyHandleError(resp)
	}
	return ExplicitPostRequiredArrayPropertyResponse{RawResponse: resp}, nil
}

// postRequiredArrayPropertyCreateRequest creates the PostRequiredArrayProperty request.
func (client *ExplicitClient) postRequiredArrayPropertyCreateRequest(ctx context.Context, bodyParameter ArrayWrapper, options *ExplicitPostRequiredArrayPropertyOptions) (*policy.Request, error) {
	urlPath := "/reqopt/requied/array/property"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, bodyParameter)
}

// postRequiredArrayPropertyHandleError handles the PostRequiredArrayProperty error response.
func (client *ExplicitClient) postRequiredArrayPropertyHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PostRequiredClassParameter - Test explicitly required complex object. Please put null and the client library should throw before the request is sent.
// If the operation fails it returns the *Error error type.
func (client *ExplicitClient) PostRequiredClassParameter(ctx context.Context, bodyParameter Product, options *ExplicitPostRequiredClassParameterOptions) (ExplicitPostRequiredClassParameterResponse, error) {
	req, err := client.postRequiredClassParameterCreateRequest(ctx, bodyParameter, options)
	if err != nil {
		return ExplicitPostRequiredClassParameterResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ExplicitPostRequiredClassParameterResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExplicitPostRequiredClassParameterResponse{}, client.postRequiredClassParameterHandleError(resp)
	}
	return ExplicitPostRequiredClassParameterResponse{RawResponse: resp}, nil
}

// postRequiredClassParameterCreateRequest creates the PostRequiredClassParameter request.
func (client *ExplicitClient) postRequiredClassParameterCreateRequest(ctx context.Context, bodyParameter Product, options *ExplicitPostRequiredClassParameterOptions) (*policy.Request, error) {
	urlPath := "/reqopt/requied/class/parameter"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, bodyParameter)
}

// postRequiredClassParameterHandleError handles the PostRequiredClassParameter error response.
func (client *ExplicitClient) postRequiredClassParameterHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PostRequiredClassProperty - Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null and the client library should
// throw before the request is sent.
// If the operation fails it returns the *Error error type.
func (client *ExplicitClient) PostRequiredClassProperty(ctx context.Context, bodyParameter ClassWrapper, options *ExplicitPostRequiredClassPropertyOptions) (ExplicitPostRequiredClassPropertyResponse, error) {
	req, err := client.postRequiredClassPropertyCreateRequest(ctx, bodyParameter, options)
	if err != nil {
		return ExplicitPostRequiredClassPropertyResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ExplicitPostRequiredClassPropertyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExplicitPostRequiredClassPropertyResponse{}, client.postRequiredClassPropertyHandleError(resp)
	}
	return ExplicitPostRequiredClassPropertyResponse{RawResponse: resp}, nil
}

// postRequiredClassPropertyCreateRequest creates the PostRequiredClassProperty request.
func (client *ExplicitClient) postRequiredClassPropertyCreateRequest(ctx context.Context, bodyParameter ClassWrapper, options *ExplicitPostRequiredClassPropertyOptions) (*policy.Request, error) {
	urlPath := "/reqopt/requied/class/property"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, bodyParameter)
}

// postRequiredClassPropertyHandleError handles the PostRequiredClassProperty error response.
func (client *ExplicitClient) postRequiredClassPropertyHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PostRequiredIntegerHeader - Test explicitly required integer. Please put a header 'headerParameter' => null and the client library should throw before
// the request is sent.
// If the operation fails it returns the *Error error type.
func (client *ExplicitClient) PostRequiredIntegerHeader(ctx context.Context, headerParameter int32, options *ExplicitPostRequiredIntegerHeaderOptions) (ExplicitPostRequiredIntegerHeaderResponse, error) {
	req, err := client.postRequiredIntegerHeaderCreateRequest(ctx, headerParameter, options)
	if err != nil {
		return ExplicitPostRequiredIntegerHeaderResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ExplicitPostRequiredIntegerHeaderResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExplicitPostRequiredIntegerHeaderResponse{}, client.postRequiredIntegerHeaderHandleError(resp)
	}
	return ExplicitPostRequiredIntegerHeaderResponse{RawResponse: resp}, nil
}

// postRequiredIntegerHeaderCreateRequest creates the PostRequiredIntegerHeader request.
func (client *ExplicitClient) postRequiredIntegerHeaderCreateRequest(ctx context.Context, headerParameter int32, options *ExplicitPostRequiredIntegerHeaderOptions) (*policy.Request, error) {
	urlPath := "/reqopt/requied/integer/header"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("headerParameter", strconv.FormatInt(int64(headerParameter), 10))
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// postRequiredIntegerHeaderHandleError handles the PostRequiredIntegerHeader error response.
func (client *ExplicitClient) postRequiredIntegerHeaderHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PostRequiredIntegerParameter - Test explicitly required integer. Please put null and the client library should throw before the request is sent.
// If the operation fails it returns the *Error error type.
func (client *ExplicitClient) PostRequiredIntegerParameter(ctx context.Context, bodyParameter int32, options *ExplicitPostRequiredIntegerParameterOptions) (ExplicitPostRequiredIntegerParameterResponse, error) {
	req, err := client.postRequiredIntegerParameterCreateRequest(ctx, bodyParameter, options)
	if err != nil {
		return ExplicitPostRequiredIntegerParameterResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ExplicitPostRequiredIntegerParameterResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExplicitPostRequiredIntegerParameterResponse{}, client.postRequiredIntegerParameterHandleError(resp)
	}
	return ExplicitPostRequiredIntegerParameterResponse{RawResponse: resp}, nil
}

// postRequiredIntegerParameterCreateRequest creates the PostRequiredIntegerParameter request.
func (client *ExplicitClient) postRequiredIntegerParameterCreateRequest(ctx context.Context, bodyParameter int32, options *ExplicitPostRequiredIntegerParameterOptions) (*policy.Request, error) {
	urlPath := "/reqopt/requied/integer/parameter"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, bodyParameter)
}

// postRequiredIntegerParameterHandleError handles the PostRequiredIntegerParameter error response.
func (client *ExplicitClient) postRequiredIntegerParameterHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PostRequiredIntegerProperty - Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the client library should throw
// before the request is sent.
// If the operation fails it returns the *Error error type.
func (client *ExplicitClient) PostRequiredIntegerProperty(ctx context.Context, bodyParameter IntWrapper, options *ExplicitPostRequiredIntegerPropertyOptions) (ExplicitPostRequiredIntegerPropertyResponse, error) {
	req, err := client.postRequiredIntegerPropertyCreateRequest(ctx, bodyParameter, options)
	if err != nil {
		return ExplicitPostRequiredIntegerPropertyResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ExplicitPostRequiredIntegerPropertyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExplicitPostRequiredIntegerPropertyResponse{}, client.postRequiredIntegerPropertyHandleError(resp)
	}
	return ExplicitPostRequiredIntegerPropertyResponse{RawResponse: resp}, nil
}

// postRequiredIntegerPropertyCreateRequest creates the PostRequiredIntegerProperty request.
func (client *ExplicitClient) postRequiredIntegerPropertyCreateRequest(ctx context.Context, bodyParameter IntWrapper, options *ExplicitPostRequiredIntegerPropertyOptions) (*policy.Request, error) {
	urlPath := "/reqopt/requied/integer/property"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, bodyParameter)
}

// postRequiredIntegerPropertyHandleError handles the PostRequiredIntegerProperty error response.
func (client *ExplicitClient) postRequiredIntegerPropertyHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PostRequiredStringHeader - Test explicitly required string. Please put a header 'headerParameter' => null and the client library should throw before
// the request is sent.
// If the operation fails it returns the *Error error type.
func (client *ExplicitClient) PostRequiredStringHeader(ctx context.Context, headerParameter string, options *ExplicitPostRequiredStringHeaderOptions) (ExplicitPostRequiredStringHeaderResponse, error) {
	req, err := client.postRequiredStringHeaderCreateRequest(ctx, headerParameter, options)
	if err != nil {
		return ExplicitPostRequiredStringHeaderResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ExplicitPostRequiredStringHeaderResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExplicitPostRequiredStringHeaderResponse{}, client.postRequiredStringHeaderHandleError(resp)
	}
	return ExplicitPostRequiredStringHeaderResponse{RawResponse: resp}, nil
}

// postRequiredStringHeaderCreateRequest creates the PostRequiredStringHeader request.
func (client *ExplicitClient) postRequiredStringHeaderCreateRequest(ctx context.Context, headerParameter string, options *ExplicitPostRequiredStringHeaderOptions) (*policy.Request, error) {
	urlPath := "/reqopt/requied/string/header"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("headerParameter", headerParameter)
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// postRequiredStringHeaderHandleError handles the PostRequiredStringHeader error response.
func (client *ExplicitClient) postRequiredStringHeaderHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PostRequiredStringParameter - Test explicitly required string. Please put null and the client library should throw before the request is sent.
// If the operation fails it returns the *Error error type.
func (client *ExplicitClient) PostRequiredStringParameter(ctx context.Context, bodyParameter string, options *ExplicitPostRequiredStringParameterOptions) (ExplicitPostRequiredStringParameterResponse, error) {
	req, err := client.postRequiredStringParameterCreateRequest(ctx, bodyParameter, options)
	if err != nil {
		return ExplicitPostRequiredStringParameterResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ExplicitPostRequiredStringParameterResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExplicitPostRequiredStringParameterResponse{}, client.postRequiredStringParameterHandleError(resp)
	}
	return ExplicitPostRequiredStringParameterResponse{RawResponse: resp}, nil
}

// postRequiredStringParameterCreateRequest creates the PostRequiredStringParameter request.
func (client *ExplicitClient) postRequiredStringParameterCreateRequest(ctx context.Context, bodyParameter string, options *ExplicitPostRequiredStringParameterOptions) (*policy.Request, error) {
	urlPath := "/reqopt/requied/string/parameter"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, bodyParameter)
}

// postRequiredStringParameterHandleError handles the PostRequiredStringParameter error response.
func (client *ExplicitClient) postRequiredStringParameterHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PostRequiredStringProperty - Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the client library should throw
// before the request is sent.
// If the operation fails it returns the *Error error type.
func (client *ExplicitClient) PostRequiredStringProperty(ctx context.Context, bodyParameter StringWrapper, options *ExplicitPostRequiredStringPropertyOptions) (ExplicitPostRequiredStringPropertyResponse, error) {
	req, err := client.postRequiredStringPropertyCreateRequest(ctx, bodyParameter, options)
	if err != nil {
		return ExplicitPostRequiredStringPropertyResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ExplicitPostRequiredStringPropertyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExplicitPostRequiredStringPropertyResponse{}, client.postRequiredStringPropertyHandleError(resp)
	}
	return ExplicitPostRequiredStringPropertyResponse{RawResponse: resp}, nil
}

// postRequiredStringPropertyCreateRequest creates the PostRequiredStringProperty request.
func (client *ExplicitClient) postRequiredStringPropertyCreateRequest(ctx context.Context, bodyParameter StringWrapper, options *ExplicitPostRequiredStringPropertyOptions) (*policy.Request, error) {
	urlPath := "/reqopt/requied/string/property"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, bodyParameter)
}

// postRequiredStringPropertyHandleError handles the PostRequiredStringProperty error response.
func (client *ExplicitClient) postRequiredStringPropertyHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutOptionalBinaryBody - Test explicitly optional body parameter
// If the operation fails it returns the *Error error type.
func (client *ExplicitClient) PutOptionalBinaryBody(ctx context.Context, options *ExplicitPutOptionalBinaryBodyOptions) (ExplicitPutOptionalBinaryBodyResponse, error) {
	req, err := client.putOptionalBinaryBodyCreateRequest(ctx, options)
	if err != nil {
		return ExplicitPutOptionalBinaryBodyResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ExplicitPutOptionalBinaryBodyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExplicitPutOptionalBinaryBodyResponse{}, client.putOptionalBinaryBodyHandleError(resp)
	}
	return ExplicitPutOptionalBinaryBodyResponse{RawResponse: resp}, nil
}

// putOptionalBinaryBodyCreateRequest creates the PutOptionalBinaryBody request.
func (client *ExplicitClient) putOptionalBinaryBodyCreateRequest(ctx context.Context, options *ExplicitPutOptionalBinaryBodyOptions) (*policy.Request, error) {
	urlPath := "/reqopt/explicit/optional/binary-body"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.BodyParameter != nil {
		return req, req.SetBody(options.BodyParameter, "application/octet-stream")
	}
	return req, nil
}

// putOptionalBinaryBodyHandleError handles the PutOptionalBinaryBody error response.
func (client *ExplicitClient) putOptionalBinaryBodyHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutRequiredBinaryBody - Test explicitly required body parameter
// If the operation fails it returns the *Error error type.
func (client *ExplicitClient) PutRequiredBinaryBody(ctx context.Context, bodyParameter io.ReadSeekCloser, options *ExplicitPutRequiredBinaryBodyOptions) (ExplicitPutRequiredBinaryBodyResponse, error) {
	req, err := client.putRequiredBinaryBodyCreateRequest(ctx, bodyParameter, options)
	if err != nil {
		return ExplicitPutRequiredBinaryBodyResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ExplicitPutRequiredBinaryBodyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExplicitPutRequiredBinaryBodyResponse{}, client.putRequiredBinaryBodyHandleError(resp)
	}
	return ExplicitPutRequiredBinaryBodyResponse{RawResponse: resp}, nil
}

// putRequiredBinaryBodyCreateRequest creates the PutRequiredBinaryBody request.
func (client *ExplicitClient) putRequiredBinaryBodyCreateRequest(ctx context.Context, bodyParameter io.ReadSeekCloser, options *ExplicitPutRequiredBinaryBodyOptions) (*policy.Request, error) {
	urlPath := "/reqopt/explicit/required/binary-body"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, req.SetBody(bodyParameter, "application/octet-stream")
}

// putRequiredBinaryBodyHandleError handles the PutRequiredBinaryBody error response.
func (client *ExplicitClient) putRequiredBinaryBodyHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
