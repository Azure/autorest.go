// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package optionalgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"strconv"
	"strings"
)

// ExplicitOperations contains the methods for the Explicit group.
type ExplicitOperations interface {
	// PostOptionalArrayHeader - Test explicitly optional integer. Please put a header 'headerParameter' => null.
	PostOptionalArrayHeader(ctx context.Context, explicitPostOptionalArrayHeaderOptions *ExplicitPostOptionalArrayHeaderOptions) (*http.Response, error)
	// PostOptionalArrayParameter - Test explicitly optional array. Please put null.
	PostOptionalArrayParameter(ctx context.Context, explicitPostOptionalArrayParameterOptions *ExplicitPostOptionalArrayParameterOptions) (*http.Response, error)
	// PostOptionalArrayProperty - Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
	PostOptionalArrayProperty(ctx context.Context, explicitPostOptionalArrayPropertyOptions *ExplicitPostOptionalArrayPropertyOptions) (*http.Response, error)
	// PostOptionalClassParameter - Test explicitly optional complex object. Please put null.
	PostOptionalClassParameter(ctx context.Context, explicitPostOptionalClassParameterOptions *ExplicitPostOptionalClassParameterOptions) (*http.Response, error)
	// PostOptionalClassProperty - Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
	PostOptionalClassProperty(ctx context.Context, explicitPostOptionalClassPropertyOptions *ExplicitPostOptionalClassPropertyOptions) (*http.Response, error)
	// PostOptionalIntegerHeader - Test explicitly optional integer. Please put a header 'headerParameter' => null.
	PostOptionalIntegerHeader(ctx context.Context, explicitPostOptionalIntegerHeaderOptions *ExplicitPostOptionalIntegerHeaderOptions) (*http.Response, error)
	// PostOptionalIntegerParameter - Test explicitly optional integer. Please put null.
	PostOptionalIntegerParameter(ctx context.Context, explicitPostOptionalIntegerParameterOptions *ExplicitPostOptionalIntegerParameterOptions) (*http.Response, error)
	// PostOptionalIntegerProperty - Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
	PostOptionalIntegerProperty(ctx context.Context, explicitPostOptionalIntegerPropertyOptions *ExplicitPostOptionalIntegerPropertyOptions) (*http.Response, error)
	// PostOptionalStringHeader - Test explicitly optional string. Please put a header 'headerParameter' => null.
	PostOptionalStringHeader(ctx context.Context, explicitPostOptionalStringHeaderOptions *ExplicitPostOptionalStringHeaderOptions) (*http.Response, error)
	// PostOptionalStringParameter - Test explicitly optional string. Please put null.
	PostOptionalStringParameter(ctx context.Context, explicitPostOptionalStringParameterOptions *ExplicitPostOptionalStringParameterOptions) (*http.Response, error)
	// PostOptionalStringProperty - Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
	PostOptionalStringProperty(ctx context.Context, explicitPostOptionalStringPropertyOptions *ExplicitPostOptionalStringPropertyOptions) (*http.Response, error)
	// PostRequiredArrayHeader - Test explicitly required array. Please put a header 'headerParameter' => null and the client library should throw before the request is sent.
	PostRequiredArrayHeader(ctx context.Context, headerParameter []string) (*http.Response, error)
	// PostRequiredArrayParameter - Test explicitly required array. Please put null and the client library should throw before the request is sent.
	PostRequiredArrayParameter(ctx context.Context, bodyParameter []string) (*http.Response, error)
	// PostRequiredArrayProperty - Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the client library should throw before the request is sent.
	PostRequiredArrayProperty(ctx context.Context, bodyParameter ArrayWrapper) (*http.Response, error)
	// PostRequiredClassParameter - Test explicitly required complex object. Please put null and the client library should throw before the request is sent.
	PostRequiredClassParameter(ctx context.Context, bodyParameter Product) (*http.Response, error)
	// PostRequiredClassProperty - Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null and the client library should throw before the request is sent.
	PostRequiredClassProperty(ctx context.Context, bodyParameter ClassWrapper) (*http.Response, error)
	// PostRequiredIntegerHeader - Test explicitly required integer. Please put a header 'headerParameter' => null and the client library should throw before the request is sent.
	PostRequiredIntegerHeader(ctx context.Context, headerParameter int32) (*http.Response, error)
	// PostRequiredIntegerParameter - Test explicitly required integer. Please put null and the client library should throw before the request is sent.
	PostRequiredIntegerParameter(ctx context.Context, bodyParameter int32) (*http.Response, error)
	// PostRequiredIntegerProperty - Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the client library should throw before the request is sent.
	PostRequiredIntegerProperty(ctx context.Context, bodyParameter IntWrapper) (*http.Response, error)
	// PostRequiredStringHeader - Test explicitly required string. Please put a header 'headerParameter' => null and the client library should throw before the request is sent.
	PostRequiredStringHeader(ctx context.Context, headerParameter string) (*http.Response, error)
	// PostRequiredStringParameter - Test explicitly required string. Please put null and the client library should throw before the request is sent.
	PostRequiredStringParameter(ctx context.Context, bodyParameter string) (*http.Response, error)
	// PostRequiredStringProperty - Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the client library should throw before the request is sent.
	PostRequiredStringProperty(ctx context.Context, bodyParameter StringWrapper) (*http.Response, error)
}

// ExplicitClient implements the ExplicitOperations interface.
// Don't use this type directly, use NewExplicitClient() instead.
type ExplicitClient struct {
	*Client
}

// NewExplicitClient creates a new instance of ExplicitClient with the specified values.
func NewExplicitClient(c *Client) ExplicitOperations {
	return &ExplicitClient{Client: c}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *ExplicitClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// PostOptionalArrayHeader - Test explicitly optional integer. Please put a header 'headerParameter' => null.
func (client *ExplicitClient) PostOptionalArrayHeader(ctx context.Context, explicitPostOptionalArrayHeaderOptions *ExplicitPostOptionalArrayHeaderOptions) (*http.Response, error) {
	req, err := client.PostOptionalArrayHeaderCreateRequest(ctx, explicitPostOptionalArrayHeaderOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.PostOptionalArrayHeaderHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PostOptionalArrayHeaderCreateRequest creates the PostOptionalArrayHeader request.
func (client *ExplicitClient) PostOptionalArrayHeaderCreateRequest(ctx context.Context, explicitPostOptionalArrayHeaderOptions *ExplicitPostOptionalArrayHeaderOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/array/header"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	if explicitPostOptionalArrayHeaderOptions != nil && explicitPostOptionalArrayHeaderOptions.HeaderParameter != nil {
		req.Header.Set("headerParameter", strings.Join(*explicitPostOptionalArrayHeaderOptions.HeaderParameter, ","))
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// PostOptionalArrayHeaderHandleResponse handles the PostOptionalArrayHeader response.
func (client *ExplicitClient) PostOptionalArrayHeaderHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostOptionalArrayHeaderHandleError(resp)
	}
	return resp.Response, nil
}

// PostOptionalArrayHeaderHandleError handles the PostOptionalArrayHeader error response.
func (client *ExplicitClient) PostOptionalArrayHeaderHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostOptionalArrayParameter - Test explicitly optional array. Please put null.
func (client *ExplicitClient) PostOptionalArrayParameter(ctx context.Context, explicitPostOptionalArrayParameterOptions *ExplicitPostOptionalArrayParameterOptions) (*http.Response, error) {
	req, err := client.PostOptionalArrayParameterCreateRequest(ctx, explicitPostOptionalArrayParameterOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.PostOptionalArrayParameterHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PostOptionalArrayParameterCreateRequest creates the PostOptionalArrayParameter request.
func (client *ExplicitClient) PostOptionalArrayParameterCreateRequest(ctx context.Context, explicitPostOptionalArrayParameterOptions *ExplicitPostOptionalArrayParameterOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/array/parameter"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	if explicitPostOptionalArrayParameterOptions != nil {
		return req, req.MarshalAsJSON(explicitPostOptionalArrayParameterOptions.BodyParameter)
	}
	return req, nil
}

// PostOptionalArrayParameterHandleResponse handles the PostOptionalArrayParameter response.
func (client *ExplicitClient) PostOptionalArrayParameterHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostOptionalArrayParameterHandleError(resp)
	}
	return resp.Response, nil
}

// PostOptionalArrayParameterHandleError handles the PostOptionalArrayParameter error response.
func (client *ExplicitClient) PostOptionalArrayParameterHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostOptionalArrayProperty - Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
func (client *ExplicitClient) PostOptionalArrayProperty(ctx context.Context, explicitPostOptionalArrayPropertyOptions *ExplicitPostOptionalArrayPropertyOptions) (*http.Response, error) {
	req, err := client.PostOptionalArrayPropertyCreateRequest(ctx, explicitPostOptionalArrayPropertyOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.PostOptionalArrayPropertyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PostOptionalArrayPropertyCreateRequest creates the PostOptionalArrayProperty request.
func (client *ExplicitClient) PostOptionalArrayPropertyCreateRequest(ctx context.Context, explicitPostOptionalArrayPropertyOptions *ExplicitPostOptionalArrayPropertyOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/array/property"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	if explicitPostOptionalArrayPropertyOptions != nil {
		return req, req.MarshalAsJSON(explicitPostOptionalArrayPropertyOptions.BodyParameter)
	}
	return req, nil
}

// PostOptionalArrayPropertyHandleResponse handles the PostOptionalArrayProperty response.
func (client *ExplicitClient) PostOptionalArrayPropertyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostOptionalArrayPropertyHandleError(resp)
	}
	return resp.Response, nil
}

// PostOptionalArrayPropertyHandleError handles the PostOptionalArrayProperty error response.
func (client *ExplicitClient) PostOptionalArrayPropertyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostOptionalClassParameter - Test explicitly optional complex object. Please put null.
func (client *ExplicitClient) PostOptionalClassParameter(ctx context.Context, explicitPostOptionalClassParameterOptions *ExplicitPostOptionalClassParameterOptions) (*http.Response, error) {
	req, err := client.PostOptionalClassParameterCreateRequest(ctx, explicitPostOptionalClassParameterOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.PostOptionalClassParameterHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PostOptionalClassParameterCreateRequest creates the PostOptionalClassParameter request.
func (client *ExplicitClient) PostOptionalClassParameterCreateRequest(ctx context.Context, explicitPostOptionalClassParameterOptions *ExplicitPostOptionalClassParameterOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/class/parameter"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	if explicitPostOptionalClassParameterOptions != nil {
		return req, req.MarshalAsJSON(explicitPostOptionalClassParameterOptions.BodyParameter)
	}
	return req, nil
}

// PostOptionalClassParameterHandleResponse handles the PostOptionalClassParameter response.
func (client *ExplicitClient) PostOptionalClassParameterHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostOptionalClassParameterHandleError(resp)
	}
	return resp.Response, nil
}

// PostOptionalClassParameterHandleError handles the PostOptionalClassParameter error response.
func (client *ExplicitClient) PostOptionalClassParameterHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostOptionalClassProperty - Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
func (client *ExplicitClient) PostOptionalClassProperty(ctx context.Context, explicitPostOptionalClassPropertyOptions *ExplicitPostOptionalClassPropertyOptions) (*http.Response, error) {
	req, err := client.PostOptionalClassPropertyCreateRequest(ctx, explicitPostOptionalClassPropertyOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.PostOptionalClassPropertyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PostOptionalClassPropertyCreateRequest creates the PostOptionalClassProperty request.
func (client *ExplicitClient) PostOptionalClassPropertyCreateRequest(ctx context.Context, explicitPostOptionalClassPropertyOptions *ExplicitPostOptionalClassPropertyOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/class/property"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	if explicitPostOptionalClassPropertyOptions != nil {
		return req, req.MarshalAsJSON(explicitPostOptionalClassPropertyOptions.BodyParameter)
	}
	return req, nil
}

// PostOptionalClassPropertyHandleResponse handles the PostOptionalClassProperty response.
func (client *ExplicitClient) PostOptionalClassPropertyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostOptionalClassPropertyHandleError(resp)
	}
	return resp.Response, nil
}

// PostOptionalClassPropertyHandleError handles the PostOptionalClassProperty error response.
func (client *ExplicitClient) PostOptionalClassPropertyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostOptionalIntegerHeader - Test explicitly optional integer. Please put a header 'headerParameter' => null.
func (client *ExplicitClient) PostOptionalIntegerHeader(ctx context.Context, explicitPostOptionalIntegerHeaderOptions *ExplicitPostOptionalIntegerHeaderOptions) (*http.Response, error) {
	req, err := client.PostOptionalIntegerHeaderCreateRequest(ctx, explicitPostOptionalIntegerHeaderOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.PostOptionalIntegerHeaderHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PostOptionalIntegerHeaderCreateRequest creates the PostOptionalIntegerHeader request.
func (client *ExplicitClient) PostOptionalIntegerHeaderCreateRequest(ctx context.Context, explicitPostOptionalIntegerHeaderOptions *ExplicitPostOptionalIntegerHeaderOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/integer/header"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	if explicitPostOptionalIntegerHeaderOptions != nil && explicitPostOptionalIntegerHeaderOptions.HeaderParameter != nil {
		req.Header.Set("headerParameter", strconv.FormatInt(int64(*explicitPostOptionalIntegerHeaderOptions.HeaderParameter), 10))
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// PostOptionalIntegerHeaderHandleResponse handles the PostOptionalIntegerHeader response.
func (client *ExplicitClient) PostOptionalIntegerHeaderHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostOptionalIntegerHeaderHandleError(resp)
	}
	return resp.Response, nil
}

// PostOptionalIntegerHeaderHandleError handles the PostOptionalIntegerHeader error response.
func (client *ExplicitClient) PostOptionalIntegerHeaderHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostOptionalIntegerParameter - Test explicitly optional integer. Please put null.
func (client *ExplicitClient) PostOptionalIntegerParameter(ctx context.Context, explicitPostOptionalIntegerParameterOptions *ExplicitPostOptionalIntegerParameterOptions) (*http.Response, error) {
	req, err := client.PostOptionalIntegerParameterCreateRequest(ctx, explicitPostOptionalIntegerParameterOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.PostOptionalIntegerParameterHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PostOptionalIntegerParameterCreateRequest creates the PostOptionalIntegerParameter request.
func (client *ExplicitClient) PostOptionalIntegerParameterCreateRequest(ctx context.Context, explicitPostOptionalIntegerParameterOptions *ExplicitPostOptionalIntegerParameterOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/integer/parameter"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	if explicitPostOptionalIntegerParameterOptions != nil {
		return req, req.MarshalAsJSON(explicitPostOptionalIntegerParameterOptions.BodyParameter)
	}
	return req, nil
}

// PostOptionalIntegerParameterHandleResponse handles the PostOptionalIntegerParameter response.
func (client *ExplicitClient) PostOptionalIntegerParameterHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostOptionalIntegerParameterHandleError(resp)
	}
	return resp.Response, nil
}

// PostOptionalIntegerParameterHandleError handles the PostOptionalIntegerParameter error response.
func (client *ExplicitClient) PostOptionalIntegerParameterHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostOptionalIntegerProperty - Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
func (client *ExplicitClient) PostOptionalIntegerProperty(ctx context.Context, explicitPostOptionalIntegerPropertyOptions *ExplicitPostOptionalIntegerPropertyOptions) (*http.Response, error) {
	req, err := client.PostOptionalIntegerPropertyCreateRequest(ctx, explicitPostOptionalIntegerPropertyOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.PostOptionalIntegerPropertyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PostOptionalIntegerPropertyCreateRequest creates the PostOptionalIntegerProperty request.
func (client *ExplicitClient) PostOptionalIntegerPropertyCreateRequest(ctx context.Context, explicitPostOptionalIntegerPropertyOptions *ExplicitPostOptionalIntegerPropertyOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/integer/property"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	if explicitPostOptionalIntegerPropertyOptions != nil {
		return req, req.MarshalAsJSON(explicitPostOptionalIntegerPropertyOptions.BodyParameter)
	}
	return req, nil
}

// PostOptionalIntegerPropertyHandleResponse handles the PostOptionalIntegerProperty response.
func (client *ExplicitClient) PostOptionalIntegerPropertyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostOptionalIntegerPropertyHandleError(resp)
	}
	return resp.Response, nil
}

// PostOptionalIntegerPropertyHandleError handles the PostOptionalIntegerProperty error response.
func (client *ExplicitClient) PostOptionalIntegerPropertyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostOptionalStringHeader - Test explicitly optional string. Please put a header 'headerParameter' => null.
func (client *ExplicitClient) PostOptionalStringHeader(ctx context.Context, explicitPostOptionalStringHeaderOptions *ExplicitPostOptionalStringHeaderOptions) (*http.Response, error) {
	req, err := client.PostOptionalStringHeaderCreateRequest(ctx, explicitPostOptionalStringHeaderOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.PostOptionalStringHeaderHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PostOptionalStringHeaderCreateRequest creates the PostOptionalStringHeader request.
func (client *ExplicitClient) PostOptionalStringHeaderCreateRequest(ctx context.Context, explicitPostOptionalStringHeaderOptions *ExplicitPostOptionalStringHeaderOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/string/header"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	if explicitPostOptionalStringHeaderOptions != nil && explicitPostOptionalStringHeaderOptions.BodyParameter != nil {
		req.Header.Set("bodyParameter", *explicitPostOptionalStringHeaderOptions.BodyParameter)
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// PostOptionalStringHeaderHandleResponse handles the PostOptionalStringHeader response.
func (client *ExplicitClient) PostOptionalStringHeaderHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostOptionalStringHeaderHandleError(resp)
	}
	return resp.Response, nil
}

// PostOptionalStringHeaderHandleError handles the PostOptionalStringHeader error response.
func (client *ExplicitClient) PostOptionalStringHeaderHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostOptionalStringParameter - Test explicitly optional string. Please put null.
func (client *ExplicitClient) PostOptionalStringParameter(ctx context.Context, explicitPostOptionalStringParameterOptions *ExplicitPostOptionalStringParameterOptions) (*http.Response, error) {
	req, err := client.PostOptionalStringParameterCreateRequest(ctx, explicitPostOptionalStringParameterOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.PostOptionalStringParameterHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PostOptionalStringParameterCreateRequest creates the PostOptionalStringParameter request.
func (client *ExplicitClient) PostOptionalStringParameterCreateRequest(ctx context.Context, explicitPostOptionalStringParameterOptions *ExplicitPostOptionalStringParameterOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/string/parameter"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	if explicitPostOptionalStringParameterOptions != nil {
		return req, req.MarshalAsJSON(explicitPostOptionalStringParameterOptions.BodyParameter)
	}
	return req, nil
}

// PostOptionalStringParameterHandleResponse handles the PostOptionalStringParameter response.
func (client *ExplicitClient) PostOptionalStringParameterHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostOptionalStringParameterHandleError(resp)
	}
	return resp.Response, nil
}

// PostOptionalStringParameterHandleError handles the PostOptionalStringParameter error response.
func (client *ExplicitClient) PostOptionalStringParameterHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostOptionalStringProperty - Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
func (client *ExplicitClient) PostOptionalStringProperty(ctx context.Context, explicitPostOptionalStringPropertyOptions *ExplicitPostOptionalStringPropertyOptions) (*http.Response, error) {
	req, err := client.PostOptionalStringPropertyCreateRequest(ctx, explicitPostOptionalStringPropertyOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.PostOptionalStringPropertyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PostOptionalStringPropertyCreateRequest creates the PostOptionalStringProperty request.
func (client *ExplicitClient) PostOptionalStringPropertyCreateRequest(ctx context.Context, explicitPostOptionalStringPropertyOptions *ExplicitPostOptionalStringPropertyOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/string/property"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	if explicitPostOptionalStringPropertyOptions != nil {
		return req, req.MarshalAsJSON(explicitPostOptionalStringPropertyOptions.BodyParameter)
	}
	return req, nil
}

// PostOptionalStringPropertyHandleResponse handles the PostOptionalStringProperty response.
func (client *ExplicitClient) PostOptionalStringPropertyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostOptionalStringPropertyHandleError(resp)
	}
	return resp.Response, nil
}

// PostOptionalStringPropertyHandleError handles the PostOptionalStringProperty error response.
func (client *ExplicitClient) PostOptionalStringPropertyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostRequiredArrayHeader - Test explicitly required array. Please put a header 'headerParameter' => null and the client library should throw before the request is sent.
func (client *ExplicitClient) PostRequiredArrayHeader(ctx context.Context, headerParameter []string) (*http.Response, error) {
	req, err := client.PostRequiredArrayHeaderCreateRequest(ctx, headerParameter)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.PostRequiredArrayHeaderHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PostRequiredArrayHeaderCreateRequest creates the PostRequiredArrayHeader request.
func (client *ExplicitClient) PostRequiredArrayHeaderCreateRequest(ctx context.Context, headerParameter []string) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/array/header"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("headerParameter", strings.Join(headerParameter, ","))
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// PostRequiredArrayHeaderHandleResponse handles the PostRequiredArrayHeader response.
func (client *ExplicitClient) PostRequiredArrayHeaderHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostRequiredArrayHeaderHandleError(resp)
	}
	return resp.Response, nil
}

// PostRequiredArrayHeaderHandleError handles the PostRequiredArrayHeader error response.
func (client *ExplicitClient) PostRequiredArrayHeaderHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostRequiredArrayParameter - Test explicitly required array. Please put null and the client library should throw before the request is sent.
func (client *ExplicitClient) PostRequiredArrayParameter(ctx context.Context, bodyParameter []string) (*http.Response, error) {
	req, err := client.PostRequiredArrayParameterCreateRequest(ctx, bodyParameter)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.PostRequiredArrayParameterHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PostRequiredArrayParameterCreateRequest creates the PostRequiredArrayParameter request.
func (client *ExplicitClient) PostRequiredArrayParameterCreateRequest(ctx context.Context, bodyParameter []string) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/array/parameter"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(bodyParameter)
}

// PostRequiredArrayParameterHandleResponse handles the PostRequiredArrayParameter response.
func (client *ExplicitClient) PostRequiredArrayParameterHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostRequiredArrayParameterHandleError(resp)
	}
	return resp.Response, nil
}

// PostRequiredArrayParameterHandleError handles the PostRequiredArrayParameter error response.
func (client *ExplicitClient) PostRequiredArrayParameterHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostRequiredArrayProperty - Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the client library should throw before the request is sent.
func (client *ExplicitClient) PostRequiredArrayProperty(ctx context.Context, bodyParameter ArrayWrapper) (*http.Response, error) {
	req, err := client.PostRequiredArrayPropertyCreateRequest(ctx, bodyParameter)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.PostRequiredArrayPropertyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PostRequiredArrayPropertyCreateRequest creates the PostRequiredArrayProperty request.
func (client *ExplicitClient) PostRequiredArrayPropertyCreateRequest(ctx context.Context, bodyParameter ArrayWrapper) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/array/property"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(bodyParameter)
}

// PostRequiredArrayPropertyHandleResponse handles the PostRequiredArrayProperty response.
func (client *ExplicitClient) PostRequiredArrayPropertyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostRequiredArrayPropertyHandleError(resp)
	}
	return resp.Response, nil
}

// PostRequiredArrayPropertyHandleError handles the PostRequiredArrayProperty error response.
func (client *ExplicitClient) PostRequiredArrayPropertyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostRequiredClassParameter - Test explicitly required complex object. Please put null and the client library should throw before the request is sent.
func (client *ExplicitClient) PostRequiredClassParameter(ctx context.Context, bodyParameter Product) (*http.Response, error) {
	req, err := client.PostRequiredClassParameterCreateRequest(ctx, bodyParameter)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.PostRequiredClassParameterHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PostRequiredClassParameterCreateRequest creates the PostRequiredClassParameter request.
func (client *ExplicitClient) PostRequiredClassParameterCreateRequest(ctx context.Context, bodyParameter Product) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/class/parameter"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(bodyParameter)
}

// PostRequiredClassParameterHandleResponse handles the PostRequiredClassParameter response.
func (client *ExplicitClient) PostRequiredClassParameterHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostRequiredClassParameterHandleError(resp)
	}
	return resp.Response, nil
}

// PostRequiredClassParameterHandleError handles the PostRequiredClassParameter error response.
func (client *ExplicitClient) PostRequiredClassParameterHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostRequiredClassProperty - Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null and the client library should throw before the request is sent.
func (client *ExplicitClient) PostRequiredClassProperty(ctx context.Context, bodyParameter ClassWrapper) (*http.Response, error) {
	req, err := client.PostRequiredClassPropertyCreateRequest(ctx, bodyParameter)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.PostRequiredClassPropertyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PostRequiredClassPropertyCreateRequest creates the PostRequiredClassProperty request.
func (client *ExplicitClient) PostRequiredClassPropertyCreateRequest(ctx context.Context, bodyParameter ClassWrapper) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/class/property"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(bodyParameter)
}

// PostRequiredClassPropertyHandleResponse handles the PostRequiredClassProperty response.
func (client *ExplicitClient) PostRequiredClassPropertyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostRequiredClassPropertyHandleError(resp)
	}
	return resp.Response, nil
}

// PostRequiredClassPropertyHandleError handles the PostRequiredClassProperty error response.
func (client *ExplicitClient) PostRequiredClassPropertyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostRequiredIntegerHeader - Test explicitly required integer. Please put a header 'headerParameter' => null and the client library should throw before the request is sent.
func (client *ExplicitClient) PostRequiredIntegerHeader(ctx context.Context, headerParameter int32) (*http.Response, error) {
	req, err := client.PostRequiredIntegerHeaderCreateRequest(ctx, headerParameter)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.PostRequiredIntegerHeaderHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PostRequiredIntegerHeaderCreateRequest creates the PostRequiredIntegerHeader request.
func (client *ExplicitClient) PostRequiredIntegerHeaderCreateRequest(ctx context.Context, headerParameter int32) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/integer/header"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("headerParameter", strconv.FormatInt(int64(headerParameter), 10))
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// PostRequiredIntegerHeaderHandleResponse handles the PostRequiredIntegerHeader response.
func (client *ExplicitClient) PostRequiredIntegerHeaderHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostRequiredIntegerHeaderHandleError(resp)
	}
	return resp.Response, nil
}

// PostRequiredIntegerHeaderHandleError handles the PostRequiredIntegerHeader error response.
func (client *ExplicitClient) PostRequiredIntegerHeaderHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostRequiredIntegerParameter - Test explicitly required integer. Please put null and the client library should throw before the request is sent.
func (client *ExplicitClient) PostRequiredIntegerParameter(ctx context.Context, bodyParameter int32) (*http.Response, error) {
	req, err := client.PostRequiredIntegerParameterCreateRequest(ctx, bodyParameter)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.PostRequiredIntegerParameterHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PostRequiredIntegerParameterCreateRequest creates the PostRequiredIntegerParameter request.
func (client *ExplicitClient) PostRequiredIntegerParameterCreateRequest(ctx context.Context, bodyParameter int32) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/integer/parameter"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(bodyParameter)
}

// PostRequiredIntegerParameterHandleResponse handles the PostRequiredIntegerParameter response.
func (client *ExplicitClient) PostRequiredIntegerParameterHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostRequiredIntegerParameterHandleError(resp)
	}
	return resp.Response, nil
}

// PostRequiredIntegerParameterHandleError handles the PostRequiredIntegerParameter error response.
func (client *ExplicitClient) PostRequiredIntegerParameterHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostRequiredIntegerProperty - Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the client library should throw before the request is sent.
func (client *ExplicitClient) PostRequiredIntegerProperty(ctx context.Context, bodyParameter IntWrapper) (*http.Response, error) {
	req, err := client.PostRequiredIntegerPropertyCreateRequest(ctx, bodyParameter)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.PostRequiredIntegerPropertyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PostRequiredIntegerPropertyCreateRequest creates the PostRequiredIntegerProperty request.
func (client *ExplicitClient) PostRequiredIntegerPropertyCreateRequest(ctx context.Context, bodyParameter IntWrapper) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/integer/property"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(bodyParameter)
}

// PostRequiredIntegerPropertyHandleResponse handles the PostRequiredIntegerProperty response.
func (client *ExplicitClient) PostRequiredIntegerPropertyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostRequiredIntegerPropertyHandleError(resp)
	}
	return resp.Response, nil
}

// PostRequiredIntegerPropertyHandleError handles the PostRequiredIntegerProperty error response.
func (client *ExplicitClient) PostRequiredIntegerPropertyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostRequiredStringHeader - Test explicitly required string. Please put a header 'headerParameter' => null and the client library should throw before the request is sent.
func (client *ExplicitClient) PostRequiredStringHeader(ctx context.Context, headerParameter string) (*http.Response, error) {
	req, err := client.PostRequiredStringHeaderCreateRequest(ctx, headerParameter)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.PostRequiredStringHeaderHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PostRequiredStringHeaderCreateRequest creates the PostRequiredStringHeader request.
func (client *ExplicitClient) PostRequiredStringHeaderCreateRequest(ctx context.Context, headerParameter string) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/string/header"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("headerParameter", headerParameter)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// PostRequiredStringHeaderHandleResponse handles the PostRequiredStringHeader response.
func (client *ExplicitClient) PostRequiredStringHeaderHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostRequiredStringHeaderHandleError(resp)
	}
	return resp.Response, nil
}

// PostRequiredStringHeaderHandleError handles the PostRequiredStringHeader error response.
func (client *ExplicitClient) PostRequiredStringHeaderHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostRequiredStringParameter - Test explicitly required string. Please put null and the client library should throw before the request is sent.
func (client *ExplicitClient) PostRequiredStringParameter(ctx context.Context, bodyParameter string) (*http.Response, error) {
	req, err := client.PostRequiredStringParameterCreateRequest(ctx, bodyParameter)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.PostRequiredStringParameterHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PostRequiredStringParameterCreateRequest creates the PostRequiredStringParameter request.
func (client *ExplicitClient) PostRequiredStringParameterCreateRequest(ctx context.Context, bodyParameter string) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/string/parameter"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(bodyParameter)
}

// PostRequiredStringParameterHandleResponse handles the PostRequiredStringParameter response.
func (client *ExplicitClient) PostRequiredStringParameterHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostRequiredStringParameterHandleError(resp)
	}
	return resp.Response, nil
}

// PostRequiredStringParameterHandleError handles the PostRequiredStringParameter error response.
func (client *ExplicitClient) PostRequiredStringParameterHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostRequiredStringProperty - Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the client library should throw before the request is sent.
func (client *ExplicitClient) PostRequiredStringProperty(ctx context.Context, bodyParameter StringWrapper) (*http.Response, error) {
	req, err := client.PostRequiredStringPropertyCreateRequest(ctx, bodyParameter)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.PostRequiredStringPropertyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PostRequiredStringPropertyCreateRequest creates the PostRequiredStringProperty request.
func (client *ExplicitClient) PostRequiredStringPropertyCreateRequest(ctx context.Context, bodyParameter StringWrapper) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/string/property"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(bodyParameter)
}

// PostRequiredStringPropertyHandleResponse handles the PostRequiredStringProperty response.
func (client *ExplicitClient) PostRequiredStringPropertyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostRequiredStringPropertyHandleError(resp)
	}
	return resp.Response, nil
}

// PostRequiredStringPropertyHandleError handles the PostRequiredStringProperty error response.
func (client *ExplicitClient) PostRequiredStringPropertyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
