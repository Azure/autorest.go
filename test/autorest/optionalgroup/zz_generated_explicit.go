// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package optionalgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"strconv"
	"strings"
)

// ExplicitOperations contains the methods for the Explicit group.
type ExplicitOperations interface {
	// PostOptionalArrayHeader - Test explicitly optional integer. Please put a header 'headerParameter' => null.
	PostOptionalArrayHeader(ctx context.Context, options *ExplicitPostOptionalArrayHeaderOptions) (*http.Response, error)
	// PostOptionalArrayParameter - Test explicitly optional array. Please put null.
	PostOptionalArrayParameter(ctx context.Context, options *ExplicitPostOptionalArrayParameterOptions) (*http.Response, error)
	// PostOptionalArrayProperty - Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
	PostOptionalArrayProperty(ctx context.Context, options *ExplicitPostOptionalArrayPropertyOptions) (*http.Response, error)
	// PostOptionalClassParameter - Test explicitly optional complex object. Please put null.
	PostOptionalClassParameter(ctx context.Context, options *ExplicitPostOptionalClassParameterOptions) (*http.Response, error)
	// PostOptionalClassProperty - Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
	PostOptionalClassProperty(ctx context.Context, options *ExplicitPostOptionalClassPropertyOptions) (*http.Response, error)
	// PostOptionalIntegerHeader - Test explicitly optional integer. Please put a header 'headerParameter' => null.
	PostOptionalIntegerHeader(ctx context.Context, options *ExplicitPostOptionalIntegerHeaderOptions) (*http.Response, error)
	// PostOptionalIntegerParameter - Test explicitly optional integer. Please put null.
	PostOptionalIntegerParameter(ctx context.Context, options *ExplicitPostOptionalIntegerParameterOptions) (*http.Response, error)
	// PostOptionalIntegerProperty - Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
	PostOptionalIntegerProperty(ctx context.Context, options *ExplicitPostOptionalIntegerPropertyOptions) (*http.Response, error)
	// PostOptionalStringHeader - Test explicitly optional string. Please put a header 'headerParameter' => null.
	PostOptionalStringHeader(ctx context.Context, options *ExplicitPostOptionalStringHeaderOptions) (*http.Response, error)
	// PostOptionalStringParameter - Test explicitly optional string. Please put null.
	PostOptionalStringParameter(ctx context.Context, options *ExplicitPostOptionalStringParameterOptions) (*http.Response, error)
	// PostOptionalStringProperty - Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
	PostOptionalStringProperty(ctx context.Context, options *ExplicitPostOptionalStringPropertyOptions) (*http.Response, error)
	// PostRequiredArrayHeader - Test explicitly required array. Please put a header 'headerParameter' => null and the client library should throw before the
	// request is sent.
	PostRequiredArrayHeader(ctx context.Context, headerParameter []string, options *ExplicitPostRequiredArrayHeaderOptions) (*http.Response, error)
	// PostRequiredArrayParameter - Test explicitly required array. Please put null and the client library should throw before the request is sent.
	PostRequiredArrayParameter(ctx context.Context, bodyParameter []string, options *ExplicitPostRequiredArrayParameterOptions) (*http.Response, error)
	// PostRequiredArrayProperty - Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the client library should throw
	// before the request is sent.
	PostRequiredArrayProperty(ctx context.Context, bodyParameter ArrayWrapper, options *ExplicitPostRequiredArrayPropertyOptions) (*http.Response, error)
	// PostRequiredClassParameter - Test explicitly required complex object. Please put null and the client library should throw before the request is sent.
	PostRequiredClassParameter(ctx context.Context, bodyParameter Product, options *ExplicitPostRequiredClassParameterOptions) (*http.Response, error)
	// PostRequiredClassProperty - Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null and the client library should
	// throw before the request is sent.
	PostRequiredClassProperty(ctx context.Context, bodyParameter ClassWrapper, options *ExplicitPostRequiredClassPropertyOptions) (*http.Response, error)
	// PostRequiredIntegerHeader - Test explicitly required integer. Please put a header 'headerParameter' => null and the client library should throw before
	// the request is sent.
	PostRequiredIntegerHeader(ctx context.Context, headerParameter int32, options *ExplicitPostRequiredIntegerHeaderOptions) (*http.Response, error)
	// PostRequiredIntegerParameter - Test explicitly required integer. Please put null and the client library should throw before the request is sent.
	PostRequiredIntegerParameter(ctx context.Context, bodyParameter int32, options *ExplicitPostRequiredIntegerParameterOptions) (*http.Response, error)
	// PostRequiredIntegerProperty - Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the client library should throw
	// before the request is sent.
	PostRequiredIntegerProperty(ctx context.Context, bodyParameter IntWrapper, options *ExplicitPostRequiredIntegerPropertyOptions) (*http.Response, error)
	// PostRequiredStringHeader - Test explicitly required string. Please put a header 'headerParameter' => null and the client library should throw before
	// the request is sent.
	PostRequiredStringHeader(ctx context.Context, headerParameter string, options *ExplicitPostRequiredStringHeaderOptions) (*http.Response, error)
	// PostRequiredStringParameter - Test explicitly required string. Please put null and the client library should throw before the request is sent.
	PostRequiredStringParameter(ctx context.Context, bodyParameter string, options *ExplicitPostRequiredStringParameterOptions) (*http.Response, error)
	// PostRequiredStringProperty - Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the client library should throw
	// before the request is sent.
	PostRequiredStringProperty(ctx context.Context, bodyParameter StringWrapper, options *ExplicitPostRequiredStringPropertyOptions) (*http.Response, error)
}

// ExplicitClient implements the ExplicitOperations interface.
// Don't use this type directly, use NewExplicitClient() instead.
type ExplicitClient struct {
	con *Connection
}

// NewExplicitClient creates a new instance of ExplicitClient with the specified values.
func NewExplicitClient(con *Connection) ExplicitOperations {
	return &ExplicitClient{con: con}
}

// Pipeline returns the pipeline associated with this client.
func (client *ExplicitClient) Pipeline() azcore.Pipeline {
	return client.con.Pipeline()
}

// PostOptionalArrayHeader - Test explicitly optional integer. Please put a header 'headerParameter' => null.
func (client *ExplicitClient) PostOptionalArrayHeader(ctx context.Context, options *ExplicitPostOptionalArrayHeaderOptions) (*http.Response, error) {
	req, err := client.PostOptionalArrayHeaderCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostOptionalArrayHeaderHandleError(resp)
	}
	return resp.Response, nil
}

// PostOptionalArrayHeaderCreateRequest creates the PostOptionalArrayHeader request.
func (client *ExplicitClient) PostOptionalArrayHeaderCreateRequest(ctx context.Context, options *ExplicitPostOptionalArrayHeaderOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/array/header"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	if options != nil && options.HeaderParameter != nil {
		req.Header.Set("headerParameter", strings.Join(*options.HeaderParameter, ","))
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// PostOptionalArrayHeaderHandleError handles the PostOptionalArrayHeader error response.
func (client *ExplicitClient) PostOptionalArrayHeaderHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PostOptionalArrayParameter - Test explicitly optional array. Please put null.
func (client *ExplicitClient) PostOptionalArrayParameter(ctx context.Context, options *ExplicitPostOptionalArrayParameterOptions) (*http.Response, error) {
	req, err := client.PostOptionalArrayParameterCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostOptionalArrayParameterHandleError(resp)
	}
	return resp.Response, nil
}

// PostOptionalArrayParameterCreateRequest creates the PostOptionalArrayParameter request.
func (client *ExplicitClient) PostOptionalArrayParameterCreateRequest(ctx context.Context, options *ExplicitPostOptionalArrayParameterOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/array/parameter"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.BodyParameter)
	}
	return req, nil
}

// PostOptionalArrayParameterHandleError handles the PostOptionalArrayParameter error response.
func (client *ExplicitClient) PostOptionalArrayParameterHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PostOptionalArrayProperty - Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
func (client *ExplicitClient) PostOptionalArrayProperty(ctx context.Context, options *ExplicitPostOptionalArrayPropertyOptions) (*http.Response, error) {
	req, err := client.PostOptionalArrayPropertyCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostOptionalArrayPropertyHandleError(resp)
	}
	return resp.Response, nil
}

// PostOptionalArrayPropertyCreateRequest creates the PostOptionalArrayProperty request.
func (client *ExplicitClient) PostOptionalArrayPropertyCreateRequest(ctx context.Context, options *ExplicitPostOptionalArrayPropertyOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/array/property"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.BodyParameter)
	}
	return req, nil
}

// PostOptionalArrayPropertyHandleError handles the PostOptionalArrayProperty error response.
func (client *ExplicitClient) PostOptionalArrayPropertyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PostOptionalClassParameter - Test explicitly optional complex object. Please put null.
func (client *ExplicitClient) PostOptionalClassParameter(ctx context.Context, options *ExplicitPostOptionalClassParameterOptions) (*http.Response, error) {
	req, err := client.PostOptionalClassParameterCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostOptionalClassParameterHandleError(resp)
	}
	return resp.Response, nil
}

// PostOptionalClassParameterCreateRequest creates the PostOptionalClassParameter request.
func (client *ExplicitClient) PostOptionalClassParameterCreateRequest(ctx context.Context, options *ExplicitPostOptionalClassParameterOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/class/parameter"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.BodyParameter)
	}
	return req, nil
}

// PostOptionalClassParameterHandleError handles the PostOptionalClassParameter error response.
func (client *ExplicitClient) PostOptionalClassParameterHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PostOptionalClassProperty - Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
func (client *ExplicitClient) PostOptionalClassProperty(ctx context.Context, options *ExplicitPostOptionalClassPropertyOptions) (*http.Response, error) {
	req, err := client.PostOptionalClassPropertyCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostOptionalClassPropertyHandleError(resp)
	}
	return resp.Response, nil
}

// PostOptionalClassPropertyCreateRequest creates the PostOptionalClassProperty request.
func (client *ExplicitClient) PostOptionalClassPropertyCreateRequest(ctx context.Context, options *ExplicitPostOptionalClassPropertyOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/class/property"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.BodyParameter)
	}
	return req, nil
}

// PostOptionalClassPropertyHandleError handles the PostOptionalClassProperty error response.
func (client *ExplicitClient) PostOptionalClassPropertyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PostOptionalIntegerHeader - Test explicitly optional integer. Please put a header 'headerParameter' => null.
func (client *ExplicitClient) PostOptionalIntegerHeader(ctx context.Context, options *ExplicitPostOptionalIntegerHeaderOptions) (*http.Response, error) {
	req, err := client.PostOptionalIntegerHeaderCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostOptionalIntegerHeaderHandleError(resp)
	}
	return resp.Response, nil
}

// PostOptionalIntegerHeaderCreateRequest creates the PostOptionalIntegerHeader request.
func (client *ExplicitClient) PostOptionalIntegerHeaderCreateRequest(ctx context.Context, options *ExplicitPostOptionalIntegerHeaderOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/integer/header"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	if options != nil && options.HeaderParameter != nil {
		req.Header.Set("headerParameter", strconv.FormatInt(int64(*options.HeaderParameter), 10))
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// PostOptionalIntegerHeaderHandleError handles the PostOptionalIntegerHeader error response.
func (client *ExplicitClient) PostOptionalIntegerHeaderHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PostOptionalIntegerParameter - Test explicitly optional integer. Please put null.
func (client *ExplicitClient) PostOptionalIntegerParameter(ctx context.Context, options *ExplicitPostOptionalIntegerParameterOptions) (*http.Response, error) {
	req, err := client.PostOptionalIntegerParameterCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostOptionalIntegerParameterHandleError(resp)
	}
	return resp.Response, nil
}

// PostOptionalIntegerParameterCreateRequest creates the PostOptionalIntegerParameter request.
func (client *ExplicitClient) PostOptionalIntegerParameterCreateRequest(ctx context.Context, options *ExplicitPostOptionalIntegerParameterOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/integer/parameter"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.BodyParameter)
	}
	return req, nil
}

// PostOptionalIntegerParameterHandleError handles the PostOptionalIntegerParameter error response.
func (client *ExplicitClient) PostOptionalIntegerParameterHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PostOptionalIntegerProperty - Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
func (client *ExplicitClient) PostOptionalIntegerProperty(ctx context.Context, options *ExplicitPostOptionalIntegerPropertyOptions) (*http.Response, error) {
	req, err := client.PostOptionalIntegerPropertyCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostOptionalIntegerPropertyHandleError(resp)
	}
	return resp.Response, nil
}

// PostOptionalIntegerPropertyCreateRequest creates the PostOptionalIntegerProperty request.
func (client *ExplicitClient) PostOptionalIntegerPropertyCreateRequest(ctx context.Context, options *ExplicitPostOptionalIntegerPropertyOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/integer/property"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.BodyParameter)
	}
	return req, nil
}

// PostOptionalIntegerPropertyHandleError handles the PostOptionalIntegerProperty error response.
func (client *ExplicitClient) PostOptionalIntegerPropertyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PostOptionalStringHeader - Test explicitly optional string. Please put a header 'headerParameter' => null.
func (client *ExplicitClient) PostOptionalStringHeader(ctx context.Context, options *ExplicitPostOptionalStringHeaderOptions) (*http.Response, error) {
	req, err := client.PostOptionalStringHeaderCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostOptionalStringHeaderHandleError(resp)
	}
	return resp.Response, nil
}

// PostOptionalStringHeaderCreateRequest creates the PostOptionalStringHeader request.
func (client *ExplicitClient) PostOptionalStringHeaderCreateRequest(ctx context.Context, options *ExplicitPostOptionalStringHeaderOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/string/header"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	if options != nil && options.BodyParameter != nil {
		req.Header.Set("bodyParameter", *options.BodyParameter)
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// PostOptionalStringHeaderHandleError handles the PostOptionalStringHeader error response.
func (client *ExplicitClient) PostOptionalStringHeaderHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PostOptionalStringParameter - Test explicitly optional string. Please put null.
func (client *ExplicitClient) PostOptionalStringParameter(ctx context.Context, options *ExplicitPostOptionalStringParameterOptions) (*http.Response, error) {
	req, err := client.PostOptionalStringParameterCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostOptionalStringParameterHandleError(resp)
	}
	return resp.Response, nil
}

// PostOptionalStringParameterCreateRequest creates the PostOptionalStringParameter request.
func (client *ExplicitClient) PostOptionalStringParameterCreateRequest(ctx context.Context, options *ExplicitPostOptionalStringParameterOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/string/parameter"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.BodyParameter)
	}
	return req, nil
}

// PostOptionalStringParameterHandleError handles the PostOptionalStringParameter error response.
func (client *ExplicitClient) PostOptionalStringParameterHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PostOptionalStringProperty - Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
func (client *ExplicitClient) PostOptionalStringProperty(ctx context.Context, options *ExplicitPostOptionalStringPropertyOptions) (*http.Response, error) {
	req, err := client.PostOptionalStringPropertyCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostOptionalStringPropertyHandleError(resp)
	}
	return resp.Response, nil
}

// PostOptionalStringPropertyCreateRequest creates the PostOptionalStringProperty request.
func (client *ExplicitClient) PostOptionalStringPropertyCreateRequest(ctx context.Context, options *ExplicitPostOptionalStringPropertyOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/optional/string/property"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.BodyParameter)
	}
	return req, nil
}

// PostOptionalStringPropertyHandleError handles the PostOptionalStringProperty error response.
func (client *ExplicitClient) PostOptionalStringPropertyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PostRequiredArrayHeader - Test explicitly required array. Please put a header 'headerParameter' => null and the client library should throw before the
// request is sent.
func (client *ExplicitClient) PostRequiredArrayHeader(ctx context.Context, headerParameter []string, options *ExplicitPostRequiredArrayHeaderOptions) (*http.Response, error) {
	req, err := client.PostRequiredArrayHeaderCreateRequest(ctx, headerParameter, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostRequiredArrayHeaderHandleError(resp)
	}
	return resp.Response, nil
}

// PostRequiredArrayHeaderCreateRequest creates the PostRequiredArrayHeader request.
func (client *ExplicitClient) PostRequiredArrayHeaderCreateRequest(ctx context.Context, headerParameter []string, options *ExplicitPostRequiredArrayHeaderOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/array/header"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("headerParameter", strings.Join(headerParameter, ","))
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// PostRequiredArrayHeaderHandleError handles the PostRequiredArrayHeader error response.
func (client *ExplicitClient) PostRequiredArrayHeaderHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PostRequiredArrayParameter - Test explicitly required array. Please put null and the client library should throw before the request is sent.
func (client *ExplicitClient) PostRequiredArrayParameter(ctx context.Context, bodyParameter []string, options *ExplicitPostRequiredArrayParameterOptions) (*http.Response, error) {
	req, err := client.PostRequiredArrayParameterCreateRequest(ctx, bodyParameter, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostRequiredArrayParameterHandleError(resp)
	}
	return resp.Response, nil
}

// PostRequiredArrayParameterCreateRequest creates the PostRequiredArrayParameter request.
func (client *ExplicitClient) PostRequiredArrayParameterCreateRequest(ctx context.Context, bodyParameter []string, options *ExplicitPostRequiredArrayParameterOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/array/parameter"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(bodyParameter)
}

// PostRequiredArrayParameterHandleError handles the PostRequiredArrayParameter error response.
func (client *ExplicitClient) PostRequiredArrayParameterHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PostRequiredArrayProperty - Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the client library should throw
// before the request is sent.
func (client *ExplicitClient) PostRequiredArrayProperty(ctx context.Context, bodyParameter ArrayWrapper, options *ExplicitPostRequiredArrayPropertyOptions) (*http.Response, error) {
	req, err := client.PostRequiredArrayPropertyCreateRequest(ctx, bodyParameter, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostRequiredArrayPropertyHandleError(resp)
	}
	return resp.Response, nil
}

// PostRequiredArrayPropertyCreateRequest creates the PostRequiredArrayProperty request.
func (client *ExplicitClient) PostRequiredArrayPropertyCreateRequest(ctx context.Context, bodyParameter ArrayWrapper, options *ExplicitPostRequiredArrayPropertyOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/array/property"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(bodyParameter)
}

// PostRequiredArrayPropertyHandleError handles the PostRequiredArrayProperty error response.
func (client *ExplicitClient) PostRequiredArrayPropertyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PostRequiredClassParameter - Test explicitly required complex object. Please put null and the client library should throw before the request is sent.
func (client *ExplicitClient) PostRequiredClassParameter(ctx context.Context, bodyParameter Product, options *ExplicitPostRequiredClassParameterOptions) (*http.Response, error) {
	req, err := client.PostRequiredClassParameterCreateRequest(ctx, bodyParameter, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostRequiredClassParameterHandleError(resp)
	}
	return resp.Response, nil
}

// PostRequiredClassParameterCreateRequest creates the PostRequiredClassParameter request.
func (client *ExplicitClient) PostRequiredClassParameterCreateRequest(ctx context.Context, bodyParameter Product, options *ExplicitPostRequiredClassParameterOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/class/parameter"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(bodyParameter)
}

// PostRequiredClassParameterHandleError handles the PostRequiredClassParameter error response.
func (client *ExplicitClient) PostRequiredClassParameterHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PostRequiredClassProperty - Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null and the client library should
// throw before the request is sent.
func (client *ExplicitClient) PostRequiredClassProperty(ctx context.Context, bodyParameter ClassWrapper, options *ExplicitPostRequiredClassPropertyOptions) (*http.Response, error) {
	req, err := client.PostRequiredClassPropertyCreateRequest(ctx, bodyParameter, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostRequiredClassPropertyHandleError(resp)
	}
	return resp.Response, nil
}

// PostRequiredClassPropertyCreateRequest creates the PostRequiredClassProperty request.
func (client *ExplicitClient) PostRequiredClassPropertyCreateRequest(ctx context.Context, bodyParameter ClassWrapper, options *ExplicitPostRequiredClassPropertyOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/class/property"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(bodyParameter)
}

// PostRequiredClassPropertyHandleError handles the PostRequiredClassProperty error response.
func (client *ExplicitClient) PostRequiredClassPropertyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PostRequiredIntegerHeader - Test explicitly required integer. Please put a header 'headerParameter' => null and the client library should throw before
// the request is sent.
func (client *ExplicitClient) PostRequiredIntegerHeader(ctx context.Context, headerParameter int32, options *ExplicitPostRequiredIntegerHeaderOptions) (*http.Response, error) {
	req, err := client.PostRequiredIntegerHeaderCreateRequest(ctx, headerParameter, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostRequiredIntegerHeaderHandleError(resp)
	}
	return resp.Response, nil
}

// PostRequiredIntegerHeaderCreateRequest creates the PostRequiredIntegerHeader request.
func (client *ExplicitClient) PostRequiredIntegerHeaderCreateRequest(ctx context.Context, headerParameter int32, options *ExplicitPostRequiredIntegerHeaderOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/integer/header"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("headerParameter", strconv.FormatInt(int64(headerParameter), 10))
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// PostRequiredIntegerHeaderHandleError handles the PostRequiredIntegerHeader error response.
func (client *ExplicitClient) PostRequiredIntegerHeaderHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PostRequiredIntegerParameter - Test explicitly required integer. Please put null and the client library should throw before the request is sent.
func (client *ExplicitClient) PostRequiredIntegerParameter(ctx context.Context, bodyParameter int32, options *ExplicitPostRequiredIntegerParameterOptions) (*http.Response, error) {
	req, err := client.PostRequiredIntegerParameterCreateRequest(ctx, bodyParameter, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostRequiredIntegerParameterHandleError(resp)
	}
	return resp.Response, nil
}

// PostRequiredIntegerParameterCreateRequest creates the PostRequiredIntegerParameter request.
func (client *ExplicitClient) PostRequiredIntegerParameterCreateRequest(ctx context.Context, bodyParameter int32, options *ExplicitPostRequiredIntegerParameterOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/integer/parameter"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(bodyParameter)
}

// PostRequiredIntegerParameterHandleError handles the PostRequiredIntegerParameter error response.
func (client *ExplicitClient) PostRequiredIntegerParameterHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PostRequiredIntegerProperty - Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the client library should throw
// before the request is sent.
func (client *ExplicitClient) PostRequiredIntegerProperty(ctx context.Context, bodyParameter IntWrapper, options *ExplicitPostRequiredIntegerPropertyOptions) (*http.Response, error) {
	req, err := client.PostRequiredIntegerPropertyCreateRequest(ctx, bodyParameter, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostRequiredIntegerPropertyHandleError(resp)
	}
	return resp.Response, nil
}

// PostRequiredIntegerPropertyCreateRequest creates the PostRequiredIntegerProperty request.
func (client *ExplicitClient) PostRequiredIntegerPropertyCreateRequest(ctx context.Context, bodyParameter IntWrapper, options *ExplicitPostRequiredIntegerPropertyOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/integer/property"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(bodyParameter)
}

// PostRequiredIntegerPropertyHandleError handles the PostRequiredIntegerProperty error response.
func (client *ExplicitClient) PostRequiredIntegerPropertyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PostRequiredStringHeader - Test explicitly required string. Please put a header 'headerParameter' => null and the client library should throw before
// the request is sent.
func (client *ExplicitClient) PostRequiredStringHeader(ctx context.Context, headerParameter string, options *ExplicitPostRequiredStringHeaderOptions) (*http.Response, error) {
	req, err := client.PostRequiredStringHeaderCreateRequest(ctx, headerParameter, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostRequiredStringHeaderHandleError(resp)
	}
	return resp.Response, nil
}

// PostRequiredStringHeaderCreateRequest creates the PostRequiredStringHeader request.
func (client *ExplicitClient) PostRequiredStringHeaderCreateRequest(ctx context.Context, headerParameter string, options *ExplicitPostRequiredStringHeaderOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/string/header"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("headerParameter", headerParameter)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// PostRequiredStringHeaderHandleError handles the PostRequiredStringHeader error response.
func (client *ExplicitClient) PostRequiredStringHeaderHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PostRequiredStringParameter - Test explicitly required string. Please put null and the client library should throw before the request is sent.
func (client *ExplicitClient) PostRequiredStringParameter(ctx context.Context, bodyParameter string, options *ExplicitPostRequiredStringParameterOptions) (*http.Response, error) {
	req, err := client.PostRequiredStringParameterCreateRequest(ctx, bodyParameter, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostRequiredStringParameterHandleError(resp)
	}
	return resp.Response, nil
}

// PostRequiredStringParameterCreateRequest creates the PostRequiredStringParameter request.
func (client *ExplicitClient) PostRequiredStringParameterCreateRequest(ctx context.Context, bodyParameter string, options *ExplicitPostRequiredStringParameterOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/string/parameter"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(bodyParameter)
}

// PostRequiredStringParameterHandleError handles the PostRequiredStringParameter error response.
func (client *ExplicitClient) PostRequiredStringParameterHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PostRequiredStringProperty - Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the client library should throw
// before the request is sent.
func (client *ExplicitClient) PostRequiredStringProperty(ctx context.Context, bodyParameter StringWrapper, options *ExplicitPostRequiredStringPropertyOptions) (*http.Response, error) {
	req, err := client.PostRequiredStringPropertyCreateRequest(ctx, bodyParameter, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostRequiredStringPropertyHandleError(resp)
	}
	return resp.Response, nil
}

// PostRequiredStringPropertyCreateRequest creates the PostRequiredStringProperty request.
func (client *ExplicitClient) PostRequiredStringPropertyCreateRequest(ctx context.Context, bodyParameter StringWrapper, options *ExplicitPostRequiredStringPropertyOptions) (*azcore.Request, error) {
	urlPath := "/reqopt/requied/string/property"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(bodyParameter)
}

// PostRequiredStringPropertyHandleError handles the PostRequiredStringProperty error response.
func (client *ExplicitClient) PostRequiredStringPropertyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}
