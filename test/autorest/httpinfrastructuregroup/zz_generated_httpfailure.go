// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package httpinfrastructuregroup

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"io/ioutil"
	"net/http"
)

// HTTPFailureClient contains the methods for the HTTPFailure group.
// Don't use this type directly, use NewHTTPFailureClient() instead.
type HTTPFailureClient struct {
	con *Connection
}

// NewHTTPFailureClient creates a new instance of HTTPFailureClient with the specified values.
func NewHTTPFailureClient(con *Connection) *HTTPFailureClient {
	return &HTTPFailureClient{con: con}
}

// Pipeline returns the pipeline associated with this client.
func (client *HTTPFailureClient) Pipeline() azcore.Pipeline {
	return client.con.Pipeline()
}

// GetEmptyError - Get empty error form server
func (client *HTTPFailureClient) GetEmptyError(ctx context.Context, options *HTTPFailureGetEmptyErrorOptions) (BoolResponse, error) {
	req, err := client.getEmptyErrorCreateRequest(ctx, options)
	if err != nil {
		return BoolResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return BoolResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return BoolResponse{}, client.getEmptyErrorHandleError(resp)
	}
	return client.getEmptyErrorHandleResponse(resp)
}

// getEmptyErrorCreateRequest creates the GetEmptyError request.
func (client *HTTPFailureClient) getEmptyErrorCreateRequest(ctx context.Context, options *HTTPFailureGetEmptyErrorOptions) (*azcore.Request, error) {
	urlPath := "/http/failure/emptybody/error"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getEmptyErrorHandleResponse handles the GetEmptyError response.
func (client *HTTPFailureClient) getEmptyErrorHandleResponse(resp *azcore.Response) (BoolResponse, error) {
	var val *bool
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return BoolResponse{}, err
	}
	return BoolResponse{RawResponse: resp.Response, Value: val}, nil
}

// getEmptyErrorHandleError handles the GetEmptyError error response.
func (client *HTTPFailureClient) getEmptyErrorHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetNoModelEmpty - Get empty response from server
func (client *HTTPFailureClient) GetNoModelEmpty(ctx context.Context, options *HTTPFailureGetNoModelEmptyOptions) (BoolResponse, error) {
	req, err := client.getNoModelEmptyCreateRequest(ctx, options)
	if err != nil {
		return BoolResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return BoolResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return BoolResponse{}, client.getNoModelEmptyHandleError(resp)
	}
	return client.getNoModelEmptyHandleResponse(resp)
}

// getNoModelEmptyCreateRequest creates the GetNoModelEmpty request.
func (client *HTTPFailureClient) getNoModelEmptyCreateRequest(ctx context.Context, options *HTTPFailureGetNoModelEmptyOptions) (*azcore.Request, error) {
	urlPath := "/http/failure/nomodel/empty"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getNoModelEmptyHandleResponse handles the GetNoModelEmpty response.
func (client *HTTPFailureClient) getNoModelEmptyHandleResponse(resp *azcore.Response) (BoolResponse, error) {
	var val *bool
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return BoolResponse{}, err
	}
	return BoolResponse{RawResponse: resp.Response, Value: val}, nil
}

// getNoModelEmptyHandleError handles the GetNoModelEmpty error response.
func (client *HTTPFailureClient) getNoModelEmptyHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// GetNoModelError - Get empty error form server
func (client *HTTPFailureClient) GetNoModelError(ctx context.Context, options *HTTPFailureGetNoModelErrorOptions) (BoolResponse, error) {
	req, err := client.getNoModelErrorCreateRequest(ctx, options)
	if err != nil {
		return BoolResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return BoolResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return BoolResponse{}, client.getNoModelErrorHandleError(resp)
	}
	return client.getNoModelErrorHandleResponse(resp)
}

// getNoModelErrorCreateRequest creates the GetNoModelError request.
func (client *HTTPFailureClient) getNoModelErrorCreateRequest(ctx context.Context, options *HTTPFailureGetNoModelErrorOptions) (*azcore.Request, error) {
	urlPath := "/http/failure/nomodel/error"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getNoModelErrorHandleResponse handles the GetNoModelError response.
func (client *HTTPFailureClient) getNoModelErrorHandleResponse(resp *azcore.Response) (BoolResponse, error) {
	var val *bool
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return BoolResponse{}, err
	}
	return BoolResponse{RawResponse: resp.Response, Value: val}, nil
}

// getNoModelErrorHandleError handles the GetNoModelError error response.
func (client *HTTPFailureClient) getNoModelErrorHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}
