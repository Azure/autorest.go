// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package httpinfrastructuregroup

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"io/ioutil"
	"net/http"
)

// MultipleResponsesOperations contains the methods for the MultipleResponses group.
type MultipleResponsesOperations interface {
	// Get200Model201ModelDefaultError200Valid - Send a 200 response with valid payload: {'statusCode': '200'}
	// Possible return types are *MyExceptionResponse, *BResponse
	Get200Model201ModelDefaultError200Valid(ctx context.Context, options *MultipleResponsesGet200Model201ModelDefaultError200ValidOptions) (interface{}, error)
	// Get200Model201ModelDefaultError201Valid - Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}
	// Possible return types are *MyExceptionResponse, *BResponse
	Get200Model201ModelDefaultError201Valid(ctx context.Context, options *MultipleResponsesGet200Model201ModelDefaultError201ValidOptions) (interface{}, error)
	// Get200Model201ModelDefaultError400Valid - Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
	// Possible return types are *MyExceptionResponse, *BResponse
	Get200Model201ModelDefaultError400Valid(ctx context.Context, options *MultipleResponsesGet200Model201ModelDefaultError400ValidOptions) (interface{}, error)
	// Get200Model204NoModelDefaultError200Valid - Send a 200 response with valid payload: {'statusCode': '200'}
	Get200Model204NoModelDefaultError200Valid(ctx context.Context, options *MultipleResponsesGet200Model204NoModelDefaultError200ValidOptions) (*MyExceptionResponse, error)
	// Get200Model204NoModelDefaultError201Invalid - Send a 201 response with valid payload: {'statusCode': '201'}
	Get200Model204NoModelDefaultError201Invalid(ctx context.Context, options *MultipleResponsesGet200Model204NoModelDefaultError201InvalidOptions) (*MyExceptionResponse, error)
	// Get200Model204NoModelDefaultError202None - Send a 202 response with no payload:
	Get200Model204NoModelDefaultError202None(ctx context.Context, options *MultipleResponsesGet200Model204NoModelDefaultError202NoneOptions) (*MyExceptionResponse, error)
	// Get200Model204NoModelDefaultError204Valid - Send a 204 response with no payload
	Get200Model204NoModelDefaultError204Valid(ctx context.Context, options *MultipleResponsesGet200Model204NoModelDefaultError204ValidOptions) (*MyExceptionResponse, error)
	// Get200Model204NoModelDefaultError400Valid - Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}
	Get200Model204NoModelDefaultError400Valid(ctx context.Context, options *MultipleResponsesGet200Model204NoModelDefaultError400ValidOptions) (*MyExceptionResponse, error)
	// Get200ModelA200Invalid - Send a 200 response with invalid payload {'statusCodeInvalid': '200'}
	Get200ModelA200Invalid(ctx context.Context, options *MultipleResponsesGet200ModelA200InvalidOptions) (*MyExceptionResponse, error)
	// Get200ModelA200None - Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type for model A
	Get200ModelA200None(ctx context.Context, options *MultipleResponsesGet200ModelA200NoneOptions) (*MyExceptionResponse, error)
	// Get200ModelA200Valid - Send a 200 response with payload {'statusCode': '200'}
	Get200ModelA200Valid(ctx context.Context, options *MultipleResponsesGet200ModelA200ValidOptions) (*MyExceptionResponse, error)
	// Get200ModelA201ModelC404ModelDDefaultError200Valid - Send a 200 response with valid payload: {'statusCode': '200'}
	// Possible return types are *MyExceptionResponse, *CResponse, *DResponse
	Get200ModelA201ModelC404ModelDDefaultError200Valid(ctx context.Context, options *MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError200ValidOptions) (interface{}, error)
	// Get200ModelA201ModelC404ModelDDefaultError201Valid - Send a 200 response with valid payload: {'httpCode': '201'}
	// Possible return types are *MyExceptionResponse, *CResponse, *DResponse
	Get200ModelA201ModelC404ModelDDefaultError201Valid(ctx context.Context, options *MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError201ValidOptions) (interface{}, error)
	// Get200ModelA201ModelC404ModelDDefaultError400Valid - Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
	// Possible return types are *MyExceptionResponse, *CResponse, *DResponse
	Get200ModelA201ModelC404ModelDDefaultError400Valid(ctx context.Context, options *MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError400ValidOptions) (interface{}, error)
	// Get200ModelA201ModelC404ModelDDefaultError404Valid - Send a 200 response with valid payload: {'httpStatusCode': '404'}
	// Possible return types are *MyExceptionResponse, *CResponse, *DResponse
	Get200ModelA201ModelC404ModelDDefaultError404Valid(ctx context.Context, options *MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError404ValidOptions) (interface{}, error)
	// Get200ModelA202Valid - Send a 202 response with payload {'statusCode': '202'}
	Get200ModelA202Valid(ctx context.Context, options *MultipleResponsesGet200ModelA202ValidOptions) (*MyExceptionResponse, error)
	// Get200ModelA400Invalid - Send a 200 response with invalid payload {'statusCodeInvalid': '400'}
	Get200ModelA400Invalid(ctx context.Context, options *MultipleResponsesGet200ModelA400InvalidOptions) (*MyExceptionResponse, error)
	// Get200ModelA400None - Send a 400 response with no payload client should treat as an http error with no error model
	Get200ModelA400None(ctx context.Context, options *MultipleResponsesGet200ModelA400NoneOptions) (*MyExceptionResponse, error)
	// Get200ModelA400Valid - Send a 200 response with payload {'statusCode': '400'}
	Get200ModelA400Valid(ctx context.Context, options *MultipleResponsesGet200ModelA400ValidOptions) (*MyExceptionResponse, error)
	// Get202None204NoneDefaultError202None - Send a 202 response with no payload
	Get202None204NoneDefaultError202None(ctx context.Context, options *MultipleResponsesGet202None204NoneDefaultError202NoneOptions) (*http.Response, error)
	// Get202None204NoneDefaultError204None - Send a 204 response with no payload
	Get202None204NoneDefaultError204None(ctx context.Context, options *MultipleResponsesGet202None204NoneDefaultError204NoneOptions) (*http.Response, error)
	// Get202None204NoneDefaultError400Valid - Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
	Get202None204NoneDefaultError400Valid(ctx context.Context, options *MultipleResponsesGet202None204NoneDefaultError400ValidOptions) (*http.Response, error)
	// Get202None204NoneDefaultNone202Invalid - Send a 202 response with an unexpected payload {'property': 'value'}
	Get202None204NoneDefaultNone202Invalid(ctx context.Context, options *MultipleResponsesGet202None204NoneDefaultNone202InvalidOptions) (*http.Response, error)
	// Get202None204NoneDefaultNone204None - Send a 204 response with no payload
	Get202None204NoneDefaultNone204None(ctx context.Context, options *MultipleResponsesGet202None204NoneDefaultNone204NoneOptions) (*http.Response, error)
	// Get202None204NoneDefaultNone400Invalid - Send a 400 response with an unexpected payload {'property': 'value'}
	Get202None204NoneDefaultNone400Invalid(ctx context.Context, options *MultipleResponsesGet202None204NoneDefaultNone400InvalidOptions) (*http.Response, error)
	// Get202None204NoneDefaultNone400None - Send a 400 response with no payload
	Get202None204NoneDefaultNone400None(ctx context.Context, options *MultipleResponsesGet202None204NoneDefaultNone400NoneOptions) (*http.Response, error)
	// GetDefaultModelA200None - Send a 200 response with no payload
	GetDefaultModelA200None(ctx context.Context, options *MultipleResponsesGetDefaultModelA200NoneOptions) (*MyExceptionResponse, error)
	// GetDefaultModelA200Valid - Send a 200 response with valid payload: {'statusCode': '200'}
	GetDefaultModelA200Valid(ctx context.Context, options *MultipleResponsesGetDefaultModelA200ValidOptions) (*MyExceptionResponse, error)
	// GetDefaultModelA400None - Send a 400 response with no payload
	GetDefaultModelA400None(ctx context.Context, options *MultipleResponsesGetDefaultModelA400NoneOptions) (*http.Response, error)
	// GetDefaultModelA400Valid - Send a 400 response with valid payload: {'statusCode': '400'}
	GetDefaultModelA400Valid(ctx context.Context, options *MultipleResponsesGetDefaultModelA400ValidOptions) (*http.Response, error)
	// GetDefaultNone200Invalid - Send a 200 response with invalid payload: {'statusCode': '200'}
	GetDefaultNone200Invalid(ctx context.Context, options *MultipleResponsesGetDefaultNone200InvalidOptions) (*http.Response, error)
	// GetDefaultNone200None - Send a 200 response with no payload
	GetDefaultNone200None(ctx context.Context, options *MultipleResponsesGetDefaultNone200NoneOptions) (*http.Response, error)
	// GetDefaultNone400Invalid - Send a 400 response with valid payload: {'statusCode': '400'}
	GetDefaultNone400Invalid(ctx context.Context, options *MultipleResponsesGetDefaultNone400InvalidOptions) (*http.Response, error)
	// GetDefaultNone400None - Send a 400 response with no payload
	GetDefaultNone400None(ctx context.Context, options *MultipleResponsesGetDefaultNone400NoneOptions) (*http.Response, error)
}

// MultipleResponsesClient implements the MultipleResponsesOperations interface.
// Don't use this type directly, use NewMultipleResponsesClient() instead.
type MultipleResponsesClient struct {
	con *Connection
}

// NewMultipleResponsesClient creates a new instance of MultipleResponsesClient with the specified values.
func NewMultipleResponsesClient(con *Connection) MultipleResponsesOperations {
	return &MultipleResponsesClient{con: con}
}

// Pipeline returns the pipeline associated with this client.
func (client *MultipleResponsesClient) Pipeline() azcore.Pipeline {
	return client.con.Pipeline()
}

// Get200Model201ModelDefaultError200Valid - Send a 200 response with valid payload: {'statusCode': '200'}
// Possible return types are *MyExceptionResponse, *BResponse
func (client *MultipleResponsesClient) Get200Model201ModelDefaultError200Valid(ctx context.Context, options *MultipleResponsesGet200Model201ModelDefaultError200ValidOptions) (interface{}, error) {
	req, err := client.Get200Model201ModelDefaultError200ValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated) {
		return nil, client.Get200Model201ModelDefaultError200ValidHandleError(resp)
	}
	result, err := client.Get200Model201ModelDefaultError200ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// Get200Model201ModelDefaultError200ValidCreateRequest creates the Get200Model201ModelDefaultError200Valid request.
func (client *MultipleResponsesClient) Get200Model201ModelDefaultError200ValidCreateRequest(ctx context.Context, options *MultipleResponsesGet200Model201ModelDefaultError200ValidOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/201/B/default/Error/response/200/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Get200Model201ModelDefaultError200ValidHandleResponse handles the Get200Model201ModelDefaultError200Valid response.
func (client *MultipleResponsesClient) Get200Model201ModelDefaultError200ValidHandleResponse(resp *azcore.Response) (interface{}, error) {
	switch resp.StatusCode {
	case http.StatusOK:
		result := MyExceptionResponse{RawResponse: resp.Response}
		return &result, resp.UnmarshalAsJSON(&result.MyException)
	case http.StatusCreated:
		result := BResponse{RawResponse: resp.Response}
		return &result, resp.UnmarshalAsJSON(&result.B)
	default:
		return nil, fmt.Errorf("unhandled HTTP status code %d", resp.StatusCode)
	}
}

// Get200Model201ModelDefaultError200ValidHandleError handles the Get200Model201ModelDefaultError200Valid error response.
func (client *MultipleResponsesClient) Get200Model201ModelDefaultError200ValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Get200Model201ModelDefaultError201Valid - Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}
// Possible return types are *MyExceptionResponse, *BResponse
func (client *MultipleResponsesClient) Get200Model201ModelDefaultError201Valid(ctx context.Context, options *MultipleResponsesGet200Model201ModelDefaultError201ValidOptions) (interface{}, error) {
	req, err := client.Get200Model201ModelDefaultError201ValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated) {
		return nil, client.Get200Model201ModelDefaultError201ValidHandleError(resp)
	}
	result, err := client.Get200Model201ModelDefaultError201ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// Get200Model201ModelDefaultError201ValidCreateRequest creates the Get200Model201ModelDefaultError201Valid request.
func (client *MultipleResponsesClient) Get200Model201ModelDefaultError201ValidCreateRequest(ctx context.Context, options *MultipleResponsesGet200Model201ModelDefaultError201ValidOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/201/B/default/Error/response/201/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Get200Model201ModelDefaultError201ValidHandleResponse handles the Get200Model201ModelDefaultError201Valid response.
func (client *MultipleResponsesClient) Get200Model201ModelDefaultError201ValidHandleResponse(resp *azcore.Response) (interface{}, error) {
	switch resp.StatusCode {
	case http.StatusOK:
		result := MyExceptionResponse{RawResponse: resp.Response}
		return &result, resp.UnmarshalAsJSON(&result.MyException)
	case http.StatusCreated:
		result := BResponse{RawResponse: resp.Response}
		return &result, resp.UnmarshalAsJSON(&result.B)
	default:
		return nil, fmt.Errorf("unhandled HTTP status code %d", resp.StatusCode)
	}
}

// Get200Model201ModelDefaultError201ValidHandleError handles the Get200Model201ModelDefaultError201Valid error response.
func (client *MultipleResponsesClient) Get200Model201ModelDefaultError201ValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Get200Model201ModelDefaultError400Valid - Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
// Possible return types are *MyExceptionResponse, *BResponse
func (client *MultipleResponsesClient) Get200Model201ModelDefaultError400Valid(ctx context.Context, options *MultipleResponsesGet200Model201ModelDefaultError400ValidOptions) (interface{}, error) {
	req, err := client.Get200Model201ModelDefaultError400ValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated) {
		return nil, client.Get200Model201ModelDefaultError400ValidHandleError(resp)
	}
	result, err := client.Get200Model201ModelDefaultError400ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// Get200Model201ModelDefaultError400ValidCreateRequest creates the Get200Model201ModelDefaultError400Valid request.
func (client *MultipleResponsesClient) Get200Model201ModelDefaultError400ValidCreateRequest(ctx context.Context, options *MultipleResponsesGet200Model201ModelDefaultError400ValidOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/201/B/default/Error/response/400/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Get200Model201ModelDefaultError400ValidHandleResponse handles the Get200Model201ModelDefaultError400Valid response.
func (client *MultipleResponsesClient) Get200Model201ModelDefaultError400ValidHandleResponse(resp *azcore.Response) (interface{}, error) {
	switch resp.StatusCode {
	case http.StatusOK:
		result := MyExceptionResponse{RawResponse: resp.Response}
		return &result, resp.UnmarshalAsJSON(&result.MyException)
	case http.StatusCreated:
		result := BResponse{RawResponse: resp.Response}
		return &result, resp.UnmarshalAsJSON(&result.B)
	default:
		return nil, fmt.Errorf("unhandled HTTP status code %d", resp.StatusCode)
	}
}

// Get200Model201ModelDefaultError400ValidHandleError handles the Get200Model201ModelDefaultError400Valid error response.
func (client *MultipleResponsesClient) Get200Model201ModelDefaultError400ValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Get200Model204NoModelDefaultError200Valid - Send a 200 response with valid payload: {'statusCode': '200'}
func (client *MultipleResponsesClient) Get200Model204NoModelDefaultError200Valid(ctx context.Context, options *MultipleResponsesGet200Model204NoModelDefaultError200ValidOptions) (*MyExceptionResponse, error) {
	req, err := client.Get200Model204NoModelDefaultError200ValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.Get200Model204NoModelDefaultError200ValidHandleError(resp)
	}
	result, err := client.Get200Model204NoModelDefaultError200ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// Get200Model204NoModelDefaultError200ValidCreateRequest creates the Get200Model204NoModelDefaultError200Valid request.
func (client *MultipleResponsesClient) Get200Model204NoModelDefaultError200ValidCreateRequest(ctx context.Context, options *MultipleResponsesGet200Model204NoModelDefaultError200ValidOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/204/none/default/Error/response/200/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Get200Model204NoModelDefaultError200ValidHandleResponse handles the Get200Model204NoModelDefaultError200Valid response.
func (client *MultipleResponsesClient) Get200Model204NoModelDefaultError200ValidHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200Model204NoModelDefaultError200ValidHandleError handles the Get200Model204NoModelDefaultError200Valid error response.
func (client *MultipleResponsesClient) Get200Model204NoModelDefaultError200ValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Get200Model204NoModelDefaultError201Invalid - Send a 201 response with valid payload: {'statusCode': '201'}
func (client *MultipleResponsesClient) Get200Model204NoModelDefaultError201Invalid(ctx context.Context, options *MultipleResponsesGet200Model204NoModelDefaultError201InvalidOptions) (*MyExceptionResponse, error) {
	req, err := client.Get200Model204NoModelDefaultError201InvalidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.Get200Model204NoModelDefaultError201InvalidHandleError(resp)
	}
	result, err := client.Get200Model204NoModelDefaultError201InvalidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// Get200Model204NoModelDefaultError201InvalidCreateRequest creates the Get200Model204NoModelDefaultError201Invalid request.
func (client *MultipleResponsesClient) Get200Model204NoModelDefaultError201InvalidCreateRequest(ctx context.Context, options *MultipleResponsesGet200Model204NoModelDefaultError201InvalidOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/204/none/default/Error/response/201/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Get200Model204NoModelDefaultError201InvalidHandleResponse handles the Get200Model204NoModelDefaultError201Invalid response.
func (client *MultipleResponsesClient) Get200Model204NoModelDefaultError201InvalidHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200Model204NoModelDefaultError201InvalidHandleError handles the Get200Model204NoModelDefaultError201Invalid error response.
func (client *MultipleResponsesClient) Get200Model204NoModelDefaultError201InvalidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Get200Model204NoModelDefaultError202None - Send a 202 response with no payload:
func (client *MultipleResponsesClient) Get200Model204NoModelDefaultError202None(ctx context.Context, options *MultipleResponsesGet200Model204NoModelDefaultError202NoneOptions) (*MyExceptionResponse, error) {
	req, err := client.Get200Model204NoModelDefaultError202NoneCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.Get200Model204NoModelDefaultError202NoneHandleError(resp)
	}
	result, err := client.Get200Model204NoModelDefaultError202NoneHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// Get200Model204NoModelDefaultError202NoneCreateRequest creates the Get200Model204NoModelDefaultError202None request.
func (client *MultipleResponsesClient) Get200Model204NoModelDefaultError202NoneCreateRequest(ctx context.Context, options *MultipleResponsesGet200Model204NoModelDefaultError202NoneOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/204/none/default/Error/response/202/none"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Get200Model204NoModelDefaultError202NoneHandleResponse handles the Get200Model204NoModelDefaultError202None response.
func (client *MultipleResponsesClient) Get200Model204NoModelDefaultError202NoneHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200Model204NoModelDefaultError202NoneHandleError handles the Get200Model204NoModelDefaultError202None error response.
func (client *MultipleResponsesClient) Get200Model204NoModelDefaultError202NoneHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Get200Model204NoModelDefaultError204Valid - Send a 204 response with no payload
func (client *MultipleResponsesClient) Get200Model204NoModelDefaultError204Valid(ctx context.Context, options *MultipleResponsesGet200Model204NoModelDefaultError204ValidOptions) (*MyExceptionResponse, error) {
	req, err := client.Get200Model204NoModelDefaultError204ValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.Get200Model204NoModelDefaultError204ValidHandleError(resp)
	}
	result, err := client.Get200Model204NoModelDefaultError204ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// Get200Model204NoModelDefaultError204ValidCreateRequest creates the Get200Model204NoModelDefaultError204Valid request.
func (client *MultipleResponsesClient) Get200Model204NoModelDefaultError204ValidCreateRequest(ctx context.Context, options *MultipleResponsesGet200Model204NoModelDefaultError204ValidOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/204/none/default/Error/response/204/none"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Get200Model204NoModelDefaultError204ValidHandleResponse handles the Get200Model204NoModelDefaultError204Valid response.
func (client *MultipleResponsesClient) Get200Model204NoModelDefaultError204ValidHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200Model204NoModelDefaultError204ValidHandleError handles the Get200Model204NoModelDefaultError204Valid error response.
func (client *MultipleResponsesClient) Get200Model204NoModelDefaultError204ValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Get200Model204NoModelDefaultError400Valid - Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}
func (client *MultipleResponsesClient) Get200Model204NoModelDefaultError400Valid(ctx context.Context, options *MultipleResponsesGet200Model204NoModelDefaultError400ValidOptions) (*MyExceptionResponse, error) {
	req, err := client.Get200Model204NoModelDefaultError400ValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.Get200Model204NoModelDefaultError400ValidHandleError(resp)
	}
	result, err := client.Get200Model204NoModelDefaultError400ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// Get200Model204NoModelDefaultError400ValidCreateRequest creates the Get200Model204NoModelDefaultError400Valid request.
func (client *MultipleResponsesClient) Get200Model204NoModelDefaultError400ValidCreateRequest(ctx context.Context, options *MultipleResponsesGet200Model204NoModelDefaultError400ValidOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/204/none/default/Error/response/400/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Get200Model204NoModelDefaultError400ValidHandleResponse handles the Get200Model204NoModelDefaultError400Valid response.
func (client *MultipleResponsesClient) Get200Model204NoModelDefaultError400ValidHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200Model204NoModelDefaultError400ValidHandleError handles the Get200Model204NoModelDefaultError400Valid error response.
func (client *MultipleResponsesClient) Get200Model204NoModelDefaultError400ValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Get200ModelA200Invalid - Send a 200 response with invalid payload {'statusCodeInvalid': '200'}
func (client *MultipleResponsesClient) Get200ModelA200Invalid(ctx context.Context, options *MultipleResponsesGet200ModelA200InvalidOptions) (*MyExceptionResponse, error) {
	req, err := client.Get200ModelA200InvalidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.Get200ModelA200InvalidHandleError(resp)
	}
	result, err := client.Get200ModelA200InvalidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// Get200ModelA200InvalidCreateRequest creates the Get200ModelA200Invalid request.
func (client *MultipleResponsesClient) Get200ModelA200InvalidCreateRequest(ctx context.Context, options *MultipleResponsesGet200ModelA200InvalidOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/response/200/invalid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Get200ModelA200InvalidHandleResponse handles the Get200ModelA200Invalid response.
func (client *MultipleResponsesClient) Get200ModelA200InvalidHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200ModelA200InvalidHandleError handles the Get200ModelA200Invalid error response.
func (client *MultipleResponsesClient) Get200ModelA200InvalidHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// Get200ModelA200None - Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type for model A
func (client *MultipleResponsesClient) Get200ModelA200None(ctx context.Context, options *MultipleResponsesGet200ModelA200NoneOptions) (*MyExceptionResponse, error) {
	req, err := client.Get200ModelA200NoneCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.Get200ModelA200NoneHandleError(resp)
	}
	result, err := client.Get200ModelA200NoneHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// Get200ModelA200NoneCreateRequest creates the Get200ModelA200None request.
func (client *MultipleResponsesClient) Get200ModelA200NoneCreateRequest(ctx context.Context, options *MultipleResponsesGet200ModelA200NoneOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/response/200/none"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Get200ModelA200NoneHandleResponse handles the Get200ModelA200None response.
func (client *MultipleResponsesClient) Get200ModelA200NoneHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200ModelA200NoneHandleError handles the Get200ModelA200None error response.
func (client *MultipleResponsesClient) Get200ModelA200NoneHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// Get200ModelA200Valid - Send a 200 response with payload {'statusCode': '200'}
func (client *MultipleResponsesClient) Get200ModelA200Valid(ctx context.Context, options *MultipleResponsesGet200ModelA200ValidOptions) (*MyExceptionResponse, error) {
	req, err := client.Get200ModelA200ValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.Get200ModelA200ValidHandleError(resp)
	}
	result, err := client.Get200ModelA200ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// Get200ModelA200ValidCreateRequest creates the Get200ModelA200Valid request.
func (client *MultipleResponsesClient) Get200ModelA200ValidCreateRequest(ctx context.Context, options *MultipleResponsesGet200ModelA200ValidOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/response/200/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Get200ModelA200ValidHandleResponse handles the Get200ModelA200Valid response.
func (client *MultipleResponsesClient) Get200ModelA200ValidHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200ModelA200ValidHandleError handles the Get200ModelA200Valid error response.
func (client *MultipleResponsesClient) Get200ModelA200ValidHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// Get200ModelA201ModelC404ModelDDefaultError200Valid - Send a 200 response with valid payload: {'statusCode': '200'}
// Possible return types are *MyExceptionResponse, *CResponse, *DResponse
func (client *MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError200Valid(ctx context.Context, options *MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError200ValidOptions) (interface{}, error) {
	req, err := client.Get200ModelA201ModelC404ModelDDefaultError200ValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated, http.StatusNotFound) {
		return nil, client.Get200ModelA201ModelC404ModelDDefaultError200ValidHandleError(resp)
	}
	result, err := client.Get200ModelA201ModelC404ModelDDefaultError200ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// Get200ModelA201ModelC404ModelDDefaultError200ValidCreateRequest creates the Get200ModelA201ModelC404ModelDDefaultError200Valid request.
func (client *MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError200ValidCreateRequest(ctx context.Context, options *MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError200ValidOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/201/C/404/D/default/Error/response/200/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Get200ModelA201ModelC404ModelDDefaultError200ValidHandleResponse handles the Get200ModelA201ModelC404ModelDDefaultError200Valid response.
func (client *MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError200ValidHandleResponse(resp *azcore.Response) (interface{}, error) {
	switch resp.StatusCode {
	case http.StatusOK:
		result := MyExceptionResponse{RawResponse: resp.Response}
		return &result, resp.UnmarshalAsJSON(&result.MyException)
	case http.StatusCreated:
		result := CResponse{RawResponse: resp.Response}
		return &result, resp.UnmarshalAsJSON(&result.C)
	case http.StatusNotFound:
		result := DResponse{RawResponse: resp.Response}
		return &result, resp.UnmarshalAsJSON(&result.D)
	default:
		return nil, fmt.Errorf("unhandled HTTP status code %d", resp.StatusCode)
	}
}

// Get200ModelA201ModelC404ModelDDefaultError200ValidHandleError handles the Get200ModelA201ModelC404ModelDDefaultError200Valid error response.
func (client *MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError200ValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Get200ModelA201ModelC404ModelDDefaultError201Valid - Send a 200 response with valid payload: {'httpCode': '201'}
// Possible return types are *MyExceptionResponse, *CResponse, *DResponse
func (client *MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError201Valid(ctx context.Context, options *MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError201ValidOptions) (interface{}, error) {
	req, err := client.Get200ModelA201ModelC404ModelDDefaultError201ValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated, http.StatusNotFound) {
		return nil, client.Get200ModelA201ModelC404ModelDDefaultError201ValidHandleError(resp)
	}
	result, err := client.Get200ModelA201ModelC404ModelDDefaultError201ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// Get200ModelA201ModelC404ModelDDefaultError201ValidCreateRequest creates the Get200ModelA201ModelC404ModelDDefaultError201Valid request.
func (client *MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError201ValidCreateRequest(ctx context.Context, options *MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError201ValidOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/201/C/404/D/default/Error/response/201/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Get200ModelA201ModelC404ModelDDefaultError201ValidHandleResponse handles the Get200ModelA201ModelC404ModelDDefaultError201Valid response.
func (client *MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError201ValidHandleResponse(resp *azcore.Response) (interface{}, error) {
	switch resp.StatusCode {
	case http.StatusOK:
		result := MyExceptionResponse{RawResponse: resp.Response}
		return &result, resp.UnmarshalAsJSON(&result.MyException)
	case http.StatusCreated:
		result := CResponse{RawResponse: resp.Response}
		return &result, resp.UnmarshalAsJSON(&result.C)
	case http.StatusNotFound:
		result := DResponse{RawResponse: resp.Response}
		return &result, resp.UnmarshalAsJSON(&result.D)
	default:
		return nil, fmt.Errorf("unhandled HTTP status code %d", resp.StatusCode)
	}
}

// Get200ModelA201ModelC404ModelDDefaultError201ValidHandleError handles the Get200ModelA201ModelC404ModelDDefaultError201Valid error response.
func (client *MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError201ValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Get200ModelA201ModelC404ModelDDefaultError400Valid - Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
// Possible return types are *MyExceptionResponse, *CResponse, *DResponse
func (client *MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError400Valid(ctx context.Context, options *MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError400ValidOptions) (interface{}, error) {
	req, err := client.Get200ModelA201ModelC404ModelDDefaultError400ValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated, http.StatusNotFound) {
		return nil, client.Get200ModelA201ModelC404ModelDDefaultError400ValidHandleError(resp)
	}
	result, err := client.Get200ModelA201ModelC404ModelDDefaultError400ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// Get200ModelA201ModelC404ModelDDefaultError400ValidCreateRequest creates the Get200ModelA201ModelC404ModelDDefaultError400Valid request.
func (client *MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError400ValidCreateRequest(ctx context.Context, options *MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError400ValidOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/201/C/404/D/default/Error/response/400/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Get200ModelA201ModelC404ModelDDefaultError400ValidHandleResponse handles the Get200ModelA201ModelC404ModelDDefaultError400Valid response.
func (client *MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError400ValidHandleResponse(resp *azcore.Response) (interface{}, error) {
	switch resp.StatusCode {
	case http.StatusOK:
		result := MyExceptionResponse{RawResponse: resp.Response}
		return &result, resp.UnmarshalAsJSON(&result.MyException)
	case http.StatusCreated:
		result := CResponse{RawResponse: resp.Response}
		return &result, resp.UnmarshalAsJSON(&result.C)
	case http.StatusNotFound:
		result := DResponse{RawResponse: resp.Response}
		return &result, resp.UnmarshalAsJSON(&result.D)
	default:
		return nil, fmt.Errorf("unhandled HTTP status code %d", resp.StatusCode)
	}
}

// Get200ModelA201ModelC404ModelDDefaultError400ValidHandleError handles the Get200ModelA201ModelC404ModelDDefaultError400Valid error response.
func (client *MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError400ValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Get200ModelA201ModelC404ModelDDefaultError404Valid - Send a 200 response with valid payload: {'httpStatusCode': '404'}
// Possible return types are *MyExceptionResponse, *CResponse, *DResponse
func (client *MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError404Valid(ctx context.Context, options *MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError404ValidOptions) (interface{}, error) {
	req, err := client.Get200ModelA201ModelC404ModelDDefaultError404ValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated, http.StatusNotFound) {
		return nil, client.Get200ModelA201ModelC404ModelDDefaultError404ValidHandleError(resp)
	}
	result, err := client.Get200ModelA201ModelC404ModelDDefaultError404ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// Get200ModelA201ModelC404ModelDDefaultError404ValidCreateRequest creates the Get200ModelA201ModelC404ModelDDefaultError404Valid request.
func (client *MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError404ValidCreateRequest(ctx context.Context, options *MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError404ValidOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/201/C/404/D/default/Error/response/404/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Get200ModelA201ModelC404ModelDDefaultError404ValidHandleResponse handles the Get200ModelA201ModelC404ModelDDefaultError404Valid response.
func (client *MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError404ValidHandleResponse(resp *azcore.Response) (interface{}, error) {
	switch resp.StatusCode {
	case http.StatusOK:
		result := MyExceptionResponse{RawResponse: resp.Response}
		return &result, resp.UnmarshalAsJSON(&result.MyException)
	case http.StatusCreated:
		result := CResponse{RawResponse: resp.Response}
		return &result, resp.UnmarshalAsJSON(&result.C)
	case http.StatusNotFound:
		result := DResponse{RawResponse: resp.Response}
		return &result, resp.UnmarshalAsJSON(&result.D)
	default:
		return nil, fmt.Errorf("unhandled HTTP status code %d", resp.StatusCode)
	}
}

// Get200ModelA201ModelC404ModelDDefaultError404ValidHandleError handles the Get200ModelA201ModelC404ModelDDefaultError404Valid error response.
func (client *MultipleResponsesClient) Get200ModelA201ModelC404ModelDDefaultError404ValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Get200ModelA202Valid - Send a 202 response with payload {'statusCode': '202'}
func (client *MultipleResponsesClient) Get200ModelA202Valid(ctx context.Context, options *MultipleResponsesGet200ModelA202ValidOptions) (*MyExceptionResponse, error) {
	req, err := client.Get200ModelA202ValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.Get200ModelA202ValidHandleError(resp)
	}
	result, err := client.Get200ModelA202ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// Get200ModelA202ValidCreateRequest creates the Get200ModelA202Valid request.
func (client *MultipleResponsesClient) Get200ModelA202ValidCreateRequest(ctx context.Context, options *MultipleResponsesGet200ModelA202ValidOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/response/202/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Get200ModelA202ValidHandleResponse handles the Get200ModelA202Valid response.
func (client *MultipleResponsesClient) Get200ModelA202ValidHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200ModelA202ValidHandleError handles the Get200ModelA202Valid error response.
func (client *MultipleResponsesClient) Get200ModelA202ValidHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// Get200ModelA400Invalid - Send a 200 response with invalid payload {'statusCodeInvalid': '400'}
func (client *MultipleResponsesClient) Get200ModelA400Invalid(ctx context.Context, options *MultipleResponsesGet200ModelA400InvalidOptions) (*MyExceptionResponse, error) {
	req, err := client.Get200ModelA400InvalidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.Get200ModelA400InvalidHandleError(resp)
	}
	result, err := client.Get200ModelA400InvalidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// Get200ModelA400InvalidCreateRequest creates the Get200ModelA400Invalid request.
func (client *MultipleResponsesClient) Get200ModelA400InvalidCreateRequest(ctx context.Context, options *MultipleResponsesGet200ModelA400InvalidOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/response/400/invalid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Get200ModelA400InvalidHandleResponse handles the Get200ModelA400Invalid response.
func (client *MultipleResponsesClient) Get200ModelA400InvalidHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200ModelA400InvalidHandleError handles the Get200ModelA400Invalid error response.
func (client *MultipleResponsesClient) Get200ModelA400InvalidHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// Get200ModelA400None - Send a 400 response with no payload client should treat as an http error with no error model
func (client *MultipleResponsesClient) Get200ModelA400None(ctx context.Context, options *MultipleResponsesGet200ModelA400NoneOptions) (*MyExceptionResponse, error) {
	req, err := client.Get200ModelA400NoneCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.Get200ModelA400NoneHandleError(resp)
	}
	result, err := client.Get200ModelA400NoneHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// Get200ModelA400NoneCreateRequest creates the Get200ModelA400None request.
func (client *MultipleResponsesClient) Get200ModelA400NoneCreateRequest(ctx context.Context, options *MultipleResponsesGet200ModelA400NoneOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/response/400/none"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Get200ModelA400NoneHandleResponse handles the Get200ModelA400None response.
func (client *MultipleResponsesClient) Get200ModelA400NoneHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200ModelA400NoneHandleError handles the Get200ModelA400None error response.
func (client *MultipleResponsesClient) Get200ModelA400NoneHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// Get200ModelA400Valid - Send a 200 response with payload {'statusCode': '400'}
func (client *MultipleResponsesClient) Get200ModelA400Valid(ctx context.Context, options *MultipleResponsesGet200ModelA400ValidOptions) (*MyExceptionResponse, error) {
	req, err := client.Get200ModelA400ValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.Get200ModelA400ValidHandleError(resp)
	}
	result, err := client.Get200ModelA400ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// Get200ModelA400ValidCreateRequest creates the Get200ModelA400Valid request.
func (client *MultipleResponsesClient) Get200ModelA400ValidCreateRequest(ctx context.Context, options *MultipleResponsesGet200ModelA400ValidOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/200/A/response/400/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Get200ModelA400ValidHandleResponse handles the Get200ModelA400Valid response.
func (client *MultipleResponsesClient) Get200ModelA400ValidHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// Get200ModelA400ValidHandleError handles the Get200ModelA400Valid error response.
func (client *MultipleResponsesClient) Get200ModelA400ValidHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// Get202None204NoneDefaultError202None - Send a 202 response with no payload
func (client *MultipleResponsesClient) Get202None204NoneDefaultError202None(ctx context.Context, options *MultipleResponsesGet202None204NoneDefaultError202NoneOptions) (*http.Response, error) {
	req, err := client.Get202None204NoneDefaultError202NoneCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted, http.StatusNoContent) {
		return nil, client.Get202None204NoneDefaultError202NoneHandleError(resp)
	}
	return resp.Response, nil
}

// Get202None204NoneDefaultError202NoneCreateRequest creates the Get202None204NoneDefaultError202None request.
func (client *MultipleResponsesClient) Get202None204NoneDefaultError202NoneCreateRequest(ctx context.Context, options *MultipleResponsesGet202None204NoneDefaultError202NoneOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/202/none/204/none/default/Error/response/202/none"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Get202None204NoneDefaultError202NoneHandleError handles the Get202None204NoneDefaultError202None error response.
func (client *MultipleResponsesClient) Get202None204NoneDefaultError202NoneHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Get202None204NoneDefaultError204None - Send a 204 response with no payload
func (client *MultipleResponsesClient) Get202None204NoneDefaultError204None(ctx context.Context, options *MultipleResponsesGet202None204NoneDefaultError204NoneOptions) (*http.Response, error) {
	req, err := client.Get202None204NoneDefaultError204NoneCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted, http.StatusNoContent) {
		return nil, client.Get202None204NoneDefaultError204NoneHandleError(resp)
	}
	return resp.Response, nil
}

// Get202None204NoneDefaultError204NoneCreateRequest creates the Get202None204NoneDefaultError204None request.
func (client *MultipleResponsesClient) Get202None204NoneDefaultError204NoneCreateRequest(ctx context.Context, options *MultipleResponsesGet202None204NoneDefaultError204NoneOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/202/none/204/none/default/Error/response/204/none"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Get202None204NoneDefaultError204NoneHandleError handles the Get202None204NoneDefaultError204None error response.
func (client *MultipleResponsesClient) Get202None204NoneDefaultError204NoneHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Get202None204NoneDefaultError400Valid - Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
func (client *MultipleResponsesClient) Get202None204NoneDefaultError400Valid(ctx context.Context, options *MultipleResponsesGet202None204NoneDefaultError400ValidOptions) (*http.Response, error) {
	req, err := client.Get202None204NoneDefaultError400ValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted, http.StatusNoContent) {
		return nil, client.Get202None204NoneDefaultError400ValidHandleError(resp)
	}
	return resp.Response, nil
}

// Get202None204NoneDefaultError400ValidCreateRequest creates the Get202None204NoneDefaultError400Valid request.
func (client *MultipleResponsesClient) Get202None204NoneDefaultError400ValidCreateRequest(ctx context.Context, options *MultipleResponsesGet202None204NoneDefaultError400ValidOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/202/none/204/none/default/Error/response/400/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Get202None204NoneDefaultError400ValidHandleError handles the Get202None204NoneDefaultError400Valid error response.
func (client *MultipleResponsesClient) Get202None204NoneDefaultError400ValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Get202None204NoneDefaultNone202Invalid - Send a 202 response with an unexpected payload {'property': 'value'}
func (client *MultipleResponsesClient) Get202None204NoneDefaultNone202Invalid(ctx context.Context, options *MultipleResponsesGet202None204NoneDefaultNone202InvalidOptions) (*http.Response, error) {
	req, err := client.Get202None204NoneDefaultNone202InvalidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted, http.StatusNoContent) {
		return nil, client.Get202None204NoneDefaultNone202InvalidHandleError(resp)
	}
	return resp.Response, nil
}

// Get202None204NoneDefaultNone202InvalidCreateRequest creates the Get202None204NoneDefaultNone202Invalid request.
func (client *MultipleResponsesClient) Get202None204NoneDefaultNone202InvalidCreateRequest(ctx context.Context, options *MultipleResponsesGet202None204NoneDefaultNone202InvalidOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/202/none/204/none/default/none/response/202/invalid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// Get202None204NoneDefaultNone202InvalidHandleError handles the Get202None204NoneDefaultNone202Invalid error response.
func (client *MultipleResponsesClient) Get202None204NoneDefaultNone202InvalidHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// Get202None204NoneDefaultNone204None - Send a 204 response with no payload
func (client *MultipleResponsesClient) Get202None204NoneDefaultNone204None(ctx context.Context, options *MultipleResponsesGet202None204NoneDefaultNone204NoneOptions) (*http.Response, error) {
	req, err := client.Get202None204NoneDefaultNone204NoneCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted, http.StatusNoContent) {
		return nil, client.Get202None204NoneDefaultNone204NoneHandleError(resp)
	}
	return resp.Response, nil
}

// Get202None204NoneDefaultNone204NoneCreateRequest creates the Get202None204NoneDefaultNone204None request.
func (client *MultipleResponsesClient) Get202None204NoneDefaultNone204NoneCreateRequest(ctx context.Context, options *MultipleResponsesGet202None204NoneDefaultNone204NoneOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/202/none/204/none/default/none/response/204/none"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// Get202None204NoneDefaultNone204NoneHandleError handles the Get202None204NoneDefaultNone204None error response.
func (client *MultipleResponsesClient) Get202None204NoneDefaultNone204NoneHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// Get202None204NoneDefaultNone400Invalid - Send a 400 response with an unexpected payload {'property': 'value'}
func (client *MultipleResponsesClient) Get202None204NoneDefaultNone400Invalid(ctx context.Context, options *MultipleResponsesGet202None204NoneDefaultNone400InvalidOptions) (*http.Response, error) {
	req, err := client.Get202None204NoneDefaultNone400InvalidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted, http.StatusNoContent) {
		return nil, client.Get202None204NoneDefaultNone400InvalidHandleError(resp)
	}
	return resp.Response, nil
}

// Get202None204NoneDefaultNone400InvalidCreateRequest creates the Get202None204NoneDefaultNone400Invalid request.
func (client *MultipleResponsesClient) Get202None204NoneDefaultNone400InvalidCreateRequest(ctx context.Context, options *MultipleResponsesGet202None204NoneDefaultNone400InvalidOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/202/none/204/none/default/none/response/400/invalid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// Get202None204NoneDefaultNone400InvalidHandleError handles the Get202None204NoneDefaultNone400Invalid error response.
func (client *MultipleResponsesClient) Get202None204NoneDefaultNone400InvalidHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// Get202None204NoneDefaultNone400None - Send a 400 response with no payload
func (client *MultipleResponsesClient) Get202None204NoneDefaultNone400None(ctx context.Context, options *MultipleResponsesGet202None204NoneDefaultNone400NoneOptions) (*http.Response, error) {
	req, err := client.Get202None204NoneDefaultNone400NoneCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted, http.StatusNoContent) {
		return nil, client.Get202None204NoneDefaultNone400NoneHandleError(resp)
	}
	return resp.Response, nil
}

// Get202None204NoneDefaultNone400NoneCreateRequest creates the Get202None204NoneDefaultNone400None request.
func (client *MultipleResponsesClient) Get202None204NoneDefaultNone400NoneCreateRequest(ctx context.Context, options *MultipleResponsesGet202None204NoneDefaultNone400NoneOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/202/none/204/none/default/none/response/400/none"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// Get202None204NoneDefaultNone400NoneHandleError handles the Get202None204NoneDefaultNone400None error response.
func (client *MultipleResponsesClient) Get202None204NoneDefaultNone400NoneHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// GetDefaultModelA200None - Send a 200 response with no payload
func (client *MultipleResponsesClient) GetDefaultModelA200None(ctx context.Context, options *MultipleResponsesGetDefaultModelA200NoneOptions) (*MyExceptionResponse, error) {
	req, err := client.GetDefaultModelA200NoneCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDefaultModelA200NoneHandleError(resp)
	}
	result, err := client.GetDefaultModelA200NoneHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetDefaultModelA200NoneCreateRequest creates the GetDefaultModelA200None request.
func (client *MultipleResponsesClient) GetDefaultModelA200NoneCreateRequest(ctx context.Context, options *MultipleResponsesGetDefaultModelA200NoneOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/default/A/response/200/none"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetDefaultModelA200NoneHandleResponse handles the GetDefaultModelA200None response.
func (client *MultipleResponsesClient) GetDefaultModelA200NoneHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// GetDefaultModelA200NoneHandleError handles the GetDefaultModelA200None error response.
func (client *MultipleResponsesClient) GetDefaultModelA200NoneHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// GetDefaultModelA200Valid - Send a 200 response with valid payload: {'statusCode': '200'}
func (client *MultipleResponsesClient) GetDefaultModelA200Valid(ctx context.Context, options *MultipleResponsesGetDefaultModelA200ValidOptions) (*MyExceptionResponse, error) {
	req, err := client.GetDefaultModelA200ValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDefaultModelA200ValidHandleError(resp)
	}
	result, err := client.GetDefaultModelA200ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetDefaultModelA200ValidCreateRequest creates the GetDefaultModelA200Valid request.
func (client *MultipleResponsesClient) GetDefaultModelA200ValidCreateRequest(ctx context.Context, options *MultipleResponsesGetDefaultModelA200ValidOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/default/A/response/200/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetDefaultModelA200ValidHandleResponse handles the GetDefaultModelA200Valid response.
func (client *MultipleResponsesClient) GetDefaultModelA200ValidHandleResponse(resp *azcore.Response) (*MyExceptionResponse, error) {
	result := MyExceptionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MyException)
}

// GetDefaultModelA200ValidHandleError handles the GetDefaultModelA200Valid error response.
func (client *MultipleResponsesClient) GetDefaultModelA200ValidHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// GetDefaultModelA400None - Send a 400 response with no payload
func (client *MultipleResponsesClient) GetDefaultModelA400None(ctx context.Context, options *MultipleResponsesGetDefaultModelA400NoneOptions) (*http.Response, error) {
	req, err := client.GetDefaultModelA400NoneCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDefaultModelA400NoneHandleError(resp)
	}
	return resp.Response, nil
}

// GetDefaultModelA400NoneCreateRequest creates the GetDefaultModelA400None request.
func (client *MultipleResponsesClient) GetDefaultModelA400NoneCreateRequest(ctx context.Context, options *MultipleResponsesGetDefaultModelA400NoneOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/default/A/response/400/none"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetDefaultModelA400NoneHandleError handles the GetDefaultModelA400None error response.
func (client *MultipleResponsesClient) GetDefaultModelA400NoneHandleError(resp *azcore.Response) error {
	var err MyException
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetDefaultModelA400Valid - Send a 400 response with valid payload: {'statusCode': '400'}
func (client *MultipleResponsesClient) GetDefaultModelA400Valid(ctx context.Context, options *MultipleResponsesGetDefaultModelA400ValidOptions) (*http.Response, error) {
	req, err := client.GetDefaultModelA400ValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDefaultModelA400ValidHandleError(resp)
	}
	return resp.Response, nil
}

// GetDefaultModelA400ValidCreateRequest creates the GetDefaultModelA400Valid request.
func (client *MultipleResponsesClient) GetDefaultModelA400ValidCreateRequest(ctx context.Context, options *MultipleResponsesGetDefaultModelA400ValidOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/default/A/response/400/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetDefaultModelA400ValidHandleError handles the GetDefaultModelA400Valid error response.
func (client *MultipleResponsesClient) GetDefaultModelA400ValidHandleError(resp *azcore.Response) error {
	var err MyException
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetDefaultNone200Invalid - Send a 200 response with invalid payload: {'statusCode': '200'}
func (client *MultipleResponsesClient) GetDefaultNone200Invalid(ctx context.Context, options *MultipleResponsesGetDefaultNone200InvalidOptions) (*http.Response, error) {
	req, err := client.GetDefaultNone200InvalidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDefaultNone200InvalidHandleError(resp)
	}
	return resp.Response, nil
}

// GetDefaultNone200InvalidCreateRequest creates the GetDefaultNone200Invalid request.
func (client *MultipleResponsesClient) GetDefaultNone200InvalidCreateRequest(ctx context.Context, options *MultipleResponsesGetDefaultNone200InvalidOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/default/none/response/200/invalid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// GetDefaultNone200InvalidHandleError handles the GetDefaultNone200Invalid error response.
func (client *MultipleResponsesClient) GetDefaultNone200InvalidHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// GetDefaultNone200None - Send a 200 response with no payload
func (client *MultipleResponsesClient) GetDefaultNone200None(ctx context.Context, options *MultipleResponsesGetDefaultNone200NoneOptions) (*http.Response, error) {
	req, err := client.GetDefaultNone200NoneCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDefaultNone200NoneHandleError(resp)
	}
	return resp.Response, nil
}

// GetDefaultNone200NoneCreateRequest creates the GetDefaultNone200None request.
func (client *MultipleResponsesClient) GetDefaultNone200NoneCreateRequest(ctx context.Context, options *MultipleResponsesGetDefaultNone200NoneOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/default/none/response/200/none"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// GetDefaultNone200NoneHandleError handles the GetDefaultNone200None error response.
func (client *MultipleResponsesClient) GetDefaultNone200NoneHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// GetDefaultNone400Invalid - Send a 400 response with valid payload: {'statusCode': '400'}
func (client *MultipleResponsesClient) GetDefaultNone400Invalid(ctx context.Context, options *MultipleResponsesGetDefaultNone400InvalidOptions) (*http.Response, error) {
	req, err := client.GetDefaultNone400InvalidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDefaultNone400InvalidHandleError(resp)
	}
	return resp.Response, nil
}

// GetDefaultNone400InvalidCreateRequest creates the GetDefaultNone400Invalid request.
func (client *MultipleResponsesClient) GetDefaultNone400InvalidCreateRequest(ctx context.Context, options *MultipleResponsesGetDefaultNone400InvalidOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/default/none/response/400/invalid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// GetDefaultNone400InvalidHandleError handles the GetDefaultNone400Invalid error response.
func (client *MultipleResponsesClient) GetDefaultNone400InvalidHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// GetDefaultNone400None - Send a 400 response with no payload
func (client *MultipleResponsesClient) GetDefaultNone400None(ctx context.Context, options *MultipleResponsesGetDefaultNone400NoneOptions) (*http.Response, error) {
	req, err := client.GetDefaultNone400NoneCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDefaultNone400NoneHandleError(resp)
	}
	return resp.Response, nil
}

// GetDefaultNone400NoneCreateRequest creates the GetDefaultNone400None request.
func (client *MultipleResponsesClient) GetDefaultNone400NoneCreateRequest(ctx context.Context, options *MultipleResponsesGetDefaultNone400NoneOptions) (*azcore.Request, error) {
	urlPath := "/http/payloads/default/none/response/400/none"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// GetDefaultNone400NoneHandleError handles the GetDefaultNone400None error response.
func (client *MultipleResponsesClient) GetDefaultNone400NoneHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}
