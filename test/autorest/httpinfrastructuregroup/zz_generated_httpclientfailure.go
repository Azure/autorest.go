// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package httpinfrastructuregroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// HTTPClientFailureOperations contains the methods for the HTTPClientFailure group.
type HTTPClientFailureOperations interface {
	// Delete400 - Return 400 status code - should be represented in the client as an error
	Delete400(ctx context.Context, options *HTTPClientFailureDelete400Options) (*http.Response, error)
	// Delete407 - Return 407 status code - should be represented in the client as an error
	Delete407(ctx context.Context, options *HTTPClientFailureDelete407Options) (*http.Response, error)
	// Delete417 - Return 417 status code - should be represented in the client as an error
	Delete417(ctx context.Context, options *HTTPClientFailureDelete417Options) (*http.Response, error)
	// Get400 - Return 400 status code - should be represented in the client as an error
	Get400(ctx context.Context, options *HTTPClientFailureGet400Options) (*http.Response, error)
	// Get402 - Return 402 status code - should be represented in the client as an error
	Get402(ctx context.Context, options *HTTPClientFailureGet402Options) (*http.Response, error)
	// Get403 - Return 403 status code - should be represented in the client as an error
	Get403(ctx context.Context, options *HTTPClientFailureGet403Options) (*http.Response, error)
	// Get411 - Return 411 status code - should be represented in the client as an error
	Get411(ctx context.Context, options *HTTPClientFailureGet411Options) (*http.Response, error)
	// Get412 - Return 412 status code - should be represented in the client as an error
	Get412(ctx context.Context, options *HTTPClientFailureGet412Options) (*http.Response, error)
	// Get416 - Return 416 status code - should be represented in the client as an error
	Get416(ctx context.Context, options *HTTPClientFailureGet416Options) (*http.Response, error)
	// Head400 - Return 400 status code - should be represented in the client as an error
	Head400(ctx context.Context, options *HTTPClientFailureHead400Options) (*http.Response, error)
	// Head401 - Return 401 status code - should be represented in the client as an error
	Head401(ctx context.Context, options *HTTPClientFailureHead401Options) (*http.Response, error)
	// Head410 - Return 410 status code - should be represented in the client as an error
	Head410(ctx context.Context, options *HTTPClientFailureHead410Options) (*http.Response, error)
	// Head429 - Return 429 status code - should be represented in the client as an error
	Head429(ctx context.Context, options *HTTPClientFailureHead429Options) (*http.Response, error)
	// Options400 - Return 400 status code - should be represented in the client as an error
	Options400(ctx context.Context, options *HTTPClientFailureOptions400Options) (*http.Response, error)
	// Options403 - Return 403 status code - should be represented in the client as an error
	Options403(ctx context.Context, options *HTTPClientFailureOptions403Options) (*http.Response, error)
	// Options412 - Return 412 status code - should be represented in the client as an error
	Options412(ctx context.Context, options *HTTPClientFailureOptions412Options) (*http.Response, error)
	// Patch400 - Return 400 status code - should be represented in the client as an error
	Patch400(ctx context.Context, options *HTTPClientFailurePatch400Options) (*http.Response, error)
	// Patch405 - Return 405 status code - should be represented in the client as an error
	Patch405(ctx context.Context, options *HTTPClientFailurePatch405Options) (*http.Response, error)
	// Patch414 - Return 414 status code - should be represented in the client as an error
	Patch414(ctx context.Context, options *HTTPClientFailurePatch414Options) (*http.Response, error)
	// Post400 - Return 400 status code - should be represented in the client as an error
	Post400(ctx context.Context, options *HTTPClientFailurePost400Options) (*http.Response, error)
	// Post406 - Return 406 status code - should be represented in the client as an error
	Post406(ctx context.Context, options *HTTPClientFailurePost406Options) (*http.Response, error)
	// Post415 - Return 415 status code - should be represented in the client as an error
	Post415(ctx context.Context, options *HTTPClientFailurePost415Options) (*http.Response, error)
	// Put400 - Return 400 status code - should be represented in the client as an error
	Put400(ctx context.Context, options *HTTPClientFailurePut400Options) (*http.Response, error)
	// Put404 - Return 404 status code - should be represented in the client as an error
	Put404(ctx context.Context, options *HTTPClientFailurePut404Options) (*http.Response, error)
	// Put409 - Return 409 status code - should be represented in the client as an error
	Put409(ctx context.Context, options *HTTPClientFailurePut409Options) (*http.Response, error)
	// Put413 - Return 413 status code - should be represented in the client as an error
	Put413(ctx context.Context, options *HTTPClientFailurePut413Options) (*http.Response, error)
}

// HTTPClientFailureClient implements the HTTPClientFailureOperations interface.
// Don't use this type directly, use NewHTTPClientFailureClient() instead.
type HTTPClientFailureClient struct {
	con *Connection
}

// NewHTTPClientFailureClient creates a new instance of HTTPClientFailureClient with the specified values.
func NewHTTPClientFailureClient(con *Connection) HTTPClientFailureOperations {
	return &HTTPClientFailureClient{con: con}
}

// Pipeline returns the pipeline associated with this client.
func (client *HTTPClientFailureClient) Pipeline() azcore.Pipeline {
	return client.con.Pipeline()
}

// Delete400 - Return 400 status code - should be represented in the client as an error
func (client *HTTPClientFailureClient) Delete400(ctx context.Context, options *HTTPClientFailureDelete400Options) (*http.Response, error) {
	req, err := client.Delete400CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode() {
		return nil, client.Delete400HandleError(resp)
	}
	return resp.Response, nil
}

// Delete400CreateRequest creates the Delete400 request.
func (client *HTTPClientFailureClient) Delete400CreateRequest(ctx context.Context, options *HTTPClientFailureDelete400Options) (*azcore.Request, error) {
	urlPath := "/http/failure/client/400"
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(true)
}

// Delete400HandleError handles the Delete400 error response.
func (client *HTTPClientFailureClient) Delete400HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Delete407 - Return 407 status code - should be represented in the client as an error
func (client *HTTPClientFailureClient) Delete407(ctx context.Context, options *HTTPClientFailureDelete407Options) (*http.Response, error) {
	req, err := client.Delete407CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode() {
		return nil, client.Delete407HandleError(resp)
	}
	return resp.Response, nil
}

// Delete407CreateRequest creates the Delete407 request.
func (client *HTTPClientFailureClient) Delete407CreateRequest(ctx context.Context, options *HTTPClientFailureDelete407Options) (*azcore.Request, error) {
	urlPath := "/http/failure/client/407"
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(true)
}

// Delete407HandleError handles the Delete407 error response.
func (client *HTTPClientFailureClient) Delete407HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Delete417 - Return 417 status code - should be represented in the client as an error
func (client *HTTPClientFailureClient) Delete417(ctx context.Context, options *HTTPClientFailureDelete417Options) (*http.Response, error) {
	req, err := client.Delete417CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode() {
		return nil, client.Delete417HandleError(resp)
	}
	return resp.Response, nil
}

// Delete417CreateRequest creates the Delete417 request.
func (client *HTTPClientFailureClient) Delete417CreateRequest(ctx context.Context, options *HTTPClientFailureDelete417Options) (*azcore.Request, error) {
	urlPath := "/http/failure/client/417"
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(true)
}

// Delete417HandleError handles the Delete417 error response.
func (client *HTTPClientFailureClient) Delete417HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Get400 - Return 400 status code - should be represented in the client as an error
func (client *HTTPClientFailureClient) Get400(ctx context.Context, options *HTTPClientFailureGet400Options) (*http.Response, error) {
	req, err := client.Get400CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode() {
		return nil, client.Get400HandleError(resp)
	}
	return resp.Response, nil
}

// Get400CreateRequest creates the Get400 request.
func (client *HTTPClientFailureClient) Get400CreateRequest(ctx context.Context, options *HTTPClientFailureGet400Options) (*azcore.Request, error) {
	urlPath := "/http/failure/client/400"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Get400HandleError handles the Get400 error response.
func (client *HTTPClientFailureClient) Get400HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Get402 - Return 402 status code - should be represented in the client as an error
func (client *HTTPClientFailureClient) Get402(ctx context.Context, options *HTTPClientFailureGet402Options) (*http.Response, error) {
	req, err := client.Get402CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode() {
		return nil, client.Get402HandleError(resp)
	}
	return resp.Response, nil
}

// Get402CreateRequest creates the Get402 request.
func (client *HTTPClientFailureClient) Get402CreateRequest(ctx context.Context, options *HTTPClientFailureGet402Options) (*azcore.Request, error) {
	urlPath := "/http/failure/client/402"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Get402HandleError handles the Get402 error response.
func (client *HTTPClientFailureClient) Get402HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Get403 - Return 403 status code - should be represented in the client as an error
func (client *HTTPClientFailureClient) Get403(ctx context.Context, options *HTTPClientFailureGet403Options) (*http.Response, error) {
	req, err := client.Get403CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode() {
		return nil, client.Get403HandleError(resp)
	}
	return resp.Response, nil
}

// Get403CreateRequest creates the Get403 request.
func (client *HTTPClientFailureClient) Get403CreateRequest(ctx context.Context, options *HTTPClientFailureGet403Options) (*azcore.Request, error) {
	urlPath := "/http/failure/client/403"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Get403HandleError handles the Get403 error response.
func (client *HTTPClientFailureClient) Get403HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Get411 - Return 411 status code - should be represented in the client as an error
func (client *HTTPClientFailureClient) Get411(ctx context.Context, options *HTTPClientFailureGet411Options) (*http.Response, error) {
	req, err := client.Get411CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode() {
		return nil, client.Get411HandleError(resp)
	}
	return resp.Response, nil
}

// Get411CreateRequest creates the Get411 request.
func (client *HTTPClientFailureClient) Get411CreateRequest(ctx context.Context, options *HTTPClientFailureGet411Options) (*azcore.Request, error) {
	urlPath := "/http/failure/client/411"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Get411HandleError handles the Get411 error response.
func (client *HTTPClientFailureClient) Get411HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Get412 - Return 412 status code - should be represented in the client as an error
func (client *HTTPClientFailureClient) Get412(ctx context.Context, options *HTTPClientFailureGet412Options) (*http.Response, error) {
	req, err := client.Get412CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode() {
		return nil, client.Get412HandleError(resp)
	}
	return resp.Response, nil
}

// Get412CreateRequest creates the Get412 request.
func (client *HTTPClientFailureClient) Get412CreateRequest(ctx context.Context, options *HTTPClientFailureGet412Options) (*azcore.Request, error) {
	urlPath := "/http/failure/client/412"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Get412HandleError handles the Get412 error response.
func (client *HTTPClientFailureClient) Get412HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Get416 - Return 416 status code - should be represented in the client as an error
func (client *HTTPClientFailureClient) Get416(ctx context.Context, options *HTTPClientFailureGet416Options) (*http.Response, error) {
	req, err := client.Get416CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode() {
		return nil, client.Get416HandleError(resp)
	}
	return resp.Response, nil
}

// Get416CreateRequest creates the Get416 request.
func (client *HTTPClientFailureClient) Get416CreateRequest(ctx context.Context, options *HTTPClientFailureGet416Options) (*azcore.Request, error) {
	urlPath := "/http/failure/client/416"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Get416HandleError handles the Get416 error response.
func (client *HTTPClientFailureClient) Get416HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Head400 - Return 400 status code - should be represented in the client as an error
func (client *HTTPClientFailureClient) Head400(ctx context.Context, options *HTTPClientFailureHead400Options) (*http.Response, error) {
	req, err := client.Head400CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode() {
		return nil, client.Head400HandleError(resp)
	}
	return resp.Response, nil
}

// Head400CreateRequest creates the Head400 request.
func (client *HTTPClientFailureClient) Head400CreateRequest(ctx context.Context, options *HTTPClientFailureHead400Options) (*azcore.Request, error) {
	urlPath := "/http/failure/client/400"
	req, err := azcore.NewRequest(ctx, http.MethodHead, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Head400HandleError handles the Head400 error response.
func (client *HTTPClientFailureClient) Head400HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Head401 - Return 401 status code - should be represented in the client as an error
func (client *HTTPClientFailureClient) Head401(ctx context.Context, options *HTTPClientFailureHead401Options) (*http.Response, error) {
	req, err := client.Head401CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode() {
		return nil, client.Head401HandleError(resp)
	}
	return resp.Response, nil
}

// Head401CreateRequest creates the Head401 request.
func (client *HTTPClientFailureClient) Head401CreateRequest(ctx context.Context, options *HTTPClientFailureHead401Options) (*azcore.Request, error) {
	urlPath := "/http/failure/client/401"
	req, err := azcore.NewRequest(ctx, http.MethodHead, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Head401HandleError handles the Head401 error response.
func (client *HTTPClientFailureClient) Head401HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Head410 - Return 410 status code - should be represented in the client as an error
func (client *HTTPClientFailureClient) Head410(ctx context.Context, options *HTTPClientFailureHead410Options) (*http.Response, error) {
	req, err := client.Head410CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode() {
		return nil, client.Head410HandleError(resp)
	}
	return resp.Response, nil
}

// Head410CreateRequest creates the Head410 request.
func (client *HTTPClientFailureClient) Head410CreateRequest(ctx context.Context, options *HTTPClientFailureHead410Options) (*azcore.Request, error) {
	urlPath := "/http/failure/client/410"
	req, err := azcore.NewRequest(ctx, http.MethodHead, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Head410HandleError handles the Head410 error response.
func (client *HTTPClientFailureClient) Head410HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Head429 - Return 429 status code - should be represented in the client as an error
func (client *HTTPClientFailureClient) Head429(ctx context.Context, options *HTTPClientFailureHead429Options) (*http.Response, error) {
	req, err := client.Head429CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode() {
		return nil, client.Head429HandleError(resp)
	}
	return resp.Response, nil
}

// Head429CreateRequest creates the Head429 request.
func (client *HTTPClientFailureClient) Head429CreateRequest(ctx context.Context, options *HTTPClientFailureHead429Options) (*azcore.Request, error) {
	urlPath := "/http/failure/client/429"
	req, err := azcore.NewRequest(ctx, http.MethodHead, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Head429HandleError handles the Head429 error response.
func (client *HTTPClientFailureClient) Head429HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Options400 - Return 400 status code - should be represented in the client as an error
func (client *HTTPClientFailureClient) Options400(ctx context.Context, options *HTTPClientFailureOptions400Options) (*http.Response, error) {
	req, err := client.Options400CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode() {
		return nil, client.Options400HandleError(resp)
	}
	return resp.Response, nil
}

// Options400CreateRequest creates the Options400 request.
func (client *HTTPClientFailureClient) Options400CreateRequest(ctx context.Context, options *HTTPClientFailureOptions400Options) (*azcore.Request, error) {
	urlPath := "/http/failure/client/400"
	req, err := azcore.NewRequest(ctx, http.MethodOptions, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Options400HandleError handles the Options400 error response.
func (client *HTTPClientFailureClient) Options400HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Options403 - Return 403 status code - should be represented in the client as an error
func (client *HTTPClientFailureClient) Options403(ctx context.Context, options *HTTPClientFailureOptions403Options) (*http.Response, error) {
	req, err := client.Options403CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode() {
		return nil, client.Options403HandleError(resp)
	}
	return resp.Response, nil
}

// Options403CreateRequest creates the Options403 request.
func (client *HTTPClientFailureClient) Options403CreateRequest(ctx context.Context, options *HTTPClientFailureOptions403Options) (*azcore.Request, error) {
	urlPath := "/http/failure/client/403"
	req, err := azcore.NewRequest(ctx, http.MethodOptions, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Options403HandleError handles the Options403 error response.
func (client *HTTPClientFailureClient) Options403HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Options412 - Return 412 status code - should be represented in the client as an error
func (client *HTTPClientFailureClient) Options412(ctx context.Context, options *HTTPClientFailureOptions412Options) (*http.Response, error) {
	req, err := client.Options412CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode() {
		return nil, client.Options412HandleError(resp)
	}
	return resp.Response, nil
}

// Options412CreateRequest creates the Options412 request.
func (client *HTTPClientFailureClient) Options412CreateRequest(ctx context.Context, options *HTTPClientFailureOptions412Options) (*azcore.Request, error) {
	urlPath := "/http/failure/client/412"
	req, err := azcore.NewRequest(ctx, http.MethodOptions, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// Options412HandleError handles the Options412 error response.
func (client *HTTPClientFailureClient) Options412HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Patch400 - Return 400 status code - should be represented in the client as an error
func (client *HTTPClientFailureClient) Patch400(ctx context.Context, options *HTTPClientFailurePatch400Options) (*http.Response, error) {
	req, err := client.Patch400CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode() {
		return nil, client.Patch400HandleError(resp)
	}
	return resp.Response, nil
}

// Patch400CreateRequest creates the Patch400 request.
func (client *HTTPClientFailureClient) Patch400CreateRequest(ctx context.Context, options *HTTPClientFailurePatch400Options) (*azcore.Request, error) {
	urlPath := "/http/failure/client/400"
	req, err := azcore.NewRequest(ctx, http.MethodPatch, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(true)
}

// Patch400HandleError handles the Patch400 error response.
func (client *HTTPClientFailureClient) Patch400HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Patch405 - Return 405 status code - should be represented in the client as an error
func (client *HTTPClientFailureClient) Patch405(ctx context.Context, options *HTTPClientFailurePatch405Options) (*http.Response, error) {
	req, err := client.Patch405CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode() {
		return nil, client.Patch405HandleError(resp)
	}
	return resp.Response, nil
}

// Patch405CreateRequest creates the Patch405 request.
func (client *HTTPClientFailureClient) Patch405CreateRequest(ctx context.Context, options *HTTPClientFailurePatch405Options) (*azcore.Request, error) {
	urlPath := "/http/failure/client/405"
	req, err := azcore.NewRequest(ctx, http.MethodPatch, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(true)
}

// Patch405HandleError handles the Patch405 error response.
func (client *HTTPClientFailureClient) Patch405HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Patch414 - Return 414 status code - should be represented in the client as an error
func (client *HTTPClientFailureClient) Patch414(ctx context.Context, options *HTTPClientFailurePatch414Options) (*http.Response, error) {
	req, err := client.Patch414CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode() {
		return nil, client.Patch414HandleError(resp)
	}
	return resp.Response, nil
}

// Patch414CreateRequest creates the Patch414 request.
func (client *HTTPClientFailureClient) Patch414CreateRequest(ctx context.Context, options *HTTPClientFailurePatch414Options) (*azcore.Request, error) {
	urlPath := "/http/failure/client/414"
	req, err := azcore.NewRequest(ctx, http.MethodPatch, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(true)
}

// Patch414HandleError handles the Patch414 error response.
func (client *HTTPClientFailureClient) Patch414HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Post400 - Return 400 status code - should be represented in the client as an error
func (client *HTTPClientFailureClient) Post400(ctx context.Context, options *HTTPClientFailurePost400Options) (*http.Response, error) {
	req, err := client.Post400CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode() {
		return nil, client.Post400HandleError(resp)
	}
	return resp.Response, nil
}

// Post400CreateRequest creates the Post400 request.
func (client *HTTPClientFailureClient) Post400CreateRequest(ctx context.Context, options *HTTPClientFailurePost400Options) (*azcore.Request, error) {
	urlPath := "/http/failure/client/400"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(true)
}

// Post400HandleError handles the Post400 error response.
func (client *HTTPClientFailureClient) Post400HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Post406 - Return 406 status code - should be represented in the client as an error
func (client *HTTPClientFailureClient) Post406(ctx context.Context, options *HTTPClientFailurePost406Options) (*http.Response, error) {
	req, err := client.Post406CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode() {
		return nil, client.Post406HandleError(resp)
	}
	return resp.Response, nil
}

// Post406CreateRequest creates the Post406 request.
func (client *HTTPClientFailureClient) Post406CreateRequest(ctx context.Context, options *HTTPClientFailurePost406Options) (*azcore.Request, error) {
	urlPath := "/http/failure/client/406"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(true)
}

// Post406HandleError handles the Post406 error response.
func (client *HTTPClientFailureClient) Post406HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Post415 - Return 415 status code - should be represented in the client as an error
func (client *HTTPClientFailureClient) Post415(ctx context.Context, options *HTTPClientFailurePost415Options) (*http.Response, error) {
	req, err := client.Post415CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode() {
		return nil, client.Post415HandleError(resp)
	}
	return resp.Response, nil
}

// Post415CreateRequest creates the Post415 request.
func (client *HTTPClientFailureClient) Post415CreateRequest(ctx context.Context, options *HTTPClientFailurePost415Options) (*azcore.Request, error) {
	urlPath := "/http/failure/client/415"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(true)
}

// Post415HandleError handles the Post415 error response.
func (client *HTTPClientFailureClient) Post415HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Put400 - Return 400 status code - should be represented in the client as an error
func (client *HTTPClientFailureClient) Put400(ctx context.Context, options *HTTPClientFailurePut400Options) (*http.Response, error) {
	req, err := client.Put400CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode() {
		return nil, client.Put400HandleError(resp)
	}
	return resp.Response, nil
}

// Put400CreateRequest creates the Put400 request.
func (client *HTTPClientFailureClient) Put400CreateRequest(ctx context.Context, options *HTTPClientFailurePut400Options) (*azcore.Request, error) {
	urlPath := "/http/failure/client/400"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(true)
}

// Put400HandleError handles the Put400 error response.
func (client *HTTPClientFailureClient) Put400HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Put404 - Return 404 status code - should be represented in the client as an error
func (client *HTTPClientFailureClient) Put404(ctx context.Context, options *HTTPClientFailurePut404Options) (*http.Response, error) {
	req, err := client.Put404CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode() {
		return nil, client.Put404HandleError(resp)
	}
	return resp.Response, nil
}

// Put404CreateRequest creates the Put404 request.
func (client *HTTPClientFailureClient) Put404CreateRequest(ctx context.Context, options *HTTPClientFailurePut404Options) (*azcore.Request, error) {
	urlPath := "/http/failure/client/404"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(true)
}

// Put404HandleError handles the Put404 error response.
func (client *HTTPClientFailureClient) Put404HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Put409 - Return 409 status code - should be represented in the client as an error
func (client *HTTPClientFailureClient) Put409(ctx context.Context, options *HTTPClientFailurePut409Options) (*http.Response, error) {
	req, err := client.Put409CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode() {
		return nil, client.Put409HandleError(resp)
	}
	return resp.Response, nil
}

// Put409CreateRequest creates the Put409 request.
func (client *HTTPClientFailureClient) Put409CreateRequest(ctx context.Context, options *HTTPClientFailurePut409Options) (*azcore.Request, error) {
	urlPath := "/http/failure/client/409"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(true)
}

// Put409HandleError handles the Put409 error response.
func (client *HTTPClientFailureClient) Put409HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Put413 - Return 413 status code - should be represented in the client as an error
func (client *HTTPClientFailureClient) Put413(ctx context.Context, options *HTTPClientFailurePut413Options) (*http.Response, error) {
	req, err := client.Put413CreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode() {
		return nil, client.Put413HandleError(resp)
	}
	return resp.Response, nil
}

// Put413CreateRequest creates the Put413 request.
func (client *HTTPClientFailureClient) Put413CreateRequest(ctx context.Context, options *HTTPClientFailurePut413Options) (*azcore.Request, error) {
	urlPath := "/http/failure/client/413"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(true)
}

// Put413HandleError handles the Put413 error response.
func (client *HTTPClientFailureClient) Put413HandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}
