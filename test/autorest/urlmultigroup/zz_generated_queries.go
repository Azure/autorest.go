// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package urlmultigroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// QueriesOperations contains the methods for the Queries group.
type QueriesOperations interface {
	// ArrayStringMultiEmpty - Get an empty array [] of string using the multi-array format
	ArrayStringMultiEmpty(ctx context.Context, queriesArrayStringMultiEmptyOptions *QueriesArrayStringMultiEmptyOptions) (*http.Response, error)
	// ArrayStringMultiNull - Get a null array of string using the multi-array format
	ArrayStringMultiNull(ctx context.Context, queriesArrayStringMultiNullOptions *QueriesArrayStringMultiNullOptions) (*http.Response, error)
	// ArrayStringMultiValid - Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the mult-array format
	ArrayStringMultiValid(ctx context.Context, queriesArrayStringMultiValidOptions *QueriesArrayStringMultiValidOptions) (*http.Response, error)
}

// QueriesClient implements the QueriesOperations interface.
// Don't use this type directly, use NewQueriesClient() instead.
type QueriesClient struct {
	*Client
}

// NewQueriesClient creates a new instance of QueriesClient with the specified values.
func NewQueriesClient(c *Client) QueriesOperations {
	return &QueriesClient{Client: c}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *QueriesClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// ArrayStringMultiEmpty - Get an empty array [] of string using the multi-array format
func (client *QueriesClient) ArrayStringMultiEmpty(ctx context.Context, queriesArrayStringMultiEmptyOptions *QueriesArrayStringMultiEmptyOptions) (*http.Response, error) {
	req, err := client.ArrayStringMultiEmptyCreateRequest(ctx, queriesArrayStringMultiEmptyOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.ArrayStringMultiEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ArrayStringMultiEmptyCreateRequest creates the ArrayStringMultiEmpty request.
func (client *QueriesClient) ArrayStringMultiEmptyCreateRequest(ctx context.Context, queriesArrayStringMultiEmptyOptions *QueriesArrayStringMultiEmptyOptions) (*azcore.Request, error) {
	urlPath := "/queries/array/multi/string/empty"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	if queriesArrayStringMultiEmptyOptions != nil && queriesArrayStringMultiEmptyOptions.ArrayQuery != nil {
		for _, qv := range *queriesArrayStringMultiEmptyOptions.ArrayQuery {
			query.Add("arrayQuery", qv)
		}
	}
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// ArrayStringMultiEmptyHandleResponse handles the ArrayStringMultiEmpty response.
func (client *QueriesClient) ArrayStringMultiEmptyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.ArrayStringMultiEmptyHandleError(resp)
	}
	return resp.Response, nil
}

// ArrayStringMultiEmptyHandleError handles the ArrayStringMultiEmpty error response.
func (client *QueriesClient) ArrayStringMultiEmptyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ArrayStringMultiNull - Get a null array of string using the multi-array format
func (client *QueriesClient) ArrayStringMultiNull(ctx context.Context, queriesArrayStringMultiNullOptions *QueriesArrayStringMultiNullOptions) (*http.Response, error) {
	req, err := client.ArrayStringMultiNullCreateRequest(ctx, queriesArrayStringMultiNullOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.ArrayStringMultiNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ArrayStringMultiNullCreateRequest creates the ArrayStringMultiNull request.
func (client *QueriesClient) ArrayStringMultiNullCreateRequest(ctx context.Context, queriesArrayStringMultiNullOptions *QueriesArrayStringMultiNullOptions) (*azcore.Request, error) {
	urlPath := "/queries/array/multi/string/null"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	if queriesArrayStringMultiNullOptions != nil && queriesArrayStringMultiNullOptions.ArrayQuery != nil {
		for _, qv := range *queriesArrayStringMultiNullOptions.ArrayQuery {
			query.Add("arrayQuery", qv)
		}
	}
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// ArrayStringMultiNullHandleResponse handles the ArrayStringMultiNull response.
func (client *QueriesClient) ArrayStringMultiNullHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.ArrayStringMultiNullHandleError(resp)
	}
	return resp.Response, nil
}

// ArrayStringMultiNullHandleError handles the ArrayStringMultiNull error response.
func (client *QueriesClient) ArrayStringMultiNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ArrayStringMultiValid - Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the mult-array format
func (client *QueriesClient) ArrayStringMultiValid(ctx context.Context, queriesArrayStringMultiValidOptions *QueriesArrayStringMultiValidOptions) (*http.Response, error) {
	req, err := client.ArrayStringMultiValidCreateRequest(ctx, queriesArrayStringMultiValidOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.ArrayStringMultiValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ArrayStringMultiValidCreateRequest creates the ArrayStringMultiValid request.
func (client *QueriesClient) ArrayStringMultiValidCreateRequest(ctx context.Context, queriesArrayStringMultiValidOptions *QueriesArrayStringMultiValidOptions) (*azcore.Request, error) {
	urlPath := "/queries/array/multi/string/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	if queriesArrayStringMultiValidOptions != nil && queriesArrayStringMultiValidOptions.ArrayQuery != nil {
		for _, qv := range *queriesArrayStringMultiValidOptions.ArrayQuery {
			query.Add("arrayQuery", qv)
		}
	}
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// ArrayStringMultiValidHandleResponse handles the ArrayStringMultiValid response.
func (client *QueriesClient) ArrayStringMultiValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.ArrayStringMultiValidHandleError(resp)
	}
	return resp.Response, nil
}

// ArrayStringMultiValidHandleError handles the ArrayStringMultiValid error response.
func (client *QueriesClient) ArrayStringMultiValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
