// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package formdatagroup

import (
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
)

type Error struct {
	Message *string `json:"message,omitempty"`
	Status  *int32  `json:"status,omitempty"`
}

// Error implements the error interface for type Error.
func (e Error) Error() string {
	msg := ""
	if e.Message != nil {
		msg += fmt.Sprintf("Message: %v\n", *e.Message)
	}
	if e.Status != nil {
		msg += fmt.Sprintf("Status: %v\n", *e.Status)
	}
	if msg == "" {
		msg = "missing error info"
	}
	return msg
}

// FormdataUploadFileOptions contains the optional parameters for the Formdata.UploadFile method.
type FormdataUploadFileOptions struct {
	// placeholder for future optional parameters
}

// FormdataUploadFileViaBodyOptions contains the optional parameters for the Formdata.UploadFileViaBody method.
type FormdataUploadFileViaBodyOptions struct {
	// placeholder for future optional parameters
}

// FormdataUploadFilesOptions contains the optional parameters for the Formdata.UploadFiles method.
type FormdataUploadFilesOptions struct {
	// placeholder for future optional parameters
}

type Paths1MqqetpFormdataStreamUploadfilePostRequestbodyContentMultipartFormDataSchema struct {
	// File to upload.
	FileContent *azcore.ReadSeekCloser `json:"fileContent,omitempty"`

	// File name to upload. Name has to be spelled exactly as written here.
	FileName *string `json:"fileName,omitempty"`
}

type Paths1P3Stk3FormdataStreamUploadfilesPostRequestbodyContentMultipartFormDataSchema struct {
	// Files to upload.
	FileContent *[]azcore.ReadSeekCloser `json:"fileContent,omitempty"`
}
