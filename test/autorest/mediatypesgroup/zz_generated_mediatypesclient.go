// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package mediatypesgroup

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"io/ioutil"
	"net/http"
	"strings"
)

// MediaTypesClient contains the methods for the MediaTypesClient group.
// Don't use this type directly, use NewMediaTypesClient() instead.
type MediaTypesClient struct {
	con *Connection
}

// NewMediaTypesClient creates a new instance of MediaTypesClient with the specified values.
func NewMediaTypesClient(con *Connection) MediaTypesClient {
	return MediaTypesClient{con: con}
}

// Pipeline returns the pipeline associated with this client.
func (client MediaTypesClient) Pipeline() azcore.Pipeline {
	return client.con.Pipeline()
}

// AnalyzeBody - Analyze body, that could be different media types.
func (client MediaTypesClient) AnalyzeBody(ctx context.Context, contentType ContentType, input azcore.ReadSeekCloser, options *MediaTypesClientAnalyzeBodyOptions) (StringResponse, error) {
	req, err := client.analyzeBodyCreateRequest(ctx, contentType, input, options)
	if err != nil {
		return StringResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return StringResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return StringResponse{}, client.analyzeBodyHandleError(resp)
	}
	result, err := client.analyzeBodyHandleResponse(resp)
	if err != nil {
		return StringResponse{}, err
	}
	return result, nil
}

// analyzeBodyCreateRequest creates the AnalyzeBody request.
func (client MediaTypesClient) analyzeBodyCreateRequest(ctx context.Context, contentType ContentType, input azcore.ReadSeekCloser, options *MediaTypesClientAnalyzeBodyOptions) (*azcore.Request, error) {
	urlPath := "/mediatypes/analyze"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Content-Type", string(contentType))
	req.Header.Set("Accept", "application/json")
	return req, req.SetBody(input, string(contentType))
}

// analyzeBodyHandleResponse handles the AnalyzeBody response.
func (client MediaTypesClient) analyzeBodyHandleResponse(resp *azcore.Response) (StringResponse, error) {
	result := StringResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.Value)
	return result, err
}

// analyzeBodyHandleError handles the AnalyzeBody error response.
func (client MediaTypesClient) analyzeBodyHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// AnalyzeBodyWithSourcePath - Analyze body, that could be different media types.
func (client MediaTypesClient) AnalyzeBodyWithSourcePath(ctx context.Context, options *MediaTypesClientAnalyzeBodyWithSourcePathOptions) (StringResponse, error) {
	req, err := client.analyzeBodyWithSourcePathCreateRequest(ctx, options)
	if err != nil {
		return StringResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return StringResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return StringResponse{}, client.analyzeBodyWithSourcePathHandleError(resp)
	}
	result, err := client.analyzeBodyWithSourcePathHandleResponse(resp)
	if err != nil {
		return StringResponse{}, err
	}
	return result, nil
}

// analyzeBodyWithSourcePathCreateRequest creates the AnalyzeBodyWithSourcePath request.
func (client MediaTypesClient) analyzeBodyWithSourcePathCreateRequest(ctx context.Context, options *MediaTypesClientAnalyzeBodyWithSourcePathOptions) (*azcore.Request, error) {
	urlPath := "/mediatypes/analyze"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	if options != nil {
		return req, req.MarshalAsJSON(options.Input)
	}
	return req, nil
}

// analyzeBodyWithSourcePathHandleResponse handles the AnalyzeBodyWithSourcePath response.
func (client MediaTypesClient) analyzeBodyWithSourcePathHandleResponse(resp *azcore.Response) (StringResponse, error) {
	result := StringResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.Value)
	return result, err
}

// analyzeBodyWithSourcePathHandleError handles the AnalyzeBodyWithSourcePath error response.
func (client MediaTypesClient) analyzeBodyWithSourcePathHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// ContentTypeWithEncoding - Pass in contentType 'text/plain; encoding=UTF-8' to pass test. Value for input does not matter
func (client MediaTypesClient) ContentTypeWithEncoding(ctx context.Context, input string) (StringResponse, error) {
	req, err := client.contentTypeWithEncodingCreateRequest(ctx, input)
	if err != nil {
		return StringResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return StringResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return StringResponse{}, client.contentTypeWithEncodingHandleError(resp)
	}
	result, err := client.contentTypeWithEncodingHandleResponse(resp)
	if err != nil {
		return StringResponse{}, err
	}
	return result, nil
}

// contentTypeWithEncodingCreateRequest creates the ContentTypeWithEncoding request.
func (client MediaTypesClient) contentTypeWithEncodingCreateRequest(ctx context.Context, input string) (*azcore.Request, error) {
	urlPath := "/mediatypes/contentTypeWithEncoding"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	body := azcore.NopCloser(strings.NewReader(input))
	return req, req.SetBody(body, "text/plain; encoding=UTF-8")
}

// contentTypeWithEncodingHandleResponse handles the ContentTypeWithEncoding response.
func (client MediaTypesClient) contentTypeWithEncodingHandleResponse(resp *azcore.Response) (StringResponse, error) {
	result := StringResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.Value)
	return result, err
}

// contentTypeWithEncodingHandleError handles the ContentTypeWithEncoding error response.
func (client MediaTypesClient) contentTypeWithEncodingHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}
