//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package mediatypesgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/streaming"
	"io"
	"net/http"
	"strings"
)

// MediaTypesClient contains the methods for the MediaTypesClient group.
// Don't use this type directly, use NewMediaTypesClient() instead.
type MediaTypesClient struct {
	pl runtime.Pipeline
}

// NewMediaTypesClient creates a new instance of MediaTypesClient with the specified values.
// options - pass nil to accept the default values.
func NewMediaTypesClient(options *azcore.ClientOptions) *MediaTypesClient {
	if options == nil {
		options = &azcore.ClientOptions{}
	}
	client := &MediaTypesClient{
		pl: runtime.NewPipeline(moduleName, moduleVersion, runtime.PipelineOptions{}, options),
	}
	return client
}

// AnalyzeBody - Analyze body, that could be different media types.
// If the operation fails it returns an *azcore.ResponseError type.
// contentType - Upload file type
// options - MediaTypesClientAnalyzeBodyOptions contains the optional parameters for the MediaTypesClient.AnalyzeBody method.
func (client *MediaTypesClient) AnalyzeBody(ctx context.Context, contentType ContentType, options *MediaTypesClientAnalyzeBodyOptions) (MediaTypesClientAnalyzeBodyResponse, error) {
	req, err := client.analyzeBodyCreateRequest(ctx, contentType, options)
	if err != nil {
		return MediaTypesClientAnalyzeBodyResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MediaTypesClientAnalyzeBodyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return MediaTypesClientAnalyzeBodyResponse{}, runtime.NewResponseError(resp)
	}
	return client.analyzeBodyHandleResponse(resp)
}

// analyzeBodyCreateRequest creates the AnalyzeBody request.
func (client *MediaTypesClient) analyzeBodyCreateRequest(ctx context.Context, contentType ContentType, options *MediaTypesClientAnalyzeBodyOptions) (*policy.Request, error) {
	urlPath := "/mediatypes/analyze"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Content-Type", string(contentType))
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Input != nil {
		return req, req.SetBody(options.Input, string(contentType))
	}
	return req, nil
}

// analyzeBodyHandleResponse handles the AnalyzeBody response.
func (client *MediaTypesClient) analyzeBodyHandleResponse(resp *http.Response) (MediaTypesClientAnalyzeBodyResponse, error) {
	result := MediaTypesClientAnalyzeBodyResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return MediaTypesClientAnalyzeBodyResponse{}, err
	}
	return result, nil
}

// AnalyzeBodyNoAcceptHeader - Analyze body, that could be different media types. Adds to AnalyzeBody by not having an accept
// type.
// If the operation fails it returns an *azcore.ResponseError type.
// contentType - Upload file type
// options - MediaTypesClientAnalyzeBodyNoAcceptHeaderOptions contains the optional parameters for the MediaTypesClient.AnalyzeBodyNoAcceptHeader
// method.
func (client *MediaTypesClient) AnalyzeBodyNoAcceptHeader(ctx context.Context, contentType ContentType, options *MediaTypesClientAnalyzeBodyNoAcceptHeaderOptions) (MediaTypesClientAnalyzeBodyNoAcceptHeaderResponse, error) {
	req, err := client.analyzeBodyNoAcceptHeaderCreateRequest(ctx, contentType, options)
	if err != nil {
		return MediaTypesClientAnalyzeBodyNoAcceptHeaderResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MediaTypesClientAnalyzeBodyNoAcceptHeaderResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return MediaTypesClientAnalyzeBodyNoAcceptHeaderResponse{}, runtime.NewResponseError(resp)
	}
	return MediaTypesClientAnalyzeBodyNoAcceptHeaderResponse{RawResponse: resp}, nil
}

// analyzeBodyNoAcceptHeaderCreateRequest creates the AnalyzeBodyNoAcceptHeader request.
func (client *MediaTypesClient) analyzeBodyNoAcceptHeaderCreateRequest(ctx context.Context, contentType ContentType, options *MediaTypesClientAnalyzeBodyNoAcceptHeaderOptions) (*policy.Request, error) {
	urlPath := "/mediatypes/analyzeNoAccept"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Content-Type", string(contentType))
	if options != nil && options.Input != nil {
		return req, req.SetBody(options.Input, string(contentType))
	}
	return req, nil
}

// AnalyzeBodyNoAcceptHeaderWithJSON - Analyze body, that could be different media types. Adds to AnalyzeBody by not having
// an accept type.
// If the operation fails it returns an *azcore.ResponseError type.
// options - MediaTypesClientAnalyzeBodyNoAcceptHeaderWithJSONOptions contains the optional parameters for the MediaTypesClient.AnalyzeBodyNoAcceptHeaderWithJSON
// method.
func (client *MediaTypesClient) AnalyzeBodyNoAcceptHeaderWithJSON(ctx context.Context, options *MediaTypesClientAnalyzeBodyNoAcceptHeaderWithJSONOptions) (MediaTypesClientAnalyzeBodyNoAcceptHeaderWithJSONResponse, error) {
	req, err := client.analyzeBodyNoAcceptHeaderWithJSONCreateRequest(ctx, options)
	if err != nil {
		return MediaTypesClientAnalyzeBodyNoAcceptHeaderWithJSONResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MediaTypesClientAnalyzeBodyNoAcceptHeaderWithJSONResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return MediaTypesClientAnalyzeBodyNoAcceptHeaderWithJSONResponse{}, runtime.NewResponseError(resp)
	}
	return MediaTypesClientAnalyzeBodyNoAcceptHeaderWithJSONResponse{RawResponse: resp}, nil
}

// analyzeBodyNoAcceptHeaderWithJSONCreateRequest creates the AnalyzeBodyNoAcceptHeaderWithJSON request.
func (client *MediaTypesClient) analyzeBodyNoAcceptHeaderWithJSONCreateRequest(ctx context.Context, options *MediaTypesClientAnalyzeBodyNoAcceptHeaderWithJSONOptions) (*policy.Request, error) {
	urlPath := "/mediatypes/analyzeNoAccept"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	if options != nil && options.Input != nil {
		return req, runtime.MarshalAsJSON(req, *options.Input)
	}
	return req, nil
}

// AnalyzeBodyWithJSON - Analyze body, that could be different media types.
// If the operation fails it returns an *azcore.ResponseError type.
// options - MediaTypesClientAnalyzeBodyWithJSONOptions contains the optional parameters for the MediaTypesClient.AnalyzeBodyWithJSON
// method.
func (client *MediaTypesClient) AnalyzeBodyWithJSON(ctx context.Context, options *MediaTypesClientAnalyzeBodyWithJSONOptions) (MediaTypesClientAnalyzeBodyWithJSONResponse, error) {
	req, err := client.analyzeBodyWithJSONCreateRequest(ctx, options)
	if err != nil {
		return MediaTypesClientAnalyzeBodyWithJSONResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MediaTypesClientAnalyzeBodyWithJSONResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return MediaTypesClientAnalyzeBodyWithJSONResponse{}, runtime.NewResponseError(resp)
	}
	return client.analyzeBodyWithJSONHandleResponse(resp)
}

// analyzeBodyWithJSONCreateRequest creates the AnalyzeBodyWithJSON request.
func (client *MediaTypesClient) analyzeBodyWithJSONCreateRequest(ctx context.Context, options *MediaTypesClientAnalyzeBodyWithJSONOptions) (*policy.Request, error) {
	urlPath := "/mediatypes/analyze"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Input != nil {
		return req, runtime.MarshalAsJSON(req, *options.Input)
	}
	return req, nil
}

// analyzeBodyWithJSONHandleResponse handles the AnalyzeBodyWithJSON response.
func (client *MediaTypesClient) analyzeBodyWithJSONHandleResponse(resp *http.Response) (MediaTypesClientAnalyzeBodyWithJSONResponse, error) {
	result := MediaTypesClientAnalyzeBodyWithJSONResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return MediaTypesClientAnalyzeBodyWithJSONResponse{}, err
	}
	return result, nil
}

// BinaryBodyWithThreeContentTypes - Binary body with three content types. Pass in string 'hello, world' with content type
// 'text/plain', {'hello': world'} with content type 'application/json' and a byte string for
// 'application/octet-stream'.
// If the operation fails it returns an *azcore.ResponseError type.
// contentType - Upload file type
// message - The payload body.
// options - MediaTypesClientBinaryBodyWithThreeContentTypesOptions contains the optional parameters for the MediaTypesClient.BinaryBodyWithThreeContentTypes
// method.
func (client *MediaTypesClient) BinaryBodyWithThreeContentTypes(ctx context.Context, contentType ContentType1, message io.ReadSeekCloser, options *MediaTypesClientBinaryBodyWithThreeContentTypesOptions) (MediaTypesClientBinaryBodyWithThreeContentTypesResponse, error) {
	req, err := client.binaryBodyWithThreeContentTypesCreateRequest(ctx, contentType, message, options)
	if err != nil {
		return MediaTypesClientBinaryBodyWithThreeContentTypesResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MediaTypesClientBinaryBodyWithThreeContentTypesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return MediaTypesClientBinaryBodyWithThreeContentTypesResponse{}, runtime.NewResponseError(resp)
	}
	return client.binaryBodyWithThreeContentTypesHandleResponse(resp)
}

// binaryBodyWithThreeContentTypesCreateRequest creates the BinaryBodyWithThreeContentTypes request.
func (client *MediaTypesClient) binaryBodyWithThreeContentTypesCreateRequest(ctx context.Context, contentType ContentType1, message io.ReadSeekCloser, options *MediaTypesClientBinaryBodyWithThreeContentTypesOptions) (*policy.Request, error) {
	urlPath := "/mediatypes/binaryBodyThreeContentTypes"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Content-Type", string(contentType))
	req.Raw().Header.Set("Accept", "text/plain")
	return req, req.SetBody(message, string(contentType))
}

// binaryBodyWithThreeContentTypesHandleResponse handles the BinaryBodyWithThreeContentTypes response.
func (client *MediaTypesClient) binaryBodyWithThreeContentTypesHandleResponse(resp *http.Response) (MediaTypesClientBinaryBodyWithThreeContentTypesResponse, error) {
	result := MediaTypesClientBinaryBodyWithThreeContentTypesResponse{RawResponse: resp}
	body, err := runtime.Payload(resp)
	if err != nil {
		return MediaTypesClientBinaryBodyWithThreeContentTypesResponse{}, err
	}
	txt := string(body)
	result.Value = &txt
	return result, nil
}

// BinaryBodyWithThreeContentTypesWithText - Binary body with three content types. Pass in string 'hello, world' with content
// type 'text/plain', {'hello': world'} with content type 'application/json' and a byte string for
// 'application/octet-stream'.
// If the operation fails it returns an *azcore.ResponseError type.
// message - The payload body.
// options - MediaTypesClientBinaryBodyWithThreeContentTypesWithTextOptions contains the optional parameters for the MediaTypesClient.BinaryBodyWithThreeContentTypesWithText
// method.
func (client *MediaTypesClient) BinaryBodyWithThreeContentTypesWithText(ctx context.Context, message string, options *MediaTypesClientBinaryBodyWithThreeContentTypesWithTextOptions) (MediaTypesClientBinaryBodyWithThreeContentTypesWithTextResponse, error) {
	req, err := client.binaryBodyWithThreeContentTypesWithTextCreateRequest(ctx, message, options)
	if err != nil {
		return MediaTypesClientBinaryBodyWithThreeContentTypesWithTextResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MediaTypesClientBinaryBodyWithThreeContentTypesWithTextResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return MediaTypesClientBinaryBodyWithThreeContentTypesWithTextResponse{}, runtime.NewResponseError(resp)
	}
	return client.binaryBodyWithThreeContentTypesWithTextHandleResponse(resp)
}

// binaryBodyWithThreeContentTypesWithTextCreateRequest creates the BinaryBodyWithThreeContentTypesWithText request.
func (client *MediaTypesClient) binaryBodyWithThreeContentTypesWithTextCreateRequest(ctx context.Context, message string, options *MediaTypesClientBinaryBodyWithThreeContentTypesWithTextOptions) (*policy.Request, error) {
	urlPath := "/mediatypes/binaryBodyThreeContentTypes"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "text/plain")
	body := streaming.NopCloser(strings.NewReader(message))
	return req, req.SetBody(body, "text/plain")
}

// binaryBodyWithThreeContentTypesWithTextHandleResponse handles the BinaryBodyWithThreeContentTypesWithText response.
func (client *MediaTypesClient) binaryBodyWithThreeContentTypesWithTextHandleResponse(resp *http.Response) (MediaTypesClientBinaryBodyWithThreeContentTypesWithTextResponse, error) {
	result := MediaTypesClientBinaryBodyWithThreeContentTypesWithTextResponse{RawResponse: resp}
	body, err := runtime.Payload(resp)
	if err != nil {
		return MediaTypesClientBinaryBodyWithThreeContentTypesWithTextResponse{}, err
	}
	txt := string(body)
	result.Value = &txt
	return result, nil
}

// BinaryBodyWithTwoContentTypes - Binary body with two content types. Pass in of {'hello': 'world'} for the application/json
// content type, and a byte stream of 'hello, world!' for application/octet-stream.
// If the operation fails it returns an *azcore.ResponseError type.
// contentType - Upload file type
// message - The payload body.
// options - MediaTypesClientBinaryBodyWithTwoContentTypesOptions contains the optional parameters for the MediaTypesClient.BinaryBodyWithTwoContentTypes
// method.
func (client *MediaTypesClient) BinaryBodyWithTwoContentTypes(ctx context.Context, contentType ContentType1, message io.ReadSeekCloser, options *MediaTypesClientBinaryBodyWithTwoContentTypesOptions) (MediaTypesClientBinaryBodyWithTwoContentTypesResponse, error) {
	req, err := client.binaryBodyWithTwoContentTypesCreateRequest(ctx, contentType, message, options)
	if err != nil {
		return MediaTypesClientBinaryBodyWithTwoContentTypesResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MediaTypesClientBinaryBodyWithTwoContentTypesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return MediaTypesClientBinaryBodyWithTwoContentTypesResponse{}, runtime.NewResponseError(resp)
	}
	return client.binaryBodyWithTwoContentTypesHandleResponse(resp)
}

// binaryBodyWithTwoContentTypesCreateRequest creates the BinaryBodyWithTwoContentTypes request.
func (client *MediaTypesClient) binaryBodyWithTwoContentTypesCreateRequest(ctx context.Context, contentType ContentType1, message io.ReadSeekCloser, options *MediaTypesClientBinaryBodyWithTwoContentTypesOptions) (*policy.Request, error) {
	urlPath := "/mediatypes/binaryBodyTwoContentTypes"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Content-Type", string(contentType))
	req.Raw().Header.Set("Accept", "text/plain")
	return req, req.SetBody(message, string(contentType))
}

// binaryBodyWithTwoContentTypesHandleResponse handles the BinaryBodyWithTwoContentTypes response.
func (client *MediaTypesClient) binaryBodyWithTwoContentTypesHandleResponse(resp *http.Response) (MediaTypesClientBinaryBodyWithTwoContentTypesResponse, error) {
	result := MediaTypesClientBinaryBodyWithTwoContentTypesResponse{RawResponse: resp}
	body, err := runtime.Payload(resp)
	if err != nil {
		return MediaTypesClientBinaryBodyWithTwoContentTypesResponse{}, err
	}
	txt := string(body)
	result.Value = &txt
	return result, nil
}

// ContentTypeWithEncoding - Pass in contentType 'text/plain; charset=UTF-8' to pass test. Value for input does not matter
// If the operation fails it returns an *azcore.ResponseError type.
// options - MediaTypesClientContentTypeWithEncodingOptions contains the optional parameters for the MediaTypesClient.ContentTypeWithEncoding
// method.
func (client *MediaTypesClient) ContentTypeWithEncoding(ctx context.Context, options *MediaTypesClientContentTypeWithEncodingOptions) (MediaTypesClientContentTypeWithEncodingResponse, error) {
	req, err := client.contentTypeWithEncodingCreateRequest(ctx, options)
	if err != nil {
		return MediaTypesClientContentTypeWithEncodingResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MediaTypesClientContentTypeWithEncodingResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return MediaTypesClientContentTypeWithEncodingResponse{}, runtime.NewResponseError(resp)
	}
	return client.contentTypeWithEncodingHandleResponse(resp)
}

// contentTypeWithEncodingCreateRequest creates the ContentTypeWithEncoding request.
func (client *MediaTypesClient) contentTypeWithEncodingCreateRequest(ctx context.Context, options *MediaTypesClientContentTypeWithEncodingOptions) (*policy.Request, error) {
	urlPath := "/mediatypes/contentTypeWithEncoding"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Input != nil {
		body := streaming.NopCloser(strings.NewReader(*options.Input))
		return req, req.SetBody(body, "text/plain; charset=UTF-8")
	}
	return req, nil
}

// contentTypeWithEncodingHandleResponse handles the ContentTypeWithEncoding response.
func (client *MediaTypesClient) contentTypeWithEncodingHandleResponse(resp *http.Response) (MediaTypesClientContentTypeWithEncodingResponse, error) {
	result := MediaTypesClientContentTypeWithEncodingResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return MediaTypesClientContentTypeWithEncodingResponse{}, err
	}
	return result, nil
}

// PutTextAndJSONBodyWithJSON - Body that's either text/plain or application/json
// If the operation fails it returns an *azcore.ResponseError type.
// message - The payload body.
// options - MediaTypesClientPutTextAndJSONBodyWithJSONOptions contains the optional parameters for the MediaTypesClient.PutTextAndJSONBodyWithJSON
// method.
func (client *MediaTypesClient) PutTextAndJSONBodyWithJSON(ctx context.Context, message string, options *MediaTypesClientPutTextAndJSONBodyWithJSONOptions) (MediaTypesClientPutTextAndJSONBodyWithJSONResponse, error) {
	req, err := client.putTextAndJSONBodyWithJSONCreateRequest(ctx, message, options)
	if err != nil {
		return MediaTypesClientPutTextAndJSONBodyWithJSONResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MediaTypesClientPutTextAndJSONBodyWithJSONResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return MediaTypesClientPutTextAndJSONBodyWithJSONResponse{}, runtime.NewResponseError(resp)
	}
	return client.putTextAndJSONBodyWithJSONHandleResponse(resp)
}

// putTextAndJSONBodyWithJSONCreateRequest creates the PutTextAndJSONBodyWithJSON request.
func (client *MediaTypesClient) putTextAndJSONBodyWithJSONCreateRequest(ctx context.Context, message string, options *MediaTypesClientPutTextAndJSONBodyWithJSONOptions) (*policy.Request, error) {
	urlPath := "/mediatypes/textAndJson"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "text/plain")
	return req, runtime.MarshalAsJSON(req, message)
}

// putTextAndJSONBodyWithJSONHandleResponse handles the PutTextAndJSONBodyWithJSON response.
func (client *MediaTypesClient) putTextAndJSONBodyWithJSONHandleResponse(resp *http.Response) (MediaTypesClientPutTextAndJSONBodyWithJSONResponse, error) {
	result := MediaTypesClientPutTextAndJSONBodyWithJSONResponse{RawResponse: resp}
	body, err := runtime.Payload(resp)
	if err != nil {
		return MediaTypesClientPutTextAndJSONBodyWithJSONResponse{}, err
	}
	txt := string(body)
	result.Value = &txt
	return result, nil
}

// PutTextAndJSONBodyWithText - Body that's either text/plain or application/json
// If the operation fails it returns an *azcore.ResponseError type.
// message - The payload body.
// options - MediaTypesClientPutTextAndJSONBodyWithTextOptions contains the optional parameters for the MediaTypesClient.PutTextAndJSONBodyWithText
// method.
func (client *MediaTypesClient) PutTextAndJSONBodyWithText(ctx context.Context, message string, options *MediaTypesClientPutTextAndJSONBodyWithTextOptions) (MediaTypesClientPutTextAndJSONBodyWithTextResponse, error) {
	req, err := client.putTextAndJSONBodyWithTextCreateRequest(ctx, message, options)
	if err != nil {
		return MediaTypesClientPutTextAndJSONBodyWithTextResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MediaTypesClientPutTextAndJSONBodyWithTextResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return MediaTypesClientPutTextAndJSONBodyWithTextResponse{}, runtime.NewResponseError(resp)
	}
	return client.putTextAndJSONBodyWithTextHandleResponse(resp)
}

// putTextAndJSONBodyWithTextCreateRequest creates the PutTextAndJSONBodyWithText request.
func (client *MediaTypesClient) putTextAndJSONBodyWithTextCreateRequest(ctx context.Context, message string, options *MediaTypesClientPutTextAndJSONBodyWithTextOptions) (*policy.Request, error) {
	urlPath := "/mediatypes/textAndJson"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "text/plain")
	body := streaming.NopCloser(strings.NewReader(message))
	return req, req.SetBody(body, "text/plain")
}

// putTextAndJSONBodyWithTextHandleResponse handles the PutTextAndJSONBodyWithText response.
func (client *MediaTypesClient) putTextAndJSONBodyWithTextHandleResponse(resp *http.Response) (MediaTypesClientPutTextAndJSONBodyWithTextResponse, error) {
	result := MediaTypesClientPutTextAndJSONBodyWithTextResponse{RawResponse: resp}
	body, err := runtime.Payload(resp)
	if err != nil {
		return MediaTypesClientPutTextAndJSONBodyWithTextResponse{}, err
	}
	txt := string(body)
	result.Value = &txt
	return result, nil
}
