//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package dategroup

// DateGetInvalidDateOptions contains the optional parameters for the DateClient.GetInvalidDate method.
type DateGetInvalidDateOptions struct {
	// placeholder for future optional parameters
}

// DateGetMaxDateOptions contains the optional parameters for the DateClient.GetMaxDate method.
type DateGetMaxDateOptions struct {
	// placeholder for future optional parameters
}

// DateGetMinDateOptions contains the optional parameters for the DateClient.GetMinDate method.
type DateGetMinDateOptions struct {
	// placeholder for future optional parameters
}

// DateGetNullOptions contains the optional parameters for the DateClient.GetNull method.
type DateGetNullOptions struct {
	// placeholder for future optional parameters
}

// DateGetOverflowDateOptions contains the optional parameters for the DateClient.GetOverflowDate method.
type DateGetOverflowDateOptions struct {
	// placeholder for future optional parameters
}

// DateGetUnderflowDateOptions contains the optional parameters for the DateClient.GetUnderflowDate method.
type DateGetUnderflowDateOptions struct {
	// placeholder for future optional parameters
}

// DatePutMaxDateOptions contains the optional parameters for the DateClient.PutMaxDate method.
type DatePutMaxDateOptions struct {
	// placeholder for future optional parameters
}

// DatePutMinDateOptions contains the optional parameters for the DateClient.PutMinDate method.
type DatePutMinDateOptions struct {
	// placeholder for future optional parameters
}

// Implements the error and azcore.HTTPResponse interfaces.
type Error struct {
	raw     string
	Message *string `json:"message,omitempty"`
	Status  *int32  `json:"status,omitempty"`
}

// Error implements the error interface for type Error.
// The contents of the error text are not contractual and subject to change.
func (e Error) Error() string {
	return e.raw
}
