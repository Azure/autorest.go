//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package stringgroup

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// StringClient contains the methods for the String group.
// Don't use this type directly, use NewStringClient() instead.
type StringClient struct {
	pl runtime.Pipeline
}

// NewStringClient creates a new instance of StringClient with the specified values.
// options - pass nil to accept the default values.
func NewStringClient(options *azcore.ClientOptions) *StringClient {
	cp := azcore.ClientOptions{}
	if options != nil {
		cp = *options
	}
	client := &StringClient{
		pl: runtime.NewPipeline(module, version, nil, nil, &cp),
	}
	return client
}

// GetBase64Encoded - Get value that is base64 encoded
// If the operation fails it returns the *Error error type.
// options - StringGetBase64EncodedOptions contains the optional parameters for the StringClient.GetBase64Encoded method.
func (client *StringClient) GetBase64Encoded(ctx context.Context, options *StringGetBase64EncodedOptions) (StringGetBase64EncodedResponse, error) {
	req, err := client.getBase64EncodedCreateRequest(ctx, options)
	if err != nil {
		return StringGetBase64EncodedResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return StringGetBase64EncodedResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return StringGetBase64EncodedResponse{}, client.getBase64EncodedHandleError(resp)
	}
	return client.getBase64EncodedHandleResponse(resp)
}

// getBase64EncodedCreateRequest creates the GetBase64Encoded request.
func (client *StringClient) getBase64EncodedCreateRequest(ctx context.Context, options *StringGetBase64EncodedOptions) (*policy.Request, error) {
	urlPath := "/string/base64Encoding"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getBase64EncodedHandleResponse handles the GetBase64Encoded response.
func (client *StringClient) getBase64EncodedHandleResponse(resp *http.Response) (StringGetBase64EncodedResponse, error) {
	result := StringGetBase64EncodedResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsByteArray(resp, &result.Value, runtime.Base64StdFormat); err != nil {
		return StringGetBase64EncodedResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getBase64EncodedHandleError handles the GetBase64Encoded error response.
func (client *StringClient) getBase64EncodedHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetBase64URLEncoded - Get value that is base64url encoded
// If the operation fails it returns the *Error error type.
// options - StringGetBase64URLEncodedOptions contains the optional parameters for the StringClient.GetBase64URLEncoded method.
func (client *StringClient) GetBase64URLEncoded(ctx context.Context, options *StringGetBase64URLEncodedOptions) (StringGetBase64URLEncodedResponse, error) {
	req, err := client.getBase64URLEncodedCreateRequest(ctx, options)
	if err != nil {
		return StringGetBase64URLEncodedResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return StringGetBase64URLEncodedResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return StringGetBase64URLEncodedResponse{}, client.getBase64URLEncodedHandleError(resp)
	}
	return client.getBase64URLEncodedHandleResponse(resp)
}

// getBase64URLEncodedCreateRequest creates the GetBase64URLEncoded request.
func (client *StringClient) getBase64URLEncodedCreateRequest(ctx context.Context, options *StringGetBase64URLEncodedOptions) (*policy.Request, error) {
	urlPath := "/string/base64UrlEncoding"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getBase64URLEncodedHandleResponse handles the GetBase64URLEncoded response.
func (client *StringClient) getBase64URLEncodedHandleResponse(resp *http.Response) (StringGetBase64URLEncodedResponse, error) {
	result := StringGetBase64URLEncodedResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsByteArray(resp, &result.Value, runtime.Base64URLFormat); err != nil {
		return StringGetBase64URLEncodedResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getBase64URLEncodedHandleError handles the GetBase64URLEncoded error response.
func (client *StringClient) getBase64URLEncodedHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetEmpty - Get empty string value value ''
// If the operation fails it returns the *Error error type.
// options - StringGetEmptyOptions contains the optional parameters for the StringClient.GetEmpty method.
func (client *StringClient) GetEmpty(ctx context.Context, options *StringGetEmptyOptions) (StringGetEmptyResponse, error) {
	req, err := client.getEmptyCreateRequest(ctx, options)
	if err != nil {
		return StringGetEmptyResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return StringGetEmptyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return StringGetEmptyResponse{}, client.getEmptyHandleError(resp)
	}
	return client.getEmptyHandleResponse(resp)
}

// getEmptyCreateRequest creates the GetEmpty request.
func (client *StringClient) getEmptyCreateRequest(ctx context.Context, options *StringGetEmptyOptions) (*policy.Request, error) {
	urlPath := "/string/empty"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getEmptyHandleResponse handles the GetEmpty response.
func (client *StringClient) getEmptyHandleResponse(resp *http.Response) (StringGetEmptyResponse, error) {
	result := StringGetEmptyResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return StringGetEmptyResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getEmptyHandleError handles the GetEmpty error response.
func (client *StringClient) getEmptyHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetMBCS - Get mbcs string value '啊齄丂狛狜隣郎隣兀﨩ˊ〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€'
// If the operation fails it returns the *Error error type.
// options - StringGetMBCSOptions contains the optional parameters for the StringClient.GetMBCS method.
func (client *StringClient) GetMBCS(ctx context.Context, options *StringGetMBCSOptions) (StringGetMBCSResponse, error) {
	req, err := client.getMBCSCreateRequest(ctx, options)
	if err != nil {
		return StringGetMBCSResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return StringGetMBCSResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return StringGetMBCSResponse{}, client.getMBCSHandleError(resp)
	}
	return client.getMBCSHandleResponse(resp)
}

// getMBCSCreateRequest creates the GetMBCS request.
func (client *StringClient) getMBCSCreateRequest(ctx context.Context, options *StringGetMBCSOptions) (*policy.Request, error) {
	urlPath := "/string/mbcs"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getMBCSHandleResponse handles the GetMBCS response.
func (client *StringClient) getMBCSHandleResponse(resp *http.Response) (StringGetMBCSResponse, error) {
	result := StringGetMBCSResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return StringGetMBCSResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getMBCSHandleError handles the GetMBCS error response.
func (client *StringClient) getMBCSHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetNotProvided - Get String value when no string value is sent in response payload
// If the operation fails it returns the *Error error type.
// options - StringGetNotProvidedOptions contains the optional parameters for the StringClient.GetNotProvided method.
func (client *StringClient) GetNotProvided(ctx context.Context, options *StringGetNotProvidedOptions) (StringGetNotProvidedResponse, error) {
	req, err := client.getNotProvidedCreateRequest(ctx, options)
	if err != nil {
		return StringGetNotProvidedResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return StringGetNotProvidedResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return StringGetNotProvidedResponse{}, client.getNotProvidedHandleError(resp)
	}
	return client.getNotProvidedHandleResponse(resp)
}

// getNotProvidedCreateRequest creates the GetNotProvided request.
func (client *StringClient) getNotProvidedCreateRequest(ctx context.Context, options *StringGetNotProvidedOptions) (*policy.Request, error) {
	urlPath := "/string/notProvided"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getNotProvidedHandleResponse handles the GetNotProvided response.
func (client *StringClient) getNotProvidedHandleResponse(resp *http.Response) (StringGetNotProvidedResponse, error) {
	result := StringGetNotProvidedResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return StringGetNotProvidedResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getNotProvidedHandleError handles the GetNotProvided error response.
func (client *StringClient) getNotProvidedHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetNull - Get null string value value
// If the operation fails it returns the *Error error type.
// options - StringGetNullOptions contains the optional parameters for the StringClient.GetNull method.
func (client *StringClient) GetNull(ctx context.Context, options *StringGetNullOptions) (StringGetNullResponse, error) {
	req, err := client.getNullCreateRequest(ctx, options)
	if err != nil {
		return StringGetNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return StringGetNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return StringGetNullResponse{}, client.getNullHandleError(resp)
	}
	return client.getNullHandleResponse(resp)
}

// getNullCreateRequest creates the GetNull request.
func (client *StringClient) getNullCreateRequest(ctx context.Context, options *StringGetNullOptions) (*policy.Request, error) {
	urlPath := "/string/null"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getNullHandleResponse handles the GetNull response.
func (client *StringClient) getNullHandleResponse(resp *http.Response) (StringGetNullResponse, error) {
	result := StringGetNullResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return StringGetNullResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getNullHandleError handles the GetNull error response.
func (client *StringClient) getNullHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetNullBase64URLEncoded - Get null value that is expected to be base64url encoded
// If the operation fails it returns the *Error error type.
// options - StringGetNullBase64URLEncodedOptions contains the optional parameters for the StringClient.GetNullBase64URLEncoded
// method.
func (client *StringClient) GetNullBase64URLEncoded(ctx context.Context, options *StringGetNullBase64URLEncodedOptions) (StringGetNullBase64URLEncodedResponse, error) {
	req, err := client.getNullBase64URLEncodedCreateRequest(ctx, options)
	if err != nil {
		return StringGetNullBase64URLEncodedResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return StringGetNullBase64URLEncodedResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return StringGetNullBase64URLEncodedResponse{}, client.getNullBase64URLEncodedHandleError(resp)
	}
	return client.getNullBase64URLEncodedHandleResponse(resp)
}

// getNullBase64URLEncodedCreateRequest creates the GetNullBase64URLEncoded request.
func (client *StringClient) getNullBase64URLEncodedCreateRequest(ctx context.Context, options *StringGetNullBase64URLEncodedOptions) (*policy.Request, error) {
	urlPath := "/string/nullBase64UrlEncoding"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getNullBase64URLEncodedHandleResponse handles the GetNullBase64URLEncoded response.
func (client *StringClient) getNullBase64URLEncodedHandleResponse(resp *http.Response) (StringGetNullBase64URLEncodedResponse, error) {
	result := StringGetNullBase64URLEncodedResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsByteArray(resp, &result.Value, runtime.Base64URLFormat); err != nil {
		return StringGetNullBase64URLEncodedResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getNullBase64URLEncodedHandleError handles the GetNullBase64URLEncoded error response.
func (client *StringClient) getNullBase64URLEncodedHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetWhitespace - Get string value with leading and trailing whitespace 'Now is the time for all good men to come to the
// aid of their country'
// If the operation fails it returns the *Error error type.
// options - StringGetWhitespaceOptions contains the optional parameters for the StringClient.GetWhitespace method.
func (client *StringClient) GetWhitespace(ctx context.Context, options *StringGetWhitespaceOptions) (StringGetWhitespaceResponse, error) {
	req, err := client.getWhitespaceCreateRequest(ctx, options)
	if err != nil {
		return StringGetWhitespaceResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return StringGetWhitespaceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return StringGetWhitespaceResponse{}, client.getWhitespaceHandleError(resp)
	}
	return client.getWhitespaceHandleResponse(resp)
}

// getWhitespaceCreateRequest creates the GetWhitespace request.
func (client *StringClient) getWhitespaceCreateRequest(ctx context.Context, options *StringGetWhitespaceOptions) (*policy.Request, error) {
	urlPath := "/string/whitespace"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getWhitespaceHandleResponse handles the GetWhitespace response.
func (client *StringClient) getWhitespaceHandleResponse(resp *http.Response) (StringGetWhitespaceResponse, error) {
	result := StringGetWhitespaceResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return StringGetWhitespaceResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getWhitespaceHandleError handles the GetWhitespace error response.
func (client *StringClient) getWhitespaceHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutBase64URLEncoded - Put value that is base64url encoded
// If the operation fails it returns the *Error error type.
// stringBody - string body
// options - StringPutBase64URLEncodedOptions contains the optional parameters for the StringClient.PutBase64URLEncoded method.
func (client *StringClient) PutBase64URLEncoded(ctx context.Context, stringBody []byte, options *StringPutBase64URLEncodedOptions) (StringPutBase64URLEncodedResponse, error) {
	req, err := client.putBase64URLEncodedCreateRequest(ctx, stringBody, options)
	if err != nil {
		return StringPutBase64URLEncodedResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return StringPutBase64URLEncodedResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return StringPutBase64URLEncodedResponse{}, client.putBase64URLEncodedHandleError(resp)
	}
	return StringPutBase64URLEncodedResponse{RawResponse: resp}, nil
}

// putBase64URLEncodedCreateRequest creates the PutBase64URLEncoded request.
func (client *StringClient) putBase64URLEncodedCreateRequest(ctx context.Context, stringBody []byte, options *StringPutBase64URLEncodedOptions) (*policy.Request, error) {
	urlPath := "/string/base64UrlEncoding"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsByteArray(req, stringBody, runtime.Base64URLFormat)
}

// putBase64URLEncodedHandleError handles the PutBase64URLEncoded error response.
func (client *StringClient) putBase64URLEncodedHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutEmpty - Set string value empty ''
// If the operation fails it returns the *Error error type.
// options - StringPutEmptyOptions contains the optional parameters for the StringClient.PutEmpty method.
func (client *StringClient) PutEmpty(ctx context.Context, options *StringPutEmptyOptions) (StringPutEmptyResponse, error) {
	req, err := client.putEmptyCreateRequest(ctx, options)
	if err != nil {
		return StringPutEmptyResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return StringPutEmptyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return StringPutEmptyResponse{}, client.putEmptyHandleError(resp)
	}
	return StringPutEmptyResponse{RawResponse: resp}, nil
}

// putEmptyCreateRequest creates the PutEmpty request.
func (client *StringClient) putEmptyCreateRequest(ctx context.Context, options *StringPutEmptyOptions) (*policy.Request, error) {
	urlPath := "/string/empty"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, "")
}

// putEmptyHandleError handles the PutEmpty error response.
func (client *StringClient) putEmptyHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutMBCS - Set string value mbcs '啊齄丂狛狜隣郎隣兀﨩ˊ〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€'
// If the operation fails it returns the *Error error type.
// options - StringPutMBCSOptions contains the optional parameters for the StringClient.PutMBCS method.
func (client *StringClient) PutMBCS(ctx context.Context, options *StringPutMBCSOptions) (StringPutMBCSResponse, error) {
	req, err := client.putMBCSCreateRequest(ctx, options)
	if err != nil {
		return StringPutMBCSResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return StringPutMBCSResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return StringPutMBCSResponse{}, client.putMBCSHandleError(resp)
	}
	return StringPutMBCSResponse{RawResponse: resp}, nil
}

// putMBCSCreateRequest creates the PutMBCS request.
func (client *StringClient) putMBCSCreateRequest(ctx context.Context, options *StringPutMBCSOptions) (*policy.Request, error) {
	urlPath := "/string/mbcs"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, "啊齄丂狛狜隣郎隣兀﨩ˊ〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€")
}

// putMBCSHandleError handles the PutMBCS error response.
func (client *StringClient) putMBCSHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutNull - Set string value null
// If the operation fails it returns the *Error error type.
// options - StringPutNullOptions contains the optional parameters for the StringClient.PutNull method.
func (client *StringClient) PutNull(ctx context.Context, options *StringPutNullOptions) (StringPutNullResponse, error) {
	req, err := client.putNullCreateRequest(ctx, options)
	if err != nil {
		return StringPutNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return StringPutNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return StringPutNullResponse{}, client.putNullHandleError(resp)
	}
	return StringPutNullResponse{RawResponse: resp}, nil
}

// putNullCreateRequest creates the PutNull request.
func (client *StringClient) putNullCreateRequest(ctx context.Context, options *StringPutNullOptions) (*policy.Request, error) {
	urlPath := "/string/null"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.StringBody != nil {
		return req, runtime.MarshalAsJSON(req, *options.StringBody)
	}
	return req, nil
}

// putNullHandleError handles the PutNull error response.
func (client *StringClient) putNullHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutWhitespace - Set String value with leading and trailing whitespace 'Now is the time for all good men to come to the
// aid of their country'
// If the operation fails it returns the *Error error type.
// options - StringPutWhitespaceOptions contains the optional parameters for the StringClient.PutWhitespace method.
func (client *StringClient) PutWhitespace(ctx context.Context, options *StringPutWhitespaceOptions) (StringPutWhitespaceResponse, error) {
	req, err := client.putWhitespaceCreateRequest(ctx, options)
	if err != nil {
		return StringPutWhitespaceResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return StringPutWhitespaceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return StringPutWhitespaceResponse{}, client.putWhitespaceHandleError(resp)
	}
	return StringPutWhitespaceResponse{RawResponse: resp}, nil
}

// putWhitespaceCreateRequest creates the PutWhitespace request.
func (client *StringClient) putWhitespaceCreateRequest(ctx context.Context, options *StringPutWhitespaceOptions) (*policy.Request, error) {
	urlPath := "/string/whitespace"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, "    Now is the time for all good men to come to the aid of their country    ")
}

// putWhitespaceHandleError handles the PutWhitespace error response.
func (client *StringClient) putWhitespaceHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
