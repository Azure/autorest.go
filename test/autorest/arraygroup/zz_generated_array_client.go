//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package arraygroup

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"time"
)

// ArrayClient contains the methods for the Array group.
// Don't use this type directly, use NewArrayClient() instead.
type ArrayClient struct {
	pl runtime.Pipeline
}

// NewArrayClient creates a new instance of ArrayClient with the specified values.
// options - pass nil to accept the default values.
func NewArrayClient(options *azcore.ClientOptions) *ArrayClient {
	cp := azcore.ClientOptions{}
	if options != nil {
		cp = *options
	}
	client := &ArrayClient{
		pl: runtime.NewPipeline(module, version, nil, nil, &cp),
	}
	return client
}

// GetArrayEmpty - Get an empty array []
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetArrayEmptyOptions contains the optional parameters for the ArrayClient.GetArrayEmpty method.
func (client *ArrayClient) GetArrayEmpty(ctx context.Context, options *ArrayClientGetArrayEmptyOptions) (ArrayClientGetArrayEmptyResponse, error) {
	req, err := client.getArrayEmptyCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetArrayEmptyResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetArrayEmptyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetArrayEmptyResponse{}, client.getArrayEmptyHandleError(resp)
	}
	return client.getArrayEmptyHandleResponse(resp)
}

// getArrayEmptyCreateRequest creates the GetArrayEmpty request.
func (client *ArrayClient) getArrayEmptyCreateRequest(ctx context.Context, options *ArrayClientGetArrayEmptyOptions) (*policy.Request, error) {
	urlPath := "/array/array/empty"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getArrayEmptyHandleResponse handles the GetArrayEmpty response.
func (client *ArrayClient) getArrayEmptyHandleResponse(resp *http.Response) (ArrayClientGetArrayEmptyResponse, error) {
	result := ArrayClientGetArrayEmptyResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.StringArrayArray); err != nil {
		return ArrayClientGetArrayEmptyResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getArrayEmptyHandleError handles the GetArrayEmpty error response.
func (client *ArrayClient) getArrayEmptyHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetArrayItemEmpty - Get an array of array of strings [['1', '2', '3'], [], ['7', '8', '9']]
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetArrayItemEmptyOptions contains the optional parameters for the ArrayClient.GetArrayItemEmpty method.
func (client *ArrayClient) GetArrayItemEmpty(ctx context.Context, options *ArrayClientGetArrayItemEmptyOptions) (ArrayClientGetArrayItemEmptyResponse, error) {
	req, err := client.getArrayItemEmptyCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetArrayItemEmptyResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetArrayItemEmptyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetArrayItemEmptyResponse{}, client.getArrayItemEmptyHandleError(resp)
	}
	return client.getArrayItemEmptyHandleResponse(resp)
}

// getArrayItemEmptyCreateRequest creates the GetArrayItemEmpty request.
func (client *ArrayClient) getArrayItemEmptyCreateRequest(ctx context.Context, options *ArrayClientGetArrayItemEmptyOptions) (*policy.Request, error) {
	urlPath := "/array/array/itemempty"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getArrayItemEmptyHandleResponse handles the GetArrayItemEmpty response.
func (client *ArrayClient) getArrayItemEmptyHandleResponse(resp *http.Response) (ArrayClientGetArrayItemEmptyResponse, error) {
	result := ArrayClientGetArrayItemEmptyResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.StringArrayArray); err != nil {
		return ArrayClientGetArrayItemEmptyResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getArrayItemEmptyHandleError handles the GetArrayItemEmpty error response.
func (client *ArrayClient) getArrayItemEmptyHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetArrayItemNull - Get an array of array of strings [['1', '2', '3'], null, ['7', '8', '9']]
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetArrayItemNullOptions contains the optional parameters for the ArrayClient.GetArrayItemNull method.
func (client *ArrayClient) GetArrayItemNull(ctx context.Context, options *ArrayClientGetArrayItemNullOptions) (ArrayClientGetArrayItemNullResponse, error) {
	req, err := client.getArrayItemNullCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetArrayItemNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetArrayItemNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetArrayItemNullResponse{}, client.getArrayItemNullHandleError(resp)
	}
	return client.getArrayItemNullHandleResponse(resp)
}

// getArrayItemNullCreateRequest creates the GetArrayItemNull request.
func (client *ArrayClient) getArrayItemNullCreateRequest(ctx context.Context, options *ArrayClientGetArrayItemNullOptions) (*policy.Request, error) {
	urlPath := "/array/array/itemnull"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getArrayItemNullHandleResponse handles the GetArrayItemNull response.
func (client *ArrayClient) getArrayItemNullHandleResponse(resp *http.Response) (ArrayClientGetArrayItemNullResponse, error) {
	result := ArrayClientGetArrayItemNullResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.StringArrayArray); err != nil {
		return ArrayClientGetArrayItemNullResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getArrayItemNullHandleError handles the GetArrayItemNull error response.
func (client *ArrayClient) getArrayItemNullHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetArrayNull - Get a null array
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetArrayNullOptions contains the optional parameters for the ArrayClient.GetArrayNull method.
func (client *ArrayClient) GetArrayNull(ctx context.Context, options *ArrayClientGetArrayNullOptions) (ArrayClientGetArrayNullResponse, error) {
	req, err := client.getArrayNullCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetArrayNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetArrayNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetArrayNullResponse{}, client.getArrayNullHandleError(resp)
	}
	return client.getArrayNullHandleResponse(resp)
}

// getArrayNullCreateRequest creates the GetArrayNull request.
func (client *ArrayClient) getArrayNullCreateRequest(ctx context.Context, options *ArrayClientGetArrayNullOptions) (*policy.Request, error) {
	urlPath := "/array/array/null"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getArrayNullHandleResponse handles the GetArrayNull response.
func (client *ArrayClient) getArrayNullHandleResponse(resp *http.Response) (ArrayClientGetArrayNullResponse, error) {
	result := ArrayClientGetArrayNullResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.StringArrayArray); err != nil {
		return ArrayClientGetArrayNullResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getArrayNullHandleError handles the GetArrayNull error response.
func (client *ArrayClient) getArrayNullHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetArrayValid - Get an array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetArrayValidOptions contains the optional parameters for the ArrayClient.GetArrayValid method.
func (client *ArrayClient) GetArrayValid(ctx context.Context, options *ArrayClientGetArrayValidOptions) (ArrayClientGetArrayValidResponse, error) {
	req, err := client.getArrayValidCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetArrayValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetArrayValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetArrayValidResponse{}, client.getArrayValidHandleError(resp)
	}
	return client.getArrayValidHandleResponse(resp)
}

// getArrayValidCreateRequest creates the GetArrayValid request.
func (client *ArrayClient) getArrayValidCreateRequest(ctx context.Context, options *ArrayClientGetArrayValidOptions) (*policy.Request, error) {
	urlPath := "/array/array/valid"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getArrayValidHandleResponse handles the GetArrayValid response.
func (client *ArrayClient) getArrayValidHandleResponse(resp *http.Response) (ArrayClientGetArrayValidResponse, error) {
	result := ArrayClientGetArrayValidResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.StringArrayArray); err != nil {
		return ArrayClientGetArrayValidResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getArrayValidHandleError handles the GetArrayValid error response.
func (client *ArrayClient) getArrayValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetBase64URL - Get array value ['a string that gets encoded with base64url', 'test string' 'Lorem ipsum'] with the items
// base64url encoded
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetBase64URLOptions contains the optional parameters for the ArrayClient.GetBase64URL method.
func (client *ArrayClient) GetBase64URL(ctx context.Context, options *ArrayClientGetBase64URLOptions) (ArrayClientGetBase64URLResponse, error) {
	req, err := client.getBase64URLCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetBase64URLResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetBase64URLResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetBase64URLResponse{}, client.getBase64URLHandleError(resp)
	}
	return client.getBase64URLHandleResponse(resp)
}

// getBase64URLCreateRequest creates the GetBase64URL request.
func (client *ArrayClient) getBase64URLCreateRequest(ctx context.Context, options *ArrayClientGetBase64URLOptions) (*policy.Request, error) {
	urlPath := "/array/prim/base64url/valid"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getBase64URLHandleResponse handles the GetBase64URL response.
func (client *ArrayClient) getBase64URLHandleResponse(resp *http.Response) (ArrayClientGetBase64URLResponse, error) {
	result := ArrayClientGetBase64URLResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ByteArrayArray); err != nil {
		return ArrayClientGetBase64URLResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getBase64URLHandleError handles the GetBase64URL error response.
func (client *ArrayClient) getBase64URLHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetBooleanInvalidNull - Get boolean array value [true, null, false]
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetBooleanInvalidNullOptions contains the optional parameters for the ArrayClient.GetBooleanInvalidNull
// method.
func (client *ArrayClient) GetBooleanInvalidNull(ctx context.Context, options *ArrayClientGetBooleanInvalidNullOptions) (ArrayClientGetBooleanInvalidNullResponse, error) {
	req, err := client.getBooleanInvalidNullCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetBooleanInvalidNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetBooleanInvalidNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetBooleanInvalidNullResponse{}, client.getBooleanInvalidNullHandleError(resp)
	}
	return client.getBooleanInvalidNullHandleResponse(resp)
}

// getBooleanInvalidNullCreateRequest creates the GetBooleanInvalidNull request.
func (client *ArrayClient) getBooleanInvalidNullCreateRequest(ctx context.Context, options *ArrayClientGetBooleanInvalidNullOptions) (*policy.Request, error) {
	urlPath := "/array/prim/boolean/true.null.false"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getBooleanInvalidNullHandleResponse handles the GetBooleanInvalidNull response.
func (client *ArrayClient) getBooleanInvalidNullHandleResponse(resp *http.Response) (ArrayClientGetBooleanInvalidNullResponse, error) {
	result := ArrayClientGetBooleanInvalidNullResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.BoolArray); err != nil {
		return ArrayClientGetBooleanInvalidNullResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getBooleanInvalidNullHandleError handles the GetBooleanInvalidNull error response.
func (client *ArrayClient) getBooleanInvalidNullHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetBooleanInvalidString - Get boolean array value [true, 'boolean', false]
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetBooleanInvalidStringOptions contains the optional parameters for the ArrayClient.GetBooleanInvalidString
// method.
func (client *ArrayClient) GetBooleanInvalidString(ctx context.Context, options *ArrayClientGetBooleanInvalidStringOptions) (ArrayClientGetBooleanInvalidStringResponse, error) {
	req, err := client.getBooleanInvalidStringCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetBooleanInvalidStringResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetBooleanInvalidStringResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetBooleanInvalidStringResponse{}, client.getBooleanInvalidStringHandleError(resp)
	}
	return client.getBooleanInvalidStringHandleResponse(resp)
}

// getBooleanInvalidStringCreateRequest creates the GetBooleanInvalidString request.
func (client *ArrayClient) getBooleanInvalidStringCreateRequest(ctx context.Context, options *ArrayClientGetBooleanInvalidStringOptions) (*policy.Request, error) {
	urlPath := "/array/prim/boolean/true.boolean.false"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getBooleanInvalidStringHandleResponse handles the GetBooleanInvalidString response.
func (client *ArrayClient) getBooleanInvalidStringHandleResponse(resp *http.Response) (ArrayClientGetBooleanInvalidStringResponse, error) {
	result := ArrayClientGetBooleanInvalidStringResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.BoolArray); err != nil {
		return ArrayClientGetBooleanInvalidStringResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getBooleanInvalidStringHandleError handles the GetBooleanInvalidString error response.
func (client *ArrayClient) getBooleanInvalidStringHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetBooleanTfft - Get boolean array value [true, false, false, true]
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetBooleanTfftOptions contains the optional parameters for the ArrayClient.GetBooleanTfft method.
func (client *ArrayClient) GetBooleanTfft(ctx context.Context, options *ArrayClientGetBooleanTfftOptions) (ArrayClientGetBooleanTfftResponse, error) {
	req, err := client.getBooleanTfftCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetBooleanTfftResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetBooleanTfftResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetBooleanTfftResponse{}, client.getBooleanTfftHandleError(resp)
	}
	return client.getBooleanTfftHandleResponse(resp)
}

// getBooleanTfftCreateRequest creates the GetBooleanTfft request.
func (client *ArrayClient) getBooleanTfftCreateRequest(ctx context.Context, options *ArrayClientGetBooleanTfftOptions) (*policy.Request, error) {
	urlPath := "/array/prim/boolean/tfft"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getBooleanTfftHandleResponse handles the GetBooleanTfft response.
func (client *ArrayClient) getBooleanTfftHandleResponse(resp *http.Response) (ArrayClientGetBooleanTfftResponse, error) {
	result := ArrayClientGetBooleanTfftResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.BoolArray); err != nil {
		return ArrayClientGetBooleanTfftResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getBooleanTfftHandleError handles the GetBooleanTfft error response.
func (client *ArrayClient) getBooleanTfftHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetByteInvalidNull - Get byte array value [hex(AB, AC, AD), null] with the first item base64 encoded
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetByteInvalidNullOptions contains the optional parameters for the ArrayClient.GetByteInvalidNull
// method.
func (client *ArrayClient) GetByteInvalidNull(ctx context.Context, options *ArrayClientGetByteInvalidNullOptions) (ArrayClientGetByteInvalidNullResponse, error) {
	req, err := client.getByteInvalidNullCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetByteInvalidNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetByteInvalidNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetByteInvalidNullResponse{}, client.getByteInvalidNullHandleError(resp)
	}
	return client.getByteInvalidNullHandleResponse(resp)
}

// getByteInvalidNullCreateRequest creates the GetByteInvalidNull request.
func (client *ArrayClient) getByteInvalidNullCreateRequest(ctx context.Context, options *ArrayClientGetByteInvalidNullOptions) (*policy.Request, error) {
	urlPath := "/array/prim/byte/invalidnull"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getByteInvalidNullHandleResponse handles the GetByteInvalidNull response.
func (client *ArrayClient) getByteInvalidNullHandleResponse(resp *http.Response) (ArrayClientGetByteInvalidNullResponse, error) {
	result := ArrayClientGetByteInvalidNullResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ByteArrayArray); err != nil {
		return ArrayClientGetByteInvalidNullResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getByteInvalidNullHandleError handles the GetByteInvalidNull error response.
func (client *ArrayClient) getByteInvalidNullHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetByteValid - Get byte array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each item encoded in base64
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetByteValidOptions contains the optional parameters for the ArrayClient.GetByteValid method.
func (client *ArrayClient) GetByteValid(ctx context.Context, options *ArrayClientGetByteValidOptions) (ArrayClientGetByteValidResponse, error) {
	req, err := client.getByteValidCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetByteValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetByteValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetByteValidResponse{}, client.getByteValidHandleError(resp)
	}
	return client.getByteValidHandleResponse(resp)
}

// getByteValidCreateRequest creates the GetByteValid request.
func (client *ArrayClient) getByteValidCreateRequest(ctx context.Context, options *ArrayClientGetByteValidOptions) (*policy.Request, error) {
	urlPath := "/array/prim/byte/valid"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getByteValidHandleResponse handles the GetByteValid response.
func (client *ArrayClient) getByteValidHandleResponse(resp *http.Response) (ArrayClientGetByteValidResponse, error) {
	result := ArrayClientGetByteValidResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ByteArrayArray); err != nil {
		return ArrayClientGetByteValidResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getByteValidHandleError handles the GetByteValid error response.
func (client *ArrayClient) getByteValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetComplexEmpty - Get empty array of complex type []
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetComplexEmptyOptions contains the optional parameters for the ArrayClient.GetComplexEmpty method.
func (client *ArrayClient) GetComplexEmpty(ctx context.Context, options *ArrayClientGetComplexEmptyOptions) (ArrayClientGetComplexEmptyResponse, error) {
	req, err := client.getComplexEmptyCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetComplexEmptyResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetComplexEmptyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetComplexEmptyResponse{}, client.getComplexEmptyHandleError(resp)
	}
	return client.getComplexEmptyHandleResponse(resp)
}

// getComplexEmptyCreateRequest creates the GetComplexEmpty request.
func (client *ArrayClient) getComplexEmptyCreateRequest(ctx context.Context, options *ArrayClientGetComplexEmptyOptions) (*policy.Request, error) {
	urlPath := "/array/complex/empty"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getComplexEmptyHandleResponse handles the GetComplexEmpty response.
func (client *ArrayClient) getComplexEmptyHandleResponse(resp *http.Response) (ArrayClientGetComplexEmptyResponse, error) {
	result := ArrayClientGetComplexEmptyResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductArray); err != nil {
		return ArrayClientGetComplexEmptyResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getComplexEmptyHandleError handles the GetComplexEmpty error response.
func (client *ArrayClient) getComplexEmptyHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetComplexItemEmpty - Get array of complex type with empty item [{'integer': 1 'string': '2'}, {}, {'integer': 5, 'string':
// '6'}]
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetComplexItemEmptyOptions contains the optional parameters for the ArrayClient.GetComplexItemEmpty
// method.
func (client *ArrayClient) GetComplexItemEmpty(ctx context.Context, options *ArrayClientGetComplexItemEmptyOptions) (ArrayClientGetComplexItemEmptyResponse, error) {
	req, err := client.getComplexItemEmptyCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetComplexItemEmptyResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetComplexItemEmptyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetComplexItemEmptyResponse{}, client.getComplexItemEmptyHandleError(resp)
	}
	return client.getComplexItemEmptyHandleResponse(resp)
}

// getComplexItemEmptyCreateRequest creates the GetComplexItemEmpty request.
func (client *ArrayClient) getComplexItemEmptyCreateRequest(ctx context.Context, options *ArrayClientGetComplexItemEmptyOptions) (*policy.Request, error) {
	urlPath := "/array/complex/itemempty"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getComplexItemEmptyHandleResponse handles the GetComplexItemEmpty response.
func (client *ArrayClient) getComplexItemEmptyHandleResponse(resp *http.Response) (ArrayClientGetComplexItemEmptyResponse, error) {
	result := ArrayClientGetComplexItemEmptyResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductArray); err != nil {
		return ArrayClientGetComplexItemEmptyResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getComplexItemEmptyHandleError handles the GetComplexItemEmpty error response.
func (client *ArrayClient) getComplexItemEmptyHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetComplexItemNull - Get array of complex type with null item [{'integer': 1 'string': '2'}, null, {'integer': 5, 'string':
// '6'}]
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetComplexItemNullOptions contains the optional parameters for the ArrayClient.GetComplexItemNull
// method.
func (client *ArrayClient) GetComplexItemNull(ctx context.Context, options *ArrayClientGetComplexItemNullOptions) (ArrayClientGetComplexItemNullResponse, error) {
	req, err := client.getComplexItemNullCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetComplexItemNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetComplexItemNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetComplexItemNullResponse{}, client.getComplexItemNullHandleError(resp)
	}
	return client.getComplexItemNullHandleResponse(resp)
}

// getComplexItemNullCreateRequest creates the GetComplexItemNull request.
func (client *ArrayClient) getComplexItemNullCreateRequest(ctx context.Context, options *ArrayClientGetComplexItemNullOptions) (*policy.Request, error) {
	urlPath := "/array/complex/itemnull"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getComplexItemNullHandleResponse handles the GetComplexItemNull response.
func (client *ArrayClient) getComplexItemNullHandleResponse(resp *http.Response) (ArrayClientGetComplexItemNullResponse, error) {
	result := ArrayClientGetComplexItemNullResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductArray); err != nil {
		return ArrayClientGetComplexItemNullResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getComplexItemNullHandleError handles the GetComplexItemNull error response.
func (client *ArrayClient) getComplexItemNullHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetComplexNull - Get array of complex type null value
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetComplexNullOptions contains the optional parameters for the ArrayClient.GetComplexNull method.
func (client *ArrayClient) GetComplexNull(ctx context.Context, options *ArrayClientGetComplexNullOptions) (ArrayClientGetComplexNullResponse, error) {
	req, err := client.getComplexNullCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetComplexNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetComplexNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetComplexNullResponse{}, client.getComplexNullHandleError(resp)
	}
	return client.getComplexNullHandleResponse(resp)
}

// getComplexNullCreateRequest creates the GetComplexNull request.
func (client *ArrayClient) getComplexNullCreateRequest(ctx context.Context, options *ArrayClientGetComplexNullOptions) (*policy.Request, error) {
	urlPath := "/array/complex/null"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getComplexNullHandleResponse handles the GetComplexNull response.
func (client *ArrayClient) getComplexNullHandleResponse(resp *http.Response) (ArrayClientGetComplexNullResponse, error) {
	result := ArrayClientGetComplexNullResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductArray); err != nil {
		return ArrayClientGetComplexNullResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getComplexNullHandleError handles the GetComplexNull error response.
func (client *ArrayClient) getComplexNullHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetComplexValid - Get array of complex type with [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer':
// 5, 'string': '6'}]
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetComplexValidOptions contains the optional parameters for the ArrayClient.GetComplexValid method.
func (client *ArrayClient) GetComplexValid(ctx context.Context, options *ArrayClientGetComplexValidOptions) (ArrayClientGetComplexValidResponse, error) {
	req, err := client.getComplexValidCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetComplexValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetComplexValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetComplexValidResponse{}, client.getComplexValidHandleError(resp)
	}
	return client.getComplexValidHandleResponse(resp)
}

// getComplexValidCreateRequest creates the GetComplexValid request.
func (client *ArrayClient) getComplexValidCreateRequest(ctx context.Context, options *ArrayClientGetComplexValidOptions) (*policy.Request, error) {
	urlPath := "/array/complex/valid"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getComplexValidHandleResponse handles the GetComplexValid response.
func (client *ArrayClient) getComplexValidHandleResponse(resp *http.Response) (ArrayClientGetComplexValidResponse, error) {
	result := ArrayClientGetComplexValidResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductArray); err != nil {
		return ArrayClientGetComplexValidResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getComplexValidHandleError handles the GetComplexValid error response.
func (client *ArrayClient) getComplexValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDateInvalidChars - Get date array value ['2011-03-22', 'date']
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetDateInvalidCharsOptions contains the optional parameters for the ArrayClient.GetDateInvalidChars
// method.
func (client *ArrayClient) GetDateInvalidChars(ctx context.Context, options *ArrayClientGetDateInvalidCharsOptions) (ArrayClientGetDateInvalidCharsResponse, error) {
	req, err := client.getDateInvalidCharsCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetDateInvalidCharsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetDateInvalidCharsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetDateInvalidCharsResponse{}, client.getDateInvalidCharsHandleError(resp)
	}
	return client.getDateInvalidCharsHandleResponse(resp)
}

// getDateInvalidCharsCreateRequest creates the GetDateInvalidChars request.
func (client *ArrayClient) getDateInvalidCharsCreateRequest(ctx context.Context, options *ArrayClientGetDateInvalidCharsOptions) (*policy.Request, error) {
	urlPath := "/array/prim/date/invalidchars"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDateInvalidCharsHandleResponse handles the GetDateInvalidChars response.
func (client *ArrayClient) getDateInvalidCharsHandleResponse(resp *http.Response) (ArrayClientGetDateInvalidCharsResponse, error) {
	result := ArrayClientGetDateInvalidCharsResponse{RawResponse: resp}
	var aux []*dateType
	if err := runtime.UnmarshalAsJSON(resp, &aux); err != nil {
		return ArrayClientGetDateInvalidCharsResponse{}, runtime.NewResponseError(err, resp)
	}
	cp := make([]*time.Time, len(aux), len(aux))
	for i := 0; i < len(aux); i++ {
		cp[i] = (*time.Time)(aux[i])
	}
	result.TimeArray = cp
	return result, nil
}

// getDateInvalidCharsHandleError handles the GetDateInvalidChars error response.
func (client *ArrayClient) getDateInvalidCharsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDateInvalidNull - Get date array value ['2012-01-01', null, '1776-07-04']
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetDateInvalidNullOptions contains the optional parameters for the ArrayClient.GetDateInvalidNull
// method.
func (client *ArrayClient) GetDateInvalidNull(ctx context.Context, options *ArrayClientGetDateInvalidNullOptions) (ArrayClientGetDateInvalidNullResponse, error) {
	req, err := client.getDateInvalidNullCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetDateInvalidNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetDateInvalidNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetDateInvalidNullResponse{}, client.getDateInvalidNullHandleError(resp)
	}
	return client.getDateInvalidNullHandleResponse(resp)
}

// getDateInvalidNullCreateRequest creates the GetDateInvalidNull request.
func (client *ArrayClient) getDateInvalidNullCreateRequest(ctx context.Context, options *ArrayClientGetDateInvalidNullOptions) (*policy.Request, error) {
	urlPath := "/array/prim/date/invalidnull"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDateInvalidNullHandleResponse handles the GetDateInvalidNull response.
func (client *ArrayClient) getDateInvalidNullHandleResponse(resp *http.Response) (ArrayClientGetDateInvalidNullResponse, error) {
	result := ArrayClientGetDateInvalidNullResponse{RawResponse: resp}
	var aux []*dateType
	if err := runtime.UnmarshalAsJSON(resp, &aux); err != nil {
		return ArrayClientGetDateInvalidNullResponse{}, runtime.NewResponseError(err, resp)
	}
	cp := make([]*time.Time, len(aux), len(aux))
	for i := 0; i < len(aux); i++ {
		cp[i] = (*time.Time)(aux[i])
	}
	result.TimeArray = cp
	return result, nil
}

// getDateInvalidNullHandleError handles the GetDateInvalidNull error response.
func (client *ArrayClient) getDateInvalidNullHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDateTimeInvalidChars - Get date array value ['2000-12-01t00:00:01z', 'date-time']
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetDateTimeInvalidCharsOptions contains the optional parameters for the ArrayClient.GetDateTimeInvalidChars
// method.
func (client *ArrayClient) GetDateTimeInvalidChars(ctx context.Context, options *ArrayClientGetDateTimeInvalidCharsOptions) (ArrayClientGetDateTimeInvalidCharsResponse, error) {
	req, err := client.getDateTimeInvalidCharsCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetDateTimeInvalidCharsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetDateTimeInvalidCharsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetDateTimeInvalidCharsResponse{}, client.getDateTimeInvalidCharsHandleError(resp)
	}
	return client.getDateTimeInvalidCharsHandleResponse(resp)
}

// getDateTimeInvalidCharsCreateRequest creates the GetDateTimeInvalidChars request.
func (client *ArrayClient) getDateTimeInvalidCharsCreateRequest(ctx context.Context, options *ArrayClientGetDateTimeInvalidCharsOptions) (*policy.Request, error) {
	urlPath := "/array/prim/date-time/invalidchars"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDateTimeInvalidCharsHandleResponse handles the GetDateTimeInvalidChars response.
func (client *ArrayClient) getDateTimeInvalidCharsHandleResponse(resp *http.Response) (ArrayClientGetDateTimeInvalidCharsResponse, error) {
	result := ArrayClientGetDateTimeInvalidCharsResponse{RawResponse: resp}
	var aux []*timeRFC3339
	if err := runtime.UnmarshalAsJSON(resp, &aux); err != nil {
		return ArrayClientGetDateTimeInvalidCharsResponse{}, runtime.NewResponseError(err, resp)
	}
	cp := make([]*time.Time, len(aux), len(aux))
	for i := 0; i < len(aux); i++ {
		cp[i] = (*time.Time)(aux[i])
	}
	result.TimeArray = cp
	return result, nil
}

// getDateTimeInvalidCharsHandleError handles the GetDateTimeInvalidChars error response.
func (client *ArrayClient) getDateTimeInvalidCharsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDateTimeInvalidNull - Get date array value ['2000-12-01t00:00:01z', null]
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetDateTimeInvalidNullOptions contains the optional parameters for the ArrayClient.GetDateTimeInvalidNull
// method.
func (client *ArrayClient) GetDateTimeInvalidNull(ctx context.Context, options *ArrayClientGetDateTimeInvalidNullOptions) (ArrayClientGetDateTimeInvalidNullResponse, error) {
	req, err := client.getDateTimeInvalidNullCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetDateTimeInvalidNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetDateTimeInvalidNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetDateTimeInvalidNullResponse{}, client.getDateTimeInvalidNullHandleError(resp)
	}
	return client.getDateTimeInvalidNullHandleResponse(resp)
}

// getDateTimeInvalidNullCreateRequest creates the GetDateTimeInvalidNull request.
func (client *ArrayClient) getDateTimeInvalidNullCreateRequest(ctx context.Context, options *ArrayClientGetDateTimeInvalidNullOptions) (*policy.Request, error) {
	urlPath := "/array/prim/date-time/invalidnull"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDateTimeInvalidNullHandleResponse handles the GetDateTimeInvalidNull response.
func (client *ArrayClient) getDateTimeInvalidNullHandleResponse(resp *http.Response) (ArrayClientGetDateTimeInvalidNullResponse, error) {
	result := ArrayClientGetDateTimeInvalidNullResponse{RawResponse: resp}
	var aux []*timeRFC3339
	if err := runtime.UnmarshalAsJSON(resp, &aux); err != nil {
		return ArrayClientGetDateTimeInvalidNullResponse{}, runtime.NewResponseError(err, resp)
	}
	cp := make([]*time.Time, len(aux), len(aux))
	for i := 0; i < len(aux); i++ {
		cp[i] = (*time.Time)(aux[i])
	}
	result.TimeArray = cp
	return result, nil
}

// getDateTimeInvalidNullHandleError handles the GetDateTimeInvalidNull error response.
func (client *ArrayClient) getDateTimeInvalidNullHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDateTimeRFC1123Valid - Get date-time array value ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT',
// 'Wed, 12 Oct 1492 10:15:01 GMT']
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetDateTimeRFC1123ValidOptions contains the optional parameters for the ArrayClient.GetDateTimeRFC1123Valid
// method.
func (client *ArrayClient) GetDateTimeRFC1123Valid(ctx context.Context, options *ArrayClientGetDateTimeRFC1123ValidOptions) (ArrayClientGetDateTimeRFC1123ValidResponse, error) {
	req, err := client.getDateTimeRFC1123ValidCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetDateTimeRFC1123ValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetDateTimeRFC1123ValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetDateTimeRFC1123ValidResponse{}, client.getDateTimeRFC1123ValidHandleError(resp)
	}
	return client.getDateTimeRFC1123ValidHandleResponse(resp)
}

// getDateTimeRFC1123ValidCreateRequest creates the GetDateTimeRFC1123Valid request.
func (client *ArrayClient) getDateTimeRFC1123ValidCreateRequest(ctx context.Context, options *ArrayClientGetDateTimeRFC1123ValidOptions) (*policy.Request, error) {
	urlPath := "/array/prim/date-time-rfc1123/valid"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDateTimeRFC1123ValidHandleResponse handles the GetDateTimeRFC1123Valid response.
func (client *ArrayClient) getDateTimeRFC1123ValidHandleResponse(resp *http.Response) (ArrayClientGetDateTimeRFC1123ValidResponse, error) {
	result := ArrayClientGetDateTimeRFC1123ValidResponse{RawResponse: resp}
	var aux []*timeRFC1123
	if err := runtime.UnmarshalAsJSON(resp, &aux); err != nil {
		return ArrayClientGetDateTimeRFC1123ValidResponse{}, runtime.NewResponseError(err, resp)
	}
	cp := make([]*time.Time, len(aux), len(aux))
	for i := 0; i < len(aux); i++ {
		cp[i] = (*time.Time)(aux[i])
	}
	result.TimeArray = cp
	return result, nil
}

// getDateTimeRFC1123ValidHandleError handles the GetDateTimeRFC1123Valid error response.
func (client *ArrayClient) getDateTimeRFC1123ValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDateTimeValid - Get date-time array value ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00']
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetDateTimeValidOptions contains the optional parameters for the ArrayClient.GetDateTimeValid method.
func (client *ArrayClient) GetDateTimeValid(ctx context.Context, options *ArrayClientGetDateTimeValidOptions) (ArrayClientGetDateTimeValidResponse, error) {
	req, err := client.getDateTimeValidCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetDateTimeValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetDateTimeValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetDateTimeValidResponse{}, client.getDateTimeValidHandleError(resp)
	}
	return client.getDateTimeValidHandleResponse(resp)
}

// getDateTimeValidCreateRequest creates the GetDateTimeValid request.
func (client *ArrayClient) getDateTimeValidCreateRequest(ctx context.Context, options *ArrayClientGetDateTimeValidOptions) (*policy.Request, error) {
	urlPath := "/array/prim/date-time/valid"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDateTimeValidHandleResponse handles the GetDateTimeValid response.
func (client *ArrayClient) getDateTimeValidHandleResponse(resp *http.Response) (ArrayClientGetDateTimeValidResponse, error) {
	result := ArrayClientGetDateTimeValidResponse{RawResponse: resp}
	var aux []*timeRFC3339
	if err := runtime.UnmarshalAsJSON(resp, &aux); err != nil {
		return ArrayClientGetDateTimeValidResponse{}, runtime.NewResponseError(err, resp)
	}
	cp := make([]*time.Time, len(aux), len(aux))
	for i := 0; i < len(aux); i++ {
		cp[i] = (*time.Time)(aux[i])
	}
	result.TimeArray = cp
	return result, nil
}

// getDateTimeValidHandleError handles the GetDateTimeValid error response.
func (client *ArrayClient) getDateTimeValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDateValid - Get integer array value ['2000-12-01', '1980-01-02', '1492-10-12']
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetDateValidOptions contains the optional parameters for the ArrayClient.GetDateValid method.
func (client *ArrayClient) GetDateValid(ctx context.Context, options *ArrayClientGetDateValidOptions) (ArrayClientGetDateValidResponse, error) {
	req, err := client.getDateValidCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetDateValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetDateValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetDateValidResponse{}, client.getDateValidHandleError(resp)
	}
	return client.getDateValidHandleResponse(resp)
}

// getDateValidCreateRequest creates the GetDateValid request.
func (client *ArrayClient) getDateValidCreateRequest(ctx context.Context, options *ArrayClientGetDateValidOptions) (*policy.Request, error) {
	urlPath := "/array/prim/date/valid"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDateValidHandleResponse handles the GetDateValid response.
func (client *ArrayClient) getDateValidHandleResponse(resp *http.Response) (ArrayClientGetDateValidResponse, error) {
	result := ArrayClientGetDateValidResponse{RawResponse: resp}
	var aux []*dateType
	if err := runtime.UnmarshalAsJSON(resp, &aux); err != nil {
		return ArrayClientGetDateValidResponse{}, runtime.NewResponseError(err, resp)
	}
	cp := make([]*time.Time, len(aux), len(aux))
	for i := 0; i < len(aux); i++ {
		cp[i] = (*time.Time)(aux[i])
	}
	result.TimeArray = cp
	return result, nil
}

// getDateValidHandleError handles the GetDateValid error response.
func (client *ArrayClient) getDateValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDictionaryEmpty - Get an array of Dictionaries of type with value []
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetDictionaryEmptyOptions contains the optional parameters for the ArrayClient.GetDictionaryEmpty
// method.
func (client *ArrayClient) GetDictionaryEmpty(ctx context.Context, options *ArrayClientGetDictionaryEmptyOptions) (ArrayClientGetDictionaryEmptyResponse, error) {
	req, err := client.getDictionaryEmptyCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetDictionaryEmptyResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetDictionaryEmptyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetDictionaryEmptyResponse{}, client.getDictionaryEmptyHandleError(resp)
	}
	return client.getDictionaryEmptyHandleResponse(resp)
}

// getDictionaryEmptyCreateRequest creates the GetDictionaryEmpty request.
func (client *ArrayClient) getDictionaryEmptyCreateRequest(ctx context.Context, options *ArrayClientGetDictionaryEmptyOptions) (*policy.Request, error) {
	urlPath := "/array/dictionary/empty"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDictionaryEmptyHandleResponse handles the GetDictionaryEmpty response.
func (client *ArrayClient) getDictionaryEmptyHandleResponse(resp *http.Response) (ArrayClientGetDictionaryEmptyResponse, error) {
	result := ArrayClientGetDictionaryEmptyResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.MapOfStringArray); err != nil {
		return ArrayClientGetDictionaryEmptyResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getDictionaryEmptyHandleError handles the GetDictionaryEmpty error response.
func (client *ArrayClient) getDictionaryEmptyHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDictionaryItemEmpty - Get an array of Dictionaries of type with value [{'1': 'one', '2': 'two', '3': 'three'}, {}, {'7':
// 'seven', '8': 'eight', '9': 'nine'}]
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetDictionaryItemEmptyOptions contains the optional parameters for the ArrayClient.GetDictionaryItemEmpty
// method.
func (client *ArrayClient) GetDictionaryItemEmpty(ctx context.Context, options *ArrayClientGetDictionaryItemEmptyOptions) (ArrayClientGetDictionaryItemEmptyResponse, error) {
	req, err := client.getDictionaryItemEmptyCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetDictionaryItemEmptyResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetDictionaryItemEmptyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetDictionaryItemEmptyResponse{}, client.getDictionaryItemEmptyHandleError(resp)
	}
	return client.getDictionaryItemEmptyHandleResponse(resp)
}

// getDictionaryItemEmptyCreateRequest creates the GetDictionaryItemEmpty request.
func (client *ArrayClient) getDictionaryItemEmptyCreateRequest(ctx context.Context, options *ArrayClientGetDictionaryItemEmptyOptions) (*policy.Request, error) {
	urlPath := "/array/dictionary/itemempty"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDictionaryItemEmptyHandleResponse handles the GetDictionaryItemEmpty response.
func (client *ArrayClient) getDictionaryItemEmptyHandleResponse(resp *http.Response) (ArrayClientGetDictionaryItemEmptyResponse, error) {
	result := ArrayClientGetDictionaryItemEmptyResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.MapOfStringArray); err != nil {
		return ArrayClientGetDictionaryItemEmptyResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getDictionaryItemEmptyHandleError handles the GetDictionaryItemEmpty error response.
func (client *ArrayClient) getDictionaryItemEmptyHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDictionaryItemNull - Get an array of Dictionaries of type with value [{'1': 'one', '2': 'two', '3': 'three'}, null,
// {'7': 'seven', '8': 'eight', '9': 'nine'}]
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetDictionaryItemNullOptions contains the optional parameters for the ArrayClient.GetDictionaryItemNull
// method.
func (client *ArrayClient) GetDictionaryItemNull(ctx context.Context, options *ArrayClientGetDictionaryItemNullOptions) (ArrayClientGetDictionaryItemNullResponse, error) {
	req, err := client.getDictionaryItemNullCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetDictionaryItemNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetDictionaryItemNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetDictionaryItemNullResponse{}, client.getDictionaryItemNullHandleError(resp)
	}
	return client.getDictionaryItemNullHandleResponse(resp)
}

// getDictionaryItemNullCreateRequest creates the GetDictionaryItemNull request.
func (client *ArrayClient) getDictionaryItemNullCreateRequest(ctx context.Context, options *ArrayClientGetDictionaryItemNullOptions) (*policy.Request, error) {
	urlPath := "/array/dictionary/itemnull"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDictionaryItemNullHandleResponse handles the GetDictionaryItemNull response.
func (client *ArrayClient) getDictionaryItemNullHandleResponse(resp *http.Response) (ArrayClientGetDictionaryItemNullResponse, error) {
	result := ArrayClientGetDictionaryItemNullResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.MapOfStringArray); err != nil {
		return ArrayClientGetDictionaryItemNullResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getDictionaryItemNullHandleError handles the GetDictionaryItemNull error response.
func (client *ArrayClient) getDictionaryItemNullHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDictionaryNull - Get an array of Dictionaries with value null
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetDictionaryNullOptions contains the optional parameters for the ArrayClient.GetDictionaryNull method.
func (client *ArrayClient) GetDictionaryNull(ctx context.Context, options *ArrayClientGetDictionaryNullOptions) (ArrayClientGetDictionaryNullResponse, error) {
	req, err := client.getDictionaryNullCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetDictionaryNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetDictionaryNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetDictionaryNullResponse{}, client.getDictionaryNullHandleError(resp)
	}
	return client.getDictionaryNullHandleResponse(resp)
}

// getDictionaryNullCreateRequest creates the GetDictionaryNull request.
func (client *ArrayClient) getDictionaryNullCreateRequest(ctx context.Context, options *ArrayClientGetDictionaryNullOptions) (*policy.Request, error) {
	urlPath := "/array/dictionary/null"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDictionaryNullHandleResponse handles the GetDictionaryNull response.
func (client *ArrayClient) getDictionaryNullHandleResponse(resp *http.Response) (ArrayClientGetDictionaryNullResponse, error) {
	result := ArrayClientGetDictionaryNullResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.MapOfStringArray); err != nil {
		return ArrayClientGetDictionaryNullResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getDictionaryNullHandleError handles the GetDictionaryNull error response.
func (client *ArrayClient) getDictionaryNullHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDictionaryValid - Get an array of Dictionaries of type with value [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four',
// '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetDictionaryValidOptions contains the optional parameters for the ArrayClient.GetDictionaryValid
// method.
func (client *ArrayClient) GetDictionaryValid(ctx context.Context, options *ArrayClientGetDictionaryValidOptions) (ArrayClientGetDictionaryValidResponse, error) {
	req, err := client.getDictionaryValidCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetDictionaryValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetDictionaryValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetDictionaryValidResponse{}, client.getDictionaryValidHandleError(resp)
	}
	return client.getDictionaryValidHandleResponse(resp)
}

// getDictionaryValidCreateRequest creates the GetDictionaryValid request.
func (client *ArrayClient) getDictionaryValidCreateRequest(ctx context.Context, options *ArrayClientGetDictionaryValidOptions) (*policy.Request, error) {
	urlPath := "/array/dictionary/valid"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDictionaryValidHandleResponse handles the GetDictionaryValid response.
func (client *ArrayClient) getDictionaryValidHandleResponse(resp *http.Response) (ArrayClientGetDictionaryValidResponse, error) {
	result := ArrayClientGetDictionaryValidResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.MapOfStringArray); err != nil {
		return ArrayClientGetDictionaryValidResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getDictionaryValidHandleError handles the GetDictionaryValid error response.
func (client *ArrayClient) getDictionaryValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDoubleInvalidNull - Get float array value [0.0, null, -1.2e20]
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetDoubleInvalidNullOptions contains the optional parameters for the ArrayClient.GetDoubleInvalidNull
// method.
func (client *ArrayClient) GetDoubleInvalidNull(ctx context.Context, options *ArrayClientGetDoubleInvalidNullOptions) (ArrayClientGetDoubleInvalidNullResponse, error) {
	req, err := client.getDoubleInvalidNullCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetDoubleInvalidNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetDoubleInvalidNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetDoubleInvalidNullResponse{}, client.getDoubleInvalidNullHandleError(resp)
	}
	return client.getDoubleInvalidNullHandleResponse(resp)
}

// getDoubleInvalidNullCreateRequest creates the GetDoubleInvalidNull request.
func (client *ArrayClient) getDoubleInvalidNullCreateRequest(ctx context.Context, options *ArrayClientGetDoubleInvalidNullOptions) (*policy.Request, error) {
	urlPath := "/array/prim/double/0.0-null-1.2e20"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDoubleInvalidNullHandleResponse handles the GetDoubleInvalidNull response.
func (client *ArrayClient) getDoubleInvalidNullHandleResponse(resp *http.Response) (ArrayClientGetDoubleInvalidNullResponse, error) {
	result := ArrayClientGetDoubleInvalidNullResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Float64Array); err != nil {
		return ArrayClientGetDoubleInvalidNullResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getDoubleInvalidNullHandleError handles the GetDoubleInvalidNull error response.
func (client *ArrayClient) getDoubleInvalidNullHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDoubleInvalidString - Get boolean array value [1.0, 'number', 0.0]
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetDoubleInvalidStringOptions contains the optional parameters for the ArrayClient.GetDoubleInvalidString
// method.
func (client *ArrayClient) GetDoubleInvalidString(ctx context.Context, options *ArrayClientGetDoubleInvalidStringOptions) (ArrayClientGetDoubleInvalidStringResponse, error) {
	req, err := client.getDoubleInvalidStringCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetDoubleInvalidStringResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetDoubleInvalidStringResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetDoubleInvalidStringResponse{}, client.getDoubleInvalidStringHandleError(resp)
	}
	return client.getDoubleInvalidStringHandleResponse(resp)
}

// getDoubleInvalidStringCreateRequest creates the GetDoubleInvalidString request.
func (client *ArrayClient) getDoubleInvalidStringCreateRequest(ctx context.Context, options *ArrayClientGetDoubleInvalidStringOptions) (*policy.Request, error) {
	urlPath := "/array/prim/double/1.number.0"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDoubleInvalidStringHandleResponse handles the GetDoubleInvalidString response.
func (client *ArrayClient) getDoubleInvalidStringHandleResponse(resp *http.Response) (ArrayClientGetDoubleInvalidStringResponse, error) {
	result := ArrayClientGetDoubleInvalidStringResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Float64Array); err != nil {
		return ArrayClientGetDoubleInvalidStringResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getDoubleInvalidStringHandleError handles the GetDoubleInvalidString error response.
func (client *ArrayClient) getDoubleInvalidStringHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDoubleValid - Get float array value [0, -0.01, 1.2e20]
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetDoubleValidOptions contains the optional parameters for the ArrayClient.GetDoubleValid method.
func (client *ArrayClient) GetDoubleValid(ctx context.Context, options *ArrayClientGetDoubleValidOptions) (ArrayClientGetDoubleValidResponse, error) {
	req, err := client.getDoubleValidCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetDoubleValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetDoubleValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetDoubleValidResponse{}, client.getDoubleValidHandleError(resp)
	}
	return client.getDoubleValidHandleResponse(resp)
}

// getDoubleValidCreateRequest creates the GetDoubleValid request.
func (client *ArrayClient) getDoubleValidCreateRequest(ctx context.Context, options *ArrayClientGetDoubleValidOptions) (*policy.Request, error) {
	urlPath := "/array/prim/double/0--0.01-1.2e20"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDoubleValidHandleResponse handles the GetDoubleValid response.
func (client *ArrayClient) getDoubleValidHandleResponse(resp *http.Response) (ArrayClientGetDoubleValidResponse, error) {
	result := ArrayClientGetDoubleValidResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Float64Array); err != nil {
		return ArrayClientGetDoubleValidResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getDoubleValidHandleError handles the GetDoubleValid error response.
func (client *ArrayClient) getDoubleValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDurationValid - Get duration array value ['P123DT22H14M12.011S', 'P5DT1H0M0S']
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetDurationValidOptions contains the optional parameters for the ArrayClient.GetDurationValid method.
func (client *ArrayClient) GetDurationValid(ctx context.Context, options *ArrayClientGetDurationValidOptions) (ArrayClientGetDurationValidResponse, error) {
	req, err := client.getDurationValidCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetDurationValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetDurationValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetDurationValidResponse{}, client.getDurationValidHandleError(resp)
	}
	return client.getDurationValidHandleResponse(resp)
}

// getDurationValidCreateRequest creates the GetDurationValid request.
func (client *ArrayClient) getDurationValidCreateRequest(ctx context.Context, options *ArrayClientGetDurationValidOptions) (*policy.Request, error) {
	urlPath := "/array/prim/duration/valid"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDurationValidHandleResponse handles the GetDurationValid response.
func (client *ArrayClient) getDurationValidHandleResponse(resp *http.Response) (ArrayClientGetDurationValidResponse, error) {
	result := ArrayClientGetDurationValidResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.StringArray); err != nil {
		return ArrayClientGetDurationValidResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getDurationValidHandleError handles the GetDurationValid error response.
func (client *ArrayClient) getDurationValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetEmpty - Get empty array value []
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetEmptyOptions contains the optional parameters for the ArrayClient.GetEmpty method.
func (client *ArrayClient) GetEmpty(ctx context.Context, options *ArrayClientGetEmptyOptions) (ArrayClientGetEmptyResponse, error) {
	req, err := client.getEmptyCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetEmptyResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetEmptyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetEmptyResponse{}, client.getEmptyHandleError(resp)
	}
	return client.getEmptyHandleResponse(resp)
}

// getEmptyCreateRequest creates the GetEmpty request.
func (client *ArrayClient) getEmptyCreateRequest(ctx context.Context, options *ArrayClientGetEmptyOptions) (*policy.Request, error) {
	urlPath := "/array/empty"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getEmptyHandleResponse handles the GetEmpty response.
func (client *ArrayClient) getEmptyHandleResponse(resp *http.Response) (ArrayClientGetEmptyResponse, error) {
	result := ArrayClientGetEmptyResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Int32Array); err != nil {
		return ArrayClientGetEmptyResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getEmptyHandleError handles the GetEmpty error response.
func (client *ArrayClient) getEmptyHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetEnumValid - Get enum array value ['foo1', 'foo2', 'foo3']
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetEnumValidOptions contains the optional parameters for the ArrayClient.GetEnumValid method.
func (client *ArrayClient) GetEnumValid(ctx context.Context, options *ArrayClientGetEnumValidOptions) (ArrayClientGetEnumValidResponse, error) {
	req, err := client.getEnumValidCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetEnumValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetEnumValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetEnumValidResponse{}, client.getEnumValidHandleError(resp)
	}
	return client.getEnumValidHandleResponse(resp)
}

// getEnumValidCreateRequest creates the GetEnumValid request.
func (client *ArrayClient) getEnumValidCreateRequest(ctx context.Context, options *ArrayClientGetEnumValidOptions) (*policy.Request, error) {
	urlPath := "/array/prim/enum/foo1.foo2.foo3"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getEnumValidHandleResponse handles the GetEnumValid response.
func (client *ArrayClient) getEnumValidHandleResponse(resp *http.Response) (ArrayClientGetEnumValidResponse, error) {
	result := ArrayClientGetEnumValidResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.FooEnumArray); err != nil {
		return ArrayClientGetEnumValidResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getEnumValidHandleError handles the GetEnumValid error response.
func (client *ArrayClient) getEnumValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetFloatInvalidNull - Get float array value [0.0, null, -1.2e20]
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetFloatInvalidNullOptions contains the optional parameters for the ArrayClient.GetFloatInvalidNull
// method.
func (client *ArrayClient) GetFloatInvalidNull(ctx context.Context, options *ArrayClientGetFloatInvalidNullOptions) (ArrayClientGetFloatInvalidNullResponse, error) {
	req, err := client.getFloatInvalidNullCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetFloatInvalidNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetFloatInvalidNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetFloatInvalidNullResponse{}, client.getFloatInvalidNullHandleError(resp)
	}
	return client.getFloatInvalidNullHandleResponse(resp)
}

// getFloatInvalidNullCreateRequest creates the GetFloatInvalidNull request.
func (client *ArrayClient) getFloatInvalidNullCreateRequest(ctx context.Context, options *ArrayClientGetFloatInvalidNullOptions) (*policy.Request, error) {
	urlPath := "/array/prim/float/0.0-null-1.2e20"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getFloatInvalidNullHandleResponse handles the GetFloatInvalidNull response.
func (client *ArrayClient) getFloatInvalidNullHandleResponse(resp *http.Response) (ArrayClientGetFloatInvalidNullResponse, error) {
	result := ArrayClientGetFloatInvalidNullResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Float32Array); err != nil {
		return ArrayClientGetFloatInvalidNullResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getFloatInvalidNullHandleError handles the GetFloatInvalidNull error response.
func (client *ArrayClient) getFloatInvalidNullHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetFloatInvalidString - Get boolean array value [1.0, 'number', 0.0]
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetFloatInvalidStringOptions contains the optional parameters for the ArrayClient.GetFloatInvalidString
// method.
func (client *ArrayClient) GetFloatInvalidString(ctx context.Context, options *ArrayClientGetFloatInvalidStringOptions) (ArrayClientGetFloatInvalidStringResponse, error) {
	req, err := client.getFloatInvalidStringCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetFloatInvalidStringResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetFloatInvalidStringResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetFloatInvalidStringResponse{}, client.getFloatInvalidStringHandleError(resp)
	}
	return client.getFloatInvalidStringHandleResponse(resp)
}

// getFloatInvalidStringCreateRequest creates the GetFloatInvalidString request.
func (client *ArrayClient) getFloatInvalidStringCreateRequest(ctx context.Context, options *ArrayClientGetFloatInvalidStringOptions) (*policy.Request, error) {
	urlPath := "/array/prim/float/1.number.0"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getFloatInvalidStringHandleResponse handles the GetFloatInvalidString response.
func (client *ArrayClient) getFloatInvalidStringHandleResponse(resp *http.Response) (ArrayClientGetFloatInvalidStringResponse, error) {
	result := ArrayClientGetFloatInvalidStringResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Float32Array); err != nil {
		return ArrayClientGetFloatInvalidStringResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getFloatInvalidStringHandleError handles the GetFloatInvalidString error response.
func (client *ArrayClient) getFloatInvalidStringHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetFloatValid - Get float array value [0, -0.01, 1.2e20]
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetFloatValidOptions contains the optional parameters for the ArrayClient.GetFloatValid method.
func (client *ArrayClient) GetFloatValid(ctx context.Context, options *ArrayClientGetFloatValidOptions) (ArrayClientGetFloatValidResponse, error) {
	req, err := client.getFloatValidCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetFloatValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetFloatValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetFloatValidResponse{}, client.getFloatValidHandleError(resp)
	}
	return client.getFloatValidHandleResponse(resp)
}

// getFloatValidCreateRequest creates the GetFloatValid request.
func (client *ArrayClient) getFloatValidCreateRequest(ctx context.Context, options *ArrayClientGetFloatValidOptions) (*policy.Request, error) {
	urlPath := "/array/prim/float/0--0.01-1.2e20"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getFloatValidHandleResponse handles the GetFloatValid response.
func (client *ArrayClient) getFloatValidHandleResponse(resp *http.Response) (ArrayClientGetFloatValidResponse, error) {
	result := ArrayClientGetFloatValidResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Float32Array); err != nil {
		return ArrayClientGetFloatValidResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getFloatValidHandleError handles the GetFloatValid error response.
func (client *ArrayClient) getFloatValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetIntInvalidNull - Get integer array value [1, null, 0]
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetIntInvalidNullOptions contains the optional parameters for the ArrayClient.GetIntInvalidNull method.
func (client *ArrayClient) GetIntInvalidNull(ctx context.Context, options *ArrayClientGetIntInvalidNullOptions) (ArrayClientGetIntInvalidNullResponse, error) {
	req, err := client.getIntInvalidNullCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetIntInvalidNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetIntInvalidNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetIntInvalidNullResponse{}, client.getIntInvalidNullHandleError(resp)
	}
	return client.getIntInvalidNullHandleResponse(resp)
}

// getIntInvalidNullCreateRequest creates the GetIntInvalidNull request.
func (client *ArrayClient) getIntInvalidNullCreateRequest(ctx context.Context, options *ArrayClientGetIntInvalidNullOptions) (*policy.Request, error) {
	urlPath := "/array/prim/integer/1.null.zero"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getIntInvalidNullHandleResponse handles the GetIntInvalidNull response.
func (client *ArrayClient) getIntInvalidNullHandleResponse(resp *http.Response) (ArrayClientGetIntInvalidNullResponse, error) {
	result := ArrayClientGetIntInvalidNullResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Int32Array); err != nil {
		return ArrayClientGetIntInvalidNullResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getIntInvalidNullHandleError handles the GetIntInvalidNull error response.
func (client *ArrayClient) getIntInvalidNullHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetIntInvalidString - Get integer array value [1, 'integer', 0]
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetIntInvalidStringOptions contains the optional parameters for the ArrayClient.GetIntInvalidString
// method.
func (client *ArrayClient) GetIntInvalidString(ctx context.Context, options *ArrayClientGetIntInvalidStringOptions) (ArrayClientGetIntInvalidStringResponse, error) {
	req, err := client.getIntInvalidStringCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetIntInvalidStringResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetIntInvalidStringResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetIntInvalidStringResponse{}, client.getIntInvalidStringHandleError(resp)
	}
	return client.getIntInvalidStringHandleResponse(resp)
}

// getIntInvalidStringCreateRequest creates the GetIntInvalidString request.
func (client *ArrayClient) getIntInvalidStringCreateRequest(ctx context.Context, options *ArrayClientGetIntInvalidStringOptions) (*policy.Request, error) {
	urlPath := "/array/prim/integer/1.integer.0"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getIntInvalidStringHandleResponse handles the GetIntInvalidString response.
func (client *ArrayClient) getIntInvalidStringHandleResponse(resp *http.Response) (ArrayClientGetIntInvalidStringResponse, error) {
	result := ArrayClientGetIntInvalidStringResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Int32Array); err != nil {
		return ArrayClientGetIntInvalidStringResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getIntInvalidStringHandleError handles the GetIntInvalidString error response.
func (client *ArrayClient) getIntInvalidStringHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetIntegerValid - Get integer array value [1, -1, 3, 300]
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetIntegerValidOptions contains the optional parameters for the ArrayClient.GetIntegerValid method.
func (client *ArrayClient) GetIntegerValid(ctx context.Context, options *ArrayClientGetIntegerValidOptions) (ArrayClientGetIntegerValidResponse, error) {
	req, err := client.getIntegerValidCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetIntegerValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetIntegerValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetIntegerValidResponse{}, client.getIntegerValidHandleError(resp)
	}
	return client.getIntegerValidHandleResponse(resp)
}

// getIntegerValidCreateRequest creates the GetIntegerValid request.
func (client *ArrayClient) getIntegerValidCreateRequest(ctx context.Context, options *ArrayClientGetIntegerValidOptions) (*policy.Request, error) {
	urlPath := "/array/prim/integer/1.-1.3.300"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getIntegerValidHandleResponse handles the GetIntegerValid response.
func (client *ArrayClient) getIntegerValidHandleResponse(resp *http.Response) (ArrayClientGetIntegerValidResponse, error) {
	result := ArrayClientGetIntegerValidResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Int32Array); err != nil {
		return ArrayClientGetIntegerValidResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getIntegerValidHandleError handles the GetIntegerValid error response.
func (client *ArrayClient) getIntegerValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetInvalid - Get invalid array [1, 2, 3
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetInvalidOptions contains the optional parameters for the ArrayClient.GetInvalid method.
func (client *ArrayClient) GetInvalid(ctx context.Context, options *ArrayClientGetInvalidOptions) (ArrayClientGetInvalidResponse, error) {
	req, err := client.getInvalidCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetInvalidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetInvalidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetInvalidResponse{}, client.getInvalidHandleError(resp)
	}
	return client.getInvalidHandleResponse(resp)
}

// getInvalidCreateRequest creates the GetInvalid request.
func (client *ArrayClient) getInvalidCreateRequest(ctx context.Context, options *ArrayClientGetInvalidOptions) (*policy.Request, error) {
	urlPath := "/array/invalid"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getInvalidHandleResponse handles the GetInvalid response.
func (client *ArrayClient) getInvalidHandleResponse(resp *http.Response) (ArrayClientGetInvalidResponse, error) {
	result := ArrayClientGetInvalidResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Int32Array); err != nil {
		return ArrayClientGetInvalidResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getInvalidHandleError handles the GetInvalid error response.
func (client *ArrayClient) getInvalidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetLongInvalidNull - Get long array value [1, null, 0]
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetLongInvalidNullOptions contains the optional parameters for the ArrayClient.GetLongInvalidNull
// method.
func (client *ArrayClient) GetLongInvalidNull(ctx context.Context, options *ArrayClientGetLongInvalidNullOptions) (ArrayClientGetLongInvalidNullResponse, error) {
	req, err := client.getLongInvalidNullCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetLongInvalidNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetLongInvalidNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetLongInvalidNullResponse{}, client.getLongInvalidNullHandleError(resp)
	}
	return client.getLongInvalidNullHandleResponse(resp)
}

// getLongInvalidNullCreateRequest creates the GetLongInvalidNull request.
func (client *ArrayClient) getLongInvalidNullCreateRequest(ctx context.Context, options *ArrayClientGetLongInvalidNullOptions) (*policy.Request, error) {
	urlPath := "/array/prim/long/1.null.zero"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getLongInvalidNullHandleResponse handles the GetLongInvalidNull response.
func (client *ArrayClient) getLongInvalidNullHandleResponse(resp *http.Response) (ArrayClientGetLongInvalidNullResponse, error) {
	result := ArrayClientGetLongInvalidNullResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Int64Array); err != nil {
		return ArrayClientGetLongInvalidNullResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getLongInvalidNullHandleError handles the GetLongInvalidNull error response.
func (client *ArrayClient) getLongInvalidNullHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetLongInvalidString - Get long array value [1, 'integer', 0]
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetLongInvalidStringOptions contains the optional parameters for the ArrayClient.GetLongInvalidString
// method.
func (client *ArrayClient) GetLongInvalidString(ctx context.Context, options *ArrayClientGetLongInvalidStringOptions) (ArrayClientGetLongInvalidStringResponse, error) {
	req, err := client.getLongInvalidStringCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetLongInvalidStringResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetLongInvalidStringResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetLongInvalidStringResponse{}, client.getLongInvalidStringHandleError(resp)
	}
	return client.getLongInvalidStringHandleResponse(resp)
}

// getLongInvalidStringCreateRequest creates the GetLongInvalidString request.
func (client *ArrayClient) getLongInvalidStringCreateRequest(ctx context.Context, options *ArrayClientGetLongInvalidStringOptions) (*policy.Request, error) {
	urlPath := "/array/prim/long/1.integer.0"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getLongInvalidStringHandleResponse handles the GetLongInvalidString response.
func (client *ArrayClient) getLongInvalidStringHandleResponse(resp *http.Response) (ArrayClientGetLongInvalidStringResponse, error) {
	result := ArrayClientGetLongInvalidStringResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Int64Array); err != nil {
		return ArrayClientGetLongInvalidStringResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getLongInvalidStringHandleError handles the GetLongInvalidString error response.
func (client *ArrayClient) getLongInvalidStringHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetLongValid - Get integer array value [1, -1, 3, 300]
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetLongValidOptions contains the optional parameters for the ArrayClient.GetLongValid method.
func (client *ArrayClient) GetLongValid(ctx context.Context, options *ArrayClientGetLongValidOptions) (ArrayClientGetLongValidResponse, error) {
	req, err := client.getLongValidCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetLongValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetLongValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetLongValidResponse{}, client.getLongValidHandleError(resp)
	}
	return client.getLongValidHandleResponse(resp)
}

// getLongValidCreateRequest creates the GetLongValid request.
func (client *ArrayClient) getLongValidCreateRequest(ctx context.Context, options *ArrayClientGetLongValidOptions) (*policy.Request, error) {
	urlPath := "/array/prim/long/1.-1.3.300"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getLongValidHandleResponse handles the GetLongValid response.
func (client *ArrayClient) getLongValidHandleResponse(resp *http.Response) (ArrayClientGetLongValidResponse, error) {
	result := ArrayClientGetLongValidResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Int64Array); err != nil {
		return ArrayClientGetLongValidResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getLongValidHandleError handles the GetLongValid error response.
func (client *ArrayClient) getLongValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetNull - Get null array value
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetNullOptions contains the optional parameters for the ArrayClient.GetNull method.
func (client *ArrayClient) GetNull(ctx context.Context, options *ArrayClientGetNullOptions) (ArrayClientGetNullResponse, error) {
	req, err := client.getNullCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetNullResponse{}, client.getNullHandleError(resp)
	}
	return client.getNullHandleResponse(resp)
}

// getNullCreateRequest creates the GetNull request.
func (client *ArrayClient) getNullCreateRequest(ctx context.Context, options *ArrayClientGetNullOptions) (*policy.Request, error) {
	urlPath := "/array/null"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getNullHandleResponse handles the GetNull response.
func (client *ArrayClient) getNullHandleResponse(resp *http.Response) (ArrayClientGetNullResponse, error) {
	result := ArrayClientGetNullResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Int32Array); err != nil {
		return ArrayClientGetNullResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getNullHandleError handles the GetNull error response.
func (client *ArrayClient) getNullHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetStringEnumValid - Get enum array value ['foo1', 'foo2', 'foo3']
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetStringEnumValidOptions contains the optional parameters for the ArrayClient.GetStringEnumValid
// method.
func (client *ArrayClient) GetStringEnumValid(ctx context.Context, options *ArrayClientGetStringEnumValidOptions) (ArrayClientGetStringEnumValidResponse, error) {
	req, err := client.getStringEnumValidCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetStringEnumValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetStringEnumValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetStringEnumValidResponse{}, client.getStringEnumValidHandleError(resp)
	}
	return client.getStringEnumValidHandleResponse(resp)
}

// getStringEnumValidCreateRequest creates the GetStringEnumValid request.
func (client *ArrayClient) getStringEnumValidCreateRequest(ctx context.Context, options *ArrayClientGetStringEnumValidOptions) (*policy.Request, error) {
	urlPath := "/array/prim/string-enum/foo1.foo2.foo3"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getStringEnumValidHandleResponse handles the GetStringEnumValid response.
func (client *ArrayClient) getStringEnumValidHandleResponse(resp *http.Response) (ArrayClientGetStringEnumValidResponse, error) {
	result := ArrayClientGetStringEnumValidResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Enum0Array); err != nil {
		return ArrayClientGetStringEnumValidResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getStringEnumValidHandleError handles the GetStringEnumValid error response.
func (client *ArrayClient) getStringEnumValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetStringValid - Get string array value ['foo1', 'foo2', 'foo3']
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetStringValidOptions contains the optional parameters for the ArrayClient.GetStringValid method.
func (client *ArrayClient) GetStringValid(ctx context.Context, options *ArrayClientGetStringValidOptions) (ArrayClientGetStringValidResponse, error) {
	req, err := client.getStringValidCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetStringValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetStringValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetStringValidResponse{}, client.getStringValidHandleError(resp)
	}
	return client.getStringValidHandleResponse(resp)
}

// getStringValidCreateRequest creates the GetStringValid request.
func (client *ArrayClient) getStringValidCreateRequest(ctx context.Context, options *ArrayClientGetStringValidOptions) (*policy.Request, error) {
	urlPath := "/array/prim/string/foo1.foo2.foo3"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getStringValidHandleResponse handles the GetStringValid response.
func (client *ArrayClient) getStringValidHandleResponse(resp *http.Response) (ArrayClientGetStringValidResponse, error) {
	result := ArrayClientGetStringValidResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.StringArray); err != nil {
		return ArrayClientGetStringValidResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getStringValidHandleError handles the GetStringValid error response.
func (client *ArrayClient) getStringValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetStringWithInvalid - Get string array value ['foo', 123, 'foo2']
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetStringWithInvalidOptions contains the optional parameters for the ArrayClient.GetStringWithInvalid
// method.
func (client *ArrayClient) GetStringWithInvalid(ctx context.Context, options *ArrayClientGetStringWithInvalidOptions) (ArrayClientGetStringWithInvalidResponse, error) {
	req, err := client.getStringWithInvalidCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetStringWithInvalidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetStringWithInvalidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetStringWithInvalidResponse{}, client.getStringWithInvalidHandleError(resp)
	}
	return client.getStringWithInvalidHandleResponse(resp)
}

// getStringWithInvalidCreateRequest creates the GetStringWithInvalid request.
func (client *ArrayClient) getStringWithInvalidCreateRequest(ctx context.Context, options *ArrayClientGetStringWithInvalidOptions) (*policy.Request, error) {
	urlPath := "/array/prim/string/foo.123.foo2"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getStringWithInvalidHandleResponse handles the GetStringWithInvalid response.
func (client *ArrayClient) getStringWithInvalidHandleResponse(resp *http.Response) (ArrayClientGetStringWithInvalidResponse, error) {
	result := ArrayClientGetStringWithInvalidResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.StringArray); err != nil {
		return ArrayClientGetStringWithInvalidResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getStringWithInvalidHandleError handles the GetStringWithInvalid error response.
func (client *ArrayClient) getStringWithInvalidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetStringWithNull - Get string array value ['foo', null, 'foo2']
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetStringWithNullOptions contains the optional parameters for the ArrayClient.GetStringWithNull method.
func (client *ArrayClient) GetStringWithNull(ctx context.Context, options *ArrayClientGetStringWithNullOptions) (ArrayClientGetStringWithNullResponse, error) {
	req, err := client.getStringWithNullCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetStringWithNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetStringWithNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetStringWithNullResponse{}, client.getStringWithNullHandleError(resp)
	}
	return client.getStringWithNullHandleResponse(resp)
}

// getStringWithNullCreateRequest creates the GetStringWithNull request.
func (client *ArrayClient) getStringWithNullCreateRequest(ctx context.Context, options *ArrayClientGetStringWithNullOptions) (*policy.Request, error) {
	urlPath := "/array/prim/string/foo.null.foo2"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getStringWithNullHandleResponse handles the GetStringWithNull response.
func (client *ArrayClient) getStringWithNullHandleResponse(resp *http.Response) (ArrayClientGetStringWithNullResponse, error) {
	result := ArrayClientGetStringWithNullResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.StringArray); err != nil {
		return ArrayClientGetStringWithNullResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getStringWithNullHandleError handles the GetStringWithNull error response.
func (client *ArrayClient) getStringWithNullHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetUUIDInvalidChars - Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'foo']
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetUUIDInvalidCharsOptions contains the optional parameters for the ArrayClient.GetUUIDInvalidChars
// method.
func (client *ArrayClient) GetUUIDInvalidChars(ctx context.Context, options *ArrayClientGetUUIDInvalidCharsOptions) (ArrayClientGetUUIDInvalidCharsResponse, error) {
	req, err := client.getUUIDInvalidCharsCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetUUIDInvalidCharsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetUUIDInvalidCharsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetUUIDInvalidCharsResponse{}, client.getUUIDInvalidCharsHandleError(resp)
	}
	return client.getUUIDInvalidCharsHandleResponse(resp)
}

// getUUIDInvalidCharsCreateRequest creates the GetUUIDInvalidChars request.
func (client *ArrayClient) getUUIDInvalidCharsCreateRequest(ctx context.Context, options *ArrayClientGetUUIDInvalidCharsOptions) (*policy.Request, error) {
	urlPath := "/array/prim/uuid/invalidchars"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getUUIDInvalidCharsHandleResponse handles the GetUUIDInvalidChars response.
func (client *ArrayClient) getUUIDInvalidCharsHandleResponse(resp *http.Response) (ArrayClientGetUUIDInvalidCharsResponse, error) {
	result := ArrayClientGetUUIDInvalidCharsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.StringArray); err != nil {
		return ArrayClientGetUUIDInvalidCharsResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getUUIDInvalidCharsHandleError handles the GetUUIDInvalidChars error response.
func (client *ArrayClient) getUUIDInvalidCharsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetUUIDValid - Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
// If the operation fails it returns the *Error error type.
// options - ArrayClientGetUUIDValidOptions contains the optional parameters for the ArrayClient.GetUUIDValid method.
func (client *ArrayClient) GetUUIDValid(ctx context.Context, options *ArrayClientGetUUIDValidOptions) (ArrayClientGetUUIDValidResponse, error) {
	req, err := client.getUUIDValidCreateRequest(ctx, options)
	if err != nil {
		return ArrayClientGetUUIDValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientGetUUIDValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientGetUUIDValidResponse{}, client.getUUIDValidHandleError(resp)
	}
	return client.getUUIDValidHandleResponse(resp)
}

// getUUIDValidCreateRequest creates the GetUUIDValid request.
func (client *ArrayClient) getUUIDValidCreateRequest(ctx context.Context, options *ArrayClientGetUUIDValidOptions) (*policy.Request, error) {
	urlPath := "/array/prim/uuid/valid"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getUUIDValidHandleResponse handles the GetUUIDValid response.
func (client *ArrayClient) getUUIDValidHandleResponse(resp *http.Response) (ArrayClientGetUUIDValidResponse, error) {
	result := ArrayClientGetUUIDValidResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.StringArray); err != nil {
		return ArrayClientGetUUIDValidResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getUUIDValidHandleError handles the GetUUIDValid error response.
func (client *ArrayClient) getUUIDValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutArrayValid - Put An array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
// If the operation fails it returns the *Error error type.
// options - ArrayClientPutArrayValidOptions contains the optional parameters for the ArrayClient.PutArrayValid method.
func (client *ArrayClient) PutArrayValid(ctx context.Context, arrayBody [][]*string, options *ArrayClientPutArrayValidOptions) (ArrayClientPutArrayValidResponse, error) {
	req, err := client.putArrayValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return ArrayClientPutArrayValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientPutArrayValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientPutArrayValidResponse{}, client.putArrayValidHandleError(resp)
	}
	return ArrayClientPutArrayValidResponse{RawResponse: resp}, nil
}

// putArrayValidCreateRequest creates the PutArrayValid request.
func (client *ArrayClient) putArrayValidCreateRequest(ctx context.Context, arrayBody [][]*string, options *ArrayClientPutArrayValidOptions) (*policy.Request, error) {
	urlPath := "/array/array/valid"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, arrayBody)
}

// putArrayValidHandleError handles the PutArrayValid error response.
func (client *ArrayClient) putArrayValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutBooleanTfft - Set array value empty [true, false, false, true]
// If the operation fails it returns the *Error error type.
// options - ArrayClientPutBooleanTfftOptions contains the optional parameters for the ArrayClient.PutBooleanTfft method.
func (client *ArrayClient) PutBooleanTfft(ctx context.Context, arrayBody []*bool, options *ArrayClientPutBooleanTfftOptions) (ArrayClientPutBooleanTfftResponse, error) {
	req, err := client.putBooleanTfftCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return ArrayClientPutBooleanTfftResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientPutBooleanTfftResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientPutBooleanTfftResponse{}, client.putBooleanTfftHandleError(resp)
	}
	return ArrayClientPutBooleanTfftResponse{RawResponse: resp}, nil
}

// putBooleanTfftCreateRequest creates the PutBooleanTfft request.
func (client *ArrayClient) putBooleanTfftCreateRequest(ctx context.Context, arrayBody []*bool, options *ArrayClientPutBooleanTfftOptions) (*policy.Request, error) {
	urlPath := "/array/prim/boolean/tfft"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, arrayBody)
}

// putBooleanTfftHandleError handles the PutBooleanTfft error response.
func (client *ArrayClient) putBooleanTfftHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutByteValid - Put the array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each elementencoded in base
// 64
// If the operation fails it returns the *Error error type.
// options - ArrayClientPutByteValidOptions contains the optional parameters for the ArrayClient.PutByteValid method.
func (client *ArrayClient) PutByteValid(ctx context.Context, arrayBody [][]byte, options *ArrayClientPutByteValidOptions) (ArrayClientPutByteValidResponse, error) {
	req, err := client.putByteValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return ArrayClientPutByteValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientPutByteValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientPutByteValidResponse{}, client.putByteValidHandleError(resp)
	}
	return ArrayClientPutByteValidResponse{RawResponse: resp}, nil
}

// putByteValidCreateRequest creates the PutByteValid request.
func (client *ArrayClient) putByteValidCreateRequest(ctx context.Context, arrayBody [][]byte, options *ArrayClientPutByteValidOptions) (*policy.Request, error) {
	urlPath := "/array/prim/byte/valid"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, arrayBody)
}

// putByteValidHandleError handles the PutByteValid error response.
func (client *ArrayClient) putByteValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutComplexValid - Put an array of complex type with values [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'},
// {'integer': 5, 'string': '6'}]
// If the operation fails it returns the *Error error type.
// options - ArrayClientPutComplexValidOptions contains the optional parameters for the ArrayClient.PutComplexValid method.
func (client *ArrayClient) PutComplexValid(ctx context.Context, arrayBody []*Product, options *ArrayClientPutComplexValidOptions) (ArrayClientPutComplexValidResponse, error) {
	req, err := client.putComplexValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return ArrayClientPutComplexValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientPutComplexValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientPutComplexValidResponse{}, client.putComplexValidHandleError(resp)
	}
	return ArrayClientPutComplexValidResponse{RawResponse: resp}, nil
}

// putComplexValidCreateRequest creates the PutComplexValid request.
func (client *ArrayClient) putComplexValidCreateRequest(ctx context.Context, arrayBody []*Product, options *ArrayClientPutComplexValidOptions) (*policy.Request, error) {
	urlPath := "/array/complex/valid"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, arrayBody)
}

// putComplexValidHandleError handles the PutComplexValid error response.
func (client *ArrayClient) putComplexValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutDateTimeRFC1123Valid - Set array value ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct
// 1492 10:15:01 GMT']
// If the operation fails it returns the *Error error type.
// options - ArrayClientPutDateTimeRFC1123ValidOptions contains the optional parameters for the ArrayClient.PutDateTimeRFC1123Valid
// method.
func (client *ArrayClient) PutDateTimeRFC1123Valid(ctx context.Context, arrayBody []*time.Time, options *ArrayClientPutDateTimeRFC1123ValidOptions) (ArrayClientPutDateTimeRFC1123ValidResponse, error) {
	req, err := client.putDateTimeRFC1123ValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return ArrayClientPutDateTimeRFC1123ValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientPutDateTimeRFC1123ValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientPutDateTimeRFC1123ValidResponse{}, client.putDateTimeRFC1123ValidHandleError(resp)
	}
	return ArrayClientPutDateTimeRFC1123ValidResponse{RawResponse: resp}, nil
}

// putDateTimeRFC1123ValidCreateRequest creates the PutDateTimeRFC1123Valid request.
func (client *ArrayClient) putDateTimeRFC1123ValidCreateRequest(ctx context.Context, arrayBody []*time.Time, options *ArrayClientPutDateTimeRFC1123ValidOptions) (*policy.Request, error) {
	urlPath := "/array/prim/date-time-rfc1123/valid"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	aux := make([]*timeRFC1123, len(arrayBody), len(arrayBody))
	for i := 0; i < len(arrayBody); i++ {
		aux[i] = (*timeRFC1123)(arrayBody[i])
	}
	return req, runtime.MarshalAsJSON(req, aux)
}

// putDateTimeRFC1123ValidHandleError handles the PutDateTimeRFC1123Valid error response.
func (client *ArrayClient) putDateTimeRFC1123ValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutDateTimeValid - Set array value ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00']
// If the operation fails it returns the *Error error type.
// options - ArrayClientPutDateTimeValidOptions contains the optional parameters for the ArrayClient.PutDateTimeValid method.
func (client *ArrayClient) PutDateTimeValid(ctx context.Context, arrayBody []*time.Time, options *ArrayClientPutDateTimeValidOptions) (ArrayClientPutDateTimeValidResponse, error) {
	req, err := client.putDateTimeValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return ArrayClientPutDateTimeValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientPutDateTimeValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientPutDateTimeValidResponse{}, client.putDateTimeValidHandleError(resp)
	}
	return ArrayClientPutDateTimeValidResponse{RawResponse: resp}, nil
}

// putDateTimeValidCreateRequest creates the PutDateTimeValid request.
func (client *ArrayClient) putDateTimeValidCreateRequest(ctx context.Context, arrayBody []*time.Time, options *ArrayClientPutDateTimeValidOptions) (*policy.Request, error) {
	urlPath := "/array/prim/date-time/valid"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, arrayBody)
}

// putDateTimeValidHandleError handles the PutDateTimeValid error response.
func (client *ArrayClient) putDateTimeValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutDateValid - Set array value ['2000-12-01', '1980-01-02', '1492-10-12']
// If the operation fails it returns the *Error error type.
// options - ArrayClientPutDateValidOptions contains the optional parameters for the ArrayClient.PutDateValid method.
func (client *ArrayClient) PutDateValid(ctx context.Context, arrayBody []*time.Time, options *ArrayClientPutDateValidOptions) (ArrayClientPutDateValidResponse, error) {
	req, err := client.putDateValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return ArrayClientPutDateValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientPutDateValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientPutDateValidResponse{}, client.putDateValidHandleError(resp)
	}
	return ArrayClientPutDateValidResponse{RawResponse: resp}, nil
}

// putDateValidCreateRequest creates the PutDateValid request.
func (client *ArrayClient) putDateValidCreateRequest(ctx context.Context, arrayBody []*time.Time, options *ArrayClientPutDateValidOptions) (*policy.Request, error) {
	urlPath := "/array/prim/date/valid"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	aux := make([]*dateType, len(arrayBody), len(arrayBody))
	for i := 0; i < len(arrayBody); i++ {
		aux[i] = (*dateType)(arrayBody[i])
	}
	return req, runtime.MarshalAsJSON(req, aux)
}

// putDateValidHandleError handles the PutDateValid error response.
func (client *ArrayClient) putDateValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutDictionaryValid - Get an array of Dictionaries of type with value [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four',
// '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
// If the operation fails it returns the *Error error type.
// options - ArrayClientPutDictionaryValidOptions contains the optional parameters for the ArrayClient.PutDictionaryValid
// method.
func (client *ArrayClient) PutDictionaryValid(ctx context.Context, arrayBody []map[string]*string, options *ArrayClientPutDictionaryValidOptions) (ArrayClientPutDictionaryValidResponse, error) {
	req, err := client.putDictionaryValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return ArrayClientPutDictionaryValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientPutDictionaryValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientPutDictionaryValidResponse{}, client.putDictionaryValidHandleError(resp)
	}
	return ArrayClientPutDictionaryValidResponse{RawResponse: resp}, nil
}

// putDictionaryValidCreateRequest creates the PutDictionaryValid request.
func (client *ArrayClient) putDictionaryValidCreateRequest(ctx context.Context, arrayBody []map[string]*string, options *ArrayClientPutDictionaryValidOptions) (*policy.Request, error) {
	urlPath := "/array/dictionary/valid"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, arrayBody)
}

// putDictionaryValidHandleError handles the PutDictionaryValid error response.
func (client *ArrayClient) putDictionaryValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutDoubleValid - Set array value [0, -0.01, 1.2e20]
// If the operation fails it returns the *Error error type.
// options - ArrayClientPutDoubleValidOptions contains the optional parameters for the ArrayClient.PutDoubleValid method.
func (client *ArrayClient) PutDoubleValid(ctx context.Context, arrayBody []*float64, options *ArrayClientPutDoubleValidOptions) (ArrayClientPutDoubleValidResponse, error) {
	req, err := client.putDoubleValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return ArrayClientPutDoubleValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientPutDoubleValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientPutDoubleValidResponse{}, client.putDoubleValidHandleError(resp)
	}
	return ArrayClientPutDoubleValidResponse{RawResponse: resp}, nil
}

// putDoubleValidCreateRequest creates the PutDoubleValid request.
func (client *ArrayClient) putDoubleValidCreateRequest(ctx context.Context, arrayBody []*float64, options *ArrayClientPutDoubleValidOptions) (*policy.Request, error) {
	urlPath := "/array/prim/double/0--0.01-1.2e20"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, arrayBody)
}

// putDoubleValidHandleError handles the PutDoubleValid error response.
func (client *ArrayClient) putDoubleValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutDurationValid - Set array value ['P123DT22H14M12.011S', 'P5DT1H0M0S']
// If the operation fails it returns the *Error error type.
// options - ArrayClientPutDurationValidOptions contains the optional parameters for the ArrayClient.PutDurationValid method.
func (client *ArrayClient) PutDurationValid(ctx context.Context, arrayBody []*string, options *ArrayClientPutDurationValidOptions) (ArrayClientPutDurationValidResponse, error) {
	req, err := client.putDurationValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return ArrayClientPutDurationValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientPutDurationValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientPutDurationValidResponse{}, client.putDurationValidHandleError(resp)
	}
	return ArrayClientPutDurationValidResponse{RawResponse: resp}, nil
}

// putDurationValidCreateRequest creates the PutDurationValid request.
func (client *ArrayClient) putDurationValidCreateRequest(ctx context.Context, arrayBody []*string, options *ArrayClientPutDurationValidOptions) (*policy.Request, error) {
	urlPath := "/array/prim/duration/valid"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, arrayBody)
}

// putDurationValidHandleError handles the PutDurationValid error response.
func (client *ArrayClient) putDurationValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutEmpty - Set array value empty []
// If the operation fails it returns the *Error error type.
// options - ArrayClientPutEmptyOptions contains the optional parameters for the ArrayClient.PutEmpty method.
func (client *ArrayClient) PutEmpty(ctx context.Context, arrayBody []*string, options *ArrayClientPutEmptyOptions) (ArrayClientPutEmptyResponse, error) {
	req, err := client.putEmptyCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return ArrayClientPutEmptyResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientPutEmptyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientPutEmptyResponse{}, client.putEmptyHandleError(resp)
	}
	return ArrayClientPutEmptyResponse{RawResponse: resp}, nil
}

// putEmptyCreateRequest creates the PutEmpty request.
func (client *ArrayClient) putEmptyCreateRequest(ctx context.Context, arrayBody []*string, options *ArrayClientPutEmptyOptions) (*policy.Request, error) {
	urlPath := "/array/empty"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, arrayBody)
}

// putEmptyHandleError handles the PutEmpty error response.
func (client *ArrayClient) putEmptyHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutEnumValid - Set array value ['foo1', 'foo2', 'foo3']
// If the operation fails it returns the *Error error type.
// options - ArrayClientPutEnumValidOptions contains the optional parameters for the ArrayClient.PutEnumValid method.
func (client *ArrayClient) PutEnumValid(ctx context.Context, arrayBody []*FooEnum, options *ArrayClientPutEnumValidOptions) (ArrayClientPutEnumValidResponse, error) {
	req, err := client.putEnumValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return ArrayClientPutEnumValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientPutEnumValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientPutEnumValidResponse{}, client.putEnumValidHandleError(resp)
	}
	return ArrayClientPutEnumValidResponse{RawResponse: resp}, nil
}

// putEnumValidCreateRequest creates the PutEnumValid request.
func (client *ArrayClient) putEnumValidCreateRequest(ctx context.Context, arrayBody []*FooEnum, options *ArrayClientPutEnumValidOptions) (*policy.Request, error) {
	urlPath := "/array/prim/enum/foo1.foo2.foo3"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, arrayBody)
}

// putEnumValidHandleError handles the PutEnumValid error response.
func (client *ArrayClient) putEnumValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutFloatValid - Set array value [0, -0.01, 1.2e20]
// If the operation fails it returns the *Error error type.
// options - ArrayClientPutFloatValidOptions contains the optional parameters for the ArrayClient.PutFloatValid method.
func (client *ArrayClient) PutFloatValid(ctx context.Context, arrayBody []*float32, options *ArrayClientPutFloatValidOptions) (ArrayClientPutFloatValidResponse, error) {
	req, err := client.putFloatValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return ArrayClientPutFloatValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientPutFloatValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientPutFloatValidResponse{}, client.putFloatValidHandleError(resp)
	}
	return ArrayClientPutFloatValidResponse{RawResponse: resp}, nil
}

// putFloatValidCreateRequest creates the PutFloatValid request.
func (client *ArrayClient) putFloatValidCreateRequest(ctx context.Context, arrayBody []*float32, options *ArrayClientPutFloatValidOptions) (*policy.Request, error) {
	urlPath := "/array/prim/float/0--0.01-1.2e20"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, arrayBody)
}

// putFloatValidHandleError handles the PutFloatValid error response.
func (client *ArrayClient) putFloatValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutIntegerValid - Set array value empty [1, -1, 3, 300]
// If the operation fails it returns the *Error error type.
// options - ArrayClientPutIntegerValidOptions contains the optional parameters for the ArrayClient.PutIntegerValid method.
func (client *ArrayClient) PutIntegerValid(ctx context.Context, arrayBody []*int32, options *ArrayClientPutIntegerValidOptions) (ArrayClientPutIntegerValidResponse, error) {
	req, err := client.putIntegerValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return ArrayClientPutIntegerValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientPutIntegerValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientPutIntegerValidResponse{}, client.putIntegerValidHandleError(resp)
	}
	return ArrayClientPutIntegerValidResponse{RawResponse: resp}, nil
}

// putIntegerValidCreateRequest creates the PutIntegerValid request.
func (client *ArrayClient) putIntegerValidCreateRequest(ctx context.Context, arrayBody []*int32, options *ArrayClientPutIntegerValidOptions) (*policy.Request, error) {
	urlPath := "/array/prim/integer/1.-1.3.300"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, arrayBody)
}

// putIntegerValidHandleError handles the PutIntegerValid error response.
func (client *ArrayClient) putIntegerValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutLongValid - Set array value empty [1, -1, 3, 300]
// If the operation fails it returns the *Error error type.
// options - ArrayClientPutLongValidOptions contains the optional parameters for the ArrayClient.PutLongValid method.
func (client *ArrayClient) PutLongValid(ctx context.Context, arrayBody []*int64, options *ArrayClientPutLongValidOptions) (ArrayClientPutLongValidResponse, error) {
	req, err := client.putLongValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return ArrayClientPutLongValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientPutLongValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientPutLongValidResponse{}, client.putLongValidHandleError(resp)
	}
	return ArrayClientPutLongValidResponse{RawResponse: resp}, nil
}

// putLongValidCreateRequest creates the PutLongValid request.
func (client *ArrayClient) putLongValidCreateRequest(ctx context.Context, arrayBody []*int64, options *ArrayClientPutLongValidOptions) (*policy.Request, error) {
	urlPath := "/array/prim/long/1.-1.3.300"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, arrayBody)
}

// putLongValidHandleError handles the PutLongValid error response.
func (client *ArrayClient) putLongValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutStringEnumValid - Set array value ['foo1', 'foo2', 'foo3']
// If the operation fails it returns the *Error error type.
// options - ArrayClientPutStringEnumValidOptions contains the optional parameters for the ArrayClient.PutStringEnumValid
// method.
func (client *ArrayClient) PutStringEnumValid(ctx context.Context, arrayBody []*Enum1, options *ArrayClientPutStringEnumValidOptions) (ArrayClientPutStringEnumValidResponse, error) {
	req, err := client.putStringEnumValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return ArrayClientPutStringEnumValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientPutStringEnumValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientPutStringEnumValidResponse{}, client.putStringEnumValidHandleError(resp)
	}
	return ArrayClientPutStringEnumValidResponse{RawResponse: resp}, nil
}

// putStringEnumValidCreateRequest creates the PutStringEnumValid request.
func (client *ArrayClient) putStringEnumValidCreateRequest(ctx context.Context, arrayBody []*Enum1, options *ArrayClientPutStringEnumValidOptions) (*policy.Request, error) {
	urlPath := "/array/prim/string-enum/foo1.foo2.foo3"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, arrayBody)
}

// putStringEnumValidHandleError handles the PutStringEnumValid error response.
func (client *ArrayClient) putStringEnumValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutStringValid - Set array value ['foo1', 'foo2', 'foo3']
// If the operation fails it returns the *Error error type.
// options - ArrayClientPutStringValidOptions contains the optional parameters for the ArrayClient.PutStringValid method.
func (client *ArrayClient) PutStringValid(ctx context.Context, arrayBody []*string, options *ArrayClientPutStringValidOptions) (ArrayClientPutStringValidResponse, error) {
	req, err := client.putStringValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return ArrayClientPutStringValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientPutStringValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientPutStringValidResponse{}, client.putStringValidHandleError(resp)
	}
	return ArrayClientPutStringValidResponse{RawResponse: resp}, nil
}

// putStringValidCreateRequest creates the PutStringValid request.
func (client *ArrayClient) putStringValidCreateRequest(ctx context.Context, arrayBody []*string, options *ArrayClientPutStringValidOptions) (*policy.Request, error) {
	urlPath := "/array/prim/string/foo1.foo2.foo3"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, arrayBody)
}

// putStringValidHandleError handles the PutStringValid error response.
func (client *ArrayClient) putStringValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PutUUIDValid - Set array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
// If the operation fails it returns the *Error error type.
// options - ArrayClientPutUUIDValidOptions contains the optional parameters for the ArrayClient.PutUUIDValid method.
func (client *ArrayClient) PutUUIDValid(ctx context.Context, arrayBody []*string, options *ArrayClientPutUUIDValidOptions) (ArrayClientPutUUIDValidResponse, error) {
	req, err := client.putUUIDValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return ArrayClientPutUUIDValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ArrayClientPutUUIDValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ArrayClientPutUUIDValidResponse{}, client.putUUIDValidHandleError(resp)
	}
	return ArrayClientPutUUIDValidResponse{RawResponse: resp}, nil
}

// putUUIDValidCreateRequest creates the PutUUIDValid request.
func (client *ArrayClient) putUUIDValidCreateRequest(ctx context.Context, arrayBody []*string, options *ArrayClientPutUUIDValidOptions) (*policy.Request, error) {
	urlPath := "/array/prim/uuid/valid"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, arrayBody)
}

// putUUIDValidHandleError handles the PutUUIDValid error response.
func (client *ArrayClient) putUUIDValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
