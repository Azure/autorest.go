// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package arraygroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"path"
	"time"
)

// ArrayOperations contains the methods for the Array group.
type ArrayOperations interface {
	// GetArrayEmpty - Get an empty array []
	GetArrayEmpty(ctx context.Context) (*StringArrayArrayResponse, error)
	// GetArrayItemEmpty - Get an array of array of strings [['1', '2', '3'], [], ['7', '8', '9']]
	GetArrayItemEmpty(ctx context.Context) (*StringArrayArrayResponse, error)
	// GetArrayItemNull - Get an array of array of strings [['1', '2', '3'], null, ['7', '8', '9']]
	GetArrayItemNull(ctx context.Context) (*StringArrayArrayResponse, error)
	// GetArrayNull - Get a null array
	GetArrayNull(ctx context.Context) (*StringArrayArrayResponse, error)
	// GetArrayValid - Get an array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
	GetArrayValid(ctx context.Context) (*StringArrayArrayResponse, error)
	// GetBase64URL - Get array value ['a string that gets encoded with base64url', 'test string' 'Lorem ipsum'] with the items base64url encoded
	GetBase64URL(ctx context.Context) (*ByteArrayArrayResponse, error)
	// GetBooleanInvalidNull - Get boolean array value [true, null, false]
	GetBooleanInvalidNull(ctx context.Context) (*BoolArrayResponse, error)
	// GetBooleanInvalidString - Get boolean array value [true, 'boolean', false]
	GetBooleanInvalidString(ctx context.Context) (*BoolArrayResponse, error)
	// GetBooleanTfft - Get boolean array value [true, false, false, true]
	GetBooleanTfft(ctx context.Context) (*BoolArrayResponse, error)
	// GetByteInvalidNull - Get byte array value [hex(AB, AC, AD), null] with the first item base64 encoded
	GetByteInvalidNull(ctx context.Context) (*ByteArrayArrayResponse, error)
	// GetByteValid - Get byte array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each item encoded in base64
	GetByteValid(ctx context.Context) (*ByteArrayArrayResponse, error)
	// GetComplexEmpty - Get empty array of complex type []
	GetComplexEmpty(ctx context.Context) (*ProductArrayResponse, error)
	// GetComplexItemEmpty - Get array of complex type with empty item [{'integer': 1 'string': '2'}, {}, {'integer': 5, 'string': '6'}]
	GetComplexItemEmpty(ctx context.Context) (*ProductArrayResponse, error)
	// GetComplexItemNull - Get array of complex type with null item [{'integer': 1 'string': '2'}, null, {'integer': 5, 'string': '6'}]
	GetComplexItemNull(ctx context.Context) (*ProductArrayResponse, error)
	// GetComplexNull - Get array of complex type null value
	GetComplexNull(ctx context.Context) (*ProductArrayResponse, error)
	// GetComplexValid - Get array of complex type with [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer': 5, 'string': '6'}]
	GetComplexValid(ctx context.Context) (*ProductArrayResponse, error)
	// GetDateInvalidChars - Get date array value ['2011-03-22', 'date']
	GetDateInvalidChars(ctx context.Context) (*TimeArrayResponse, error)
	// GetDateInvalidNull - Get date array value ['2012-01-01', null, '1776-07-04']
	GetDateInvalidNull(ctx context.Context) (*TimeArrayResponse, error)
	// GetDateTimeInvalidChars - Get date array value ['2000-12-01t00:00:01z', 'date-time']
	GetDateTimeInvalidChars(ctx context.Context) (*TimeArrayResponse, error)
	// GetDateTimeInvalidNull - Get date array value ['2000-12-01t00:00:01z', null]
	GetDateTimeInvalidNull(ctx context.Context) (*TimeArrayResponse, error)
	// GetDateTimeRFC1123Valid - Get date-time array value ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct 1492 10:15:01 GMT']
	GetDateTimeRFC1123Valid(ctx context.Context) (*TimeArrayResponse, error)
	// GetDateTimeValid - Get date-time array value ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00']
	GetDateTimeValid(ctx context.Context) (*TimeArrayResponse, error)
	// GetDateValid - Get integer array value ['2000-12-01', '1980-01-02', '1492-10-12']
	GetDateValid(ctx context.Context) (*TimeArrayResponse, error)
	// GetDictionaryEmpty - Get an array of Dictionaries of type <string, string> with value []
	GetDictionaryEmpty(ctx context.Context) (*MapOfStringArrayResponse, error)
	// GetDictionaryItemEmpty - Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3': 'three'}, {}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
	GetDictionaryItemEmpty(ctx context.Context) (*MapOfStringArrayResponse, error)
	// GetDictionaryItemNull - Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3': 'three'}, null, {'7': 'seven', '8': 'eight', '9': 'nine'}]
	GetDictionaryItemNull(ctx context.Context) (*MapOfStringArrayResponse, error)
	// GetDictionaryNull - Get an array of Dictionaries with value null
	GetDictionaryNull(ctx context.Context) (*MapOfStringArrayResponse, error)
	// GetDictionaryValid - Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
	GetDictionaryValid(ctx context.Context) (*MapOfStringArrayResponse, error)
	// GetDoubleInvalidNull - Get float array value [0.0, null, -1.2e20]
	GetDoubleInvalidNull(ctx context.Context) (*Float64ArrayResponse, error)
	// GetDoubleInvalidString - Get boolean array value [1.0, 'number', 0.0]
	GetDoubleInvalidString(ctx context.Context) (*Float64ArrayResponse, error)
	// GetDoubleValid - Get float array value [0, -0.01, 1.2e20]
	GetDoubleValid(ctx context.Context) (*Float64ArrayResponse, error)
	// GetDurationValid - Get duration array value ['P123DT22H14M12.011S', 'P5DT1H0M0S']
	GetDurationValid(ctx context.Context) (*StringArrayResponse, error)
	// GetEmpty - Get empty array value []
	GetEmpty(ctx context.Context) (*Int32ArrayResponse, error)
	// GetEnumValid - Get enum array value ['foo1', 'foo2', 'foo3']
	GetEnumValid(ctx context.Context) (*FooEnumArrayResponse, error)
	// GetFloatInvalidNull - Get float array value [0.0, null, -1.2e20]
	GetFloatInvalidNull(ctx context.Context) (*Float32ArrayResponse, error)
	// GetFloatInvalidString - Get boolean array value [1.0, 'number', 0.0]
	GetFloatInvalidString(ctx context.Context) (*Float32ArrayResponse, error)
	// GetFloatValid - Get float array value [0, -0.01, 1.2e20]
	GetFloatValid(ctx context.Context) (*Float32ArrayResponse, error)
	// GetIntInvalidNull - Get integer array value [1, null, 0]
	GetIntInvalidNull(ctx context.Context) (*Int32ArrayResponse, error)
	// GetIntInvalidString - Get integer array value [1, 'integer', 0]
	GetIntInvalidString(ctx context.Context) (*Int32ArrayResponse, error)
	// GetIntegerValid - Get integer array value [1, -1, 3, 300]
	GetIntegerValid(ctx context.Context) (*Int32ArrayResponse, error)
	// GetInvalid - Get invalid array [1, 2, 3
	GetInvalid(ctx context.Context) (*Int32ArrayResponse, error)
	// GetLongInvalidNull - Get long array value [1, null, 0]
	GetLongInvalidNull(ctx context.Context) (*Int64ArrayResponse, error)
	// GetLongInvalidString - Get long array value [1, 'integer', 0]
	GetLongInvalidString(ctx context.Context) (*Int64ArrayResponse, error)
	// GetLongValid - Get integer array value [1, -1, 3, 300]
	GetLongValid(ctx context.Context) (*Int64ArrayResponse, error)
	// GetNull - Get null array value
	GetNull(ctx context.Context) (*Int32ArrayResponse, error)
	// GetStringEnumValid - Get enum array value ['foo1', 'foo2', 'foo3']
	GetStringEnumValid(ctx context.Context) (*Enum0ArrayResponse, error)
	// GetStringValid - Get string array value ['foo1', 'foo2', 'foo3']
	GetStringValid(ctx context.Context) (*StringArrayResponse, error)
	// GetStringWithInvalid - Get string array value ['foo', 123, 'foo2']
	GetStringWithInvalid(ctx context.Context) (*StringArrayResponse, error)
	// GetStringWithNull - Get string array value ['foo', null, 'foo2']
	GetStringWithNull(ctx context.Context) (*StringArrayResponse, error)
	// GetUUIDInvalidChars - Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'foo']
	GetUUIDInvalidChars(ctx context.Context) (*StringArrayResponse, error)
	// GetUUIDValid - Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
	GetUUIDValid(ctx context.Context) (*StringArrayResponse, error)
	// PutArrayValid - Put An array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
	PutArrayValid(ctx context.Context, arrayBody [][]string) (*http.Response, error)
	// PutBooleanTfft - Set array value empty [true, false, false, true]
	PutBooleanTfft(ctx context.Context, arrayBody []bool) (*http.Response, error)
	// PutByteValid - Put the array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each elementencoded in base 64
	PutByteValid(ctx context.Context, arrayBody [][]byte) (*http.Response, error)
	// PutComplexValid - Put an array of complex type with values [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer': 5, 'string': '6'}]
	PutComplexValid(ctx context.Context, arrayBody []Product) (*http.Response, error)
	// PutDateTimeRFC1123Valid - Set array value  ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct 1492 10:15:01 GMT']
	PutDateTimeRFC1123Valid(ctx context.Context, arrayBody []time.Time) (*http.Response, error)
	// PutDateTimeValid - Set array value  ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00']
	PutDateTimeValid(ctx context.Context, arrayBody []time.Time) (*http.Response, error)
	// PutDateValid - Set array value  ['2000-12-01', '1980-01-02', '1492-10-12']
	PutDateValid(ctx context.Context, arrayBody []time.Time) (*http.Response, error)
	// PutDictionaryValid - Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
	PutDictionaryValid(ctx context.Context, arrayBody []map[string]string) (*http.Response, error)
	// PutDoubleValid - Set array value [0, -0.01, 1.2e20]
	PutDoubleValid(ctx context.Context, arrayBody []float64) (*http.Response, error)
	// PutDurationValid - Set array value  ['P123DT22H14M12.011S', 'P5DT1H0M0S']
	PutDurationValid(ctx context.Context, arrayBody []string) (*http.Response, error)
	// PutEmpty - Set array value empty []
	PutEmpty(ctx context.Context, arrayBody []string) (*http.Response, error)
	// PutEnumValid - Set array value ['foo1', 'foo2', 'foo3']
	PutEnumValid(ctx context.Context, arrayBody []FooEnum) (*http.Response, error)
	// PutFloatValid - Set array value [0, -0.01, 1.2e20]
	PutFloatValid(ctx context.Context, arrayBody []float32) (*http.Response, error)
	// PutIntegerValid - Set array value empty [1, -1, 3, 300]
	PutIntegerValid(ctx context.Context, arrayBody []int32) (*http.Response, error)
	// PutLongValid - Set array value empty [1, -1, 3, 300]
	PutLongValid(ctx context.Context, arrayBody []int64) (*http.Response, error)
	// PutStringEnumValid - Set array value ['foo1', 'foo2', 'foo3']
	PutStringEnumValid(ctx context.Context, arrayBody []Enum1) (*http.Response, error)
	// PutStringValid - Set array value ['foo1', 'foo2', 'foo3']
	PutStringValid(ctx context.Context, arrayBody []string) (*http.Response, error)
	// PutUUIDValid - Set array value  ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
	PutUUIDValid(ctx context.Context, arrayBody []string) (*http.Response, error)
}

// ArrayClient implements the ArrayOperations interface.
// Don't use this type directly, use NewArrayClient() instead.
type ArrayClient struct {
	*Client
}

// NewArrayClient creates a new instance of ArrayClient with the specified values.
func NewArrayClient(c *Client) ArrayOperations {
	return &ArrayClient{Client: c}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *ArrayClient) Do(ctx context.Context, req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(ctx, req)
}

// GetArrayEmpty - Get an empty array []
func (client *ArrayClient) GetArrayEmpty(ctx context.Context) (*StringArrayArrayResponse, error) {
	req, err := client.GetArrayEmptyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetArrayEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetArrayEmptyCreateRequest creates the GetArrayEmpty request.
func (client *ArrayClient) GetArrayEmptyCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/array/empty"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetArrayEmptyHandleResponse handles the GetArrayEmpty response.
func (client *ArrayClient) GetArrayEmptyHandleResponse(resp *azcore.Response) (*StringArrayArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetArrayEmptyHandleError(resp)
	}
	result := StringArrayArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArrayArray)
}

// GetArrayEmptyHandleError handles the GetArrayEmpty error response.
func (client *ArrayClient) GetArrayEmptyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetArrayItemEmpty - Get an array of array of strings [['1', '2', '3'], [], ['7', '8', '9']]
func (client *ArrayClient) GetArrayItemEmpty(ctx context.Context) (*StringArrayArrayResponse, error) {
	req, err := client.GetArrayItemEmptyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetArrayItemEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetArrayItemEmptyCreateRequest creates the GetArrayItemEmpty request.
func (client *ArrayClient) GetArrayItemEmptyCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/array/itemempty"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetArrayItemEmptyHandleResponse handles the GetArrayItemEmpty response.
func (client *ArrayClient) GetArrayItemEmptyHandleResponse(resp *azcore.Response) (*StringArrayArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetArrayItemEmptyHandleError(resp)
	}
	result := StringArrayArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArrayArray)
}

// GetArrayItemEmptyHandleError handles the GetArrayItemEmpty error response.
func (client *ArrayClient) GetArrayItemEmptyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetArrayItemNull - Get an array of array of strings [['1', '2', '3'], null, ['7', '8', '9']]
func (client *ArrayClient) GetArrayItemNull(ctx context.Context) (*StringArrayArrayResponse, error) {
	req, err := client.GetArrayItemNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetArrayItemNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetArrayItemNullCreateRequest creates the GetArrayItemNull request.
func (client *ArrayClient) GetArrayItemNullCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/array/itemnull"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetArrayItemNullHandleResponse handles the GetArrayItemNull response.
func (client *ArrayClient) GetArrayItemNullHandleResponse(resp *azcore.Response) (*StringArrayArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetArrayItemNullHandleError(resp)
	}
	result := StringArrayArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArrayArray)
}

// GetArrayItemNullHandleError handles the GetArrayItemNull error response.
func (client *ArrayClient) GetArrayItemNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetArrayNull - Get a null array
func (client *ArrayClient) GetArrayNull(ctx context.Context) (*StringArrayArrayResponse, error) {
	req, err := client.GetArrayNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetArrayNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetArrayNullCreateRequest creates the GetArrayNull request.
func (client *ArrayClient) GetArrayNullCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/array/null"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetArrayNullHandleResponse handles the GetArrayNull response.
func (client *ArrayClient) GetArrayNullHandleResponse(resp *azcore.Response) (*StringArrayArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetArrayNullHandleError(resp)
	}
	result := StringArrayArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArrayArray)
}

// GetArrayNullHandleError handles the GetArrayNull error response.
func (client *ArrayClient) GetArrayNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetArrayValid - Get an array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
func (client *ArrayClient) GetArrayValid(ctx context.Context) (*StringArrayArrayResponse, error) {
	req, err := client.GetArrayValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetArrayValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetArrayValidCreateRequest creates the GetArrayValid request.
func (client *ArrayClient) GetArrayValidCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/array/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetArrayValidHandleResponse handles the GetArrayValid response.
func (client *ArrayClient) GetArrayValidHandleResponse(resp *azcore.Response) (*StringArrayArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetArrayValidHandleError(resp)
	}
	result := StringArrayArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArrayArray)
}

// GetArrayValidHandleError handles the GetArrayValid error response.
func (client *ArrayClient) GetArrayValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetBase64URL - Get array value ['a string that gets encoded with base64url', 'test string' 'Lorem ipsum'] with the items base64url encoded
func (client *ArrayClient) GetBase64URL(ctx context.Context) (*ByteArrayArrayResponse, error) {
	req, err := client.GetBase64URLCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetBase64URLHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetBase64URLCreateRequest creates the GetBase64URL request.
func (client *ArrayClient) GetBase64URLCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/base64url/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetBase64URLHandleResponse handles the GetBase64URL response.
func (client *ArrayClient) GetBase64URLHandleResponse(resp *azcore.Response) (*ByteArrayArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetBase64URLHandleError(resp)
	}
	result := ByteArrayArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ByteArrayArray)
}

// GetBase64URLHandleError handles the GetBase64URL error response.
func (client *ArrayClient) GetBase64URLHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetBooleanInvalidNull - Get boolean array value [true, null, false]
func (client *ArrayClient) GetBooleanInvalidNull(ctx context.Context) (*BoolArrayResponse, error) {
	req, err := client.GetBooleanInvalidNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetBooleanInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetBooleanInvalidNullCreateRequest creates the GetBooleanInvalidNull request.
func (client *ArrayClient) GetBooleanInvalidNullCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/boolean/true.null.false"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetBooleanInvalidNullHandleResponse handles the GetBooleanInvalidNull response.
func (client *ArrayClient) GetBooleanInvalidNullHandleResponse(resp *azcore.Response) (*BoolArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetBooleanInvalidNullHandleError(resp)
	}
	result := BoolArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.BoolArray)
}

// GetBooleanInvalidNullHandleError handles the GetBooleanInvalidNull error response.
func (client *ArrayClient) GetBooleanInvalidNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetBooleanInvalidString - Get boolean array value [true, 'boolean', false]
func (client *ArrayClient) GetBooleanInvalidString(ctx context.Context) (*BoolArrayResponse, error) {
	req, err := client.GetBooleanInvalidStringCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetBooleanInvalidStringHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetBooleanInvalidStringCreateRequest creates the GetBooleanInvalidString request.
func (client *ArrayClient) GetBooleanInvalidStringCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/boolean/true.boolean.false"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetBooleanInvalidStringHandleResponse handles the GetBooleanInvalidString response.
func (client *ArrayClient) GetBooleanInvalidStringHandleResponse(resp *azcore.Response) (*BoolArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetBooleanInvalidStringHandleError(resp)
	}
	result := BoolArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.BoolArray)
}

// GetBooleanInvalidStringHandleError handles the GetBooleanInvalidString error response.
func (client *ArrayClient) GetBooleanInvalidStringHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetBooleanTfft - Get boolean array value [true, false, false, true]
func (client *ArrayClient) GetBooleanTfft(ctx context.Context) (*BoolArrayResponse, error) {
	req, err := client.GetBooleanTfftCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetBooleanTfftHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetBooleanTfftCreateRequest creates the GetBooleanTfft request.
func (client *ArrayClient) GetBooleanTfftCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/boolean/tfft"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetBooleanTfftHandleResponse handles the GetBooleanTfft response.
func (client *ArrayClient) GetBooleanTfftHandleResponse(resp *azcore.Response) (*BoolArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetBooleanTfftHandleError(resp)
	}
	result := BoolArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.BoolArray)
}

// GetBooleanTfftHandleError handles the GetBooleanTfft error response.
func (client *ArrayClient) GetBooleanTfftHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetByteInvalidNull - Get byte array value [hex(AB, AC, AD), null] with the first item base64 encoded
func (client *ArrayClient) GetByteInvalidNull(ctx context.Context) (*ByteArrayArrayResponse, error) {
	req, err := client.GetByteInvalidNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetByteInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetByteInvalidNullCreateRequest creates the GetByteInvalidNull request.
func (client *ArrayClient) GetByteInvalidNullCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/byte/invalidnull"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetByteInvalidNullHandleResponse handles the GetByteInvalidNull response.
func (client *ArrayClient) GetByteInvalidNullHandleResponse(resp *azcore.Response) (*ByteArrayArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetByteInvalidNullHandleError(resp)
	}
	result := ByteArrayArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ByteArrayArray)
}

// GetByteInvalidNullHandleError handles the GetByteInvalidNull error response.
func (client *ArrayClient) GetByteInvalidNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetByteValid - Get byte array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each item encoded in base64
func (client *ArrayClient) GetByteValid(ctx context.Context) (*ByteArrayArrayResponse, error) {
	req, err := client.GetByteValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetByteValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetByteValidCreateRequest creates the GetByteValid request.
func (client *ArrayClient) GetByteValidCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/byte/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetByteValidHandleResponse handles the GetByteValid response.
func (client *ArrayClient) GetByteValidHandleResponse(resp *azcore.Response) (*ByteArrayArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetByteValidHandleError(resp)
	}
	result := ByteArrayArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ByteArrayArray)
}

// GetByteValidHandleError handles the GetByteValid error response.
func (client *ArrayClient) GetByteValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetComplexEmpty - Get empty array of complex type []
func (client *ArrayClient) GetComplexEmpty(ctx context.Context) (*ProductArrayResponse, error) {
	req, err := client.GetComplexEmptyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetComplexEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetComplexEmptyCreateRequest creates the GetComplexEmpty request.
func (client *ArrayClient) GetComplexEmptyCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/complex/empty"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetComplexEmptyHandleResponse handles the GetComplexEmpty response.
func (client *ArrayClient) GetComplexEmptyHandleResponse(resp *azcore.Response) (*ProductArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetComplexEmptyHandleError(resp)
	}
	result := ProductArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ProductArray)
}

// GetComplexEmptyHandleError handles the GetComplexEmpty error response.
func (client *ArrayClient) GetComplexEmptyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetComplexItemEmpty - Get array of complex type with empty item [{'integer': 1 'string': '2'}, {}, {'integer': 5, 'string': '6'}]
func (client *ArrayClient) GetComplexItemEmpty(ctx context.Context) (*ProductArrayResponse, error) {
	req, err := client.GetComplexItemEmptyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetComplexItemEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetComplexItemEmptyCreateRequest creates the GetComplexItemEmpty request.
func (client *ArrayClient) GetComplexItemEmptyCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/complex/itemempty"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetComplexItemEmptyHandleResponse handles the GetComplexItemEmpty response.
func (client *ArrayClient) GetComplexItemEmptyHandleResponse(resp *azcore.Response) (*ProductArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetComplexItemEmptyHandleError(resp)
	}
	result := ProductArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ProductArray)
}

// GetComplexItemEmptyHandleError handles the GetComplexItemEmpty error response.
func (client *ArrayClient) GetComplexItemEmptyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetComplexItemNull - Get array of complex type with null item [{'integer': 1 'string': '2'}, null, {'integer': 5, 'string': '6'}]
func (client *ArrayClient) GetComplexItemNull(ctx context.Context) (*ProductArrayResponse, error) {
	req, err := client.GetComplexItemNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetComplexItemNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetComplexItemNullCreateRequest creates the GetComplexItemNull request.
func (client *ArrayClient) GetComplexItemNullCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/complex/itemnull"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetComplexItemNullHandleResponse handles the GetComplexItemNull response.
func (client *ArrayClient) GetComplexItemNullHandleResponse(resp *azcore.Response) (*ProductArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetComplexItemNullHandleError(resp)
	}
	result := ProductArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ProductArray)
}

// GetComplexItemNullHandleError handles the GetComplexItemNull error response.
func (client *ArrayClient) GetComplexItemNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetComplexNull - Get array of complex type null value
func (client *ArrayClient) GetComplexNull(ctx context.Context) (*ProductArrayResponse, error) {
	req, err := client.GetComplexNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetComplexNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetComplexNullCreateRequest creates the GetComplexNull request.
func (client *ArrayClient) GetComplexNullCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/complex/null"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetComplexNullHandleResponse handles the GetComplexNull response.
func (client *ArrayClient) GetComplexNullHandleResponse(resp *azcore.Response) (*ProductArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetComplexNullHandleError(resp)
	}
	result := ProductArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ProductArray)
}

// GetComplexNullHandleError handles the GetComplexNull error response.
func (client *ArrayClient) GetComplexNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetComplexValid - Get array of complex type with [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer': 5, 'string': '6'}]
func (client *ArrayClient) GetComplexValid(ctx context.Context) (*ProductArrayResponse, error) {
	req, err := client.GetComplexValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetComplexValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetComplexValidCreateRequest creates the GetComplexValid request.
func (client *ArrayClient) GetComplexValidCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/complex/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetComplexValidHandleResponse handles the GetComplexValid response.
func (client *ArrayClient) GetComplexValidHandleResponse(resp *azcore.Response) (*ProductArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetComplexValidHandleError(resp)
	}
	result := ProductArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ProductArray)
}

// GetComplexValidHandleError handles the GetComplexValid error response.
func (client *ArrayClient) GetComplexValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDateInvalidChars - Get date array value ['2011-03-22', 'date']
func (client *ArrayClient) GetDateInvalidChars(ctx context.Context) (*TimeArrayResponse, error) {
	req, err := client.GetDateInvalidCharsCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetDateInvalidCharsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetDateInvalidCharsCreateRequest creates the GetDateInvalidChars request.
func (client *ArrayClient) GetDateInvalidCharsCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/date/invalidchars"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetDateInvalidCharsHandleResponse handles the GetDateInvalidChars response.
func (client *ArrayClient) GetDateInvalidCharsHandleResponse(resp *azcore.Response) (*TimeArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDateInvalidCharsHandleError(resp)
	}
	result := TimeArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.TimeArray)
}

// GetDateInvalidCharsHandleError handles the GetDateInvalidChars error response.
func (client *ArrayClient) GetDateInvalidCharsHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDateInvalidNull - Get date array value ['2012-01-01', null, '1776-07-04']
func (client *ArrayClient) GetDateInvalidNull(ctx context.Context) (*TimeArrayResponse, error) {
	req, err := client.GetDateInvalidNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetDateInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetDateInvalidNullCreateRequest creates the GetDateInvalidNull request.
func (client *ArrayClient) GetDateInvalidNullCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/date/invalidnull"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetDateInvalidNullHandleResponse handles the GetDateInvalidNull response.
func (client *ArrayClient) GetDateInvalidNullHandleResponse(resp *azcore.Response) (*TimeArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDateInvalidNullHandleError(resp)
	}
	result := TimeArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.TimeArray)
}

// GetDateInvalidNullHandleError handles the GetDateInvalidNull error response.
func (client *ArrayClient) GetDateInvalidNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDateTimeInvalidChars - Get date array value ['2000-12-01t00:00:01z', 'date-time']
func (client *ArrayClient) GetDateTimeInvalidChars(ctx context.Context) (*TimeArrayResponse, error) {
	req, err := client.GetDateTimeInvalidCharsCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetDateTimeInvalidCharsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetDateTimeInvalidCharsCreateRequest creates the GetDateTimeInvalidChars request.
func (client *ArrayClient) GetDateTimeInvalidCharsCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/date-time/invalidchars"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetDateTimeInvalidCharsHandleResponse handles the GetDateTimeInvalidChars response.
func (client *ArrayClient) GetDateTimeInvalidCharsHandleResponse(resp *azcore.Response) (*TimeArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDateTimeInvalidCharsHandleError(resp)
	}
	var aux *[]timeRFC3339
	if err := resp.UnmarshalAsJSON(&aux); err != nil {
		return nil, err
	}
	cp := make([]time.Time, len(*aux), len(*aux))
	for i := 0; i < len(*aux); i++ {
		cp[i] = time.Time((*aux)[i])
	}
	return &TimeArrayResponse{RawResponse: resp.Response, TimeArray: &cp}, nil
}

// GetDateTimeInvalidCharsHandleError handles the GetDateTimeInvalidChars error response.
func (client *ArrayClient) GetDateTimeInvalidCharsHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDateTimeInvalidNull - Get date array value ['2000-12-01t00:00:01z', null]
func (client *ArrayClient) GetDateTimeInvalidNull(ctx context.Context) (*TimeArrayResponse, error) {
	req, err := client.GetDateTimeInvalidNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetDateTimeInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetDateTimeInvalidNullCreateRequest creates the GetDateTimeInvalidNull request.
func (client *ArrayClient) GetDateTimeInvalidNullCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/date-time/invalidnull"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetDateTimeInvalidNullHandleResponse handles the GetDateTimeInvalidNull response.
func (client *ArrayClient) GetDateTimeInvalidNullHandleResponse(resp *azcore.Response) (*TimeArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDateTimeInvalidNullHandleError(resp)
	}
	var aux *[]timeRFC3339
	if err := resp.UnmarshalAsJSON(&aux); err != nil {
		return nil, err
	}
	cp := make([]time.Time, len(*aux), len(*aux))
	for i := 0; i < len(*aux); i++ {
		cp[i] = time.Time((*aux)[i])
	}
	return &TimeArrayResponse{RawResponse: resp.Response, TimeArray: &cp}, nil
}

// GetDateTimeInvalidNullHandleError handles the GetDateTimeInvalidNull error response.
func (client *ArrayClient) GetDateTimeInvalidNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDateTimeRFC1123Valid - Get date-time array value ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct 1492 10:15:01 GMT']
func (client *ArrayClient) GetDateTimeRFC1123Valid(ctx context.Context) (*TimeArrayResponse, error) {
	req, err := client.GetDateTimeRFC1123ValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetDateTimeRFC1123ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetDateTimeRFC1123ValidCreateRequest creates the GetDateTimeRFC1123Valid request.
func (client *ArrayClient) GetDateTimeRFC1123ValidCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/date-time-rfc1123/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetDateTimeRFC1123ValidHandleResponse handles the GetDateTimeRFC1123Valid response.
func (client *ArrayClient) GetDateTimeRFC1123ValidHandleResponse(resp *azcore.Response) (*TimeArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDateTimeRFC1123ValidHandleError(resp)
	}
	var aux *[]timeRFC1123
	if err := resp.UnmarshalAsJSON(&aux); err != nil {
		return nil, err
	}
	cp := make([]time.Time, len(*aux), len(*aux))
	for i := 0; i < len(*aux); i++ {
		cp[i] = time.Time((*aux)[i])
	}
	return &TimeArrayResponse{RawResponse: resp.Response, TimeArray: &cp}, nil
}

// GetDateTimeRFC1123ValidHandleError handles the GetDateTimeRFC1123Valid error response.
func (client *ArrayClient) GetDateTimeRFC1123ValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDateTimeValid - Get date-time array value ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00']
func (client *ArrayClient) GetDateTimeValid(ctx context.Context) (*TimeArrayResponse, error) {
	req, err := client.GetDateTimeValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetDateTimeValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetDateTimeValidCreateRequest creates the GetDateTimeValid request.
func (client *ArrayClient) GetDateTimeValidCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/date-time/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetDateTimeValidHandleResponse handles the GetDateTimeValid response.
func (client *ArrayClient) GetDateTimeValidHandleResponse(resp *azcore.Response) (*TimeArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDateTimeValidHandleError(resp)
	}
	var aux *[]timeRFC3339
	if err := resp.UnmarshalAsJSON(&aux); err != nil {
		return nil, err
	}
	cp := make([]time.Time, len(*aux), len(*aux))
	for i := 0; i < len(*aux); i++ {
		cp[i] = time.Time((*aux)[i])
	}
	return &TimeArrayResponse{RawResponse: resp.Response, TimeArray: &cp}, nil
}

// GetDateTimeValidHandleError handles the GetDateTimeValid error response.
func (client *ArrayClient) GetDateTimeValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDateValid - Get integer array value ['2000-12-01', '1980-01-02', '1492-10-12']
func (client *ArrayClient) GetDateValid(ctx context.Context) (*TimeArrayResponse, error) {
	req, err := client.GetDateValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetDateValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetDateValidCreateRequest creates the GetDateValid request.
func (client *ArrayClient) GetDateValidCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/date/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetDateValidHandleResponse handles the GetDateValid response.
func (client *ArrayClient) GetDateValidHandleResponse(resp *azcore.Response) (*TimeArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDateValidHandleError(resp)
	}
	result := TimeArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.TimeArray)
}

// GetDateValidHandleError handles the GetDateValid error response.
func (client *ArrayClient) GetDateValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDictionaryEmpty - Get an array of Dictionaries of type <string, string> with value []
func (client *ArrayClient) GetDictionaryEmpty(ctx context.Context) (*MapOfStringArrayResponse, error) {
	req, err := client.GetDictionaryEmptyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetDictionaryEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetDictionaryEmptyCreateRequest creates the GetDictionaryEmpty request.
func (client *ArrayClient) GetDictionaryEmptyCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/dictionary/empty"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetDictionaryEmptyHandleResponse handles the GetDictionaryEmpty response.
func (client *ArrayClient) GetDictionaryEmptyHandleResponse(resp *azcore.Response) (*MapOfStringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDictionaryEmptyHandleError(resp)
	}
	result := MapOfStringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MapOfStringArray)
}

// GetDictionaryEmptyHandleError handles the GetDictionaryEmpty error response.
func (client *ArrayClient) GetDictionaryEmptyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDictionaryItemEmpty - Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3': 'three'}, {}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
func (client *ArrayClient) GetDictionaryItemEmpty(ctx context.Context) (*MapOfStringArrayResponse, error) {
	req, err := client.GetDictionaryItemEmptyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetDictionaryItemEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetDictionaryItemEmptyCreateRequest creates the GetDictionaryItemEmpty request.
func (client *ArrayClient) GetDictionaryItemEmptyCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/dictionary/itemempty"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetDictionaryItemEmptyHandleResponse handles the GetDictionaryItemEmpty response.
func (client *ArrayClient) GetDictionaryItemEmptyHandleResponse(resp *azcore.Response) (*MapOfStringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDictionaryItemEmptyHandleError(resp)
	}
	result := MapOfStringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MapOfStringArray)
}

// GetDictionaryItemEmptyHandleError handles the GetDictionaryItemEmpty error response.
func (client *ArrayClient) GetDictionaryItemEmptyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDictionaryItemNull - Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3': 'three'}, null, {'7': 'seven', '8': 'eight', '9': 'nine'}]
func (client *ArrayClient) GetDictionaryItemNull(ctx context.Context) (*MapOfStringArrayResponse, error) {
	req, err := client.GetDictionaryItemNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetDictionaryItemNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetDictionaryItemNullCreateRequest creates the GetDictionaryItemNull request.
func (client *ArrayClient) GetDictionaryItemNullCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/dictionary/itemnull"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetDictionaryItemNullHandleResponse handles the GetDictionaryItemNull response.
func (client *ArrayClient) GetDictionaryItemNullHandleResponse(resp *azcore.Response) (*MapOfStringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDictionaryItemNullHandleError(resp)
	}
	result := MapOfStringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MapOfStringArray)
}

// GetDictionaryItemNullHandleError handles the GetDictionaryItemNull error response.
func (client *ArrayClient) GetDictionaryItemNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDictionaryNull - Get an array of Dictionaries with value null
func (client *ArrayClient) GetDictionaryNull(ctx context.Context) (*MapOfStringArrayResponse, error) {
	req, err := client.GetDictionaryNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetDictionaryNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetDictionaryNullCreateRequest creates the GetDictionaryNull request.
func (client *ArrayClient) GetDictionaryNullCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/dictionary/null"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetDictionaryNullHandleResponse handles the GetDictionaryNull response.
func (client *ArrayClient) GetDictionaryNullHandleResponse(resp *azcore.Response) (*MapOfStringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDictionaryNullHandleError(resp)
	}
	result := MapOfStringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MapOfStringArray)
}

// GetDictionaryNullHandleError handles the GetDictionaryNull error response.
func (client *ArrayClient) GetDictionaryNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDictionaryValid - Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
func (client *ArrayClient) GetDictionaryValid(ctx context.Context) (*MapOfStringArrayResponse, error) {
	req, err := client.GetDictionaryValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetDictionaryValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetDictionaryValidCreateRequest creates the GetDictionaryValid request.
func (client *ArrayClient) GetDictionaryValidCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/dictionary/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetDictionaryValidHandleResponse handles the GetDictionaryValid response.
func (client *ArrayClient) GetDictionaryValidHandleResponse(resp *azcore.Response) (*MapOfStringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDictionaryValidHandleError(resp)
	}
	result := MapOfStringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MapOfStringArray)
}

// GetDictionaryValidHandleError handles the GetDictionaryValid error response.
func (client *ArrayClient) GetDictionaryValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDoubleInvalidNull - Get float array value [0.0, null, -1.2e20]
func (client *ArrayClient) GetDoubleInvalidNull(ctx context.Context) (*Float64ArrayResponse, error) {
	req, err := client.GetDoubleInvalidNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetDoubleInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetDoubleInvalidNullCreateRequest creates the GetDoubleInvalidNull request.
func (client *ArrayClient) GetDoubleInvalidNullCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/double/0.0-null-1.2e20"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetDoubleInvalidNullHandleResponse handles the GetDoubleInvalidNull response.
func (client *ArrayClient) GetDoubleInvalidNullHandleResponse(resp *azcore.Response) (*Float64ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDoubleInvalidNullHandleError(resp)
	}
	result := Float64ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Float64Array)
}

// GetDoubleInvalidNullHandleError handles the GetDoubleInvalidNull error response.
func (client *ArrayClient) GetDoubleInvalidNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDoubleInvalidString - Get boolean array value [1.0, 'number', 0.0]
func (client *ArrayClient) GetDoubleInvalidString(ctx context.Context) (*Float64ArrayResponse, error) {
	req, err := client.GetDoubleInvalidStringCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetDoubleInvalidStringHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetDoubleInvalidStringCreateRequest creates the GetDoubleInvalidString request.
func (client *ArrayClient) GetDoubleInvalidStringCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/double/1.number.0"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetDoubleInvalidStringHandleResponse handles the GetDoubleInvalidString response.
func (client *ArrayClient) GetDoubleInvalidStringHandleResponse(resp *azcore.Response) (*Float64ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDoubleInvalidStringHandleError(resp)
	}
	result := Float64ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Float64Array)
}

// GetDoubleInvalidStringHandleError handles the GetDoubleInvalidString error response.
func (client *ArrayClient) GetDoubleInvalidStringHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDoubleValid - Get float array value [0, -0.01, 1.2e20]
func (client *ArrayClient) GetDoubleValid(ctx context.Context) (*Float64ArrayResponse, error) {
	req, err := client.GetDoubleValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetDoubleValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetDoubleValidCreateRequest creates the GetDoubleValid request.
func (client *ArrayClient) GetDoubleValidCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/double/0--0.01-1.2e20"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetDoubleValidHandleResponse handles the GetDoubleValid response.
func (client *ArrayClient) GetDoubleValidHandleResponse(resp *azcore.Response) (*Float64ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDoubleValidHandleError(resp)
	}
	result := Float64ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Float64Array)
}

// GetDoubleValidHandleError handles the GetDoubleValid error response.
func (client *ArrayClient) GetDoubleValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetDurationValid - Get duration array value ['P123DT22H14M12.011S', 'P5DT1H0M0S']
func (client *ArrayClient) GetDurationValid(ctx context.Context) (*StringArrayResponse, error) {
	req, err := client.GetDurationValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetDurationValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetDurationValidCreateRequest creates the GetDurationValid request.
func (client *ArrayClient) GetDurationValidCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/duration/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetDurationValidHandleResponse handles the GetDurationValid response.
func (client *ArrayClient) GetDurationValidHandleResponse(resp *azcore.Response) (*StringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDurationValidHandleError(resp)
	}
	result := StringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArray)
}

// GetDurationValidHandleError handles the GetDurationValid error response.
func (client *ArrayClient) GetDurationValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetEmpty - Get empty array value []
func (client *ArrayClient) GetEmpty(ctx context.Context) (*Int32ArrayResponse, error) {
	req, err := client.GetEmptyCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetEmptyCreateRequest creates the GetEmpty request.
func (client *ArrayClient) GetEmptyCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/empty"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetEmptyHandleResponse handles the GetEmpty response.
func (client *ArrayClient) GetEmptyHandleResponse(resp *azcore.Response) (*Int32ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetEmptyHandleError(resp)
	}
	result := Int32ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Int32Array)
}

// GetEmptyHandleError handles the GetEmpty error response.
func (client *ArrayClient) GetEmptyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetEnumValid - Get enum array value ['foo1', 'foo2', 'foo3']
func (client *ArrayClient) GetEnumValid(ctx context.Context) (*FooEnumArrayResponse, error) {
	req, err := client.GetEnumValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetEnumValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetEnumValidCreateRequest creates the GetEnumValid request.
func (client *ArrayClient) GetEnumValidCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/enum/foo1.foo2.foo3"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetEnumValidHandleResponse handles the GetEnumValid response.
func (client *ArrayClient) GetEnumValidHandleResponse(resp *azcore.Response) (*FooEnumArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetEnumValidHandleError(resp)
	}
	result := FooEnumArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.FooEnumArray)
}

// GetEnumValidHandleError handles the GetEnumValid error response.
func (client *ArrayClient) GetEnumValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetFloatInvalidNull - Get float array value [0.0, null, -1.2e20]
func (client *ArrayClient) GetFloatInvalidNull(ctx context.Context) (*Float32ArrayResponse, error) {
	req, err := client.GetFloatInvalidNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetFloatInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetFloatInvalidNullCreateRequest creates the GetFloatInvalidNull request.
func (client *ArrayClient) GetFloatInvalidNullCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/float/0.0-null-1.2e20"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetFloatInvalidNullHandleResponse handles the GetFloatInvalidNull response.
func (client *ArrayClient) GetFloatInvalidNullHandleResponse(resp *azcore.Response) (*Float32ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetFloatInvalidNullHandleError(resp)
	}
	result := Float32ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Float32Array)
}

// GetFloatInvalidNullHandleError handles the GetFloatInvalidNull error response.
func (client *ArrayClient) GetFloatInvalidNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetFloatInvalidString - Get boolean array value [1.0, 'number', 0.0]
func (client *ArrayClient) GetFloatInvalidString(ctx context.Context) (*Float32ArrayResponse, error) {
	req, err := client.GetFloatInvalidStringCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetFloatInvalidStringHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetFloatInvalidStringCreateRequest creates the GetFloatInvalidString request.
func (client *ArrayClient) GetFloatInvalidStringCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/float/1.number.0"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetFloatInvalidStringHandleResponse handles the GetFloatInvalidString response.
func (client *ArrayClient) GetFloatInvalidStringHandleResponse(resp *azcore.Response) (*Float32ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetFloatInvalidStringHandleError(resp)
	}
	result := Float32ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Float32Array)
}

// GetFloatInvalidStringHandleError handles the GetFloatInvalidString error response.
func (client *ArrayClient) GetFloatInvalidStringHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetFloatValid - Get float array value [0, -0.01, 1.2e20]
func (client *ArrayClient) GetFloatValid(ctx context.Context) (*Float32ArrayResponse, error) {
	req, err := client.GetFloatValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetFloatValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetFloatValidCreateRequest creates the GetFloatValid request.
func (client *ArrayClient) GetFloatValidCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/float/0--0.01-1.2e20"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetFloatValidHandleResponse handles the GetFloatValid response.
func (client *ArrayClient) GetFloatValidHandleResponse(resp *azcore.Response) (*Float32ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetFloatValidHandleError(resp)
	}
	result := Float32ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Float32Array)
}

// GetFloatValidHandleError handles the GetFloatValid error response.
func (client *ArrayClient) GetFloatValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetIntInvalidNull - Get integer array value [1, null, 0]
func (client *ArrayClient) GetIntInvalidNull(ctx context.Context) (*Int32ArrayResponse, error) {
	req, err := client.GetIntInvalidNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetIntInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetIntInvalidNullCreateRequest creates the GetIntInvalidNull request.
func (client *ArrayClient) GetIntInvalidNullCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/integer/1.null.zero"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetIntInvalidNullHandleResponse handles the GetIntInvalidNull response.
func (client *ArrayClient) GetIntInvalidNullHandleResponse(resp *azcore.Response) (*Int32ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetIntInvalidNullHandleError(resp)
	}
	result := Int32ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Int32Array)
}

// GetIntInvalidNullHandleError handles the GetIntInvalidNull error response.
func (client *ArrayClient) GetIntInvalidNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetIntInvalidString - Get integer array value [1, 'integer', 0]
func (client *ArrayClient) GetIntInvalidString(ctx context.Context) (*Int32ArrayResponse, error) {
	req, err := client.GetIntInvalidStringCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetIntInvalidStringHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetIntInvalidStringCreateRequest creates the GetIntInvalidString request.
func (client *ArrayClient) GetIntInvalidStringCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/integer/1.integer.0"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetIntInvalidStringHandleResponse handles the GetIntInvalidString response.
func (client *ArrayClient) GetIntInvalidStringHandleResponse(resp *azcore.Response) (*Int32ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetIntInvalidStringHandleError(resp)
	}
	result := Int32ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Int32Array)
}

// GetIntInvalidStringHandleError handles the GetIntInvalidString error response.
func (client *ArrayClient) GetIntInvalidStringHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetIntegerValid - Get integer array value [1, -1, 3, 300]
func (client *ArrayClient) GetIntegerValid(ctx context.Context) (*Int32ArrayResponse, error) {
	req, err := client.GetIntegerValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetIntegerValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetIntegerValidCreateRequest creates the GetIntegerValid request.
func (client *ArrayClient) GetIntegerValidCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/integer/1.-1.3.300"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetIntegerValidHandleResponse handles the GetIntegerValid response.
func (client *ArrayClient) GetIntegerValidHandleResponse(resp *azcore.Response) (*Int32ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetIntegerValidHandleError(resp)
	}
	result := Int32ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Int32Array)
}

// GetIntegerValidHandleError handles the GetIntegerValid error response.
func (client *ArrayClient) GetIntegerValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetInvalid - Get invalid array [1, 2, 3
func (client *ArrayClient) GetInvalid(ctx context.Context) (*Int32ArrayResponse, error) {
	req, err := client.GetInvalidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetInvalidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetInvalidCreateRequest creates the GetInvalid request.
func (client *ArrayClient) GetInvalidCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/invalid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetInvalidHandleResponse handles the GetInvalid response.
func (client *ArrayClient) GetInvalidHandleResponse(resp *azcore.Response) (*Int32ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetInvalidHandleError(resp)
	}
	result := Int32ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Int32Array)
}

// GetInvalidHandleError handles the GetInvalid error response.
func (client *ArrayClient) GetInvalidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetLongInvalidNull - Get long array value [1, null, 0]
func (client *ArrayClient) GetLongInvalidNull(ctx context.Context) (*Int64ArrayResponse, error) {
	req, err := client.GetLongInvalidNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetLongInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetLongInvalidNullCreateRequest creates the GetLongInvalidNull request.
func (client *ArrayClient) GetLongInvalidNullCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/long/1.null.zero"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetLongInvalidNullHandleResponse handles the GetLongInvalidNull response.
func (client *ArrayClient) GetLongInvalidNullHandleResponse(resp *azcore.Response) (*Int64ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetLongInvalidNullHandleError(resp)
	}
	result := Int64ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Int64Array)
}

// GetLongInvalidNullHandleError handles the GetLongInvalidNull error response.
func (client *ArrayClient) GetLongInvalidNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetLongInvalidString - Get long array value [1, 'integer', 0]
func (client *ArrayClient) GetLongInvalidString(ctx context.Context) (*Int64ArrayResponse, error) {
	req, err := client.GetLongInvalidStringCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetLongInvalidStringHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetLongInvalidStringCreateRequest creates the GetLongInvalidString request.
func (client *ArrayClient) GetLongInvalidStringCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/long/1.integer.0"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetLongInvalidStringHandleResponse handles the GetLongInvalidString response.
func (client *ArrayClient) GetLongInvalidStringHandleResponse(resp *azcore.Response) (*Int64ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetLongInvalidStringHandleError(resp)
	}
	result := Int64ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Int64Array)
}

// GetLongInvalidStringHandleError handles the GetLongInvalidString error response.
func (client *ArrayClient) GetLongInvalidStringHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetLongValid - Get integer array value [1, -1, 3, 300]
func (client *ArrayClient) GetLongValid(ctx context.Context) (*Int64ArrayResponse, error) {
	req, err := client.GetLongValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetLongValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetLongValidCreateRequest creates the GetLongValid request.
func (client *ArrayClient) GetLongValidCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/long/1.-1.3.300"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetLongValidHandleResponse handles the GetLongValid response.
func (client *ArrayClient) GetLongValidHandleResponse(resp *azcore.Response) (*Int64ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetLongValidHandleError(resp)
	}
	result := Int64ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Int64Array)
}

// GetLongValidHandleError handles the GetLongValid error response.
func (client *ArrayClient) GetLongValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetNull - Get null array value
func (client *ArrayClient) GetNull(ctx context.Context) (*Int32ArrayResponse, error) {
	req, err := client.GetNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetNullCreateRequest creates the GetNull request.
func (client *ArrayClient) GetNullCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/null"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetNullHandleResponse handles the GetNull response.
func (client *ArrayClient) GetNullHandleResponse(resp *azcore.Response) (*Int32ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetNullHandleError(resp)
	}
	result := Int32ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Int32Array)
}

// GetNullHandleError handles the GetNull error response.
func (client *ArrayClient) GetNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetStringEnumValid - Get enum array value ['foo1', 'foo2', 'foo3']
func (client *ArrayClient) GetStringEnumValid(ctx context.Context) (*Enum0ArrayResponse, error) {
	req, err := client.GetStringEnumValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetStringEnumValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetStringEnumValidCreateRequest creates the GetStringEnumValid request.
func (client *ArrayClient) GetStringEnumValidCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/string-enum/foo1.foo2.foo3"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetStringEnumValidHandleResponse handles the GetStringEnumValid response.
func (client *ArrayClient) GetStringEnumValidHandleResponse(resp *azcore.Response) (*Enum0ArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetStringEnumValidHandleError(resp)
	}
	result := Enum0ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Enum0Array)
}

// GetStringEnumValidHandleError handles the GetStringEnumValid error response.
func (client *ArrayClient) GetStringEnumValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetStringValid - Get string array value ['foo1', 'foo2', 'foo3']
func (client *ArrayClient) GetStringValid(ctx context.Context) (*StringArrayResponse, error) {
	req, err := client.GetStringValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetStringValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetStringValidCreateRequest creates the GetStringValid request.
func (client *ArrayClient) GetStringValidCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/string/foo1.foo2.foo3"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetStringValidHandleResponse handles the GetStringValid response.
func (client *ArrayClient) GetStringValidHandleResponse(resp *azcore.Response) (*StringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetStringValidHandleError(resp)
	}
	result := StringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArray)
}

// GetStringValidHandleError handles the GetStringValid error response.
func (client *ArrayClient) GetStringValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetStringWithInvalid - Get string array value ['foo', 123, 'foo2']
func (client *ArrayClient) GetStringWithInvalid(ctx context.Context) (*StringArrayResponse, error) {
	req, err := client.GetStringWithInvalidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetStringWithInvalidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetStringWithInvalidCreateRequest creates the GetStringWithInvalid request.
func (client *ArrayClient) GetStringWithInvalidCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/string/foo.123.foo2"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetStringWithInvalidHandleResponse handles the GetStringWithInvalid response.
func (client *ArrayClient) GetStringWithInvalidHandleResponse(resp *azcore.Response) (*StringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetStringWithInvalidHandleError(resp)
	}
	result := StringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArray)
}

// GetStringWithInvalidHandleError handles the GetStringWithInvalid error response.
func (client *ArrayClient) GetStringWithInvalidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetStringWithNull - Get string array value ['foo', null, 'foo2']
func (client *ArrayClient) GetStringWithNull(ctx context.Context) (*StringArrayResponse, error) {
	req, err := client.GetStringWithNullCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetStringWithNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetStringWithNullCreateRequest creates the GetStringWithNull request.
func (client *ArrayClient) GetStringWithNullCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/string/foo.null.foo2"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetStringWithNullHandleResponse handles the GetStringWithNull response.
func (client *ArrayClient) GetStringWithNullHandleResponse(resp *azcore.Response) (*StringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetStringWithNullHandleError(resp)
	}
	result := StringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArray)
}

// GetStringWithNullHandleError handles the GetStringWithNull error response.
func (client *ArrayClient) GetStringWithNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetUUIDInvalidChars - Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'foo']
func (client *ArrayClient) GetUUIDInvalidChars(ctx context.Context) (*StringArrayResponse, error) {
	req, err := client.GetUUIDInvalidCharsCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetUUIDInvalidCharsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetUUIDInvalidCharsCreateRequest creates the GetUUIDInvalidChars request.
func (client *ArrayClient) GetUUIDInvalidCharsCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/uuid/invalidchars"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetUUIDInvalidCharsHandleResponse handles the GetUUIDInvalidChars response.
func (client *ArrayClient) GetUUIDInvalidCharsHandleResponse(resp *azcore.Response) (*StringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetUUIDInvalidCharsHandleError(resp)
	}
	result := StringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArray)
}

// GetUUIDInvalidCharsHandleError handles the GetUUIDInvalidChars error response.
func (client *ArrayClient) GetUUIDInvalidCharsHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetUUIDValid - Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
func (client *ArrayClient) GetUUIDValid(ctx context.Context) (*StringArrayResponse, error) {
	req, err := client.GetUUIDValidCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetUUIDValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetUUIDValidCreateRequest creates the GetUUIDValid request.
func (client *ArrayClient) GetUUIDValidCreateRequest() (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/uuid/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// GetUUIDValidHandleResponse handles the GetUUIDValid response.
func (client *ArrayClient) GetUUIDValidHandleResponse(resp *azcore.Response) (*StringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetUUIDValidHandleError(resp)
	}
	result := StringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArray)
}

// GetUUIDValidHandleError handles the GetUUIDValid error response.
func (client *ArrayClient) GetUUIDValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutArrayValid - Put An array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
func (client *ArrayClient) PutArrayValid(ctx context.Context, arrayBody [][]string) (*http.Response, error) {
	req, err := client.PutArrayValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutArrayValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutArrayValidCreateRequest creates the PutArrayValid request.
func (client *ArrayClient) PutArrayValidCreateRequest(arrayBody [][]string) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/array/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// PutArrayValidHandleResponse handles the PutArrayValid response.
func (client *ArrayClient) PutArrayValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutArrayValidHandleError(resp)
	}
	return resp.Response, nil
}

// PutArrayValidHandleError handles the PutArrayValid error response.
func (client *ArrayClient) PutArrayValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutBooleanTfft - Set array value empty [true, false, false, true]
func (client *ArrayClient) PutBooleanTfft(ctx context.Context, arrayBody []bool) (*http.Response, error) {
	req, err := client.PutBooleanTfftCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutBooleanTfftHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutBooleanTfftCreateRequest creates the PutBooleanTfft request.
func (client *ArrayClient) PutBooleanTfftCreateRequest(arrayBody []bool) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/boolean/tfft"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// PutBooleanTfftHandleResponse handles the PutBooleanTfft response.
func (client *ArrayClient) PutBooleanTfftHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutBooleanTfftHandleError(resp)
	}
	return resp.Response, nil
}

// PutBooleanTfftHandleError handles the PutBooleanTfft error response.
func (client *ArrayClient) PutBooleanTfftHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutByteValid - Put the array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each elementencoded in base 64
func (client *ArrayClient) PutByteValid(ctx context.Context, arrayBody [][]byte) (*http.Response, error) {
	req, err := client.PutByteValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutByteValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutByteValidCreateRequest creates the PutByteValid request.
func (client *ArrayClient) PutByteValidCreateRequest(arrayBody [][]byte) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/byte/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// PutByteValidHandleResponse handles the PutByteValid response.
func (client *ArrayClient) PutByteValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutByteValidHandleError(resp)
	}
	return resp.Response, nil
}

// PutByteValidHandleError handles the PutByteValid error response.
func (client *ArrayClient) PutByteValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutComplexValid - Put an array of complex type with values [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer': 5, 'string': '6'}]
func (client *ArrayClient) PutComplexValid(ctx context.Context, arrayBody []Product) (*http.Response, error) {
	req, err := client.PutComplexValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutComplexValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutComplexValidCreateRequest creates the PutComplexValid request.
func (client *ArrayClient) PutComplexValidCreateRequest(arrayBody []Product) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/complex/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// PutComplexValidHandleResponse handles the PutComplexValid response.
func (client *ArrayClient) PutComplexValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutComplexValidHandleError(resp)
	}
	return resp.Response, nil
}

// PutComplexValidHandleError handles the PutComplexValid error response.
func (client *ArrayClient) PutComplexValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutDateTimeRFC1123Valid - Set array value  ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct 1492 10:15:01 GMT']
func (client *ArrayClient) PutDateTimeRFC1123Valid(ctx context.Context, arrayBody []time.Time) (*http.Response, error) {
	req, err := client.PutDateTimeRFC1123ValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutDateTimeRFC1123ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutDateTimeRFC1123ValidCreateRequest creates the PutDateTimeRFC1123Valid request.
func (client *ArrayClient) PutDateTimeRFC1123ValidCreateRequest(arrayBody []time.Time) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/date-time-rfc1123/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	aux := make([]timeRFC1123, len(arrayBody), len(arrayBody))
	for i := 0; i < len(arrayBody); i++ {
		aux[i] = timeRFC1123(arrayBody[i])
	}
	return req, req.MarshalAsJSON(aux)
}

// PutDateTimeRFC1123ValidHandleResponse handles the PutDateTimeRFC1123Valid response.
func (client *ArrayClient) PutDateTimeRFC1123ValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutDateTimeRFC1123ValidHandleError(resp)
	}
	return resp.Response, nil
}

// PutDateTimeRFC1123ValidHandleError handles the PutDateTimeRFC1123Valid error response.
func (client *ArrayClient) PutDateTimeRFC1123ValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutDateTimeValid - Set array value  ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00']
func (client *ArrayClient) PutDateTimeValid(ctx context.Context, arrayBody []time.Time) (*http.Response, error) {
	req, err := client.PutDateTimeValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutDateTimeValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutDateTimeValidCreateRequest creates the PutDateTimeValid request.
func (client *ArrayClient) PutDateTimeValidCreateRequest(arrayBody []time.Time) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/date-time/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// PutDateTimeValidHandleResponse handles the PutDateTimeValid response.
func (client *ArrayClient) PutDateTimeValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutDateTimeValidHandleError(resp)
	}
	return resp.Response, nil
}

// PutDateTimeValidHandleError handles the PutDateTimeValid error response.
func (client *ArrayClient) PutDateTimeValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutDateValid - Set array value  ['2000-12-01', '1980-01-02', '1492-10-12']
func (client *ArrayClient) PutDateValid(ctx context.Context, arrayBody []time.Time) (*http.Response, error) {
	req, err := client.PutDateValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutDateValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutDateValidCreateRequest creates the PutDateValid request.
func (client *ArrayClient) PutDateValidCreateRequest(arrayBody []time.Time) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/date/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// PutDateValidHandleResponse handles the PutDateValid response.
func (client *ArrayClient) PutDateValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutDateValidHandleError(resp)
	}
	return resp.Response, nil
}

// PutDateValidHandleError handles the PutDateValid error response.
func (client *ArrayClient) PutDateValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutDictionaryValid - Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
func (client *ArrayClient) PutDictionaryValid(ctx context.Context, arrayBody []map[string]string) (*http.Response, error) {
	req, err := client.PutDictionaryValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutDictionaryValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutDictionaryValidCreateRequest creates the PutDictionaryValid request.
func (client *ArrayClient) PutDictionaryValidCreateRequest(arrayBody []map[string]string) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/dictionary/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// PutDictionaryValidHandleResponse handles the PutDictionaryValid response.
func (client *ArrayClient) PutDictionaryValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutDictionaryValidHandleError(resp)
	}
	return resp.Response, nil
}

// PutDictionaryValidHandleError handles the PutDictionaryValid error response.
func (client *ArrayClient) PutDictionaryValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutDoubleValid - Set array value [0, -0.01, 1.2e20]
func (client *ArrayClient) PutDoubleValid(ctx context.Context, arrayBody []float64) (*http.Response, error) {
	req, err := client.PutDoubleValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutDoubleValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutDoubleValidCreateRequest creates the PutDoubleValid request.
func (client *ArrayClient) PutDoubleValidCreateRequest(arrayBody []float64) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/double/0--0.01-1.2e20"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// PutDoubleValidHandleResponse handles the PutDoubleValid response.
func (client *ArrayClient) PutDoubleValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutDoubleValidHandleError(resp)
	}
	return resp.Response, nil
}

// PutDoubleValidHandleError handles the PutDoubleValid error response.
func (client *ArrayClient) PutDoubleValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutDurationValid - Set array value  ['P123DT22H14M12.011S', 'P5DT1H0M0S']
func (client *ArrayClient) PutDurationValid(ctx context.Context, arrayBody []string) (*http.Response, error) {
	req, err := client.PutDurationValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutDurationValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutDurationValidCreateRequest creates the PutDurationValid request.
func (client *ArrayClient) PutDurationValidCreateRequest(arrayBody []string) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/duration/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// PutDurationValidHandleResponse handles the PutDurationValid response.
func (client *ArrayClient) PutDurationValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutDurationValidHandleError(resp)
	}
	return resp.Response, nil
}

// PutDurationValidHandleError handles the PutDurationValid error response.
func (client *ArrayClient) PutDurationValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutEmpty - Set array value empty []
func (client *ArrayClient) PutEmpty(ctx context.Context, arrayBody []string) (*http.Response, error) {
	req, err := client.PutEmptyCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutEmptyCreateRequest creates the PutEmpty request.
func (client *ArrayClient) PutEmptyCreateRequest(arrayBody []string) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/empty"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// PutEmptyHandleResponse handles the PutEmpty response.
func (client *ArrayClient) PutEmptyHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutEmptyHandleError(resp)
	}
	return resp.Response, nil
}

// PutEmptyHandleError handles the PutEmpty error response.
func (client *ArrayClient) PutEmptyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutEnumValid - Set array value ['foo1', 'foo2', 'foo3']
func (client *ArrayClient) PutEnumValid(ctx context.Context, arrayBody []FooEnum) (*http.Response, error) {
	req, err := client.PutEnumValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutEnumValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutEnumValidCreateRequest creates the PutEnumValid request.
func (client *ArrayClient) PutEnumValidCreateRequest(arrayBody []FooEnum) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/enum/foo1.foo2.foo3"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// PutEnumValidHandleResponse handles the PutEnumValid response.
func (client *ArrayClient) PutEnumValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutEnumValidHandleError(resp)
	}
	return resp.Response, nil
}

// PutEnumValidHandleError handles the PutEnumValid error response.
func (client *ArrayClient) PutEnumValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutFloatValid - Set array value [0, -0.01, 1.2e20]
func (client *ArrayClient) PutFloatValid(ctx context.Context, arrayBody []float32) (*http.Response, error) {
	req, err := client.PutFloatValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutFloatValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutFloatValidCreateRequest creates the PutFloatValid request.
func (client *ArrayClient) PutFloatValidCreateRequest(arrayBody []float32) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/float/0--0.01-1.2e20"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// PutFloatValidHandleResponse handles the PutFloatValid response.
func (client *ArrayClient) PutFloatValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutFloatValidHandleError(resp)
	}
	return resp.Response, nil
}

// PutFloatValidHandleError handles the PutFloatValid error response.
func (client *ArrayClient) PutFloatValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutIntegerValid - Set array value empty [1, -1, 3, 300]
func (client *ArrayClient) PutIntegerValid(ctx context.Context, arrayBody []int32) (*http.Response, error) {
	req, err := client.PutIntegerValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutIntegerValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutIntegerValidCreateRequest creates the PutIntegerValid request.
func (client *ArrayClient) PutIntegerValidCreateRequest(arrayBody []int32) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/integer/1.-1.3.300"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// PutIntegerValidHandleResponse handles the PutIntegerValid response.
func (client *ArrayClient) PutIntegerValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutIntegerValidHandleError(resp)
	}
	return resp.Response, nil
}

// PutIntegerValidHandleError handles the PutIntegerValid error response.
func (client *ArrayClient) PutIntegerValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutLongValid - Set array value empty [1, -1, 3, 300]
func (client *ArrayClient) PutLongValid(ctx context.Context, arrayBody []int64) (*http.Response, error) {
	req, err := client.PutLongValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutLongValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutLongValidCreateRequest creates the PutLongValid request.
func (client *ArrayClient) PutLongValidCreateRequest(arrayBody []int64) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/long/1.-1.3.300"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// PutLongValidHandleResponse handles the PutLongValid response.
func (client *ArrayClient) PutLongValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutLongValidHandleError(resp)
	}
	return resp.Response, nil
}

// PutLongValidHandleError handles the PutLongValid error response.
func (client *ArrayClient) PutLongValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutStringEnumValid - Set array value ['foo1', 'foo2', 'foo3']
func (client *ArrayClient) PutStringEnumValid(ctx context.Context, arrayBody []Enum1) (*http.Response, error) {
	req, err := client.PutStringEnumValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutStringEnumValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutStringEnumValidCreateRequest creates the PutStringEnumValid request.
func (client *ArrayClient) PutStringEnumValidCreateRequest(arrayBody []Enum1) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/string-enum/foo1.foo2.foo3"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// PutStringEnumValidHandleResponse handles the PutStringEnumValid response.
func (client *ArrayClient) PutStringEnumValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutStringEnumValidHandleError(resp)
	}
	return resp.Response, nil
}

// PutStringEnumValidHandleError handles the PutStringEnumValid error response.
func (client *ArrayClient) PutStringEnumValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutStringValid - Set array value ['foo1', 'foo2', 'foo3']
func (client *ArrayClient) PutStringValid(ctx context.Context, arrayBody []string) (*http.Response, error) {
	req, err := client.PutStringValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutStringValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutStringValidCreateRequest creates the PutStringValid request.
func (client *ArrayClient) PutStringValidCreateRequest(arrayBody []string) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/string/foo1.foo2.foo3"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// PutStringValidHandleResponse handles the PutStringValid response.
func (client *ArrayClient) PutStringValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutStringValidHandleError(resp)
	}
	return resp.Response, nil
}

// PutStringValidHandleError handles the PutStringValid error response.
func (client *ArrayClient) PutStringValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PutUUIDValid - Set array value  ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
func (client *ArrayClient) PutUUIDValid(ctx context.Context, arrayBody []string) (*http.Response, error) {
	req, err := client.PutUUIDValidCreateRequest(arrayBody)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.PutUUIDValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PutUUIDValidCreateRequest creates the PutUUIDValid request.
func (client *ArrayClient) PutUUIDValidCreateRequest(arrayBody []string) (*azcore.Request, error) {
	u, err := url.Parse(client.u)
	if err != nil {
		return nil, err
	}
	urlPath := "/array/prim/uuid/valid"
	u, err = u.Parse(path.Join(u.Path, urlPath))
	if err != nil {
		return nil, err
	}
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(arrayBody)
}

// PutUUIDValidHandleResponse handles the PutUUIDValid response.
func (client *ArrayClient) PutUUIDValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PutUUIDValidHandleError(resp)
	}
	return resp.Response, nil
}

// PutUUIDValidHandleError handles the PutUUIDValid error response.
func (client *ArrayClient) PutUUIDValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
