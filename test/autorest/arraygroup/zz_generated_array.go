// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package arraygroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"time"
)

// ArrayClient contains the methods for the Array group.
// Don't use this type directly, use NewArrayClient() instead.
type ArrayClient struct {
	con *Connection
}

// NewArrayClient creates a new instance of ArrayClient with the specified values.
func NewArrayClient(con *Connection) ArrayClient {
	return ArrayClient{con: con}
}

// Pipeline returns the pipeline associated with this client.
func (client ArrayClient) Pipeline() azcore.Pipeline {
	return client.con.Pipeline()
}

// GetArrayEmpty - Get an empty array []
func (client ArrayClient) GetArrayEmpty(ctx context.Context, options *ArrayGetArrayEmptyOptions) (*StringArrayArrayResponse, error) {
	req, err := client.getArrayEmptyCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getArrayEmptyHandleError(resp)
	}
	result, err := client.getArrayEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getArrayEmptyCreateRequest creates the GetArrayEmpty request.
func (client ArrayClient) getArrayEmptyCreateRequest(ctx context.Context, options *ArrayGetArrayEmptyOptions) (*azcore.Request, error) {
	urlPath := "/array/array/empty"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getArrayEmptyHandleResponse handles the GetArrayEmpty response.
func (client ArrayClient) getArrayEmptyHandleResponse(resp *azcore.Response) (*StringArrayArrayResponse, error) {
	result := StringArrayArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArrayArray)
}

// getArrayEmptyHandleError handles the GetArrayEmpty error response.
func (client ArrayClient) getArrayEmptyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetArrayItemEmpty - Get an array of array of strings [['1', '2', '3'], [], ['7', '8', '9']]
func (client ArrayClient) GetArrayItemEmpty(ctx context.Context, options *ArrayGetArrayItemEmptyOptions) (*StringArrayArrayResponse, error) {
	req, err := client.getArrayItemEmptyCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getArrayItemEmptyHandleError(resp)
	}
	result, err := client.getArrayItemEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getArrayItemEmptyCreateRequest creates the GetArrayItemEmpty request.
func (client ArrayClient) getArrayItemEmptyCreateRequest(ctx context.Context, options *ArrayGetArrayItemEmptyOptions) (*azcore.Request, error) {
	urlPath := "/array/array/itemempty"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getArrayItemEmptyHandleResponse handles the GetArrayItemEmpty response.
func (client ArrayClient) getArrayItemEmptyHandleResponse(resp *azcore.Response) (*StringArrayArrayResponse, error) {
	result := StringArrayArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArrayArray)
}

// getArrayItemEmptyHandleError handles the GetArrayItemEmpty error response.
func (client ArrayClient) getArrayItemEmptyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetArrayItemNull - Get an array of array of strings [['1', '2', '3'], null, ['7', '8', '9']]
func (client ArrayClient) GetArrayItemNull(ctx context.Context, options *ArrayGetArrayItemNullOptions) (*StringArrayArrayResponse, error) {
	req, err := client.getArrayItemNullCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getArrayItemNullHandleError(resp)
	}
	result, err := client.getArrayItemNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getArrayItemNullCreateRequest creates the GetArrayItemNull request.
func (client ArrayClient) getArrayItemNullCreateRequest(ctx context.Context, options *ArrayGetArrayItemNullOptions) (*azcore.Request, error) {
	urlPath := "/array/array/itemnull"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getArrayItemNullHandleResponse handles the GetArrayItemNull response.
func (client ArrayClient) getArrayItemNullHandleResponse(resp *azcore.Response) (*StringArrayArrayResponse, error) {
	result := StringArrayArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArrayArray)
}

// getArrayItemNullHandleError handles the GetArrayItemNull error response.
func (client ArrayClient) getArrayItemNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetArrayNull - Get a null array
func (client ArrayClient) GetArrayNull(ctx context.Context, options *ArrayGetArrayNullOptions) (*StringArrayArrayResponse, error) {
	req, err := client.getArrayNullCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getArrayNullHandleError(resp)
	}
	result, err := client.getArrayNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getArrayNullCreateRequest creates the GetArrayNull request.
func (client ArrayClient) getArrayNullCreateRequest(ctx context.Context, options *ArrayGetArrayNullOptions) (*azcore.Request, error) {
	urlPath := "/array/array/null"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getArrayNullHandleResponse handles the GetArrayNull response.
func (client ArrayClient) getArrayNullHandleResponse(resp *azcore.Response) (*StringArrayArrayResponse, error) {
	result := StringArrayArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArrayArray)
}

// getArrayNullHandleError handles the GetArrayNull error response.
func (client ArrayClient) getArrayNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetArrayValid - Get an array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
func (client ArrayClient) GetArrayValid(ctx context.Context, options *ArrayGetArrayValidOptions) (*StringArrayArrayResponse, error) {
	req, err := client.getArrayValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getArrayValidHandleError(resp)
	}
	result, err := client.getArrayValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getArrayValidCreateRequest creates the GetArrayValid request.
func (client ArrayClient) getArrayValidCreateRequest(ctx context.Context, options *ArrayGetArrayValidOptions) (*azcore.Request, error) {
	urlPath := "/array/array/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getArrayValidHandleResponse handles the GetArrayValid response.
func (client ArrayClient) getArrayValidHandleResponse(resp *azcore.Response) (*StringArrayArrayResponse, error) {
	result := StringArrayArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArrayArray)
}

// getArrayValidHandleError handles the GetArrayValid error response.
func (client ArrayClient) getArrayValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetBase64URL - Get array value ['a string that gets encoded with base64url', 'test string' 'Lorem ipsum'] with the items base64url encoded
func (client ArrayClient) GetBase64URL(ctx context.Context, options *ArrayGetBase64URLOptions) (*ByteArrayArrayResponse, error) {
	req, err := client.getBase64UrlCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getBase64UrlHandleError(resp)
	}
	result, err := client.getBase64UrlHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getBase64UrlCreateRequest creates the GetBase64URL request.
func (client ArrayClient) getBase64UrlCreateRequest(ctx context.Context, options *ArrayGetBase64URLOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/base64url/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getBase64UrlHandleResponse handles the GetBase64URL response.
func (client ArrayClient) getBase64UrlHandleResponse(resp *azcore.Response) (*ByteArrayArrayResponse, error) {
	result := ByteArrayArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ByteArrayArray)
}

// getBase64UrlHandleError handles the GetBase64URL error response.
func (client ArrayClient) getBase64UrlHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetBooleanInvalidNull - Get boolean array value [true, null, false]
func (client ArrayClient) GetBooleanInvalidNull(ctx context.Context, options *ArrayGetBooleanInvalidNullOptions) (*BoolArrayResponse, error) {
	req, err := client.getBooleanInvalidNullCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getBooleanInvalidNullHandleError(resp)
	}
	result, err := client.getBooleanInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getBooleanInvalidNullCreateRequest creates the GetBooleanInvalidNull request.
func (client ArrayClient) getBooleanInvalidNullCreateRequest(ctx context.Context, options *ArrayGetBooleanInvalidNullOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/boolean/true.null.false"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getBooleanInvalidNullHandleResponse handles the GetBooleanInvalidNull response.
func (client ArrayClient) getBooleanInvalidNullHandleResponse(resp *azcore.Response) (*BoolArrayResponse, error) {
	result := BoolArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.BoolArray)
}

// getBooleanInvalidNullHandleError handles the GetBooleanInvalidNull error response.
func (client ArrayClient) getBooleanInvalidNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetBooleanInvalidString - Get boolean array value [true, 'boolean', false]
func (client ArrayClient) GetBooleanInvalidString(ctx context.Context, options *ArrayGetBooleanInvalidStringOptions) (*BoolArrayResponse, error) {
	req, err := client.getBooleanInvalidStringCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getBooleanInvalidStringHandleError(resp)
	}
	result, err := client.getBooleanInvalidStringHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getBooleanInvalidStringCreateRequest creates the GetBooleanInvalidString request.
func (client ArrayClient) getBooleanInvalidStringCreateRequest(ctx context.Context, options *ArrayGetBooleanInvalidStringOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/boolean/true.boolean.false"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getBooleanInvalidStringHandleResponse handles the GetBooleanInvalidString response.
func (client ArrayClient) getBooleanInvalidStringHandleResponse(resp *azcore.Response) (*BoolArrayResponse, error) {
	result := BoolArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.BoolArray)
}

// getBooleanInvalidStringHandleError handles the GetBooleanInvalidString error response.
func (client ArrayClient) getBooleanInvalidStringHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetBooleanTfft - Get boolean array value [true, false, false, true]
func (client ArrayClient) GetBooleanTfft(ctx context.Context, options *ArrayGetBooleanTfftOptions) (*BoolArrayResponse, error) {
	req, err := client.getBooleanTfftCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getBooleanTfftHandleError(resp)
	}
	result, err := client.getBooleanTfftHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getBooleanTfftCreateRequest creates the GetBooleanTfft request.
func (client ArrayClient) getBooleanTfftCreateRequest(ctx context.Context, options *ArrayGetBooleanTfftOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/boolean/tfft"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getBooleanTfftHandleResponse handles the GetBooleanTfft response.
func (client ArrayClient) getBooleanTfftHandleResponse(resp *azcore.Response) (*BoolArrayResponse, error) {
	result := BoolArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.BoolArray)
}

// getBooleanTfftHandleError handles the GetBooleanTfft error response.
func (client ArrayClient) getBooleanTfftHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetByteInvalidNull - Get byte array value [hex(AB, AC, AD), null] with the first item base64 encoded
func (client ArrayClient) GetByteInvalidNull(ctx context.Context, options *ArrayGetByteInvalidNullOptions) (*ByteArrayArrayResponse, error) {
	req, err := client.getByteInvalidNullCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getByteInvalidNullHandleError(resp)
	}
	result, err := client.getByteInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getByteInvalidNullCreateRequest creates the GetByteInvalidNull request.
func (client ArrayClient) getByteInvalidNullCreateRequest(ctx context.Context, options *ArrayGetByteInvalidNullOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/byte/invalidnull"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getByteInvalidNullHandleResponse handles the GetByteInvalidNull response.
func (client ArrayClient) getByteInvalidNullHandleResponse(resp *azcore.Response) (*ByteArrayArrayResponse, error) {
	result := ByteArrayArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ByteArrayArray)
}

// getByteInvalidNullHandleError handles the GetByteInvalidNull error response.
func (client ArrayClient) getByteInvalidNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetByteValid - Get byte array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each item encoded in base64
func (client ArrayClient) GetByteValid(ctx context.Context, options *ArrayGetByteValidOptions) (*ByteArrayArrayResponse, error) {
	req, err := client.getByteValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getByteValidHandleError(resp)
	}
	result, err := client.getByteValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getByteValidCreateRequest creates the GetByteValid request.
func (client ArrayClient) getByteValidCreateRequest(ctx context.Context, options *ArrayGetByteValidOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/byte/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getByteValidHandleResponse handles the GetByteValid response.
func (client ArrayClient) getByteValidHandleResponse(resp *azcore.Response) (*ByteArrayArrayResponse, error) {
	result := ByteArrayArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ByteArrayArray)
}

// getByteValidHandleError handles the GetByteValid error response.
func (client ArrayClient) getByteValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetComplexEmpty - Get empty array of complex type []
func (client ArrayClient) GetComplexEmpty(ctx context.Context, options *ArrayGetComplexEmptyOptions) (*ProductArrayResponse, error) {
	req, err := client.getComplexEmptyCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getComplexEmptyHandleError(resp)
	}
	result, err := client.getComplexEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getComplexEmptyCreateRequest creates the GetComplexEmpty request.
func (client ArrayClient) getComplexEmptyCreateRequest(ctx context.Context, options *ArrayGetComplexEmptyOptions) (*azcore.Request, error) {
	urlPath := "/array/complex/empty"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getComplexEmptyHandleResponse handles the GetComplexEmpty response.
func (client ArrayClient) getComplexEmptyHandleResponse(resp *azcore.Response) (*ProductArrayResponse, error) {
	result := ProductArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ProductArray)
}

// getComplexEmptyHandleError handles the GetComplexEmpty error response.
func (client ArrayClient) getComplexEmptyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetComplexItemEmpty - Get array of complex type with empty item [{'integer': 1 'string': '2'}, {}, {'integer': 5, 'string': '6'}]
func (client ArrayClient) GetComplexItemEmpty(ctx context.Context, options *ArrayGetComplexItemEmptyOptions) (*ProductArrayResponse, error) {
	req, err := client.getComplexItemEmptyCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getComplexItemEmptyHandleError(resp)
	}
	result, err := client.getComplexItemEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getComplexItemEmptyCreateRequest creates the GetComplexItemEmpty request.
func (client ArrayClient) getComplexItemEmptyCreateRequest(ctx context.Context, options *ArrayGetComplexItemEmptyOptions) (*azcore.Request, error) {
	urlPath := "/array/complex/itemempty"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getComplexItemEmptyHandleResponse handles the GetComplexItemEmpty response.
func (client ArrayClient) getComplexItemEmptyHandleResponse(resp *azcore.Response) (*ProductArrayResponse, error) {
	result := ProductArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ProductArray)
}

// getComplexItemEmptyHandleError handles the GetComplexItemEmpty error response.
func (client ArrayClient) getComplexItemEmptyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetComplexItemNull - Get array of complex type with null item [{'integer': 1 'string': '2'}, null, {'integer': 5, 'string': '6'}]
func (client ArrayClient) GetComplexItemNull(ctx context.Context, options *ArrayGetComplexItemNullOptions) (*ProductArrayResponse, error) {
	req, err := client.getComplexItemNullCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getComplexItemNullHandleError(resp)
	}
	result, err := client.getComplexItemNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getComplexItemNullCreateRequest creates the GetComplexItemNull request.
func (client ArrayClient) getComplexItemNullCreateRequest(ctx context.Context, options *ArrayGetComplexItemNullOptions) (*azcore.Request, error) {
	urlPath := "/array/complex/itemnull"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getComplexItemNullHandleResponse handles the GetComplexItemNull response.
func (client ArrayClient) getComplexItemNullHandleResponse(resp *azcore.Response) (*ProductArrayResponse, error) {
	result := ProductArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ProductArray)
}

// getComplexItemNullHandleError handles the GetComplexItemNull error response.
func (client ArrayClient) getComplexItemNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetComplexNull - Get array of complex type null value
func (client ArrayClient) GetComplexNull(ctx context.Context, options *ArrayGetComplexNullOptions) (*ProductArrayResponse, error) {
	req, err := client.getComplexNullCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getComplexNullHandleError(resp)
	}
	result, err := client.getComplexNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getComplexNullCreateRequest creates the GetComplexNull request.
func (client ArrayClient) getComplexNullCreateRequest(ctx context.Context, options *ArrayGetComplexNullOptions) (*azcore.Request, error) {
	urlPath := "/array/complex/null"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getComplexNullHandleResponse handles the GetComplexNull response.
func (client ArrayClient) getComplexNullHandleResponse(resp *azcore.Response) (*ProductArrayResponse, error) {
	result := ProductArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ProductArray)
}

// getComplexNullHandleError handles the GetComplexNull error response.
func (client ArrayClient) getComplexNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetComplexValid - Get array of complex type with [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer': 5, 'string': '6'}]
func (client ArrayClient) GetComplexValid(ctx context.Context, options *ArrayGetComplexValidOptions) (*ProductArrayResponse, error) {
	req, err := client.getComplexValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getComplexValidHandleError(resp)
	}
	result, err := client.getComplexValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getComplexValidCreateRequest creates the GetComplexValid request.
func (client ArrayClient) getComplexValidCreateRequest(ctx context.Context, options *ArrayGetComplexValidOptions) (*azcore.Request, error) {
	urlPath := "/array/complex/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getComplexValidHandleResponse handles the GetComplexValid response.
func (client ArrayClient) getComplexValidHandleResponse(resp *azcore.Response) (*ProductArrayResponse, error) {
	result := ProductArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ProductArray)
}

// getComplexValidHandleError handles the GetComplexValid error response.
func (client ArrayClient) getComplexValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetDateInvalidChars - Get date array value ['2011-03-22', 'date']
func (client ArrayClient) GetDateInvalidChars(ctx context.Context, options *ArrayGetDateInvalidCharsOptions) (*TimeArrayResponse, error) {
	req, err := client.getDateInvalidCharsCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDateInvalidCharsHandleError(resp)
	}
	result, err := client.getDateInvalidCharsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDateInvalidCharsCreateRequest creates the GetDateInvalidChars request.
func (client ArrayClient) getDateInvalidCharsCreateRequest(ctx context.Context, options *ArrayGetDateInvalidCharsOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/date/invalidchars"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getDateInvalidCharsHandleResponse handles the GetDateInvalidChars response.
func (client ArrayClient) getDateInvalidCharsHandleResponse(resp *azcore.Response) (*TimeArrayResponse, error) {
	var aux *[]dateType
	if err := resp.UnmarshalAsJSON(&aux); err != nil {
		return nil, err
	}
	cp := make([]time.Time, len(*aux), len(*aux))
	for i := 0; i < len(*aux); i++ {
		cp[i] = time.Time((*aux)[i])
	}
	return &TimeArrayResponse{RawResponse: resp.Response, TimeArray: &cp}, nil
}

// getDateInvalidCharsHandleError handles the GetDateInvalidChars error response.
func (client ArrayClient) getDateInvalidCharsHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetDateInvalidNull - Get date array value ['2012-01-01', null, '1776-07-04']
func (client ArrayClient) GetDateInvalidNull(ctx context.Context, options *ArrayGetDateInvalidNullOptions) (*TimeArrayResponse, error) {
	req, err := client.getDateInvalidNullCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDateInvalidNullHandleError(resp)
	}
	result, err := client.getDateInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDateInvalidNullCreateRequest creates the GetDateInvalidNull request.
func (client ArrayClient) getDateInvalidNullCreateRequest(ctx context.Context, options *ArrayGetDateInvalidNullOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/date/invalidnull"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getDateInvalidNullHandleResponse handles the GetDateInvalidNull response.
func (client ArrayClient) getDateInvalidNullHandleResponse(resp *azcore.Response) (*TimeArrayResponse, error) {
	var aux *[]dateType
	if err := resp.UnmarshalAsJSON(&aux); err != nil {
		return nil, err
	}
	cp := make([]time.Time, len(*aux), len(*aux))
	for i := 0; i < len(*aux); i++ {
		cp[i] = time.Time((*aux)[i])
	}
	return &TimeArrayResponse{RawResponse: resp.Response, TimeArray: &cp}, nil
}

// getDateInvalidNullHandleError handles the GetDateInvalidNull error response.
func (client ArrayClient) getDateInvalidNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetDateTimeInvalidChars - Get date array value ['2000-12-01t00:00:01z', 'date-time']
func (client ArrayClient) GetDateTimeInvalidChars(ctx context.Context, options *ArrayGetDateTimeInvalidCharsOptions) (*TimeArrayResponse, error) {
	req, err := client.getDateTimeInvalidCharsCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDateTimeInvalidCharsHandleError(resp)
	}
	result, err := client.getDateTimeInvalidCharsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDateTimeInvalidCharsCreateRequest creates the GetDateTimeInvalidChars request.
func (client ArrayClient) getDateTimeInvalidCharsCreateRequest(ctx context.Context, options *ArrayGetDateTimeInvalidCharsOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/date-time/invalidchars"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getDateTimeInvalidCharsHandleResponse handles the GetDateTimeInvalidChars response.
func (client ArrayClient) getDateTimeInvalidCharsHandleResponse(resp *azcore.Response) (*TimeArrayResponse, error) {
	var aux *[]timeRFC3339
	if err := resp.UnmarshalAsJSON(&aux); err != nil {
		return nil, err
	}
	cp := make([]time.Time, len(*aux), len(*aux))
	for i := 0; i < len(*aux); i++ {
		cp[i] = time.Time((*aux)[i])
	}
	return &TimeArrayResponse{RawResponse: resp.Response, TimeArray: &cp}, nil
}

// getDateTimeInvalidCharsHandleError handles the GetDateTimeInvalidChars error response.
func (client ArrayClient) getDateTimeInvalidCharsHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetDateTimeInvalidNull - Get date array value ['2000-12-01t00:00:01z', null]
func (client ArrayClient) GetDateTimeInvalidNull(ctx context.Context, options *ArrayGetDateTimeInvalidNullOptions) (*TimeArrayResponse, error) {
	req, err := client.getDateTimeInvalidNullCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDateTimeInvalidNullHandleError(resp)
	}
	result, err := client.getDateTimeInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDateTimeInvalidNullCreateRequest creates the GetDateTimeInvalidNull request.
func (client ArrayClient) getDateTimeInvalidNullCreateRequest(ctx context.Context, options *ArrayGetDateTimeInvalidNullOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/date-time/invalidnull"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getDateTimeInvalidNullHandleResponse handles the GetDateTimeInvalidNull response.
func (client ArrayClient) getDateTimeInvalidNullHandleResponse(resp *azcore.Response) (*TimeArrayResponse, error) {
	var aux *[]timeRFC3339
	if err := resp.UnmarshalAsJSON(&aux); err != nil {
		return nil, err
	}
	cp := make([]time.Time, len(*aux), len(*aux))
	for i := 0; i < len(*aux); i++ {
		cp[i] = time.Time((*aux)[i])
	}
	return &TimeArrayResponse{RawResponse: resp.Response, TimeArray: &cp}, nil
}

// getDateTimeInvalidNullHandleError handles the GetDateTimeInvalidNull error response.
func (client ArrayClient) getDateTimeInvalidNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetDateTimeRFC1123Valid - Get date-time array value ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct 1492 10:15:01 GMT']
func (client ArrayClient) GetDateTimeRFC1123Valid(ctx context.Context, options *ArrayGetDateTimeRFC1123ValidOptions) (*TimeArrayResponse, error) {
	req, err := client.getDateTimeRfc1123ValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDateTimeRfc1123ValidHandleError(resp)
	}
	result, err := client.getDateTimeRfc1123ValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDateTimeRfc1123ValidCreateRequest creates the GetDateTimeRFC1123Valid request.
func (client ArrayClient) getDateTimeRfc1123ValidCreateRequest(ctx context.Context, options *ArrayGetDateTimeRFC1123ValidOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/date-time-rfc1123/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getDateTimeRfc1123ValidHandleResponse handles the GetDateTimeRFC1123Valid response.
func (client ArrayClient) getDateTimeRfc1123ValidHandleResponse(resp *azcore.Response) (*TimeArrayResponse, error) {
	var aux *[]timeRFC1123
	if err := resp.UnmarshalAsJSON(&aux); err != nil {
		return nil, err
	}
	cp := make([]time.Time, len(*aux), len(*aux))
	for i := 0; i < len(*aux); i++ {
		cp[i] = time.Time((*aux)[i])
	}
	return &TimeArrayResponse{RawResponse: resp.Response, TimeArray: &cp}, nil
}

// getDateTimeRfc1123ValidHandleError handles the GetDateTimeRFC1123Valid error response.
func (client ArrayClient) getDateTimeRfc1123ValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetDateTimeValid - Get date-time array value ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00']
func (client ArrayClient) GetDateTimeValid(ctx context.Context, options *ArrayGetDateTimeValidOptions) (*TimeArrayResponse, error) {
	req, err := client.getDateTimeValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDateTimeValidHandleError(resp)
	}
	result, err := client.getDateTimeValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDateTimeValidCreateRequest creates the GetDateTimeValid request.
func (client ArrayClient) getDateTimeValidCreateRequest(ctx context.Context, options *ArrayGetDateTimeValidOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/date-time/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getDateTimeValidHandleResponse handles the GetDateTimeValid response.
func (client ArrayClient) getDateTimeValidHandleResponse(resp *azcore.Response) (*TimeArrayResponse, error) {
	var aux *[]timeRFC3339
	if err := resp.UnmarshalAsJSON(&aux); err != nil {
		return nil, err
	}
	cp := make([]time.Time, len(*aux), len(*aux))
	for i := 0; i < len(*aux); i++ {
		cp[i] = time.Time((*aux)[i])
	}
	return &TimeArrayResponse{RawResponse: resp.Response, TimeArray: &cp}, nil
}

// getDateTimeValidHandleError handles the GetDateTimeValid error response.
func (client ArrayClient) getDateTimeValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetDateValid - Get integer array value ['2000-12-01', '1980-01-02', '1492-10-12']
func (client ArrayClient) GetDateValid(ctx context.Context, options *ArrayGetDateValidOptions) (*TimeArrayResponse, error) {
	req, err := client.getDateValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDateValidHandleError(resp)
	}
	result, err := client.getDateValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDateValidCreateRequest creates the GetDateValid request.
func (client ArrayClient) getDateValidCreateRequest(ctx context.Context, options *ArrayGetDateValidOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/date/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getDateValidHandleResponse handles the GetDateValid response.
func (client ArrayClient) getDateValidHandleResponse(resp *azcore.Response) (*TimeArrayResponse, error) {
	var aux *[]dateType
	if err := resp.UnmarshalAsJSON(&aux); err != nil {
		return nil, err
	}
	cp := make([]time.Time, len(*aux), len(*aux))
	for i := 0; i < len(*aux); i++ {
		cp[i] = time.Time((*aux)[i])
	}
	return &TimeArrayResponse{RawResponse: resp.Response, TimeArray: &cp}, nil
}

// getDateValidHandleError handles the GetDateValid error response.
func (client ArrayClient) getDateValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetDictionaryEmpty - Get an array of Dictionaries of type with value []
func (client ArrayClient) GetDictionaryEmpty(ctx context.Context, options *ArrayGetDictionaryEmptyOptions) (*MapOfStringArrayResponse, error) {
	req, err := client.getDictionaryEmptyCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDictionaryEmptyHandleError(resp)
	}
	result, err := client.getDictionaryEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDictionaryEmptyCreateRequest creates the GetDictionaryEmpty request.
func (client ArrayClient) getDictionaryEmptyCreateRequest(ctx context.Context, options *ArrayGetDictionaryEmptyOptions) (*azcore.Request, error) {
	urlPath := "/array/dictionary/empty"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getDictionaryEmptyHandleResponse handles the GetDictionaryEmpty response.
func (client ArrayClient) getDictionaryEmptyHandleResponse(resp *azcore.Response) (*MapOfStringArrayResponse, error) {
	result := MapOfStringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MapOfStringArray)
}

// getDictionaryEmptyHandleError handles the GetDictionaryEmpty error response.
func (client ArrayClient) getDictionaryEmptyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetDictionaryItemEmpty - Get an array of Dictionaries of type with value [{'1': 'one', '2': 'two', '3': 'three'}, {}, {'7': 'seven', '8': 'eight', '9':
// 'nine'}]
func (client ArrayClient) GetDictionaryItemEmpty(ctx context.Context, options *ArrayGetDictionaryItemEmptyOptions) (*MapOfStringArrayResponse, error) {
	req, err := client.getDictionaryItemEmptyCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDictionaryItemEmptyHandleError(resp)
	}
	result, err := client.getDictionaryItemEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDictionaryItemEmptyCreateRequest creates the GetDictionaryItemEmpty request.
func (client ArrayClient) getDictionaryItemEmptyCreateRequest(ctx context.Context, options *ArrayGetDictionaryItemEmptyOptions) (*azcore.Request, error) {
	urlPath := "/array/dictionary/itemempty"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getDictionaryItemEmptyHandleResponse handles the GetDictionaryItemEmpty response.
func (client ArrayClient) getDictionaryItemEmptyHandleResponse(resp *azcore.Response) (*MapOfStringArrayResponse, error) {
	result := MapOfStringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MapOfStringArray)
}

// getDictionaryItemEmptyHandleError handles the GetDictionaryItemEmpty error response.
func (client ArrayClient) getDictionaryItemEmptyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetDictionaryItemNull - Get an array of Dictionaries of type with value [{'1': 'one', '2': 'two', '3': 'three'}, null, {'7': 'seven', '8': 'eight', '9':
// 'nine'}]
func (client ArrayClient) GetDictionaryItemNull(ctx context.Context, options *ArrayGetDictionaryItemNullOptions) (*MapOfStringArrayResponse, error) {
	req, err := client.getDictionaryItemNullCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDictionaryItemNullHandleError(resp)
	}
	result, err := client.getDictionaryItemNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDictionaryItemNullCreateRequest creates the GetDictionaryItemNull request.
func (client ArrayClient) getDictionaryItemNullCreateRequest(ctx context.Context, options *ArrayGetDictionaryItemNullOptions) (*azcore.Request, error) {
	urlPath := "/array/dictionary/itemnull"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getDictionaryItemNullHandleResponse handles the GetDictionaryItemNull response.
func (client ArrayClient) getDictionaryItemNullHandleResponse(resp *azcore.Response) (*MapOfStringArrayResponse, error) {
	result := MapOfStringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MapOfStringArray)
}

// getDictionaryItemNullHandleError handles the GetDictionaryItemNull error response.
func (client ArrayClient) getDictionaryItemNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetDictionaryNull - Get an array of Dictionaries with value null
func (client ArrayClient) GetDictionaryNull(ctx context.Context, options *ArrayGetDictionaryNullOptions) (*MapOfStringArrayResponse, error) {
	req, err := client.getDictionaryNullCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDictionaryNullHandleError(resp)
	}
	result, err := client.getDictionaryNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDictionaryNullCreateRequest creates the GetDictionaryNull request.
func (client ArrayClient) getDictionaryNullCreateRequest(ctx context.Context, options *ArrayGetDictionaryNullOptions) (*azcore.Request, error) {
	urlPath := "/array/dictionary/null"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getDictionaryNullHandleResponse handles the GetDictionaryNull response.
func (client ArrayClient) getDictionaryNullHandleResponse(resp *azcore.Response) (*MapOfStringArrayResponse, error) {
	result := MapOfStringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MapOfStringArray)
}

// getDictionaryNullHandleError handles the GetDictionaryNull error response.
func (client ArrayClient) getDictionaryNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetDictionaryValid - Get an array of Dictionaries of type with value [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6': 'six'},
// {'7': 'seven', '8': 'eight', '9': 'nine'}]
func (client ArrayClient) GetDictionaryValid(ctx context.Context, options *ArrayGetDictionaryValidOptions) (*MapOfStringArrayResponse, error) {
	req, err := client.getDictionaryValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDictionaryValidHandleError(resp)
	}
	result, err := client.getDictionaryValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDictionaryValidCreateRequest creates the GetDictionaryValid request.
func (client ArrayClient) getDictionaryValidCreateRequest(ctx context.Context, options *ArrayGetDictionaryValidOptions) (*azcore.Request, error) {
	urlPath := "/array/dictionary/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getDictionaryValidHandleResponse handles the GetDictionaryValid response.
func (client ArrayClient) getDictionaryValidHandleResponse(resp *azcore.Response) (*MapOfStringArrayResponse, error) {
	result := MapOfStringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MapOfStringArray)
}

// getDictionaryValidHandleError handles the GetDictionaryValid error response.
func (client ArrayClient) getDictionaryValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetDoubleInvalidNull - Get float array value [0.0, null, -1.2e20]
func (client ArrayClient) GetDoubleInvalidNull(ctx context.Context, options *ArrayGetDoubleInvalidNullOptions) (*Float64ArrayResponse, error) {
	req, err := client.getDoubleInvalidNullCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDoubleInvalidNullHandleError(resp)
	}
	result, err := client.getDoubleInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDoubleInvalidNullCreateRequest creates the GetDoubleInvalidNull request.
func (client ArrayClient) getDoubleInvalidNullCreateRequest(ctx context.Context, options *ArrayGetDoubleInvalidNullOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/double/0.0-null-1.2e20"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getDoubleInvalidNullHandleResponse handles the GetDoubleInvalidNull response.
func (client ArrayClient) getDoubleInvalidNullHandleResponse(resp *azcore.Response) (*Float64ArrayResponse, error) {
	result := Float64ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Float64Array)
}

// getDoubleInvalidNullHandleError handles the GetDoubleInvalidNull error response.
func (client ArrayClient) getDoubleInvalidNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetDoubleInvalidString - Get boolean array value [1.0, 'number', 0.0]
func (client ArrayClient) GetDoubleInvalidString(ctx context.Context, options *ArrayGetDoubleInvalidStringOptions) (*Float64ArrayResponse, error) {
	req, err := client.getDoubleInvalidStringCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDoubleInvalidStringHandleError(resp)
	}
	result, err := client.getDoubleInvalidStringHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDoubleInvalidStringCreateRequest creates the GetDoubleInvalidString request.
func (client ArrayClient) getDoubleInvalidStringCreateRequest(ctx context.Context, options *ArrayGetDoubleInvalidStringOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/double/1.number.0"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getDoubleInvalidStringHandleResponse handles the GetDoubleInvalidString response.
func (client ArrayClient) getDoubleInvalidStringHandleResponse(resp *azcore.Response) (*Float64ArrayResponse, error) {
	result := Float64ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Float64Array)
}

// getDoubleInvalidStringHandleError handles the GetDoubleInvalidString error response.
func (client ArrayClient) getDoubleInvalidStringHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetDoubleValid - Get float array value [0, -0.01, 1.2e20]
func (client ArrayClient) GetDoubleValid(ctx context.Context, options *ArrayGetDoubleValidOptions) (*Float64ArrayResponse, error) {
	req, err := client.getDoubleValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDoubleValidHandleError(resp)
	}
	result, err := client.getDoubleValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDoubleValidCreateRequest creates the GetDoubleValid request.
func (client ArrayClient) getDoubleValidCreateRequest(ctx context.Context, options *ArrayGetDoubleValidOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/double/0--0.01-1.2e20"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getDoubleValidHandleResponse handles the GetDoubleValid response.
func (client ArrayClient) getDoubleValidHandleResponse(resp *azcore.Response) (*Float64ArrayResponse, error) {
	result := Float64ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Float64Array)
}

// getDoubleValidHandleError handles the GetDoubleValid error response.
func (client ArrayClient) getDoubleValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetDurationValid - Get duration array value ['P123DT22H14M12.011S', 'P5DT1H0M0S']
func (client ArrayClient) GetDurationValid(ctx context.Context, options *ArrayGetDurationValidOptions) (*StringArrayResponse, error) {
	req, err := client.getDurationValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDurationValidHandleError(resp)
	}
	result, err := client.getDurationValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDurationValidCreateRequest creates the GetDurationValid request.
func (client ArrayClient) getDurationValidCreateRequest(ctx context.Context, options *ArrayGetDurationValidOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/duration/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getDurationValidHandleResponse handles the GetDurationValid response.
func (client ArrayClient) getDurationValidHandleResponse(resp *azcore.Response) (*StringArrayResponse, error) {
	result := StringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArray)
}

// getDurationValidHandleError handles the GetDurationValid error response.
func (client ArrayClient) getDurationValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetEmpty - Get empty array value []
func (client ArrayClient) GetEmpty(ctx context.Context, options *ArrayGetEmptyOptions) (*Int32ArrayResponse, error) {
	req, err := client.getEmptyCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getEmptyHandleError(resp)
	}
	result, err := client.getEmptyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getEmptyCreateRequest creates the GetEmpty request.
func (client ArrayClient) getEmptyCreateRequest(ctx context.Context, options *ArrayGetEmptyOptions) (*azcore.Request, error) {
	urlPath := "/array/empty"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getEmptyHandleResponse handles the GetEmpty response.
func (client ArrayClient) getEmptyHandleResponse(resp *azcore.Response) (*Int32ArrayResponse, error) {
	result := Int32ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Int32Array)
}

// getEmptyHandleError handles the GetEmpty error response.
func (client ArrayClient) getEmptyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetEnumValid - Get enum array value ['foo1', 'foo2', 'foo3']
func (client ArrayClient) GetEnumValid(ctx context.Context, options *ArrayGetEnumValidOptions) (*FooEnumArrayResponse, error) {
	req, err := client.getEnumValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getEnumValidHandleError(resp)
	}
	result, err := client.getEnumValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getEnumValidCreateRequest creates the GetEnumValid request.
func (client ArrayClient) getEnumValidCreateRequest(ctx context.Context, options *ArrayGetEnumValidOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/enum/foo1.foo2.foo3"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getEnumValidHandleResponse handles the GetEnumValid response.
func (client ArrayClient) getEnumValidHandleResponse(resp *azcore.Response) (*FooEnumArrayResponse, error) {
	result := FooEnumArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.FooEnumArray)
}

// getEnumValidHandleError handles the GetEnumValid error response.
func (client ArrayClient) getEnumValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetFloatInvalidNull - Get float array value [0.0, null, -1.2e20]
func (client ArrayClient) GetFloatInvalidNull(ctx context.Context, options *ArrayGetFloatInvalidNullOptions) (*Float32ArrayResponse, error) {
	req, err := client.getFloatInvalidNullCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getFloatInvalidNullHandleError(resp)
	}
	result, err := client.getFloatInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getFloatInvalidNullCreateRequest creates the GetFloatInvalidNull request.
func (client ArrayClient) getFloatInvalidNullCreateRequest(ctx context.Context, options *ArrayGetFloatInvalidNullOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/float/0.0-null-1.2e20"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getFloatInvalidNullHandleResponse handles the GetFloatInvalidNull response.
func (client ArrayClient) getFloatInvalidNullHandleResponse(resp *azcore.Response) (*Float32ArrayResponse, error) {
	result := Float32ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Float32Array)
}

// getFloatInvalidNullHandleError handles the GetFloatInvalidNull error response.
func (client ArrayClient) getFloatInvalidNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetFloatInvalidString - Get boolean array value [1.0, 'number', 0.0]
func (client ArrayClient) GetFloatInvalidString(ctx context.Context, options *ArrayGetFloatInvalidStringOptions) (*Float32ArrayResponse, error) {
	req, err := client.getFloatInvalidStringCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getFloatInvalidStringHandleError(resp)
	}
	result, err := client.getFloatInvalidStringHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getFloatInvalidStringCreateRequest creates the GetFloatInvalidString request.
func (client ArrayClient) getFloatInvalidStringCreateRequest(ctx context.Context, options *ArrayGetFloatInvalidStringOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/float/1.number.0"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getFloatInvalidStringHandleResponse handles the GetFloatInvalidString response.
func (client ArrayClient) getFloatInvalidStringHandleResponse(resp *azcore.Response) (*Float32ArrayResponse, error) {
	result := Float32ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Float32Array)
}

// getFloatInvalidStringHandleError handles the GetFloatInvalidString error response.
func (client ArrayClient) getFloatInvalidStringHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetFloatValid - Get float array value [0, -0.01, 1.2e20]
func (client ArrayClient) GetFloatValid(ctx context.Context, options *ArrayGetFloatValidOptions) (*Float32ArrayResponse, error) {
	req, err := client.getFloatValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getFloatValidHandleError(resp)
	}
	result, err := client.getFloatValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getFloatValidCreateRequest creates the GetFloatValid request.
func (client ArrayClient) getFloatValidCreateRequest(ctx context.Context, options *ArrayGetFloatValidOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/float/0--0.01-1.2e20"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getFloatValidHandleResponse handles the GetFloatValid response.
func (client ArrayClient) getFloatValidHandleResponse(resp *azcore.Response) (*Float32ArrayResponse, error) {
	result := Float32ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Float32Array)
}

// getFloatValidHandleError handles the GetFloatValid error response.
func (client ArrayClient) getFloatValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetIntInvalidNull - Get integer array value [1, null, 0]
func (client ArrayClient) GetIntInvalidNull(ctx context.Context, options *ArrayGetIntInvalidNullOptions) (*Int32ArrayResponse, error) {
	req, err := client.getIntInvalidNullCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getIntInvalidNullHandleError(resp)
	}
	result, err := client.getIntInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getIntInvalidNullCreateRequest creates the GetIntInvalidNull request.
func (client ArrayClient) getIntInvalidNullCreateRequest(ctx context.Context, options *ArrayGetIntInvalidNullOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/integer/1.null.zero"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getIntInvalidNullHandleResponse handles the GetIntInvalidNull response.
func (client ArrayClient) getIntInvalidNullHandleResponse(resp *azcore.Response) (*Int32ArrayResponse, error) {
	result := Int32ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Int32Array)
}

// getIntInvalidNullHandleError handles the GetIntInvalidNull error response.
func (client ArrayClient) getIntInvalidNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetIntInvalidString - Get integer array value [1, 'integer', 0]
func (client ArrayClient) GetIntInvalidString(ctx context.Context, options *ArrayGetIntInvalidStringOptions) (*Int32ArrayResponse, error) {
	req, err := client.getIntInvalidStringCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getIntInvalidStringHandleError(resp)
	}
	result, err := client.getIntInvalidStringHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getIntInvalidStringCreateRequest creates the GetIntInvalidString request.
func (client ArrayClient) getIntInvalidStringCreateRequest(ctx context.Context, options *ArrayGetIntInvalidStringOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/integer/1.integer.0"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getIntInvalidStringHandleResponse handles the GetIntInvalidString response.
func (client ArrayClient) getIntInvalidStringHandleResponse(resp *azcore.Response) (*Int32ArrayResponse, error) {
	result := Int32ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Int32Array)
}

// getIntInvalidStringHandleError handles the GetIntInvalidString error response.
func (client ArrayClient) getIntInvalidStringHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetIntegerValid - Get integer array value [1, -1, 3, 300]
func (client ArrayClient) GetIntegerValid(ctx context.Context, options *ArrayGetIntegerValidOptions) (*Int32ArrayResponse, error) {
	req, err := client.getIntegerValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getIntegerValidHandleError(resp)
	}
	result, err := client.getIntegerValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getIntegerValidCreateRequest creates the GetIntegerValid request.
func (client ArrayClient) getIntegerValidCreateRequest(ctx context.Context, options *ArrayGetIntegerValidOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/integer/1.-1.3.300"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getIntegerValidHandleResponse handles the GetIntegerValid response.
func (client ArrayClient) getIntegerValidHandleResponse(resp *azcore.Response) (*Int32ArrayResponse, error) {
	result := Int32ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Int32Array)
}

// getIntegerValidHandleError handles the GetIntegerValid error response.
func (client ArrayClient) getIntegerValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetInvalid - Get invalid array [1, 2, 3
func (client ArrayClient) GetInvalid(ctx context.Context, options *ArrayGetInvalidOptions) (*Int32ArrayResponse, error) {
	req, err := client.getInvalidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getInvalidHandleError(resp)
	}
	result, err := client.getInvalidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getInvalidCreateRequest creates the GetInvalid request.
func (client ArrayClient) getInvalidCreateRequest(ctx context.Context, options *ArrayGetInvalidOptions) (*azcore.Request, error) {
	urlPath := "/array/invalid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getInvalidHandleResponse handles the GetInvalid response.
func (client ArrayClient) getInvalidHandleResponse(resp *azcore.Response) (*Int32ArrayResponse, error) {
	result := Int32ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Int32Array)
}

// getInvalidHandleError handles the GetInvalid error response.
func (client ArrayClient) getInvalidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetLongInvalidNull - Get long array value [1, null, 0]
func (client ArrayClient) GetLongInvalidNull(ctx context.Context, options *ArrayGetLongInvalidNullOptions) (*Int64ArrayResponse, error) {
	req, err := client.getLongInvalidNullCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getLongInvalidNullHandleError(resp)
	}
	result, err := client.getLongInvalidNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getLongInvalidNullCreateRequest creates the GetLongInvalidNull request.
func (client ArrayClient) getLongInvalidNullCreateRequest(ctx context.Context, options *ArrayGetLongInvalidNullOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/long/1.null.zero"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getLongInvalidNullHandleResponse handles the GetLongInvalidNull response.
func (client ArrayClient) getLongInvalidNullHandleResponse(resp *azcore.Response) (*Int64ArrayResponse, error) {
	result := Int64ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Int64Array)
}

// getLongInvalidNullHandleError handles the GetLongInvalidNull error response.
func (client ArrayClient) getLongInvalidNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetLongInvalidString - Get long array value [1, 'integer', 0]
func (client ArrayClient) GetLongInvalidString(ctx context.Context, options *ArrayGetLongInvalidStringOptions) (*Int64ArrayResponse, error) {
	req, err := client.getLongInvalidStringCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getLongInvalidStringHandleError(resp)
	}
	result, err := client.getLongInvalidStringHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getLongInvalidStringCreateRequest creates the GetLongInvalidString request.
func (client ArrayClient) getLongInvalidStringCreateRequest(ctx context.Context, options *ArrayGetLongInvalidStringOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/long/1.integer.0"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getLongInvalidStringHandleResponse handles the GetLongInvalidString response.
func (client ArrayClient) getLongInvalidStringHandleResponse(resp *azcore.Response) (*Int64ArrayResponse, error) {
	result := Int64ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Int64Array)
}

// getLongInvalidStringHandleError handles the GetLongInvalidString error response.
func (client ArrayClient) getLongInvalidStringHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetLongValid - Get integer array value [1, -1, 3, 300]
func (client ArrayClient) GetLongValid(ctx context.Context, options *ArrayGetLongValidOptions) (*Int64ArrayResponse, error) {
	req, err := client.getLongValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getLongValidHandleError(resp)
	}
	result, err := client.getLongValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getLongValidCreateRequest creates the GetLongValid request.
func (client ArrayClient) getLongValidCreateRequest(ctx context.Context, options *ArrayGetLongValidOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/long/1.-1.3.300"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getLongValidHandleResponse handles the GetLongValid response.
func (client ArrayClient) getLongValidHandleResponse(resp *azcore.Response) (*Int64ArrayResponse, error) {
	result := Int64ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Int64Array)
}

// getLongValidHandleError handles the GetLongValid error response.
func (client ArrayClient) getLongValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetNull - Get null array value
func (client ArrayClient) GetNull(ctx context.Context, options *ArrayGetNullOptions) (*Int32ArrayResponse, error) {
	req, err := client.getNullCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getNullHandleError(resp)
	}
	result, err := client.getNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getNullCreateRequest creates the GetNull request.
func (client ArrayClient) getNullCreateRequest(ctx context.Context, options *ArrayGetNullOptions) (*azcore.Request, error) {
	urlPath := "/array/null"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getNullHandleResponse handles the GetNull response.
func (client ArrayClient) getNullHandleResponse(resp *azcore.Response) (*Int32ArrayResponse, error) {
	result := Int32ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Int32Array)
}

// getNullHandleError handles the GetNull error response.
func (client ArrayClient) getNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetStringEnumValid - Get enum array value ['foo1', 'foo2', 'foo3']
func (client ArrayClient) GetStringEnumValid(ctx context.Context, options *ArrayGetStringEnumValidOptions) (*Enum0ArrayResponse, error) {
	req, err := client.getStringEnumValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getStringEnumValidHandleError(resp)
	}
	result, err := client.getStringEnumValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getStringEnumValidCreateRequest creates the GetStringEnumValid request.
func (client ArrayClient) getStringEnumValidCreateRequest(ctx context.Context, options *ArrayGetStringEnumValidOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/string-enum/foo1.foo2.foo3"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getStringEnumValidHandleResponse handles the GetStringEnumValid response.
func (client ArrayClient) getStringEnumValidHandleResponse(resp *azcore.Response) (*Enum0ArrayResponse, error) {
	result := Enum0ArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Enum0Array)
}

// getStringEnumValidHandleError handles the GetStringEnumValid error response.
func (client ArrayClient) getStringEnumValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetStringValid - Get string array value ['foo1', 'foo2', 'foo3']
func (client ArrayClient) GetStringValid(ctx context.Context, options *ArrayGetStringValidOptions) (*StringArrayResponse, error) {
	req, err := client.getStringValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getStringValidHandleError(resp)
	}
	result, err := client.getStringValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getStringValidCreateRequest creates the GetStringValid request.
func (client ArrayClient) getStringValidCreateRequest(ctx context.Context, options *ArrayGetStringValidOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/string/foo1.foo2.foo3"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getStringValidHandleResponse handles the GetStringValid response.
func (client ArrayClient) getStringValidHandleResponse(resp *azcore.Response) (*StringArrayResponse, error) {
	result := StringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArray)
}

// getStringValidHandleError handles the GetStringValid error response.
func (client ArrayClient) getStringValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetStringWithInvalid - Get string array value ['foo', 123, 'foo2']
func (client ArrayClient) GetStringWithInvalid(ctx context.Context, options *ArrayGetStringWithInvalidOptions) (*StringArrayResponse, error) {
	req, err := client.getStringWithInvalidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getStringWithInvalidHandleError(resp)
	}
	result, err := client.getStringWithInvalidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getStringWithInvalidCreateRequest creates the GetStringWithInvalid request.
func (client ArrayClient) getStringWithInvalidCreateRequest(ctx context.Context, options *ArrayGetStringWithInvalidOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/string/foo.123.foo2"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getStringWithInvalidHandleResponse handles the GetStringWithInvalid response.
func (client ArrayClient) getStringWithInvalidHandleResponse(resp *azcore.Response) (*StringArrayResponse, error) {
	result := StringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArray)
}

// getStringWithInvalidHandleError handles the GetStringWithInvalid error response.
func (client ArrayClient) getStringWithInvalidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetStringWithNull - Get string array value ['foo', null, 'foo2']
func (client ArrayClient) GetStringWithNull(ctx context.Context, options *ArrayGetStringWithNullOptions) (*StringArrayResponse, error) {
	req, err := client.getStringWithNullCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getStringWithNullHandleError(resp)
	}
	result, err := client.getStringWithNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getStringWithNullCreateRequest creates the GetStringWithNull request.
func (client ArrayClient) getStringWithNullCreateRequest(ctx context.Context, options *ArrayGetStringWithNullOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/string/foo.null.foo2"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getStringWithNullHandleResponse handles the GetStringWithNull response.
func (client ArrayClient) getStringWithNullHandleResponse(resp *azcore.Response) (*StringArrayResponse, error) {
	result := StringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArray)
}

// getStringWithNullHandleError handles the GetStringWithNull error response.
func (client ArrayClient) getStringWithNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetUUIDInvalidChars - Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'foo']
func (client ArrayClient) GetUUIDInvalidChars(ctx context.Context, options *ArrayGetUUIDInvalidCharsOptions) (*StringArrayResponse, error) {
	req, err := client.getUuidInvalidCharsCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getUuidInvalidCharsHandleError(resp)
	}
	result, err := client.getUuidInvalidCharsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getUuidInvalidCharsCreateRequest creates the GetUUIDInvalidChars request.
func (client ArrayClient) getUuidInvalidCharsCreateRequest(ctx context.Context, options *ArrayGetUUIDInvalidCharsOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/uuid/invalidchars"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getUuidInvalidCharsHandleResponse handles the GetUUIDInvalidChars response.
func (client ArrayClient) getUuidInvalidCharsHandleResponse(resp *azcore.Response) (*StringArrayResponse, error) {
	result := StringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArray)
}

// getUuidInvalidCharsHandleError handles the GetUUIDInvalidChars error response.
func (client ArrayClient) getUuidInvalidCharsHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetUUIDValid - Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
func (client ArrayClient) GetUUIDValid(ctx context.Context, options *ArrayGetUUIDValidOptions) (*StringArrayResponse, error) {
	req, err := client.getUuidValidCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getUuidValidHandleError(resp)
	}
	result, err := client.getUuidValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getUuidValidCreateRequest creates the GetUUIDValid request.
func (client ArrayClient) getUuidValidCreateRequest(ctx context.Context, options *ArrayGetUUIDValidOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/uuid/valid"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getUuidValidHandleResponse handles the GetUUIDValid response.
func (client ArrayClient) getUuidValidHandleResponse(resp *azcore.Response) (*StringArrayResponse, error) {
	result := StringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArray)
}

// getUuidValidHandleError handles the GetUUIDValid error response.
func (client ArrayClient) getUuidValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutArrayValid - Put An array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
func (client ArrayClient) PutArrayValid(ctx context.Context, arrayBody [][]string, options *ArrayPutArrayValidOptions) (*http.Response, error) {
	req, err := client.putArrayValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putArrayValidHandleError(resp)
	}
	return resp.Response, nil
}

// putArrayValidCreateRequest creates the PutArrayValid request.
func (client ArrayClient) putArrayValidCreateRequest(ctx context.Context, arrayBody [][]string, options *ArrayPutArrayValidOptions) (*azcore.Request, error) {
	urlPath := "/array/array/valid"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(arrayBody)
}

// putArrayValidHandleError handles the PutArrayValid error response.
func (client ArrayClient) putArrayValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutBooleanTfft - Set array value empty [true, false, false, true]
func (client ArrayClient) PutBooleanTfft(ctx context.Context, arrayBody []bool, options *ArrayPutBooleanTfftOptions) (*http.Response, error) {
	req, err := client.putBooleanTfftCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putBooleanTfftHandleError(resp)
	}
	return resp.Response, nil
}

// putBooleanTfftCreateRequest creates the PutBooleanTfft request.
func (client ArrayClient) putBooleanTfftCreateRequest(ctx context.Context, arrayBody []bool, options *ArrayPutBooleanTfftOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/boolean/tfft"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(arrayBody)
}

// putBooleanTfftHandleError handles the PutBooleanTfft error response.
func (client ArrayClient) putBooleanTfftHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutByteValid - Put the array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each elementencoded in base 64
func (client ArrayClient) PutByteValid(ctx context.Context, arrayBody [][]byte, options *ArrayPutByteValidOptions) (*http.Response, error) {
	req, err := client.putByteValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putByteValidHandleError(resp)
	}
	return resp.Response, nil
}

// putByteValidCreateRequest creates the PutByteValid request.
func (client ArrayClient) putByteValidCreateRequest(ctx context.Context, arrayBody [][]byte, options *ArrayPutByteValidOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/byte/valid"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(arrayBody)
}

// putByteValidHandleError handles the PutByteValid error response.
func (client ArrayClient) putByteValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutComplexValid - Put an array of complex type with values [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer': 5, 'string': '6'}]
func (client ArrayClient) PutComplexValid(ctx context.Context, arrayBody []Product, options *ArrayPutComplexValidOptions) (*http.Response, error) {
	req, err := client.putComplexValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putComplexValidHandleError(resp)
	}
	return resp.Response, nil
}

// putComplexValidCreateRequest creates the PutComplexValid request.
func (client ArrayClient) putComplexValidCreateRequest(ctx context.Context, arrayBody []Product, options *ArrayPutComplexValidOptions) (*azcore.Request, error) {
	urlPath := "/array/complex/valid"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(arrayBody)
}

// putComplexValidHandleError handles the PutComplexValid error response.
func (client ArrayClient) putComplexValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutDateTimeRFC1123Valid - Set array value ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct 1492 10:15:01 GMT']
func (client ArrayClient) PutDateTimeRFC1123Valid(ctx context.Context, arrayBody []time.Time, options *ArrayPutDateTimeRFC1123ValidOptions) (*http.Response, error) {
	req, err := client.putDateTimeRfc1123ValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putDateTimeRfc1123ValidHandleError(resp)
	}
	return resp.Response, nil
}

// putDateTimeRfc1123ValidCreateRequest creates the PutDateTimeRFC1123Valid request.
func (client ArrayClient) putDateTimeRfc1123ValidCreateRequest(ctx context.Context, arrayBody []time.Time, options *ArrayPutDateTimeRFC1123ValidOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/date-time-rfc1123/valid"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	aux := make([]timeRFC1123, len(arrayBody), len(arrayBody))
	for i := 0; i < len(arrayBody); i++ {
		aux[i] = timeRFC1123(arrayBody[i])
	}
	return req, req.MarshalAsJSON(aux)
}

// putDateTimeRfc1123ValidHandleError handles the PutDateTimeRFC1123Valid error response.
func (client ArrayClient) putDateTimeRfc1123ValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutDateTimeValid - Set array value ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00']
func (client ArrayClient) PutDateTimeValid(ctx context.Context, arrayBody []time.Time, options *ArrayPutDateTimeValidOptions) (*http.Response, error) {
	req, err := client.putDateTimeValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putDateTimeValidHandleError(resp)
	}
	return resp.Response, nil
}

// putDateTimeValidCreateRequest creates the PutDateTimeValid request.
func (client ArrayClient) putDateTimeValidCreateRequest(ctx context.Context, arrayBody []time.Time, options *ArrayPutDateTimeValidOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/date-time/valid"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(arrayBody)
}

// putDateTimeValidHandleError handles the PutDateTimeValid error response.
func (client ArrayClient) putDateTimeValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutDateValid - Set array value ['2000-12-01', '1980-01-02', '1492-10-12']
func (client ArrayClient) PutDateValid(ctx context.Context, arrayBody []time.Time, options *ArrayPutDateValidOptions) (*http.Response, error) {
	req, err := client.putDateValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putDateValidHandleError(resp)
	}
	return resp.Response, nil
}

// putDateValidCreateRequest creates the PutDateValid request.
func (client ArrayClient) putDateValidCreateRequest(ctx context.Context, arrayBody []time.Time, options *ArrayPutDateValidOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/date/valid"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	aux := make([]dateType, len(arrayBody), len(arrayBody))
	for i := 0; i < len(arrayBody); i++ {
		aux[i] = dateType(arrayBody[i])
	}
	return req, req.MarshalAsJSON(aux)
}

// putDateValidHandleError handles the PutDateValid error response.
func (client ArrayClient) putDateValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutDictionaryValid - Get an array of Dictionaries of type with value [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6': 'six'},
// {'7': 'seven', '8': 'eight', '9': 'nine'}]
func (client ArrayClient) PutDictionaryValid(ctx context.Context, arrayBody []map[string]string, options *ArrayPutDictionaryValidOptions) (*http.Response, error) {
	req, err := client.putDictionaryValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putDictionaryValidHandleError(resp)
	}
	return resp.Response, nil
}

// putDictionaryValidCreateRequest creates the PutDictionaryValid request.
func (client ArrayClient) putDictionaryValidCreateRequest(ctx context.Context, arrayBody []map[string]string, options *ArrayPutDictionaryValidOptions) (*azcore.Request, error) {
	urlPath := "/array/dictionary/valid"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(arrayBody)
}

// putDictionaryValidHandleError handles the PutDictionaryValid error response.
func (client ArrayClient) putDictionaryValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutDoubleValid - Set array value [0, -0.01, 1.2e20]
func (client ArrayClient) PutDoubleValid(ctx context.Context, arrayBody []float64, options *ArrayPutDoubleValidOptions) (*http.Response, error) {
	req, err := client.putDoubleValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putDoubleValidHandleError(resp)
	}
	return resp.Response, nil
}

// putDoubleValidCreateRequest creates the PutDoubleValid request.
func (client ArrayClient) putDoubleValidCreateRequest(ctx context.Context, arrayBody []float64, options *ArrayPutDoubleValidOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/double/0--0.01-1.2e20"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(arrayBody)
}

// putDoubleValidHandleError handles the PutDoubleValid error response.
func (client ArrayClient) putDoubleValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutDurationValid - Set array value ['P123DT22H14M12.011S', 'P5DT1H0M0S']
func (client ArrayClient) PutDurationValid(ctx context.Context, arrayBody []string, options *ArrayPutDurationValidOptions) (*http.Response, error) {
	req, err := client.putDurationValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putDurationValidHandleError(resp)
	}
	return resp.Response, nil
}

// putDurationValidCreateRequest creates the PutDurationValid request.
func (client ArrayClient) putDurationValidCreateRequest(ctx context.Context, arrayBody []string, options *ArrayPutDurationValidOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/duration/valid"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(arrayBody)
}

// putDurationValidHandleError handles the PutDurationValid error response.
func (client ArrayClient) putDurationValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutEmpty - Set array value empty []
func (client ArrayClient) PutEmpty(ctx context.Context, arrayBody []string, options *ArrayPutEmptyOptions) (*http.Response, error) {
	req, err := client.putEmptyCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putEmptyHandleError(resp)
	}
	return resp.Response, nil
}

// putEmptyCreateRequest creates the PutEmpty request.
func (client ArrayClient) putEmptyCreateRequest(ctx context.Context, arrayBody []string, options *ArrayPutEmptyOptions) (*azcore.Request, error) {
	urlPath := "/array/empty"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(arrayBody)
}

// putEmptyHandleError handles the PutEmpty error response.
func (client ArrayClient) putEmptyHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutEnumValid - Set array value ['foo1', 'foo2', 'foo3']
func (client ArrayClient) PutEnumValid(ctx context.Context, arrayBody []FooEnum, options *ArrayPutEnumValidOptions) (*http.Response, error) {
	req, err := client.putEnumValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putEnumValidHandleError(resp)
	}
	return resp.Response, nil
}

// putEnumValidCreateRequest creates the PutEnumValid request.
func (client ArrayClient) putEnumValidCreateRequest(ctx context.Context, arrayBody []FooEnum, options *ArrayPutEnumValidOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/enum/foo1.foo2.foo3"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(arrayBody)
}

// putEnumValidHandleError handles the PutEnumValid error response.
func (client ArrayClient) putEnumValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutFloatValid - Set array value [0, -0.01, 1.2e20]
func (client ArrayClient) PutFloatValid(ctx context.Context, arrayBody []float32, options *ArrayPutFloatValidOptions) (*http.Response, error) {
	req, err := client.putFloatValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putFloatValidHandleError(resp)
	}
	return resp.Response, nil
}

// putFloatValidCreateRequest creates the PutFloatValid request.
func (client ArrayClient) putFloatValidCreateRequest(ctx context.Context, arrayBody []float32, options *ArrayPutFloatValidOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/float/0--0.01-1.2e20"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(arrayBody)
}

// putFloatValidHandleError handles the PutFloatValid error response.
func (client ArrayClient) putFloatValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutIntegerValid - Set array value empty [1, -1, 3, 300]
func (client ArrayClient) PutIntegerValid(ctx context.Context, arrayBody []int32, options *ArrayPutIntegerValidOptions) (*http.Response, error) {
	req, err := client.putIntegerValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putIntegerValidHandleError(resp)
	}
	return resp.Response, nil
}

// putIntegerValidCreateRequest creates the PutIntegerValid request.
func (client ArrayClient) putIntegerValidCreateRequest(ctx context.Context, arrayBody []int32, options *ArrayPutIntegerValidOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/integer/1.-1.3.300"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(arrayBody)
}

// putIntegerValidHandleError handles the PutIntegerValid error response.
func (client ArrayClient) putIntegerValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutLongValid - Set array value empty [1, -1, 3, 300]
func (client ArrayClient) PutLongValid(ctx context.Context, arrayBody []int64, options *ArrayPutLongValidOptions) (*http.Response, error) {
	req, err := client.putLongValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putLongValidHandleError(resp)
	}
	return resp.Response, nil
}

// putLongValidCreateRequest creates the PutLongValid request.
func (client ArrayClient) putLongValidCreateRequest(ctx context.Context, arrayBody []int64, options *ArrayPutLongValidOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/long/1.-1.3.300"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(arrayBody)
}

// putLongValidHandleError handles the PutLongValid error response.
func (client ArrayClient) putLongValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutStringEnumValid - Set array value ['foo1', 'foo2', 'foo3']
func (client ArrayClient) PutStringEnumValid(ctx context.Context, arrayBody []Enum1, options *ArrayPutStringEnumValidOptions) (*http.Response, error) {
	req, err := client.putStringEnumValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putStringEnumValidHandleError(resp)
	}
	return resp.Response, nil
}

// putStringEnumValidCreateRequest creates the PutStringEnumValid request.
func (client ArrayClient) putStringEnumValidCreateRequest(ctx context.Context, arrayBody []Enum1, options *ArrayPutStringEnumValidOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/string-enum/foo1.foo2.foo3"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(arrayBody)
}

// putStringEnumValidHandleError handles the PutStringEnumValid error response.
func (client ArrayClient) putStringEnumValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutStringValid - Set array value ['foo1', 'foo2', 'foo3']
func (client ArrayClient) PutStringValid(ctx context.Context, arrayBody []string, options *ArrayPutStringValidOptions) (*http.Response, error) {
	req, err := client.putStringValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putStringValidHandleError(resp)
	}
	return resp.Response, nil
}

// putStringValidCreateRequest creates the PutStringValid request.
func (client ArrayClient) putStringValidCreateRequest(ctx context.Context, arrayBody []string, options *ArrayPutStringValidOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/string/foo1.foo2.foo3"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(arrayBody)
}

// putStringValidHandleError handles the PutStringValid error response.
func (client ArrayClient) putStringValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// PutUUIDValid - Set array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
func (client ArrayClient) PutUUIDValid(ctx context.Context, arrayBody []string, options *ArrayPutUUIDValidOptions) (*http.Response, error) {
	req, err := client.putUuidValidCreateRequest(ctx, arrayBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.putUuidValidHandleError(resp)
	}
	return resp.Response, nil
}

// putUuidValidCreateRequest creates the PutUUIDValid request.
func (client ArrayClient) putUuidValidCreateRequest(ctx context.Context, arrayBody []string, options *ArrayPutUUIDValidOptions) (*azcore.Request, error) {
	urlPath := "/array/prim/uuid/valid"
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(arrayBody)
}

// putUuidValidHandleError handles the PutUUIDValid error response.
func (client ArrayClient) putUuidValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}
