//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azurespecialsgroup

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// XMSClientRequestIDClient contains the methods for the XMSClientRequestID group.
// Don't use this type directly, use NewXMSClientRequestIDClient() instead.
type XMSClientRequestIDClient struct {
	pl runtime.Pipeline
}

// NewXMSClientRequestIDClient creates a new instance of XMSClientRequestIDClient with the specified values.
// options - pass nil to accept the default values.
func NewXMSClientRequestIDClient(options *azcore.ClientOptions) *XMSClientRequestIDClient {
	cp := azcore.ClientOptions{}
	if options != nil {
		cp = *options
	}
	client := &XMSClientRequestIDClient{
		pl: runtime.NewPipeline(module, version, nil, nil, &cp),
	}
	return client
}

// Get - Get method that overwrites x-ms-client-request header with value 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
// If the operation fails it returns a generic error.
// options - XMSClientRequestIDGetOptions contains the optional parameters for the XMSClientRequestID.Get method.
func (client *XMSClientRequestIDClient) Get(ctx context.Context, options *XMSClientRequestIDGetOptions) (XMSClientRequestIDGetResponse, error) {
	req, err := client.getCreateRequest(ctx, options)
	if err != nil {
		return XMSClientRequestIDGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMSClientRequestIDGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return XMSClientRequestIDGetResponse{}, client.getHandleError(resp)
	}
	return XMSClientRequestIDGetResponse{RawResponse: resp}, nil
}

// getCreateRequest creates the Get request.
func (client *XMSClientRequestIDClient) getCreateRequest(ctx context.Context, options *XMSClientRequestIDGetOptions) (*policy.Request, error) {
	urlPath := "/azurespecials/overwrite/x-ms-client-request-id/method/"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// getHandleError handles the Get error response.
func (client *XMSClientRequestIDClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// ParamGet - Get method that overwrites x-ms-client-request header with value 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
// If the operation fails it returns the *Error error type.
// xmsClientRequestID - This should appear as a method parameter, use value '9C4D50EE-2D56-4CD3-8152-34347DC9F2B0'
// options - XMSClientRequestIDParamGetOptions contains the optional parameters for the XMSClientRequestID.ParamGet method.
func (client *XMSClientRequestIDClient) ParamGet(ctx context.Context, xmsClientRequestID string, options *XMSClientRequestIDParamGetOptions) (XMSClientRequestIDParamGetResponse, error) {
	req, err := client.paramGetCreateRequest(ctx, xmsClientRequestID, options)
	if err != nil {
		return XMSClientRequestIDParamGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return XMSClientRequestIDParamGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return XMSClientRequestIDParamGetResponse{}, client.paramGetHandleError(resp)
	}
	return XMSClientRequestIDParamGetResponse{RawResponse: resp}, nil
}

// paramGetCreateRequest creates the ParamGet request.
func (client *XMSClientRequestIDClient) paramGetCreateRequest(ctx context.Context, xmsClientRequestID string, options *XMSClientRequestIDParamGetOptions) (*policy.Request, error) {
	urlPath := "/azurespecials/overwrite/x-ms-client-request-id/via-param/method/"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("x-ms-client-request-id", xmsClientRequestID)
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// paramGetHandleError handles the ParamGet error response.
func (client *XMSClientRequestIDClient) paramGetHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
