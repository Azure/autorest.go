//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azurespecialsgroup

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// APIVersionDefaultClient contains the methods for the APIVersionDefault group.
// Don't use this type directly, use NewAPIVersionDefaultClient() instead.
type APIVersionDefaultClient struct {
	pl runtime.Pipeline
}

// NewAPIVersionDefaultClient creates a new instance of APIVersionDefaultClient with the specified values.
func NewAPIVersionDefaultClient(options *azcore.ClientOptions) *APIVersionDefaultClient {
	cp := azcore.ClientOptions{}
	if options != nil {
		cp = *options
	}
	client := &APIVersionDefaultClient{
		pl: runtime.NewPipeline(module, version, nil, nil, &cp),
	}
	return client
}

// GetMethodGlobalNotProvidedValid - GET method with api-version modeled in global settings.
// If the operation fails it returns the *Error error type.
func (client *APIVersionDefaultClient) GetMethodGlobalNotProvidedValid(ctx context.Context, options *APIVersionDefaultGetMethodGlobalNotProvidedValidOptions) (APIVersionDefaultGetMethodGlobalNotProvidedValidResponse, error) {
	req, err := client.getMethodGlobalNotProvidedValidCreateRequest(ctx, options)
	if err != nil {
		return APIVersionDefaultGetMethodGlobalNotProvidedValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return APIVersionDefaultGetMethodGlobalNotProvidedValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return APIVersionDefaultGetMethodGlobalNotProvidedValidResponse{}, client.getMethodGlobalNotProvidedValidHandleError(resp)
	}
	return APIVersionDefaultGetMethodGlobalNotProvidedValidResponse{RawResponse: resp}, nil
}

// getMethodGlobalNotProvidedValidCreateRequest creates the GetMethodGlobalNotProvidedValid request.
func (client *APIVersionDefaultClient) getMethodGlobalNotProvidedValidCreateRequest(ctx context.Context, options *APIVersionDefaultGetMethodGlobalNotProvidedValidOptions) (*policy.Request, error) {
	urlPath := "/azurespecials/apiVersion/method/string/none/query/globalNotProvided/2015-07-01-preview"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2015-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getMethodGlobalNotProvidedValidHandleError handles the GetMethodGlobalNotProvidedValid error response.
func (client *APIVersionDefaultClient) getMethodGlobalNotProvidedValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetMethodGlobalValid - GET method with api-version modeled in global settings.
// If the operation fails it returns the *Error error type.
func (client *APIVersionDefaultClient) GetMethodGlobalValid(ctx context.Context, options *APIVersionDefaultGetMethodGlobalValidOptions) (APIVersionDefaultGetMethodGlobalValidResponse, error) {
	req, err := client.getMethodGlobalValidCreateRequest(ctx, options)
	if err != nil {
		return APIVersionDefaultGetMethodGlobalValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return APIVersionDefaultGetMethodGlobalValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return APIVersionDefaultGetMethodGlobalValidResponse{}, client.getMethodGlobalValidHandleError(resp)
	}
	return APIVersionDefaultGetMethodGlobalValidResponse{RawResponse: resp}, nil
}

// getMethodGlobalValidCreateRequest creates the GetMethodGlobalValid request.
func (client *APIVersionDefaultClient) getMethodGlobalValidCreateRequest(ctx context.Context, options *APIVersionDefaultGetMethodGlobalValidOptions) (*policy.Request, error) {
	urlPath := "/azurespecials/apiVersion/method/string/none/query/global/2015-07-01-preview"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2015-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getMethodGlobalValidHandleError handles the GetMethodGlobalValid error response.
func (client *APIVersionDefaultClient) getMethodGlobalValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetPathGlobalValid - GET method with api-version modeled in global settings.
// If the operation fails it returns the *Error error type.
func (client *APIVersionDefaultClient) GetPathGlobalValid(ctx context.Context, options *APIVersionDefaultGetPathGlobalValidOptions) (APIVersionDefaultGetPathGlobalValidResponse, error) {
	req, err := client.getPathGlobalValidCreateRequest(ctx, options)
	if err != nil {
		return APIVersionDefaultGetPathGlobalValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return APIVersionDefaultGetPathGlobalValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return APIVersionDefaultGetPathGlobalValidResponse{}, client.getPathGlobalValidHandleError(resp)
	}
	return APIVersionDefaultGetPathGlobalValidResponse{RawResponse: resp}, nil
}

// getPathGlobalValidCreateRequest creates the GetPathGlobalValid request.
func (client *APIVersionDefaultClient) getPathGlobalValidCreateRequest(ctx context.Context, options *APIVersionDefaultGetPathGlobalValidOptions) (*policy.Request, error) {
	urlPath := "/azurespecials/apiVersion/path/string/none/query/global/2015-07-01-preview"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2015-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getPathGlobalValidHandleError handles the GetPathGlobalValid error response.
func (client *APIVersionDefaultClient) getPathGlobalValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetSwaggerGlobalValid - GET method with api-version modeled in global settings.
// If the operation fails it returns the *Error error type.
func (client *APIVersionDefaultClient) GetSwaggerGlobalValid(ctx context.Context, options *APIVersionDefaultGetSwaggerGlobalValidOptions) (APIVersionDefaultGetSwaggerGlobalValidResponse, error) {
	req, err := client.getSwaggerGlobalValidCreateRequest(ctx, options)
	if err != nil {
		return APIVersionDefaultGetSwaggerGlobalValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return APIVersionDefaultGetSwaggerGlobalValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return APIVersionDefaultGetSwaggerGlobalValidResponse{}, client.getSwaggerGlobalValidHandleError(resp)
	}
	return APIVersionDefaultGetSwaggerGlobalValidResponse{RawResponse: resp}, nil
}

// getSwaggerGlobalValidCreateRequest creates the GetSwaggerGlobalValid request.
func (client *APIVersionDefaultClient) getSwaggerGlobalValidCreateRequest(ctx context.Context, options *APIVersionDefaultGetSwaggerGlobalValidOptions) (*policy.Request, error) {
	urlPath := "/azurespecials/apiVersion/swagger/string/none/query/global/2015-07-01-preview"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2015-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getSwaggerGlobalValidHandleError handles the GetSwaggerGlobalValid error response.
func (client *APIVersionDefaultClient) getSwaggerGlobalValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
