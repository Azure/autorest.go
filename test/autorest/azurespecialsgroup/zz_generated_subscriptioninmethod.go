// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azurespecialsgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// SubscriptionInMethodOperations contains the methods for the SubscriptionInMethod group.
type SubscriptionInMethodOperations interface {
	// PostMethodLocalNull - POST method with subscriptionId modeled in the method.  pass in subscription id = null, client-side validation should prevent you from making this call
	PostMethodLocalNull(ctx context.Context, subscriptionId string) (*http.Response, error)
	// PostMethodLocalValid - POST method with subscriptionId modeled in the method.  pass in subscription id = '1234-5678-9012-3456' to succeed
	PostMethodLocalValid(ctx context.Context, subscriptionId string) (*http.Response, error)
	// PostPathLocalValid - POST method with subscriptionId modeled in the method.  pass in subscription id = '1234-5678-9012-3456' to succeed
	PostPathLocalValid(ctx context.Context, subscriptionId string) (*http.Response, error)
	// PostSwaggerLocalValid - POST method with subscriptionId modeled in the method.  pass in subscription id = '1234-5678-9012-3456' to succeed
	PostSwaggerLocalValid(ctx context.Context, subscriptionId string) (*http.Response, error)
}

// SubscriptionInMethodClient implements the SubscriptionInMethodOperations interface.
// Don't use this type directly, use NewSubscriptionInMethodClient() instead.
type SubscriptionInMethodClient struct {
	*Client
}

// NewSubscriptionInMethodClient creates a new instance of SubscriptionInMethodClient with the specified values.
func NewSubscriptionInMethodClient(c *Client) SubscriptionInMethodOperations {
	return &SubscriptionInMethodClient{Client: c}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *SubscriptionInMethodClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// PostMethodLocalNull - POST method with subscriptionId modeled in the method.  pass in subscription id = null, client-side validation should prevent you from making this call
func (client *SubscriptionInMethodClient) PostMethodLocalNull(ctx context.Context, subscriptionId string) (*http.Response, error) {
	req, err := client.PostMethodLocalNullCreateRequest(ctx, subscriptionId)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.PostMethodLocalNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PostMethodLocalNullCreateRequest creates the PostMethodLocalNull request.
func (client *SubscriptionInMethodClient) PostMethodLocalNullCreateRequest(ctx context.Context, subscriptionId string) (*azcore.Request, error) {
	urlPath := "/azurespecials/subscriptionId/method/string/none/path/local/null/{subscriptionId}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionId))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// PostMethodLocalNullHandleResponse handles the PostMethodLocalNull response.
func (client *SubscriptionInMethodClient) PostMethodLocalNullHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostMethodLocalNullHandleError(resp)
	}
	return resp.Response, nil
}

// PostMethodLocalNullHandleError handles the PostMethodLocalNull error response.
func (client *SubscriptionInMethodClient) PostMethodLocalNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostMethodLocalValid - POST method with subscriptionId modeled in the method.  pass in subscription id = '1234-5678-9012-3456' to succeed
func (client *SubscriptionInMethodClient) PostMethodLocalValid(ctx context.Context, subscriptionId string) (*http.Response, error) {
	req, err := client.PostMethodLocalValidCreateRequest(ctx, subscriptionId)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.PostMethodLocalValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PostMethodLocalValidCreateRequest creates the PostMethodLocalValid request.
func (client *SubscriptionInMethodClient) PostMethodLocalValidCreateRequest(ctx context.Context, subscriptionId string) (*azcore.Request, error) {
	urlPath := "/azurespecials/subscriptionId/method/string/none/path/local/1234-5678-9012-3456/{subscriptionId}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionId))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// PostMethodLocalValidHandleResponse handles the PostMethodLocalValid response.
func (client *SubscriptionInMethodClient) PostMethodLocalValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostMethodLocalValidHandleError(resp)
	}
	return resp.Response, nil
}

// PostMethodLocalValidHandleError handles the PostMethodLocalValid error response.
func (client *SubscriptionInMethodClient) PostMethodLocalValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostPathLocalValid - POST method with subscriptionId modeled in the method.  pass in subscription id = '1234-5678-9012-3456' to succeed
func (client *SubscriptionInMethodClient) PostPathLocalValid(ctx context.Context, subscriptionId string) (*http.Response, error) {
	req, err := client.PostPathLocalValidCreateRequest(ctx, subscriptionId)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.PostPathLocalValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PostPathLocalValidCreateRequest creates the PostPathLocalValid request.
func (client *SubscriptionInMethodClient) PostPathLocalValidCreateRequest(ctx context.Context, subscriptionId string) (*azcore.Request, error) {
	urlPath := "/azurespecials/subscriptionId/path/string/none/path/local/1234-5678-9012-3456/{subscriptionId}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionId))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// PostPathLocalValidHandleResponse handles the PostPathLocalValid response.
func (client *SubscriptionInMethodClient) PostPathLocalValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostPathLocalValidHandleError(resp)
	}
	return resp.Response, nil
}

// PostPathLocalValidHandleError handles the PostPathLocalValid error response.
func (client *SubscriptionInMethodClient) PostPathLocalValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// PostSwaggerLocalValid - POST method with subscriptionId modeled in the method.  pass in subscription id = '1234-5678-9012-3456' to succeed
func (client *SubscriptionInMethodClient) PostSwaggerLocalValid(ctx context.Context, subscriptionId string) (*http.Response, error) {
	req, err := client.PostSwaggerLocalValidCreateRequest(ctx, subscriptionId)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.PostSwaggerLocalValidHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// PostSwaggerLocalValidCreateRequest creates the PostSwaggerLocalValid request.
func (client *SubscriptionInMethodClient) PostSwaggerLocalValidCreateRequest(ctx context.Context, subscriptionId string) (*azcore.Request, error) {
	urlPath := "/azurespecials/subscriptionId/swagger/string/none/path/local/1234-5678-9012-3456/{subscriptionId}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionId))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// PostSwaggerLocalValidHandleResponse handles the PostSwaggerLocalValid response.
func (client *SubscriptionInMethodClient) PostSwaggerLocalValidHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.PostSwaggerLocalValidHandleError(resp)
	}
	return resp.Response, nil
}

// PostSwaggerLocalValidHandleError handles the PostSwaggerLocalValid error response.
func (client *SubscriptionInMethodClient) PostSwaggerLocalValidHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
