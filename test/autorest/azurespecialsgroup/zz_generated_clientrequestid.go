// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azurespecialsgroup

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"io/ioutil"
	"net/http"
)

// ClientRequestIDClient contains the methods for the ClientRequestID group.
// Don't use this type directly, use NewClientRequestIDClient() instead.
type ClientRequestIDClient struct {
	con *Connection
}

// NewClientRequestIDClient creates a new instance of ClientRequestIDClient with the specified values.
func NewClientRequestIDClient(con *Connection) *ClientRequestIDClient {
	return &ClientRequestIDClient{con: con}
}

// Get - Get method that overwrites x-ms-client-request header with value 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
func (client *ClientRequestIDClient) Get(ctx context.Context, options *ClientRequestIDGetOptions) (*http.Response, error) {
	req, err := client.getCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getHandleError(resp)
	}
	return resp.Response, nil
}

// getCreateRequest creates the Get request.
func (client *ClientRequestIDClient) getCreateRequest(ctx context.Context, options *ClientRequestIDGetOptions) (*azcore.Request, error) {
	urlPath := "/azurespecials/overwrite/x-ms-client-request-id/method/"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	return req, nil
}

// getHandleError handles the Get error response.
func (client *ClientRequestIDClient) getHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// ParamGet - Get method that overwrites x-ms-client-request header with value 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
func (client *ClientRequestIDClient) ParamGet(ctx context.Context, clientRequestID string, options *ClientRequestIDParamGetOptions) (*http.Response, error) {
	req, err := client.paramGetCreateRequest(ctx, clientRequestID, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.paramGetHandleError(resp)
	}
	return resp.Response, nil
}

// paramGetCreateRequest creates the ParamGet request.
func (client *ClientRequestIDClient) paramGetCreateRequest(ctx context.Context, clientRequestID string, options *ClientRequestIDParamGetOptions) (*azcore.Request, error) {
	urlPath := "/azurespecials/overwrite/x-ms-client-request-id/via-param/method/"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	req.Header.Set("x-ms-client-request-id", clientRequestID)
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// paramGetHandleError handles the ParamGet error response.
func (client *ClientRequestIDClient) paramGetHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}
