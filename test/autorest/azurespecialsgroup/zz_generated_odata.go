// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azurespecialsgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"strconv"
)

// OdataOperations contains the methods for the Odata group.
type OdataOperations interface {
	// GetWithFilter - Specify filter parameter with value '$filter=id gt 5 and name eq 'foo'&$orderby=id&$top=10'
	GetWithFilter(ctx context.Context, odataGetWithFilterOptions *OdataGetWithFilterOptions) (*http.Response, error)
}

// OdataClient implements the OdataOperations interface.
// Don't use this type directly, use NewOdataClient() instead.
type OdataClient struct {
	*Client
}

// NewOdataClient creates a new instance of OdataClient with the specified values.
func NewOdataClient(c *Client) OdataOperations {
	return &OdataClient{Client: c}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *OdataClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// GetWithFilter - Specify filter parameter with value '$filter=id gt 5 and name eq 'foo'&$orderby=id&$top=10'
func (client *OdataClient) GetWithFilter(ctx context.Context, odataGetWithFilterOptions *OdataGetWithFilterOptions) (*http.Response, error) {
	req, err := client.GetWithFilterCreateRequest(ctx, odataGetWithFilterOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetWithFilterHandleError(resp)
	}
	return resp.Response, nil
}

// GetWithFilterCreateRequest creates the GetWithFilter request.
func (client *OdataClient) GetWithFilterCreateRequest(ctx context.Context, odataGetWithFilterOptions *OdataGetWithFilterOptions) (*azcore.Request, error) {
	urlPath := "/azurespecials/odata/filter"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	if odataGetWithFilterOptions != nil && odataGetWithFilterOptions.Filter != nil {
		query.Set("$filter", *odataGetWithFilterOptions.Filter)
	}
	if odataGetWithFilterOptions != nil && odataGetWithFilterOptions.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*odataGetWithFilterOptions.Top), 10))
	}
	if odataGetWithFilterOptions != nil && odataGetWithFilterOptions.Orderby != nil {
		query.Set("$orderby", *odataGetWithFilterOptions.Orderby)
	}
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetWithFilterHandleError handles the GetWithFilter error response.
func (client *OdataClient) GetWithFilterHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}
