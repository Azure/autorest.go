// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package urlgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// PathItemsOperations contains the methods for the PathItems group.
type PathItemsOperations interface {
	// GetAllWithValues - send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath', localStringPath='localStringPath', globalStringQuery='globalStringQuery', pathItemStringQuery='pathItemStringQuery', localStringQuery='localStringQuery'
	GetAllWithValues(ctx context.Context, pathItemStringPath string, localStringPath string, pathItemsGetAllWithValuesOptions *PathItemsGetAllWithValuesOptions) (*http.Response, error)
	// GetGlobalAndLocalQueryNull - send globalStringPath=globalStringPath, pathItemStringPath='pathItemStringPath', localStringPath='localStringPath', globalStringQuery=null, pathItemStringQuery='pathItemStringQuery', localStringQuery=null
	GetGlobalAndLocalQueryNull(ctx context.Context, pathItemStringPath string, localStringPath string, pathItemsGetGlobalAndLocalQueryNullOptions *PathItemsGetGlobalAndLocalQueryNullOptions) (*http.Response, error)
	// GetGlobalQueryNull - send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath', localStringPath='localStringPath', globalStringQuery=null, pathItemStringQuery='pathItemStringQuery', localStringQuery='localStringQuery'
	GetGlobalQueryNull(ctx context.Context, pathItemStringPath string, localStringPath string, pathItemsGetGlobalQueryNullOptions *PathItemsGetGlobalQueryNullOptions) (*http.Response, error)
	// GetLocalPathItemQueryNull - send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath', localStringPath='localStringPath', globalStringQuery='globalStringQuery', pathItemStringQuery=null, localStringQuery=null
	GetLocalPathItemQueryNull(ctx context.Context, pathItemStringPath string, localStringPath string, pathItemsGetLocalPathItemQueryNullOptions *PathItemsGetLocalPathItemQueryNullOptions) (*http.Response, error)
}

// PathItemsClient implements the PathItemsOperations interface.
// Don't use this type directly, use NewPathItemsClient() instead.
type PathItemsClient struct {
	*Client
	globalStringPath  string
	globalStringQuery *string
}

// NewPathItemsClient creates a new instance of PathItemsClient with the specified values.
func NewPathItemsClient(c *Client, globalStringPath string, globalStringQuery *string) PathItemsOperations {
	return &PathItemsClient{Client: c, globalStringPath: globalStringPath, globalStringQuery: globalStringQuery}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *PathItemsClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// GetAllWithValues - send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath', localStringPath='localStringPath', globalStringQuery='globalStringQuery', pathItemStringQuery='pathItemStringQuery', localStringQuery='localStringQuery'
func (client *PathItemsClient) GetAllWithValues(ctx context.Context, pathItemStringPath string, localStringPath string, pathItemsGetAllWithValuesOptions *PathItemsGetAllWithValuesOptions) (*http.Response, error) {
	req, err := client.GetAllWithValuesCreateRequest(ctx, pathItemStringPath, localStringPath, pathItemsGetAllWithValuesOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetAllWithValuesHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetAllWithValuesCreateRequest creates the GetAllWithValues request.
func (client *PathItemsClient) GetAllWithValuesCreateRequest(ctx context.Context, pathItemStringPath string, localStringPath string, pathItemsGetAllWithValuesOptions *PathItemsGetAllWithValuesOptions) (*azcore.Request, error) {
	urlPath := "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/globalStringQuery/pathItemStringQuery/localStringQuery"
	urlPath = strings.ReplaceAll(urlPath, "{pathItemStringPath}", url.PathEscape(pathItemStringPath))
	urlPath = strings.ReplaceAll(urlPath, "{globalStringPath}", url.PathEscape(client.globalStringPath))
	urlPath = strings.ReplaceAll(urlPath, "{localStringPath}", url.PathEscape(localStringPath))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	if pathItemsGetAllWithValuesOptions != nil && pathItemsGetAllWithValuesOptions.PathItemStringQuery != nil {
		query.Set("pathItemStringQuery", *pathItemsGetAllWithValuesOptions.PathItemStringQuery)
	}
	if client.globalStringQuery != nil {
		query.Set("globalStringQuery", *client.globalStringQuery)
	}
	if pathItemsGetAllWithValuesOptions != nil && pathItemsGetAllWithValuesOptions.LocalStringQuery != nil {
		query.Set("localStringQuery", *pathItemsGetAllWithValuesOptions.LocalStringQuery)
	}
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetAllWithValuesHandleResponse handles the GetAllWithValues response.
func (client *PathItemsClient) GetAllWithValuesHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetAllWithValuesHandleError(resp)
	}
	return resp.Response, nil
}

// GetAllWithValuesHandleError handles the GetAllWithValues error response.
func (client *PathItemsClient) GetAllWithValuesHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetGlobalAndLocalQueryNull - send globalStringPath=globalStringPath, pathItemStringPath='pathItemStringPath', localStringPath='localStringPath', globalStringQuery=null, pathItemStringQuery='pathItemStringQuery', localStringQuery=null
func (client *PathItemsClient) GetGlobalAndLocalQueryNull(ctx context.Context, pathItemStringPath string, localStringPath string, pathItemsGetGlobalAndLocalQueryNullOptions *PathItemsGetGlobalAndLocalQueryNullOptions) (*http.Response, error) {
	req, err := client.GetGlobalAndLocalQueryNullCreateRequest(ctx, pathItemStringPath, localStringPath, pathItemsGetGlobalAndLocalQueryNullOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetGlobalAndLocalQueryNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetGlobalAndLocalQueryNullCreateRequest creates the GetGlobalAndLocalQueryNull request.
func (client *PathItemsClient) GetGlobalAndLocalQueryNullCreateRequest(ctx context.Context, pathItemStringPath string, localStringPath string, pathItemsGetGlobalAndLocalQueryNullOptions *PathItemsGetGlobalAndLocalQueryNullOptions) (*azcore.Request, error) {
	urlPath := "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/null/pathItemStringQuery/null"
	urlPath = strings.ReplaceAll(urlPath, "{pathItemStringPath}", url.PathEscape(pathItemStringPath))
	urlPath = strings.ReplaceAll(urlPath, "{globalStringPath}", url.PathEscape(client.globalStringPath))
	urlPath = strings.ReplaceAll(urlPath, "{localStringPath}", url.PathEscape(localStringPath))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	if pathItemsGetGlobalAndLocalQueryNullOptions != nil && pathItemsGetGlobalAndLocalQueryNullOptions.PathItemStringQuery != nil {
		query.Set("pathItemStringQuery", *pathItemsGetGlobalAndLocalQueryNullOptions.PathItemStringQuery)
	}
	if client.globalStringQuery != nil {
		query.Set("globalStringQuery", *client.globalStringQuery)
	}
	if pathItemsGetGlobalAndLocalQueryNullOptions != nil && pathItemsGetGlobalAndLocalQueryNullOptions.LocalStringQuery != nil {
		query.Set("localStringQuery", *pathItemsGetGlobalAndLocalQueryNullOptions.LocalStringQuery)
	}
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetGlobalAndLocalQueryNullHandleResponse handles the GetGlobalAndLocalQueryNull response.
func (client *PathItemsClient) GetGlobalAndLocalQueryNullHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetGlobalAndLocalQueryNullHandleError(resp)
	}
	return resp.Response, nil
}

// GetGlobalAndLocalQueryNullHandleError handles the GetGlobalAndLocalQueryNull error response.
func (client *PathItemsClient) GetGlobalAndLocalQueryNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetGlobalQueryNull - send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath', localStringPath='localStringPath', globalStringQuery=null, pathItemStringQuery='pathItemStringQuery', localStringQuery='localStringQuery'
func (client *PathItemsClient) GetGlobalQueryNull(ctx context.Context, pathItemStringPath string, localStringPath string, pathItemsGetGlobalQueryNullOptions *PathItemsGetGlobalQueryNullOptions) (*http.Response, error) {
	req, err := client.GetGlobalQueryNullCreateRequest(ctx, pathItemStringPath, localStringPath, pathItemsGetGlobalQueryNullOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetGlobalQueryNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetGlobalQueryNullCreateRequest creates the GetGlobalQueryNull request.
func (client *PathItemsClient) GetGlobalQueryNullCreateRequest(ctx context.Context, pathItemStringPath string, localStringPath string, pathItemsGetGlobalQueryNullOptions *PathItemsGetGlobalQueryNullOptions) (*azcore.Request, error) {
	urlPath := "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/null/pathItemStringQuery/localStringQuery"
	urlPath = strings.ReplaceAll(urlPath, "{pathItemStringPath}", url.PathEscape(pathItemStringPath))
	urlPath = strings.ReplaceAll(urlPath, "{globalStringPath}", url.PathEscape(client.globalStringPath))
	urlPath = strings.ReplaceAll(urlPath, "{localStringPath}", url.PathEscape(localStringPath))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	if pathItemsGetGlobalQueryNullOptions != nil && pathItemsGetGlobalQueryNullOptions.PathItemStringQuery != nil {
		query.Set("pathItemStringQuery", *pathItemsGetGlobalQueryNullOptions.PathItemStringQuery)
	}
	if client.globalStringQuery != nil {
		query.Set("globalStringQuery", *client.globalStringQuery)
	}
	if pathItemsGetGlobalQueryNullOptions != nil && pathItemsGetGlobalQueryNullOptions.LocalStringQuery != nil {
		query.Set("localStringQuery", *pathItemsGetGlobalQueryNullOptions.LocalStringQuery)
	}
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetGlobalQueryNullHandleResponse handles the GetGlobalQueryNull response.
func (client *PathItemsClient) GetGlobalQueryNullHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetGlobalQueryNullHandleError(resp)
	}
	return resp.Response, nil
}

// GetGlobalQueryNullHandleError handles the GetGlobalQueryNull error response.
func (client *PathItemsClient) GetGlobalQueryNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetLocalPathItemQueryNull - send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath', localStringPath='localStringPath', globalStringQuery='globalStringQuery', pathItemStringQuery=null, localStringQuery=null
func (client *PathItemsClient) GetLocalPathItemQueryNull(ctx context.Context, pathItemStringPath string, localStringPath string, pathItemsGetLocalPathItemQueryNullOptions *PathItemsGetLocalPathItemQueryNullOptions) (*http.Response, error) {
	req, err := client.GetLocalPathItemQueryNullCreateRequest(ctx, pathItemStringPath, localStringPath, pathItemsGetLocalPathItemQueryNullOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	result, err := client.GetLocalPathItemQueryNullHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetLocalPathItemQueryNullCreateRequest creates the GetLocalPathItemQueryNull request.
func (client *PathItemsClient) GetLocalPathItemQueryNullCreateRequest(ctx context.Context, pathItemStringPath string, localStringPath string, pathItemsGetLocalPathItemQueryNullOptions *PathItemsGetLocalPathItemQueryNullOptions) (*azcore.Request, error) {
	urlPath := "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/globalStringQuery/null/null"
	urlPath = strings.ReplaceAll(urlPath, "{pathItemStringPath}", url.PathEscape(pathItemStringPath))
	urlPath = strings.ReplaceAll(urlPath, "{globalStringPath}", url.PathEscape(client.globalStringPath))
	urlPath = strings.ReplaceAll(urlPath, "{localStringPath}", url.PathEscape(localStringPath))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	if pathItemsGetLocalPathItemQueryNullOptions != nil && pathItemsGetLocalPathItemQueryNullOptions.PathItemStringQuery != nil {
		query.Set("pathItemStringQuery", *pathItemsGetLocalPathItemQueryNullOptions.PathItemStringQuery)
	}
	if client.globalStringQuery != nil {
		query.Set("globalStringQuery", *client.globalStringQuery)
	}
	if pathItemsGetLocalPathItemQueryNullOptions != nil && pathItemsGetLocalPathItemQueryNullOptions.LocalStringQuery != nil {
		query.Set("localStringQuery", *pathItemsGetLocalPathItemQueryNullOptions.LocalStringQuery)
	}
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetLocalPathItemQueryNullHandleResponse handles the GetLocalPathItemQueryNull response.
func (client *PathItemsClient) GetLocalPathItemQueryNullHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetLocalPathItemQueryNullHandleError(resp)
	}
	return resp.Response, nil
}

// GetLocalPathItemQueryNullHandleError handles the GetLocalPathItemQueryNull error response.
func (client *PathItemsClient) GetLocalPathItemQueryNullHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
