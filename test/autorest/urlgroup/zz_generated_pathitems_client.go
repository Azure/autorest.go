//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package urlgroup

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// PathItemsClient contains the methods for the PathItems group.
// Don't use this type directly, use NewPathItemsClient() instead.
type PathItemsClient struct {
	con               *Connection
	globalStringPath  string
	globalStringQuery *string
}

// NewPathItemsClient creates a new instance of PathItemsClient with the specified values.
func NewPathItemsClient(con *Connection, globalStringPath string, globalStringQuery *string) *PathItemsClient {
	return &PathItemsClient{con: con, globalStringPath: globalStringPath, globalStringQuery: globalStringQuery}
}

// GetAllWithValues - send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath', localStringPath='localStringPath', globalStringQuery='globalStringQuery',
// pathItemStringQuery='pathItemStringQuery',
// localStringQuery='localStringQuery'
// If the operation fails it returns the *Error error type.
func (client *PathItemsClient) GetAllWithValues(ctx context.Context, pathItemStringPath string, localStringPath string, options *PathItemsGetAllWithValuesOptions) (PathItemsGetAllWithValuesResponse, error) {
	req, err := client.getAllWithValuesCreateRequest(ctx, pathItemStringPath, localStringPath, options)
	if err != nil {
		return PathItemsGetAllWithValuesResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return PathItemsGetAllWithValuesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PathItemsGetAllWithValuesResponse{}, client.getAllWithValuesHandleError(resp)
	}
	return PathItemsGetAllWithValuesResponse{RawResponse: resp}, nil
}

// getAllWithValuesCreateRequest creates the GetAllWithValues request.
func (client *PathItemsClient) getAllWithValuesCreateRequest(ctx context.Context, pathItemStringPath string, localStringPath string, options *PathItemsGetAllWithValuesOptions) (*policy.Request, error) {
	urlPath := "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/globalStringQuery/pathItemStringQuery/localStringQuery"
	if pathItemStringPath == "" {
		return nil, errors.New("parameter pathItemStringPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{pathItemStringPath}", url.PathEscape(pathItemStringPath))
	if client.globalStringPath == "" {
		return nil, errors.New("parameter client.globalStringPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{globalStringPath}", url.PathEscape(client.globalStringPath))
	if localStringPath == "" {
		return nil, errors.New("parameter localStringPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{localStringPath}", url.PathEscape(localStringPath))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.PathItemStringQuery != nil {
		reqQP.Set("pathItemStringQuery", *options.PathItemStringQuery)
	}
	if client.globalStringQuery != nil {
		reqQP.Set("globalStringQuery", *client.globalStringQuery)
	}
	if options != nil && options.LocalStringQuery != nil {
		reqQP.Set("localStringQuery", *options.LocalStringQuery)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getAllWithValuesHandleError handles the GetAllWithValues error response.
func (client *PathItemsClient) getAllWithValuesHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetGlobalAndLocalQueryNull - send globalStringPath=globalStringPath, pathItemStringPath='pathItemStringPath', localStringPath='localStringPath', globalStringQuery=null,
// pathItemStringQuery='pathItemStringQuery',
// localStringQuery=null
// If the operation fails it returns the *Error error type.
func (client *PathItemsClient) GetGlobalAndLocalQueryNull(ctx context.Context, pathItemStringPath string, localStringPath string, options *PathItemsGetGlobalAndLocalQueryNullOptions) (PathItemsGetGlobalAndLocalQueryNullResponse, error) {
	req, err := client.getGlobalAndLocalQueryNullCreateRequest(ctx, pathItemStringPath, localStringPath, options)
	if err != nil {
		return PathItemsGetGlobalAndLocalQueryNullResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return PathItemsGetGlobalAndLocalQueryNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PathItemsGetGlobalAndLocalQueryNullResponse{}, client.getGlobalAndLocalQueryNullHandleError(resp)
	}
	return PathItemsGetGlobalAndLocalQueryNullResponse{RawResponse: resp}, nil
}

// getGlobalAndLocalQueryNullCreateRequest creates the GetGlobalAndLocalQueryNull request.
func (client *PathItemsClient) getGlobalAndLocalQueryNullCreateRequest(ctx context.Context, pathItemStringPath string, localStringPath string, options *PathItemsGetGlobalAndLocalQueryNullOptions) (*policy.Request, error) {
	urlPath := "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/null/pathItemStringQuery/null"
	if pathItemStringPath == "" {
		return nil, errors.New("parameter pathItemStringPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{pathItemStringPath}", url.PathEscape(pathItemStringPath))
	if client.globalStringPath == "" {
		return nil, errors.New("parameter client.globalStringPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{globalStringPath}", url.PathEscape(client.globalStringPath))
	if localStringPath == "" {
		return nil, errors.New("parameter localStringPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{localStringPath}", url.PathEscape(localStringPath))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.PathItemStringQuery != nil {
		reqQP.Set("pathItemStringQuery", *options.PathItemStringQuery)
	}
	if client.globalStringQuery != nil {
		reqQP.Set("globalStringQuery", *client.globalStringQuery)
	}
	if options != nil && options.LocalStringQuery != nil {
		reqQP.Set("localStringQuery", *options.LocalStringQuery)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getGlobalAndLocalQueryNullHandleError handles the GetGlobalAndLocalQueryNull error response.
func (client *PathItemsClient) getGlobalAndLocalQueryNullHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetGlobalQueryNull - send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath', localStringPath='localStringPath', globalStringQuery=null,
// pathItemStringQuery='pathItemStringQuery',
// localStringQuery='localStringQuery'
// If the operation fails it returns the *Error error type.
func (client *PathItemsClient) GetGlobalQueryNull(ctx context.Context, pathItemStringPath string, localStringPath string, options *PathItemsGetGlobalQueryNullOptions) (PathItemsGetGlobalQueryNullResponse, error) {
	req, err := client.getGlobalQueryNullCreateRequest(ctx, pathItemStringPath, localStringPath, options)
	if err != nil {
		return PathItemsGetGlobalQueryNullResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return PathItemsGetGlobalQueryNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PathItemsGetGlobalQueryNullResponse{}, client.getGlobalQueryNullHandleError(resp)
	}
	return PathItemsGetGlobalQueryNullResponse{RawResponse: resp}, nil
}

// getGlobalQueryNullCreateRequest creates the GetGlobalQueryNull request.
func (client *PathItemsClient) getGlobalQueryNullCreateRequest(ctx context.Context, pathItemStringPath string, localStringPath string, options *PathItemsGetGlobalQueryNullOptions) (*policy.Request, error) {
	urlPath := "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/null/pathItemStringQuery/localStringQuery"
	if pathItemStringPath == "" {
		return nil, errors.New("parameter pathItemStringPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{pathItemStringPath}", url.PathEscape(pathItemStringPath))
	if client.globalStringPath == "" {
		return nil, errors.New("parameter client.globalStringPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{globalStringPath}", url.PathEscape(client.globalStringPath))
	if localStringPath == "" {
		return nil, errors.New("parameter localStringPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{localStringPath}", url.PathEscape(localStringPath))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.PathItemStringQuery != nil {
		reqQP.Set("pathItemStringQuery", *options.PathItemStringQuery)
	}
	if client.globalStringQuery != nil {
		reqQP.Set("globalStringQuery", *client.globalStringQuery)
	}
	if options != nil && options.LocalStringQuery != nil {
		reqQP.Set("localStringQuery", *options.LocalStringQuery)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getGlobalQueryNullHandleError handles the GetGlobalQueryNull error response.
func (client *PathItemsClient) getGlobalQueryNullHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetLocalPathItemQueryNull - send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath', localStringPath='localStringPath', globalStringQuery='globalStringQuery',
// pathItemStringQuery=null,
// localStringQuery=null
// If the operation fails it returns the *Error error type.
func (client *PathItemsClient) GetLocalPathItemQueryNull(ctx context.Context, pathItemStringPath string, localStringPath string, options *PathItemsGetLocalPathItemQueryNullOptions) (PathItemsGetLocalPathItemQueryNullResponse, error) {
	req, err := client.getLocalPathItemQueryNullCreateRequest(ctx, pathItemStringPath, localStringPath, options)
	if err != nil {
		return PathItemsGetLocalPathItemQueryNullResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return PathItemsGetLocalPathItemQueryNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PathItemsGetLocalPathItemQueryNullResponse{}, client.getLocalPathItemQueryNullHandleError(resp)
	}
	return PathItemsGetLocalPathItemQueryNullResponse{RawResponse: resp}, nil
}

// getLocalPathItemQueryNullCreateRequest creates the GetLocalPathItemQueryNull request.
func (client *PathItemsClient) getLocalPathItemQueryNullCreateRequest(ctx context.Context, pathItemStringPath string, localStringPath string, options *PathItemsGetLocalPathItemQueryNullOptions) (*policy.Request, error) {
	urlPath := "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/globalStringQuery/null/null"
	if pathItemStringPath == "" {
		return nil, errors.New("parameter pathItemStringPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{pathItemStringPath}", url.PathEscape(pathItemStringPath))
	if client.globalStringPath == "" {
		return nil, errors.New("parameter client.globalStringPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{globalStringPath}", url.PathEscape(client.globalStringPath))
	if localStringPath == "" {
		return nil, errors.New("parameter localStringPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{localStringPath}", url.PathEscape(localStringPath))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.PathItemStringQuery != nil {
		reqQP.Set("pathItemStringQuery", *options.PathItemStringQuery)
	}
	if client.globalStringQuery != nil {
		reqQP.Set("globalStringQuery", *client.globalStringQuery)
	}
	if options != nil && options.LocalStringQuery != nil {
		reqQP.Set("localStringQuery", *options.LocalStringQuery)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getLocalPathItemQueryNullHandleError handles the GetLocalPathItemQueryNull error response.
func (client *PathItemsClient) getLocalPathItemQueryNullHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
