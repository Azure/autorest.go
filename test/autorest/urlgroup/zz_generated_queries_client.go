//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package urlgroup

import (
	"context"
	"encoding/base64"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strconv"
	"strings"
	"time"
)

// QueriesClient contains the methods for the Queries group.
// Don't use this type directly, use NewQueriesClient() instead.
type QueriesClient struct {
	pl runtime.Pipeline
}

// NewQueriesClient creates a new instance of QueriesClient with the specified values.
// options - pass nil to accept the default values.
func NewQueriesClient(options *azcore.ClientOptions) *QueriesClient {
	if options == nil {
		options = &azcore.ClientOptions{}
	}
	client := &QueriesClient{
		pl: runtime.NewPipeline(moduleName, moduleVersion, runtime.PipelineOptions{}, options),
	}
	return client
}

// ArrayStringCSVEmpty - Get an empty array [] of string using the csv-array format
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientArrayStringCSVEmptyOptions contains the optional parameters for the QueriesClient.ArrayStringCSVEmpty
// method.
func (client *QueriesClient) ArrayStringCSVEmpty(ctx context.Context, options *QueriesClientArrayStringCSVEmptyOptions) (QueriesClientArrayStringCSVEmptyResponse, error) {
	req, err := client.arrayStringCSVEmptyCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientArrayStringCSVEmptyResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientArrayStringCSVEmptyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientArrayStringCSVEmptyResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientArrayStringCSVEmptyResponse{}, nil
}

// arrayStringCSVEmptyCreateRequest creates the ArrayStringCSVEmpty request.
func (client *QueriesClient) arrayStringCSVEmptyCreateRequest(ctx context.Context, options *QueriesClientArrayStringCSVEmptyOptions) (*policy.Request, error) {
	urlPath := "/queries/array/csv/string/empty"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ArrayQuery != nil {
		reqQP.Set("arrayQuery", strings.Join(options.ArrayQuery, ","))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// ArrayStringCSVNull - Get a null array of string using the csv-array format
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientArrayStringCSVNullOptions contains the optional parameters for the QueriesClient.ArrayStringCSVNull
// method.
func (client *QueriesClient) ArrayStringCSVNull(ctx context.Context, options *QueriesClientArrayStringCSVNullOptions) (QueriesClientArrayStringCSVNullResponse, error) {
	req, err := client.arrayStringCSVNullCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientArrayStringCSVNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientArrayStringCSVNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientArrayStringCSVNullResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientArrayStringCSVNullResponse{}, nil
}

// arrayStringCSVNullCreateRequest creates the ArrayStringCSVNull request.
func (client *QueriesClient) arrayStringCSVNullCreateRequest(ctx context.Context, options *QueriesClientArrayStringCSVNullOptions) (*policy.Request, error) {
	urlPath := "/queries/array/csv/string/null"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ArrayQuery != nil {
		reqQP.Set("arrayQuery", strings.Join(options.ArrayQuery, ","))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// ArrayStringCSVValid - Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the csv-array
// format
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientArrayStringCSVValidOptions contains the optional parameters for the QueriesClient.ArrayStringCSVValid
// method.
func (client *QueriesClient) ArrayStringCSVValid(ctx context.Context, options *QueriesClientArrayStringCSVValidOptions) (QueriesClientArrayStringCSVValidResponse, error) {
	req, err := client.arrayStringCSVValidCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientArrayStringCSVValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientArrayStringCSVValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientArrayStringCSVValidResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientArrayStringCSVValidResponse{}, nil
}

// arrayStringCSVValidCreateRequest creates the ArrayStringCSVValid request.
func (client *QueriesClient) arrayStringCSVValidCreateRequest(ctx context.Context, options *QueriesClientArrayStringCSVValidOptions) (*policy.Request, error) {
	urlPath := "/queries/array/csv/string/valid"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ArrayQuery != nil {
		reqQP.Set("arrayQuery", strings.Join(options.ArrayQuery, ","))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// ArrayStringNoCollectionFormatEmpty - Array query has no defined collection format, should default to csv. Pass in ['hello',
// 'nihao', 'bonjour'] for the 'arrayQuery' parameter to the service
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientArrayStringNoCollectionFormatEmptyOptions contains the optional parameters for the QueriesClient.ArrayStringNoCollectionFormatEmpty
// method.
func (client *QueriesClient) ArrayStringNoCollectionFormatEmpty(ctx context.Context, options *QueriesClientArrayStringNoCollectionFormatEmptyOptions) (QueriesClientArrayStringNoCollectionFormatEmptyResponse, error) {
	req, err := client.arrayStringNoCollectionFormatEmptyCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientArrayStringNoCollectionFormatEmptyResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientArrayStringNoCollectionFormatEmptyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientArrayStringNoCollectionFormatEmptyResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientArrayStringNoCollectionFormatEmptyResponse{}, nil
}

// arrayStringNoCollectionFormatEmptyCreateRequest creates the ArrayStringNoCollectionFormatEmpty request.
func (client *QueriesClient) arrayStringNoCollectionFormatEmptyCreateRequest(ctx context.Context, options *QueriesClientArrayStringNoCollectionFormatEmptyOptions) (*policy.Request, error) {
	urlPath := "/queries/array/none/string/empty"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ArrayQuery != nil {
		reqQP.Set("arrayQuery", strings.Join(options.ArrayQuery, ","))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// ArrayStringPipesValid - Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the pipes-array
// format
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientArrayStringPipesValidOptions contains the optional parameters for the QueriesClient.ArrayStringPipesValid
// method.
func (client *QueriesClient) ArrayStringPipesValid(ctx context.Context, options *QueriesClientArrayStringPipesValidOptions) (QueriesClientArrayStringPipesValidResponse, error) {
	req, err := client.arrayStringPipesValidCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientArrayStringPipesValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientArrayStringPipesValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientArrayStringPipesValidResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientArrayStringPipesValidResponse{}, nil
}

// arrayStringPipesValidCreateRequest creates the ArrayStringPipesValid request.
func (client *QueriesClient) arrayStringPipesValidCreateRequest(ctx context.Context, options *QueriesClientArrayStringPipesValidOptions) (*policy.Request, error) {
	urlPath := "/queries/array/pipes/string/valid"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ArrayQuery != nil {
		reqQP.Set("arrayQuery", strings.Join(options.ArrayQuery, "|"))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// ArrayStringSsvValid - Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the ssv-array
// format
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientArrayStringSsvValidOptions contains the optional parameters for the QueriesClient.ArrayStringSsvValid
// method.
func (client *QueriesClient) ArrayStringSsvValid(ctx context.Context, options *QueriesClientArrayStringSsvValidOptions) (QueriesClientArrayStringSsvValidResponse, error) {
	req, err := client.arrayStringSsvValidCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientArrayStringSsvValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientArrayStringSsvValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientArrayStringSsvValidResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientArrayStringSsvValidResponse{}, nil
}

// arrayStringSsvValidCreateRequest creates the ArrayStringSsvValid request.
func (client *QueriesClient) arrayStringSsvValidCreateRequest(ctx context.Context, options *QueriesClientArrayStringSsvValidOptions) (*policy.Request, error) {
	urlPath := "/queries/array/ssv/string/valid"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ArrayQuery != nil {
		reqQP.Set("arrayQuery", strings.Join(options.ArrayQuery, " "))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// ArrayStringTsvValid - Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the tsv-array
// format
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientArrayStringTsvValidOptions contains the optional parameters for the QueriesClient.ArrayStringTsvValid
// method.
func (client *QueriesClient) ArrayStringTsvValid(ctx context.Context, options *QueriesClientArrayStringTsvValidOptions) (QueriesClientArrayStringTsvValidResponse, error) {
	req, err := client.arrayStringTsvValidCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientArrayStringTsvValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientArrayStringTsvValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientArrayStringTsvValidResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientArrayStringTsvValidResponse{}, nil
}

// arrayStringTsvValidCreateRequest creates the ArrayStringTsvValid request.
func (client *QueriesClient) arrayStringTsvValidCreateRequest(ctx context.Context, options *QueriesClientArrayStringTsvValidOptions) (*policy.Request, error) {
	urlPath := "/queries/array/tsv/string/valid"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ArrayQuery != nil {
		reqQP.Set("arrayQuery", strings.Join(options.ArrayQuery, "\t"))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// ByteEmpty - Get '' as byte array
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientByteEmptyOptions contains the optional parameters for the QueriesClient.ByteEmpty method.
func (client *QueriesClient) ByteEmpty(ctx context.Context, options *QueriesClientByteEmptyOptions) (QueriesClientByteEmptyResponse, error) {
	req, err := client.byteEmptyCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientByteEmptyResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientByteEmptyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientByteEmptyResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientByteEmptyResponse{}, nil
}

// byteEmptyCreateRequest creates the ByteEmpty request.
func (client *QueriesClient) byteEmptyCreateRequest(ctx context.Context, options *QueriesClientByteEmptyOptions) (*policy.Request, error) {
	urlPath := "/queries/byte/empty"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("byteQuery", "")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// ByteMultiByte - Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientByteMultiByteOptions contains the optional parameters for the QueriesClient.ByteMultiByte method.
func (client *QueriesClient) ByteMultiByte(ctx context.Context, options *QueriesClientByteMultiByteOptions) (QueriesClientByteMultiByteResponse, error) {
	req, err := client.byteMultiByteCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientByteMultiByteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientByteMultiByteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientByteMultiByteResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientByteMultiByteResponse{}, nil
}

// byteMultiByteCreateRequest creates the ByteMultiByte request.
func (client *QueriesClient) byteMultiByteCreateRequest(ctx context.Context, options *QueriesClientByteMultiByteOptions) (*policy.Request, error) {
	urlPath := "/queries/byte/multibyte"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ByteQuery != nil {
		reqQP.Set("byteQuery", base64.StdEncoding.EncodeToString(options.ByteQuery))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// ByteNull - Get null as byte array (no query parameters in uri)
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientByteNullOptions contains the optional parameters for the QueriesClient.ByteNull method.
func (client *QueriesClient) ByteNull(ctx context.Context, options *QueriesClientByteNullOptions) (QueriesClientByteNullResponse, error) {
	req, err := client.byteNullCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientByteNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientByteNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientByteNullResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientByteNullResponse{}, nil
}

// byteNullCreateRequest creates the ByteNull request.
func (client *QueriesClient) byteNullCreateRequest(ctx context.Context, options *QueriesClientByteNullOptions) (*policy.Request, error) {
	urlPath := "/queries/byte/null"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.ByteQuery != nil {
		reqQP.Set("byteQuery", base64.StdEncoding.EncodeToString(options.ByteQuery))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// DateNull - Get null as date - this should result in no query parameters in uri
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientDateNullOptions contains the optional parameters for the QueriesClient.DateNull method.
func (client *QueriesClient) DateNull(ctx context.Context, options *QueriesClientDateNullOptions) (QueriesClientDateNullResponse, error) {
	req, err := client.dateNullCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientDateNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientDateNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientDateNullResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientDateNullResponse{}, nil
}

// dateNullCreateRequest creates the DateNull request.
func (client *QueriesClient) dateNullCreateRequest(ctx context.Context, options *QueriesClientDateNullOptions) (*policy.Request, error) {
	urlPath := "/queries/date/null"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.DateQuery != nil {
		reqQP.Set("dateQuery", options.DateQuery.Format("2006-01-02"))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// DateTimeNull - Get null as date-time, should result in no query parameters in uri
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientDateTimeNullOptions contains the optional parameters for the QueriesClient.DateTimeNull method.
func (client *QueriesClient) DateTimeNull(ctx context.Context, options *QueriesClientDateTimeNullOptions) (QueriesClientDateTimeNullResponse, error) {
	req, err := client.dateTimeNullCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientDateTimeNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientDateTimeNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientDateTimeNullResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientDateTimeNullResponse{}, nil
}

// dateTimeNullCreateRequest creates the DateTimeNull request.
func (client *QueriesClient) dateTimeNullCreateRequest(ctx context.Context, options *QueriesClientDateTimeNullOptions) (*policy.Request, error) {
	urlPath := "/queries/datetime/null"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.DateTimeQuery != nil {
		reqQP.Set("dateTimeQuery", options.DateTimeQuery.Format(time.RFC3339Nano))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// DateTimeValid - Get '2012-01-01T01:01:01Z' as date-time
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientDateTimeValidOptions contains the optional parameters for the QueriesClient.DateTimeValid method.
func (client *QueriesClient) DateTimeValid(ctx context.Context, options *QueriesClientDateTimeValidOptions) (QueriesClientDateTimeValidResponse, error) {
	req, err := client.dateTimeValidCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientDateTimeValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientDateTimeValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientDateTimeValidResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientDateTimeValidResponse{}, nil
}

// dateTimeValidCreateRequest creates the DateTimeValid request.
func (client *QueriesClient) dateTimeValidCreateRequest(ctx context.Context, options *QueriesClientDateTimeValidOptions) (*policy.Request, error) {
	urlPath := "/queries/datetime/2012-01-01T01%3A01%3A01Z"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("dateTimeQuery", "2012-01-01T01:01:01Z")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// DateValid - Get '2012-01-01' as date
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientDateValidOptions contains the optional parameters for the QueriesClient.DateValid method.
func (client *QueriesClient) DateValid(ctx context.Context, options *QueriesClientDateValidOptions) (QueriesClientDateValidResponse, error) {
	req, err := client.dateValidCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientDateValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientDateValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientDateValidResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientDateValidResponse{}, nil
}

// dateValidCreateRequest creates the DateValid request.
func (client *QueriesClient) dateValidCreateRequest(ctx context.Context, options *QueriesClientDateValidOptions) (*policy.Request, error) {
	urlPath := "/queries/date/2012-01-01"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("dateQuery", "2012-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// DoubleDecimalNegative - Get '-9999999.999' numeric value
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientDoubleDecimalNegativeOptions contains the optional parameters for the QueriesClient.DoubleDecimalNegative
// method.
func (client *QueriesClient) DoubleDecimalNegative(ctx context.Context, options *QueriesClientDoubleDecimalNegativeOptions) (QueriesClientDoubleDecimalNegativeResponse, error) {
	req, err := client.doubleDecimalNegativeCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientDoubleDecimalNegativeResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientDoubleDecimalNegativeResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientDoubleDecimalNegativeResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientDoubleDecimalNegativeResponse{}, nil
}

// doubleDecimalNegativeCreateRequest creates the DoubleDecimalNegative request.
func (client *QueriesClient) doubleDecimalNegativeCreateRequest(ctx context.Context, options *QueriesClientDoubleDecimalNegativeOptions) (*policy.Request, error) {
	urlPath := "/queries/double/-9999999.999"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("doubleQuery", "-9999999.999")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// DoubleDecimalPositive - Get '9999999.999' numeric value
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientDoubleDecimalPositiveOptions contains the optional parameters for the QueriesClient.DoubleDecimalPositive
// method.
func (client *QueriesClient) DoubleDecimalPositive(ctx context.Context, options *QueriesClientDoubleDecimalPositiveOptions) (QueriesClientDoubleDecimalPositiveResponse, error) {
	req, err := client.doubleDecimalPositiveCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientDoubleDecimalPositiveResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientDoubleDecimalPositiveResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientDoubleDecimalPositiveResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientDoubleDecimalPositiveResponse{}, nil
}

// doubleDecimalPositiveCreateRequest creates the DoubleDecimalPositive request.
func (client *QueriesClient) doubleDecimalPositiveCreateRequest(ctx context.Context, options *QueriesClientDoubleDecimalPositiveOptions) (*policy.Request, error) {
	urlPath := "/queries/double/9999999.999"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("doubleQuery", "9999999.999")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// DoubleNull - Get null numeric value (no query parameter)
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientDoubleNullOptions contains the optional parameters for the QueriesClient.DoubleNull method.
func (client *QueriesClient) DoubleNull(ctx context.Context, options *QueriesClientDoubleNullOptions) (QueriesClientDoubleNullResponse, error) {
	req, err := client.doubleNullCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientDoubleNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientDoubleNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientDoubleNullResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientDoubleNullResponse{}, nil
}

// doubleNullCreateRequest creates the DoubleNull request.
func (client *QueriesClient) doubleNullCreateRequest(ctx context.Context, options *QueriesClientDoubleNullOptions) (*policy.Request, error) {
	urlPath := "/queries/double/null"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.DoubleQuery != nil {
		reqQP.Set("doubleQuery", strconv.FormatFloat(*options.DoubleQuery, 'f', -1, 64))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// EnumNull - Get null (no query parameter in url)
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientEnumNullOptions contains the optional parameters for the QueriesClient.EnumNull method.
func (client *QueriesClient) EnumNull(ctx context.Context, options *QueriesClientEnumNullOptions) (QueriesClientEnumNullResponse, error) {
	req, err := client.enumNullCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientEnumNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientEnumNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientEnumNullResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientEnumNullResponse{}, nil
}

// enumNullCreateRequest creates the EnumNull request.
func (client *QueriesClient) enumNullCreateRequest(ctx context.Context, options *QueriesClientEnumNullOptions) (*policy.Request, error) {
	urlPath := "/queries/enum/null"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.EnumQuery != nil {
		reqQP.Set("enumQuery", string(*options.EnumQuery))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// EnumValid - Get using uri with query parameter 'green color'
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientEnumValidOptions contains the optional parameters for the QueriesClient.EnumValid method.
func (client *QueriesClient) EnumValid(ctx context.Context, options *QueriesClientEnumValidOptions) (QueriesClientEnumValidResponse, error) {
	req, err := client.enumValidCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientEnumValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientEnumValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientEnumValidResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientEnumValidResponse{}, nil
}

// enumValidCreateRequest creates the EnumValid request.
func (client *QueriesClient) enumValidCreateRequest(ctx context.Context, options *QueriesClientEnumValidOptions) (*policy.Request, error) {
	urlPath := "/queries/enum/green%20color"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.EnumQuery != nil {
		reqQP.Set("enumQuery", string(*options.EnumQuery))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// FloatNull - Get null numeric value (no query parameter)
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientFloatNullOptions contains the optional parameters for the QueriesClient.FloatNull method.
func (client *QueriesClient) FloatNull(ctx context.Context, options *QueriesClientFloatNullOptions) (QueriesClientFloatNullResponse, error) {
	req, err := client.floatNullCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientFloatNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientFloatNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientFloatNullResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientFloatNullResponse{}, nil
}

// floatNullCreateRequest creates the FloatNull request.
func (client *QueriesClient) floatNullCreateRequest(ctx context.Context, options *QueriesClientFloatNullOptions) (*policy.Request, error) {
	urlPath := "/queries/float/null"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.FloatQuery != nil {
		reqQP.Set("floatQuery", strconv.FormatFloat(float64(*options.FloatQuery), 'f', -1, 32))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// FloatScientificNegative - Get '-1.034E-20' numeric value
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientFloatScientificNegativeOptions contains the optional parameters for the QueriesClient.FloatScientificNegative
// method.
func (client *QueriesClient) FloatScientificNegative(ctx context.Context, options *QueriesClientFloatScientificNegativeOptions) (QueriesClientFloatScientificNegativeResponse, error) {
	req, err := client.floatScientificNegativeCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientFloatScientificNegativeResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientFloatScientificNegativeResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientFloatScientificNegativeResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientFloatScientificNegativeResponse{}, nil
}

// floatScientificNegativeCreateRequest creates the FloatScientificNegative request.
func (client *QueriesClient) floatScientificNegativeCreateRequest(ctx context.Context, options *QueriesClientFloatScientificNegativeOptions) (*policy.Request, error) {
	urlPath := "/queries/float/-1.034E-20"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("floatQuery", "-1.034e-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// FloatScientificPositive - Get '1.034E+20' numeric value
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientFloatScientificPositiveOptions contains the optional parameters for the QueriesClient.FloatScientificPositive
// method.
func (client *QueriesClient) FloatScientificPositive(ctx context.Context, options *QueriesClientFloatScientificPositiveOptions) (QueriesClientFloatScientificPositiveResponse, error) {
	req, err := client.floatScientificPositiveCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientFloatScientificPositiveResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientFloatScientificPositiveResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientFloatScientificPositiveResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientFloatScientificPositiveResponse{}, nil
}

// floatScientificPositiveCreateRequest creates the FloatScientificPositive request.
func (client *QueriesClient) floatScientificPositiveCreateRequest(ctx context.Context, options *QueriesClientFloatScientificPositiveOptions) (*policy.Request, error) {
	urlPath := "/queries/float/1.034E+20"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("floatQuery", "103400000000000000000")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// GetBooleanFalse - Get false Boolean value on path
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientGetBooleanFalseOptions contains the optional parameters for the QueriesClient.GetBooleanFalse method.
func (client *QueriesClient) GetBooleanFalse(ctx context.Context, options *QueriesClientGetBooleanFalseOptions) (QueriesClientGetBooleanFalseResponse, error) {
	req, err := client.getBooleanFalseCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientGetBooleanFalseResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientGetBooleanFalseResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientGetBooleanFalseResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientGetBooleanFalseResponse{}, nil
}

// getBooleanFalseCreateRequest creates the GetBooleanFalse request.
func (client *QueriesClient) getBooleanFalseCreateRequest(ctx context.Context, options *QueriesClientGetBooleanFalseOptions) (*policy.Request, error) {
	urlPath := "/queries/bool/false"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("boolQuery", "false")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// GetBooleanNull - Get null Boolean value on query (query string should be absent)
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientGetBooleanNullOptions contains the optional parameters for the QueriesClient.GetBooleanNull method.
func (client *QueriesClient) GetBooleanNull(ctx context.Context, options *QueriesClientGetBooleanNullOptions) (QueriesClientGetBooleanNullResponse, error) {
	req, err := client.getBooleanNullCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientGetBooleanNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientGetBooleanNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientGetBooleanNullResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientGetBooleanNullResponse{}, nil
}

// getBooleanNullCreateRequest creates the GetBooleanNull request.
func (client *QueriesClient) getBooleanNullCreateRequest(ctx context.Context, options *QueriesClientGetBooleanNullOptions) (*policy.Request, error) {
	urlPath := "/queries/bool/null"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.BoolQuery != nil {
		reqQP.Set("boolQuery", strconv.FormatBool(*options.BoolQuery))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// GetBooleanTrue - Get true Boolean value on path
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientGetBooleanTrueOptions contains the optional parameters for the QueriesClient.GetBooleanTrue method.
func (client *QueriesClient) GetBooleanTrue(ctx context.Context, options *QueriesClientGetBooleanTrueOptions) (QueriesClientGetBooleanTrueResponse, error) {
	req, err := client.getBooleanTrueCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientGetBooleanTrueResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientGetBooleanTrueResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientGetBooleanTrueResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientGetBooleanTrueResponse{}, nil
}

// getBooleanTrueCreateRequest creates the GetBooleanTrue request.
func (client *QueriesClient) getBooleanTrueCreateRequest(ctx context.Context, options *QueriesClientGetBooleanTrueOptions) (*policy.Request, error) {
	urlPath := "/queries/bool/true"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("boolQuery", "true")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// GetIntNegativeOneMillion - Get '-1000000' integer value
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientGetIntNegativeOneMillionOptions contains the optional parameters for the QueriesClient.GetIntNegativeOneMillion
// method.
func (client *QueriesClient) GetIntNegativeOneMillion(ctx context.Context, options *QueriesClientGetIntNegativeOneMillionOptions) (QueriesClientGetIntNegativeOneMillionResponse, error) {
	req, err := client.getIntNegativeOneMillionCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientGetIntNegativeOneMillionResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientGetIntNegativeOneMillionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientGetIntNegativeOneMillionResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientGetIntNegativeOneMillionResponse{}, nil
}

// getIntNegativeOneMillionCreateRequest creates the GetIntNegativeOneMillion request.
func (client *QueriesClient) getIntNegativeOneMillionCreateRequest(ctx context.Context, options *QueriesClientGetIntNegativeOneMillionOptions) (*policy.Request, error) {
	urlPath := "/queries/int/-1000000"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("intQuery", "-1000000")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// GetIntNull - Get null integer value (no query parameter)
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientGetIntNullOptions contains the optional parameters for the QueriesClient.GetIntNull method.
func (client *QueriesClient) GetIntNull(ctx context.Context, options *QueriesClientGetIntNullOptions) (QueriesClientGetIntNullResponse, error) {
	req, err := client.getIntNullCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientGetIntNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientGetIntNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientGetIntNullResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientGetIntNullResponse{}, nil
}

// getIntNullCreateRequest creates the GetIntNull request.
func (client *QueriesClient) getIntNullCreateRequest(ctx context.Context, options *QueriesClientGetIntNullOptions) (*policy.Request, error) {
	urlPath := "/queries/int/null"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.IntQuery != nil {
		reqQP.Set("intQuery", strconv.FormatInt(int64(*options.IntQuery), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// GetIntOneMillion - Get '1000000' integer value
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientGetIntOneMillionOptions contains the optional parameters for the QueriesClient.GetIntOneMillion
// method.
func (client *QueriesClient) GetIntOneMillion(ctx context.Context, options *QueriesClientGetIntOneMillionOptions) (QueriesClientGetIntOneMillionResponse, error) {
	req, err := client.getIntOneMillionCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientGetIntOneMillionResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientGetIntOneMillionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientGetIntOneMillionResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientGetIntOneMillionResponse{}, nil
}

// getIntOneMillionCreateRequest creates the GetIntOneMillion request.
func (client *QueriesClient) getIntOneMillionCreateRequest(ctx context.Context, options *QueriesClientGetIntOneMillionOptions) (*policy.Request, error) {
	urlPath := "/queries/int/1000000"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("intQuery", "1000000")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// GetLongNull - Get 'null 64 bit integer value (no query param in uri)
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientGetLongNullOptions contains the optional parameters for the QueriesClient.GetLongNull method.
func (client *QueriesClient) GetLongNull(ctx context.Context, options *QueriesClientGetLongNullOptions) (QueriesClientGetLongNullResponse, error) {
	req, err := client.getLongNullCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientGetLongNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientGetLongNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientGetLongNullResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientGetLongNullResponse{}, nil
}

// getLongNullCreateRequest creates the GetLongNull request.
func (client *QueriesClient) getLongNullCreateRequest(ctx context.Context, options *QueriesClientGetLongNullOptions) (*policy.Request, error) {
	urlPath := "/queries/long/null"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.LongQuery != nil {
		reqQP.Set("longQuery", strconv.FormatInt(*options.LongQuery, 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// GetNegativeTenBillion - Get '-10000000000' 64 bit integer value
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientGetNegativeTenBillionOptions contains the optional parameters for the QueriesClient.GetNegativeTenBillion
// method.
func (client *QueriesClient) GetNegativeTenBillion(ctx context.Context, options *QueriesClientGetNegativeTenBillionOptions) (QueriesClientGetNegativeTenBillionResponse, error) {
	req, err := client.getNegativeTenBillionCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientGetNegativeTenBillionResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientGetNegativeTenBillionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientGetNegativeTenBillionResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientGetNegativeTenBillionResponse{}, nil
}

// getNegativeTenBillionCreateRequest creates the GetNegativeTenBillion request.
func (client *QueriesClient) getNegativeTenBillionCreateRequest(ctx context.Context, options *QueriesClientGetNegativeTenBillionOptions) (*policy.Request, error) {
	urlPath := "/queries/long/-10000000000"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("longQuery", "-10000000000")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// GetTenBillion - Get '10000000000' 64 bit integer value
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientGetTenBillionOptions contains the optional parameters for the QueriesClient.GetTenBillion method.
func (client *QueriesClient) GetTenBillion(ctx context.Context, options *QueriesClientGetTenBillionOptions) (QueriesClientGetTenBillionResponse, error) {
	req, err := client.getTenBillionCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientGetTenBillionResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientGetTenBillionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientGetTenBillionResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientGetTenBillionResponse{}, nil
}

// getTenBillionCreateRequest creates the GetTenBillion request.
func (client *QueriesClient) getTenBillionCreateRequest(ctx context.Context, options *QueriesClientGetTenBillionOptions) (*policy.Request, error) {
	urlPath := "/queries/long/10000000000"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("longQuery", "10000000000")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// StringEmpty - Get ''
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientStringEmptyOptions contains the optional parameters for the QueriesClient.StringEmpty method.
func (client *QueriesClient) StringEmpty(ctx context.Context, options *QueriesClientStringEmptyOptions) (QueriesClientStringEmptyResponse, error) {
	req, err := client.stringEmptyCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientStringEmptyResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientStringEmptyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientStringEmptyResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientStringEmptyResponse{}, nil
}

// stringEmptyCreateRequest creates the StringEmpty request.
func (client *QueriesClient) stringEmptyCreateRequest(ctx context.Context, options *QueriesClientStringEmptyOptions) (*policy.Request, error) {
	urlPath := "/queries/string/empty"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("stringQuery", "")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// StringNull - Get null (no query parameter in url)
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientStringNullOptions contains the optional parameters for the QueriesClient.StringNull method.
func (client *QueriesClient) StringNull(ctx context.Context, options *QueriesClientStringNullOptions) (QueriesClientStringNullResponse, error) {
	req, err := client.stringNullCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientStringNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientStringNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientStringNullResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientStringNullResponse{}, nil
}

// stringNullCreateRequest creates the StringNull request.
func (client *QueriesClient) stringNullCreateRequest(ctx context.Context, options *QueriesClientStringNullOptions) (*policy.Request, error) {
	urlPath := "/queries/string/null"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.StringQuery != nil {
		reqQP.Set("stringQuery", *options.StringQuery)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// StringURLEncoded - Get 'begin!*'();:@ &=+$,/?#[]end
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientStringURLEncodedOptions contains the optional parameters for the QueriesClient.StringURLEncoded
// method.
func (client *QueriesClient) StringURLEncoded(ctx context.Context, options *QueriesClientStringURLEncodedOptions) (QueriesClientStringURLEncodedResponse, error) {
	req, err := client.stringURLEncodedCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientStringURLEncodedResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientStringURLEncodedResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientStringURLEncodedResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientStringURLEncodedResponse{}, nil
}

// stringURLEncodedCreateRequest creates the StringURLEncoded request.
func (client *QueriesClient) stringURLEncodedCreateRequest(ctx context.Context, options *QueriesClientStringURLEncodedOptions) (*policy.Request, error) {
	urlPath := "/queries/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("stringQuery", "begin!*'();:@ &=+$,/?#[]end")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// StringUnicode - Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value
// If the operation fails it returns an *azcore.ResponseError type.
// options - QueriesClientStringUnicodeOptions contains the optional parameters for the QueriesClient.StringUnicode method.
func (client *QueriesClient) StringUnicode(ctx context.Context, options *QueriesClientStringUnicodeOptions) (QueriesClientStringUnicodeResponse, error) {
	req, err := client.stringUnicodeCreateRequest(ctx, options)
	if err != nil {
		return QueriesClientStringUnicodeResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueriesClientStringUnicodeResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueriesClientStringUnicodeResponse{}, runtime.NewResponseError(resp)
	}
	return QueriesClientStringUnicodeResponse{}, nil
}

// stringUnicodeCreateRequest creates the StringUnicode request.
func (client *QueriesClient) stringUnicodeCreateRequest(ctx context.Context, options *QueriesClientStringUnicodeOptions) (*policy.Request, error) {
	urlPath := "/queries/string/unicode/"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("stringQuery", "啊齄丂狛狜隣郎隣兀﨩")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}
