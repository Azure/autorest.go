//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package urlgroup

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// PathsClient contains the methods for the Paths group.
// Don't use this type directly, use NewPathsClient() instead.
type PathsClient struct {
	pl runtime.Pipeline
}

// NewPathsClient creates a new instance of PathsClient with the specified values.
// options - pass nil to accept the default values.
func NewPathsClient(options *azcore.ClientOptions) *PathsClient {
	cp := azcore.ClientOptions{}
	if options != nil {
		cp = *options
	}
	client := &PathsClient{
		pl: runtime.NewPipeline(module, version, nil, nil, &cp),
	}
	return client
}

// ArrayCSVInPath - Get an array of string ['ArrayPath1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the csv-array format
// If the operation fails it returns the *Error error type.
// arrayPath - an array of string ['ArrayPath1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the csv-array format
// options - PathsArrayCSVInPathOptions contains the optional parameters for the PathsClient.ArrayCSVInPath method.
func (client *PathsClient) ArrayCSVInPath(ctx context.Context, arrayPath []string, options *PathsArrayCSVInPathOptions) (PathsArrayCSVInPathResponse, error) {
	req, err := client.arrayCSVInPathCreateRequest(ctx, arrayPath, options)
	if err != nil {
		return PathsArrayCSVInPathResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PathsArrayCSVInPathResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PathsArrayCSVInPathResponse{}, client.arrayCSVInPathHandleError(resp)
	}
	return PathsArrayCSVInPathResponse{RawResponse: resp}, nil
}

// arrayCSVInPathCreateRequest creates the ArrayCSVInPath request.
func (client *PathsClient) arrayCSVInPathCreateRequest(ctx context.Context, arrayPath []string, options *PathsArrayCSVInPathOptions) (*policy.Request, error) {
	urlPath := "/paths/array/ArrayPath1%2cbegin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend%2c%2c/{arrayPath}"
	urlPath = strings.ReplaceAll(urlPath, "{arrayPath}", url.PathEscape(strings.Join(arrayPath, ",")))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// arrayCSVInPathHandleError handles the ArrayCSVInPath error response.
func (client *PathsClient) arrayCSVInPathHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Base64URL - Get 'lorem' encoded value as 'bG9yZW0' (base64url)
// If the operation fails it returns the *Error error type.
// base64URLPath - base64url encoded value
// options - PathsBase64URLOptions contains the optional parameters for the PathsClient.Base64URL method.
func (client *PathsClient) Base64URL(ctx context.Context, base64URLPath []byte, options *PathsBase64URLOptions) (PathsBase64URLResponse, error) {
	req, err := client.base64URLCreateRequest(ctx, base64URLPath, options)
	if err != nil {
		return PathsBase64URLResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PathsBase64URLResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PathsBase64URLResponse{}, client.base64URLHandleError(resp)
	}
	return PathsBase64URLResponse{RawResponse: resp}, nil
}

// base64URLCreateRequest creates the Base64URL request.
func (client *PathsClient) base64URLCreateRequest(ctx context.Context, base64URLPath []byte, options *PathsBase64URLOptions) (*policy.Request, error) {
	urlPath := "/paths/string/bG9yZW0/{base64UrlPath}"
	urlPath = strings.ReplaceAll(urlPath, "{base64UrlPath}", url.PathEscape(base64.RawURLEncoding.EncodeToString(base64URLPath)))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// base64URLHandleError handles the Base64URL error response.
func (client *PathsClient) base64URLHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ByteEmpty - Get '' as byte array
// If the operation fails it returns the *Error error type.
// options - PathsByteEmptyOptions contains the optional parameters for the PathsClient.ByteEmpty method.
func (client *PathsClient) ByteEmpty(ctx context.Context, options *PathsByteEmptyOptions) (PathsByteEmptyResponse, error) {
	req, err := client.byteEmptyCreateRequest(ctx, options)
	if err != nil {
		return PathsByteEmptyResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PathsByteEmptyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PathsByteEmptyResponse{}, client.byteEmptyHandleError(resp)
	}
	return PathsByteEmptyResponse{RawResponse: resp}, nil
}

// byteEmptyCreateRequest creates the ByteEmpty request.
func (client *PathsClient) byteEmptyCreateRequest(ctx context.Context, options *PathsByteEmptyOptions) (*policy.Request, error) {
	urlPath := "/paths/byte/empty/{bytePath}"
	urlPath = strings.ReplaceAll(urlPath, "{bytePath}", url.PathEscape(""))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// byteEmptyHandleError handles the ByteEmpty error response.
func (client *PathsClient) byteEmptyHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ByteMultiByte - Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
// If the operation fails it returns the *Error error type.
// bytePath - '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
// options - PathsByteMultiByteOptions contains the optional parameters for the PathsClient.ByteMultiByte method.
func (client *PathsClient) ByteMultiByte(ctx context.Context, bytePath []byte, options *PathsByteMultiByteOptions) (PathsByteMultiByteResponse, error) {
	req, err := client.byteMultiByteCreateRequest(ctx, bytePath, options)
	if err != nil {
		return PathsByteMultiByteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PathsByteMultiByteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PathsByteMultiByteResponse{}, client.byteMultiByteHandleError(resp)
	}
	return PathsByteMultiByteResponse{RawResponse: resp}, nil
}

// byteMultiByteCreateRequest creates the ByteMultiByte request.
func (client *PathsClient) byteMultiByteCreateRequest(ctx context.Context, bytePath []byte, options *PathsByteMultiByteOptions) (*policy.Request, error) {
	urlPath := "/paths/byte/multibyte/{bytePath}"
	urlPath = strings.ReplaceAll(urlPath, "{bytePath}", url.PathEscape(base64.StdEncoding.EncodeToString(bytePath)))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// byteMultiByteHandleError handles the ByteMultiByte error response.
func (client *PathsClient) byteMultiByteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ByteNull - Get null as byte array (should throw)
// If the operation fails it returns the *Error error type.
// bytePath - null as byte array (should throw)
// options - PathsByteNullOptions contains the optional parameters for the PathsClient.ByteNull method.
func (client *PathsClient) ByteNull(ctx context.Context, bytePath []byte, options *PathsByteNullOptions) (PathsByteNullResponse, error) {
	req, err := client.byteNullCreateRequest(ctx, bytePath, options)
	if err != nil {
		return PathsByteNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PathsByteNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusBadRequest) {
		return PathsByteNullResponse{}, client.byteNullHandleError(resp)
	}
	return PathsByteNullResponse{RawResponse: resp}, nil
}

// byteNullCreateRequest creates the ByteNull request.
func (client *PathsClient) byteNullCreateRequest(ctx context.Context, bytePath []byte, options *PathsByteNullOptions) (*policy.Request, error) {
	urlPath := "/paths/byte/null/{bytePath}"
	urlPath = strings.ReplaceAll(urlPath, "{bytePath}", url.PathEscape(base64.StdEncoding.EncodeToString(bytePath)))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// byteNullHandleError handles the ByteNull error response.
func (client *PathsClient) byteNullHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// DateNull - Get null as date - this should throw or be unusable on the client side, depending on date representation
// If the operation fails it returns the *Error error type.
// datePath - null as date (should throw)
// options - PathsDateNullOptions contains the optional parameters for the PathsClient.DateNull method.
func (client *PathsClient) DateNull(ctx context.Context, datePath time.Time, options *PathsDateNullOptions) (PathsDateNullResponse, error) {
	req, err := client.dateNullCreateRequest(ctx, datePath, options)
	if err != nil {
		return PathsDateNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PathsDateNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusBadRequest) {
		return PathsDateNullResponse{}, client.dateNullHandleError(resp)
	}
	return PathsDateNullResponse{RawResponse: resp}, nil
}

// dateNullCreateRequest creates the DateNull request.
func (client *PathsClient) dateNullCreateRequest(ctx context.Context, datePath time.Time, options *PathsDateNullOptions) (*policy.Request, error) {
	urlPath := "/paths/date/null/{datePath}"
	urlPath = strings.ReplaceAll(urlPath, "{datePath}", url.PathEscape(datePath.Format("2006-01-02")))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// dateNullHandleError handles the DateNull error response.
func (client *PathsClient) dateNullHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// DateTimeNull - Get null as date-time, should be disallowed or throw depending on representation of date-time
// If the operation fails it returns the *Error error type.
// dateTimePath - null as date-time
// options - PathsDateTimeNullOptions contains the optional parameters for the PathsClient.DateTimeNull method.
func (client *PathsClient) DateTimeNull(ctx context.Context, dateTimePath time.Time, options *PathsDateTimeNullOptions) (PathsDateTimeNullResponse, error) {
	req, err := client.dateTimeNullCreateRequest(ctx, dateTimePath, options)
	if err != nil {
		return PathsDateTimeNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PathsDateTimeNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusBadRequest) {
		return PathsDateTimeNullResponse{}, client.dateTimeNullHandleError(resp)
	}
	return PathsDateTimeNullResponse{RawResponse: resp}, nil
}

// dateTimeNullCreateRequest creates the DateTimeNull request.
func (client *PathsClient) dateTimeNullCreateRequest(ctx context.Context, dateTimePath time.Time, options *PathsDateTimeNullOptions) (*policy.Request, error) {
	urlPath := "/paths/datetime/null/{dateTimePath}"
	urlPath = strings.ReplaceAll(urlPath, "{dateTimePath}", url.PathEscape(dateTimePath.Format(time.RFC3339Nano)))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// dateTimeNullHandleError handles the DateTimeNull error response.
func (client *PathsClient) dateTimeNullHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// DateTimeValid - Get '2012-01-01T01:01:01Z' as date-time
// If the operation fails it returns the *Error error type.
// options - PathsDateTimeValidOptions contains the optional parameters for the PathsClient.DateTimeValid method.
func (client *PathsClient) DateTimeValid(ctx context.Context, options *PathsDateTimeValidOptions) (PathsDateTimeValidResponse, error) {
	req, err := client.dateTimeValidCreateRequest(ctx, options)
	if err != nil {
		return PathsDateTimeValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PathsDateTimeValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PathsDateTimeValidResponse{}, client.dateTimeValidHandleError(resp)
	}
	return PathsDateTimeValidResponse{RawResponse: resp}, nil
}

// dateTimeValidCreateRequest creates the DateTimeValid request.
func (client *PathsClient) dateTimeValidCreateRequest(ctx context.Context, options *PathsDateTimeValidOptions) (*policy.Request, error) {
	urlPath := "/paths/datetime/2012-01-01T01%3A01%3A01Z/{dateTimePath}"
	urlPath = strings.ReplaceAll(urlPath, "{dateTimePath}", url.PathEscape("2012-01-01T01:01:01Z"))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// dateTimeValidHandleError handles the DateTimeValid error response.
func (client *PathsClient) dateTimeValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// DateValid - Get '2012-01-01' as date
// If the operation fails it returns the *Error error type.
// options - PathsDateValidOptions contains the optional parameters for the PathsClient.DateValid method.
func (client *PathsClient) DateValid(ctx context.Context, options *PathsDateValidOptions) (PathsDateValidResponse, error) {
	req, err := client.dateValidCreateRequest(ctx, options)
	if err != nil {
		return PathsDateValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PathsDateValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PathsDateValidResponse{}, client.dateValidHandleError(resp)
	}
	return PathsDateValidResponse{RawResponse: resp}, nil
}

// dateValidCreateRequest creates the DateValid request.
func (client *PathsClient) dateValidCreateRequest(ctx context.Context, options *PathsDateValidOptions) (*policy.Request, error) {
	urlPath := "/paths/date/2012-01-01/{datePath}"
	urlPath = strings.ReplaceAll(urlPath, "{datePath}", url.PathEscape("2012-01-01"))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// dateValidHandleError handles the DateValid error response.
func (client *PathsClient) dateValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// DoubleDecimalNegative - Get '-9999999.999' numeric value
// If the operation fails it returns the *Error error type.
// options - PathsDoubleDecimalNegativeOptions contains the optional parameters for the PathsClient.DoubleDecimalNegative
// method.
func (client *PathsClient) DoubleDecimalNegative(ctx context.Context, options *PathsDoubleDecimalNegativeOptions) (PathsDoubleDecimalNegativeResponse, error) {
	req, err := client.doubleDecimalNegativeCreateRequest(ctx, options)
	if err != nil {
		return PathsDoubleDecimalNegativeResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PathsDoubleDecimalNegativeResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PathsDoubleDecimalNegativeResponse{}, client.doubleDecimalNegativeHandleError(resp)
	}
	return PathsDoubleDecimalNegativeResponse{RawResponse: resp}, nil
}

// doubleDecimalNegativeCreateRequest creates the DoubleDecimalNegative request.
func (client *PathsClient) doubleDecimalNegativeCreateRequest(ctx context.Context, options *PathsDoubleDecimalNegativeOptions) (*policy.Request, error) {
	urlPath := "/paths/double/-9999999.999/{doublePath}"
	urlPath = strings.ReplaceAll(urlPath, "{doublePath}", url.PathEscape("-9999999.999"))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// doubleDecimalNegativeHandleError handles the DoubleDecimalNegative error response.
func (client *PathsClient) doubleDecimalNegativeHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// DoubleDecimalPositive - Get '9999999.999' numeric value
// If the operation fails it returns the *Error error type.
// options - PathsDoubleDecimalPositiveOptions contains the optional parameters for the PathsClient.DoubleDecimalPositive
// method.
func (client *PathsClient) DoubleDecimalPositive(ctx context.Context, options *PathsDoubleDecimalPositiveOptions) (PathsDoubleDecimalPositiveResponse, error) {
	req, err := client.doubleDecimalPositiveCreateRequest(ctx, options)
	if err != nil {
		return PathsDoubleDecimalPositiveResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PathsDoubleDecimalPositiveResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PathsDoubleDecimalPositiveResponse{}, client.doubleDecimalPositiveHandleError(resp)
	}
	return PathsDoubleDecimalPositiveResponse{RawResponse: resp}, nil
}

// doubleDecimalPositiveCreateRequest creates the DoubleDecimalPositive request.
func (client *PathsClient) doubleDecimalPositiveCreateRequest(ctx context.Context, options *PathsDoubleDecimalPositiveOptions) (*policy.Request, error) {
	urlPath := "/paths/double/9999999.999/{doublePath}"
	urlPath = strings.ReplaceAll(urlPath, "{doublePath}", url.PathEscape("9999999.999"))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// doubleDecimalPositiveHandleError handles the DoubleDecimalPositive error response.
func (client *PathsClient) doubleDecimalPositiveHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// EnumNull - Get null (should throw on the client before the request is sent on wire)
// If the operation fails it returns the *Error error type.
// enumPath - send null should throw
// options - PathsEnumNullOptions contains the optional parameters for the PathsClient.EnumNull method.
func (client *PathsClient) EnumNull(ctx context.Context, enumPath URIColor, options *PathsEnumNullOptions) (PathsEnumNullResponse, error) {
	req, err := client.enumNullCreateRequest(ctx, enumPath, options)
	if err != nil {
		return PathsEnumNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PathsEnumNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusBadRequest) {
		return PathsEnumNullResponse{}, client.enumNullHandleError(resp)
	}
	return PathsEnumNullResponse{RawResponse: resp}, nil
}

// enumNullCreateRequest creates the EnumNull request.
func (client *PathsClient) enumNullCreateRequest(ctx context.Context, enumPath URIColor, options *PathsEnumNullOptions) (*policy.Request, error) {
	urlPath := "/paths/string/null/{enumPath}"
	if enumPath == "" {
		return nil, errors.New("parameter enumPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{enumPath}", url.PathEscape(string(enumPath)))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// enumNullHandleError handles the EnumNull error response.
func (client *PathsClient) enumNullHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// EnumValid - Get using uri with 'green color' in path parameter
// If the operation fails it returns the *Error error type.
// enumPath - send the value green
// options - PathsEnumValidOptions contains the optional parameters for the PathsClient.EnumValid method.
func (client *PathsClient) EnumValid(ctx context.Context, enumPath URIColor, options *PathsEnumValidOptions) (PathsEnumValidResponse, error) {
	req, err := client.enumValidCreateRequest(ctx, enumPath, options)
	if err != nil {
		return PathsEnumValidResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PathsEnumValidResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PathsEnumValidResponse{}, client.enumValidHandleError(resp)
	}
	return PathsEnumValidResponse{RawResponse: resp}, nil
}

// enumValidCreateRequest creates the EnumValid request.
func (client *PathsClient) enumValidCreateRequest(ctx context.Context, enumPath URIColor, options *PathsEnumValidOptions) (*policy.Request, error) {
	urlPath := "/paths/enum/green%20color/{enumPath}"
	if enumPath == "" {
		return nil, errors.New("parameter enumPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{enumPath}", url.PathEscape(string(enumPath)))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// enumValidHandleError handles the EnumValid error response.
func (client *PathsClient) enumValidHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// FloatScientificNegative - Get '-1.034E-20' numeric value
// If the operation fails it returns the *Error error type.
// options - PathsFloatScientificNegativeOptions contains the optional parameters for the PathsClient.FloatScientificNegative
// method.
func (client *PathsClient) FloatScientificNegative(ctx context.Context, options *PathsFloatScientificNegativeOptions) (PathsFloatScientificNegativeResponse, error) {
	req, err := client.floatScientificNegativeCreateRequest(ctx, options)
	if err != nil {
		return PathsFloatScientificNegativeResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PathsFloatScientificNegativeResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PathsFloatScientificNegativeResponse{}, client.floatScientificNegativeHandleError(resp)
	}
	return PathsFloatScientificNegativeResponse{RawResponse: resp}, nil
}

// floatScientificNegativeCreateRequest creates the FloatScientificNegative request.
func (client *PathsClient) floatScientificNegativeCreateRequest(ctx context.Context, options *PathsFloatScientificNegativeOptions) (*policy.Request, error) {
	urlPath := "/paths/float/-1.034E-20/{floatPath}"
	urlPath = strings.ReplaceAll(urlPath, "{floatPath}", url.PathEscape("-1.034e-20"))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// floatScientificNegativeHandleError handles the FloatScientificNegative error response.
func (client *PathsClient) floatScientificNegativeHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// FloatScientificPositive - Get '1.034E+20' numeric value
// If the operation fails it returns the *Error error type.
// options - PathsFloatScientificPositiveOptions contains the optional parameters for the PathsClient.FloatScientificPositive
// method.
func (client *PathsClient) FloatScientificPositive(ctx context.Context, options *PathsFloatScientificPositiveOptions) (PathsFloatScientificPositiveResponse, error) {
	req, err := client.floatScientificPositiveCreateRequest(ctx, options)
	if err != nil {
		return PathsFloatScientificPositiveResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PathsFloatScientificPositiveResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PathsFloatScientificPositiveResponse{}, client.floatScientificPositiveHandleError(resp)
	}
	return PathsFloatScientificPositiveResponse{RawResponse: resp}, nil
}

// floatScientificPositiveCreateRequest creates the FloatScientificPositive request.
func (client *PathsClient) floatScientificPositiveCreateRequest(ctx context.Context, options *PathsFloatScientificPositiveOptions) (*policy.Request, error) {
	urlPath := "/paths/float/1.034E+20/{floatPath}"
	urlPath = strings.ReplaceAll(urlPath, "{floatPath}", url.PathEscape("103400000000000000000"))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// floatScientificPositiveHandleError handles the FloatScientificPositive error response.
func (client *PathsClient) floatScientificPositiveHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetBooleanFalse - Get false Boolean value on path
// If the operation fails it returns the *Error error type.
// options - PathsGetBooleanFalseOptions contains the optional parameters for the PathsClient.GetBooleanFalse method.
func (client *PathsClient) GetBooleanFalse(ctx context.Context, options *PathsGetBooleanFalseOptions) (PathsGetBooleanFalseResponse, error) {
	req, err := client.getBooleanFalseCreateRequest(ctx, options)
	if err != nil {
		return PathsGetBooleanFalseResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PathsGetBooleanFalseResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PathsGetBooleanFalseResponse{}, client.getBooleanFalseHandleError(resp)
	}
	return PathsGetBooleanFalseResponse{RawResponse: resp}, nil
}

// getBooleanFalseCreateRequest creates the GetBooleanFalse request.
func (client *PathsClient) getBooleanFalseCreateRequest(ctx context.Context, options *PathsGetBooleanFalseOptions) (*policy.Request, error) {
	urlPath := "/paths/bool/false/{boolPath}"
	urlPath = strings.ReplaceAll(urlPath, "{boolPath}", url.PathEscape("false"))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getBooleanFalseHandleError handles the GetBooleanFalse error response.
func (client *PathsClient) getBooleanFalseHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetBooleanTrue - Get true Boolean value on path
// If the operation fails it returns the *Error error type.
// options - PathsGetBooleanTrueOptions contains the optional parameters for the PathsClient.GetBooleanTrue method.
func (client *PathsClient) GetBooleanTrue(ctx context.Context, options *PathsGetBooleanTrueOptions) (PathsGetBooleanTrueResponse, error) {
	req, err := client.getBooleanTrueCreateRequest(ctx, options)
	if err != nil {
		return PathsGetBooleanTrueResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PathsGetBooleanTrueResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PathsGetBooleanTrueResponse{}, client.getBooleanTrueHandleError(resp)
	}
	return PathsGetBooleanTrueResponse{RawResponse: resp}, nil
}

// getBooleanTrueCreateRequest creates the GetBooleanTrue request.
func (client *PathsClient) getBooleanTrueCreateRequest(ctx context.Context, options *PathsGetBooleanTrueOptions) (*policy.Request, error) {
	urlPath := "/paths/bool/true/{boolPath}"
	urlPath = strings.ReplaceAll(urlPath, "{boolPath}", url.PathEscape("true"))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getBooleanTrueHandleError handles the GetBooleanTrue error response.
func (client *PathsClient) getBooleanTrueHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetIntNegativeOneMillion - Get '-1000000' integer value
// If the operation fails it returns the *Error error type.
// options - PathsGetIntNegativeOneMillionOptions contains the optional parameters for the PathsClient.GetIntNegativeOneMillion
// method.
func (client *PathsClient) GetIntNegativeOneMillion(ctx context.Context, options *PathsGetIntNegativeOneMillionOptions) (PathsGetIntNegativeOneMillionResponse, error) {
	req, err := client.getIntNegativeOneMillionCreateRequest(ctx, options)
	if err != nil {
		return PathsGetIntNegativeOneMillionResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PathsGetIntNegativeOneMillionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PathsGetIntNegativeOneMillionResponse{}, client.getIntNegativeOneMillionHandleError(resp)
	}
	return PathsGetIntNegativeOneMillionResponse{RawResponse: resp}, nil
}

// getIntNegativeOneMillionCreateRequest creates the GetIntNegativeOneMillion request.
func (client *PathsClient) getIntNegativeOneMillionCreateRequest(ctx context.Context, options *PathsGetIntNegativeOneMillionOptions) (*policy.Request, error) {
	urlPath := "/paths/int/-1000000/{intPath}"
	urlPath = strings.ReplaceAll(urlPath, "{intPath}", url.PathEscape("-1000000"))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getIntNegativeOneMillionHandleError handles the GetIntNegativeOneMillion error response.
func (client *PathsClient) getIntNegativeOneMillionHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetIntOneMillion - Get '1000000' integer value
// If the operation fails it returns the *Error error type.
// options - PathsGetIntOneMillionOptions contains the optional parameters for the PathsClient.GetIntOneMillion method.
func (client *PathsClient) GetIntOneMillion(ctx context.Context, options *PathsGetIntOneMillionOptions) (PathsGetIntOneMillionResponse, error) {
	req, err := client.getIntOneMillionCreateRequest(ctx, options)
	if err != nil {
		return PathsGetIntOneMillionResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PathsGetIntOneMillionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PathsGetIntOneMillionResponse{}, client.getIntOneMillionHandleError(resp)
	}
	return PathsGetIntOneMillionResponse{RawResponse: resp}, nil
}

// getIntOneMillionCreateRequest creates the GetIntOneMillion request.
func (client *PathsClient) getIntOneMillionCreateRequest(ctx context.Context, options *PathsGetIntOneMillionOptions) (*policy.Request, error) {
	urlPath := "/paths/int/1000000/{intPath}"
	urlPath = strings.ReplaceAll(urlPath, "{intPath}", url.PathEscape("1000000"))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getIntOneMillionHandleError handles the GetIntOneMillion error response.
func (client *PathsClient) getIntOneMillionHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetNegativeTenBillion - Get '-10000000000' 64 bit integer value
// If the operation fails it returns the *Error error type.
// options - PathsGetNegativeTenBillionOptions contains the optional parameters for the PathsClient.GetNegativeTenBillion
// method.
func (client *PathsClient) GetNegativeTenBillion(ctx context.Context, options *PathsGetNegativeTenBillionOptions) (PathsGetNegativeTenBillionResponse, error) {
	req, err := client.getNegativeTenBillionCreateRequest(ctx, options)
	if err != nil {
		return PathsGetNegativeTenBillionResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PathsGetNegativeTenBillionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PathsGetNegativeTenBillionResponse{}, client.getNegativeTenBillionHandleError(resp)
	}
	return PathsGetNegativeTenBillionResponse{RawResponse: resp}, nil
}

// getNegativeTenBillionCreateRequest creates the GetNegativeTenBillion request.
func (client *PathsClient) getNegativeTenBillionCreateRequest(ctx context.Context, options *PathsGetNegativeTenBillionOptions) (*policy.Request, error) {
	urlPath := "/paths/long/-10000000000/{longPath}"
	urlPath = strings.ReplaceAll(urlPath, "{longPath}", url.PathEscape("-10000000000"))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getNegativeTenBillionHandleError handles the GetNegativeTenBillion error response.
func (client *PathsClient) getNegativeTenBillionHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetTenBillion - Get '10000000000' 64 bit integer value
// If the operation fails it returns the *Error error type.
// options - PathsGetTenBillionOptions contains the optional parameters for the PathsClient.GetTenBillion method.
func (client *PathsClient) GetTenBillion(ctx context.Context, options *PathsGetTenBillionOptions) (PathsGetTenBillionResponse, error) {
	req, err := client.getTenBillionCreateRequest(ctx, options)
	if err != nil {
		return PathsGetTenBillionResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PathsGetTenBillionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PathsGetTenBillionResponse{}, client.getTenBillionHandleError(resp)
	}
	return PathsGetTenBillionResponse{RawResponse: resp}, nil
}

// getTenBillionCreateRequest creates the GetTenBillion request.
func (client *PathsClient) getTenBillionCreateRequest(ctx context.Context, options *PathsGetTenBillionOptions) (*policy.Request, error) {
	urlPath := "/paths/long/10000000000/{longPath}"
	urlPath = strings.ReplaceAll(urlPath, "{longPath}", url.PathEscape("10000000000"))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getTenBillionHandleError handles the GetTenBillion error response.
func (client *PathsClient) getTenBillionHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// StringEmpty - Get ''
// If the operation fails it returns the *Error error type.
// options - PathsStringEmptyOptions contains the optional parameters for the PathsClient.StringEmpty method.
func (client *PathsClient) StringEmpty(ctx context.Context, options *PathsStringEmptyOptions) (PathsStringEmptyResponse, error) {
	req, err := client.stringEmptyCreateRequest(ctx, options)
	if err != nil {
		return PathsStringEmptyResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PathsStringEmptyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PathsStringEmptyResponse{}, client.stringEmptyHandleError(resp)
	}
	return PathsStringEmptyResponse{RawResponse: resp}, nil
}

// stringEmptyCreateRequest creates the StringEmpty request.
func (client *PathsClient) stringEmptyCreateRequest(ctx context.Context, options *PathsStringEmptyOptions) (*policy.Request, error) {
	urlPath := "/paths/string/empty/{stringPath}"
	urlPath = strings.ReplaceAll(urlPath, "{stringPath}", url.PathEscape(""))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// stringEmptyHandleError handles the StringEmpty error response.
func (client *PathsClient) stringEmptyHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// StringNull - Get null (should throw)
// If the operation fails it returns the *Error error type.
// stringPath - null string value
// options - PathsStringNullOptions contains the optional parameters for the PathsClient.StringNull method.
func (client *PathsClient) StringNull(ctx context.Context, stringPath string, options *PathsStringNullOptions) (PathsStringNullResponse, error) {
	req, err := client.stringNullCreateRequest(ctx, stringPath, options)
	if err != nil {
		return PathsStringNullResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PathsStringNullResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusBadRequest) {
		return PathsStringNullResponse{}, client.stringNullHandleError(resp)
	}
	return PathsStringNullResponse{RawResponse: resp}, nil
}

// stringNullCreateRequest creates the StringNull request.
func (client *PathsClient) stringNullCreateRequest(ctx context.Context, stringPath string, options *PathsStringNullOptions) (*policy.Request, error) {
	urlPath := "/paths/string/null/{stringPath}"
	if stringPath == "" {
		return nil, errors.New("parameter stringPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{stringPath}", url.PathEscape(stringPath))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// stringNullHandleError handles the StringNull error response.
func (client *PathsClient) stringNullHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// StringURLEncoded - Get 'begin!*'();:@ &=+$,/?#[]end
// If the operation fails it returns the *Error error type.
// options - PathsStringURLEncodedOptions contains the optional parameters for the PathsClient.StringURLEncoded method.
func (client *PathsClient) StringURLEncoded(ctx context.Context, options *PathsStringURLEncodedOptions) (PathsStringURLEncodedResponse, error) {
	req, err := client.stringURLEncodedCreateRequest(ctx, options)
	if err != nil {
		return PathsStringURLEncodedResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PathsStringURLEncodedResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PathsStringURLEncodedResponse{}, client.stringURLEncodedHandleError(resp)
	}
	return PathsStringURLEncodedResponse{RawResponse: resp}, nil
}

// stringURLEncodedCreateRequest creates the StringURLEncoded request.
func (client *PathsClient) stringURLEncodedCreateRequest(ctx context.Context, options *PathsStringURLEncodedOptions) (*policy.Request, error) {
	urlPath := "/paths/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend/{stringPath}"
	urlPath = strings.ReplaceAll(urlPath, "{stringPath}", url.PathEscape("begin!*'();:@ &=+$,/?#[]end"))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// stringURLEncodedHandleError handles the StringURLEncoded error response.
func (client *PathsClient) stringURLEncodedHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// StringURLNonEncoded - https://tools.ietf.org/html/rfc3986#appendix-A 'path' accept any 'pchar' not encoded
// If the operation fails it returns the *Error error type.
// options - PathsStringURLNonEncodedOptions contains the optional parameters for the PathsClient.StringURLNonEncoded method.
func (client *PathsClient) StringURLNonEncoded(ctx context.Context, options *PathsStringURLNonEncodedOptions) (PathsStringURLNonEncodedResponse, error) {
	req, err := client.stringURLNonEncodedCreateRequest(ctx, options)
	if err != nil {
		return PathsStringURLNonEncodedResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PathsStringURLNonEncodedResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PathsStringURLNonEncodedResponse{}, client.stringURLNonEncodedHandleError(resp)
	}
	return PathsStringURLNonEncodedResponse{RawResponse: resp}, nil
}

// stringURLNonEncodedCreateRequest creates the StringURLNonEncoded request.
func (client *PathsClient) stringURLNonEncodedCreateRequest(ctx context.Context, options *PathsStringURLNonEncodedOptions) (*policy.Request, error) {
	urlPath := "/paths/string/begin!*'();:@&=+$,end/{stringPath}"
	urlPath = strings.ReplaceAll(urlPath, "{stringPath}", "begin!*'();:@&=+$,end")
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// stringURLNonEncodedHandleError handles the StringURLNonEncoded error response.
func (client *PathsClient) stringURLNonEncodedHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// StringUnicode - Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value
// If the operation fails it returns the *Error error type.
// options - PathsStringUnicodeOptions contains the optional parameters for the PathsClient.StringUnicode method.
func (client *PathsClient) StringUnicode(ctx context.Context, options *PathsStringUnicodeOptions) (PathsStringUnicodeResponse, error) {
	req, err := client.stringUnicodeCreateRequest(ctx, options)
	if err != nil {
		return PathsStringUnicodeResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PathsStringUnicodeResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PathsStringUnicodeResponse{}, client.stringUnicodeHandleError(resp)
	}
	return PathsStringUnicodeResponse{RawResponse: resp}, nil
}

// stringUnicodeCreateRequest creates the StringUnicode request.
func (client *PathsClient) stringUnicodeCreateRequest(ctx context.Context, options *PathsStringUnicodeOptions) (*policy.Request, error) {
	urlPath := "/paths/string/unicode/{stringPath}"
	urlPath = strings.ReplaceAll(urlPath, "{stringPath}", url.PathEscape("啊齄丂狛狜隣郎隣兀﨩"))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// stringUnicodeHandleError handles the StringUnicode error response.
func (client *PathsClient) stringUnicodeHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// UnixTimeURL - Get the date 2016-04-13 encoded value as '1460505600' (Unix time)
// If the operation fails it returns the *Error error type.
// unixTimeURLPath - Unix time encoded value
// options - PathsUnixTimeURLOptions contains the optional parameters for the PathsClient.UnixTimeURL method.
func (client *PathsClient) UnixTimeURL(ctx context.Context, unixTimeURLPath time.Time, options *PathsUnixTimeURLOptions) (PathsUnixTimeURLResponse, error) {
	req, err := client.unixTimeURLCreateRequest(ctx, unixTimeURLPath, options)
	if err != nil {
		return PathsUnixTimeURLResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PathsUnixTimeURLResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PathsUnixTimeURLResponse{}, client.unixTimeURLHandleError(resp)
	}
	return PathsUnixTimeURLResponse{RawResponse: resp}, nil
}

// unixTimeURLCreateRequest creates the UnixTimeURL request.
func (client *PathsClient) unixTimeURLCreateRequest(ctx context.Context, unixTimeURLPath time.Time, options *PathsUnixTimeURLOptions) (*policy.Request, error) {
	urlPath := "/paths/int/1460505600/{unixTimeUrlPath}"
	urlPath = strings.ReplaceAll(urlPath, "{unixTimeUrlPath}", url.PathEscape(timeUnix(unixTimeURLPath).String()))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// unixTimeURLHandleError handles the UnixTimeURL error response.
func (client *PathsClient) unixTimeURLHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
