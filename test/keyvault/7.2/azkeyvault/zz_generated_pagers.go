// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azkeyvault

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// CertificateIssuerListResultPager provides iteration over CertificateIssuerListResult pages.
type CertificateIssuerListResultPager interface {
	azcore.Pager

	// PageResponse returns the current CertificateIssuerListResultResponse.
	PageResponse() CertificateIssuerListResultResponse
}

type certificateIssuerListResultCreateRequest func(context.Context) (*azcore.Request, error)

type certificateIssuerListResultHandleError func(*azcore.Response) error

type certificateIssuerListResultHandleResponse func(*azcore.Response) (CertificateIssuerListResultResponse, error)

type certificateIssuerListResultAdvancePage func(context.Context, CertificateIssuerListResultResponse) (*azcore.Request, error)

type certificateIssuerListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester certificateIssuerListResultCreateRequest
	// callback for handling response errors
	errorer certificateIssuerListResultHandleError
	// callback for handling the HTTP response
	responder certificateIssuerListResultHandleResponse
	// callback for advancing to the next page
	advancer certificateIssuerListResultAdvancePage
	// contains the current response
	current CertificateIssuerListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *certificateIssuerListResultPager) Err() error {
	return p.err
}

func (p *certificateIssuerListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CertificateIssuerListResult.NextLink == nil || len(*p.current.CertificateIssuerListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *certificateIssuerListResultPager) PageResponse() CertificateIssuerListResultResponse {
	return p.current
}

// CertificateListResultPager provides iteration over CertificateListResult pages.
type CertificateListResultPager interface {
	azcore.Pager

	// PageResponse returns the current CertificateListResultResponse.
	PageResponse() CertificateListResultResponse
}

type certificateListResultCreateRequest func(context.Context) (*azcore.Request, error)

type certificateListResultHandleError func(*azcore.Response) error

type certificateListResultHandleResponse func(*azcore.Response) (CertificateListResultResponse, error)

type certificateListResultAdvancePage func(context.Context, CertificateListResultResponse) (*azcore.Request, error)

type certificateListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester certificateListResultCreateRequest
	// callback for handling response errors
	errorer certificateListResultHandleError
	// callback for handling the HTTP response
	responder certificateListResultHandleResponse
	// callback for advancing to the next page
	advancer certificateListResultAdvancePage
	// contains the current response
	current CertificateListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *certificateListResultPager) Err() error {
	return p.err
}

func (p *certificateListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CertificateListResult.NextLink == nil || len(*p.current.CertificateListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *certificateListResultPager) PageResponse() CertificateListResultResponse {
	return p.current
}

// DeletedCertificateListResultPager provides iteration over DeletedCertificateListResult pages.
type DeletedCertificateListResultPager interface {
	azcore.Pager

	// PageResponse returns the current DeletedCertificateListResultResponse.
	PageResponse() DeletedCertificateListResultResponse
}

type deletedCertificateListResultCreateRequest func(context.Context) (*azcore.Request, error)

type deletedCertificateListResultHandleError func(*azcore.Response) error

type deletedCertificateListResultHandleResponse func(*azcore.Response) (DeletedCertificateListResultResponse, error)

type deletedCertificateListResultAdvancePage func(context.Context, DeletedCertificateListResultResponse) (*azcore.Request, error)

type deletedCertificateListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester deletedCertificateListResultCreateRequest
	// callback for handling response errors
	errorer deletedCertificateListResultHandleError
	// callback for handling the HTTP response
	responder deletedCertificateListResultHandleResponse
	// callback for advancing to the next page
	advancer deletedCertificateListResultAdvancePage
	// contains the current response
	current DeletedCertificateListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *deletedCertificateListResultPager) Err() error {
	return p.err
}

func (p *deletedCertificateListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeletedCertificateListResult.NextLink == nil || len(*p.current.DeletedCertificateListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *deletedCertificateListResultPager) PageResponse() DeletedCertificateListResultResponse {
	return p.current
}

// DeletedKeyListResultPager provides iteration over DeletedKeyListResult pages.
type DeletedKeyListResultPager interface {
	azcore.Pager

	// PageResponse returns the current DeletedKeyListResultResponse.
	PageResponse() DeletedKeyListResultResponse
}

type deletedKeyListResultCreateRequest func(context.Context) (*azcore.Request, error)

type deletedKeyListResultHandleError func(*azcore.Response) error

type deletedKeyListResultHandleResponse func(*azcore.Response) (DeletedKeyListResultResponse, error)

type deletedKeyListResultAdvancePage func(context.Context, DeletedKeyListResultResponse) (*azcore.Request, error)

type deletedKeyListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester deletedKeyListResultCreateRequest
	// callback for handling response errors
	errorer deletedKeyListResultHandleError
	// callback for handling the HTTP response
	responder deletedKeyListResultHandleResponse
	// callback for advancing to the next page
	advancer deletedKeyListResultAdvancePage
	// contains the current response
	current DeletedKeyListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *deletedKeyListResultPager) Err() error {
	return p.err
}

func (p *deletedKeyListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeletedKeyListResult.NextLink == nil || len(*p.current.DeletedKeyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *deletedKeyListResultPager) PageResponse() DeletedKeyListResultResponse {
	return p.current
}

// DeletedSasDefinitionListResultPager provides iteration over DeletedSasDefinitionListResult pages.
type DeletedSasDefinitionListResultPager interface {
	azcore.Pager

	// PageResponse returns the current DeletedSasDefinitionListResultResponse.
	PageResponse() DeletedSasDefinitionListResultResponse
}

type deletedSasDefinitionListResultCreateRequest func(context.Context) (*azcore.Request, error)

type deletedSasDefinitionListResultHandleError func(*azcore.Response) error

type deletedSasDefinitionListResultHandleResponse func(*azcore.Response) (DeletedSasDefinitionListResultResponse, error)

type deletedSasDefinitionListResultAdvancePage func(context.Context, DeletedSasDefinitionListResultResponse) (*azcore.Request, error)

type deletedSasDefinitionListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester deletedSasDefinitionListResultCreateRequest
	// callback for handling response errors
	errorer deletedSasDefinitionListResultHandleError
	// callback for handling the HTTP response
	responder deletedSasDefinitionListResultHandleResponse
	// callback for advancing to the next page
	advancer deletedSasDefinitionListResultAdvancePage
	// contains the current response
	current DeletedSasDefinitionListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *deletedSasDefinitionListResultPager) Err() error {
	return p.err
}

func (p *deletedSasDefinitionListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeletedSasDefinitionListResult.NextLink == nil || len(*p.current.DeletedSasDefinitionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *deletedSasDefinitionListResultPager) PageResponse() DeletedSasDefinitionListResultResponse {
	return p.current
}

// DeletedSecretListResultPager provides iteration over DeletedSecretListResult pages.
type DeletedSecretListResultPager interface {
	azcore.Pager

	// PageResponse returns the current DeletedSecretListResultResponse.
	PageResponse() DeletedSecretListResultResponse
}

type deletedSecretListResultCreateRequest func(context.Context) (*azcore.Request, error)

type deletedSecretListResultHandleError func(*azcore.Response) error

type deletedSecretListResultHandleResponse func(*azcore.Response) (DeletedSecretListResultResponse, error)

type deletedSecretListResultAdvancePage func(context.Context, DeletedSecretListResultResponse) (*azcore.Request, error)

type deletedSecretListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester deletedSecretListResultCreateRequest
	// callback for handling response errors
	errorer deletedSecretListResultHandleError
	// callback for handling the HTTP response
	responder deletedSecretListResultHandleResponse
	// callback for advancing to the next page
	advancer deletedSecretListResultAdvancePage
	// contains the current response
	current DeletedSecretListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *deletedSecretListResultPager) Err() error {
	return p.err
}

func (p *deletedSecretListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeletedSecretListResult.NextLink == nil || len(*p.current.DeletedSecretListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *deletedSecretListResultPager) PageResponse() DeletedSecretListResultResponse {
	return p.current
}

// DeletedStorageListResultPager provides iteration over DeletedStorageListResult pages.
type DeletedStorageListResultPager interface {
	azcore.Pager

	// PageResponse returns the current DeletedStorageListResultResponse.
	PageResponse() DeletedStorageListResultResponse
}

type deletedStorageListResultCreateRequest func(context.Context) (*azcore.Request, error)

type deletedStorageListResultHandleError func(*azcore.Response) error

type deletedStorageListResultHandleResponse func(*azcore.Response) (DeletedStorageListResultResponse, error)

type deletedStorageListResultAdvancePage func(context.Context, DeletedStorageListResultResponse) (*azcore.Request, error)

type deletedStorageListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester deletedStorageListResultCreateRequest
	// callback for handling response errors
	errorer deletedStorageListResultHandleError
	// callback for handling the HTTP response
	responder deletedStorageListResultHandleResponse
	// callback for advancing to the next page
	advancer deletedStorageListResultAdvancePage
	// contains the current response
	current DeletedStorageListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *deletedStorageListResultPager) Err() error {
	return p.err
}

func (p *deletedStorageListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeletedStorageListResult.NextLink == nil || len(*p.current.DeletedStorageListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *deletedStorageListResultPager) PageResponse() DeletedStorageListResultResponse {
	return p.current
}

// KeyListResultPager provides iteration over KeyListResult pages.
type KeyListResultPager interface {
	azcore.Pager

	// PageResponse returns the current KeyListResultResponse.
	PageResponse() KeyListResultResponse
}

type keyListResultCreateRequest func(context.Context) (*azcore.Request, error)

type keyListResultHandleError func(*azcore.Response) error

type keyListResultHandleResponse func(*azcore.Response) (KeyListResultResponse, error)

type keyListResultAdvancePage func(context.Context, KeyListResultResponse) (*azcore.Request, error)

type keyListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester keyListResultCreateRequest
	// callback for handling response errors
	errorer keyListResultHandleError
	// callback for handling the HTTP response
	responder keyListResultHandleResponse
	// callback for advancing to the next page
	advancer keyListResultAdvancePage
	// contains the current response
	current KeyListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *keyListResultPager) Err() error {
	return p.err
}

func (p *keyListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.KeyListResult.NextLink == nil || len(*p.current.KeyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *keyListResultPager) PageResponse() KeyListResultResponse {
	return p.current
}

// RoleAssignmentListResultPager provides iteration over RoleAssignmentListResult pages.
type RoleAssignmentListResultPager interface {
	azcore.Pager

	// PageResponse returns the current RoleAssignmentListResultResponse.
	PageResponse() RoleAssignmentListResultResponse
}

type roleAssignmentListResultCreateRequest func(context.Context) (*azcore.Request, error)

type roleAssignmentListResultHandleError func(*azcore.Response) error

type roleAssignmentListResultHandleResponse func(*azcore.Response) (RoleAssignmentListResultResponse, error)

type roleAssignmentListResultAdvancePage func(context.Context, RoleAssignmentListResultResponse) (*azcore.Request, error)

type roleAssignmentListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester roleAssignmentListResultCreateRequest
	// callback for handling response errors
	errorer roleAssignmentListResultHandleError
	// callback for handling the HTTP response
	responder roleAssignmentListResultHandleResponse
	// callback for advancing to the next page
	advancer roleAssignmentListResultAdvancePage
	// contains the current response
	current RoleAssignmentListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *roleAssignmentListResultPager) Err() error {
	return p.err
}

func (p *roleAssignmentListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RoleAssignmentListResult.NextLink == nil || len(*p.current.RoleAssignmentListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *roleAssignmentListResultPager) PageResponse() RoleAssignmentListResultResponse {
	return p.current
}

// RoleDefinitionListResultPager provides iteration over RoleDefinitionListResult pages.
type RoleDefinitionListResultPager interface {
	azcore.Pager

	// PageResponse returns the current RoleDefinitionListResultResponse.
	PageResponse() RoleDefinitionListResultResponse
}

type roleDefinitionListResultCreateRequest func(context.Context) (*azcore.Request, error)

type roleDefinitionListResultHandleError func(*azcore.Response) error

type roleDefinitionListResultHandleResponse func(*azcore.Response) (RoleDefinitionListResultResponse, error)

type roleDefinitionListResultAdvancePage func(context.Context, RoleDefinitionListResultResponse) (*azcore.Request, error)

type roleDefinitionListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester roleDefinitionListResultCreateRequest
	// callback for handling response errors
	errorer roleDefinitionListResultHandleError
	// callback for handling the HTTP response
	responder roleDefinitionListResultHandleResponse
	// callback for advancing to the next page
	advancer roleDefinitionListResultAdvancePage
	// contains the current response
	current RoleDefinitionListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *roleDefinitionListResultPager) Err() error {
	return p.err
}

func (p *roleDefinitionListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RoleDefinitionListResult.NextLink == nil || len(*p.current.RoleDefinitionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *roleDefinitionListResultPager) PageResponse() RoleDefinitionListResultResponse {
	return p.current
}

// SasDefinitionListResultPager provides iteration over SasDefinitionListResult pages.
type SasDefinitionListResultPager interface {
	azcore.Pager

	// PageResponse returns the current SasDefinitionListResultResponse.
	PageResponse() SasDefinitionListResultResponse
}

type sasDefinitionListResultCreateRequest func(context.Context) (*azcore.Request, error)

type sasDefinitionListResultHandleError func(*azcore.Response) error

type sasDefinitionListResultHandleResponse func(*azcore.Response) (SasDefinitionListResultResponse, error)

type sasDefinitionListResultAdvancePage func(context.Context, SasDefinitionListResultResponse) (*azcore.Request, error)

type sasDefinitionListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester sasDefinitionListResultCreateRequest
	// callback for handling response errors
	errorer sasDefinitionListResultHandleError
	// callback for handling the HTTP response
	responder sasDefinitionListResultHandleResponse
	// callback for advancing to the next page
	advancer sasDefinitionListResultAdvancePage
	// contains the current response
	current SasDefinitionListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *sasDefinitionListResultPager) Err() error {
	return p.err
}

func (p *sasDefinitionListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SasDefinitionListResult.NextLink == nil || len(*p.current.SasDefinitionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *sasDefinitionListResultPager) PageResponse() SasDefinitionListResultResponse {
	return p.current
}

// SecretListResultPager provides iteration over SecretListResult pages.
type SecretListResultPager interface {
	azcore.Pager

	// PageResponse returns the current SecretListResultResponse.
	PageResponse() SecretListResultResponse
}

type secretListResultCreateRequest func(context.Context) (*azcore.Request, error)

type secretListResultHandleError func(*azcore.Response) error

type secretListResultHandleResponse func(*azcore.Response) (SecretListResultResponse, error)

type secretListResultAdvancePage func(context.Context, SecretListResultResponse) (*azcore.Request, error)

type secretListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester secretListResultCreateRequest
	// callback for handling response errors
	errorer secretListResultHandleError
	// callback for handling the HTTP response
	responder secretListResultHandleResponse
	// callback for advancing to the next page
	advancer secretListResultAdvancePage
	// contains the current response
	current SecretListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *secretListResultPager) Err() error {
	return p.err
}

func (p *secretListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SecretListResult.NextLink == nil || len(*p.current.SecretListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *secretListResultPager) PageResponse() SecretListResultResponse {
	return p.current
}

// StorageListResultPager provides iteration over StorageListResult pages.
type StorageListResultPager interface {
	azcore.Pager

	// PageResponse returns the current StorageListResultResponse.
	PageResponse() StorageListResultResponse
}

type storageListResultCreateRequest func(context.Context) (*azcore.Request, error)

type storageListResultHandleError func(*azcore.Response) error

type storageListResultHandleResponse func(*azcore.Response) (StorageListResultResponse, error)

type storageListResultAdvancePage func(context.Context, StorageListResultResponse) (*azcore.Request, error)

type storageListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester storageListResultCreateRequest
	// callback for handling response errors
	errorer storageListResultHandleError
	// callback for handling the HTTP response
	responder storageListResultHandleResponse
	// callback for advancing to the next page
	advancer storageListResultAdvancePage
	// contains the current response
	current StorageListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *storageListResultPager) Err() error {
	return p.err
}

func (p *storageListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StorageListResult.NextLink == nil || len(*p.current.StorageListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *storageListResultPager) PageResponse() StorageListResultResponse {
	return p.current
}
