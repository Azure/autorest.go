// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azkeyvault

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"time"
)

// FullBackupOperationPoller provides polling facilities until the operation reaches a terminal state.
type FullBackupOperationPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final FullBackupOperationResponse will be returned.
	FinalResponse(ctx context.Context) (FullBackupOperationResponse, error)
}

type fullBackupOperationPoller struct {
	pt *azcore.LROPoller
}

func (p *fullBackupOperationPoller) Done() bool {
	return p.pt.Done()
}

func (p *fullBackupOperationPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *fullBackupOperationPoller) FinalResponse(ctx context.Context) (FullBackupOperationResponse, error) {
	respType := FullBackupOperationResponse{FullBackupOperation: &FullBackupOperation{}}
	resp, err := p.pt.FinalResponse(ctx, respType.FullBackupOperation)
	if err != nil {
		return FullBackupOperationResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *fullBackupOperationPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *fullBackupOperationPoller) pollUntilDone(ctx context.Context, freq time.Duration) (FullBackupOperationResponse, error) {
	respType := FullBackupOperationResponse{FullBackupOperation: &FullBackupOperation{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, respType.FullBackupOperation)
	if err != nil {
		return FullBackupOperationResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// RestoreOperationPoller provides polling facilities until the operation reaches a terminal state.
type RestoreOperationPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final RestoreOperationResponse will be returned.
	FinalResponse(ctx context.Context) (RestoreOperationResponse, error)
}

type restoreOperationPoller struct {
	pt *azcore.LROPoller
}

func (p *restoreOperationPoller) Done() bool {
	return p.pt.Done()
}

func (p *restoreOperationPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *restoreOperationPoller) FinalResponse(ctx context.Context) (RestoreOperationResponse, error) {
	respType := RestoreOperationResponse{RestoreOperation: &RestoreOperation{}}
	resp, err := p.pt.FinalResponse(ctx, respType.RestoreOperation)
	if err != nil {
		return RestoreOperationResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *restoreOperationPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *restoreOperationPoller) pollUntilDone(ctx context.Context, freq time.Duration) (RestoreOperationResponse, error) {
	respType := RestoreOperationResponse{RestoreOperation: &RestoreOperation{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, respType.RestoreOperation)
	if err != nil {
		return RestoreOperationResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// SecurityDomainObjectPoller provides polling facilities until the operation reaches a terminal state.
type SecurityDomainObjectPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final SecurityDomainObjectResponse will be returned.
	FinalResponse(ctx context.Context) (SecurityDomainObjectResponse, error)
}

type securityDomainObjectPoller struct {
	pt *azcore.LROPoller
}

func (p *securityDomainObjectPoller) Done() bool {
	return p.pt.Done()
}

func (p *securityDomainObjectPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *securityDomainObjectPoller) FinalResponse(ctx context.Context) (SecurityDomainObjectResponse, error) {
	respType := SecurityDomainObjectResponse{SecurityDomainObject: &SecurityDomainObject{}}
	resp, err := p.pt.FinalResponse(ctx, respType.SecurityDomainObject)
	if err != nil {
		return SecurityDomainObjectResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *securityDomainObjectPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *securityDomainObjectPoller) pollUntilDone(ctx context.Context, freq time.Duration) (SecurityDomainObjectResponse, error) {
	respType := SecurityDomainObjectResponse{SecurityDomainObject: &SecurityDomainObject{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, respType.SecurityDomainObject)
	if err != nil {
		return SecurityDomainObjectResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// SecurityDomainOperationStatusPoller provides polling facilities until the operation reaches a terminal state.
type SecurityDomainOperationStatusPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final SecurityDomainOperationStatusResponse will be returned.
	FinalResponse(ctx context.Context) (SecurityDomainOperationStatusResponse, error)
}

type securityDomainOperationStatusPoller struct {
	pt *azcore.LROPoller
}

func (p *securityDomainOperationStatusPoller) Done() bool {
	return p.pt.Done()
}

func (p *securityDomainOperationStatusPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *securityDomainOperationStatusPoller) FinalResponse(ctx context.Context) (SecurityDomainOperationStatusResponse, error) {
	respType := SecurityDomainOperationStatusResponse{SecurityDomainOperationStatus: &SecurityDomainOperationStatus{}}
	resp, err := p.pt.FinalResponse(ctx, respType.SecurityDomainOperationStatus)
	if err != nil {
		return SecurityDomainOperationStatusResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *securityDomainOperationStatusPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *securityDomainOperationStatusPoller) pollUntilDone(ctx context.Context, freq time.Duration) (SecurityDomainOperationStatusResponse, error) {
	respType := SecurityDomainOperationStatusResponse{SecurityDomainOperationStatus: &SecurityDomainOperationStatus{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, respType.SecurityDomainOperationStatus)
	if err != nil {
		return SecurityDomainOperationStatusResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// SelectiveKeyRestoreOperationPoller provides polling facilities until the operation reaches a terminal state.
type SelectiveKeyRestoreOperationPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final SelectiveKeyRestoreOperationResponse will be returned.
	FinalResponse(ctx context.Context) (SelectiveKeyRestoreOperationResponse, error)
}

type selectiveKeyRestoreOperationPoller struct {
	pt *azcore.LROPoller
}

func (p *selectiveKeyRestoreOperationPoller) Done() bool {
	return p.pt.Done()
}

func (p *selectiveKeyRestoreOperationPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *selectiveKeyRestoreOperationPoller) FinalResponse(ctx context.Context) (SelectiveKeyRestoreOperationResponse, error) {
	respType := SelectiveKeyRestoreOperationResponse{SelectiveKeyRestoreOperation: &SelectiveKeyRestoreOperation{}}
	resp, err := p.pt.FinalResponse(ctx, respType.SelectiveKeyRestoreOperation)
	if err != nil {
		return SelectiveKeyRestoreOperationResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *selectiveKeyRestoreOperationPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *selectiveKeyRestoreOperationPoller) pollUntilDone(ctx context.Context, freq time.Duration) (SelectiveKeyRestoreOperationResponse, error) {
	respType := SelectiveKeyRestoreOperationResponse{SelectiveKeyRestoreOperation: &SelectiveKeyRestoreOperation{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, respType.SelectiveKeyRestoreOperation)
	if err != nil {
		return SelectiveKeyRestoreOperationResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}
