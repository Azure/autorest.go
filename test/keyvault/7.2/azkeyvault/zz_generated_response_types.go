// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azkeyvault

import (
	"context"
	"net/http"
	"time"
)

// BackupCertificateResultResponse is the response envelope for operations that return a BackupCertificateResult type.
type BackupCertificateResultResponse struct {
	// The backup certificate result, containing the backup blob.
	BackupCertificateResult *BackupCertificateResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BackupKeyResultResponse is the response envelope for operations that return a BackupKeyResult type.
type BackupKeyResultResponse struct {
	// The backup key result, containing the backup blob.
	BackupKeyResult *BackupKeyResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BackupSecretResultResponse is the response envelope for operations that return a BackupSecretResult type.
type BackupSecretResultResponse struct {
	// The backup secret result, containing the backup blob.
	BackupSecretResult *BackupSecretResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BackupStorageResultResponse is the response envelope for operations that return a BackupStorageResult type.
type BackupStorageResultResponse struct {
	// The backup storage result, containing the backup blob.
	BackupStorageResult *BackupStorageResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CertificateBundleResponse is the response envelope for operations that return a CertificateBundle type.
type CertificateBundleResponse struct {
	// A certificate bundle consists of a certificate (X509) plus its attributes.
	CertificateBundle *CertificateBundle

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CertificateIssuerListResultResponse is the response envelope for operations that return a CertificateIssuerListResult type.
type CertificateIssuerListResultResponse struct {
	// The certificate issuer list result.
	CertificateIssuerListResult *CertificateIssuerListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CertificateListResultResponse is the response envelope for operations that return a CertificateListResult type.
type CertificateListResultResponse struct {
	// The certificate list result.
	CertificateListResult *CertificateListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CertificateOperationResponse is the response envelope for operations that return a CertificateOperation type.
type CertificateOperationResponse struct {
	// A certificate operation is returned in case of asynchronous requests.
	CertificateOperation *CertificateOperation

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CertificatePolicyResponse is the response envelope for operations that return a CertificatePolicy type.
type CertificatePolicyResponse struct {
	// Management policy for a certificate.
	CertificatePolicy *CertificatePolicy

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ContactsResponse is the response envelope for operations that return a Contacts type.
type ContactsResponse struct {
	// The contacts for the vault certificates.
	Contacts *Contacts

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DeletedCertificateBundleResponse is the response envelope for operations that return a DeletedCertificateBundle type.
type DeletedCertificateBundleResponse struct {
	// A Deleted Certificate consisting of its previous id, attributes and its tags, as well as information on when it will be purged.
	DeletedCertificateBundle *DeletedCertificateBundle

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DeletedCertificateListResultResponse is the response envelope for operations that return a DeletedCertificateListResult type.
type DeletedCertificateListResultResponse struct {
	// A list of certificates that have been deleted in this vault.
	DeletedCertificateListResult *DeletedCertificateListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DeletedKeyBundleResponse is the response envelope for operations that return a DeletedKeyBundle type.
type DeletedKeyBundleResponse struct {
	// A DeletedKeyBundle consisting of a WebKey plus its Attributes and deletion info
	DeletedKeyBundle *DeletedKeyBundle

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DeletedKeyListResultResponse is the response envelope for operations that return a DeletedKeyListResult type.
type DeletedKeyListResultResponse struct {
	// A list of keys that have been deleted in this vault.
	DeletedKeyListResult *DeletedKeyListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DeletedSasDefinitionBundleResponse is the response envelope for operations that return a DeletedSasDefinitionBundle type.
type DeletedSasDefinitionBundleResponse struct {
	// A deleted SAS definition bundle consisting of its previous id, attributes and its tags, as well as information on when it will be purged.
	DeletedSasDefinitionBundle *DeletedSasDefinitionBundle

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DeletedSasDefinitionListResultResponse is the response envelope for operations that return a DeletedSasDefinitionListResult type.
type DeletedSasDefinitionListResultResponse struct {
	// The deleted SAS definition list result
	DeletedSasDefinitionListResult *DeletedSasDefinitionListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DeletedSecretBundleResponse is the response envelope for operations that return a DeletedSecretBundle type.
type DeletedSecretBundleResponse struct {
	// A Deleted Secret consisting of its previous id, attributes and its tags, as well as information on when it will be purged.
	DeletedSecretBundle *DeletedSecretBundle

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DeletedSecretListResultResponse is the response envelope for operations that return a DeletedSecretListResult type.
type DeletedSecretListResultResponse struct {
	// The deleted secret list result
	DeletedSecretListResult *DeletedSecretListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DeletedStorageBundleResponse is the response envelope for operations that return a DeletedStorageBundle type.
type DeletedStorageBundleResponse struct {
	// A deleted storage account bundle consisting of its previous id, attributes and its tags, as well as information on when it will be purged.
	DeletedStorageBundle *DeletedStorageBundle

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DeletedStorageListResultResponse is the response envelope for operations that return a DeletedStorageListResult type.
type DeletedStorageListResultResponse struct {
	// The deleted storage account list result
	DeletedStorageListResult *DeletedStorageListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FullBackupOperationPollerResponse is the response envelope for operations that asynchronously return a FullBackupOperation type.
type FullBackupOperationPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (FullBackupOperationResponse, error)

	// Poller contains an initialized poller.
	Poller FullBackupOperationPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FullBackupOperationResponse is the response envelope for operations that return a FullBackupOperation type.
type FullBackupOperationResponse struct {
	// Full backup operation
	FullBackupOperation *FullBackupOperation

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IssuerBundleResponse is the response envelope for operations that return a IssuerBundle type.
type IssuerBundleResponse struct {
	// The issuer for Key Vault certificate.
	IssuerBundle *IssuerBundle

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KeyBundleResponse is the response envelope for operations that return a KeyBundle type.
type KeyBundleResponse struct {
	// A KeyBundle consisting of a WebKey plus its attributes.
	KeyBundle *KeyBundle

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KeyListResultResponse is the response envelope for operations that return a KeyListResult type.
type KeyListResultResponse struct {
	// The key list result.
	KeyListResult *KeyListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KeyOperationResultResponse is the response envelope for operations that return a KeyOperationResult type.
type KeyOperationResultResponse struct {
	// The key operation result.
	KeyOperationResult *KeyOperationResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KeyVerifyResultResponse is the response envelope for operations that return a KeyVerifyResult type.
type KeyVerifyResultResponse struct {
	// The key verify result.
	KeyVerifyResult *KeyVerifyResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RestoreOperationPollerResponse is the response envelope for operations that asynchronously return a RestoreOperation type.
type RestoreOperationPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (RestoreOperationResponse, error)

	// Poller contains an initialized poller.
	Poller RestoreOperationPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RestoreOperationResponse is the response envelope for operations that return a RestoreOperation type.
type RestoreOperationResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Restore operation
	RestoreOperation *RestoreOperation
}

// RoleAssignmentListResultResponse is the response envelope for operations that return a RoleAssignmentListResult type.
type RoleAssignmentListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Role assignment list operation result.
	RoleAssignmentListResult *RoleAssignmentListResult
}

// RoleAssignmentResponse is the response envelope for operations that return a RoleAssignment type.
type RoleAssignmentResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Role Assignments
	RoleAssignment *RoleAssignment
}

// RoleDefinitionListResultResponse is the response envelope for operations that return a RoleDefinitionListResult type.
type RoleDefinitionListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Role definition list operation result.
	RoleDefinitionListResult *RoleDefinitionListResult
}

// RoleDefinitionResponse is the response envelope for operations that return a RoleDefinition type.
type RoleDefinitionResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Role definition.
	RoleDefinition *RoleDefinition
}

// SasDefinitionBundleResponse is the response envelope for operations that return a SasDefinitionBundle type.
type SasDefinitionBundleResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// A SAS definition bundle consists of key vault SAS definition details plus its attributes.
	SasDefinitionBundle *SasDefinitionBundle
}

// SasDefinitionListResultResponse is the response envelope for operations that return a SasDefinitionListResult type.
type SasDefinitionListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The storage account SAS definition list result.
	SasDefinitionListResult *SasDefinitionListResult
}

// SecretBundleResponse is the response envelope for operations that return a SecretBundle type.
type SecretBundleResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// A secret consisting of a value, id and its attributes.
	SecretBundle *SecretBundle
}

// SecretListResultResponse is the response envelope for operations that return a SecretListResult type.
type SecretListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The secret list result.
	SecretListResult *SecretListResult
}

// SecurityDomainObjectPollerResponse is the response envelope for operations that asynchronously return a SecurityDomainObject type.
type SecurityDomainObjectPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (SecurityDomainObjectResponse, error)

	// Poller contains an initialized poller.
	Poller SecurityDomainObjectPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SecurityDomainObjectResponse is the response envelope for operations that return a SecurityDomainObject type.
type SecurityDomainObjectResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The Security Domain.
	SecurityDomainObject *SecurityDomainObject
}

// SecurityDomainOperationStatusPollerResponse is the response envelope for operations that asynchronously return a SecurityDomainOperationStatus type.
type SecurityDomainOperationStatusPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (SecurityDomainOperationStatusResponse, error)

	// Poller contains an initialized poller.
	Poller SecurityDomainOperationStatusPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SecurityDomainOperationStatusResponse is the response envelope for operations that return a SecurityDomainOperationStatus type.
type SecurityDomainOperationStatusResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse                   *http.Response
	SecurityDomainOperationStatus *SecurityDomainOperationStatus
}

// SelectiveKeyRestoreOperationPollerResponse is the response envelope for operations that asynchronously return a SelectiveKeyRestoreOperation type.
type SelectiveKeyRestoreOperationPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (SelectiveKeyRestoreOperationResponse, error)

	// Poller contains an initialized poller.
	Poller SelectiveKeyRestoreOperationPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SelectiveKeyRestoreOperationResponse is the response envelope for operations that return a SelectiveKeyRestoreOperation type.
type SelectiveKeyRestoreOperationResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Selective Key Restore operation
	SelectiveKeyRestoreOperation *SelectiveKeyRestoreOperation
}

// StorageBundleResponse is the response envelope for operations that return a StorageBundle type.
type StorageBundleResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// A Storage account bundle consists of key vault storage account details plus its attributes.
	StorageBundle *StorageBundle
}

// StorageListResultResponse is the response envelope for operations that return a StorageListResult type.
type StorageListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The storage accounts list result.
	StorageListResult *StorageListResult
}

// TransferKeyResponse is the response envelope for operations that return a TransferKey type.
type TransferKeyResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
	TransferKey *TransferKey
}
