//go:build go1.18
// +build go1.18

{{copyright}}

package main

import (
    "context"
    "fmt"
    "math/rand"

    "github.com/Azure/azure-sdk-for-go/sdk/azcore"
    "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
    "github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
    "github.com/Azure/azure-sdk-for-go/sdk/azidentity"
    "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources"
)
{{imports}}

var (
    err            error
    ctx            context.Context
    cred           azcore.TokenCredential
    letterRunes = []rune("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789")
{%- for name, variable in variablesOutput %}
{%- if not requiredVariablesDefault.hasOwnProperty(name) %}
{%- if variable.value === undefined %}
    {{name}} string
{%- else %}
    {%- if variable.type === "prefix-string" %}
    {{name}} = generateAlphaNumericID({{variable.value}}, 6)
        {%- else %}
    {{name}} = {{variable.value}}
        {%- endif %}
{%- endif %}
{%- endif %}
{%- endfor %}
{%- for variable, _ in requiredVariablesDefault %}
    {%- if variable === "subscriptionId" %}
    subscriptionId = getEnv("AZURE_SUBSCRIPTION_ID", "")
    {%- else %}
    {{variable}} = getEnv("{{jsFunc.snakeCase(variable).toUpperCase()}}", "{{requiredVariablesDefault[variable]}}")
    {%- endif %}
{%- endfor %}
)

func main() {
    ctx = context.Background()
    cred, err = azidentity.NewDefaultAzureCredential(nil)
    if err != nil {
        panic(err)
    }

    {%- if scope.toLowerCase() == 'resourcegroup'%}
    createResourceGroup()
    {%- endif %}
    {%- if prepareSteps.length > 0 %}
    prepare()
    {%- endif %}
    {%- for testScenario in scenarios %}
    {{jsFunc.camelCase(testScenario.scenario)}}Sample()
    {%- endfor %}
    {%- if cleanUpSteps.length > 0 %}
    cleanup()
    {%- endif %}
    {%- if scope.toLowerCase() == 'resourcegroup'%}
    deleteResourceGroup()
    {%- endif %}
}
{%- if prepareSteps.length > 0 %}

func prepare() {
    {%- set steps = prepareSteps %}
    {%- include "./sampleContent.go.njk" %}
}
{%- endif %}

{% for testScenario in scenarios %}
// {{testScenario.description}}
func {{jsFunc.camelCase(testScenario.scenario)}}Sample() {
    {%- for variable, value in testScenario.requiredVariablesDefault %}
    {%- if not requiredVariablesDefault.hasOwnProperty(variable) %}
    {{variable}} := getEnv("{{jsFunc.snakeCase(variable).toUpperCase()}}, "{{value}}")
    {%- endif %}
    {%- endfor %}
    {%- for name, variable in testScenario.variablesOutput %}
    {%- if variable.value === undefined %}
    var {{name}} string

    {%- else %}
        {%- if variable.type === "prefix-string" %}
    {{name}} := generateAlphaNumericID({{variable.value}}, 6)
        {%- else %}
    {{name}} := {{variable.value}}
        {%- endif %}
    {%- endif %}
    {%- endfor %}
    
    {%- set steps = testScenario.steps %}
    {%- include "./sampleContent.go.njk" %}
}
{%- endfor %}
{%- if cleanUpSteps.length > 0 %}

func cleanup() {
    {%- set steps = cleanUpSteps %}
    {%- include "./sampleContent.go.njk" %}
}
{%- endif %}
{%- if scope.toLowerCase() == 'resourcegroup'%}

func createResourceGroup() error {
    rand.Seed(time.Now().UnixNano())
    resourceGroupName = fmt.Sprintf("go-sdk-sample-%d", rand.Intn(1000))
    rgClient, err := armresources.NewResourceGroupsClient(subscriptionId, cred, nil)
    if err != nil {
        panic(err)
    }
    param := armresources.ResourceGroup{
        Location: to.Ptr(location),
    }
    _, err = rgClient.CreateOrUpdate(ctx, resourceGroupName, param, nil)
    if err != nil {
        panic(err)
    }
    return nil
}

func deleteResourceGroup() error {
    rgClient, err := armresources.NewResourceGroupsClient(subscriptionId, cred, nil)
    if err != nil {
        panic(err)
    }
    pollerResponse, err := rgClient.BeginDelete(ctx, resourceGroupName, nil)
    if err != nil {
        panic(err)
    }
    _, err = pollerResponse.PollUntilDone(ctx, nil)
    if err != nil {
        panic(err)
    }
    return nil
}
{%- endif %}

func getEnv(key, fallback string) string {
    if value, ok := os.LookupEnv(key); ok {
        return value
    }
    return fallback
}

func createDeployment(deploymentName string, deployment *armresources.Deployment) *armresources.DeploymentExtended {
    deployClient, err := armresources.NewDeploymentsClient(subscriptionId, cred, nil)
    if err != nil {
        panic(err)
    }
    poller, err := deployClient.BeginCreateOrUpdate(
        ctx,
        resourceGroupName,
        deploymentName,
        *deployment,
        &armresources.DeploymentsClientBeginCreateOrUpdateOptions{},
    )
    if err != nil {
        panic(err)
    }
    res, err := poller.PollUntilDone(ctx, nil)
    if err != nil {
        panic(err)
    }
    return &res.DeploymentExtended
}

func generateAlphaNumericID(prefix string, length int) string {
    rand.Seed(time.Now().Unix())
    b := make([]rune, length)
    for i := range b {
        b[i] = letterRunes[rand.Intn(len(letterRunes))]
    }
    return prefix + string(b)
}