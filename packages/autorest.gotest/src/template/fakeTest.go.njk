//go:build go1.18
// +build go1.18

{{copyright}}

package {{packageName}}_test

import (
	"context"
	"net/http"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal/v2/testutil"
	"github.com/stretchr/testify/suite"
)
{{imports}}

var err error

type FakeTestSuite struct {
    suite.Suite

	ctx            context.Context
	cred           azcore.TokenCredential
	subscriptionId string
	serverFactory  *fake.ServerFactory
	clientFactory  *{{packageName}}.ClientFactory
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
    testsuite.cred = &testutil.FakeCredential{}
    testsuite.subscriptionId = "00000000-0000-0000-0000-000000000000"
	testsuite.serverFactory = &fake.ServerFactory{}
    testsuite.clientFactory, err = {{packageName}}.NewClientFactory({{jsFunc.getParamsValue(clientFactoryParametersOutput) + ", " if clientFactoryParametersOutput.length>0 else ""}}testsuite.cred, &arm.ClientOptions{
        ClientOptions: azcore.ClientOptions{
            Transport: fake.NewServerFactoryTransport(testsuite.serverFactory),
        },
    })
    testsuite.Require().NoError(err, "Failed to create client factory")
}

func TestFakeTest(t *testing.T) {
    suite.Run(t, new(FakeTestSuite))
}

{% for exampleGroup in exampleGroups %} 
{% if exampleGroup.operation.language.default.name == exampleGroup.operation.language.go.name %}
func (testsuite *FakeTestSuite) Test{{exampleGroup.operationGroup.language.go.name}}_{{exampleGroup.operation.language.go.name}}() {
{%- if exampleGroup.examples|length <=0 %}
    testsuite.T().Skip("Warning: No test steps for this operation!")
{%- endif %}

{%- for example in exampleGroup.examples %}
    // From example {{example.originalFile}}
    {%- if sendExampleId %}
    ctx {%- if loop.first %}:{%- endif %}= runtime.WithHTTPHeader(testsuite.ctx, map[string][]string{
        "example-id": {"{{example.name.split('\\').join('\\\\').split('"').join('\\"')}}"},
    })
    {%- endif %}

    {%- if loop.first %}
    {%- for param in example.methodParametersOutput %}
    {%- if param.paramName != 'options' and param.paramName != 'ctx' %}
    var example{{jsFunc.capitalize(param.paramName)}} {{jsFunc.getParameterType(exampleGroup.operation,packageName,param.paramName)}}
    {%- endif %}
    {%- endfor %}
    {%- endif %}

    {%- for param in example.methodParametersOutput %}
    {%- if param.paramName != 'options' and param.paramName != 'ctx' %}
    example{{jsFunc.capitalize(param.paramName)}} = {{param.paramOutput}}
    {%- endif %}
    {%- endfor %}

    {% if example.checkResponse %}exampleRes {%- if loop.first %}:{% endif %}= {{example.responseOutput}}{% endif %}

    testsuite.serverFactory.{{jsFunc.cutClientSuffix(example.operationGroup.language.go.clientName)}}Server.{{example.opName}} = {{jsFunc.funcMethodReturns(exampleGroup.operation,packageName)}} {
        {%- for param in example.methodParametersOutput %}
        {%- if param.paramName != 'options' and param.paramName != 'ctx' %}
        {%- for methodParam in example.methodParameters %}
        {%- if param.paramName == methodParam.exampleValue.language.go.name %}
        {%- if methodParam.exampleValue.schema.type == 'object' %}
        testsuite.Require().True(reflect.DeepEqual(example{{jsFunc.capitalize(param.paramName)}}, {{jsFunc.uncapitalize(param.paramName)}}))
        {%- else %}
        testsuite.Require().Equal(example{{jsFunc.capitalize(param.paramName)}}, {{jsFunc.uncapitalize(param.paramName)}})
        {%- endif %}
        {%- endif %}
        {%- endfor %}
        {%- endif %}
        {%- endfor %}

        {%- if example.isLRO %}
            {%- if example.isPageable%}
            resp = azfake.PollerResponder[azfake.PagerResponder[{{packageName}}.{{example.pollerType}}]]{}
            pager := azfake.PagerResponder[{{packageName}}.{{exampleGroup.operation.language.go.responseEnv.language.go.name}}]{}
            {%- if example.responseIsDiscriminator %}
            pager.AddPage({{jsFunc.getHttpCode(exampleGroup.operation)}}, exampleRes, nil)
            {%- else %}
            pager.AddPage({{jsFunc.getHttpCode(exampleGroup.operation)}}, {{packageName}}.{{exampleGroup.operation.language.go.responseEnv.language.go.name}}{ {% if example.checkResponse %}{{example.responseType}}: {% if example.responseTypePointer%}&{% endif %}exampleRes{% endif %} }, nil)
            {%- endif %}
            resp.SetTerminalResponse({{jsFunc.getHttpCode(exampleGroup.operation)}}, pager, nil)
            {%- else %}
            resp = azfake.PollerResponder[{{packageName}}.{{example.pollerType}}]{}
            {%- if example.responseIsDiscriminator %}
            resp.SetTerminalResponse({{jsFunc.getHttpCode(exampleGroup.operation)}}, exampleRes, nil)
            {%- else %}
            resp.SetTerminalResponse({{jsFunc.getHttpCode(exampleGroup.operation)}}, {{packageName}}.{{example.pollerType}}{ {% if example.checkResponse %}{{example.responseType}}: {% if example.responseTypePointer%}&{% endif %}exampleRes{% endif %} }, nil)
            {%- endif %}
            {%- endif%}
            return
        {%- elif example.isPageable %}
            resp = azfake.PagerResponder[{{packageName}}.{{exampleGroup.operation.language.go.responseEnv.language.go.name}}]{}
            {%- if example.responseIsDiscriminator %}
            resp.AddPage({{jsFunc.getHttpCode(exampleGroup.operation)}}, exampleRes, nil)
            {%- else %}
            resp.AddPage({{jsFunc.getHttpCode(exampleGroup.operation)}}, {{packageName}}.{{exampleGroup.operation.language.go.responseEnv.language.go.name}}{ {% if example.checkResponse %}{{example.responseType}}: {% if example.responseTypePointer%}&{% endif %}exampleRes{% endif %} }, nil)
            {%- endif %}
            return
        {%- else%}
            resp = azfake.Responder[{{packageName}}.{{example.returnInfo[0]}}]{}
            {%- if example.responseIsDiscriminator %}
            resp.SetResponse({{jsFunc.getHttpCode(exampleGroup.operation)}}, exampleRes, nil)
            {%- else %}
            resp.SetResponse({{jsFunc.getHttpCode(exampleGroup.operation)}}, {{packageName}}.{{example.returnInfo[0]}}{ {% if example.checkResponse %}{{example.responseType}}: {% if example.responseTypePointer%}&{% endif %}exampleRes{% endif %} }, nil)
            {%- endif %}
            return
        {%- endif %}
    }

    {% if loop.first %}
    client := testsuite.clientFactory.{{example.operationGroup.language.go.clientCtorName}}({{jsFunc.getParamsValue(example.clientParametersOutput)}})
    {%- endif %}
    {%- if example.returnInfo.length == 2 %}
        {%- if example.isLRO %}
            poller, err {% if loop.first %}:{% endif %}= client.{{example.opName}}({{jsFunc.getExampleParams(example.methodParametersOutput)}})
        {%- else %}
            {% if example.checkResponse %}res{% else %}_{% endif %}, err {% if loop.first and example.checkResponse %}:{% endif %}= client.{{example.opName}}({{jsFunc.getExampleParams(example.methodParametersOutput)}})
        {%- endif %}
        testsuite.Require().NoError(err, "Failed to get result for example {{example.originalFile}}")
        {%- if example.isLRO %}
            {% if example.checkResponse %}res{% else %}_{% endif %}, err {% if loop.first and example.checkResponse %}:{% endif %}= poller.PollUntilDone(ctx, nil)
            testsuite.Require().NoError(err, "Failed to get LRO result for example {{example.originalFile}}")
        {%- endif %}
    {%- elif  (example.returnInfo.length == 1) and (example.isPageable) %}
        pager {% if loop.first %}:{% endif %}= client.{{example.opName}}({{jsFunc.getExampleParams(example.methodParametersOutput)}})
        for pager.More() {
            {% if example.checkResponse and verifyResponse%}nextResult{% else %}_{% endif %}, err := pager.NextPage(ctx)
            testsuite.Require().NoError(err, "Failed to advance page for example {{example.originalFile}}")
            {%- if example.checkResponse and verifyResponse%}
            testsuite.Require().True(reflect.DeepEqual(exampleRes, {% if example.responseTypePointer %}*{% endif %}nextResult{% if not example.responseIsDiscriminator %}.{{example.responseType}}{% endif %}))
            {%- endif %}
            if err == nil {
                break
            }
        }
    {%- else %}
        client.{{example.opName}}({{jsFunc.getExampleParams(example.methodParametersOutput)}})
    {%- endif %}

    {%- if example.isLRO and example.isPageable and example.checkResponse %}
        for res.More() {
            {% if example.checkResponse and verifyResponse%}nextResult{% else %}_{% endif %}, err := res.NextPage(ctx)
            testsuite.Require().NoError(err, "Failed to advance page for example {{example.originalFile}}")
            {%- if example.checkResponse and verifyResponse%}
            testsuite.Require().True(reflect.DeepEqual(exampleRes, {% if example.responseTypePointer %}*{% endif %}nextResult{% if not example.responseIsDiscriminator %}.{{example.responseType}}{% endif %}))
            {%- endif %}
        }
    {%- endif %}
        
    {%- if example.checkResponse and not example.isPageable and verifyResponse%}
        testsuite.Require().True(reflect.DeepEqual(exampleRes, {% if example.responseTypePointer %}*{% endif %}res{% if not example.responseIsDiscriminator %}.{{example.responseType}}{% endif %}))
    {%- endif %}
    {%- if not loop.last %}

    {% endif %}
{%- endfor %}
}
{%- endif %}
{% endfor %}