//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armagrifood_test

import (
	"context"
	"net/http"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/agrifood/armagrifood"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal/testutil"
	"github.com/stretchr/testify/suite"
	"golang.org/x/net/http2"
)

type MockTestSuite struct {
	suite.Suite

	cred    azcore.TokenCredential
	options arm.ClientOptions
}

func (testsuite *MockTestSuite) SetupSuite() {
	mockHost := testutil.GetEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	err := http2.ConfigureTransport(tr)
	testsuite.Require().NoError(err, "Failed to configure http2 transport")
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	testsuite.cred = &testutil.FakeCredential{}

	testsuite.options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
			Cloud: cloud.Configuration{
				Services: map[cloud.ServiceName]cloud.ServiceConfiguration{
					cloud.ResourceManager: {
						Audience: mockHost,
						Endpoint: mockHost,
					},
				},
			},
		},
	}
}

func TestMockTest(t *testing.T) {
	suite.Run(t, new(MockTestSuite))
}

func (testsuite *MockTestSuite) TestExtensions_Create() {
	ctx := context.Background()
	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Extensions_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Extensions_Create"},
	})
	client, err := armagrifood.NewExtensionsClient("11111111-2222-3333-4444-555555555555", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	_, err = client.Create(ctx, "examples-rg", "examples-farmbeatsResourceName", "provider.extension", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Extensions_Create.json")
}

func (testsuite *MockTestSuite) TestExtensions_Get() {
	ctx := context.Background()
	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Extensions_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Extensions_Get"},
	})
	client, err := armagrifood.NewExtensionsClient("11111111-2222-3333-4444-555555555555", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx, "examples-rg", "examples-farmbeatsResourceName", "provider.extension", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Extensions_Get.json")
	// Response check
	exampleRes := armagrifood.Extension{
		Name: to.Ptr("provider.extension"),
		Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/extensions"),
		ID:   to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName/extensions/provider.extension"),
		SystemData: &armagrifood.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.1075056Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armagrifood.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.1075056Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armagrifood.CreatedByTypeUser),
		},
		ETag: to.Ptr("7200b954-0000-0700-0000-603cbbc40000"),
		Properties: &armagrifood.ExtensionProperties{
			ExtensionAPIDocsLink:      to.Ptr("https://docs.provider.com/documentation/extension"),
			ExtensionAuthLink:         to.Ptr("https://www.provider.com/extension/"),
			ExtensionCategory:         to.Ptr("Weather"),
			InstalledExtensionVersion: to.Ptr("1.0"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Extension) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Extension)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Extensions_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestExtensions_Update() {
	ctx := context.Background()
	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Extensions_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Extensions_Update"},
	})
	client, err := armagrifood.NewExtensionsClient("11111111-2222-3333-4444-555555555555", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Update(ctx, "examples-rg", "examples-farmbeatsResourceName", "provider.extension", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Extensions_Update.json")
	// Response check
	exampleRes := armagrifood.Extension{
		Name: to.Ptr("provider.extension"),
		Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/extensions"),
		ID:   to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName/extensions/provider.extension"),
		SystemData: &armagrifood.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.1075056Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armagrifood.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.1075056Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armagrifood.CreatedByTypeUser),
		},
		ETag: to.Ptr("7200b954-0000-0700-0000-603cbbc40000"),
		Properties: &armagrifood.ExtensionProperties{
			ExtensionAPIDocsLink:      to.Ptr("https://docs.provider.com/documentation/extension"),
			ExtensionAuthLink:         to.Ptr("https://www.provider.com/extension/"),
			ExtensionCategory:         to.Ptr("Weather"),
			InstalledExtensionVersion: to.Ptr("2.0"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Extension) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Extension)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Extensions_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestExtensions_Delete() {
	ctx := context.Background()
	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Extensions_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Extensions_Delete"},
	})
	client, err := armagrifood.NewExtensionsClient("11111111-2222-3333-4444-555555555555", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	_, err = client.Delete(ctx, "examples-rg", "examples-farmbeatsResourceName", "provider.extension", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Extensions_Delete.json")
}

func (testsuite *MockTestSuite) TestExtensions_ListByFarmBeats() {
	ctx := context.Background()
	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Extensions_ListByFarmBeats.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Extensions_ListByFarmBeats"},
	})
	client, err := armagrifood.NewExtensionsClient("11111111-2222-3333-4444-555555555555", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListByFarmBeatsPager("examples-rg", "examples-farmbeatsResourceName", &armagrifood.ExtensionsClientListByFarmBeatsOptions{ExtensionIDs: []string{},
		ExtensionCategories: []string{},
		MaxPageSize:         nil,
		SkipToken:           nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Extensions_ListByFarmBeats.json")
		// Response check
		pagerExampleRes := armagrifood.ExtensionListResponse{
			Value: []*armagrifood.Extension{
				{
					Name: to.Ptr("provider.extension"),
					Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/extensions"),
					ID:   to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName/extensions/provider.extension"),
					SystemData: &armagrifood.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.1075056Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armagrifood.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.1075056Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armagrifood.CreatedByTypeUser),
					},
					ETag: to.Ptr("7200b954-0000-0700-0000-603cbbc40000"),
					Properties: &armagrifood.ExtensionProperties{
						ExtensionAPIDocsLink:      to.Ptr("https://docs.provider.com/documentation/extension"),
						ExtensionAuthLink:         to.Ptr("https://www.provider.com/extension/"),
						ExtensionCategory:         to.Ptr("Weather"),
						InstalledExtensionVersion: to.Ptr("1.0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExtensionListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExtensionListResponse)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Extensions_ListByFarmBeats.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestFarmBeatsExtensions_List() {
	ctx := context.Background()
	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsExtensions_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FarmBeatsExtensions_List"},
	})
	client, err := armagrifood.NewFarmBeatsExtensionsClient(testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager(&armagrifood.FarmBeatsExtensionsClientListOptions{FarmBeatsExtensionIDs: []string{},
		FarmBeatsExtensionNames: []string{},
		ExtensionCategories:     []string{},
		PublisherIDs:            []string{},
		MaxPageSize:             nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsExtensions_List.json")
		// Response check
		pagerExampleRes := armagrifood.FarmBeatsExtensionListResponse{
			Value: []*armagrifood.FarmBeatsExtension{
				{
					Name: to.Ptr("DTN.ContentServices"),
					Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeatsExtensionDefinitions"),
					ID:   to.Ptr("Microsoft.AgFoodPlatform/farmBeatsExtensionDefinitions/DTN.ContentServices"),
					SystemData: &armagrifood.SystemData{
						CreatedAt:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-12T15:28:06Z"); return t }()),
						LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-12T15:30:01Z"); return t }()),
					},
					Properties: &armagrifood.FarmBeatsExtensionProperties{
						DetailedInformation: []*armagrifood.DetailedInformation{
							{
								APIInputParameters: []*string{
									to.Ptr("stationId"),
									to.Ptr("lat"),
									to.Ptr("lon"),
									to.Ptr("days"),
									to.Ptr("units"),
									to.Ptr("precision"),
									to.Ptr("sector")},
								APIName: to.Ptr("GetDailyObservations"),
								CustomParameters: []*string{
									to.Ptr("stationId"),
									to.Ptr("stationLatitude"),
									to.Ptr("stationLongitude"),
									to.Ptr("timeZone"),
									to.Ptr("sunrise"),
									to.Ptr("sunset"),
									to.Ptr("weatherCode"),
									to.Ptr("weatherDescription"),
									to.Ptr("maxTemperature"),
									to.Ptr("minTemperature"),
									to.Ptr("avgHeatIndex"),
									to.Ptr("maxHeatIndex"),
									to.Ptr("minHeatIndex"),
									to.Ptr("maxWindChill"),
									to.Ptr("minWindChill"),
									to.Ptr("maxFeelsLike"),
									to.Ptr("minFeelsLike"),
									to.Ptr("avgFeelsLike"),
									to.Ptr("maxWindSpeed"),
									to.Ptr("avgWetBulbGlobeTemp"),
									to.Ptr("maxWetBulbGlobeTemp"),
									to.Ptr("minWetBulbGlobeTemp"),
									to.Ptr("minutesOfSunshine"),
									to.Ptr("cornHeatUnit"),
									to.Ptr("evapotranspiration")},
								PlatformParameters: []*string{
									to.Ptr("cloudCover"),
									to.Ptr("dewPoint"),
									to.Ptr("growingDegreeDay"),
									to.Ptr("precipitation"),
									to.Ptr("pressure"),
									to.Ptr("relativeHumidity"),
									to.Ptr("temperature"),
									to.Ptr("wetBulbTemperature"),
									to.Ptr("dateTime"),
									to.Ptr("windChill"),
									to.Ptr("windSpeed"),
									to.Ptr("windDirection")},
								UnitsSupported: &armagrifood.UnitSystemsInfo{
									Key: to.Ptr("units"),
									Values: []*string{
										to.Ptr("us"),
										to.Ptr("si")},
								},
							},
							{
								APIInputParameters: []*string{
									to.Ptr("stationId"),
									to.Ptr("lat"),
									to.Ptr("lon"),
									to.Ptr("hours"),
									to.Ptr("units"),
									to.Ptr("precision"),
									to.Ptr("sector")},
								APIName: to.Ptr("GetHourlyObservations"),
								CustomParameters: []*string{
									to.Ptr("stationId"),
									to.Ptr("stationLatitude"),
									to.Ptr("stationLongitude"),
									to.Ptr("timeZone"),
									to.Ptr("weatherCode"),
									to.Ptr("weatherDescription"),
									to.Ptr("feelsLike"),
									to.Ptr("visibilityWeatherCode"),
									to.Ptr("visibilityWeatherDescription"),
									to.Ptr("minutesOfSunshine")},
								PlatformParameters: []*string{
									to.Ptr("cloudCover"),
									to.Ptr("dewPoint"),
									to.Ptr("precipitation"),
									to.Ptr("pressure"),
									to.Ptr("relativeHumidity"),
									to.Ptr("temperature"),
									to.Ptr("wetBulbTemperature"),
									to.Ptr("dateTime"),
									to.Ptr("visibility"),
									to.Ptr("windChill"),
									to.Ptr("windSpeed"),
									to.Ptr("windDirection"),
									to.Ptr("windGust")},
								UnitsSupported: &armagrifood.UnitSystemsInfo{
									Key: to.Ptr("units"),
									Values: []*string{
										to.Ptr("us"),
										to.Ptr("si")},
								},
							},
							{
								APIInputParameters: []*string{
									to.Ptr("stationId"),
									to.Ptr("lat"),
									to.Ptr("lon"),
									to.Ptr("days"),
									to.Ptr("units"),
									to.Ptr("precision"),
									to.Ptr("sector")},
								APIName: to.Ptr("GetHourlyForecasts"),
								CustomParameters: []*string{
									to.Ptr("stationId"),
									to.Ptr("stationLatitude"),
									to.Ptr("stationLongitude"),
									to.Ptr("timeZone"),
									to.Ptr("weatherCode"),
									to.Ptr("weatherDescription"),
									to.Ptr("feelsLike"),
									to.Ptr("visibilityWeatherCode"),
									to.Ptr("visibilityWeatherDescription"),
									to.Ptr("minutesOfSunshine")},
								PlatformParameters: []*string{
									to.Ptr("cloudCover"),
									to.Ptr("dewPoint"),
									to.Ptr("precipitation"),
									to.Ptr("pressure"),
									to.Ptr("relativeHumidity"),
									to.Ptr("temperature"),
									to.Ptr("wetBulbTemperature"),
									to.Ptr("dateTime"),
									to.Ptr("visibility"),
									to.Ptr("windChill"),
									to.Ptr("windSpeed"),
									to.Ptr("windDirection"),
									to.Ptr("windGust")},
								UnitsSupported: &armagrifood.UnitSystemsInfo{
									Key: to.Ptr("units"),
									Values: []*string{
										to.Ptr("us"),
										to.Ptr("si")},
								},
							},
							{
								APIInputParameters: []*string{
									to.Ptr("stationId"),
									to.Ptr("lat"),
									to.Ptr("lon"),
									to.Ptr("days"),
									to.Ptr("units"),
									to.Ptr("precision"),
									to.Ptr("sector")},
								APIName: to.Ptr("GetDailyForecasts"),
								CustomParameters: []*string{
									to.Ptr("stationId"),
									to.Ptr("stationLatitude"),
									to.Ptr("stationLongitude"),
									to.Ptr("timeZone"),
									to.Ptr("sunrise"),
									to.Ptr("sunset"),
									to.Ptr("weatherCode"),
									to.Ptr("weatherDescription"),
									to.Ptr("maxTemperature"),
									to.Ptr("minTemperature"),
									to.Ptr("avgHeatIndex"),
									to.Ptr("maxHeatIndex"),
									to.Ptr("minHeatIndex"),
									to.Ptr("maxWindChill"),
									to.Ptr("minWindChill"),
									to.Ptr("maxFeelsLike"),
									to.Ptr("minFeelsLike"),
									to.Ptr("avgFeelsLike"),
									to.Ptr("maxWindSpeed"),
									to.Ptr("avgWetBulbGlobeTemp"),
									to.Ptr("maxWetBulbGlobeTemp"),
									to.Ptr("minWetBulbGlobeTemp"),
									to.Ptr("minutesOfSunshine"),
									to.Ptr("cornHeatUnit"),
									to.Ptr("evapotranspiration")},
								PlatformParameters: []*string{
									to.Ptr("cloudCover"),
									to.Ptr("dewPoint"),
									to.Ptr("growingDegreeDay"),
									to.Ptr("precipitation"),
									to.Ptr("pressure"),
									to.Ptr("relativeHumidity"),
									to.Ptr("temperature"),
									to.Ptr("wetBulbTemperature"),
									to.Ptr("dateTime"),
									to.Ptr("windChill"),
									to.Ptr("windSpeed"),
									to.Ptr("windDirection")},
								UnitsSupported: &armagrifood.UnitSystemsInfo{
									Key: to.Ptr("units"),
									Values: []*string{
										to.Ptr("us"),
										to.Ptr("si")},
								},
							}},
						ExtensionAPIDocsLink:      to.Ptr("https://cs-docs.dtn.com/api/weather-observations-and-forecasts-rest-api/"),
						ExtensionAuthLink:         to.Ptr("https://www.dtn.com/dtn-content-integration/"),
						ExtensionCategory:         to.Ptr("Weather"),
						FarmBeatsExtensionID:      to.Ptr("DTN.ContentServices"),
						FarmBeatsExtensionName:    to.Ptr("DTN"),
						FarmBeatsExtensionVersion: to.Ptr("1.0"),
						PublisherID:               to.Ptr("dtn"),
						TargetResourceType:        to.Ptr("FarmBeats"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FarmBeatsExtensionListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FarmBeatsExtensionListResponse)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsExtensions_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestFarmBeatsExtensions_Get() {
	ctx := context.Background()
	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsExtensions_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FarmBeatsExtensions_Get"},
	})
	client, err := armagrifood.NewFarmBeatsExtensionsClient(testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx, "DTN.ContentServices", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsExtensions_Get.json")
	// Response check
	exampleRes := armagrifood.FarmBeatsExtension{
		Name: to.Ptr("DTN.ContentServices"),
		Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeatsExtensionDefinitions"),
		ID:   to.Ptr("Microsoft.AgFoodPlatform/farmBeatsExtensionDefinitions/DTN.ContentServices"),
		SystemData: &armagrifood.SystemData{
			CreatedAt:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-12T15:28:06Z"); return t }()),
			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-12T15:30:01Z"); return t }()),
		},
		Properties: &armagrifood.FarmBeatsExtensionProperties{
			DetailedInformation: []*armagrifood.DetailedInformation{
				{
					APIInputParameters: []*string{
						to.Ptr("stationId"),
						to.Ptr("lat"),
						to.Ptr("lon"),
						to.Ptr("days"),
						to.Ptr("units"),
						to.Ptr("precision"),
						to.Ptr("sector")},
					APIName: to.Ptr("GetDailyObservations"),
					CustomParameters: []*string{
						to.Ptr("stationId"),
						to.Ptr("stationLatitude"),
						to.Ptr("stationLongitude"),
						to.Ptr("timeZone"),
						to.Ptr("sunrise"),
						to.Ptr("sunset"),
						to.Ptr("weatherCode"),
						to.Ptr("weatherDescription"),
						to.Ptr("maxTemperature"),
						to.Ptr("minTemperature"),
						to.Ptr("avgHeatIndex"),
						to.Ptr("maxHeatIndex"),
						to.Ptr("minHeatIndex"),
						to.Ptr("maxWindChill"),
						to.Ptr("minWindChill"),
						to.Ptr("maxFeelsLike"),
						to.Ptr("minFeelsLike"),
						to.Ptr("avgFeelsLike"),
						to.Ptr("maxWindSpeed"),
						to.Ptr("avgWetBulbGlobeTemp"),
						to.Ptr("maxWetBulbGlobeTemp"),
						to.Ptr("minWetBulbGlobeTemp"),
						to.Ptr("minutesOfSunshine"),
						to.Ptr("cornHeatUnit"),
						to.Ptr("evapotranspiration")},
					PlatformParameters: []*string{
						to.Ptr("cloudCover"),
						to.Ptr("dewPoint"),
						to.Ptr("growingDegreeDay"),
						to.Ptr("precipitation"),
						to.Ptr("pressure"),
						to.Ptr("relativeHumidity"),
						to.Ptr("temperature"),
						to.Ptr("wetBulbTemperature"),
						to.Ptr("dateTime"),
						to.Ptr("windChill"),
						to.Ptr("windSpeed"),
						to.Ptr("windDirection")},
					UnitsSupported: &armagrifood.UnitSystemsInfo{
						Key: to.Ptr("units"),
						Values: []*string{
							to.Ptr("us"),
							to.Ptr("si")},
					},
				},
				{
					APIInputParameters: []*string{
						to.Ptr("stationId"),
						to.Ptr("lat"),
						to.Ptr("lon"),
						to.Ptr("hours"),
						to.Ptr("units"),
						to.Ptr("precision"),
						to.Ptr("sector")},
					APIName: to.Ptr("GetHourlyObservations"),
					CustomParameters: []*string{
						to.Ptr("stationId"),
						to.Ptr("stationLatitude"),
						to.Ptr("stationLongitude"),
						to.Ptr("timeZone"),
						to.Ptr("weatherCode"),
						to.Ptr("weatherDescription"),
						to.Ptr("feelsLike"),
						to.Ptr("visibilityWeatherCode"),
						to.Ptr("visibilityWeatherDescription"),
						to.Ptr("minutesOfSunshine")},
					PlatformParameters: []*string{
						to.Ptr("cloudCover"),
						to.Ptr("dewPoint"),
						to.Ptr("precipitation"),
						to.Ptr("pressure"),
						to.Ptr("relativeHumidity"),
						to.Ptr("temperature"),
						to.Ptr("wetBulbTemperature"),
						to.Ptr("dateTime"),
						to.Ptr("visibility"),
						to.Ptr("windChill"),
						to.Ptr("windSpeed"),
						to.Ptr("windDirection"),
						to.Ptr("windGust")},
					UnitsSupported: &armagrifood.UnitSystemsInfo{
						Key: to.Ptr("units"),
						Values: []*string{
							to.Ptr("us"),
							to.Ptr("si")},
					},
				},
				{
					APIInputParameters: []*string{
						to.Ptr("stationId"),
						to.Ptr("lat"),
						to.Ptr("lon"),
						to.Ptr("days"),
						to.Ptr("units"),
						to.Ptr("precision"),
						to.Ptr("sector")},
					APIName: to.Ptr("GetHourlyForecasts"),
					CustomParameters: []*string{
						to.Ptr("stationId"),
						to.Ptr("stationLatitude"),
						to.Ptr("stationLongitude"),
						to.Ptr("timeZone"),
						to.Ptr("weatherCode"),
						to.Ptr("weatherDescription"),
						to.Ptr("feelsLike"),
						to.Ptr("visibilityWeatherCode"),
						to.Ptr("visibilityWeatherDescription"),
						to.Ptr("minutesOfSunshine")},
					PlatformParameters: []*string{
						to.Ptr("cloudCover"),
						to.Ptr("dewPoint"),
						to.Ptr("precipitation"),
						to.Ptr("pressure"),
						to.Ptr("relativeHumidity"),
						to.Ptr("temperature"),
						to.Ptr("wetBulbTemperature"),
						to.Ptr("dateTime"),
						to.Ptr("visibility"),
						to.Ptr("windChill"),
						to.Ptr("windSpeed"),
						to.Ptr("windDirection"),
						to.Ptr("windGust")},
					UnitsSupported: &armagrifood.UnitSystemsInfo{
						Key: to.Ptr("units"),
						Values: []*string{
							to.Ptr("us"),
							to.Ptr("si")},
					},
				},
				{
					APIInputParameters: []*string{
						to.Ptr("stationId"),
						to.Ptr("lat"),
						to.Ptr("lon"),
						to.Ptr("days"),
						to.Ptr("units"),
						to.Ptr("precision"),
						to.Ptr("sector")},
					APIName: to.Ptr("GetDailyForecasts"),
					CustomParameters: []*string{
						to.Ptr("stationId"),
						to.Ptr("stationLatitude"),
						to.Ptr("stationLongitude"),
						to.Ptr("timeZone"),
						to.Ptr("sunrise"),
						to.Ptr("sunset"),
						to.Ptr("weatherCode"),
						to.Ptr("weatherDescription"),
						to.Ptr("maxTemperature"),
						to.Ptr("minTemperature"),
						to.Ptr("avgHeatIndex"),
						to.Ptr("maxHeatIndex"),
						to.Ptr("minHeatIndex"),
						to.Ptr("maxWindChill"),
						to.Ptr("minWindChill"),
						to.Ptr("maxFeelsLike"),
						to.Ptr("minFeelsLike"),
						to.Ptr("avgFeelsLike"),
						to.Ptr("maxWindSpeed"),
						to.Ptr("avgWetBulbGlobeTemp"),
						to.Ptr("maxWetBulbGlobeTemp"),
						to.Ptr("minWetBulbGlobeTemp"),
						to.Ptr("minutesOfSunshine"),
						to.Ptr("cornHeatUnit"),
						to.Ptr("evapotranspiration")},
					PlatformParameters: []*string{
						to.Ptr("cloudCover"),
						to.Ptr("dewPoint"),
						to.Ptr("growingDegreeDay"),
						to.Ptr("precipitation"),
						to.Ptr("pressure"),
						to.Ptr("relativeHumidity"),
						to.Ptr("temperature"),
						to.Ptr("wetBulbTemperature"),
						to.Ptr("dateTime"),
						to.Ptr("windChill"),
						to.Ptr("windSpeed"),
						to.Ptr("windDirection")},
					UnitsSupported: &armagrifood.UnitSystemsInfo{
						Key: to.Ptr("units"),
						Values: []*string{
							to.Ptr("us"),
							to.Ptr("si")},
					},
				}},
			ExtensionAPIDocsLink:      to.Ptr("https://cs-docs.dtn.com/api/weather-observations-and-forecasts-rest-api/"),
			ExtensionAuthLink:         to.Ptr("https://www.dtn.com/dtn-content-integration/"),
			ExtensionCategory:         to.Ptr("Weather"),
			FarmBeatsExtensionID:      to.Ptr("DTN.ContentServices"),
			FarmBeatsExtensionName:    to.Ptr("DTN"),
			FarmBeatsExtensionVersion: to.Ptr("1.0"),
			PublisherID:               to.Ptr("dtn"),
			TargetResourceType:        to.Ptr("FarmBeats"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.FarmBeatsExtension) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.FarmBeatsExtension)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsExtensions_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestFarmBeatsModels_Get() {
	ctx := context.Background()
	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FarmBeatsModels_Get"},
	})
	client, err := armagrifood.NewFarmBeatsModelsClient("11111111-2222-3333-4444-555555555555", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx, "examples-rg", "examples-farmBeatsResourceName", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_Get.json")
	// Response check
	exampleRes := armagrifood.FarmBeats{
		Name: to.Ptr("examples-farmBeatsResourceName"),
		Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats"),
		ID:   to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName"),
		SystemData: &armagrifood.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.1075056Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armagrifood.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.1075056Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armagrifood.CreatedByTypeUser),
		},
		Location: to.Ptr("eastus2"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
			"key2": to.Ptr("value2"),
		},
		Properties: &armagrifood.FarmBeatsProperties{
			InstanceURI:       to.Ptr("https://examples-farmbeatsResourceName.eastus2.farmbeats.azure.net"),
			ProvisioningState: to.Ptr(armagrifood.ProvisioningStateSucceeded),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.FarmBeats) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.FarmBeats)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestFarmBeatsModels_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FarmBeatsModels_CreateOrUpdate"},
	})
	client, err := armagrifood.NewFarmBeatsModelsClient("11111111-2222-3333-4444-555555555555", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.CreateOrUpdate(ctx, "examples-rg", "examples-farmbeatsResourceName", armagrifood.FarmBeats{
		Location: to.Ptr("eastus2"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
			"key2": to.Ptr("value2"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_CreateOrUpdate.json")
	// Response check
	exampleRes := armagrifood.FarmBeats{
		Name: to.Ptr("examples-farmbeatsResourceName"),
		Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats"),
		ID:   to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName"),
		SystemData: &armagrifood.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.1075056Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armagrifood.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.1075056Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armagrifood.CreatedByTypeUser),
		},
		Location: to.Ptr("eastus2"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
			"key2": to.Ptr("value2"),
		},
		Properties: &armagrifood.FarmBeatsProperties{
			InstanceURI:       to.Ptr("https://examples-farmbeatsResourceName.eastus2.farmbeats.azure.net"),
			ProvisioningState: to.Ptr(armagrifood.ProvisioningStateSucceeded),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.FarmBeats) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.FarmBeats)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestFarmBeatsModels_Update() {
	ctx := context.Background()
	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FarmBeatsModels_Update"},
	})
	client, err := armagrifood.NewFarmBeatsModelsClient("11111111-2222-3333-4444-555555555555", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginUpdate(ctx, "examples-rg", "examples-farmBeatsResourceName", armagrifood.FarmBeatsUpdateRequestModel{
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
			"key2": to.Ptr("value2"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_Update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_Update.json")
	// Response check
	exampleRes := armagrifood.FarmBeats{
		Name: to.Ptr("examples-farmBeatsResourceName"),
		Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats"),
		ID:   to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName"),
		SystemData: &armagrifood.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.1075056Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armagrifood.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.1075056Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armagrifood.CreatedByTypeUser),
		},
		Location: to.Ptr("eastus2"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
			"key2": to.Ptr("value2"),
		},
		Properties: &armagrifood.FarmBeatsProperties{
			InstanceURI:       to.Ptr("https://examples-farmbeatsResourceName.eastus2.farmbeats.azure.net"),
			ProvisioningState: to.Ptr(armagrifood.ProvisioningStateSucceeded),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.FarmBeats) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.FarmBeats)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_UpdateWithSensor.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FarmBeatsModels_UpdateWithSensor"},
	})
	client, err = armagrifood.NewFarmBeatsModelsClient("11111111-2222-3333-4444-555555555555", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginUpdate(ctx, "examples-rg", "examples-farmBeatsResourceName", armagrifood.FarmBeatsUpdateRequestModel{
		Identity: &armagrifood.Identity{
			Type: to.Ptr("SystemAssigned"),
		},
		Properties: &armagrifood.FarmBeatsUpdateProperties{
			SensorIntegration: &armagrifood.SensorIntegration{
				Enabled: to.Ptr("True"),
			},
		},
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
			"key2": to.Ptr("value2"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_UpdateWithSensor.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_UpdateWithSensor.json")
	// Response check
	exampleRes = armagrifood.FarmBeats{
		Name: to.Ptr("examples-farmBeatsResourceName"),
		Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats"),
		ID:   to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName"),
		SystemData: &armagrifood.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.1075056Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armagrifood.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.1075056Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armagrifood.CreatedByTypeUser),
		},
		Location: to.Ptr("eastus2"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
			"key2": to.Ptr("value2"),
		},
		Identity: &armagrifood.Identity{
			Type:     to.Ptr("SystemAssigned"),
			TenantID: to.Ptr("abcdefgh-86f1-41af-91ab-2d7cd011db47"),
		},
		Properties: &armagrifood.FarmBeatsProperties{
			InstanceURI:       to.Ptr("https://examples-farmbeatsResourceName.eastus2.farmbeats.azure.net"),
			ProvisioningState: to.Ptr(armagrifood.ProvisioningStateSucceeded),
			SensorIntegration: &armagrifood.SensorIntegration{
				Enabled:           to.Ptr("True"),
				ProvisioningState: to.Ptr(armagrifood.ProvisioningStateSucceeded),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.FarmBeats) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.FarmBeats)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_UpdateWithSensor.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestFarmBeatsModels_Delete() {
	ctx := context.Background()
	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FarmBeatsModels_Delete"},
	})
	client, err := armagrifood.NewFarmBeatsModelsClient("11111111-2222-3333-4444-555555555555", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	_, err = client.Delete(ctx, "examples-rg", "examples-farmBeatsResourceName", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_Delete.json")
}

func (testsuite *MockTestSuite) TestFarmBeatsModels_ListBySubscription() {
	ctx := context.Background()
	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FarmBeatsModels_ListBySubscription"},
	})
	client, err := armagrifood.NewFarmBeatsModelsClient("11111111-2222-3333-4444-555555555555", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListBySubscriptionPager(&armagrifood.FarmBeatsModelsClientListBySubscriptionOptions{MaxPageSize: nil,
		SkipToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_ListBySubscription.json")
		// Response check
		pagerExampleRes := armagrifood.FarmBeatsListResponse{
			Value: []*armagrifood.FarmBeats{
				{
					Name: to.Ptr("examples-farmBeatsResourceName"),
					Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats"),
					ID:   to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName"),
					SystemData: &armagrifood.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.1075056Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armagrifood.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.1075056Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armagrifood.CreatedByTypeUser),
					},
					Location: to.Ptr("eastus2"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armagrifood.FarmBeatsProperties{
						InstanceURI:       to.Ptr("https://examples-farmbeatsResourceName.eastus2.farmbeats.azure.net"),
						ProvisioningState: to.Ptr(armagrifood.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FarmBeatsListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FarmBeatsListResponse)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestFarmBeatsModels_ListByResourceGroup() {
	ctx := context.Background()
	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FarmBeatsModels_ListByResourceGroup"},
	})
	client, err := armagrifood.NewFarmBeatsModelsClient("11111111-2222-3333-4444-555555555555", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListByResourceGroupPager("examples-rg", &armagrifood.FarmBeatsModelsClientListByResourceGroupOptions{MaxPageSize: nil,
		SkipToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_ListByResourceGroup.json")
		// Response check
		pagerExampleRes := armagrifood.FarmBeatsListResponse{
			Value: []*armagrifood.FarmBeats{
				{
					Name: to.Ptr("examples-farmBeatsResourceName"),
					Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats"),
					ID:   to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName"),
					SystemData: &armagrifood.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.1075056Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armagrifood.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.1075056Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armagrifood.CreatedByTypeUser),
					},
					Location: to.Ptr("eastus2"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armagrifood.FarmBeatsProperties{
						InstanceURI:       to.Ptr("https://examples-farmbeatsResourceName.eastus2.farmbeats.azure.net"),
						ProvisioningState: to.Ptr(armagrifood.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FarmBeatsListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FarmBeatsListResponse)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestFarmBeatsModels_GetOperationResult() {
	ctx := context.Background()
	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_GetOperationResult.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FarmBeatsModels_GetOperationResult"},
	})
	client, err := armagrifood.NewFarmBeatsModelsClient("11111111-2222-3333-4444-555555555555", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.GetOperationResult(ctx, "examples-rg", "examples-farmBeatsResourceName", "resource-provisioning-id-farmBeatsResourceName", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_GetOperationResult.json")
	// Response check
	exampleRes := armagrifood.ArmAsyncOperation{
		Status: to.Ptr("Succeeded"),
	}
	if !reflect.DeepEqual(exampleRes, res.ArmAsyncOperation) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ArmAsyncOperation)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/FarmBeatsModels_GetOperationResult.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestLocations_CheckNameAvailability() {
	ctx := context.Background()
	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Locations_CheckNameAvailability_AlreadyExists.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Locations_CheckNameAvailability_AlreadyExists"},
	})
	client, err := armagrifood.NewLocationsClient("11111111-2222-3333-4444-555555555555", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.CheckNameAvailability(ctx, armagrifood.CheckNameAvailabilityRequest{
		Name: to.Ptr("existingaccountname"),
		Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats"),
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Locations_CheckNameAvailability_AlreadyExists.json")
	// Response check
	exampleRes := armagrifood.CheckNameAvailabilityResponse{
		Message:       to.Ptr("An account named 'existingaccountname' is already in use."),
		NameAvailable: to.Ptr(false),
		Reason:        to.Ptr(armagrifood.CheckNameAvailabilityReasonAlreadyExists),
	}
	if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResponse) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResponse)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Locations_CheckNameAvailability_AlreadyExists.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Locations_CheckNameAvailability_Available.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Locations_CheckNameAvailability_Available"},
	})
	client, err = armagrifood.NewLocationsClient("11111111-2222-3333-4444-555555555555", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err = client.CheckNameAvailability(ctx, armagrifood.CheckNameAvailabilityRequest{
		Name: to.Ptr("newaccountname"),
		Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats"),
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Locations_CheckNameAvailability_Available.json")
	// Response check
	exampleRes = armagrifood.CheckNameAvailabilityResponse{
		NameAvailable: to.Ptr(true),
	}
	if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResponse) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResponse)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Locations_CheckNameAvailability_Available.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestOperations_List() {
	ctx := context.Background()
	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})
	client, err := armagrifood.NewOperationsClient(testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Operations_List.json")
		// Response check
		pagerExampleRes := armagrifood.OperationListResult{
			Value: []*armagrifood.Operation{
				{
					Name: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/read"),
					Display: &armagrifood.OperationDisplay{
						Description: to.Ptr("Gets or Lists existing AgFoodPlatform FarmBeats resource(s)."),
						Operation:   to.Ptr("Get or List AgFoodPlatform FarmBeats resource(s)."),
						Provider:    to.Ptr("Microsoft AgFoodPlatform"),
						Resource:    to.Ptr("AgFoodPlatform FarmBeats"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/write"),
					Display: &armagrifood.OperationDisplay{
						Description: to.Ptr("Creates or Updates AgFoodPlatform FarmBeats."),
						Operation:   to.Ptr("Create or Update AgFoodPlatform FarmBeats."),
						Provider:    to.Ptr("Microsoft AgFoodPlatform"),
						Resource:    to.Ptr("AgFoodPlatform FarmBeats"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/delete"),
					Display: &armagrifood.OperationDisplay{
						Description: to.Ptr("Deletes an existing AgFoodPlatform FarmBeats resource."),
						Operation:   to.Ptr("Delete AgFoodPlatform FarmBeats resource."),
						Provider:    to.Ptr("Microsoft AgFoodPlatform"),
						Resource:    to.Ptr("AgFoodPlatform FarmBeats"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AgFoodPlatform/locations/checkNameAvailability/action"),
					Display: &armagrifood.OperationDisplay{
						Description: to.Ptr("Checks that resource name is valid and is not in use."),
						Operation:   to.Ptr("Check Name Availability"),
						Provider:    to.Ptr("Microsoft AgFoodPlatform"),
						Resource:    to.Ptr("Locations"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AgFoodPlatform/operations/read"),
					Display: &armagrifood.OperationDisplay{
						Description: to.Ptr("List all operations in Microsoft AgFoodPlatform resource provider."),
						Operation:   to.Ptr("List all operations."),
						Provider:    to.Ptr("Microsoft AgFoodPlatform"),
						Resource:    to.Ptr("List all operations in Microsoft AgFoodPlatform resource provider."),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/extensions/read"),
					Display: &armagrifood.OperationDisplay{
						Description: to.Ptr("Gets or Lists existing AgFoodPlatform Extensions resource(s)."),
						Operation:   to.Ptr("Get or List AgFoodPlatform Extensions resource(s)."),
						Provider:    to.Ptr("Microsoft AgFoodPlatform"),
						Resource:    to.Ptr("AgFoodPlatform Extensions"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/extensions/write"),
					Display: &armagrifood.OperationDisplay{
						Description: to.Ptr("Creates or Updates AgFoodPlatform Extensions."),
						Operation:   to.Ptr("Create or Update AgFoodPlatform Extensions."),
						Provider:    to.Ptr("Microsoft AgFoodPlatform"),
						Resource:    to.Ptr("AgFoodPlatform Extensions"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/extensions/delete"),
					Display: &armagrifood.OperationDisplay{
						Description: to.Ptr("Deletes an existing AgFoodPlatform Extensions resource."),
						Operation:   to.Ptr("Delete AgFoodPlatform Extensions resource."),
						Provider:    to.Ptr("Microsoft AgFoodPlatform"),
						Resource:    to.Ptr("AgFoodPlatform Extensions"),
					},
					IsDataAction: to.Ptr(false),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestPrivateEndpointConnections_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateEndpointConnections_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_CreateOrUpdate"},
	})
	client, err := armagrifood.NewPrivateEndpointConnectionsClient("11111111-2222-3333-4444-555555555555", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.CreateOrUpdate(ctx, "examples-rg", "examples-farmbeatsResourceName", "privateEndpointConnectionName", armagrifood.PrivateEndpointConnection{
		Properties: &armagrifood.PrivateEndpointConnectionProperties{
			PrivateLinkServiceConnectionState: &armagrifood.PrivateLinkServiceConnectionState{
				Description: to.Ptr("Approved by johndoe@contoso.com"),
				Status:      to.Ptr(armagrifood.PrivateEndpointServiceConnectionStatusApproved),
			},
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateEndpointConnections_CreateOrUpdate.json")
	// Response check
	exampleRes := armagrifood.PrivateEndpointConnection{
		Name: to.Ptr("privateEndpointConnectionName"),
		Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/privateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/providers/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName/privateEndpointConnections/privateEndpointConnectionName"),
		Properties: &armagrifood.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &armagrifood.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/rg1Network/providers/Microsoft.Network/privateEndpoints/privateEndpointName"),
			},
			PrivateLinkServiceConnectionState: &armagrifood.PrivateLinkServiceConnectionState{
				Description:     to.Ptr("Approved by johndoe@contoso.com"),
				ActionsRequired: to.Ptr("None"),
				Status:          to.Ptr(armagrifood.PrivateEndpointServiceConnectionStatusApproved),
			},
			ProvisioningState: to.Ptr(armagrifood.PrivateEndpointConnectionProvisioningStateSucceeded),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateEndpointConnections_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestPrivateEndpointConnections_Get() {
	ctx := context.Background()
	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateEndpointConnections_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_Get"},
	})
	client, err := armagrifood.NewPrivateEndpointConnectionsClient("11111111-2222-3333-4444-555555555555", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx, "examples-rg", "examples-farmbeatsResourceName", "privateEndpointConnectionName", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateEndpointConnections_Get.json")
	// Response check
	exampleRes := armagrifood.PrivateEndpointConnection{
		Name: to.Ptr("privateEndpointConnectionName"),
		Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/privateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/providers/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName/privateEndpointConnections/privateEndpointConnectionName"),
		Properties: &armagrifood.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &armagrifood.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/rg1Network/providers/Microsoft.Network/privateEndpoints/privateEndpointName"),
			},
			PrivateLinkServiceConnectionState: &armagrifood.PrivateLinkServiceConnectionState{
				Description:     to.Ptr("Approved by johndoe@contoso.com"),
				ActionsRequired: to.Ptr("None"),
				Status:          to.Ptr(armagrifood.PrivateEndpointServiceConnectionStatusApproved),
			},
			ProvisioningState: to.Ptr(armagrifood.PrivateEndpointConnectionProvisioningStateSucceeded),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateEndpointConnections_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestPrivateEndpointConnections_Delete() {
	ctx := context.Background()
	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateEndpointConnections_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_Delete"},
	})
	client, err := armagrifood.NewPrivateEndpointConnectionsClient("11111111-2222-3333-4444-555555555555", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx, "examples-rg", "examples-farmbeatsResourceName", "privateEndpointConnectionName", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateEndpointConnections_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateEndpointConnections_Delete.json")
}

func (testsuite *MockTestSuite) TestPrivateEndpointConnections_ListByResource() {
	ctx := context.Background()
	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateEndpointConnections_ListByResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_ListByResource"},
	})
	client, err := armagrifood.NewPrivateEndpointConnectionsClient("11111111-2222-3333-4444-555555555555", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListByResourcePager("examples-rg", "examples-farmbeatsResourceName", nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateEndpointConnections_ListByResource.json")
		// Response check
		pagerExampleRes := armagrifood.PrivateEndpointConnectionListResult{
			Value: []*armagrifood.PrivateEndpointConnection{
				{
					Name: to.Ptr("privateEndpointConnectionName"),
					Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/providers/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName/privateEndpointConnections/privateEndpointConnectionName"),
					Properties: &armagrifood.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armagrifood.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/rg1Network/providers/Microsoft.Network/privateEndpoints/privateEndpointName"),
						},
						PrivateLinkServiceConnectionState: &armagrifood.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Approved by johndoe@contoso.com"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armagrifood.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armagrifood.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("privateEndpointConnectionName2"),
					Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/providers/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName/privateEndpointConnections/privateEndpointConnectionName2"),
					Properties: &armagrifood.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armagrifood.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/rg1Network/providers/Microsoft.Network/privateEndpoints/privateEndpointName2"),
						},
						PrivateLinkServiceConnectionState: &armagrifood.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Approved by johndoe@contoso.com"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armagrifood.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armagrifood.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateEndpointConnections_ListByResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestPrivateLinkResources_ListByResource() {
	ctx := context.Background()
	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateLinkResources_ListByResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_ListByResource"},
	})
	client, err := armagrifood.NewPrivateLinkResourcesClient("11111111-2222-3333-4444-555555555555", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListByResourcePager("examples-rg", "examples-farmbeatsResourceName", nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateLinkResources_ListByResource.json")
		// Response check
		pagerExampleRes := armagrifood.PrivateLinkResourceListResult{
			Value: []*armagrifood.PrivateLinkResource{
				{
					Name: to.Ptr("farmbeats"),
					Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/privateLinkResources"),
					ID:   to.Ptr("subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/providers/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName/privateLinkResources/farmbeats"),
					Properties: &armagrifood.PrivateLinkResourceProperties{
						GroupID: to.Ptr("farmbeats"),
						RequiredMembers: []*string{
							to.Ptr("farmbeats")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.farmbeats.azure.net")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkResourceListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateLinkResources_ListByResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestPrivateLinkResources_Get() {
	ctx := context.Background()
	// From example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateLinkResources_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_Get"},
	})
	client, err := armagrifood.NewPrivateLinkResourcesClient("11111111-2222-3333-4444-555555555555", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx, "examples-rg", "examples-farmbeatsResourceName", "farmbeats", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateLinkResources_Get.json")
	// Response check
	exampleRes := armagrifood.PrivateLinkResource{
		Name: to.Ptr("farmbeats"),
		Type: to.Ptr("Microsoft.AgFoodPlatform/farmBeats/privateLinkResources"),
		ID:   to.Ptr("subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/examples-rg/providers/Microsoft.AgFoodPlatform/farmBeats/examples-farmbeatsResourceName/privateLinkResources/farmbeats"),
		Properties: &armagrifood.PrivateLinkResourceProperties{
			GroupID: to.Ptr("farmbeats"),
			RequiredMembers: []*string{
				to.Ptr("farmbeats")},
			RequiredZoneNames: []*string{
				to.Ptr("privatelink.farmbeats.azure.net")},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.PrivateLinkResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.PrivateLinkResource)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/agrifood/resource-manager/Microsoft.AgFoodPlatform/preview/2021-09-01-preview/examples/PrivateLinkResources_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}
