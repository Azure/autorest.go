//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armappplatform_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/appplatform/armappplatform/v2"
)

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/main/specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_Get.json
func ExampleMonitoringSettingsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client, err := armappplatform.NewMonitoringSettingsClient("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx, "myResourceGroup", "myservice", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// TODO: use response
	_ = res
	// If HTTP returns as the '200' response defined in example definition, response struct should like:
	// res.MonitoringSettingResource = armappplatform.MonitoringSettingResource{
	// 	Name: to.Ptr("default"),
	// 	Type: to.Ptr("Microsoft.AppPlatform/Spring/monitoringSettings"),
	// 	ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/monitoringSettings/default"),
	// 	Properties: &armappplatform.MonitoringSettingProperties{
	// 		AppInsightsAgentVersions: &armappplatform.ApplicationInsightsAgentVersions{
	// 			Java: to.Ptr("3.0.0"),
	// 		},
	// 		AppInsightsInstrumentationKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
	// 		AppInsightsSamplingRate: to.Ptr[float64](10),
	// 		ProvisioningState: to.Ptr(armappplatform.MonitoringSettingStateSucceeded),
	// 		TraceEnabled: to.Ptr(true),
	// 	},
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/main/specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_UpdatePut.json
func ExampleMonitoringSettingsClient_BeginUpdatePut() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client, err := armappplatform.NewMonitoringSettingsClient("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdatePut(ctx, "myResourceGroup", "myservice", armappplatform.MonitoringSettingResource{
		Properties: &armappplatform.MonitoringSettingProperties{
			AppInsightsInstrumentationKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
			AppInsightsSamplingRate:       to.Ptr[float64](10),
			TraceEnabled:                  to.Ptr(true),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// TODO: use response
	_ = res
	// If HTTP returns as the '200' response defined in example definition, response struct should like:
	// res.MonitoringSettingResource = armappplatform.MonitoringSettingResource{
	// 	Name: to.Ptr("default"),
	// 	Type: to.Ptr("Microsoft.AppPlatform/Spring/monitoringSettings"),
	// 	ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/monitoringSettings/default"),
	// 	Properties: &armappplatform.MonitoringSettingProperties{
	// 		AppInsightsAgentVersions: &armappplatform.ApplicationInsightsAgentVersions{
	// 			Java: to.Ptr("3.0.0"),
	// 		},
	// 		AppInsightsInstrumentationKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
	// 		AppInsightsSamplingRate: to.Ptr[float64](10),
	// 		ProvisioningState: to.Ptr(armappplatform.MonitoringSettingStateSucceeded),
	// 		TraceEnabled: to.Ptr(true),
	// 	},
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/main/specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_UpdatePatch.json
func ExampleMonitoringSettingsClient_BeginUpdatePatch() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client, err := armappplatform.NewMonitoringSettingsClient("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdatePatch(ctx, "myResourceGroup", "myservice", armappplatform.MonitoringSettingResource{
		Properties: &armappplatform.MonitoringSettingProperties{
			AppInsightsInstrumentationKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
			AppInsightsSamplingRate:       to.Ptr[float64](10),
			TraceEnabled:                  to.Ptr(true),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// TODO: use response
	_ = res
	// If HTTP returns as the '200' response defined in example definition, response struct should like:
	// res.MonitoringSettingResource = armappplatform.MonitoringSettingResource{
	// 	Name: to.Ptr("default"),
	// 	Type: to.Ptr("Microsoft.AppPlatform/Spring/monitoringSettings"),
	// 	ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/monitoringSettings/default"),
	// 	Properties: &armappplatform.MonitoringSettingProperties{
	// 		AppInsightsAgentVersions: &armappplatform.ApplicationInsightsAgentVersions{
	// 			Java: to.Ptr("3.0.0"),
	// 		},
	// 		AppInsightsInstrumentationKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
	// 		AppInsightsSamplingRate: to.Ptr[float64](10),
	// 		ProvisioningState: to.Ptr(armappplatform.MonitoringSettingStateSucceeded),
	// 		TraceEnabled: to.Ptr(true),
	// 	},
	// }
}
