//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappplatform_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/appplatform/armappplatform/v2"
)

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_Get.json
func ExampleConfigServersClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client, err := armappplatform.NewConfigServersClient("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx, "myResourceGroup", "myservice", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// TODO: use response item
	_ = res
	// For example, response struct should like:
	// res.ConfigServerResource = armappplatform.ConfigServerResource{
	// 	Name: to.Ptr("default"),
	// 	Type: to.Ptr("Microsoft.AppPlatform/Spring/configServers"),
	// 	ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/configServers/default"),
	// 	Properties: &armappplatform.ConfigServerProperties{
	// 		ConfigServer: &armappplatform.ConfigServerSettings{
	// 			GitProperty: &armappplatform.ConfigServerGitProperty{
	// 				Label: to.Ptr("master"),
	// 				SearchPaths: []*string{
	// 					to.Ptr("/")},
	// 					URI: to.Ptr("https://github.com/fake-user/fake-repository.git"),
	// 				},
	// 			},
	// 			ProvisioningState: to.Ptr(armappplatform.ConfigServerStateSucceeded),
	// 		},
	// 	}
	// with the raw JSON response:
	// {
	// 	"name": "default",
	// 	"type": "Microsoft.AppPlatform/Spring/configServers",
	// 	"id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/configServers/default",
	// 	"properties": {
	// 		"configServer": {
	// 			"gitProperty": {
	// 				"label": "master",
	// 				"searchPaths": [
	// 					"/"
	// 				],
	// 				"uri": "https://github.com/fake-user/fake-repository.git"
	// 			}
	// 		},
	// 		"provisioningState": "Succeeded"
	// 	}
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_UpdatePut.json
func ExampleConfigServersClient_BeginUpdatePut() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client, err := armappplatform.NewConfigServersClient("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdatePut(ctx, "myResourceGroup", "myservice", armappplatform.ConfigServerResource{
		Properties: &armappplatform.ConfigServerProperties{
			ConfigServer: &armappplatform.ConfigServerSettings{
				GitProperty: &armappplatform.ConfigServerGitProperty{
					Label: to.Ptr("master"),
					SearchPaths: []*string{
						to.Ptr("/")},
					URI: to.Ptr("https://github.com/fake-user/fake-repository.git"),
				},
			},
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// TODO: use response item
	_ = res
	// For example, response struct should like:
	// res.ConfigServerResource = armappplatform.ConfigServerResource{
	// 	Name: to.Ptr("default"),
	// 	Type: to.Ptr("Microsoft.AppPlatform/Spring/configServers"),
	// 	ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/configServers/default"),
	// 	Properties: &armappplatform.ConfigServerProperties{
	// 		ConfigServer: &armappplatform.ConfigServerSettings{
	// 			GitProperty: &armappplatform.ConfigServerGitProperty{
	// 				Label: to.Ptr("master"),
	// 				SearchPaths: []*string{
	// 					to.Ptr("/")},
	// 					URI: to.Ptr("https://github.com/fake-user/fake-repository.git"),
	// 				},
	// 			},
	// 			ProvisioningState: to.Ptr(armappplatform.ConfigServerStateSucceeded),
	// 		},
	// 	}
	// with the raw JSON response:
	// {
	// 	"name": "default",
	// 	"type": "Microsoft.AppPlatform/Spring/configServers",
	// 	"id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/configServers/default",
	// 	"properties": {
	// 		"configServer": {
	// 			"gitProperty": {
	// 				"label": "master",
	// 				"searchPaths": [
	// 					"/"
	// 				],
	// 				"uri": "https://github.com/fake-user/fake-repository.git"
	// 			}
	// 		},
	// 		"provisioningState": "Succeeded"
	// 	}
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_UpdatePatch.json
func ExampleConfigServersClient_BeginUpdatePatch() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client, err := armappplatform.NewConfigServersClient("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdatePatch(ctx, "myResourceGroup", "myservice", armappplatform.ConfigServerResource{
		Properties: &armappplatform.ConfigServerProperties{
			ConfigServer: &armappplatform.ConfigServerSettings{
				GitProperty: &armappplatform.ConfigServerGitProperty{
					Label: to.Ptr("master"),
					SearchPaths: []*string{
						to.Ptr("/")},
					URI: to.Ptr("https://github.com/fake-user/fake-repository.git"),
				},
			},
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// TODO: use response item
	_ = res
	// For example, response struct should like:
	// res.ConfigServerResource = armappplatform.ConfigServerResource{
	// 	Name: to.Ptr("default"),
	// 	Type: to.Ptr("Microsoft.AppPlatform/Spring/configServers"),
	// 	ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/configServers/default"),
	// 	Properties: &armappplatform.ConfigServerProperties{
	// 		ConfigServer: &armappplatform.ConfigServerSettings{
	// 			GitProperty: &armappplatform.ConfigServerGitProperty{
	// 				Label: to.Ptr("master"),
	// 				SearchPaths: []*string{
	// 					to.Ptr("/")},
	// 					URI: to.Ptr("https://github.com/fake-user/fake-repository.git"),
	// 				},
	// 			},
	// 			ProvisioningState: to.Ptr(armappplatform.ConfigServerStateSucceeded),
	// 		},
	// 	}
	// with the raw JSON response:
	// {
	// 	"name": "default",
	// 	"type": "Microsoft.AppPlatform/Spring/configServers",
	// 	"id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/configServers/default",
	// 	"properties": {
	// 		"configServer": {
	// 			"gitProperty": {
	// 				"label": "master",
	// 				"searchPaths": [
	// 					"/"
	// 				],
	// 				"uri": "https://github.com/fake-user/fake-repository.git"
	// 			}
	// 		},
	// 		"provisioningState": "Succeeded"
	// 	}
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_Validate.json
func ExampleConfigServersClient_BeginValidate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client, err := armappplatform.NewConfigServersClient("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginValidate(ctx, "myResourceGroup", "myservice", armappplatform.ConfigServerSettings{
		GitProperty: &armappplatform.ConfigServerGitProperty{
			Label: to.Ptr("master"),
			SearchPaths: []*string{
				to.Ptr("/")},
			URI: to.Ptr("https://github.com/fake-user/fake-repository.git"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// TODO: use response item
	_ = res
	// For example, response struct should like:
	// res.ConfigServerSettingsValidateResult = armappplatform.ConfigServerSettingsValidateResult{
	// 	IsValid: to.Ptr(true),
	// }
	// with the raw JSON response:
	// {
	// 	"isValid": true
	// }
}
