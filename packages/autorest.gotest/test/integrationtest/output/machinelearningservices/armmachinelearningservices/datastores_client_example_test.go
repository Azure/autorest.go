//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmachinelearningservices_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/machinelearningservices/armmachinelearningservices"
)

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/list.json
func ExampleDatastoresClient_NewListPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client, err := armmachinelearningservices.NewDatastoresClient("00000000-1111-2222-3333-444444444444", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager("test-rg", "my-aml-workspace", &armmachinelearningservices.DatastoresClientListOptions{Skip: nil,
		Count:     to.Ptr[int32](1),
		IsDefault: to.Ptr(false),
		Names: []string{
			"string"},
		SearchText: to.Ptr("string"),
		OrderBy:    to.Ptr("string"),
		OrderByAsc: to.Ptr(false),
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range nextResult.Value {
			// TODO: use page item
			_ = v
		}
		// For example, nextResult struct should like:
		// nextResult.DatastoreResourceArmPaginatedResult = armmachinelearningservices.DatastoreResourceArmPaginatedResult{
		// 	Value: []*armmachinelearningservices.DatastoreData{
		// 		{
		// 			Name: to.Ptr("string"),
		// 			Type: to.Ptr("string"),
		// 			ID: to.Ptr("string"),
		// 			SystemData: &armmachinelearningservices.SystemData{
		// 				CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t}()),
		// 				CreatedBy: to.Ptr("string"),
		// 				CreatedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		// 				LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t}()),
		// 				LastModifiedBy: to.Ptr("string"),
		// 				LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		// 			},
		// 			Properties: &armmachinelearningservices.AzureBlobDatastore{
		// 				Description: to.Ptr("string"),
		// 				Tags: map[string]*string{
		// 					"string": to.Ptr("string"),
		// 				},
		// 				Credentials: &armmachinelearningservices.AccountKeyDatastoreCredentials{
		// 					CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeAccountKey),
		// 				},
		// 				DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureBlob),
		// 				IsDefault: to.Ptr(false),
		// 				AccountName: to.Ptr("string"),
		// 				ContainerName: to.Ptr("string"),
		// 				Endpoint: to.Ptr("core.windows.net"),
		// 				Protocol: to.Ptr("https"),
		// 			},
		// 	}},
		// }
		// with the raw JSON response:
		// {
		// 	"nextLink": "string",
		// 	"value": [
		// 		{
		// 			"name": "string",
		// 			"type": "string",
		// 			"id": "string",
		// 			"properties": {
		// 				"description": "string",
		// 				"accountName": "string",
		// 				"containerName": "string",
		// 				"credentials": {
		// 					"credentialsType": "AccountKey"
		// 				},
		// 				"datastoreType": "AzureBlob",
		// 				"endpoint": "core.windows.net",
		// 				"isDefault": false,
		// 				"properties": null,
		// 				"tags": {
		// 					"string": "string"
		// 				},
		// 				"protocol": "https"
		// 			},
		// 			"systemData": {
		// 				"createdAt": "2020-01-01T12:34:56.999Z",
		// 				"createdBy": "string",
		// 				"createdByType": "User",
		// 				"lastModifiedAt": "2020-01-01T12:34:56.999Z",
		// 				"lastModifiedBy": "string",
		// 				"lastModifiedByType": "User"
		// 			}
		// 		}
		// 	]
		// }
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/delete.json
func ExampleDatastoresClient_Delete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client, err := armmachinelearningservices.NewDatastoresClient("00000000-1111-2222-3333-444444444444", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = client.Delete(ctx, "test-rg", "my-aml-workspace", "string", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/get.json
func ExampleDatastoresClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client, err := armmachinelearningservices.NewDatastoresClient("00000000-1111-2222-3333-444444444444", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx, "test-rg", "my-aml-workspace", "string", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// TODO: use response item
	_ = res
	// For example, response struct should like:
	// res.DatastoreData = armmachinelearningservices.DatastoreData{
	// 	Name: to.Ptr("string"),
	// 	Type: to.Ptr("string"),
	// 	ID: to.Ptr("string"),
	// 	SystemData: &armmachinelearningservices.SystemData{
	// 		CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t}()),
	// 		CreatedBy: to.Ptr("string"),
	// 		CreatedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
	// 		LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t}()),
	// 		LastModifiedBy: to.Ptr("string"),
	// 		LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
	// 	},
	// 	Properties: &armmachinelearningservices.AzureBlobDatastore{
	// 		Description: to.Ptr("string"),
	// 		Tags: map[string]*string{
	// 			"string": to.Ptr("string"),
	// 		},
	// 		Credentials: &armmachinelearningservices.AccountKeyDatastoreCredentials{
	// 			CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeAccountKey),
	// 		},
	// 		DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureBlob),
	// 		IsDefault: to.Ptr(false),
	// 		AccountName: to.Ptr("string"),
	// 		ContainerName: to.Ptr("string"),
	// 		Endpoint: to.Ptr("core.windows.net"),
	// 		Protocol: to.Ptr("https"),
	// 	},
	// }
	// with the raw JSON response:
	// {
	// 	"name": "string",
	// 	"type": "string",
	// 	"id": "string",
	// 	"properties": {
	// 		"description": "string",
	// 		"accountName": "string",
	// 		"containerName": "string",
	// 		"credentials": {
	// 			"credentialsType": "AccountKey"
	// 		},
	// 		"datastoreType": "AzureBlob",
	// 		"endpoint": "core.windows.net",
	// 		"isDefault": false,
	// 		"properties": null,
	// 		"tags": {
	// 			"string": "string"
	// 		},
	// 		"protocol": "https"
	// 	},
	// 	"systemData": {
	// 		"createdAt": "2020-01-01T12:34:56.999Z",
	// 		"createdBy": "string",
	// 		"createdByType": "User",
	// 		"lastModifiedAt": "2020-01-01T12:34:56.999Z",
	// 		"lastModifiedBy": "string",
	// 		"lastModifiedByType": "User"
	// 	}
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/AzureDataLakeGen1WServicePrincipal/createOrUpdate.json
func ExampleDatastoresClient_CreateOrUpdate_createOrUpdateDatastoreAzureDataLakeGen1WServicePrincipal() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client, err := armmachinelearningservices.NewDatastoresClient("00000000-1111-2222-3333-444444444444", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.CreateOrUpdate(ctx, "test-rg", "my-aml-workspace", "string", armmachinelearningservices.DatastoreData{
		Properties: &armmachinelearningservices.AzureDataLakeGen1Datastore{
			Description: to.Ptr("string"),
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			Credentials: &armmachinelearningservices.ServicePrincipalDatastoreCredentials{
				CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeServicePrincipal),
				AuthorityURL:    to.Ptr("string"),
				ClientID:        to.Ptr("00000000-1111-2222-3333-444444444444"),
				ResourceURL:     to.Ptr("string"),
				Secrets: &armmachinelearningservices.ServicePrincipalDatastoreSecrets{
					SecretsType:  to.Ptr(armmachinelearningservices.SecretsTypeServicePrincipal),
					ClientSecret: to.Ptr("string"),
				},
				TenantID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			},
			DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureDataLakeGen1),
			StoreName:     to.Ptr("string"),
		},
	}, &armmachinelearningservices.DatastoresClientCreateOrUpdateOptions{SkipValidation: to.Ptr(false)})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// TODO: use response item
	_ = res
	// For example, response struct should like:
	// res.DatastoreData = armmachinelearningservices.DatastoreData{
	// 	Name: to.Ptr("string"),
	// 	Type: to.Ptr("string"),
	// 	ID: to.Ptr("string"),
	// 	SystemData: &armmachinelearningservices.SystemData{
	// 		CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t}()),
	// 		CreatedBy: to.Ptr("string"),
	// 		CreatedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
	// 		LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t}()),
	// 		LastModifiedBy: to.Ptr("string"),
	// 		LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
	// 	},
	// 	Properties: &armmachinelearningservices.AzureDataLakeGen1Datastore{
	// 		Description: to.Ptr("string"),
	// 		Tags: map[string]*string{
	// 			"string": to.Ptr("string"),
	// 		},
	// 		Credentials: &armmachinelearningservices.ServicePrincipalDatastoreCredentials{
	// 			CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeServicePrincipal),
	// 			AuthorityURL: to.Ptr("string"),
	// 			ClientID: to.Ptr("00000000-1111-2222-3333-444444444444"),
	// 			ResourceURL: to.Ptr("string"),
	// 			TenantID: to.Ptr("00000000-1111-2222-3333-444444444444"),
	// 		},
	// 		DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureDataLakeGen1),
	// 		StoreName: to.Ptr("string"),
	// 	},
	// }
	// with the raw JSON response:
	// {
	// 	"name": "string",
	// 	"type": "string",
	// 	"id": "string",
	// 	"properties": {
	// 		"description": "string",
	// 		"credentials": {
	// 			"authorityUrl": "string",
	// 			"clientId": "00000000-1111-2222-3333-444444444444",
	// 			"credentialsType": "ServicePrincipal",
	// 			"resourceUrl": "string",
	// 			"tenantId": "00000000-1111-2222-3333-444444444444"
	// 		},
	// 		"datastoreType": "AzureDataLakeGen1",
	// 		"properties": null,
	// 		"storeName": "string",
	// 		"tags": {
	// 			"string": "string"
	// 		}
	// 	},
	// 	"systemData": {
	// 		"createdAt": "2020-01-01T12:34:56.999Z",
	// 		"createdBy": "string",
	// 		"createdByType": "User",
	// 		"lastModifiedAt": "2020-01-01T12:34:56.999Z",
	// 		"lastModifiedBy": "string",
	// 		"lastModifiedByType": "User"
	// 	}
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/AzureDataLakeGen2WServicePrincipal/createOrUpdate.json
func ExampleDatastoresClient_CreateOrUpdate_createOrUpdateDatastoreAzureDataLakeGen2WServicePrincipal() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client, err := armmachinelearningservices.NewDatastoresClient("00000000-1111-2222-3333-444444444444", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.CreateOrUpdate(ctx, "test-rg", "my-aml-workspace", "string", armmachinelearningservices.DatastoreData{
		Properties: &armmachinelearningservices.AzureDataLakeGen2Datastore{
			Description: to.Ptr("string"),
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			Credentials: &armmachinelearningservices.ServicePrincipalDatastoreCredentials{
				CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeServicePrincipal),
				AuthorityURL:    to.Ptr("string"),
				ClientID:        to.Ptr("00000000-1111-2222-3333-444444444444"),
				ResourceURL:     to.Ptr("string"),
				Secrets: &armmachinelearningservices.ServicePrincipalDatastoreSecrets{
					SecretsType:  to.Ptr(armmachinelearningservices.SecretsTypeServicePrincipal),
					ClientSecret: to.Ptr("string"),
				},
				TenantID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			},
			DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureDataLakeGen2),
			AccountName:   to.Ptr("string"),
			Endpoint:      to.Ptr("string"),
			Filesystem:    to.Ptr("string"),
			Protocol:      to.Ptr("string"),
		},
	}, &armmachinelearningservices.DatastoresClientCreateOrUpdateOptions{SkipValidation: to.Ptr(false)})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// TODO: use response item
	_ = res
	// For example, response struct should like:
	// res.DatastoreData = armmachinelearningservices.DatastoreData{
	// 	Name: to.Ptr("string"),
	// 	Type: to.Ptr("string"),
	// 	ID: to.Ptr("string"),
	// 	SystemData: &armmachinelearningservices.SystemData{
	// 		CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t}()),
	// 		CreatedBy: to.Ptr("string"),
	// 		CreatedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
	// 		LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t}()),
	// 		LastModifiedBy: to.Ptr("string"),
	// 		LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
	// 	},
	// 	Properties: &armmachinelearningservices.AzureDataLakeGen2Datastore{
	// 		Description: to.Ptr("string"),
	// 		Tags: map[string]*string{
	// 			"string": to.Ptr("string"),
	// 		},
	// 		Credentials: &armmachinelearningservices.ServicePrincipalDatastoreCredentials{
	// 			CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeServicePrincipal),
	// 			AuthorityURL: to.Ptr("string"),
	// 			ClientID: to.Ptr("00000000-1111-2222-3333-444444444444"),
	// 			ResourceURL: to.Ptr("string"),
	// 			TenantID: to.Ptr("00000000-1111-2222-3333-444444444444"),
	// 		},
	// 		DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureDataLakeGen2),
	// 		AccountName: to.Ptr("string"),
	// 		Endpoint: to.Ptr("string"),
	// 		Filesystem: to.Ptr("string"),
	// 		Protocol: to.Ptr("string"),
	// 	},
	// }
	// with the raw JSON response:
	// {
	// 	"name": "string",
	// 	"type": "string",
	// 	"id": "string",
	// 	"properties": {
	// 		"description": "string",
	// 		"accountName": "string",
	// 		"credentials": {
	// 			"authorityUrl": "string",
	// 			"clientId": "00000000-1111-2222-3333-444444444444",
	// 			"credentialsType": "ServicePrincipal",
	// 			"resourceUrl": "string",
	// 			"tenantId": "00000000-1111-2222-3333-444444444444"
	// 		},
	// 		"datastoreType": "AzureDataLakeGen2",
	// 		"endpoint": "string",
	// 		"filesystem": "string",
	// 		"properties": null,
	// 		"tags": {
	// 			"string": "string"
	// 		},
	// 		"protocol": "string"
	// 	},
	// 	"systemData": {
	// 		"createdAt": "2020-01-01T12:34:56.999Z",
	// 		"createdBy": "string",
	// 		"createdByType": "User",
	// 		"lastModifiedAt": "2020-01-01T12:34:56.999Z",
	// 		"lastModifiedBy": "string",
	// 		"lastModifiedByType": "User"
	// 	}
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/AzureFileWAccountKey/createOrUpdate.json
func ExampleDatastoresClient_CreateOrUpdate_createOrUpdateDatastoreAzureFileStoreWAccountKey() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client, err := armmachinelearningservices.NewDatastoresClient("00000000-1111-2222-3333-444444444444", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.CreateOrUpdate(ctx, "test-rg", "my-aml-workspace", "string", armmachinelearningservices.DatastoreData{
		Properties: &armmachinelearningservices.AzureFileDatastore{
			Description: to.Ptr("string"),
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			Credentials: &armmachinelearningservices.AccountKeyDatastoreCredentials{
				CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeAccountKey),
				Secrets: &armmachinelearningservices.AccountKeyDatastoreSecrets{
					SecretsType: to.Ptr(armmachinelearningservices.SecretsTypeAccountKey),
					Key:         to.Ptr("string"),
				},
			},
			DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureFile),
			AccountName:   to.Ptr("string"),
			Endpoint:      to.Ptr("string"),
			FileShareName: to.Ptr("string"),
			Protocol:      to.Ptr("string"),
		},
	}, &armmachinelearningservices.DatastoresClientCreateOrUpdateOptions{SkipValidation: to.Ptr(false)})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// TODO: use response item
	_ = res
	// For example, response struct should like:
	// res.DatastoreData = armmachinelearningservices.DatastoreData{
	// 	Name: to.Ptr("string"),
	// 	Type: to.Ptr("string"),
	// 	ID: to.Ptr("string"),
	// 	SystemData: &armmachinelearningservices.SystemData{
	// 		CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t}()),
	// 		CreatedBy: to.Ptr("string"),
	// 		CreatedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
	// 		LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t}()),
	// 		LastModifiedBy: to.Ptr("string"),
	// 		LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
	// 	},
	// 	Properties: &armmachinelearningservices.AzureFileDatastore{
	// 		Description: to.Ptr("string"),
	// 		Tags: map[string]*string{
	// 			"string": to.Ptr("string"),
	// 		},
	// 		Credentials: &armmachinelearningservices.AccountKeyDatastoreCredentials{
	// 			CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeAccountKey),
	// 		},
	// 		DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureFile),
	// 		AccountName: to.Ptr("string"),
	// 		Endpoint: to.Ptr("string"),
	// 		FileShareName: to.Ptr("string"),
	// 		Protocol: to.Ptr("string"),
	// 	},
	// }
	// with the raw JSON response:
	// {
	// 	"name": "string",
	// 	"type": "string",
	// 	"id": "string",
	// 	"properties": {
	// 		"description": "string",
	// 		"accountName": "string",
	// 		"credentials": {
	// 			"credentialsType": "AccountKey"
	// 		},
	// 		"datastoreType": "AzureFile",
	// 		"endpoint": "string",
	// 		"fileShareName": "string",
	// 		"properties": null,
	// 		"tags": {
	// 			"string": "string"
	// 		},
	// 		"protocol": "string"
	// 	},
	// 	"systemData": {
	// 		"createdAt": "2020-01-01T12:34:56.999Z",
	// 		"createdBy": "string",
	// 		"createdByType": "User",
	// 		"lastModifiedAt": "2020-01-01T12:34:56.999Z",
	// 		"lastModifiedBy": "string",
	// 		"lastModifiedByType": "User"
	// 	}
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/AzureBlobWAccountKey/createOrUpdate.json
func ExampleDatastoresClient_CreateOrUpdate_createOrUpdateDatastoreAzureBlobWAccountKey() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client, err := armmachinelearningservices.NewDatastoresClient("00000000-1111-2222-3333-444444444444", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.CreateOrUpdate(ctx, "test-rg", "my-aml-workspace", "string", armmachinelearningservices.DatastoreData{
		Properties: &armmachinelearningservices.AzureBlobDatastore{
			Description: to.Ptr("string"),
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			Credentials: &armmachinelearningservices.AccountKeyDatastoreCredentials{
				CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeAccountKey),
				Secrets: &armmachinelearningservices.AccountKeyDatastoreSecrets{
					SecretsType: to.Ptr(armmachinelearningservices.SecretsTypeAccountKey),
					Key:         to.Ptr("string"),
				},
			},
			DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureBlob),
			AccountName:   to.Ptr("string"),
			ContainerName: to.Ptr("string"),
			Endpoint:      to.Ptr("core.windows.net"),
			Protocol:      to.Ptr("https"),
		},
	}, &armmachinelearningservices.DatastoresClientCreateOrUpdateOptions{SkipValidation: to.Ptr(false)})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// TODO: use response item
	_ = res
	// For example, response struct should like:
	// res.DatastoreData = armmachinelearningservices.DatastoreData{
	// 	Name: to.Ptr("string"),
	// 	Type: to.Ptr("string"),
	// 	ID: to.Ptr("string"),
	// 	SystemData: &armmachinelearningservices.SystemData{
	// 		CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t}()),
	// 		CreatedBy: to.Ptr("string"),
	// 		CreatedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
	// 		LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t}()),
	// 		LastModifiedBy: to.Ptr("string"),
	// 		LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
	// 	},
	// 	Properties: &armmachinelearningservices.AzureBlobDatastore{
	// 		Description: to.Ptr("string"),
	// 		Tags: map[string]*string{
	// 			"string": to.Ptr("string"),
	// 		},
	// 		Credentials: &armmachinelearningservices.AccountKeyDatastoreCredentials{
	// 			CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeAccountKey),
	// 		},
	// 		DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureBlob),
	// 		IsDefault: to.Ptr(false),
	// 		AccountName: to.Ptr("string"),
	// 		ContainerName: to.Ptr("string"),
	// 		Endpoint: to.Ptr("core.windows.net"),
	// 		Protocol: to.Ptr("https"),
	// 	},
	// }
	// with the raw JSON response:
	// {
	// 	"name": "string",
	// 	"type": "string",
	// 	"id": "string",
	// 	"properties": {
	// 		"description": "string",
	// 		"accountName": "string",
	// 		"containerName": "string",
	// 		"credentials": {
	// 			"credentialsType": "AccountKey"
	// 		},
	// 		"datastoreType": "AzureBlob",
	// 		"endpoint": "core.windows.net",
	// 		"isDefault": false,
	// 		"properties": null,
	// 		"tags": {
	// 			"string": "string"
	// 		},
	// 		"protocol": "https"
	// 	},
	// 	"systemData": {
	// 		"createdAt": "2020-01-01T12:34:56.999Z",
	// 		"createdBy": "string",
	// 		"createdByType": "User",
	// 		"lastModifiedAt": "2020-01-01T12:34:56.999Z",
	// 		"lastModifiedBy": "string",
	// 		"lastModifiedByType": "User"
	// 	}
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/listSecrets.json
func ExampleDatastoresClient_ListSecrets() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client, err := armmachinelearningservices.NewDatastoresClient("00000000-1111-2222-3333-444444444444", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.ListSecrets(ctx, "test-rg", "my-aml-workspace", "string", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// TODO: use response item
	_ = res
	// For example, response struct should like:
	// res = armmachinelearningservices.DatastoresClientListSecretsResponse{
	// 	                            DatastoreSecretsClassification: &armmachinelearningservices.AccountKeyDatastoreSecrets{
	// 		SecretsType: to.Ptr(armmachinelearningservices.SecretsTypeAccountKey),
	// 		Key: to.Ptr("string"),
	// 	},
	// 	                        }
	// with the raw JSON response:
	// {
	// 	"key": "string",
	// 	"secretsType": "AccountKey"
	// }
}
