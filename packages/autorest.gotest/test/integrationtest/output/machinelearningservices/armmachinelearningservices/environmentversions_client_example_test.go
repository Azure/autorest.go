//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armmachinelearningservices_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/machinelearningservices/armmachinelearningservices"
)

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/main/specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentVersion/list.json
func ExampleEnvironmentVersionsClient_NewListPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client, err := armmachinelearningservices.NewEnvironmentVersionsClient("00000000-1111-2222-3333-444444444444", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager("test-rg", "my-aml-workspace", "string", &armmachinelearningservices.EnvironmentVersionsClientListOptions{OrderBy: to.Ptr("string"),
		Top:          to.Ptr[int32](1),
		Skip:         nil,
		ListViewType: nil,
	})
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// TODO: use page
			_ = v
		}
		// If HTTP returns as the '200' response defined in example definition, page struct should like:
		// page.EnvironmentVersionResourceArmPaginatedResult = armmachinelearningservices.EnvironmentVersionResourceArmPaginatedResult{
		// 	Value: []*armmachinelearningservices.EnvironmentVersionData{
		// 		{
		// 			Name: to.Ptr("string"),
		// 			Type: to.Ptr("string"),
		// 			ID: to.Ptr("string"),
		// 			SystemData: &armmachinelearningservices.SystemData{
		// 				CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t}()),
		// 				CreatedBy: to.Ptr("string"),
		// 				CreatedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		// 				LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t}()),
		// 				LastModifiedBy: to.Ptr("string"),
		// 				LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		// 			},
		// 			Properties: &armmachinelearningservices.EnvironmentVersionDetails{
		// 				Description: to.Ptr("string"),
		// 				Properties: map[string]*string{
		// 					"string": to.Ptr("string"),
		// 				},
		// 				Tags: map[string]*string{
		// 					"string": to.Ptr("string"),
		// 				},
		// 				IsAnonymous: to.Ptr(false),
		// 				Build: &armmachinelearningservices.BuildContext{
		// 					ContextURI: to.Ptr("https://storage-account.blob.core.windows.net/azureml/DockerBuildContext/95ddede6b9b8c4e90472db3acd0a8d28/"),
		// 					DockerfilePath: to.Ptr("prod/Dockerfile"),
		// 				},
		// 				CondaFile: to.Ptr("string"),
		// 				EnvironmentType: to.Ptr(armmachinelearningservices.EnvironmentTypeCurated),
		// 				Image: to.Ptr("docker.io/tensorflow/serving:latest"),
		// 				InferenceConfig: &armmachinelearningservices.InferenceContainerProperties{
		// 					LivenessRoute: &armmachinelearningservices.Route{
		// 						Path: to.Ptr("string"),
		// 						Port: to.Ptr[int32](1),
		// 					},
		// 					ReadinessRoute: &armmachinelearningservices.Route{
		// 						Path: to.Ptr("string"),
		// 						Port: to.Ptr[int32](1),
		// 					},
		// 					ScoringRoute: &armmachinelearningservices.Route{
		// 						Path: to.Ptr("string"),
		// 						Port: to.Ptr[int32](1),
		// 					},
		// 				},
		// 			},
		// 	}},
		// }
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/main/specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentVersion/delete.json
func ExampleEnvironmentVersionsClient_Delete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client, err := armmachinelearningservices.NewEnvironmentVersionsClient("00000000-1111-2222-3333-444444444444", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = client.Delete(ctx, "test-rg", "my-aml-workspace", "string", "string", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/main/specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentVersion/get.json
func ExampleEnvironmentVersionsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client, err := armmachinelearningservices.NewEnvironmentVersionsClient("00000000-1111-2222-3333-444444444444", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx, "test-rg", "my-aml-workspace", "string", "string", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// TODO: use response
	_ = res
	// If HTTP returns as the '200' response defined in example definition, response struct should like:
	// res.EnvironmentVersionData = armmachinelearningservices.EnvironmentVersionData{
	// 	Name: to.Ptr("string"),
	// 	Type: to.Ptr("string"),
	// 	ID: to.Ptr("string"),
	// 	SystemData: &armmachinelearningservices.SystemData{
	// 		CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t}()),
	// 		CreatedBy: to.Ptr("string"),
	// 		CreatedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
	// 		LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t}()),
	// 		LastModifiedBy: to.Ptr("string"),
	// 		LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
	// 	},
	// 	Properties: &armmachinelearningservices.EnvironmentVersionDetails{
	// 		Description: to.Ptr("string"),
	// 		Properties: map[string]*string{
	// 			"string": to.Ptr("string"),
	// 		},
	// 		Tags: map[string]*string{
	// 			"string": to.Ptr("string"),
	// 		},
	// 		IsAnonymous: to.Ptr(false),
	// 		Build: &armmachinelearningservices.BuildContext{
	// 			ContextURI: to.Ptr("https://storage-account.blob.core.windows.net/azureml/DockerBuildContext/95ddede6b9b8c4e90472db3acd0a8d28/"),
	// 			DockerfilePath: to.Ptr("prod/Dockerfile"),
	// 		},
	// 		CondaFile: to.Ptr("string"),
	// 		EnvironmentType: to.Ptr(armmachinelearningservices.EnvironmentTypeCurated),
	// 		Image: to.Ptr("docker.io/tensorflow/serving:latest"),
	// 		InferenceConfig: &armmachinelearningservices.InferenceContainerProperties{
	// 			LivenessRoute: &armmachinelearningservices.Route{
	// 				Path: to.Ptr("string"),
	// 				Port: to.Ptr[int32](1),
	// 			},
	// 			ReadinessRoute: &armmachinelearningservices.Route{
	// 				Path: to.Ptr("string"),
	// 				Port: to.Ptr[int32](1),
	// 			},
	// 			ScoringRoute: &armmachinelearningservices.Route{
	// 				Path: to.Ptr("string"),
	// 				Port: to.Ptr[int32](1),
	// 			},
	// 		},
	// 	},
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/main/specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentVersion/createOrUpdate.json
func ExampleEnvironmentVersionsClient_CreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client, err := armmachinelearningservices.NewEnvironmentVersionsClient("00000000-1111-2222-3333-444444444444", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.CreateOrUpdate(ctx, "test-rg", "my-aml-workspace", "string", "string", armmachinelearningservices.EnvironmentVersionData{
		Properties: &armmachinelearningservices.EnvironmentVersionDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			IsAnonymous: to.Ptr(false),
			Build: &armmachinelearningservices.BuildContext{
				ContextURI:     to.Ptr("https://storage-account.blob.core.windows.net/azureml/DockerBuildContext/95ddede6b9b8c4e90472db3acd0a8d28/"),
				DockerfilePath: to.Ptr("prod/Dockerfile"),
			},
			CondaFile: to.Ptr("string"),
			Image:     to.Ptr("docker.io/tensorflow/serving:latest"),
			InferenceConfig: &armmachinelearningservices.InferenceContainerProperties{
				LivenessRoute: &armmachinelearningservices.Route{
					Path: to.Ptr("string"),
					Port: to.Ptr[int32](1),
				},
				ReadinessRoute: &armmachinelearningservices.Route{
					Path: to.Ptr("string"),
					Port: to.Ptr[int32](1),
				},
				ScoringRoute: &armmachinelearningservices.Route{
					Path: to.Ptr("string"),
					Port: to.Ptr[int32](1),
				},
			},
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// TODO: use response
	_ = res
	// If HTTP returns as the '200' response defined in example definition, response struct should like:
	// res.EnvironmentVersionData = armmachinelearningservices.EnvironmentVersionData{
	// 	Name: to.Ptr("string"),
	// 	Type: to.Ptr("string"),
	// 	ID: to.Ptr("string"),
	// 	SystemData: &armmachinelearningservices.SystemData{
	// 		CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t}()),
	// 		CreatedBy: to.Ptr("string"),
	// 		CreatedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
	// 		LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t}()),
	// 		LastModifiedBy: to.Ptr("string"),
	// 		LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
	// 	},
	// 	Properties: &armmachinelearningservices.EnvironmentVersionDetails{
	// 		Description: to.Ptr("string"),
	// 		Properties: map[string]*string{
	// 			"string": to.Ptr("string"),
	// 		},
	// 		Tags: map[string]*string{
	// 			"string": to.Ptr("string"),
	// 		},
	// 		IsAnonymous: to.Ptr(false),
	// 		Build: &armmachinelearningservices.BuildContext{
	// 			ContextURI: to.Ptr("https://storage-account.blob.core.windows.net/azureml/DockerBuildContext/95ddede6b9b8c4e90472db3acd0a8d28/"),
	// 			DockerfilePath: to.Ptr("prod/Dockerfile"),
	// 		},
	// 		CondaFile: to.Ptr("string"),
	// 		EnvironmentType: to.Ptr(armmachinelearningservices.EnvironmentTypeCurated),
	// 		Image: to.Ptr("docker.io/tensorflow/serving:latest"),
	// 		InferenceConfig: &armmachinelearningservices.InferenceContainerProperties{
	// 			LivenessRoute: &armmachinelearningservices.Route{
	// 				Path: to.Ptr("string"),
	// 				Port: to.Ptr[int32](1),
	// 			},
	// 			ReadinessRoute: &armmachinelearningservices.Route{
	// 				Path: to.Ptr("string"),
	// 				Port: to.Ptr[int32](1),
	// 			},
	// 			ScoringRoute: &armmachinelearningservices.Route{
	// 				Path: to.Ptr("string"),
	// 				Port: to.Ptr[int32](1),
	// 			},
	// 		},
	// 	},
	// }
}
