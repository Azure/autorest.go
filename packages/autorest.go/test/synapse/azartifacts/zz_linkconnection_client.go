//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package azartifacts

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// LinkConnectionClient contains the methods for the LinkConnection group.
// Don't use this type directly, use a constructor function instead.
type LinkConnectionClient struct {
	internal *azcore.Client
	endpoint string
}

// CreateOrUpdate - Creates or updates a link connection
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-01-preview
//   - linkConnectionName - The link connection name
//   - linkConnection - Link connection resource definition
//   - options - LinkConnectionClientCreateOrUpdateOptions contains the optional parameters for the LinkConnectionClient.CreateOrUpdate
//     method.
func (client *LinkConnectionClient) CreateOrUpdate(ctx context.Context, linkConnectionName string, linkConnection LinkConnectionResource, options *LinkConnectionClientCreateOrUpdateOptions) (resp LinkConnectionClientCreateOrUpdateResponse, err error) {
	ctx, endSpan := runtime.StartSpan(ctx, "LinkConnectionClient.CreateOrUpdate", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, linkConnectionName, linkConnection, options)
	if err != nil {
		return
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return
	}
	return client.createOrUpdateHandleResponse(httpResp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *LinkConnectionClient) createOrUpdateCreateRequest(ctx context.Context, linkConnectionName string, linkConnection LinkConnectionResource, options *LinkConnectionClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/linkconnections/{linkConnectionName}"
	if linkConnectionName == "" {
		return nil, errors.New("parameter linkConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{linkConnectionName}", url.PathEscape(linkConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, linkConnection); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *LinkConnectionClient) createOrUpdateHandleResponse(resp *http.Response) (LinkConnectionClientCreateOrUpdateResponse, error) {
	result := LinkConnectionClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.LinkConnectionResource); err != nil {
		return LinkConnectionClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Delete a link connection
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-01-preview
//   - linkConnectionName - The link connection name
//   - options - LinkConnectionClientDeleteOptions contains the optional parameters for the LinkConnectionClient.Delete method.
func (client *LinkConnectionClient) Delete(ctx context.Context, linkConnectionName string, options *LinkConnectionClientDeleteOptions) (resp LinkConnectionClientDeleteResponse, err error) {
	ctx, endSpan := runtime.StartSpan(ctx, "LinkConnectionClient.Delete", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, linkConnectionName, options)
	if err != nil {
		return
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return
	}
	return
}

// deleteCreateRequest creates the Delete request.
func (client *LinkConnectionClient) deleteCreateRequest(ctx context.Context, linkConnectionName string, options *LinkConnectionClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/linkconnections/{linkConnectionName}"
	if linkConnectionName == "" {
		return nil, errors.New("parameter linkConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{linkConnectionName}", url.PathEscape(linkConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// EditTables - Edit tables for a link connection
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-01-preview
//   - linkConnectionName - The link connection name
//   - editTablesRequest - Edit tables request
//   - options - LinkConnectionClientEditTablesOptions contains the optional parameters for the LinkConnectionClient.EditTables
//     method.
func (client *LinkConnectionClient) EditTables(ctx context.Context, linkConnectionName string, editTablesRequest EditTablesRequest, options *LinkConnectionClientEditTablesOptions) (resp LinkConnectionClientEditTablesResponse, err error) {
	ctx, endSpan := runtime.StartSpan(ctx, "LinkConnectionClient.EditTables", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.editTablesCreateRequest(ctx, linkConnectionName, editTablesRequest, options)
	if err != nil {
		return
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return
	}
	return
}

// editTablesCreateRequest creates the EditTables request.
func (client *LinkConnectionClient) editTablesCreateRequest(ctx context.Context, linkConnectionName string, editTablesRequest EditTablesRequest, options *LinkConnectionClientEditTablesOptions) (*policy.Request, error) {
	urlPath := "/linkconnections/{linkConnectionName}/edittables"
	if linkConnectionName == "" {
		return nil, errors.New("parameter linkConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{linkConnectionName}", url.PathEscape(linkConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, editTablesRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// Get - Get a link connection
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-01-preview
//   - linkConnectionName - The link connection name
//   - options - LinkConnectionClientGetOptions contains the optional parameters for the LinkConnectionClient.Get method.
func (client *LinkConnectionClient) Get(ctx context.Context, linkConnectionName string, options *LinkConnectionClientGetOptions) (resp LinkConnectionClientGetResponse, err error) {
	ctx, endSpan := runtime.StartSpan(ctx, "LinkConnectionClient.Get", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, linkConnectionName, options)
	if err != nil {
		return
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return
	}
	return client.getHandleResponse(httpResp)
}

// getCreateRequest creates the Get request.
func (client *LinkConnectionClient) getCreateRequest(ctx context.Context, linkConnectionName string, options *LinkConnectionClientGetOptions) (*policy.Request, error) {
	urlPath := "/linkconnections/{linkConnectionName}"
	if linkConnectionName == "" {
		return nil, errors.New("parameter linkConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{linkConnectionName}", url.PathEscape(linkConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *LinkConnectionClient) getHandleResponse(resp *http.Response) (LinkConnectionClientGetResponse, error) {
	result := LinkConnectionClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.LinkConnectionResource); err != nil {
		return LinkConnectionClientGetResponse{}, err
	}
	return result, nil
}

// GetDetailedStatus - Get the detailed status of a link connection
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-01-preview
//   - linkConnectionName - The link connection name
//   - options - LinkConnectionClientGetDetailedStatusOptions contains the optional parameters for the LinkConnectionClient.GetDetailedStatus
//     method.
func (client *LinkConnectionClient) GetDetailedStatus(ctx context.Context, linkConnectionName string, options *LinkConnectionClientGetDetailedStatusOptions) (resp LinkConnectionClientGetDetailedStatusResponse, err error) {
	ctx, endSpan := runtime.StartSpan(ctx, "LinkConnectionClient.GetDetailedStatus", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getDetailedStatusCreateRequest(ctx, linkConnectionName, options)
	if err != nil {
		return
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return
	}
	return client.getDetailedStatusHandleResponse(httpResp)
}

// getDetailedStatusCreateRequest creates the GetDetailedStatus request.
func (client *LinkConnectionClient) getDetailedStatusCreateRequest(ctx context.Context, linkConnectionName string, options *LinkConnectionClientGetDetailedStatusOptions) (*policy.Request, error) {
	urlPath := "/linkconnections/{linkConnectionName}/detailedstatus"
	if linkConnectionName == "" {
		return nil, errors.New("parameter linkConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{linkConnectionName}", url.PathEscape(linkConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getDetailedStatusHandleResponse handles the GetDetailedStatus response.
func (client *LinkConnectionClient) getDetailedStatusHandleResponse(resp *http.Response) (LinkConnectionClientGetDetailedStatusResponse, error) {
	result := LinkConnectionClientGetDetailedStatusResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.LinkConnectionDetailedStatus); err != nil {
		return LinkConnectionClientGetDetailedStatusResponse{}, err
	}
	return result, nil
}

// NewListByWorkspacePager - List link connections
//
// Generated from API version 2022-12-01-preview
//   - options - LinkConnectionClientListByWorkspaceOptions contains the optional parameters for the LinkConnectionClient.NewListByWorkspacePager
//     method.
func (client *LinkConnectionClient) NewListByWorkspacePager(options *LinkConnectionClientListByWorkspaceOptions) *runtime.Pager[LinkConnectionClientListByWorkspaceResponse] {
	return runtime.NewPager(runtime.PagingHandler[LinkConnectionClientListByWorkspaceResponse]{
		More: func(page LinkConnectionClientListByWorkspaceResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *LinkConnectionClientListByWorkspaceResponse) (LinkConnectionClientListByWorkspaceResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByWorkspaceCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return LinkConnectionClientListByWorkspaceResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return LinkConnectionClientListByWorkspaceResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return LinkConnectionClientListByWorkspaceResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByWorkspaceHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByWorkspaceCreateRequest creates the ListByWorkspace request.
func (client *LinkConnectionClient) listByWorkspaceCreateRequest(ctx context.Context, options *LinkConnectionClientListByWorkspaceOptions) (*policy.Request, error) {
	urlPath := "/linkconnections"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByWorkspaceHandleResponse handles the ListByWorkspace response.
func (client *LinkConnectionClient) listByWorkspaceHandleResponse(resp *http.Response) (LinkConnectionClientListByWorkspaceResponse, error) {
	result := LinkConnectionClientListByWorkspaceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.LinkConnectionListResponse); err != nil {
		return LinkConnectionClientListByWorkspaceResponse{}, err
	}
	return result, nil
}

// ListLinkTables - List the link tables of a link connection
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-01-preview
//   - linkConnectionName - The link connection name
//   - options - LinkConnectionClientListLinkTablesOptions contains the optional parameters for the LinkConnectionClient.ListLinkTables
//     method.
func (client *LinkConnectionClient) ListLinkTables(ctx context.Context, linkConnectionName string, options *LinkConnectionClientListLinkTablesOptions) (resp LinkConnectionClientListLinkTablesResponse, err error) {
	ctx, endSpan := runtime.StartSpan(ctx, "LinkConnectionClient.ListLinkTables", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.listLinkTablesCreateRequest(ctx, linkConnectionName, options)
	if err != nil {
		return
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return
	}
	return client.listLinkTablesHandleResponse(httpResp)
}

// listLinkTablesCreateRequest creates the ListLinkTables request.
func (client *LinkConnectionClient) listLinkTablesCreateRequest(ctx context.Context, linkConnectionName string, options *LinkConnectionClientListLinkTablesOptions) (*policy.Request, error) {
	urlPath := "/linkconnections/{linkConnectionName}/linktables"
	if linkConnectionName == "" {
		return nil, errors.New("parameter linkConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{linkConnectionName}", url.PathEscape(linkConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listLinkTablesHandleResponse handles the ListLinkTables response.
func (client *LinkConnectionClient) listLinkTablesHandleResponse(resp *http.Response) (LinkConnectionClientListLinkTablesResponse, error) {
	result := LinkConnectionClientListLinkTablesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.LinkTableListResponse); err != nil {
		return LinkConnectionClientListLinkTablesResponse{}, err
	}
	return result, nil
}

// Pause - Pause a link connection. It may take a few minutes from Pausing to Paused, monitor the status with LinkConnection_GetDetailedStatus.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-01-preview
//   - linkConnectionName - The link connection name
//   - options - LinkConnectionClientPauseOptions contains the optional parameters for the LinkConnectionClient.Pause method.
func (client *LinkConnectionClient) Pause(ctx context.Context, linkConnectionName string, options *LinkConnectionClientPauseOptions) (resp LinkConnectionClientPauseResponse, err error) {
	ctx, endSpan := runtime.StartSpan(ctx, "LinkConnectionClient.Pause", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.pauseCreateRequest(ctx, linkConnectionName, options)
	if err != nil {
		return
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return
	}
	return
}

// pauseCreateRequest creates the Pause request.
func (client *LinkConnectionClient) pauseCreateRequest(ctx context.Context, linkConnectionName string, options *LinkConnectionClientPauseOptions) (*policy.Request, error) {
	urlPath := "/linkconnections/{linkConnectionName}/pause"
	if linkConnectionName == "" {
		return nil, errors.New("parameter linkConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{linkConnectionName}", url.PathEscape(linkConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// QueryTableStatus - Query the link table status of a link connection
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-01-preview
//   - linkConnectionName - The link connection name
//   - queryTableStatusRequest - Query table status request
//   - options - LinkConnectionClientQueryTableStatusOptions contains the optional parameters for the LinkConnectionClient.QueryTableStatus
//     method.
func (client *LinkConnectionClient) QueryTableStatus(ctx context.Context, linkConnectionName string, queryTableStatusRequest QueryTableStatusRequest, options *LinkConnectionClientQueryTableStatusOptions) (resp LinkConnectionClientQueryTableStatusResponse, err error) {
	ctx, endSpan := runtime.StartSpan(ctx, "LinkConnectionClient.QueryTableStatus", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.queryTableStatusCreateRequest(ctx, linkConnectionName, queryTableStatusRequest, options)
	if err != nil {
		return
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return
	}
	return client.queryTableStatusHandleResponse(httpResp)
}

// queryTableStatusCreateRequest creates the QueryTableStatus request.
func (client *LinkConnectionClient) queryTableStatusCreateRequest(ctx context.Context, linkConnectionName string, queryTableStatusRequest QueryTableStatusRequest, options *LinkConnectionClientQueryTableStatusOptions) (*policy.Request, error) {
	urlPath := "/linkconnections/{linkConnectionName}/querytablestatus"
	if linkConnectionName == "" {
		return nil, errors.New("parameter linkConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{linkConnectionName}", url.PathEscape(linkConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, queryTableStatusRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// queryTableStatusHandleResponse handles the QueryTableStatus response.
func (client *LinkConnectionClient) queryTableStatusHandleResponse(resp *http.Response) (LinkConnectionClientQueryTableStatusResponse, error) {
	result := LinkConnectionClientQueryTableStatusResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.LinkConnectionQueryTableStatus); err != nil {
		return LinkConnectionClientQueryTableStatusResponse{}, err
	}
	return result, nil
}

// Resume - Resume a link connection. It may take a few minutes from Resuming to Running, monitor the status with LinkConnection_GetDetailedStatus.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-01-preview
//   - linkConnectionName - The link connection name
//   - options - LinkConnectionClientResumeOptions contains the optional parameters for the LinkConnectionClient.Resume method.
func (client *LinkConnectionClient) Resume(ctx context.Context, linkConnectionName string, options *LinkConnectionClientResumeOptions) (resp LinkConnectionClientResumeResponse, err error) {
	ctx, endSpan := runtime.StartSpan(ctx, "LinkConnectionClient.Resume", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.resumeCreateRequest(ctx, linkConnectionName, options)
	if err != nil {
		return
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return
	}
	return
}

// resumeCreateRequest creates the Resume request.
func (client *LinkConnectionClient) resumeCreateRequest(ctx context.Context, linkConnectionName string, options *LinkConnectionClientResumeOptions) (*policy.Request, error) {
	urlPath := "/linkconnections/{linkConnectionName}/resume"
	if linkConnectionName == "" {
		return nil, errors.New("parameter linkConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{linkConnectionName}", url.PathEscape(linkConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Start - Start a link connection. It may take a few minutes from Starting to Running, monitor the status with LinkConnection_GetDetailedStatus.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-01-preview
//   - linkConnectionName - The link connection name
//   - options - LinkConnectionClientStartOptions contains the optional parameters for the LinkConnectionClient.Start method.
func (client *LinkConnectionClient) Start(ctx context.Context, linkConnectionName string, options *LinkConnectionClientStartOptions) (resp LinkConnectionClientStartResponse, err error) {
	ctx, endSpan := runtime.StartSpan(ctx, "LinkConnectionClient.Start", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.startCreateRequest(ctx, linkConnectionName, options)
	if err != nil {
		return
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return
	}
	return
}

// startCreateRequest creates the Start request.
func (client *LinkConnectionClient) startCreateRequest(ctx context.Context, linkConnectionName string, options *LinkConnectionClientStartOptions) (*policy.Request, error) {
	urlPath := "/linkconnections/{linkConnectionName}/start"
	if linkConnectionName == "" {
		return nil, errors.New("parameter linkConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{linkConnectionName}", url.PathEscape(linkConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Stop - Stop a link connection. It may take a few minutes from Stopping to stopped, monitor the status with LinkConnection_GetDetailedStatus.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-01-preview
//   - linkConnectionName - The link connection name
//   - options - LinkConnectionClientStopOptions contains the optional parameters for the LinkConnectionClient.Stop method.
func (client *LinkConnectionClient) Stop(ctx context.Context, linkConnectionName string, options *LinkConnectionClientStopOptions) (resp LinkConnectionClientStopResponse, err error) {
	ctx, endSpan := runtime.StartSpan(ctx, "LinkConnectionClient.Stop", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.stopCreateRequest(ctx, linkConnectionName, options)
	if err != nil {
		return
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return
	}
	return
}

// stopCreateRequest creates the Stop request.
func (client *LinkConnectionClient) stopCreateRequest(ctx context.Context, linkConnectionName string, options *LinkConnectionClientStopOptions) (*policy.Request, error) {
	urlPath := "/linkconnections/{linkConnectionName}/stop"
	if linkConnectionName == "" {
		return nil, errors.New("parameter linkConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{linkConnectionName}", url.PathEscape(linkConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// UpdateLandingZoneCredential - Update landing zone credential of a link connection
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-01-preview
//   - linkConnectionName - The link connection name
//   - updateLandingZoneCredentialRequest - update landing zone credential request
//   - options - LinkConnectionClientUpdateLandingZoneCredentialOptions contains the optional parameters for the LinkConnectionClient.UpdateLandingZoneCredential
//     method.
func (client *LinkConnectionClient) UpdateLandingZoneCredential(ctx context.Context, linkConnectionName string, updateLandingZoneCredentialRequest UpdateLandingZoneCredential, options *LinkConnectionClientUpdateLandingZoneCredentialOptions) (resp LinkConnectionClientUpdateLandingZoneCredentialResponse, err error) {
	ctx, endSpan := runtime.StartSpan(ctx, "LinkConnectionClient.UpdateLandingZoneCredential", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateLandingZoneCredentialCreateRequest(ctx, linkConnectionName, updateLandingZoneCredentialRequest, options)
	if err != nil {
		return
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return
	}
	return
}

// updateLandingZoneCredentialCreateRequest creates the UpdateLandingZoneCredential request.
func (client *LinkConnectionClient) updateLandingZoneCredentialCreateRequest(ctx context.Context, linkConnectionName string, updateLandingZoneCredentialRequest UpdateLandingZoneCredential, options *LinkConnectionClientUpdateLandingZoneCredentialOptions) (*policy.Request, error) {
	urlPath := "/linkconnections/{linkConnectionName}/updateLandingZoneCredential"
	if linkConnectionName == "" {
		return nil, errors.New("parameter linkConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{linkConnectionName}", url.PathEscape(linkConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, updateLandingZoneCredentialRequest); err != nil {
		return nil, err
	}
	return req, nil
}
