//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package azartifacts

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// KqlScriptsClient contains the methods for the KqlScripts group.
// Don't use this type directly, use a constructor function instead.
type KqlScriptsClient struct {
	internal *azcore.Client
	endpoint string
}

// NewGetAllPager - Get all KQL scripts
//
// Generated from API version 2021-11-01-preview
//   - options - KqlScriptsClientGetAllOptions contains the optional parameters for the KqlScriptsClient.NewGetAllPager method.
func (client *KqlScriptsClient) NewGetAllPager(options *KqlScriptsClientGetAllOptions) *runtime.Pager[KqlScriptsClientGetAllResponse] {
	return runtime.NewPager(runtime.PagingHandler[KqlScriptsClientGetAllResponse]{
		More: func(page KqlScriptsClientGetAllResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *KqlScriptsClientGetAllResponse) (KqlScriptsClientGetAllResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.getAllCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return KqlScriptsClientGetAllResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return KqlScriptsClientGetAllResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return KqlScriptsClientGetAllResponse{}, runtime.NewResponseError(resp)
			}
			return client.getAllHandleResponse(resp)
		},
	})
}

// getAllCreateRequest creates the GetAll request.
func (client *KqlScriptsClient) getAllCreateRequest(ctx context.Context, options *KqlScriptsClientGetAllOptions) (*policy.Request, error) {
	urlPath := "/kqlScripts"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getAllHandleResponse handles the GetAll response.
func (client *KqlScriptsClient) getAllHandleResponse(resp *http.Response) (KqlScriptsClientGetAllResponse, error) {
	result := KqlScriptsClientGetAllResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.KqlScriptsResourceCollectionResponse); err != nil {
		return KqlScriptsClientGetAllResponse{}, err
	}
	return result, nil
}
