//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package azartifacts

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// KqlScriptClient contains the methods for the KqlScript group.
// Don't use this type directly, use a constructor function instead.
type KqlScriptClient struct {
	internal *azcore.Client
	endpoint string
}

// BeginCreateOrUpdate - Creates or updates a KQL Script
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2021-11-01-preview
//   - kqlScriptName - KQL script name
//   - kqlScript - KQL script
//   - options - KqlScriptClientBeginCreateOrUpdateOptions contains the optional parameters for the KqlScriptClient.BeginCreateOrUpdate
//     method.
func (client *KqlScriptClient) BeginCreateOrUpdate(ctx context.Context, kqlScriptName string, kqlScript KqlScriptResource, options *KqlScriptClientBeginCreateOrUpdateOptions) (resp *runtime.Poller[KqlScriptClientCreateOrUpdateResponse], err error) {
	if options == nil || options.ResumeToken == "" {
		ctx, endSpan := runtime.StartSpan(ctx, "KqlScriptClient.BeginCreateOrUpdate", client.internal.Tracer(), nil)
		defer func() { endSpan(err) }()
		resp, err := client.createOrUpdate(ctx, kqlScriptName, kqlScript, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[KqlScriptClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[KqlScriptClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Creates or updates a KQL Script
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2021-11-01-preview
func (client *KqlScriptClient) createOrUpdate(ctx context.Context, kqlScriptName string, kqlScript KqlScriptResource, options *KqlScriptClientBeginCreateOrUpdateOptions) (resp *http.Response, err error) {
	req, err := client.createOrUpdateCreateRequest(ctx, kqlScriptName, kqlScript, options)
	if err != nil {
		return
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *KqlScriptClient) createOrUpdateCreateRequest(ctx context.Context, kqlScriptName string, kqlScript KqlScriptResource, options *KqlScriptClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/kqlScripts/{kqlScriptName}"
	if kqlScriptName == "" {
		return nil, errors.New("parameter kqlScriptName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{kqlScriptName}", url.PathEscape(kqlScriptName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, kqlScript); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDeleteByName - Delete KQL script by name
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2021-11-01-preview
//   - kqlScriptName - KQL script name
//   - options - KqlScriptClientBeginDeleteByNameOptions contains the optional parameters for the KqlScriptClient.BeginDeleteByName
//     method.
func (client *KqlScriptClient) BeginDeleteByName(ctx context.Context, kqlScriptName string, options *KqlScriptClientBeginDeleteByNameOptions) (resp *runtime.Poller[KqlScriptClientDeleteByNameResponse], err error) {
	if options == nil || options.ResumeToken == "" {
		ctx, endSpan := runtime.StartSpan(ctx, "KqlScriptClient.BeginDeleteByName", client.internal.Tracer(), nil)
		defer func() { endSpan(err) }()
		resp, err := client.deleteByName(ctx, kqlScriptName, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[KqlScriptClientDeleteByNameResponse]{
			Tracer: client.internal.Tracer(),
		})
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[KqlScriptClientDeleteByNameResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// DeleteByName - Delete KQL script by name
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2021-11-01-preview
func (client *KqlScriptClient) deleteByName(ctx context.Context, kqlScriptName string, options *KqlScriptClientBeginDeleteByNameOptions) (resp *http.Response, err error) {
	req, err := client.deleteByNameCreateRequest(ctx, kqlScriptName, options)
	if err != nil {
		return
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return
	}
	return httpResp, nil
}

// deleteByNameCreateRequest creates the DeleteByName request.
func (client *KqlScriptClient) deleteByNameCreateRequest(ctx context.Context, kqlScriptName string, options *KqlScriptClientBeginDeleteByNameOptions) (*policy.Request, error) {
	urlPath := "/kqlScripts/{kqlScriptName}"
	if kqlScriptName == "" {
		return nil, errors.New("parameter kqlScriptName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{kqlScriptName}", url.PathEscape(kqlScriptName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetByName - Get KQL script by name
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2021-11-01-preview
//   - kqlScriptName - KQL script name
//   - options - KqlScriptClientGetByNameOptions contains the optional parameters for the KqlScriptClient.GetByName method.
func (client *KqlScriptClient) GetByName(ctx context.Context, kqlScriptName string, options *KqlScriptClientGetByNameOptions) (resp KqlScriptClientGetByNameResponse, err error) {
	ctx, endSpan := runtime.StartSpan(ctx, "KqlScriptClient.GetByName", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getByNameCreateRequest(ctx, kqlScriptName, options)
	if err != nil {
		return
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return
	}
	return client.getByNameHandleResponse(httpResp)
}

// getByNameCreateRequest creates the GetByName request.
func (client *KqlScriptClient) getByNameCreateRequest(ctx context.Context, kqlScriptName string, options *KqlScriptClientGetByNameOptions) (*policy.Request, error) {
	urlPath := "/kqlScripts/{kqlScriptName}"
	if kqlScriptName == "" {
		return nil, errors.New("parameter kqlScriptName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{kqlScriptName}", url.PathEscape(kqlScriptName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getByNameHandleResponse handles the GetByName response.
func (client *KqlScriptClient) getByNameHandleResponse(resp *http.Response) (KqlScriptClientGetByNameResponse, error) {
	result := KqlScriptClientGetByNameResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.KqlScriptResource); err != nil {
		return KqlScriptClientGetByNameResponse{}, err
	}
	return result, nil
}

// BeginRename - Rename KQL script
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2021-11-01-preview
//   - kqlScriptName - KQL script name
//   - renameRequest - Rename request
//   - options - KqlScriptClientBeginRenameOptions contains the optional parameters for the KqlScriptClient.BeginRename method.
func (client *KqlScriptClient) BeginRename(ctx context.Context, kqlScriptName string, renameRequest ArtifactRenameRequest, options *KqlScriptClientBeginRenameOptions) (resp *runtime.Poller[KqlScriptClientRenameResponse], err error) {
	if options == nil || options.ResumeToken == "" {
		ctx, endSpan := runtime.StartSpan(ctx, "KqlScriptClient.BeginRename", client.internal.Tracer(), nil)
		defer func() { endSpan(err) }()
		resp, err := client.rename(ctx, kqlScriptName, renameRequest, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[KqlScriptClientRenameResponse]{
			Tracer: client.internal.Tracer(),
		})
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[KqlScriptClientRenameResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Rename - Rename KQL script
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2021-11-01-preview
func (client *KqlScriptClient) rename(ctx context.Context, kqlScriptName string, renameRequest ArtifactRenameRequest, options *KqlScriptClientBeginRenameOptions) (resp *http.Response, err error) {
	req, err := client.renameCreateRequest(ctx, kqlScriptName, renameRequest, options)
	if err != nil {
		return
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return
	}
	return httpResp, nil
}

// renameCreateRequest creates the Rename request.
func (client *KqlScriptClient) renameCreateRequest(ctx context.Context, kqlScriptName string, renameRequest ArtifactRenameRequest, options *KqlScriptClientBeginRenameOptions) (*policy.Request, error) {
	urlPath := "/kqlScripts/{kqlScriptName}/rename"
	if kqlScriptName == "" {
		return nil, errors.New("parameter kqlScriptName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{kqlScriptName}", url.PathEscape(kqlScriptName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, renameRequest); err != nil {
		return nil, err
	}
	return req, nil
}
