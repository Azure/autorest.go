//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"azartifacts"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
)

// DataFlowDebugSessionServer is a fake server for instances of the azartifacts.DataFlowDebugSessionClient type.
type DataFlowDebugSessionServer struct {
	// AddDataFlow is the fake for method DataFlowDebugSessionClient.AddDataFlow
	// HTTP status codes to indicate success: http.StatusOK
	AddDataFlow func(ctx context.Context, request azartifacts.DataFlowDebugPackage, options *azartifacts.DataFlowDebugSessionClientAddDataFlowOptions) (resp azfake.Responder[azartifacts.DataFlowDebugSessionClientAddDataFlowResponse], errResp azfake.ErrorResponder)

	// BeginCreateDataFlowDebugSession is the fake for method DataFlowDebugSessionClient.BeginCreateDataFlowDebugSession
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginCreateDataFlowDebugSession func(ctx context.Context, request azartifacts.CreateDataFlowDebugSessionRequest, options *azartifacts.DataFlowDebugSessionClientBeginCreateDataFlowDebugSessionOptions) (resp azfake.PollerResponder[azartifacts.DataFlowDebugSessionClientCreateDataFlowDebugSessionResponse], errResp azfake.ErrorResponder)

	// DeleteDataFlowDebugSession is the fake for method DataFlowDebugSessionClient.DeleteDataFlowDebugSession
	// HTTP status codes to indicate success: http.StatusOK
	DeleteDataFlowDebugSession func(ctx context.Context, request azartifacts.DeleteDataFlowDebugSessionRequest, options *azartifacts.DataFlowDebugSessionClientDeleteDataFlowDebugSessionOptions) (resp azfake.Responder[azartifacts.DataFlowDebugSessionClientDeleteDataFlowDebugSessionResponse], errResp azfake.ErrorResponder)

	// BeginExecuteCommand is the fake for method DataFlowDebugSessionClient.BeginExecuteCommand
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginExecuteCommand func(ctx context.Context, request azartifacts.DataFlowDebugCommandRequest, options *azartifacts.DataFlowDebugSessionClientBeginExecuteCommandOptions) (resp azfake.PollerResponder[azartifacts.DataFlowDebugSessionClientExecuteCommandResponse], errResp azfake.ErrorResponder)

	// NewQueryDataFlowDebugSessionsByWorkspacePager is the fake for method DataFlowDebugSessionClient.NewQueryDataFlowDebugSessionsByWorkspacePager
	// HTTP status codes to indicate success: http.StatusOK
	NewQueryDataFlowDebugSessionsByWorkspacePager func(options *azartifacts.DataFlowDebugSessionClientQueryDataFlowDebugSessionsByWorkspaceOptions) (resp azfake.PagerResponder[azartifacts.DataFlowDebugSessionClientQueryDataFlowDebugSessionsByWorkspaceResponse])
}

// NewDataFlowDebugSessionServerTransport creates a new instance of DataFlowDebugSessionServerTransport with the provided implementation.
// The returned DataFlowDebugSessionServerTransport instance is connected to an instance of azartifacts.DataFlowDebugSessionClient by way of the
// undefined.Transporter field.
func NewDataFlowDebugSessionServerTransport(srv *DataFlowDebugSessionServer) *DataFlowDebugSessionServerTransport {
	return &DataFlowDebugSessionServerTransport{srv: srv}
}

// DataFlowDebugSessionServerTransport connects instances of azartifacts.DataFlowDebugSessionClient to instances of DataFlowDebugSessionServer.
// Don't use this type directly, use NewDataFlowDebugSessionServerTransport instead.
type DataFlowDebugSessionServerTransport struct {
	srv                                           *DataFlowDebugSessionServer
	beginCreateDataFlowDebugSession               *azfake.PollerResponder[azartifacts.DataFlowDebugSessionClientCreateDataFlowDebugSessionResponse]
	beginExecuteCommand                           *azfake.PollerResponder[azartifacts.DataFlowDebugSessionClientExecuteCommandResponse]
	newQueryDataFlowDebugSessionsByWorkspacePager *azfake.PagerResponder[azartifacts.DataFlowDebugSessionClientQueryDataFlowDebugSessionsByWorkspaceResponse]
}

// Do implements the policy.Transporter interface for DataFlowDebugSessionServerTransport.
func (d *DataFlowDebugSessionServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "DataFlowDebugSessionClient.AddDataFlow":
		resp, err = d.dispatchAddDataFlow(req)
	case "DataFlowDebugSessionClient.BeginCreateDataFlowDebugSession":
		resp, err = d.dispatchBeginCreateDataFlowDebugSession(req)
	case "DataFlowDebugSessionClient.DeleteDataFlowDebugSession":
		resp, err = d.dispatchDeleteDataFlowDebugSession(req)
	case "DataFlowDebugSessionClient.BeginExecuteCommand":
		resp, err = d.dispatchBeginExecuteCommand(req)
	case "DataFlowDebugSessionClient.NewQueryDataFlowDebugSessionsByWorkspacePager":
		resp, err = d.dispatchNewQueryDataFlowDebugSessionsByWorkspacePager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (d *DataFlowDebugSessionServerTransport) dispatchAddDataFlow(req *http.Request) (*http.Response, error) {
	if d.srv.AddDataFlow == nil {
		return nil, &nonRetriableError{errors.New("method AddDataFlow not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[azartifacts.DataFlowDebugPackage](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.AddDataFlow(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).AddDataFlowToDebugSessionResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DataFlowDebugSessionServerTransport) dispatchBeginCreateDataFlowDebugSession(req *http.Request) (*http.Response, error) {
	if d.srv.BeginCreateDataFlowDebugSession == nil {
		return nil, &nonRetriableError{errors.New("method BeginCreateDataFlowDebugSession not implemented")}
	}
	if d.beginCreateDataFlowDebugSession == nil {
		body, err := server.UnmarshalRequestAsJSON[azartifacts.CreateDataFlowDebugSessionRequest](req)
		if err != nil {
			return nil, err
		}
		respr, errRespr := d.srv.BeginCreateDataFlowDebugSession(req.Context(), body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		d.beginCreateDataFlowDebugSession = &respr
	}

	resp, err := server.PollerResponderNext(d.beginCreateDataFlowDebugSession, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(d.beginCreateDataFlowDebugSession) {
		d.beginCreateDataFlowDebugSession = nil
	}

	return resp, nil
}

func (d *DataFlowDebugSessionServerTransport) dispatchDeleteDataFlowDebugSession(req *http.Request) (*http.Response, error) {
	if d.srv.DeleteDataFlowDebugSession == nil {
		return nil, &nonRetriableError{errors.New("method DeleteDataFlowDebugSession not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[azartifacts.DeleteDataFlowDebugSessionRequest](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.DeleteDataFlowDebugSession(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DataFlowDebugSessionServerTransport) dispatchBeginExecuteCommand(req *http.Request) (*http.Response, error) {
	if d.srv.BeginExecuteCommand == nil {
		return nil, &nonRetriableError{errors.New("method BeginExecuteCommand not implemented")}
	}
	if d.beginExecuteCommand == nil {
		body, err := server.UnmarshalRequestAsJSON[azartifacts.DataFlowDebugCommandRequest](req)
		if err != nil {
			return nil, err
		}
		respr, errRespr := d.srv.BeginExecuteCommand(req.Context(), body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		d.beginExecuteCommand = &respr
	}

	resp, err := server.PollerResponderNext(d.beginExecuteCommand, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(d.beginExecuteCommand) {
		d.beginExecuteCommand = nil
	}

	return resp, nil
}

func (d *DataFlowDebugSessionServerTransport) dispatchNewQueryDataFlowDebugSessionsByWorkspacePager(req *http.Request) (*http.Response, error) {
	if d.srv.NewQueryDataFlowDebugSessionsByWorkspacePager == nil {
		return nil, &nonRetriableError{errors.New("method NewQueryDataFlowDebugSessionsByWorkspacePager not implemented")}
	}
	if d.newQueryDataFlowDebugSessionsByWorkspacePager == nil {
		resp := d.srv.NewQueryDataFlowDebugSessionsByWorkspacePager(nil)
		d.newQueryDataFlowDebugSessionsByWorkspacePager = &resp
		server.PagerResponderInjectNextLinks(d.newQueryDataFlowDebugSessionsByWorkspacePager, req, func(page *azartifacts.DataFlowDebugSessionClientQueryDataFlowDebugSessionsByWorkspaceResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(d.newQueryDataFlowDebugSessionsByWorkspacePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(d.newQueryDataFlowDebugSessionsByWorkspacePager) {
		d.newQueryDataFlowDebugSessionsByWorkspacePager = nil
	}
	return resp, nil
}
