//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"azartifacts"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"regexp"
)

// TriggerRunServer is a fake server for instances of the azartifacts.TriggerRunClient type.
type TriggerRunServer struct {
	// CancelTriggerInstance is the fake for method TriggerRunClient.CancelTriggerInstance
	// HTTP status codes to indicate success: http.StatusOK
	CancelTriggerInstance func(ctx context.Context, triggerName string, runID string, options *azartifacts.TriggerRunClientCancelTriggerInstanceOptions) (resp azfake.Responder[azartifacts.TriggerRunClientCancelTriggerInstanceResponse], errResp azfake.ErrorResponder)

	// QueryTriggerRunsByWorkspace is the fake for method TriggerRunClient.QueryTriggerRunsByWorkspace
	// HTTP status codes to indicate success: http.StatusOK
	QueryTriggerRunsByWorkspace func(ctx context.Context, filterParameters azartifacts.RunFilterParameters, options *azartifacts.TriggerRunClientQueryTriggerRunsByWorkspaceOptions) (resp azfake.Responder[azartifacts.TriggerRunClientQueryTriggerRunsByWorkspaceResponse], errResp azfake.ErrorResponder)

	// RerunTriggerInstance is the fake for method TriggerRunClient.RerunTriggerInstance
	// HTTP status codes to indicate success: http.StatusOK
	RerunTriggerInstance func(ctx context.Context, triggerName string, runID string, options *azartifacts.TriggerRunClientRerunTriggerInstanceOptions) (resp azfake.Responder[azartifacts.TriggerRunClientRerunTriggerInstanceResponse], errResp azfake.ErrorResponder)
}

// NewTriggerRunServerTransport creates a new instance of TriggerRunServerTransport with the provided implementation.
// The returned TriggerRunServerTransport instance is connected to an instance of azartifacts.TriggerRunClient by way of the
// undefined.Transporter field.
func NewTriggerRunServerTransport(srv *TriggerRunServer) *TriggerRunServerTransport {
	return &TriggerRunServerTransport{srv: srv}
}

// TriggerRunServerTransport connects instances of azartifacts.TriggerRunClient to instances of TriggerRunServer.
// Don't use this type directly, use NewTriggerRunServerTransport instead.
type TriggerRunServerTransport struct {
	srv *TriggerRunServer
}

// Do implements the policy.Transporter interface for TriggerRunServerTransport.
func (t *TriggerRunServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "TriggerRunClient.CancelTriggerInstance":
		resp, err = t.dispatchCancelTriggerInstance(req)
	case "TriggerRunClient.QueryTriggerRunsByWorkspace":
		resp, err = t.dispatchQueryTriggerRunsByWorkspace(req)
	case "TriggerRunClient.RerunTriggerInstance":
		resp, err = t.dispatchRerunTriggerInstance(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (t *TriggerRunServerTransport) dispatchCancelTriggerInstance(req *http.Request) (*http.Response, error) {
	if t.srv.CancelTriggerInstance == nil {
		return nil, &nonRetriableError{errors.New("method CancelTriggerInstance not implemented")}
	}
	const regexStr = "/triggers/(?P<triggerName>[a-zA-Z0-9-_]+)/triggerRuns/(?P<runId>[a-zA-Z0-9-_]+)/cancel"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	respr, errRespr := t.srv.CancelTriggerInstance(req.Context(), matches[regex.SubexpIndex("triggerName")], matches[regex.SubexpIndex("runId")], nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (t *TriggerRunServerTransport) dispatchQueryTriggerRunsByWorkspace(req *http.Request) (*http.Response, error) {
	if t.srv.QueryTriggerRunsByWorkspace == nil {
		return nil, &nonRetriableError{errors.New("method QueryTriggerRunsByWorkspace not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[azartifacts.RunFilterParameters](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := t.srv.QueryTriggerRunsByWorkspace(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).TriggerRunsQueryResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (t *TriggerRunServerTransport) dispatchRerunTriggerInstance(req *http.Request) (*http.Response, error) {
	if t.srv.RerunTriggerInstance == nil {
		return nil, &nonRetriableError{errors.New("method RerunTriggerInstance not implemented")}
	}
	const regexStr = "/triggers/(?P<triggerName>[a-zA-Z0-9-_]+)/triggerRuns/(?P<runId>[a-zA-Z0-9-_]+)/rerun"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	respr, errRespr := t.srv.RerunTriggerInstance(req.Context(), matches[regex.SubexpIndex("triggerName")], matches[regex.SubexpIndex("runId")], nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
