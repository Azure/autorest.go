//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"azartifacts"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"regexp"
)

// KqlScriptServer is a fake server for instances of the azartifacts.KqlScriptClient type.
type KqlScriptServer struct {
	// BeginCreateOrUpdate is the fake for method KqlScriptClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginCreateOrUpdate func(ctx context.Context, kqlScriptName string, kqlScript azartifacts.KqlScriptResource, options *azartifacts.KqlScriptClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[azartifacts.KqlScriptClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDeleteByName is the fake for method KqlScriptClient.BeginDeleteByName
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDeleteByName func(ctx context.Context, kqlScriptName string, options *azartifacts.KqlScriptClientBeginDeleteByNameOptions) (resp azfake.PollerResponder[azartifacts.KqlScriptClientDeleteByNameResponse], errResp azfake.ErrorResponder)

	// GetByName is the fake for method KqlScriptClient.GetByName
	// HTTP status codes to indicate success: http.StatusOK
	GetByName func(ctx context.Context, kqlScriptName string, options *azartifacts.KqlScriptClientGetByNameOptions) (resp azfake.Responder[azartifacts.KqlScriptClientGetByNameResponse], errResp azfake.ErrorResponder)

	// BeginRename is the fake for method KqlScriptClient.BeginRename
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginRename func(ctx context.Context, kqlScriptName string, renameRequest azartifacts.ArtifactRenameRequest, options *azartifacts.KqlScriptClientBeginRenameOptions) (resp azfake.PollerResponder[azartifacts.KqlScriptClientRenameResponse], errResp azfake.ErrorResponder)
}

// NewKqlScriptServerTransport creates a new instance of KqlScriptServerTransport with the provided implementation.
// The returned KqlScriptServerTransport instance is connected to an instance of azartifacts.KqlScriptClient by way of the
// undefined.Transporter field.
func NewKqlScriptServerTransport(srv *KqlScriptServer) *KqlScriptServerTransport {
	return &KqlScriptServerTransport{srv: srv}
}

// KqlScriptServerTransport connects instances of azartifacts.KqlScriptClient to instances of KqlScriptServer.
// Don't use this type directly, use NewKqlScriptServerTransport instead.
type KqlScriptServerTransport struct {
	srv                 *KqlScriptServer
	beginCreateOrUpdate *azfake.PollerResponder[azartifacts.KqlScriptClientCreateOrUpdateResponse]
	beginDeleteByName   *azfake.PollerResponder[azartifacts.KqlScriptClientDeleteByNameResponse]
	beginRename         *azfake.PollerResponder[azartifacts.KqlScriptClientRenameResponse]
}

// Do implements the policy.Transporter interface for KqlScriptServerTransport.
func (k *KqlScriptServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "KqlScriptClient.BeginCreateOrUpdate":
		resp, err = k.dispatchBeginCreateOrUpdate(req)
	case "KqlScriptClient.BeginDeleteByName":
		resp, err = k.dispatchBeginDeleteByName(req)
	case "KqlScriptClient.GetByName":
		resp, err = k.dispatchGetByName(req)
	case "KqlScriptClient.BeginRename":
		resp, err = k.dispatchBeginRename(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (k *KqlScriptServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if k.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("method BeginCreateOrUpdate not implemented")}
	}
	if k.beginCreateOrUpdate == nil {
		const regexStr = "/kqlScripts/(?P<kqlScriptName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[azartifacts.KqlScriptResource](req)
		if err != nil {
			return nil, err
		}
		respr, errRespr := k.srv.BeginCreateOrUpdate(req.Context(), matches[regex.SubexpIndex("kqlScriptName")], body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		k.beginCreateOrUpdate = &respr
	}

	resp, err := server.PollerResponderNext(k.beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(k.beginCreateOrUpdate) {
		k.beginCreateOrUpdate = nil
	}

	return resp, nil
}

func (k *KqlScriptServerTransport) dispatchBeginDeleteByName(req *http.Request) (*http.Response, error) {
	if k.srv.BeginDeleteByName == nil {
		return nil, &nonRetriableError{errors.New("method BeginDeleteByName not implemented")}
	}
	if k.beginDeleteByName == nil {
		const regexStr = "/kqlScripts/(?P<kqlScriptName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		respr, errRespr := k.srv.BeginDeleteByName(req.Context(), matches[regex.SubexpIndex("kqlScriptName")], nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		k.beginDeleteByName = &respr
	}

	resp, err := server.PollerResponderNext(k.beginDeleteByName, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(k.beginDeleteByName) {
		k.beginDeleteByName = nil
	}

	return resp, nil
}

func (k *KqlScriptServerTransport) dispatchGetByName(req *http.Request) (*http.Response, error) {
	if k.srv.GetByName == nil {
		return nil, &nonRetriableError{errors.New("method GetByName not implemented")}
	}
	const regexStr = "/kqlScripts/(?P<kqlScriptName>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	respr, errRespr := k.srv.GetByName(req.Context(), matches[regex.SubexpIndex("kqlScriptName")], nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KqlScriptResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (k *KqlScriptServerTransport) dispatchBeginRename(req *http.Request) (*http.Response, error) {
	if k.srv.BeginRename == nil {
		return nil, &nonRetriableError{errors.New("method BeginRename not implemented")}
	}
	if k.beginRename == nil {
		const regexStr = "/kqlScripts/(?P<kqlScriptName>[a-zA-Z0-9-_]+)/rename"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[azartifacts.ArtifactRenameRequest](req)
		if err != nil {
			return nil, err
		}
		respr, errRespr := k.srv.BeginRename(req.Context(), matches[regex.SubexpIndex("kqlScriptName")], body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		k.beginRename = &respr
	}

	resp, err := server.PollerResponderNext(k.beginRename, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(k.beginRename) {
		k.beginRename = nil
	}

	return resp, nil
}
