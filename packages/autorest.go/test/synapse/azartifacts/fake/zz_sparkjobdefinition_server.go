//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"azartifacts"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
	"regexp"
)

// SparkJobDefinitionServer is a fake server for instances of the azartifacts.SparkJobDefinitionClient type.
type SparkJobDefinitionServer struct {
	// BeginCreateOrUpdateSparkJobDefinition is the fake for method SparkJobDefinitionClient.BeginCreateOrUpdateSparkJobDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginCreateOrUpdateSparkJobDefinition func(ctx context.Context, sparkJobDefinitionName string, sparkJobDefinition azartifacts.SparkJobDefinitionResource, options *azartifacts.SparkJobDefinitionClientBeginCreateOrUpdateSparkJobDefinitionOptions) (resp azfake.PollerResponder[azartifacts.SparkJobDefinitionClientCreateOrUpdateSparkJobDefinitionResponse], errResp azfake.ErrorResponder)

	// BeginDebugSparkJobDefinition is the fake for method SparkJobDefinitionClient.BeginDebugSparkJobDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginDebugSparkJobDefinition func(ctx context.Context, sparkJobDefinitionAzureResource azartifacts.SparkJobDefinitionResource, options *azartifacts.SparkJobDefinitionClientBeginDebugSparkJobDefinitionOptions) (resp azfake.PollerResponder[azartifacts.SparkJobDefinitionClientDebugSparkJobDefinitionResponse], errResp azfake.ErrorResponder)

	// BeginDeleteSparkJobDefinition is the fake for method SparkJobDefinitionClient.BeginDeleteSparkJobDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDeleteSparkJobDefinition func(ctx context.Context, sparkJobDefinitionName string, options *azartifacts.SparkJobDefinitionClientBeginDeleteSparkJobDefinitionOptions) (resp azfake.PollerResponder[azartifacts.SparkJobDefinitionClientDeleteSparkJobDefinitionResponse], errResp azfake.ErrorResponder)

	// BeginExecuteSparkJobDefinition is the fake for method SparkJobDefinitionClient.BeginExecuteSparkJobDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginExecuteSparkJobDefinition func(ctx context.Context, sparkJobDefinitionName string, options *azartifacts.SparkJobDefinitionClientBeginExecuteSparkJobDefinitionOptions) (resp azfake.PollerResponder[azartifacts.SparkJobDefinitionClientExecuteSparkJobDefinitionResponse], errResp azfake.ErrorResponder)

	// GetSparkJobDefinition is the fake for method SparkJobDefinitionClient.GetSparkJobDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNotModified
	GetSparkJobDefinition func(ctx context.Context, sparkJobDefinitionName string, options *azartifacts.SparkJobDefinitionClientGetSparkJobDefinitionOptions) (resp azfake.Responder[azartifacts.SparkJobDefinitionClientGetSparkJobDefinitionResponse], errResp azfake.ErrorResponder)

	// NewGetSparkJobDefinitionsByWorkspacePager is the fake for method SparkJobDefinitionClient.NewGetSparkJobDefinitionsByWorkspacePager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetSparkJobDefinitionsByWorkspacePager func(options *azartifacts.SparkJobDefinitionClientGetSparkJobDefinitionsByWorkspaceOptions) (resp azfake.PagerResponder[azartifacts.SparkJobDefinitionClientGetSparkJobDefinitionsByWorkspaceResponse])

	// BeginRenameSparkJobDefinition is the fake for method SparkJobDefinitionClient.BeginRenameSparkJobDefinition
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginRenameSparkJobDefinition func(ctx context.Context, sparkJobDefinitionName string, request azartifacts.ArtifactRenameRequest, options *azartifacts.SparkJobDefinitionClientBeginRenameSparkJobDefinitionOptions) (resp azfake.PollerResponder[azartifacts.SparkJobDefinitionClientRenameSparkJobDefinitionResponse], errResp azfake.ErrorResponder)
}

// NewSparkJobDefinitionServerTransport creates a new instance of SparkJobDefinitionServerTransport with the provided implementation.
// The returned SparkJobDefinitionServerTransport instance is connected to an instance of azartifacts.SparkJobDefinitionClient by way of the
// undefined.Transporter field.
func NewSparkJobDefinitionServerTransport(srv *SparkJobDefinitionServer) *SparkJobDefinitionServerTransport {
	return &SparkJobDefinitionServerTransport{srv: srv}
}

// SparkJobDefinitionServerTransport connects instances of azartifacts.SparkJobDefinitionClient to instances of SparkJobDefinitionServer.
// Don't use this type directly, use NewSparkJobDefinitionServerTransport instead.
type SparkJobDefinitionServerTransport struct {
	srv                                       *SparkJobDefinitionServer
	beginCreateOrUpdateSparkJobDefinition     *azfake.PollerResponder[azartifacts.SparkJobDefinitionClientCreateOrUpdateSparkJobDefinitionResponse]
	beginDebugSparkJobDefinition              *azfake.PollerResponder[azartifacts.SparkJobDefinitionClientDebugSparkJobDefinitionResponse]
	beginDeleteSparkJobDefinition             *azfake.PollerResponder[azartifacts.SparkJobDefinitionClientDeleteSparkJobDefinitionResponse]
	beginExecuteSparkJobDefinition            *azfake.PollerResponder[azartifacts.SparkJobDefinitionClientExecuteSparkJobDefinitionResponse]
	newGetSparkJobDefinitionsByWorkspacePager *azfake.PagerResponder[azartifacts.SparkJobDefinitionClientGetSparkJobDefinitionsByWorkspaceResponse]
	beginRenameSparkJobDefinition             *azfake.PollerResponder[azartifacts.SparkJobDefinitionClientRenameSparkJobDefinitionResponse]
}

// Do implements the policy.Transporter interface for SparkJobDefinitionServerTransport.
func (s *SparkJobDefinitionServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "SparkJobDefinitionClient.BeginCreateOrUpdateSparkJobDefinition":
		resp, err = s.dispatchBeginCreateOrUpdateSparkJobDefinition(req)
	case "SparkJobDefinitionClient.BeginDebugSparkJobDefinition":
		resp, err = s.dispatchBeginDebugSparkJobDefinition(req)
	case "SparkJobDefinitionClient.BeginDeleteSparkJobDefinition":
		resp, err = s.dispatchBeginDeleteSparkJobDefinition(req)
	case "SparkJobDefinitionClient.BeginExecuteSparkJobDefinition":
		resp, err = s.dispatchBeginExecuteSparkJobDefinition(req)
	case "SparkJobDefinitionClient.GetSparkJobDefinition":
		resp, err = s.dispatchGetSparkJobDefinition(req)
	case "SparkJobDefinitionClient.NewGetSparkJobDefinitionsByWorkspacePager":
		resp, err = s.dispatchNewGetSparkJobDefinitionsByWorkspacePager(req)
	case "SparkJobDefinitionClient.BeginRenameSparkJobDefinition":
		resp, err = s.dispatchBeginRenameSparkJobDefinition(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (s *SparkJobDefinitionServerTransport) dispatchBeginCreateOrUpdateSparkJobDefinition(req *http.Request) (*http.Response, error) {
	if s.srv.BeginCreateOrUpdateSparkJobDefinition == nil {
		return nil, &nonRetriableError{errors.New("method BeginCreateOrUpdateSparkJobDefinition not implemented")}
	}
	if s.beginCreateOrUpdateSparkJobDefinition == nil {
		const regexStr = "/sparkJobDefinitions/(?P<sparkJobDefinitionName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[azartifacts.SparkJobDefinitionResource](req)
		if err != nil {
			return nil, err
		}
		ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
		var options *azartifacts.SparkJobDefinitionClientBeginCreateOrUpdateSparkJobDefinitionOptions
		if ifMatchParam != nil {
			options = &azartifacts.SparkJobDefinitionClientBeginCreateOrUpdateSparkJobDefinitionOptions{
				IfMatch: ifMatchParam,
			}
		}
		respr, errRespr := s.srv.BeginCreateOrUpdateSparkJobDefinition(req.Context(), matches[regex.SubexpIndex("sparkJobDefinitionName")], body, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		s.beginCreateOrUpdateSparkJobDefinition = &respr
	}

	resp, err := server.PollerResponderNext(s.beginCreateOrUpdateSparkJobDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(s.beginCreateOrUpdateSparkJobDefinition) {
		s.beginCreateOrUpdateSparkJobDefinition = nil
	}

	return resp, nil
}

func (s *SparkJobDefinitionServerTransport) dispatchBeginDebugSparkJobDefinition(req *http.Request) (*http.Response, error) {
	if s.srv.BeginDebugSparkJobDefinition == nil {
		return nil, &nonRetriableError{errors.New("method BeginDebugSparkJobDefinition not implemented")}
	}
	if s.beginDebugSparkJobDefinition == nil {
		body, err := server.UnmarshalRequestAsJSON[azartifacts.SparkJobDefinitionResource](req)
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginDebugSparkJobDefinition(req.Context(), body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		s.beginDebugSparkJobDefinition = &respr
	}

	resp, err := server.PollerResponderNext(s.beginDebugSparkJobDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(s.beginDebugSparkJobDefinition) {
		s.beginDebugSparkJobDefinition = nil
	}

	return resp, nil
}

func (s *SparkJobDefinitionServerTransport) dispatchBeginDeleteSparkJobDefinition(req *http.Request) (*http.Response, error) {
	if s.srv.BeginDeleteSparkJobDefinition == nil {
		return nil, &nonRetriableError{errors.New("method BeginDeleteSparkJobDefinition not implemented")}
	}
	if s.beginDeleteSparkJobDefinition == nil {
		const regexStr = "/sparkJobDefinitions/(?P<sparkJobDefinitionName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		respr, errRespr := s.srv.BeginDeleteSparkJobDefinition(req.Context(), matches[regex.SubexpIndex("sparkJobDefinitionName")], nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		s.beginDeleteSparkJobDefinition = &respr
	}

	resp, err := server.PollerResponderNext(s.beginDeleteSparkJobDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(s.beginDeleteSparkJobDefinition) {
		s.beginDeleteSparkJobDefinition = nil
	}

	return resp, nil
}

func (s *SparkJobDefinitionServerTransport) dispatchBeginExecuteSparkJobDefinition(req *http.Request) (*http.Response, error) {
	if s.srv.BeginExecuteSparkJobDefinition == nil {
		return nil, &nonRetriableError{errors.New("method BeginExecuteSparkJobDefinition not implemented")}
	}
	if s.beginExecuteSparkJobDefinition == nil {
		const regexStr = "/sparkJobDefinitions/(?P<sparkJobDefinitionName>[a-zA-Z0-9-_]+)/execute"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		respr, errRespr := s.srv.BeginExecuteSparkJobDefinition(req.Context(), matches[regex.SubexpIndex("sparkJobDefinitionName")], nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		s.beginExecuteSparkJobDefinition = &respr
	}

	resp, err := server.PollerResponderNext(s.beginExecuteSparkJobDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(s.beginExecuteSparkJobDefinition) {
		s.beginExecuteSparkJobDefinition = nil
	}

	return resp, nil
}

func (s *SparkJobDefinitionServerTransport) dispatchGetSparkJobDefinition(req *http.Request) (*http.Response, error) {
	if s.srv.GetSparkJobDefinition == nil {
		return nil, &nonRetriableError{errors.New("method GetSparkJobDefinition not implemented")}
	}
	const regexStr = "/sparkJobDefinitions/(?P<sparkJobDefinitionName>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	ifNoneMatchParam := getOptional(getHeaderValue(req.Header, "If-None-Match"))
	var options *azartifacts.SparkJobDefinitionClientGetSparkJobDefinitionOptions
	if ifNoneMatchParam != nil {
		options = &azartifacts.SparkJobDefinitionClientGetSparkJobDefinitionOptions{
			IfNoneMatch: ifNoneMatchParam,
		}
	}
	respr, errRespr := s.srv.GetSparkJobDefinition(req.Context(), matches[regex.SubexpIndex("sparkJobDefinitionName")], options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNotModified}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNotModified", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SparkJobDefinitionResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SparkJobDefinitionServerTransport) dispatchNewGetSparkJobDefinitionsByWorkspacePager(req *http.Request) (*http.Response, error) {
	if s.srv.NewGetSparkJobDefinitionsByWorkspacePager == nil {
		return nil, &nonRetriableError{errors.New("method NewGetSparkJobDefinitionsByWorkspacePager not implemented")}
	}
	if s.newGetSparkJobDefinitionsByWorkspacePager == nil {
		resp := s.srv.NewGetSparkJobDefinitionsByWorkspacePager(nil)
		s.newGetSparkJobDefinitionsByWorkspacePager = &resp
		server.PagerResponderInjectNextLinks(s.newGetSparkJobDefinitionsByWorkspacePager, req, func(page *azartifacts.SparkJobDefinitionClientGetSparkJobDefinitionsByWorkspaceResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(s.newGetSparkJobDefinitionsByWorkspacePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(s.newGetSparkJobDefinitionsByWorkspacePager) {
		s.newGetSparkJobDefinitionsByWorkspacePager = nil
	}
	return resp, nil
}

func (s *SparkJobDefinitionServerTransport) dispatchBeginRenameSparkJobDefinition(req *http.Request) (*http.Response, error) {
	if s.srv.BeginRenameSparkJobDefinition == nil {
		return nil, &nonRetriableError{errors.New("method BeginRenameSparkJobDefinition not implemented")}
	}
	if s.beginRenameSparkJobDefinition == nil {
		const regexStr = "/sparkJobDefinitions/(?P<sparkJobDefinitionName>[a-zA-Z0-9-_]+)/rename"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[azartifacts.ArtifactRenameRequest](req)
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginRenameSparkJobDefinition(req.Context(), matches[regex.SubexpIndex("sparkJobDefinitionName")], body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		s.beginRenameSparkJobDefinition = &respr
	}

	resp, err := server.PollerResponderNext(s.beginRenameSparkJobDefinition, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(s.beginRenameSparkJobDefinition) {
		s.beginRenameSparkJobDefinition = nil
	}

	return resp, nil
}
