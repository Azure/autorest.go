//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"azartifacts"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"regexp"
)

// MetastoreServer is a fake server for instances of the azartifacts.MetastoreClient type.
type MetastoreServer struct {
	// Delete is the fake for method MetastoreClient.Delete
	// HTTP status codes to indicate success: http.StatusNoContent
	Delete func(ctx context.Context, id string, options *azartifacts.MetastoreClientDeleteOptions) (resp azfake.Responder[azartifacts.MetastoreClientDeleteResponse], errResp azfake.ErrorResponder)

	// GetDatabaseOperations is the fake for method MetastoreClient.GetDatabaseOperations
	// HTTP status codes to indicate success: http.StatusOK
	GetDatabaseOperations func(ctx context.Context, id string, options *azartifacts.MetastoreClientGetDatabaseOperationsOptions) (resp azfake.Responder[azartifacts.MetastoreClientGetDatabaseOperationsResponse], errResp azfake.ErrorResponder)

	// Register is the fake for method MetastoreClient.Register
	// HTTP status codes to indicate success: http.StatusCreated
	Register func(ctx context.Context, id string, registerBody azartifacts.MetastoreRegisterObject, options *azartifacts.MetastoreClientRegisterOptions) (resp azfake.Responder[azartifacts.MetastoreClientRegisterResponse], errResp azfake.ErrorResponder)

	// Update is the fake for method MetastoreClient.Update
	// HTTP status codes to indicate success: http.StatusCreated
	Update func(ctx context.Context, id string, updateBody azartifacts.MetastoreUpdateObject, options *azartifacts.MetastoreClientUpdateOptions) (resp azfake.Responder[azartifacts.MetastoreClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewMetastoreServerTransport creates a new instance of MetastoreServerTransport with the provided implementation.
// The returned MetastoreServerTransport instance is connected to an instance of azartifacts.MetastoreClient by way of the
// undefined.Transporter field.
func NewMetastoreServerTransport(srv *MetastoreServer) *MetastoreServerTransport {
	return &MetastoreServerTransport{srv: srv}
}

// MetastoreServerTransport connects instances of azartifacts.MetastoreClient to instances of MetastoreServer.
// Don't use this type directly, use NewMetastoreServerTransport instead.
type MetastoreServerTransport struct {
	srv *MetastoreServer
}

// Do implements the policy.Transporter interface for MetastoreServerTransport.
func (m *MetastoreServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "MetastoreClient.Delete":
		resp, err = m.dispatchDelete(req)
	case "MetastoreClient.GetDatabaseOperations":
		resp, err = m.dispatchGetDatabaseOperations(req)
	case "MetastoreClient.Register":
		resp, err = m.dispatchRegister(req)
	case "MetastoreClient.Update":
		resp, err = m.dispatchUpdate(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (m *MetastoreServerTransport) dispatchDelete(req *http.Request) (*http.Response, error) {
	if m.srv.Delete == nil {
		return nil, &nonRetriableError{errors.New("method Delete not implemented")}
	}
	const regexStr = "/metastore/databases/(?P<id>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	respr, errRespr := m.srv.Delete(req.Context(), matches[regex.SubexpIndex("id")], nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MetastoreServerTransport) dispatchGetDatabaseOperations(req *http.Request) (*http.Response, error) {
	if m.srv.GetDatabaseOperations == nil {
		return nil, &nonRetriableError{errors.New("method GetDatabaseOperations not implemented")}
	}
	const regexStr = "/metastore/create-database-operations/(?P<id>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	respr, errRespr := m.srv.GetDatabaseOperations(req.Context(), matches[regex.SubexpIndex("id")], nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MetastoreRequestSuccessResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MetastoreServerTransport) dispatchRegister(req *http.Request) (*http.Response, error) {
	if m.srv.Register == nil {
		return nil, &nonRetriableError{errors.New("method Register not implemented")}
	}
	const regexStr = "/metastore/create-database-operations/(?P<id>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[azartifacts.MetastoreRegisterObject](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.Register(req.Context(), matches[regex.SubexpIndex("id")], body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MetastoreRegistrationResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MetastoreServerTransport) dispatchUpdate(req *http.Request) (*http.Response, error) {
	if m.srv.Update == nil {
		return nil, &nonRetriableError{errors.New("method Update not implemented")}
	}
	const regexStr = "/metastore/update-database-operations/(?P<id>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[azartifacts.MetastoreUpdateObject](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.Update(req.Context(), matches[regex.SubexpIndex("id")], body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MetastoreUpdationResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
