//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"azartifacts"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// WorkspaceGitRepoManagementServer is a fake server for instances of the azartifacts.WorkspaceGitRepoManagementClient type.
type WorkspaceGitRepoManagementServer struct {
	// GetGitHubAccessToken is the fake for method WorkspaceGitRepoManagementClient.GetGitHubAccessToken
	// HTTP status codes to indicate success: http.StatusOK
	GetGitHubAccessToken func(ctx context.Context, gitHubAccessTokenRequest azartifacts.GitHubAccessTokenRequest, options *azartifacts.WorkspaceGitRepoManagementClientGetGitHubAccessTokenOptions) (resp azfake.Responder[azartifacts.WorkspaceGitRepoManagementClientGetGitHubAccessTokenResponse], errResp azfake.ErrorResponder)
}

// NewWorkspaceGitRepoManagementServerTransport creates a new instance of WorkspaceGitRepoManagementServerTransport with the provided implementation.
// The returned WorkspaceGitRepoManagementServerTransport instance is connected to an instance of azartifacts.WorkspaceGitRepoManagementClient by way of the
// undefined.Transporter field.
func NewWorkspaceGitRepoManagementServerTransport(srv *WorkspaceGitRepoManagementServer) *WorkspaceGitRepoManagementServerTransport {
	return &WorkspaceGitRepoManagementServerTransport{srv: srv}
}

// WorkspaceGitRepoManagementServerTransport connects instances of azartifacts.WorkspaceGitRepoManagementClient to instances of WorkspaceGitRepoManagementServer.
// Don't use this type directly, use NewWorkspaceGitRepoManagementServerTransport instead.
type WorkspaceGitRepoManagementServerTransport struct {
	srv *WorkspaceGitRepoManagementServer
}

// Do implements the policy.Transporter interface for WorkspaceGitRepoManagementServerTransport.
func (w *WorkspaceGitRepoManagementServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "WorkspaceGitRepoManagementClient.GetGitHubAccessToken":
		resp, err = w.dispatchGetGitHubAccessToken(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (w *WorkspaceGitRepoManagementServerTransport) dispatchGetGitHubAccessToken(req *http.Request) (*http.Response, error) {
	if w.srv.GetGitHubAccessToken == nil {
		return nil, &nonRetriableError{errors.New("method GetGitHubAccessToken not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[azartifacts.GitHubAccessTokenRequest](req)
	if err != nil {
		return nil, err
	}
	clientRequestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-request-id"))
	var options *azartifacts.WorkspaceGitRepoManagementClientGetGitHubAccessTokenOptions
	if clientRequestIDParam != nil {
		options = &azartifacts.WorkspaceGitRepoManagementClientGetGitHubAccessTokenOptions{
			ClientRequestID: clientRequestIDParam,
		}
	}
	respr, errRespr := w.srv.GetGitHubAccessToken(req.Context(), body, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).GitHubAccessTokenResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
