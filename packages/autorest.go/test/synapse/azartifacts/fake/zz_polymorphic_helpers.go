//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"azartifacts"
	"encoding/json"
)

func unmarshalActivityClassification(rawMsg json.RawMessage) (azartifacts.ActivityClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b azartifacts.ActivityClassification
	switch m["type"] {
	case "AppendVariable":
		b = &azartifacts.AppendVariableActivity{}
	case "AzureDataExplorerCommand":
		b = &azartifacts.AzureDataExplorerCommandActivity{}
	case "AzureFunctionActivity":
		b = &azartifacts.AzureFunctionActivity{}
	case "AzureMLBatchExecution":
		b = &azartifacts.AzureMLBatchExecutionActivity{}
	case "AzureMLExecutePipeline":
		b = &azartifacts.AzureMLExecutePipelineActivity{}
	case "AzureMLUpdateResource":
		b = &azartifacts.AzureMLUpdateResourceActivity{}
	case "Container":
		b = &azartifacts.ControlActivity{}
	case "Copy":
		b = &azartifacts.CopyActivity{}
	case "Custom":
		b = &azartifacts.CustomActivity{}
	case "DataLakeAnalyticsU-SQL":
		b = &azartifacts.DataLakeAnalyticsUSQLActivity{}
	case "DatabricksNotebook":
		b = &azartifacts.DatabricksNotebookActivity{}
	case "DatabricksSparkJar":
		b = &azartifacts.DatabricksSparkJarActivity{}
	case "DatabricksSparkPython":
		b = &azartifacts.DatabricksSparkPythonActivity{}
	case "Delete":
		b = &azartifacts.DeleteActivity{}
	case "ExecuteDataFlow":
		b = &azartifacts.ExecuteDataFlowActivity{}
	case "ExecutePipeline":
		b = &azartifacts.ExecutePipelineActivity{}
	case "ExecuteSSISPackage":
		b = &azartifacts.ExecuteSSISPackageActivity{}
	case "Execution":
		b = &azartifacts.ExecutionActivity{}
	case "Fail":
		b = &azartifacts.FailActivity{}
	case "Filter":
		b = &azartifacts.FilterActivity{}
	case "ForEach":
		b = &azartifacts.ForEachActivity{}
	case "GetMetadata":
		b = &azartifacts.GetMetadataActivity{}
	case "HDInsightHive":
		b = &azartifacts.HDInsightHiveActivity{}
	case "HDInsightMapReduce":
		b = &azartifacts.HDInsightMapReduceActivity{}
	case "HDInsightPig":
		b = &azartifacts.HDInsightPigActivity{}
	case "HDInsightSpark":
		b = &azartifacts.HDInsightSparkActivity{}
	case "HDInsightStreaming":
		b = &azartifacts.HDInsightStreamingActivity{}
	case "IfCondition":
		b = &azartifacts.IfConditionActivity{}
	case "Lookup":
		b = &azartifacts.LookupActivity{}
	case "Script":
		b = &azartifacts.ScriptActivity{}
	case "SetVariable":
		b = &azartifacts.SetVariableActivity{}
	case "SparkJob":
		b = &azartifacts.SynapseSparkJobDefinitionActivity{}
	case "SqlPoolStoredProcedure":
		b = &azartifacts.SQLPoolStoredProcedureActivity{}
	case "SqlServerStoredProcedure":
		b = &azartifacts.SQLServerStoredProcedureActivity{}
	case "Switch":
		b = &azartifacts.SwitchActivity{}
	case "SynapseNotebook":
		b = &azartifacts.SynapseNotebookActivity{}
	case "Until":
		b = &azartifacts.UntilActivity{}
	case "Validation":
		b = &azartifacts.ValidationActivity{}
	case "Wait":
		b = &azartifacts.WaitActivity{}
	case "WebActivity":
		b = &azartifacts.WebActivity{}
	case "WebHook":
		b = &azartifacts.WebHookActivity{}
	default:
		b = &azartifacts.Activity{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalActivityClassificationArray(rawMsg json.RawMessage) ([]azartifacts.ActivityClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]azartifacts.ActivityClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalActivityClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalCompressionReadSettingsClassification(rawMsg json.RawMessage) (azartifacts.CompressionReadSettingsClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b azartifacts.CompressionReadSettingsClassification
	switch m["type"] {
	case "TarGZipReadSettings":
		b = &azartifacts.TarGZipReadSettings{}
	case "TarReadSettings":
		b = &azartifacts.TarReadSettings{}
	case "ZipDeflateReadSettings":
		b = &azartifacts.ZipDeflateReadSettings{}
	default:
		b = &azartifacts.CompressionReadSettings{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalCopySinkClassification(rawMsg json.RawMessage) (azartifacts.CopySinkClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b azartifacts.CopySinkClassification
	switch m["type"] {
	case "AvroSink":
		b = &azartifacts.AvroSink{}
	case "AzureBlobFSSink":
		b = &azartifacts.AzureBlobFSSink{}
	case "AzureDataExplorerSink":
		b = &azartifacts.AzureDataExplorerSink{}
	case "AzureDataLakeStoreSink":
		b = &azartifacts.AzureDataLakeStoreSink{}
	case "AzureDatabricksDeltaLakeSink":
		b = &azartifacts.AzureDatabricksDeltaLakeSink{}
	case "AzureMySqlSink":
		b = &azartifacts.AzureMySQLSink{}
	case "AzurePostgreSqlSink":
		b = &azartifacts.AzurePostgreSQLSink{}
	case "AzureQueueSink":
		b = &azartifacts.AzureQueueSink{}
	case "AzureSearchIndexSink":
		b = &azartifacts.AzureSearchIndexSink{}
	case "AzureSqlSink":
		b = &azartifacts.AzureSQLSink{}
	case "AzureTableSink":
		b = &azartifacts.AzureTableSink{}
	case "BinarySink":
		b = &azartifacts.BinarySink{}
	case "BlobSink":
		b = &azartifacts.BlobSink{}
	case "CommonDataServiceForAppsSink":
		b = &azartifacts.CommonDataServiceForAppsSink{}
	case "CosmosDbMongoDbApiSink":
		b = &azartifacts.CosmosDbMongoDbAPISink{}
	case "CosmosDbSqlApiSink":
		b = &azartifacts.CosmosDbSQLAPISink{}
	case "DelimitedTextSink":
		b = &azartifacts.DelimitedTextSink{}
	case "DocumentDbCollectionSink":
		b = &azartifacts.DocumentDbCollectionSink{}
	case "DynamicsCrmSink":
		b = &azartifacts.DynamicsCrmSink{}
	case "DynamicsSink":
		b = &azartifacts.DynamicsSink{}
	case "FileSystemSink":
		b = &azartifacts.FileSystemSink{}
	case "InformixSink":
		b = &azartifacts.InformixSink{}
	case "JsonSink":
		b = &azartifacts.JSONSink{}
	case "MicrosoftAccessSink":
		b = &azartifacts.MicrosoftAccessSink{}
	case "OdbcSink":
		b = &azartifacts.OdbcSink{}
	case "OracleSink":
		b = &azartifacts.OracleSink{}
	case "OrcSink":
		b = &azartifacts.OrcSink{}
	case "ParquetSink":
		b = &azartifacts.ParquetSink{}
	case "RestSink":
		b = &azartifacts.RestSink{}
	case "SalesforceServiceCloudSink":
		b = &azartifacts.SalesforceServiceCloudSink{}
	case "SalesforceSink":
		b = &azartifacts.SalesforceSink{}
	case "SapCloudForCustomerSink":
		b = &azartifacts.SapCloudForCustomerSink{}
	case "SnowflakeSink":
		b = &azartifacts.SnowflakeSink{}
	case "SqlDWSink":
		b = &azartifacts.SQLDWSink{}
	case "SqlMISink":
		b = &azartifacts.SQLMISink{}
	case "SqlServerSink":
		b = &azartifacts.SQLServerSink{}
	case "SqlSink":
		b = &azartifacts.SQLSink{}
	default:
		b = &azartifacts.CopySink{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalCopySourceClassification(rawMsg json.RawMessage) (azartifacts.CopySourceClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b azartifacts.CopySourceClassification
	switch m["type"] {
	case "AmazonMWSSource":
		b = &azartifacts.AmazonMWSSource{}
	case "AmazonRdsForOracleSource":
		b = &azartifacts.AmazonRdsForOracleSource{}
	case "AmazonRdsForSqlServerSource":
		b = &azartifacts.AmazonRdsForSQLServerSource{}
	case "AmazonRedshiftSource":
		b = &azartifacts.AmazonRedshiftSource{}
	case "AvroSource":
		b = &azartifacts.AvroSource{}
	case "AzureBlobFSSource":
		b = &azartifacts.AzureBlobFSSource{}
	case "AzureDataExplorerSource":
		b = &azartifacts.AzureDataExplorerSource{}
	case "AzureDataLakeStoreSource":
		b = &azartifacts.AzureDataLakeStoreSource{}
	case "AzureDatabricksDeltaLakeSource":
		b = &azartifacts.AzureDatabricksDeltaLakeSource{}
	case "AzureMariaDBSource":
		b = &azartifacts.AzureMariaDBSource{}
	case "AzureMySqlSource":
		b = &azartifacts.AzureMySQLSource{}
	case "AzurePostgreSqlSource":
		b = &azartifacts.AzurePostgreSQLSource{}
	case "AzureSqlSource":
		b = &azartifacts.AzureSQLSource{}
	case "AzureTableSource":
		b = &azartifacts.AzureTableSource{}
	case "BinarySource":
		b = &azartifacts.BinarySource{}
	case "BlobSource":
		b = &azartifacts.BlobSource{}
	case "CassandraSource":
		b = &azartifacts.CassandraSource{}
	case "CommonDataServiceForAppsSource":
		b = &azartifacts.CommonDataServiceForAppsSource{}
	case "ConcurSource":
		b = &azartifacts.ConcurSource{}
	case "CosmosDbMongoDbApiSource":
		b = &azartifacts.CosmosDbMongoDbAPISource{}
	case "CosmosDbSqlApiSource":
		b = &azartifacts.CosmosDbSQLAPISource{}
	case "CouchbaseSource":
		b = &azartifacts.CouchbaseSource{}
	case "Db2Source":
		b = &azartifacts.Db2Source{}
	case "DelimitedTextSource":
		b = &azartifacts.DelimitedTextSource{}
	case "DocumentDbCollectionSource":
		b = &azartifacts.DocumentDbCollectionSource{}
	case "DrillSource":
		b = &azartifacts.DrillSource{}
	case "DynamicsAXSource":
		b = &azartifacts.DynamicsAXSource{}
	case "DynamicsCrmSource":
		b = &azartifacts.DynamicsCrmSource{}
	case "DynamicsSource":
		b = &azartifacts.DynamicsSource{}
	case "EloquaSource":
		b = &azartifacts.EloquaSource{}
	case "ExcelSource":
		b = &azartifacts.ExcelSource{}
	case "FileSystemSource":
		b = &azartifacts.FileSystemSource{}
	case "GoogleAdWordsSource":
		b = &azartifacts.GoogleAdWordsSource{}
	case "GoogleBigQuerySource":
		b = &azartifacts.GoogleBigQuerySource{}
	case "GreenplumSource":
		b = &azartifacts.GreenplumSource{}
	case "HBaseSource":
		b = &azartifacts.HBaseSource{}
	case "HdfsSource":
		b = &azartifacts.HdfsSource{}
	case "HiveSource":
		b = &azartifacts.HiveSource{}
	case "HttpSource":
		b = &azartifacts.HTTPSource{}
	case "HubspotSource":
		b = &azartifacts.HubspotSource{}
	case "ImpalaSource":
		b = &azartifacts.ImpalaSource{}
	case "InformixSource":
		b = &azartifacts.InformixSource{}
	case "JiraSource":
		b = &azartifacts.JiraSource{}
	case "JsonSource":
		b = &azartifacts.JSONSource{}
	case "MagentoSource":
		b = &azartifacts.MagentoSource{}
	case "MariaDBSource":
		b = &azartifacts.MariaDBSource{}
	case "MarketoSource":
		b = &azartifacts.MarketoSource{}
	case "MicrosoftAccessSource":
		b = &azartifacts.MicrosoftAccessSource{}
	case "MongoDbAtlasSource":
		b = &azartifacts.MongoDbAtlasSource{}
	case "MongoDbSource":
		b = &azartifacts.MongoDbSource{}
	case "MongoDbV2Source":
		b = &azartifacts.MongoDbV2Source{}
	case "MySqlSource":
		b = &azartifacts.MySQLSource{}
	case "NetezzaSource":
		b = &azartifacts.NetezzaSource{}
	case "ODataSource":
		b = &azartifacts.ODataSource{}
	case "OdbcSource":
		b = &azartifacts.OdbcSource{}
	case "Office365Source":
		b = &azartifacts.Office365Source{}
	case "OracleServiceCloudSource":
		b = &azartifacts.OracleServiceCloudSource{}
	case "OracleSource":
		b = &azartifacts.OracleSource{}
	case "OrcSource":
		b = &azartifacts.OrcSource{}
	case "ParquetSource":
		b = &azartifacts.ParquetSource{}
	case "PaypalSource":
		b = &azartifacts.PaypalSource{}
	case "PhoenixSource":
		b = &azartifacts.PhoenixSource{}
	case "PostgreSqlSource":
		b = &azartifacts.PostgreSQLSource{}
	case "PrestoSource":
		b = &azartifacts.PrestoSource{}
	case "QuickBooksSource":
		b = &azartifacts.QuickBooksSource{}
	case "RelationalSource":
		b = &azartifacts.RelationalSource{}
	case "ResponsysSource":
		b = &azartifacts.ResponsysSource{}
	case "RestSource":
		b = &azartifacts.RestSource{}
	case "SalesforceMarketingCloudSource":
		b = &azartifacts.SalesforceMarketingCloudSource{}
	case "SalesforceServiceCloudSource":
		b = &azartifacts.SalesforceServiceCloudSource{}
	case "SalesforceSource":
		b = &azartifacts.SalesforceSource{}
	case "SapBwSource":
		b = &azartifacts.SapBwSource{}
	case "SapCloudForCustomerSource":
		b = &azartifacts.SapCloudForCustomerSource{}
	case "SapEccSource":
		b = &azartifacts.SapEccSource{}
	case "SapHanaSource":
		b = &azartifacts.SapHanaSource{}
	case "SapOdpSource":
		b = &azartifacts.SapOdpSource{}
	case "SapOpenHubSource":
		b = &azartifacts.SapOpenHubSource{}
	case "SapTableSource":
		b = &azartifacts.SapTableSource{}
	case "ServiceNowSource":
		b = &azartifacts.ServiceNowSource{}
	case "SharePointOnlineListSource":
		b = &azartifacts.SharePointOnlineListSource{}
	case "ShopifySource":
		b = &azartifacts.ShopifySource{}
	case "SnowflakeSource":
		b = &azartifacts.SnowflakeSource{}
	case "SparkSource":
		b = &azartifacts.SparkSource{}
	case "SqlDWSource":
		b = &azartifacts.SQLDWSource{}
	case "SqlMISource":
		b = &azartifacts.SQLMISource{}
	case "SqlServerSource":
		b = &azartifacts.SQLServerSource{}
	case "SqlSource":
		b = &azartifacts.SQLSource{}
	case "SquareSource":
		b = &azartifacts.SquareSource{}
	case "SybaseSource":
		b = &azartifacts.SybaseSource{}
	case "TabularSource":
		b = &azartifacts.TabularSource{}
	case "TeradataSource":
		b = &azartifacts.TeradataSource{}
	case "VerticaSource":
		b = &azartifacts.VerticaSource{}
	case "WebSource":
		b = &azartifacts.WebSource{}
	case "XeroSource":
		b = &azartifacts.XeroSource{}
	case "XmlSource":
		b = &azartifacts.XMLSource{}
	case "ZohoSource":
		b = &azartifacts.ZohoSource{}
	default:
		b = &azartifacts.CopySource{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalCustomSetupBaseClassification(rawMsg json.RawMessage) (azartifacts.CustomSetupBaseClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b azartifacts.CustomSetupBaseClassification
	switch m["type"] {
	default:
		b = &azartifacts.CustomSetupBase{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalCustomSetupBaseClassificationArray(rawMsg json.RawMessage) ([]azartifacts.CustomSetupBaseClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]azartifacts.CustomSetupBaseClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalCustomSetupBaseClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalDataFlowClassification(rawMsg json.RawMessage) (azartifacts.DataFlowClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b azartifacts.DataFlowClassification
	switch m["type"] {
	case "Flowlet":
		b = &azartifacts.Flowlet{}
	case "MappingDataFlow":
		b = &azartifacts.MappingDataFlow{}
	default:
		b = &azartifacts.DataFlow{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalDatasetClassification(rawMsg json.RawMessage) (azartifacts.DatasetClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b azartifacts.DatasetClassification
	switch m["type"] {
	case "AmazonMWSObject":
		b = &azartifacts.AmazonMWSObjectDataset{}
	case "AmazonRdsForOracleTable":
		b = &azartifacts.AmazonRdsForOracleTableDataset{}
	case "AmazonRdsForSqlServerTable":
		b = &azartifacts.AmazonRdsForSQLServerTableDataset{}
	case "AmazonRedshiftTable":
		b = &azartifacts.AmazonRedshiftTableDataset{}
	case "AmazonS3Object":
		b = &azartifacts.AmazonS3Dataset{}
	case "Avro":
		b = &azartifacts.AvroDataset{}
	case "AzureBlob":
		b = &azartifacts.AzureBlobDataset{}
	case "AzureBlobFSFile":
		b = &azartifacts.AzureBlobFSDataset{}
	case "AzureDataExplorerTable":
		b = &azartifacts.AzureDataExplorerTableDataset{}
	case "AzureDataLakeStoreFile":
		b = &azartifacts.AzureDataLakeStoreDataset{}
	case "AzureDatabricksDeltaLakeDataset":
		b = &azartifacts.AzureDatabricksDeltaLakeDataset{}
	case "AzureMariaDBTable":
		b = &azartifacts.AzureMariaDBTableDataset{}
	case "AzureMySqlTable":
		b = &azartifacts.AzureMySQLTableDataset{}
	case "AzurePostgreSqlTable":
		b = &azartifacts.AzurePostgreSQLTableDataset{}
	case "AzureSearchIndex":
		b = &azartifacts.AzureSearchIndexDataset{}
	case "AzureSqlDWTable":
		b = &azartifacts.AzureSQLDWTableDataset{}
	case "AzureSqlMITable":
		b = &azartifacts.AzureSQLMITableDataset{}
	case "AzureSqlTable":
		b = &azartifacts.AzureSQLTableDataset{}
	case "AzureTable":
		b = &azartifacts.AzureTableDataset{}
	case "Binary":
		b = &azartifacts.BinaryDataset{}
	case "CassandraTable":
		b = &azartifacts.CassandraTableDataset{}
	case "CommonDataServiceForAppsEntity":
		b = &azartifacts.CommonDataServiceForAppsEntityDataset{}
	case "ConcurObject":
		b = &azartifacts.ConcurObjectDataset{}
	case "CosmosDbMongoDbApiCollection":
		b = &azartifacts.CosmosDbMongoDbAPICollectionDataset{}
	case "CosmosDbSqlApiCollection":
		b = &azartifacts.CosmosDbSQLAPICollectionDataset{}
	case "CouchbaseTable":
		b = &azartifacts.CouchbaseTableDataset{}
	case "CustomDataset":
		b = &azartifacts.CustomDataset{}
	case "Db2Table":
		b = &azartifacts.Db2TableDataset{}
	case "DelimitedText":
		b = &azartifacts.DelimitedTextDataset{}
	case "DocumentDbCollection":
		b = &azartifacts.DocumentDbCollectionDataset{}
	case "DrillTable":
		b = &azartifacts.DrillTableDataset{}
	case "DynamicsAXResource":
		b = &azartifacts.DynamicsAXResourceDataset{}
	case "DynamicsCrmEntity":
		b = &azartifacts.DynamicsCrmEntityDataset{}
	case "DynamicsEntity":
		b = &azartifacts.DynamicsEntityDataset{}
	case "EloquaObject":
		b = &azartifacts.EloquaObjectDataset{}
	case "Excel":
		b = &azartifacts.ExcelDataset{}
	case "FileShare":
		b = &azartifacts.FileShareDataset{}
	case "GoogleAdWordsObject":
		b = &azartifacts.GoogleAdWordsObjectDataset{}
	case "GoogleBigQueryObject":
		b = &azartifacts.GoogleBigQueryObjectDataset{}
	case "GreenplumTable":
		b = &azartifacts.GreenplumTableDataset{}
	case "HBaseObject":
		b = &azartifacts.HBaseObjectDataset{}
	case "HiveObject":
		b = &azartifacts.HiveObjectDataset{}
	case "HttpFile":
		b = &azartifacts.HTTPDataset{}
	case "HubspotObject":
		b = &azartifacts.HubspotObjectDataset{}
	case "ImpalaObject":
		b = &azartifacts.ImpalaObjectDataset{}
	case "InformixTable":
		b = &azartifacts.InformixTableDataset{}
	case "JiraObject":
		b = &azartifacts.JiraObjectDataset{}
	case "Json":
		b = &azartifacts.JSONDataset{}
	case "MagentoObject":
		b = &azartifacts.MagentoObjectDataset{}
	case "MariaDBTable":
		b = &azartifacts.MariaDBTableDataset{}
	case "MarketoObject":
		b = &azartifacts.MarketoObjectDataset{}
	case "MicrosoftAccessTable":
		b = &azartifacts.MicrosoftAccessTableDataset{}
	case "MongoDbAtlasCollection":
		b = &azartifacts.MongoDbAtlasCollectionDataset{}
	case "MongoDbCollection":
		b = &azartifacts.MongoDbCollectionDataset{}
	case "MongoDbV2Collection":
		b = &azartifacts.MongoDbV2CollectionDataset{}
	case "MySqlTable":
		b = &azartifacts.MySQLTableDataset{}
	case "NetezzaTable":
		b = &azartifacts.NetezzaTableDataset{}
	case "ODataResource":
		b = &azartifacts.ODataResourceDataset{}
	case "OdbcTable":
		b = &azartifacts.OdbcTableDataset{}
	case "Office365Table":
		b = &azartifacts.Office365Dataset{}
	case "OracleServiceCloudObject":
		b = &azartifacts.OracleServiceCloudObjectDataset{}
	case "OracleTable":
		b = &azartifacts.OracleTableDataset{}
	case "Orc":
		b = &azartifacts.OrcDataset{}
	case "Parquet":
		b = &azartifacts.ParquetDataset{}
	case "PaypalObject":
		b = &azartifacts.PaypalObjectDataset{}
	case "PhoenixObject":
		b = &azartifacts.PhoenixObjectDataset{}
	case "PostgreSqlTable":
		b = &azartifacts.PostgreSQLTableDataset{}
	case "PrestoObject":
		b = &azartifacts.PrestoObjectDataset{}
	case "QuickBooksObject":
		b = &azartifacts.QuickBooksObjectDataset{}
	case "RelationalTable":
		b = &azartifacts.RelationalTableDataset{}
	case "ResponsysObject":
		b = &azartifacts.ResponsysObjectDataset{}
	case "RestResource":
		b = &azartifacts.RestResourceDataset{}
	case "SalesforceMarketingCloudObject":
		b = &azartifacts.SalesforceMarketingCloudObjectDataset{}
	case "SalesforceObject":
		b = &azartifacts.SalesforceObjectDataset{}
	case "SalesforceServiceCloudObject":
		b = &azartifacts.SalesforceServiceCloudObjectDataset{}
	case "SapBwCube":
		b = &azartifacts.SapBwCubeDataset{}
	case "SapCloudForCustomerResource":
		b = &azartifacts.SapCloudForCustomerResourceDataset{}
	case "SapEccResource":
		b = &azartifacts.SapEccResourceDataset{}
	case "SapHanaTable":
		b = &azartifacts.SapHanaTableDataset{}
	case "SapOdpResource":
		b = &azartifacts.SapOdpResourceDataset{}
	case "SapOpenHubTable":
		b = &azartifacts.SapOpenHubTableDataset{}
	case "SapTableResource":
		b = &azartifacts.SapTableResourceDataset{}
	case "ServiceNowObject":
		b = &azartifacts.ServiceNowObjectDataset{}
	case "SharePointOnlineListResource":
		b = &azartifacts.SharePointOnlineListResourceDataset{}
	case "ShopifyObject":
		b = &azartifacts.ShopifyObjectDataset{}
	case "SnowflakeTable":
		b = &azartifacts.SnowflakeDataset{}
	case "SparkObject":
		b = &azartifacts.SparkObjectDataset{}
	case "SqlServerTable":
		b = &azartifacts.SQLServerTableDataset{}
	case "SquareObject":
		b = &azartifacts.SquareObjectDataset{}
	case "SybaseTable":
		b = &azartifacts.SybaseTableDataset{}
	case "TeradataTable":
		b = &azartifacts.TeradataTableDataset{}
	case "VerticaTable":
		b = &azartifacts.VerticaTableDataset{}
	case "WebTable":
		b = &azartifacts.WebTableDataset{}
	case "XeroObject":
		b = &azartifacts.XeroObjectDataset{}
	case "Xml":
		b = &azartifacts.XMLDataset{}
	case "ZohoObject":
		b = &azartifacts.ZohoObjectDataset{}
	default:
		b = &azartifacts.Dataset{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalDatasetLocationClassification(rawMsg json.RawMessage) (azartifacts.DatasetLocationClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b azartifacts.DatasetLocationClassification
	switch m["type"] {
	case "AmazonS3Location":
		b = &azartifacts.AmazonS3Location{}
	case "AzureBlobFSLocation":
		b = &azartifacts.AzureBlobFSLocation{}
	case "AzureBlobStorageLocation":
		b = &azartifacts.AzureBlobStorageLocation{}
	case "AzureDataLakeStoreLocation":
		b = &azartifacts.AzureDataLakeStoreLocation{}
	case "AzureFileStorageLocation":
		b = &azartifacts.AzureFileStorageLocation{}
	case "FileServerLocation":
		b = &azartifacts.FileServerLocation{}
	case "FtpServerLocation":
		b = &azartifacts.FtpServerLocation{}
	case "GoogleCloudStorageLocation":
		b = &azartifacts.GoogleCloudStorageLocation{}
	case "HdfsLocation":
		b = &azartifacts.HdfsLocation{}
	case "HttpServerLocation":
		b = &azartifacts.HTTPServerLocation{}
	case "SftpLocation":
		b = &azartifacts.SftpLocation{}
	default:
		b = &azartifacts.DatasetLocation{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalDatasetStorageFormatClassification(rawMsg json.RawMessage) (azartifacts.DatasetStorageFormatClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b azartifacts.DatasetStorageFormatClassification
	switch m["type"] {
	case "AvroFormat":
		b = &azartifacts.AvroFormat{}
	case "JsonFormat":
		b = &azartifacts.JSONFormat{}
	case "OrcFormat":
		b = &azartifacts.OrcFormat{}
	case "ParquetFormat":
		b = &azartifacts.ParquetFormat{}
	case "TextFormat":
		b = &azartifacts.TextFormat{}
	default:
		b = &azartifacts.DatasetStorageFormat{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalDependencyReferenceClassification(rawMsg json.RawMessage) (azartifacts.DependencyReferenceClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b azartifacts.DependencyReferenceClassification
	switch m["type"] {
	case "SelfDependencyTumblingWindowTriggerReference":
		b = &azartifacts.SelfDependencyTumblingWindowTriggerReference{}
	case "TriggerDependencyReference":
		b = &azartifacts.TriggerDependencyReference{}
	case "TumblingWindowTriggerDependencyReference":
		b = &azartifacts.TumblingWindowTriggerDependencyReference{}
	default:
		b = &azartifacts.DependencyReference{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalDependencyReferenceClassificationArray(rawMsg json.RawMessage) ([]azartifacts.DependencyReferenceClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]azartifacts.DependencyReferenceClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalDependencyReferenceClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalFormatReadSettingsClassification(rawMsg json.RawMessage) (azartifacts.FormatReadSettingsClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b azartifacts.FormatReadSettingsClassification
	switch m["type"] {
	case "BinaryReadSettings":
		b = &azartifacts.BinaryReadSettings{}
	case "DelimitedTextReadSettings":
		b = &azartifacts.DelimitedTextReadSettings{}
	case "JsonReadSettings":
		b = &azartifacts.JSONReadSettings{}
	case "XmlReadSettings":
		b = &azartifacts.XMLReadSettings{}
	default:
		b = &azartifacts.FormatReadSettings{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalIntegrationRuntimeClassification(rawMsg json.RawMessage) (azartifacts.IntegrationRuntimeClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b azartifacts.IntegrationRuntimeClassification
	switch m["type"] {
	case string(azartifacts.IntegrationRuntimeTypeManaged):
		b = &azartifacts.ManagedIntegrationRuntime{}
	case string(azartifacts.IntegrationRuntimeTypeSelfHosted):
		b = &azartifacts.SelfHostedIntegrationRuntime{}
	default:
		b = &azartifacts.IntegrationRuntime{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalLinkedIntegrationRuntimeTypeClassification(rawMsg json.RawMessage) (azartifacts.LinkedIntegrationRuntimeTypeClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b azartifacts.LinkedIntegrationRuntimeTypeClassification
	switch m["authorizationType"] {
	case "Key":
		b = &azartifacts.LinkedIntegrationRuntimeKeyAuthorization{}
	case "RBAC":
		b = &azartifacts.LinkedIntegrationRuntimeRbacAuthorization{}
	default:
		b = &azartifacts.LinkedIntegrationRuntimeType{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalLinkedServiceClassification(rawMsg json.RawMessage) (azartifacts.LinkedServiceClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b azartifacts.LinkedServiceClassification
	switch m["type"] {
	case "AmazonMWS":
		b = &azartifacts.AmazonMWSLinkedService{}
	case "AmazonRdsForOracle":
		b = &azartifacts.AmazonRdsForOracleLinkedService{}
	case "AmazonRdsForSqlServer":
		b = &azartifacts.AmazonRdsForSQLServerLinkedService{}
	case "AmazonRedshift":
		b = &azartifacts.AmazonRedshiftLinkedService{}
	case "AmazonS3":
		b = &azartifacts.AmazonS3LinkedService{}
	case "AppFigures":
		b = &azartifacts.AppFiguresLinkedService{}
	case "Asana":
		b = &azartifacts.AsanaLinkedService{}
	case "AzureBatch":
		b = &azartifacts.AzureBatchLinkedService{}
	case "AzureBlobFS":
		b = &azartifacts.AzureBlobFSLinkedService{}
	case "AzureBlobStorage":
		b = &azartifacts.AzureBlobStorageLinkedService{}
	case "AzureDataExplorer":
		b = &azartifacts.AzureDataExplorerLinkedService{}
	case "AzureDataLakeAnalytics":
		b = &azartifacts.AzureDataLakeAnalyticsLinkedService{}
	case "AzureDataLakeStore":
		b = &azartifacts.AzureDataLakeStoreLinkedService{}
	case "AzureDatabricks":
		b = &azartifacts.AzureDatabricksLinkedService{}
	case "AzureDatabricksDeltaLake":
		b = &azartifacts.AzureDatabricksDeltaLakeLinkedService{}
	case "AzureFileStorage":
		b = &azartifacts.AzureFileStorageLinkedService{}
	case "AzureFunction":
		b = &azartifacts.AzureFunctionLinkedService{}
	case "AzureKeyVault":
		b = &azartifacts.AzureKeyVaultLinkedService{}
	case "AzureML":
		b = &azartifacts.AzureMLLinkedService{}
	case "AzureMLService":
		b = &azartifacts.AzureMLServiceLinkedService{}
	case "AzureMariaDB":
		b = &azartifacts.AzureMariaDBLinkedService{}
	case "AzureMySql":
		b = &azartifacts.AzureMySQLLinkedService{}
	case "AzurePostgreSql":
		b = &azartifacts.AzurePostgreSQLLinkedService{}
	case "AzureSearch":
		b = &azartifacts.AzureSearchLinkedService{}
	case "AzureSqlDW":
		b = &azartifacts.AzureSQLDWLinkedService{}
	case "AzureSqlDatabase":
		b = &azartifacts.AzureSQLDatabaseLinkedService{}
	case "AzureSqlMI":
		b = &azartifacts.AzureSQLMILinkedService{}
	case "AzureStorage":
		b = &azartifacts.AzureStorageLinkedService{}
	case "AzureSynapseArtifacts":
		b = &azartifacts.AzureSynapseArtifactsLinkedService{}
	case "AzureTableStorage":
		b = &azartifacts.AzureTableStorageLinkedService{}
	case "Cassandra":
		b = &azartifacts.CassandraLinkedService{}
	case "CommonDataServiceForApps":
		b = &azartifacts.CommonDataServiceForAppsLinkedService{}
	case "Concur":
		b = &azartifacts.ConcurLinkedService{}
	case "CosmosDb":
		b = &azartifacts.CosmosDbLinkedService{}
	case "CosmosDbMongoDbApi":
		b = &azartifacts.CosmosDbMongoDbAPILinkedService{}
	case "Couchbase":
		b = &azartifacts.CouchbaseLinkedService{}
	case "CustomDataSource":
		b = &azartifacts.CustomDataSourceLinkedService{}
	case "Dataworld":
		b = &azartifacts.DataworldLinkedService{}
	case "Db2":
		b = &azartifacts.Db2LinkedService{}
	case "Drill":
		b = &azartifacts.DrillLinkedService{}
	case "Dynamics":
		b = &azartifacts.DynamicsLinkedService{}
	case "DynamicsAX":
		b = &azartifacts.DynamicsAXLinkedService{}
	case "DynamicsCrm":
		b = &azartifacts.DynamicsCrmLinkedService{}
	case "Eloqua":
		b = &azartifacts.EloquaLinkedService{}
	case "FileServer":
		b = &azartifacts.FileServerLinkedService{}
	case "FtpServer":
		b = &azartifacts.FtpServerLinkedService{}
	case "GoogleAdWords":
		b = &azartifacts.GoogleAdWordsLinkedService{}
	case "GoogleBigQuery":
		b = &azartifacts.GoogleBigQueryLinkedService{}
	case "GoogleCloudStorage":
		b = &azartifacts.GoogleCloudStorageLinkedService{}
	case "GoogleSheets":
		b = &azartifacts.GoogleSheetsLinkedService{}
	case "Greenplum":
		b = &azartifacts.GreenplumLinkedService{}
	case "HBase":
		b = &azartifacts.HBaseLinkedService{}
	case "HDInsight":
		b = &azartifacts.HDInsightLinkedService{}
	case "HDInsightOnDemand":
		b = &azartifacts.HDInsightOnDemandLinkedService{}
	case "Hdfs":
		b = &azartifacts.HdfsLinkedService{}
	case "Hive":
		b = &azartifacts.HiveLinkedService{}
	case "HttpServer":
		b = &azartifacts.HTTPLinkedService{}
	case "Hubspot":
		b = &azartifacts.HubspotLinkedService{}
	case "Impala":
		b = &azartifacts.ImpalaLinkedService{}
	case "Informix":
		b = &azartifacts.InformixLinkedService{}
	case "Jira":
		b = &azartifacts.JiraLinkedService{}
	case "Magento":
		b = &azartifacts.MagentoLinkedService{}
	case "MariaDB":
		b = &azartifacts.MariaDBLinkedService{}
	case "Marketo":
		b = &azartifacts.MarketoLinkedService{}
	case "MicrosoftAccess":
		b = &azartifacts.MicrosoftAccessLinkedService{}
	case "MongoDb":
		b = &azartifacts.MongoDbLinkedService{}
	case "MongoDbAtlas":
		b = &azartifacts.MongoDbAtlasLinkedService{}
	case "MongoDbV2":
		b = &azartifacts.MongoDbV2LinkedService{}
	case "MySql":
		b = &azartifacts.MySQLLinkedService{}
	case "Netezza":
		b = &azartifacts.NetezzaLinkedService{}
	case "OData":
		b = &azartifacts.ODataLinkedService{}
	case "Odbc":
		b = &azartifacts.OdbcLinkedService{}
	case "Office365":
		b = &azartifacts.Office365LinkedService{}
	case "Oracle":
		b = &azartifacts.OracleLinkedService{}
	case "OracleServiceCloud":
		b = &azartifacts.OracleServiceCloudLinkedService{}
	case "Paypal":
		b = &azartifacts.PaypalLinkedService{}
	case "Phoenix":
		b = &azartifacts.PhoenixLinkedService{}
	case "PostgreSql":
		b = &azartifacts.PostgreSQLLinkedService{}
	case "PowerBIWorkspace":
		b = &azartifacts.PowerBIWorkspaceLinkedService{}
	case "Presto":
		b = &azartifacts.PrestoLinkedService{}
	case "QuickBooks":
		b = &azartifacts.QuickBooksLinkedService{}
	case "Quickbase":
		b = &azartifacts.QuickbaseLinkedService{}
	case "Responsys":
		b = &azartifacts.ResponsysLinkedService{}
	case "RestService":
		b = &azartifacts.RestServiceLinkedService{}
	case "Salesforce":
		b = &azartifacts.SalesforceLinkedService{}
	case "SalesforceMarketingCloud":
		b = &azartifacts.SalesforceMarketingCloudLinkedService{}
	case "SalesforceServiceCloud":
		b = &azartifacts.SalesforceServiceCloudLinkedService{}
	case "SapBW":
		b = &azartifacts.SapBWLinkedService{}
	case "SapCloudForCustomer":
		b = &azartifacts.SapCloudForCustomerLinkedService{}
	case "SapEcc":
		b = &azartifacts.SapEccLinkedService{}
	case "SapHana":
		b = &azartifacts.SapHanaLinkedService{}
	case "SapOdp":
		b = &azartifacts.SapOdpLinkedService{}
	case "SapOpenHub":
		b = &azartifacts.SapOpenHubLinkedService{}
	case "SapTable":
		b = &azartifacts.SapTableLinkedService{}
	case "ServiceNow":
		b = &azartifacts.ServiceNowLinkedService{}
	case "Sftp":
		b = &azartifacts.SftpServerLinkedService{}
	case "SharePointOnlineList":
		b = &azartifacts.SharePointOnlineListLinkedService{}
	case "Shopify":
		b = &azartifacts.ShopifyLinkedService{}
	case "Smartsheet":
		b = &azartifacts.SmartsheetLinkedService{}
	case "Snowflake":
		b = &azartifacts.SnowflakeLinkedService{}
	case "Spark":
		b = &azartifacts.SparkLinkedService{}
	case "SqlServer":
		b = &azartifacts.SQLServerLinkedService{}
	case "Square":
		b = &azartifacts.SquareLinkedService{}
	case "Sybase":
		b = &azartifacts.SybaseLinkedService{}
	case "TeamDesk":
		b = &azartifacts.TeamDeskLinkedService{}
	case "Teradata":
		b = &azartifacts.TeradataLinkedService{}
	case "Twilio":
		b = &azartifacts.TwilioLinkedService{}
	case "Vertica":
		b = &azartifacts.VerticaLinkedService{}
	case "Web":
		b = &azartifacts.WebLinkedService{}
	case "Xero":
		b = &azartifacts.XeroLinkedService{}
	case "Zendesk":
		b = &azartifacts.ZendeskLinkedService{}
	case "Zoho":
		b = &azartifacts.ZohoLinkedService{}
	default:
		b = &azartifacts.LinkedService{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalSecretBaseClassification(rawMsg json.RawMessage) (azartifacts.SecretBaseClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b azartifacts.SecretBaseClassification
	switch m["type"] {
	case "AzureKeyVaultSecret":
		b = &azartifacts.AzureKeyVaultSecretReference{}
	case "SecureString":
		b = &azartifacts.SecureString{}
	default:
		b = &azartifacts.SecretBase{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalStoreReadSettingsClassification(rawMsg json.RawMessage) (azartifacts.StoreReadSettingsClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b azartifacts.StoreReadSettingsClassification
	switch m["type"] {
	case "AmazonS3ReadSettings":
		b = &azartifacts.AmazonS3ReadSettings{}
	case "AzureBlobFSReadSettings":
		b = &azartifacts.AzureBlobFSReadSettings{}
	case "AzureBlobStorageReadSettings":
		b = &azartifacts.AzureBlobStorageReadSettings{}
	case "AzureDataLakeStoreReadSettings":
		b = &azartifacts.AzureDataLakeStoreReadSettings{}
	case "AzureFileStorageReadSettings":
		b = &azartifacts.AzureFileStorageReadSettings{}
	case "FileServerReadSettings":
		b = &azartifacts.FileServerReadSettings{}
	case "FtpReadSettings":
		b = &azartifacts.FtpReadSettings{}
	case "GoogleCloudStorageReadSettings":
		b = &azartifacts.GoogleCloudStorageReadSettings{}
	case "HdfsReadSettings":
		b = &azartifacts.HdfsReadSettings{}
	case "HttpReadSettings":
		b = &azartifacts.HTTPReadSettings{}
	case "SftpReadSettings":
		b = &azartifacts.SftpReadSettings{}
	default:
		b = &azartifacts.StoreReadSettings{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalStoreWriteSettingsClassification(rawMsg json.RawMessage) (azartifacts.StoreWriteSettingsClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b azartifacts.StoreWriteSettingsClassification
	switch m["type"] {
	case "AzureBlobFSWriteSettings":
		b = &azartifacts.AzureBlobFSWriteSettings{}
	case "AzureBlobStorageWriteSettings":
		b = &azartifacts.AzureBlobStorageWriteSettings{}
	case "AzureDataLakeStoreWriteSettings":
		b = &azartifacts.AzureDataLakeStoreWriteSettings{}
	case "AzureFileStorageWriteSettings":
		b = &azartifacts.AzureFileStorageWriteSettings{}
	case "FileServerWriteSettings":
		b = &azartifacts.FileServerWriteSettings{}
	case "SftpWriteSettings":
		b = &azartifacts.SftpWriteSettings{}
	default:
		b = &azartifacts.StoreWriteSettings{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalTriggerClassification(rawMsg json.RawMessage) (azartifacts.TriggerClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b azartifacts.TriggerClassification
	switch m["type"] {
	case "BlobEventsTrigger":
		b = &azartifacts.BlobEventsTrigger{}
	case "BlobTrigger":
		b = &azartifacts.BlobTrigger{}
	case "ChainingTrigger":
		b = &azartifacts.ChainingTrigger{}
	case "CustomEventsTrigger":
		b = &azartifacts.CustomEventsTrigger{}
	case "MultiplePipelineTrigger":
		b = &azartifacts.MultiplePipelineTrigger{}
	case "RerunTumblingWindowTrigger":
		b = &azartifacts.RerunTumblingWindowTrigger{}
	case "ScheduleTrigger":
		b = &azartifacts.ScheduleTrigger{}
	case "TumblingWindowTrigger":
		b = &azartifacts.TumblingWindowTrigger{}
	default:
		b = &azartifacts.Trigger{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalWebLinkedServiceTypePropertiesClassification(rawMsg json.RawMessage) (azartifacts.WebLinkedServiceTypePropertiesClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b azartifacts.WebLinkedServiceTypePropertiesClassification
	switch m["authenticationType"] {
	case string(azartifacts.WebAuthenticationTypeAnonymous):
		b = &azartifacts.WebAnonymousAuthentication{}
	case string(azartifacts.WebAuthenticationTypeBasic):
		b = &azartifacts.WebBasicAuthentication{}
	case string(azartifacts.WebAuthenticationTypeClientCertificate):
		b = &azartifacts.WebClientCertificateAuthentication{}
	default:
		b = &azartifacts.WebLinkedServiceTypeProperties{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}
