//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"azartifacts"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
	"reflect"
	"regexp"
	"strconv"
)

// PipelineServer is a fake server for instances of the azartifacts.PipelineClient type.
type PipelineServer struct {
	// BeginCreateOrUpdatePipeline is the fake for method PipelineClient.BeginCreateOrUpdatePipeline
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginCreateOrUpdatePipeline func(ctx context.Context, pipelineName string, pipeline azartifacts.PipelineResource, options *azartifacts.PipelineClientBeginCreateOrUpdatePipelineOptions) (resp azfake.PollerResponder[azartifacts.PipelineClientCreateOrUpdatePipelineResponse], errResp azfake.ErrorResponder)

	// CreatePipelineRun is the fake for method PipelineClient.CreatePipelineRun
	// HTTP status codes to indicate success: http.StatusAccepted
	CreatePipelineRun func(ctx context.Context, pipelineName string, options *azartifacts.PipelineClientCreatePipelineRunOptions) (resp azfake.Responder[azartifacts.PipelineClientCreatePipelineRunResponse], errResp azfake.ErrorResponder)

	// BeginDeletePipeline is the fake for method PipelineClient.BeginDeletePipeline
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDeletePipeline func(ctx context.Context, pipelineName string, options *azartifacts.PipelineClientBeginDeletePipelineOptions) (resp azfake.PollerResponder[azartifacts.PipelineClientDeletePipelineResponse], errResp azfake.ErrorResponder)

	// GetPipeline is the fake for method PipelineClient.GetPipeline
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNotModified
	GetPipeline func(ctx context.Context, pipelineName string, options *azartifacts.PipelineClientGetPipelineOptions) (resp azfake.Responder[azartifacts.PipelineClientGetPipelineResponse], errResp azfake.ErrorResponder)

	// NewGetPipelinesByWorkspacePager is the fake for method PipelineClient.NewGetPipelinesByWorkspacePager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetPipelinesByWorkspacePager func(options *azartifacts.PipelineClientGetPipelinesByWorkspaceOptions) (resp azfake.PagerResponder[azartifacts.PipelineClientGetPipelinesByWorkspaceResponse])

	// BeginRenamePipeline is the fake for method PipelineClient.BeginRenamePipeline
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginRenamePipeline func(ctx context.Context, pipelineName string, request azartifacts.ArtifactRenameRequest, options *azartifacts.PipelineClientBeginRenamePipelineOptions) (resp azfake.PollerResponder[azartifacts.PipelineClientRenamePipelineResponse], errResp azfake.ErrorResponder)
}

// NewPipelineServerTransport creates a new instance of PipelineServerTransport with the provided implementation.
// The returned PipelineServerTransport instance is connected to an instance of azartifacts.PipelineClient by way of the
// undefined.Transporter field.
func NewPipelineServerTransport(srv *PipelineServer) *PipelineServerTransport {
	return &PipelineServerTransport{srv: srv}
}

// PipelineServerTransport connects instances of azartifacts.PipelineClient to instances of PipelineServer.
// Don't use this type directly, use NewPipelineServerTransport instead.
type PipelineServerTransport struct {
	srv                             *PipelineServer
	beginCreateOrUpdatePipeline     *azfake.PollerResponder[azartifacts.PipelineClientCreateOrUpdatePipelineResponse]
	beginDeletePipeline             *azfake.PollerResponder[azartifacts.PipelineClientDeletePipelineResponse]
	newGetPipelinesByWorkspacePager *azfake.PagerResponder[azartifacts.PipelineClientGetPipelinesByWorkspaceResponse]
	beginRenamePipeline             *azfake.PollerResponder[azartifacts.PipelineClientRenamePipelineResponse]
}

// Do implements the policy.Transporter interface for PipelineServerTransport.
func (p *PipelineServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "PipelineClient.BeginCreateOrUpdatePipeline":
		resp, err = p.dispatchBeginCreateOrUpdatePipeline(req)
	case "PipelineClient.CreatePipelineRun":
		resp, err = p.dispatchCreatePipelineRun(req)
	case "PipelineClient.BeginDeletePipeline":
		resp, err = p.dispatchBeginDeletePipeline(req)
	case "PipelineClient.GetPipeline":
		resp, err = p.dispatchGetPipeline(req)
	case "PipelineClient.NewGetPipelinesByWorkspacePager":
		resp, err = p.dispatchNewGetPipelinesByWorkspacePager(req)
	case "PipelineClient.BeginRenamePipeline":
		resp, err = p.dispatchBeginRenamePipeline(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (p *PipelineServerTransport) dispatchBeginCreateOrUpdatePipeline(req *http.Request) (*http.Response, error) {
	if p.srv.BeginCreateOrUpdatePipeline == nil {
		return nil, &nonRetriableError{errors.New("method BeginCreateOrUpdatePipeline not implemented")}
	}
	if p.beginCreateOrUpdatePipeline == nil {
		const regexStr = "/pipelines/(?P<pipelineName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[azartifacts.PipelineResource](req)
		if err != nil {
			return nil, err
		}
		ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
		var options *azartifacts.PipelineClientBeginCreateOrUpdatePipelineOptions
		if ifMatchParam != nil {
			options = &azartifacts.PipelineClientBeginCreateOrUpdatePipelineOptions{
				IfMatch: ifMatchParam,
			}
		}
		respr, errRespr := p.srv.BeginCreateOrUpdatePipeline(req.Context(), matches[regex.SubexpIndex("pipelineName")], body, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		p.beginCreateOrUpdatePipeline = &respr
	}

	resp, err := server.PollerResponderNext(p.beginCreateOrUpdatePipeline, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(p.beginCreateOrUpdatePipeline) {
		p.beginCreateOrUpdatePipeline = nil
	}

	return resp, nil
}

func (p *PipelineServerTransport) dispatchCreatePipelineRun(req *http.Request) (*http.Response, error) {
	if p.srv.CreatePipelineRun == nil {
		return nil, &nonRetriableError{errors.New("method CreatePipelineRun not implemented")}
	}
	const regexStr = "/pipelines/(?P<pipelineName>[a-zA-Z0-9-_]+)/createRun"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	body, err := server.UnmarshalRequestAsJSON[map[string]any](req)
	if err != nil {
		return nil, err
	}
	referencePipelineRunIDParam := getOptional(qp.Get("referencePipelineRunId"))
	isRecoveryParam, err := parseOptional(qp.Get("isRecovery"), strconv.ParseBool)
	if err != nil {
		return nil, err
	}
	startActivityNameParam := getOptional(qp.Get("startActivityName"))
	var options *azartifacts.PipelineClientCreatePipelineRunOptions
	if referencePipelineRunIDParam != nil || isRecoveryParam != nil || startActivityNameParam != nil || !reflect.ValueOf(body).IsZero() {
		options = &azartifacts.PipelineClientCreatePipelineRunOptions{
			ReferencePipelineRunID: referencePipelineRunIDParam,
			IsRecovery:             isRecoveryParam,
			StartActivityName:      startActivityNameParam,
			Parameters:             body,
		}
	}
	respr, errRespr := p.srv.CreatePipelineRun(req.Context(), matches[regex.SubexpIndex("pipelineName")], options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusAccepted}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).CreateRunResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PipelineServerTransport) dispatchBeginDeletePipeline(req *http.Request) (*http.Response, error) {
	if p.srv.BeginDeletePipeline == nil {
		return nil, &nonRetriableError{errors.New("method BeginDeletePipeline not implemented")}
	}
	if p.beginDeletePipeline == nil {
		const regexStr = "/pipelines/(?P<pipelineName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		respr, errRespr := p.srv.BeginDeletePipeline(req.Context(), matches[regex.SubexpIndex("pipelineName")], nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		p.beginDeletePipeline = &respr
	}

	resp, err := server.PollerResponderNext(p.beginDeletePipeline, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(p.beginDeletePipeline) {
		p.beginDeletePipeline = nil
	}

	return resp, nil
}

func (p *PipelineServerTransport) dispatchGetPipeline(req *http.Request) (*http.Response, error) {
	if p.srv.GetPipeline == nil {
		return nil, &nonRetriableError{errors.New("method GetPipeline not implemented")}
	}
	const regexStr = "/pipelines/(?P<pipelineName>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	ifNoneMatchParam := getOptional(getHeaderValue(req.Header, "If-None-Match"))
	var options *azartifacts.PipelineClientGetPipelineOptions
	if ifNoneMatchParam != nil {
		options = &azartifacts.PipelineClientGetPipelineOptions{
			IfNoneMatch: ifNoneMatchParam,
		}
	}
	respr, errRespr := p.srv.GetPipeline(req.Context(), matches[regex.SubexpIndex("pipelineName")], options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNotModified}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNotModified", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).PipelineResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PipelineServerTransport) dispatchNewGetPipelinesByWorkspacePager(req *http.Request) (*http.Response, error) {
	if p.srv.NewGetPipelinesByWorkspacePager == nil {
		return nil, &nonRetriableError{errors.New("method NewGetPipelinesByWorkspacePager not implemented")}
	}
	if p.newGetPipelinesByWorkspacePager == nil {
		resp := p.srv.NewGetPipelinesByWorkspacePager(nil)
		p.newGetPipelinesByWorkspacePager = &resp
		server.PagerResponderInjectNextLinks(p.newGetPipelinesByWorkspacePager, req, func(page *azartifacts.PipelineClientGetPipelinesByWorkspaceResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(p.newGetPipelinesByWorkspacePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(p.newGetPipelinesByWorkspacePager) {
		p.newGetPipelinesByWorkspacePager = nil
	}
	return resp, nil
}

func (p *PipelineServerTransport) dispatchBeginRenamePipeline(req *http.Request) (*http.Response, error) {
	if p.srv.BeginRenamePipeline == nil {
		return nil, &nonRetriableError{errors.New("method BeginRenamePipeline not implemented")}
	}
	if p.beginRenamePipeline == nil {
		const regexStr = "/pipelines/(?P<pipelineName>[a-zA-Z0-9-_]+)/rename"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[azartifacts.ArtifactRenameRequest](req)
		if err != nil {
			return nil, err
		}
		respr, errRespr := p.srv.BeginRenamePipeline(req.Context(), matches[regex.SubexpIndex("pipelineName")], body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		p.beginRenamePipeline = &respr
	}

	resp, err := server.PollerResponderNext(p.beginRenamePipeline, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(p.beginRenamePipeline) {
		p.beginRenamePipeline = nil
	}

	return resp, nil
}
