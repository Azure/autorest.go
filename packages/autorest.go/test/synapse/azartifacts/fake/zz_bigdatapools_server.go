//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"azartifacts"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"regexp"
)

// BigDataPoolsServer is a fake server for instances of the azartifacts.BigDataPoolsClient type.
type BigDataPoolsServer struct {
	// Get is the fake for method BigDataPoolsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, bigDataPoolName string, options *azartifacts.BigDataPoolsClientGetOptions) (resp azfake.Responder[azartifacts.BigDataPoolsClientGetResponse], errResp azfake.ErrorResponder)

	// List is the fake for method BigDataPoolsClient.List
	// HTTP status codes to indicate success: http.StatusOK
	List func(ctx context.Context, options *azartifacts.BigDataPoolsClientListOptions) (resp azfake.Responder[azartifacts.BigDataPoolsClientListResponse], errResp azfake.ErrorResponder)
}

// NewBigDataPoolsServerTransport creates a new instance of BigDataPoolsServerTransport with the provided implementation.
// The returned BigDataPoolsServerTransport instance is connected to an instance of azartifacts.BigDataPoolsClient by way of the
// undefined.Transporter field.
func NewBigDataPoolsServerTransport(srv *BigDataPoolsServer) *BigDataPoolsServerTransport {
	return &BigDataPoolsServerTransport{srv: srv}
}

// BigDataPoolsServerTransport connects instances of azartifacts.BigDataPoolsClient to instances of BigDataPoolsServer.
// Don't use this type directly, use NewBigDataPoolsServerTransport instead.
type BigDataPoolsServerTransport struct {
	srv *BigDataPoolsServer
}

// Do implements the policy.Transporter interface for BigDataPoolsServerTransport.
func (b *BigDataPoolsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "BigDataPoolsClient.Get":
		resp, err = b.dispatchGet(req)
	case "BigDataPoolsClient.List":
		resp, err = b.dispatchList(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (b *BigDataPoolsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if b.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("method Get not implemented")}
	}
	const regexStr = "/bigDataPools/(?P<bigDataPoolName>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	respr, errRespr := b.srv.Get(req.Context(), matches[regex.SubexpIndex("bigDataPoolName")], nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).BigDataPoolResourceInfo, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (b *BigDataPoolsServerTransport) dispatchList(req *http.Request) (*http.Response, error) {
	if b.srv.List == nil {
		return nil, &nonRetriableError{errors.New("method List not implemented")}
	}
	respr, errRespr := b.srv.List(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).BigDataPoolResourceInfoListResult, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
