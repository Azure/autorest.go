//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"azartifacts"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
)

// KqlScriptsServer is a fake server for instances of the azartifacts.KqlScriptsClient type.
type KqlScriptsServer struct {
	// NewGetAllPager is the fake for method KqlScriptsClient.NewGetAllPager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetAllPager func(options *azartifacts.KqlScriptsClientGetAllOptions) (resp azfake.PagerResponder[azartifacts.KqlScriptsClientGetAllResponse])
}

// NewKqlScriptsServerTransport creates a new instance of KqlScriptsServerTransport with the provided implementation.
// The returned KqlScriptsServerTransport instance is connected to an instance of azartifacts.KqlScriptsClient by way of the
// undefined.Transporter field.
func NewKqlScriptsServerTransport(srv *KqlScriptsServer) *KqlScriptsServerTransport {
	return &KqlScriptsServerTransport{srv: srv}
}

// KqlScriptsServerTransport connects instances of azartifacts.KqlScriptsClient to instances of KqlScriptsServer.
// Don't use this type directly, use NewKqlScriptsServerTransport instead.
type KqlScriptsServerTransport struct {
	srv            *KqlScriptsServer
	newGetAllPager *azfake.PagerResponder[azartifacts.KqlScriptsClientGetAllResponse]
}

// Do implements the policy.Transporter interface for KqlScriptsServerTransport.
func (k *KqlScriptsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "KqlScriptsClient.NewGetAllPager":
		resp, err = k.dispatchNewGetAllPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (k *KqlScriptsServerTransport) dispatchNewGetAllPager(req *http.Request) (*http.Response, error) {
	if k.srv.NewGetAllPager == nil {
		return nil, &nonRetriableError{errors.New("method NewGetAllPager not implemented")}
	}
	if k.newGetAllPager == nil {
		resp := k.srv.NewGetAllPager(nil)
		k.newGetAllPager = &resp
		server.PagerResponderInjectNextLinks(k.newGetAllPager, req, func(page *azartifacts.KqlScriptsClientGetAllResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(k.newGetAllPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(k.newGetAllPager) {
		k.newGetAllPager = nil
	}
	return resp, nil
}
