//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"azartifacts"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
	"regexp"
)

// LinkedServiceServer is a fake server for instances of the azartifacts.LinkedServiceClient type.
type LinkedServiceServer struct {
	// BeginCreateOrUpdateLinkedService is the fake for method LinkedServiceClient.BeginCreateOrUpdateLinkedService
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginCreateOrUpdateLinkedService func(ctx context.Context, linkedServiceName string, linkedService azartifacts.LinkedServiceResource, options *azartifacts.LinkedServiceClientBeginCreateOrUpdateLinkedServiceOptions) (resp azfake.PollerResponder[azartifacts.LinkedServiceClientCreateOrUpdateLinkedServiceResponse], errResp azfake.ErrorResponder)

	// BeginDeleteLinkedService is the fake for method LinkedServiceClient.BeginDeleteLinkedService
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDeleteLinkedService func(ctx context.Context, linkedServiceName string, options *azartifacts.LinkedServiceClientBeginDeleteLinkedServiceOptions) (resp azfake.PollerResponder[azartifacts.LinkedServiceClientDeleteLinkedServiceResponse], errResp azfake.ErrorResponder)

	// GetLinkedService is the fake for method LinkedServiceClient.GetLinkedService
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNotModified
	GetLinkedService func(ctx context.Context, linkedServiceName string, options *azartifacts.LinkedServiceClientGetLinkedServiceOptions) (resp azfake.Responder[azartifacts.LinkedServiceClientGetLinkedServiceResponse], errResp azfake.ErrorResponder)

	// NewGetLinkedServicesByWorkspacePager is the fake for method LinkedServiceClient.NewGetLinkedServicesByWorkspacePager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetLinkedServicesByWorkspacePager func(options *azartifacts.LinkedServiceClientGetLinkedServicesByWorkspaceOptions) (resp azfake.PagerResponder[azartifacts.LinkedServiceClientGetLinkedServicesByWorkspaceResponse])

	// BeginRenameLinkedService is the fake for method LinkedServiceClient.BeginRenameLinkedService
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginRenameLinkedService func(ctx context.Context, linkedServiceName string, request azartifacts.ArtifactRenameRequest, options *azartifacts.LinkedServiceClientBeginRenameLinkedServiceOptions) (resp azfake.PollerResponder[azartifacts.LinkedServiceClientRenameLinkedServiceResponse], errResp azfake.ErrorResponder)
}

// NewLinkedServiceServerTransport creates a new instance of LinkedServiceServerTransport with the provided implementation.
// The returned LinkedServiceServerTransport instance is connected to an instance of azartifacts.LinkedServiceClient by way of the
// undefined.Transporter field.
func NewLinkedServiceServerTransport(srv *LinkedServiceServer) *LinkedServiceServerTransport {
	return &LinkedServiceServerTransport{srv: srv}
}

// LinkedServiceServerTransport connects instances of azartifacts.LinkedServiceClient to instances of LinkedServiceServer.
// Don't use this type directly, use NewLinkedServiceServerTransport instead.
type LinkedServiceServerTransport struct {
	srv                                  *LinkedServiceServer
	beginCreateOrUpdateLinkedService     *azfake.PollerResponder[azartifacts.LinkedServiceClientCreateOrUpdateLinkedServiceResponse]
	beginDeleteLinkedService             *azfake.PollerResponder[azartifacts.LinkedServiceClientDeleteLinkedServiceResponse]
	newGetLinkedServicesByWorkspacePager *azfake.PagerResponder[azartifacts.LinkedServiceClientGetLinkedServicesByWorkspaceResponse]
	beginRenameLinkedService             *azfake.PollerResponder[azartifacts.LinkedServiceClientRenameLinkedServiceResponse]
}

// Do implements the policy.Transporter interface for LinkedServiceServerTransport.
func (l *LinkedServiceServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "LinkedServiceClient.BeginCreateOrUpdateLinkedService":
		resp, err = l.dispatchBeginCreateOrUpdateLinkedService(req)
	case "LinkedServiceClient.BeginDeleteLinkedService":
		resp, err = l.dispatchBeginDeleteLinkedService(req)
	case "LinkedServiceClient.GetLinkedService":
		resp, err = l.dispatchGetLinkedService(req)
	case "LinkedServiceClient.NewGetLinkedServicesByWorkspacePager":
		resp, err = l.dispatchNewGetLinkedServicesByWorkspacePager(req)
	case "LinkedServiceClient.BeginRenameLinkedService":
		resp, err = l.dispatchBeginRenameLinkedService(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (l *LinkedServiceServerTransport) dispatchBeginCreateOrUpdateLinkedService(req *http.Request) (*http.Response, error) {
	if l.srv.BeginCreateOrUpdateLinkedService == nil {
		return nil, &nonRetriableError{errors.New("method BeginCreateOrUpdateLinkedService not implemented")}
	}
	if l.beginCreateOrUpdateLinkedService == nil {
		const regexStr = "/linkedservices/(?P<linkedServiceName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[azartifacts.LinkedServiceResource](req)
		if err != nil {
			return nil, err
		}
		ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
		var options *azartifacts.LinkedServiceClientBeginCreateOrUpdateLinkedServiceOptions
		if ifMatchParam != nil {
			options = &azartifacts.LinkedServiceClientBeginCreateOrUpdateLinkedServiceOptions{
				IfMatch: ifMatchParam,
			}
		}
		respr, errRespr := l.srv.BeginCreateOrUpdateLinkedService(req.Context(), matches[regex.SubexpIndex("linkedServiceName")], body, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		l.beginCreateOrUpdateLinkedService = &respr
	}

	resp, err := server.PollerResponderNext(l.beginCreateOrUpdateLinkedService, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(l.beginCreateOrUpdateLinkedService) {
		l.beginCreateOrUpdateLinkedService = nil
	}

	return resp, nil
}

func (l *LinkedServiceServerTransport) dispatchBeginDeleteLinkedService(req *http.Request) (*http.Response, error) {
	if l.srv.BeginDeleteLinkedService == nil {
		return nil, &nonRetriableError{errors.New("method BeginDeleteLinkedService not implemented")}
	}
	if l.beginDeleteLinkedService == nil {
		const regexStr = "/linkedservices/(?P<linkedServiceName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		respr, errRespr := l.srv.BeginDeleteLinkedService(req.Context(), matches[regex.SubexpIndex("linkedServiceName")], nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		l.beginDeleteLinkedService = &respr
	}

	resp, err := server.PollerResponderNext(l.beginDeleteLinkedService, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(l.beginDeleteLinkedService) {
		l.beginDeleteLinkedService = nil
	}

	return resp, nil
}

func (l *LinkedServiceServerTransport) dispatchGetLinkedService(req *http.Request) (*http.Response, error) {
	if l.srv.GetLinkedService == nil {
		return nil, &nonRetriableError{errors.New("method GetLinkedService not implemented")}
	}
	const regexStr = "/linkedservices/(?P<linkedServiceName>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	ifNoneMatchParam := getOptional(getHeaderValue(req.Header, "If-None-Match"))
	var options *azartifacts.LinkedServiceClientGetLinkedServiceOptions
	if ifNoneMatchParam != nil {
		options = &azartifacts.LinkedServiceClientGetLinkedServiceOptions{
			IfNoneMatch: ifNoneMatchParam,
		}
	}
	respr, errRespr := l.srv.GetLinkedService(req.Context(), matches[regex.SubexpIndex("linkedServiceName")], options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNotModified}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNotModified", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).LinkedServiceResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (l *LinkedServiceServerTransport) dispatchNewGetLinkedServicesByWorkspacePager(req *http.Request) (*http.Response, error) {
	if l.srv.NewGetLinkedServicesByWorkspacePager == nil {
		return nil, &nonRetriableError{errors.New("method NewGetLinkedServicesByWorkspacePager not implemented")}
	}
	if l.newGetLinkedServicesByWorkspacePager == nil {
		resp := l.srv.NewGetLinkedServicesByWorkspacePager(nil)
		l.newGetLinkedServicesByWorkspacePager = &resp
		server.PagerResponderInjectNextLinks(l.newGetLinkedServicesByWorkspacePager, req, func(page *azartifacts.LinkedServiceClientGetLinkedServicesByWorkspaceResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(l.newGetLinkedServicesByWorkspacePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(l.newGetLinkedServicesByWorkspacePager) {
		l.newGetLinkedServicesByWorkspacePager = nil
	}
	return resp, nil
}

func (l *LinkedServiceServerTransport) dispatchBeginRenameLinkedService(req *http.Request) (*http.Response, error) {
	if l.srv.BeginRenameLinkedService == nil {
		return nil, &nonRetriableError{errors.New("method BeginRenameLinkedService not implemented")}
	}
	if l.beginRenameLinkedService == nil {
		const regexStr = "/linkedservices/(?P<linkedServiceName>[a-zA-Z0-9-_]+)/rename"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[azartifacts.ArtifactRenameRequest](req)
		if err != nil {
			return nil, err
		}
		respr, errRespr := l.srv.BeginRenameLinkedService(req.Context(), matches[regex.SubexpIndex("linkedServiceName")], body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		l.beginRenameLinkedService = &respr
	}

	resp, err := server.PollerResponderNext(l.beginRenameLinkedService, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(l.beginRenameLinkedService) {
		l.beginRenameLinkedService = nil
	}

	return resp, nil
}
