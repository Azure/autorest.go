//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"azartifacts"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
	"regexp"
)

// DataFlowServer is a fake server for instances of the azartifacts.DataFlowClient type.
type DataFlowServer struct {
	// BeginCreateOrUpdateDataFlow is the fake for method DataFlowClient.BeginCreateOrUpdateDataFlow
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginCreateOrUpdateDataFlow func(ctx context.Context, dataFlowName string, dataFlow azartifacts.DataFlowResource, options *azartifacts.DataFlowClientBeginCreateOrUpdateDataFlowOptions) (resp azfake.PollerResponder[azartifacts.DataFlowClientCreateOrUpdateDataFlowResponse], errResp azfake.ErrorResponder)

	// BeginDeleteDataFlow is the fake for method DataFlowClient.BeginDeleteDataFlow
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDeleteDataFlow func(ctx context.Context, dataFlowName string, options *azartifacts.DataFlowClientBeginDeleteDataFlowOptions) (resp azfake.PollerResponder[azartifacts.DataFlowClientDeleteDataFlowResponse], errResp azfake.ErrorResponder)

	// GetDataFlow is the fake for method DataFlowClient.GetDataFlow
	// HTTP status codes to indicate success: http.StatusOK
	GetDataFlow func(ctx context.Context, dataFlowName string, options *azartifacts.DataFlowClientGetDataFlowOptions) (resp azfake.Responder[azartifacts.DataFlowClientGetDataFlowResponse], errResp azfake.ErrorResponder)

	// NewGetDataFlowsByWorkspacePager is the fake for method DataFlowClient.NewGetDataFlowsByWorkspacePager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetDataFlowsByWorkspacePager func(options *azartifacts.DataFlowClientGetDataFlowsByWorkspaceOptions) (resp azfake.PagerResponder[azartifacts.DataFlowClientGetDataFlowsByWorkspaceResponse])

	// BeginRenameDataFlow is the fake for method DataFlowClient.BeginRenameDataFlow
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginRenameDataFlow func(ctx context.Context, dataFlowName string, request azartifacts.ArtifactRenameRequest, options *azartifacts.DataFlowClientBeginRenameDataFlowOptions) (resp azfake.PollerResponder[azartifacts.DataFlowClientRenameDataFlowResponse], errResp azfake.ErrorResponder)
}

// NewDataFlowServerTransport creates a new instance of DataFlowServerTransport with the provided implementation.
// The returned DataFlowServerTransport instance is connected to an instance of azartifacts.DataFlowClient by way of the
// undefined.Transporter field.
func NewDataFlowServerTransport(srv *DataFlowServer) *DataFlowServerTransport {
	return &DataFlowServerTransport{srv: srv}
}

// DataFlowServerTransport connects instances of azartifacts.DataFlowClient to instances of DataFlowServer.
// Don't use this type directly, use NewDataFlowServerTransport instead.
type DataFlowServerTransport struct {
	srv                             *DataFlowServer
	beginCreateOrUpdateDataFlow     *azfake.PollerResponder[azartifacts.DataFlowClientCreateOrUpdateDataFlowResponse]
	beginDeleteDataFlow             *azfake.PollerResponder[azartifacts.DataFlowClientDeleteDataFlowResponse]
	newGetDataFlowsByWorkspacePager *azfake.PagerResponder[azartifacts.DataFlowClientGetDataFlowsByWorkspaceResponse]
	beginRenameDataFlow             *azfake.PollerResponder[azartifacts.DataFlowClientRenameDataFlowResponse]
}

// Do implements the policy.Transporter interface for DataFlowServerTransport.
func (d *DataFlowServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "DataFlowClient.BeginCreateOrUpdateDataFlow":
		resp, err = d.dispatchBeginCreateOrUpdateDataFlow(req)
	case "DataFlowClient.BeginDeleteDataFlow":
		resp, err = d.dispatchBeginDeleteDataFlow(req)
	case "DataFlowClient.GetDataFlow":
		resp, err = d.dispatchGetDataFlow(req)
	case "DataFlowClient.NewGetDataFlowsByWorkspacePager":
		resp, err = d.dispatchNewGetDataFlowsByWorkspacePager(req)
	case "DataFlowClient.BeginRenameDataFlow":
		resp, err = d.dispatchBeginRenameDataFlow(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (d *DataFlowServerTransport) dispatchBeginCreateOrUpdateDataFlow(req *http.Request) (*http.Response, error) {
	if d.srv.BeginCreateOrUpdateDataFlow == nil {
		return nil, &nonRetriableError{errors.New("method BeginCreateOrUpdateDataFlow not implemented")}
	}
	if d.beginCreateOrUpdateDataFlow == nil {
		const regexStr = "/dataflows/(?P<dataFlowName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[azartifacts.DataFlowResource](req)
		if err != nil {
			return nil, err
		}
		ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
		var options *azartifacts.DataFlowClientBeginCreateOrUpdateDataFlowOptions
		if ifMatchParam != nil {
			options = &azartifacts.DataFlowClientBeginCreateOrUpdateDataFlowOptions{
				IfMatch: ifMatchParam,
			}
		}
		respr, errRespr := d.srv.BeginCreateOrUpdateDataFlow(req.Context(), matches[regex.SubexpIndex("dataFlowName")], body, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		d.beginCreateOrUpdateDataFlow = &respr
	}

	resp, err := server.PollerResponderNext(d.beginCreateOrUpdateDataFlow, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(d.beginCreateOrUpdateDataFlow) {
		d.beginCreateOrUpdateDataFlow = nil
	}

	return resp, nil
}

func (d *DataFlowServerTransport) dispatchBeginDeleteDataFlow(req *http.Request) (*http.Response, error) {
	if d.srv.BeginDeleteDataFlow == nil {
		return nil, &nonRetriableError{errors.New("method BeginDeleteDataFlow not implemented")}
	}
	if d.beginDeleteDataFlow == nil {
		const regexStr = "/dataflows/(?P<dataFlowName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		respr, errRespr := d.srv.BeginDeleteDataFlow(req.Context(), matches[regex.SubexpIndex("dataFlowName")], nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		d.beginDeleteDataFlow = &respr
	}

	resp, err := server.PollerResponderNext(d.beginDeleteDataFlow, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(d.beginDeleteDataFlow) {
		d.beginDeleteDataFlow = nil
	}

	return resp, nil
}

func (d *DataFlowServerTransport) dispatchGetDataFlow(req *http.Request) (*http.Response, error) {
	if d.srv.GetDataFlow == nil {
		return nil, &nonRetriableError{errors.New("method GetDataFlow not implemented")}
	}
	const regexStr = "/dataflows/(?P<dataFlowName>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	ifNoneMatchParam := getOptional(getHeaderValue(req.Header, "If-None-Match"))
	var options *azartifacts.DataFlowClientGetDataFlowOptions
	if ifNoneMatchParam != nil {
		options = &azartifacts.DataFlowClientGetDataFlowOptions{
			IfNoneMatch: ifNoneMatchParam,
		}
	}
	respr, errRespr := d.srv.GetDataFlow(req.Context(), matches[regex.SubexpIndex("dataFlowName")], options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DataFlowResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DataFlowServerTransport) dispatchNewGetDataFlowsByWorkspacePager(req *http.Request) (*http.Response, error) {
	if d.srv.NewGetDataFlowsByWorkspacePager == nil {
		return nil, &nonRetriableError{errors.New("method NewGetDataFlowsByWorkspacePager not implemented")}
	}
	if d.newGetDataFlowsByWorkspacePager == nil {
		resp := d.srv.NewGetDataFlowsByWorkspacePager(nil)
		d.newGetDataFlowsByWorkspacePager = &resp
		server.PagerResponderInjectNextLinks(d.newGetDataFlowsByWorkspacePager, req, func(page *azartifacts.DataFlowClientGetDataFlowsByWorkspaceResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(d.newGetDataFlowsByWorkspacePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(d.newGetDataFlowsByWorkspacePager) {
		d.newGetDataFlowsByWorkspacePager = nil
	}
	return resp, nil
}

func (d *DataFlowServerTransport) dispatchBeginRenameDataFlow(req *http.Request) (*http.Response, error) {
	if d.srv.BeginRenameDataFlow == nil {
		return nil, &nonRetriableError{errors.New("method BeginRenameDataFlow not implemented")}
	}
	if d.beginRenameDataFlow == nil {
		const regexStr = "/dataflows/(?P<dataFlowName>[a-zA-Z0-9-_]+)/rename"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[azartifacts.ArtifactRenameRequest](req)
		if err != nil {
			return nil, err
		}
		respr, errRespr := d.srv.BeginRenameDataFlow(req.Context(), matches[regex.SubexpIndex("dataFlowName")], body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		d.beginRenameDataFlow = &respr
	}

	resp, err := server.PollerResponderNext(d.beginRenameDataFlow, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(d.beginRenameDataFlow) {
		d.beginRenameDataFlow = nil
	}

	return resp, nil
}
