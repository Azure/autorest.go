//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"azartifacts"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"regexp"
	"strconv"
)

// PipelineRunServer is a fake server for instances of the azartifacts.PipelineRunClient type.
type PipelineRunServer struct {
	// CancelPipelineRun is the fake for method PipelineRunClient.CancelPipelineRun
	// HTTP status codes to indicate success: http.StatusOK
	CancelPipelineRun func(ctx context.Context, runID string, options *azartifacts.PipelineRunClientCancelPipelineRunOptions) (resp azfake.Responder[azartifacts.PipelineRunClientCancelPipelineRunResponse], errResp azfake.ErrorResponder)

	// GetPipelineRun is the fake for method PipelineRunClient.GetPipelineRun
	// HTTP status codes to indicate success: http.StatusOK
	GetPipelineRun func(ctx context.Context, runID string, options *azartifacts.PipelineRunClientGetPipelineRunOptions) (resp azfake.Responder[azartifacts.PipelineRunClientGetPipelineRunResponse], errResp azfake.ErrorResponder)

	// QueryActivityRuns is the fake for method PipelineRunClient.QueryActivityRuns
	// HTTP status codes to indicate success: http.StatusOK
	QueryActivityRuns func(ctx context.Context, pipelineName string, runID string, filterParameters azartifacts.RunFilterParameters, options *azartifacts.PipelineRunClientQueryActivityRunsOptions) (resp azfake.Responder[azartifacts.PipelineRunClientQueryActivityRunsResponse], errResp azfake.ErrorResponder)

	// QueryPipelineRunsByWorkspace is the fake for method PipelineRunClient.QueryPipelineRunsByWorkspace
	// HTTP status codes to indicate success: http.StatusOK
	QueryPipelineRunsByWorkspace func(ctx context.Context, filterParameters azartifacts.RunFilterParameters, options *azartifacts.PipelineRunClientQueryPipelineRunsByWorkspaceOptions) (resp azfake.Responder[azartifacts.PipelineRunClientQueryPipelineRunsByWorkspaceResponse], errResp azfake.ErrorResponder)
}

// NewPipelineRunServerTransport creates a new instance of PipelineRunServerTransport with the provided implementation.
// The returned PipelineRunServerTransport instance is connected to an instance of azartifacts.PipelineRunClient by way of the
// undefined.Transporter field.
func NewPipelineRunServerTransport(srv *PipelineRunServer) *PipelineRunServerTransport {
	return &PipelineRunServerTransport{srv: srv}
}

// PipelineRunServerTransport connects instances of azartifacts.PipelineRunClient to instances of PipelineRunServer.
// Don't use this type directly, use NewPipelineRunServerTransport instead.
type PipelineRunServerTransport struct {
	srv *PipelineRunServer
}

// Do implements the policy.Transporter interface for PipelineRunServerTransport.
func (p *PipelineRunServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "PipelineRunClient.CancelPipelineRun":
		resp, err = p.dispatchCancelPipelineRun(req)
	case "PipelineRunClient.GetPipelineRun":
		resp, err = p.dispatchGetPipelineRun(req)
	case "PipelineRunClient.QueryActivityRuns":
		resp, err = p.dispatchQueryActivityRuns(req)
	case "PipelineRunClient.QueryPipelineRunsByWorkspace":
		resp, err = p.dispatchQueryPipelineRunsByWorkspace(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (p *PipelineRunServerTransport) dispatchCancelPipelineRun(req *http.Request) (*http.Response, error) {
	if p.srv.CancelPipelineRun == nil {
		return nil, &nonRetriableError{errors.New("method CancelPipelineRun not implemented")}
	}
	const regexStr = "/pipelineruns/(?P<runId>[a-zA-Z0-9-_]+)/cancel"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	isRecursiveParam, err := parseOptional(qp.Get("isRecursive"), strconv.ParseBool)
	if err != nil {
		return nil, err
	}
	var options *azartifacts.PipelineRunClientCancelPipelineRunOptions
	if isRecursiveParam != nil {
		options = &azartifacts.PipelineRunClientCancelPipelineRunOptions{
			IsRecursive: isRecursiveParam,
		}
	}
	respr, errRespr := p.srv.CancelPipelineRun(req.Context(), matches[regex.SubexpIndex("runId")], options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PipelineRunServerTransport) dispatchGetPipelineRun(req *http.Request) (*http.Response, error) {
	if p.srv.GetPipelineRun == nil {
		return nil, &nonRetriableError{errors.New("method GetPipelineRun not implemented")}
	}
	const regexStr = "/pipelineruns/(?P<runId>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	respr, errRespr := p.srv.GetPipelineRun(req.Context(), matches[regex.SubexpIndex("runId")], nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).PipelineRun, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PipelineRunServerTransport) dispatchQueryActivityRuns(req *http.Request) (*http.Response, error) {
	if p.srv.QueryActivityRuns == nil {
		return nil, &nonRetriableError{errors.New("method QueryActivityRuns not implemented")}
	}
	const regexStr = "/pipelines/(?P<pipelineName>[a-zA-Z0-9-_]+)/pipelineruns/(?P<runId>[a-zA-Z0-9-_]+)/queryActivityruns"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[azartifacts.RunFilterParameters](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.QueryActivityRuns(req.Context(), matches[regex.SubexpIndex("pipelineName")], matches[regex.SubexpIndex("runId")], body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ActivityRunsQueryResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PipelineRunServerTransport) dispatchQueryPipelineRunsByWorkspace(req *http.Request) (*http.Response, error) {
	if p.srv.QueryPipelineRunsByWorkspace == nil {
		return nil, &nonRetriableError{errors.New("method QueryPipelineRunsByWorkspace not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[azartifacts.RunFilterParameters](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.QueryPipelineRunsByWorkspace(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).PipelineRunsQueryResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
