// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

// BigDataPoolsClientGetOptions contains the optional parameters for the BigDataPoolsClient.Get method.
type BigDataPoolsClientGetOptions struct {
	// placeholder for future optional parameters
}

// BigDataPoolsClientListOptions contains the optional parameters for the BigDataPoolsClient.List method.
type BigDataPoolsClientListOptions struct {
	// placeholder for future optional parameters
}

// DataFlowClientBeginCreateOrUpdateDataFlowOptions contains the optional parameters for the DataFlowClient.BeginCreateOrUpdateDataFlow
// method.
type DataFlowClientBeginCreateOrUpdateDataFlowOptions struct {
	// ETag of the data flow entity. Should only be specified for update, for which it should match existing entity or can be
	// * for unconditional update.
	IfMatch *string

	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// DataFlowClientBeginDeleteDataFlowOptions contains the optional parameters for the DataFlowClient.BeginDeleteDataFlow method.
type DataFlowClientBeginDeleteDataFlowOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// DataFlowClientBeginRenameDataFlowOptions contains the optional parameters for the DataFlowClient.BeginRenameDataFlow method.
type DataFlowClientBeginRenameDataFlowOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// DataFlowClientGetDataFlowOptions contains the optional parameters for the DataFlowClient.GetDataFlow method.
type DataFlowClientGetDataFlowOptions struct {
	// ETag of the data flow entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was
	// provided, then no content will be returned.
	IfNoneMatch *string
}

// DataFlowClientGetDataFlowsByWorkspaceOptions contains the optional parameters for the DataFlowClient.NewGetDataFlowsByWorkspacePager
// method.
type DataFlowClientGetDataFlowsByWorkspaceOptions struct {
	// placeholder for future optional parameters
}

// DataFlowDebugSessionClientAddDataFlowOptions contains the optional parameters for the DataFlowDebugSessionClient.AddDataFlow
// method.
type DataFlowDebugSessionClientAddDataFlowOptions struct {
	// placeholder for future optional parameters
}

// DataFlowDebugSessionClientBeginCreateDataFlowDebugSessionOptions contains the optional parameters for the DataFlowDebugSessionClient.BeginCreateDataFlowDebugSession
// method.
type DataFlowDebugSessionClientBeginCreateDataFlowDebugSessionOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// DataFlowDebugSessionClientBeginExecuteCommandOptions contains the optional parameters for the DataFlowDebugSessionClient.BeginExecuteCommand
// method.
type DataFlowDebugSessionClientBeginExecuteCommandOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// DataFlowDebugSessionClientDeleteDataFlowDebugSessionOptions contains the optional parameters for the DataFlowDebugSessionClient.DeleteDataFlowDebugSession
// method.
type DataFlowDebugSessionClientDeleteDataFlowDebugSessionOptions struct {
	// placeholder for future optional parameters
}

// DataFlowDebugSessionClientQueryDataFlowDebugSessionsByWorkspaceOptions contains the optional parameters for the DataFlowDebugSessionClient.NewQueryDataFlowDebugSessionsByWorkspacePager
// method.
type DataFlowDebugSessionClientQueryDataFlowDebugSessionsByWorkspaceOptions struct {
	// placeholder for future optional parameters
}

// DatasetClientBeginCreateOrUpdateDatasetOptions contains the optional parameters for the DatasetClient.BeginCreateOrUpdateDataset
// method.
type DatasetClientBeginCreateOrUpdateDatasetOptions struct {
	// ETag of the dataset entity. Should only be specified for update, for which it should match existing entity or can be *
	// for unconditional update.
	IfMatch *string

	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// DatasetClientBeginDeleteDatasetOptions contains the optional parameters for the DatasetClient.BeginDeleteDataset method.
type DatasetClientBeginDeleteDatasetOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// DatasetClientBeginRenameDatasetOptions contains the optional parameters for the DatasetClient.BeginRenameDataset method.
type DatasetClientBeginRenameDatasetOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// DatasetClientGetDatasetOptions contains the optional parameters for the DatasetClient.GetDataset method.
type DatasetClientGetDatasetOptions struct {
	// ETag of the dataset entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was
	// provided, then no content will be returned.
	IfNoneMatch *string
}

// DatasetClientGetDatasetsByWorkspaceOptions contains the optional parameters for the DatasetClient.NewGetDatasetsByWorkspacePager
// method.
type DatasetClientGetDatasetsByWorkspaceOptions struct {
	// placeholder for future optional parameters
}

// IntegrationRuntimesClientGetOptions contains the optional parameters for the IntegrationRuntimesClient.Get method.
type IntegrationRuntimesClientGetOptions struct {
	// placeholder for future optional parameters
}

// IntegrationRuntimesClientListOptions contains the optional parameters for the IntegrationRuntimesClient.List method.
type IntegrationRuntimesClientListOptions struct {
	// placeholder for future optional parameters
}

// KqlScriptClientBeginCreateOrUpdateOptions contains the optional parameters for the KqlScriptClient.BeginCreateOrUpdate
// method.
type KqlScriptClientBeginCreateOrUpdateOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// KqlScriptClientBeginDeleteByNameOptions contains the optional parameters for the KqlScriptClient.BeginDeleteByName method.
type KqlScriptClientBeginDeleteByNameOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// KqlScriptClientBeginRenameOptions contains the optional parameters for the KqlScriptClient.BeginRename method.
type KqlScriptClientBeginRenameOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// KqlScriptClientGetByNameOptions contains the optional parameters for the KqlScriptClient.GetByName method.
type KqlScriptClientGetByNameOptions struct {
	// placeholder for future optional parameters
}

// KqlScriptsClientGetAllOptions contains the optional parameters for the KqlScriptsClient.NewGetAllPager method.
type KqlScriptsClientGetAllOptions struct {
	// placeholder for future optional parameters
}

// LibraryClientAppendOptions contains the optional parameters for the LibraryClient.Append method.
type LibraryClientAppendOptions struct {
	// Set this header to a byte offset at which the block is expected to be appended. The request succeeds only if the current
	// offset matches this value. Otherwise, the request fails with the
	// AppendPositionConditionNotMet error (HTTP status code 412 â€“ Precondition Failed)
	BlobConditionAppendPosition *int64
}

// LibraryClientBeginCreateOptions contains the optional parameters for the LibraryClient.BeginCreate method.
type LibraryClientBeginCreateOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// LibraryClientBeginDeleteOptions contains the optional parameters for the LibraryClient.BeginDelete method.
type LibraryClientBeginDeleteOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// LibraryClientBeginFlushOptions contains the optional parameters for the LibraryClient.BeginFlush method.
type LibraryClientBeginFlushOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// LibraryClientGetOperationResultOptions contains the optional parameters for the LibraryClient.GetOperationResult method.
type LibraryClientGetOperationResultOptions struct {
	// placeholder for future optional parameters
}

// LibraryClientGetOptions contains the optional parameters for the LibraryClient.Get method.
type LibraryClientGetOptions struct {
	// placeholder for future optional parameters
}

// LibraryClientListOptions contains the optional parameters for the LibraryClient.NewListPager method.
type LibraryClientListOptions struct {
	// placeholder for future optional parameters
}

// LinkConnectionClientCreateOrUpdateOptions contains the optional parameters for the LinkConnectionClient.CreateOrUpdate
// method.
type LinkConnectionClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// LinkConnectionClientDeleteOptions contains the optional parameters for the LinkConnectionClient.Delete method.
type LinkConnectionClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// LinkConnectionClientEditTablesOptions contains the optional parameters for the LinkConnectionClient.EditTables method.
type LinkConnectionClientEditTablesOptions struct {
	// placeholder for future optional parameters
}

// LinkConnectionClientGetDetailedStatusOptions contains the optional parameters for the LinkConnectionClient.GetDetailedStatus
// method.
type LinkConnectionClientGetDetailedStatusOptions struct {
	// placeholder for future optional parameters
}

// LinkConnectionClientGetOptions contains the optional parameters for the LinkConnectionClient.Get method.
type LinkConnectionClientGetOptions struct {
	// placeholder for future optional parameters
}

// LinkConnectionClientListByWorkspaceOptions contains the optional parameters for the LinkConnectionClient.NewListByWorkspacePager
// method.
type LinkConnectionClientListByWorkspaceOptions struct {
	// placeholder for future optional parameters
}

// LinkConnectionClientListLinkTablesOptions contains the optional parameters for the LinkConnectionClient.ListLinkTables
// method.
type LinkConnectionClientListLinkTablesOptions struct {
	// placeholder for future optional parameters
}

// LinkConnectionClientPauseOptions contains the optional parameters for the LinkConnectionClient.Pause method.
type LinkConnectionClientPauseOptions struct {
	// placeholder for future optional parameters
}

// LinkConnectionClientQueryTableStatusOptions contains the optional parameters for the LinkConnectionClient.QueryTableStatus
// method.
type LinkConnectionClientQueryTableStatusOptions struct {
	// placeholder for future optional parameters
}

// LinkConnectionClientResumeOptions contains the optional parameters for the LinkConnectionClient.Resume method.
type LinkConnectionClientResumeOptions struct {
	// placeholder for future optional parameters
}

// LinkConnectionClientStartOptions contains the optional parameters for the LinkConnectionClient.Start method.
type LinkConnectionClientStartOptions struct {
	// placeholder for future optional parameters
}

// LinkConnectionClientStopOptions contains the optional parameters for the LinkConnectionClient.Stop method.
type LinkConnectionClientStopOptions struct {
	// placeholder for future optional parameters
}

// LinkConnectionClientUpdateLandingZoneCredentialOptions contains the optional parameters for the LinkConnectionClient.UpdateLandingZoneCredential
// method.
type LinkConnectionClientUpdateLandingZoneCredentialOptions struct {
	// placeholder for future optional parameters
}

// LinkedServiceClientBeginCreateOrUpdateLinkedServiceOptions contains the optional parameters for the LinkedServiceClient.BeginCreateOrUpdateLinkedService
// method.
type LinkedServiceClientBeginCreateOrUpdateLinkedServiceOptions struct {
	// ETag of the linkedService entity. Should only be specified for update, for which it should match existing entity or can
	// be * for unconditional update.
	IfMatch *string

	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// LinkedServiceClientBeginDeleteLinkedServiceOptions contains the optional parameters for the LinkedServiceClient.BeginDeleteLinkedService
// method.
type LinkedServiceClientBeginDeleteLinkedServiceOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// LinkedServiceClientBeginRenameLinkedServiceOptions contains the optional parameters for the LinkedServiceClient.BeginRenameLinkedService
// method.
type LinkedServiceClientBeginRenameLinkedServiceOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// LinkedServiceClientGetLinkedServiceOptions contains the optional parameters for the LinkedServiceClient.GetLinkedService
// method.
type LinkedServiceClientGetLinkedServiceOptions struct {
	// ETag of the linked service entity. Should only be specified for get. If the ETag matches the existing entity tag, or if
	// * was provided, then no content will be returned.
	IfNoneMatch *string
}

// LinkedServiceClientGetLinkedServicesByWorkspaceOptions contains the optional parameters for the LinkedServiceClient.NewGetLinkedServicesByWorkspacePager
// method.
type LinkedServiceClientGetLinkedServicesByWorkspaceOptions struct {
	// placeholder for future optional parameters
}

// MetastoreClientDeleteOptions contains the optional parameters for the MetastoreClient.Delete method.
type MetastoreClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// MetastoreClientGetDatabaseOperationsOptions contains the optional parameters for the MetastoreClient.GetDatabaseOperations
// method.
type MetastoreClientGetDatabaseOperationsOptions struct {
	// placeholder for future optional parameters
}

// MetastoreClientRegisterOptions contains the optional parameters for the MetastoreClient.Register method.
type MetastoreClientRegisterOptions struct {
	// placeholder for future optional parameters
}

// MetastoreClientUpdateOptions contains the optional parameters for the MetastoreClient.Update method.
type MetastoreClientUpdateOptions struct {
	// placeholder for future optional parameters
}

// NotebookClientBeginCreateOrUpdateNotebookOptions contains the optional parameters for the NotebookClient.BeginCreateOrUpdateNotebook
// method.
type NotebookClientBeginCreateOrUpdateNotebookOptions struct {
	// ETag of the Note book entity. Should only be specified for update, for which it should match existing entity or can be
	// * for unconditional update.
	IfMatch *string

	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// NotebookClientBeginDeleteNotebookOptions contains the optional parameters for the NotebookClient.BeginDeleteNotebook method.
type NotebookClientBeginDeleteNotebookOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// NotebookClientBeginRenameNotebookOptions contains the optional parameters for the NotebookClient.BeginRenameNotebook method.
type NotebookClientBeginRenameNotebookOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// NotebookClientGetNotebookOptions contains the optional parameters for the NotebookClient.GetNotebook method.
type NotebookClientGetNotebookOptions struct {
	// ETag of the Notebook entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was
	// provided, then no content will be returned.
	IfNoneMatch *string
}

// NotebookClientGetNotebookSummaryByWorkSpaceOptions contains the optional parameters for the NotebookClient.NewGetNotebookSummaryByWorkSpacePager
// method.
type NotebookClientGetNotebookSummaryByWorkSpaceOptions struct {
	// placeholder for future optional parameters
}

// NotebookClientGetNotebooksByWorkspaceOptions contains the optional parameters for the NotebookClient.NewGetNotebooksByWorkspacePager
// method.
type NotebookClientGetNotebooksByWorkspaceOptions struct {
	// placeholder for future optional parameters
}

// NotebookOperationResultClientGetOptions contains the optional parameters for the NotebookOperationResultClient.Get method.
type NotebookOperationResultClientGetOptions struct {
	// placeholder for future optional parameters
}

// PipelineClientBeginCreateOrUpdatePipelineOptions contains the optional parameters for the PipelineClient.BeginCreateOrUpdatePipeline
// method.
type PipelineClientBeginCreateOrUpdatePipelineOptions struct {
	// ETag of the pipeline entity. Should only be specified for update, for which it should match existing entity or can be *
	// for unconditional update.
	IfMatch *string

	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// PipelineClientBeginDeletePipelineOptions contains the optional parameters for the PipelineClient.BeginDeletePipeline method.
type PipelineClientBeginDeletePipelineOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// PipelineClientBeginRenamePipelineOptions contains the optional parameters for the PipelineClient.BeginRenamePipeline method.
type PipelineClientBeginRenamePipelineOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// PipelineClientCreatePipelineRunOptions contains the optional parameters for the PipelineClient.CreatePipelineRun method.
type PipelineClientCreatePipelineRunOptions struct {
	// Recovery mode flag. If recovery mode is set to true, the specified referenced pipeline run and the new run will be grouped
	// under the same groupId.
	IsRecovery *bool

	// Parameters of the pipeline run. These parameters will be used only if the runId is not specified.
	Parameters map[string]any

	// The pipeline run identifier. If run ID is specified the parameters of the specified run will be used to create a new run.
	ReferencePipelineRunID *string

	// In recovery mode, the rerun will start from this activity. If not specified, all activities will run.
	StartActivityName *string
}

// PipelineClientGetPipelineOptions contains the optional parameters for the PipelineClient.GetPipeline method.
type PipelineClientGetPipelineOptions struct {
	// ETag of the pipeline entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was
	// provided, then no content will be returned.
	IfNoneMatch *string
}

// PipelineClientGetPipelinesByWorkspaceOptions contains the optional parameters for the PipelineClient.NewGetPipelinesByWorkspacePager
// method.
type PipelineClientGetPipelinesByWorkspaceOptions struct {
	// placeholder for future optional parameters
}

// PipelineRunClientCancelPipelineRunOptions contains the optional parameters for the PipelineRunClient.CancelPipelineRun
// method.
type PipelineRunClientCancelPipelineRunOptions struct {
	// If true, cancel all the Child pipelines that are triggered by the current pipeline.
	IsRecursive *bool
}

// PipelineRunClientGetPipelineRunOptions contains the optional parameters for the PipelineRunClient.GetPipelineRun method.
type PipelineRunClientGetPipelineRunOptions struct {
	// placeholder for future optional parameters
}

// PipelineRunClientQueryActivityRunsOptions contains the optional parameters for the PipelineRunClient.QueryActivityRuns
// method.
type PipelineRunClientQueryActivityRunsOptions struct {
	// placeholder for future optional parameters
}

// PipelineRunClientQueryPipelineRunsByWorkspaceOptions contains the optional parameters for the PipelineRunClient.QueryPipelineRunsByWorkspace
// method.
type PipelineRunClientQueryPipelineRunsByWorkspaceOptions struct {
	// placeholder for future optional parameters
}

// SQLPoolsClientGetOptions contains the optional parameters for the SQLPoolsClient.Get method.
type SQLPoolsClientGetOptions struct {
	// placeholder for future optional parameters
}

// SQLPoolsClientListOptions contains the optional parameters for the SQLPoolsClient.List method.
type SQLPoolsClientListOptions struct {
	// placeholder for future optional parameters
}

// SQLScriptClientBeginCreateOrUpdateSQLScriptOptions contains the optional parameters for the SQLScriptClient.BeginCreateOrUpdateSQLScript
// method.
type SQLScriptClientBeginCreateOrUpdateSQLScriptOptions struct {
	// ETag of the SQL script entity. Should only be specified for update, for which it should match existing entity or can be
	// * for unconditional update.
	IfMatch *string

	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// SQLScriptClientBeginDeleteSQLScriptOptions contains the optional parameters for the SQLScriptClient.BeginDeleteSQLScript
// method.
type SQLScriptClientBeginDeleteSQLScriptOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// SQLScriptClientBeginRenameSQLScriptOptions contains the optional parameters for the SQLScriptClient.BeginRenameSQLScript
// method.
type SQLScriptClientBeginRenameSQLScriptOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// SQLScriptClientGetSQLScriptOptions contains the optional parameters for the SQLScriptClient.GetSQLScript method.
type SQLScriptClientGetSQLScriptOptions struct {
	// ETag of the sql compute entity. Should only be specified for get. If the ETag matches the existing entity tag, or if *
	// was provided, then no content will be returned.
	IfNoneMatch *string
}

// SQLScriptClientGetSQLScriptsByWorkspaceOptions contains the optional parameters for the SQLScriptClient.NewGetSQLScriptsByWorkspacePager
// method.
type SQLScriptClientGetSQLScriptsByWorkspaceOptions struct {
	// placeholder for future optional parameters
}

// SparkConfigurationClientBeginCreateOrUpdateSparkConfigurationOptions contains the optional parameters for the SparkConfigurationClient.BeginCreateOrUpdateSparkConfiguration
// method.
type SparkConfigurationClientBeginCreateOrUpdateSparkConfigurationOptions struct {
	// ETag of the sparkConfiguration entity. Should only be specified for update, for which it should match existing entity or
	// can be * for unconditional update.
	IfMatch *string

	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// SparkConfigurationClientBeginDeleteSparkConfigurationOptions contains the optional parameters for the SparkConfigurationClient.BeginDeleteSparkConfiguration
// method.
type SparkConfigurationClientBeginDeleteSparkConfigurationOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// SparkConfigurationClientBeginRenameSparkConfigurationOptions contains the optional parameters for the SparkConfigurationClient.BeginRenameSparkConfiguration
// method.
type SparkConfigurationClientBeginRenameSparkConfigurationOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// SparkConfigurationClientGetSparkConfigurationOptions contains the optional parameters for the SparkConfigurationClient.GetSparkConfiguration
// method.
type SparkConfigurationClientGetSparkConfigurationOptions struct {
	// ETag of the sparkConfiguration entity. Should only be specified for get. If the ETag matches the existing entity tag, or
	// if * was provided, then no content will be returned.
	IfNoneMatch *string
}

// SparkConfigurationClientGetSparkConfigurationsByWorkspaceOptions contains the optional parameters for the SparkConfigurationClient.NewGetSparkConfigurationsByWorkspacePager
// method.
type SparkConfigurationClientGetSparkConfigurationsByWorkspaceOptions struct {
	// placeholder for future optional parameters
}

// SparkJobDefinitionClientBeginCreateOrUpdateSparkJobDefinitionOptions contains the optional parameters for the SparkJobDefinitionClient.BeginCreateOrUpdateSparkJobDefinition
// method.
type SparkJobDefinitionClientBeginCreateOrUpdateSparkJobDefinitionOptions struct {
	// ETag of the Spark Job Definition entity. Should only be specified for update, for which it should match existing entity
	// or can be * for unconditional update.
	IfMatch *string

	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// SparkJobDefinitionClientBeginDebugSparkJobDefinitionOptions contains the optional parameters for the SparkJobDefinitionClient.BeginDebugSparkJobDefinition
// method.
type SparkJobDefinitionClientBeginDebugSparkJobDefinitionOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// SparkJobDefinitionClientBeginDeleteSparkJobDefinitionOptions contains the optional parameters for the SparkJobDefinitionClient.BeginDeleteSparkJobDefinition
// method.
type SparkJobDefinitionClientBeginDeleteSparkJobDefinitionOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// SparkJobDefinitionClientBeginExecuteSparkJobDefinitionOptions contains the optional parameters for the SparkJobDefinitionClient.BeginExecuteSparkJobDefinition
// method.
type SparkJobDefinitionClientBeginExecuteSparkJobDefinitionOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// SparkJobDefinitionClientBeginRenameSparkJobDefinitionOptions contains the optional parameters for the SparkJobDefinitionClient.BeginRenameSparkJobDefinition
// method.
type SparkJobDefinitionClientBeginRenameSparkJobDefinitionOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// SparkJobDefinitionClientGetSparkJobDefinitionOptions contains the optional parameters for the SparkJobDefinitionClient.GetSparkJobDefinition
// method.
type SparkJobDefinitionClientGetSparkJobDefinitionOptions struct {
	// ETag of the Spark Job Definition entity. Should only be specified for get. If the ETag matches the existing entity tag,
	// or if * was provided, then no content will be returned.
	IfNoneMatch *string
}

// SparkJobDefinitionClientGetSparkJobDefinitionsByWorkspaceOptions contains the optional parameters for the SparkJobDefinitionClient.NewGetSparkJobDefinitionsByWorkspacePager
// method.
type SparkJobDefinitionClientGetSparkJobDefinitionsByWorkspaceOptions struct {
	// placeholder for future optional parameters
}

// TriggerClientBeginCreateOrUpdateTriggerOptions contains the optional parameters for the TriggerClient.BeginCreateOrUpdateTrigger
// method.
type TriggerClientBeginCreateOrUpdateTriggerOptions struct {
	// ETag of the trigger entity. Should only be specified for update, for which it should match existing entity or can be *
	// for unconditional update.
	IfMatch *string

	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// TriggerClientBeginDeleteTriggerOptions contains the optional parameters for the TriggerClient.BeginDeleteTrigger method.
type TriggerClientBeginDeleteTriggerOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// TriggerClientBeginStartTriggerOptions contains the optional parameters for the TriggerClient.BeginStartTrigger method.
type TriggerClientBeginStartTriggerOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// TriggerClientBeginStopTriggerOptions contains the optional parameters for the TriggerClient.BeginStopTrigger method.
type TriggerClientBeginStopTriggerOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// TriggerClientBeginSubscribeTriggerToEventsOptions contains the optional parameters for the TriggerClient.BeginSubscribeTriggerToEvents
// method.
type TriggerClientBeginSubscribeTriggerToEventsOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// TriggerClientBeginUnsubscribeTriggerFromEventsOptions contains the optional parameters for the TriggerClient.BeginUnsubscribeTriggerFromEvents
// method.
type TriggerClientBeginUnsubscribeTriggerFromEventsOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// TriggerClientGetEventSubscriptionStatusOptions contains the optional parameters for the TriggerClient.GetEventSubscriptionStatus
// method.
type TriggerClientGetEventSubscriptionStatusOptions struct {
	// placeholder for future optional parameters
}

// TriggerClientGetTriggerOptions contains the optional parameters for the TriggerClient.GetTrigger method.
type TriggerClientGetTriggerOptions struct {
	// ETag of the trigger entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was
	// provided, then no content will be returned.
	IfNoneMatch *string
}

// TriggerClientGetTriggersByWorkspaceOptions contains the optional parameters for the TriggerClient.NewGetTriggersByWorkspacePager
// method.
type TriggerClientGetTriggersByWorkspaceOptions struct {
	// placeholder for future optional parameters
}

// TriggerRunClientCancelTriggerInstanceOptions contains the optional parameters for the TriggerRunClient.CancelTriggerInstance
// method.
type TriggerRunClientCancelTriggerInstanceOptions struct {
	// placeholder for future optional parameters
}

// TriggerRunClientQueryTriggerRunsByWorkspaceOptions contains the optional parameters for the TriggerRunClient.QueryTriggerRunsByWorkspace
// method.
type TriggerRunClientQueryTriggerRunsByWorkspaceOptions struct {
	// placeholder for future optional parameters
}

// TriggerRunClientRerunTriggerInstanceOptions contains the optional parameters for the TriggerRunClient.RerunTriggerInstance
// method.
type TriggerRunClientRerunTriggerInstanceOptions struct {
	// placeholder for future optional parameters
}

// WorkspaceClientGetOptions contains the optional parameters for the WorkspaceClient.Get method.
type WorkspaceClientGetOptions struct {
	// placeholder for future optional parameters
}

// WorkspaceGitRepoManagementClientGetGitHubAccessTokenOptions contains the optional parameters for the WorkspaceGitRepoManagementClient.GetGitHubAccessToken
// method.
type WorkspaceGitRepoManagementClientGetGitHubAccessTokenOptions struct {
	// Can provide a guid, which is helpful for debugging and to provide better customer support
	ClientRequestID *string
}
