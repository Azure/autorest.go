//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"armconsumption"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
	"regexp"
)

// EventsServer is a fake server for instances of the armconsumption.EventsClient type.
type EventsServer struct {
	// NewListPager is the fake for method EventsClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(startDate string, endDate string, scope string, options *armconsumption.EventsClientListOptions) (resp azfake.PagerResponder[armconsumption.EventsClientListResponse])
}

// NewEventsServerTransport creates a new instance of EventsServerTransport with the provided implementation.
// The returned EventsServerTransport instance is connected to an instance of armconsumption.EventsClient by way of the
// undefined.Transporter field.
func NewEventsServerTransport(srv *EventsServer) *EventsServerTransport {
	return &EventsServerTransport{srv: srv}
}

// EventsServerTransport connects instances of armconsumption.EventsClient to instances of EventsServer.
// Don't use this type directly, use NewEventsServerTransport instead.
type EventsServerTransport struct {
	srv          *EventsServer
	newListPager *azfake.PagerResponder[armconsumption.EventsClientListResponse]
}

// Do implements the policy.Transporter interface for EventsServerTransport.
func (e *EventsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "EventsClient.NewListPager":
		resp, err = e.dispatchNewListPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (e *EventsServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if e.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListPager not implemented")}
	}
	if e.newListPager == nil {
		const regexStr = "/(?P<scope>[a-zA-Z0-9-_]+)/providers/Microsoft.Consumption/events"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resp := e.srv.NewListPager(qp.Get("startDate"), qp.Get("endDate"), matches[regex.SubexpIndex("scope")], nil)
		e.newListPager = &resp
		server.PagerResponderInjectNextLinks(e.newListPager, req, func(page *armconsumption.EventsClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(e.newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(e.newListPager) {
		e.newListPager = nil
	}
	return resp, nil
}
