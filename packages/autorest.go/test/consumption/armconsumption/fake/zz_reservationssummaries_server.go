//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"armconsumption"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
	"regexp"
)

// ReservationsSummariesServer is a fake server for instances of the armconsumption.ReservationsSummariesClient type.
type ReservationsSummariesServer struct {
	// NewListPager is the fake for method ReservationsSummariesClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(scope string, grain armconsumption.Datagrain, options *armconsumption.ReservationsSummariesClientListOptions) (resp azfake.PagerResponder[armconsumption.ReservationsSummariesClientListResponse])

	// NewListByReservationOrderPager is the fake for method ReservationsSummariesClient.NewListByReservationOrderPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByReservationOrderPager func(reservationOrderID string, grain armconsumption.Datagrain, options *armconsumption.ReservationsSummariesClientListByReservationOrderOptions) (resp azfake.PagerResponder[armconsumption.ReservationsSummariesClientListByReservationOrderResponse])

	// NewListByReservationOrderAndReservationPager is the fake for method ReservationsSummariesClient.NewListByReservationOrderAndReservationPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByReservationOrderAndReservationPager func(reservationOrderID string, reservationID string, grain armconsumption.Datagrain, options *armconsumption.ReservationsSummariesClientListByReservationOrderAndReservationOptions) (resp azfake.PagerResponder[armconsumption.ReservationsSummariesClientListByReservationOrderAndReservationResponse])
}

// NewReservationsSummariesServerTransport creates a new instance of ReservationsSummariesServerTransport with the provided implementation.
// The returned ReservationsSummariesServerTransport instance is connected to an instance of armconsumption.ReservationsSummariesClient by way of the
// undefined.Transporter field.
func NewReservationsSummariesServerTransport(srv *ReservationsSummariesServer) *ReservationsSummariesServerTransport {
	return &ReservationsSummariesServerTransport{srv: srv}
}

// ReservationsSummariesServerTransport connects instances of armconsumption.ReservationsSummariesClient to instances of ReservationsSummariesServer.
// Don't use this type directly, use NewReservationsSummariesServerTransport instead.
type ReservationsSummariesServerTransport struct {
	srv                                          *ReservationsSummariesServer
	newListPager                                 *azfake.PagerResponder[armconsumption.ReservationsSummariesClientListResponse]
	newListByReservationOrderPager               *azfake.PagerResponder[armconsumption.ReservationsSummariesClientListByReservationOrderResponse]
	newListByReservationOrderAndReservationPager *azfake.PagerResponder[armconsumption.ReservationsSummariesClientListByReservationOrderAndReservationResponse]
}

// Do implements the policy.Transporter interface for ReservationsSummariesServerTransport.
func (r *ReservationsSummariesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "ReservationsSummariesClient.NewListPager":
		resp, err = r.dispatchNewListPager(req)
	case "ReservationsSummariesClient.NewListByReservationOrderPager":
		resp, err = r.dispatchNewListByReservationOrderPager(req)
	case "ReservationsSummariesClient.NewListByReservationOrderAndReservationPager":
		resp, err = r.dispatchNewListByReservationOrderAndReservationPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (r *ReservationsSummariesServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if r.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListPager not implemented")}
	}
	if r.newListPager == nil {
		const regexStr = "/(?P<scope>[a-zA-Z0-9-_]+)/providers/Microsoft.Consumption/reservationSummaries"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		startDateParam := getOptional(qp.Get("startDate"))
		endDateParam := getOptional(qp.Get("endDate"))
		filterParam := getOptional(qp.Get("$filter"))
		reservationIDParam := getOptional(qp.Get("reservationId"))
		reservationOrderIDParam := getOptional(qp.Get("reservationOrderId"))
		var options *armconsumption.ReservationsSummariesClientListOptions
		if startDateParam != nil || endDateParam != nil || filterParam != nil || reservationIDParam != nil || reservationOrderIDParam != nil {
			options = &armconsumption.ReservationsSummariesClientListOptions{
				StartDate:          startDateParam,
				EndDate:            endDateParam,
				Filter:             filterParam,
				ReservationID:      reservationIDParam,
				ReservationOrderID: reservationOrderIDParam,
			}
		}
		resp := r.srv.NewListPager(matches[regex.SubexpIndex("scope")], armconsumption.Datagrain(qp.Get("grain")), options)
		r.newListPager = &resp
		server.PagerResponderInjectNextLinks(r.newListPager, req, func(page *armconsumption.ReservationsSummariesClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(r.newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(r.newListPager) {
		r.newListPager = nil
	}
	return resp, nil
}

func (r *ReservationsSummariesServerTransport) dispatchNewListByReservationOrderPager(req *http.Request) (*http.Response, error) {
	if r.srv.NewListByReservationOrderPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListByReservationOrderPager not implemented")}
	}
	if r.newListByReservationOrderPager == nil {
		const regexStr = "/providers/Microsoft.Capacity/reservationorders/(?P<reservationOrderId>[a-zA-Z0-9-_]+)/providers/Microsoft.Consumption/reservationSummaries"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		filterParam := getOptional(qp.Get("$filter"))
		var options *armconsumption.ReservationsSummariesClientListByReservationOrderOptions
		if filterParam != nil {
			options = &armconsumption.ReservationsSummariesClientListByReservationOrderOptions{
				Filter: filterParam,
			}
		}
		resp := r.srv.NewListByReservationOrderPager(matches[regex.SubexpIndex("reservationOrderId")], armconsumption.Datagrain(qp.Get("grain")), options)
		r.newListByReservationOrderPager = &resp
		server.PagerResponderInjectNextLinks(r.newListByReservationOrderPager, req, func(page *armconsumption.ReservationsSummariesClientListByReservationOrderResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(r.newListByReservationOrderPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(r.newListByReservationOrderPager) {
		r.newListByReservationOrderPager = nil
	}
	return resp, nil
}

func (r *ReservationsSummariesServerTransport) dispatchNewListByReservationOrderAndReservationPager(req *http.Request) (*http.Response, error) {
	if r.srv.NewListByReservationOrderAndReservationPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListByReservationOrderAndReservationPager not implemented")}
	}
	if r.newListByReservationOrderAndReservationPager == nil {
		const regexStr = "/providers/Microsoft.Capacity/reservationorders/(?P<reservationOrderId>[a-zA-Z0-9-_]+)/reservations/(?P<reservationId>[a-zA-Z0-9-_]+)/providers/Microsoft.Consumption/reservationSummaries"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		filterParam := getOptional(qp.Get("$filter"))
		var options *armconsumption.ReservationsSummariesClientListByReservationOrderAndReservationOptions
		if filterParam != nil {
			options = &armconsumption.ReservationsSummariesClientListByReservationOrderAndReservationOptions{
				Filter: filterParam,
			}
		}
		resp := r.srv.NewListByReservationOrderAndReservationPager(matches[regex.SubexpIndex("reservationOrderId")], matches[regex.SubexpIndex("reservationId")], armconsumption.Datagrain(qp.Get("grain")), options)
		r.newListByReservationOrderAndReservationPager = &resp
		server.PagerResponderInjectNextLinks(r.newListByReservationOrderAndReservationPager, req, func(page *armconsumption.ReservationsSummariesClientListByReservationOrderAndReservationResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(r.newListByReservationOrderAndReservationPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(r.newListByReservationOrderAndReservationPager) {
		r.newListByReservationOrderAndReservationPager = nil
	}
	return resp, nil
}
