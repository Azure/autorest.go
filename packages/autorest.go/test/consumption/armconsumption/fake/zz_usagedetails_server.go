//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"armconsumption"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
	"regexp"
	"strconv"
)

// UsageDetailsServer is a fake server for instances of the armconsumption.UsageDetailsClient type.
type UsageDetailsServer struct {
	// NewListPager is the fake for method UsageDetailsClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(scope string, options *armconsumption.UsageDetailsClientListOptions) (resp azfake.PagerResponder[armconsumption.UsageDetailsClientListResponse])
}

// NewUsageDetailsServerTransport creates a new instance of UsageDetailsServerTransport with the provided implementation.
// The returned UsageDetailsServerTransport instance is connected to an instance of armconsumption.UsageDetailsClient by way of the
// undefined.Transporter field.
func NewUsageDetailsServerTransport(srv *UsageDetailsServer) *UsageDetailsServerTransport {
	return &UsageDetailsServerTransport{srv: srv}
}

// UsageDetailsServerTransport connects instances of armconsumption.UsageDetailsClient to instances of UsageDetailsServer.
// Don't use this type directly, use NewUsageDetailsServerTransport instead.
type UsageDetailsServerTransport struct {
	srv          *UsageDetailsServer
	newListPager *azfake.PagerResponder[armconsumption.UsageDetailsClientListResponse]
}

// Do implements the policy.Transporter interface for UsageDetailsServerTransport.
func (u *UsageDetailsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "UsageDetailsClient.NewListPager":
		resp, err = u.dispatchNewListPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (u *UsageDetailsServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if u.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListPager not implemented")}
	}
	if u.newListPager == nil {
		const regexStr = "/(?P<scope>[a-zA-Z0-9-_]+)/providers/Microsoft.Consumption/usageDetails"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		expandParam := getOptional(qp.Get("$expand"))
		filterParam := getOptional(qp.Get("$filter"))
		skiptokenParam := getOptional(qp.Get("$skiptoken"))
		topParam, err := parseOptional(qp.Get("$top"), func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		metricParam := getOptional(armconsumption.Metrictype(qp.Get("metric")))
		var options *armconsumption.UsageDetailsClientListOptions
		if expandParam != nil || filterParam != nil || skiptokenParam != nil || topParam != nil || metricParam != nil {
			options = &armconsumption.UsageDetailsClientListOptions{
				Expand:    expandParam,
				Filter:    filterParam,
				Skiptoken: skiptokenParam,
				Top:       topParam,
				Metric:    metricParam,
			}
		}
		resp := u.srv.NewListPager(matches[regex.SubexpIndex("scope")], options)
		u.newListPager = &resp
		server.PagerResponderInjectNextLinks(u.newListPager, req, func(page *armconsumption.UsageDetailsClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(u.newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(u.newListPager) {
		u.newListPager = nil
	}
	return resp, nil
}
