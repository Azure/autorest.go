// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azkeyvault

// ClientBackupCertificateOptions contains the optional parameters for the Client.BackupCertificate method.
type ClientBackupCertificateOptions struct {
	// placeholder for future optional parameters
}

// ClientBackupKeyOptions contains the optional parameters for the Client.BackupKey method.
type ClientBackupKeyOptions struct {
	// placeholder for future optional parameters
}

// ClientBackupSecretOptions contains the optional parameters for the Client.BackupSecret method.
type ClientBackupSecretOptions struct {
	// placeholder for future optional parameters
}

// ClientBackupStorageAccountOptions contains the optional parameters for the Client.BackupStorageAccount method.
type ClientBackupStorageAccountOptions struct {
	// placeholder for future optional parameters
}

// ClientBeginFullBackupOptions contains the optional parameters for the Client.BeginFullBackup method.
type ClientBeginFullBackupOptions struct {
	// Azure blob shared access signature token pointing to a valid Azure blob container where full backup needs to be stored.
	// This token needs to be valid for at least next 24 hours from the time of making
	// this call
	AzureStorageBlobContainerURI *SASTokenParameter

	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// ClientBeginFullRestoreOperationOptions contains the optional parameters for the Client.BeginFullRestoreOperation method.
type ClientBeginFullRestoreOperationOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// ClientBeginSelectiveKeyRestoreOperationOptions contains the optional parameters for the Client.BeginSelectiveKeyRestoreOperation
// method.
type ClientBeginSelectiveKeyRestoreOperationOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// ClientCreateCertificateOptions contains the optional parameters for the Client.CreateCertificate method.
type ClientCreateCertificateOptions struct {
	// placeholder for future optional parameters
}

// ClientCreateKeyOptions contains the optional parameters for the Client.CreateKey method.
type ClientCreateKeyOptions struct {
	// placeholder for future optional parameters
}

// ClientDecryptOptions contains the optional parameters for the Client.Decrypt method.
type ClientDecryptOptions struct {
	// placeholder for future optional parameters
}

// ClientDeleteCertificateContactsOptions contains the optional parameters for the Client.DeleteCertificateContacts method.
type ClientDeleteCertificateContactsOptions struct {
	// placeholder for future optional parameters
}

// ClientDeleteCertificateIssuerOptions contains the optional parameters for the Client.DeleteCertificateIssuer method.
type ClientDeleteCertificateIssuerOptions struct {
	// placeholder for future optional parameters
}

// ClientDeleteCertificateOperationOptions contains the optional parameters for the Client.DeleteCertificateOperation method.
type ClientDeleteCertificateOperationOptions struct {
	// placeholder for future optional parameters
}

// ClientDeleteCertificateOptions contains the optional parameters for the Client.DeleteCertificate method.
type ClientDeleteCertificateOptions struct {
	// placeholder for future optional parameters
}

// ClientDeleteKeyOptions contains the optional parameters for the Client.DeleteKey method.
type ClientDeleteKeyOptions struct {
	// placeholder for future optional parameters
}

// ClientDeleteSasDefinitionOptions contains the optional parameters for the Client.DeleteSasDefinition method.
type ClientDeleteSasDefinitionOptions struct {
	// placeholder for future optional parameters
}

// ClientDeleteSecretOptions contains the optional parameters for the Client.DeleteSecret method.
type ClientDeleteSecretOptions struct {
	// placeholder for future optional parameters
}

// ClientDeleteStorageAccountOptions contains the optional parameters for the Client.DeleteStorageAccount method.
type ClientDeleteStorageAccountOptions struct {
	// placeholder for future optional parameters
}

// ClientEncryptOptions contains the optional parameters for the Client.Encrypt method.
type ClientEncryptOptions struct {
	// placeholder for future optional parameters
}

// ClientFullBackupStatusOptions contains the optional parameters for the Client.FullBackupStatus method.
type ClientFullBackupStatusOptions struct {
	// placeholder for future optional parameters
}

// ClientGetCertificateContactsOptions contains the optional parameters for the Client.GetCertificateContacts method.
type ClientGetCertificateContactsOptions struct {
	// placeholder for future optional parameters
}

// ClientGetCertificateIssuerOptions contains the optional parameters for the Client.GetCertificateIssuer method.
type ClientGetCertificateIssuerOptions struct {
	// placeholder for future optional parameters
}

// ClientGetCertificateIssuersOptions contains the optional parameters for the Client.NewGetCertificateIssuersPager method.
type ClientGetCertificateIssuersOptions struct {
	// Specifies the maximum number of results to return in a page. Setting maxresults to a value less than 1 or greater than
	// 25 results in error response code 400 (Bad Request). If there are additional
	// results to return, then the service returns a nextLink containing a skip token for pagination. In certain cases, the service
	// might return fewer results than specified by maxresults (even 0 results)
	// and also return a nextLink. Clients should not make any assumptions on the minimum number of results per page, and should
	// enumerate all pages until the nextLink becomes null.
	Maxresults *int32
}

// ClientGetCertificateOperationOptions contains the optional parameters for the Client.GetCertificateOperation method.
type ClientGetCertificateOperationOptions struct {
	// placeholder for future optional parameters
}

// ClientGetCertificateOptions contains the optional parameters for the Client.GetCertificate method.
type ClientGetCertificateOptions struct {
	// placeholder for future optional parameters
}

// ClientGetCertificatePolicyOptions contains the optional parameters for the Client.GetCertificatePolicy method.
type ClientGetCertificatePolicyOptions struct {
	// placeholder for future optional parameters
}

// ClientGetCertificateVersionsOptions contains the optional parameters for the Client.NewGetCertificateVersionsPager method.
type ClientGetCertificateVersionsOptions struct {
	// Specifies the maximum number of results to return in a page. Setting maxresults to a value less than 1 or greater than
	// 25 results in error response code 400 (Bad Request). If there are additional
	// results to return, then the service returns a nextLink containing a skip token for pagination. In certain cases, the service
	// might return fewer results than specified by maxresults (even 0 results)
	// and also return a nextLink. Clients should not make any assumptions on the minimum number of results per page, and should
	// enumerate all pages until the nextLink becomes null.
	Maxresults *int32
}

// ClientGetCertificatesOptions contains the optional parameters for the Client.NewGetCertificatesPager method.
type ClientGetCertificatesOptions struct {
	// Specifies whether to include certificates which are not completely provisioned.
	IncludePending *bool

	// Specifies the maximum number of results to return in a page. Setting maxresults to a value less than 1 or greater than
	// 25 results in error response code 400 (Bad Request). If there are additional
	// results to return, then the service returns a nextLink containing a skip token for pagination. In certain cases, the service
	// might return fewer results than specified by maxresults (even 0 results)
	// and also return a nextLink. Clients should not make any assumptions on the minimum number of results per page, and should
	// enumerate all pages until the nextLink becomes null.
	Maxresults *int32
}

// ClientGetDeletedCertificateOptions contains the optional parameters for the Client.GetDeletedCertificate method.
type ClientGetDeletedCertificateOptions struct {
	// placeholder for future optional parameters
}

// ClientGetDeletedCertificatesOptions contains the optional parameters for the Client.NewGetDeletedCertificatesPager method.
type ClientGetDeletedCertificatesOptions struct {
	// Specifies whether to include certificates which are not completely provisioned.
	IncludePending *bool

	// Specifies the maximum number of results to return in a page. Setting maxresults to a value less than 1 or greater than
	// 25 results in error response code 400 (Bad Request). If there are additional
	// results to return, then the service returns a nextLink containing a skip token for pagination. In certain cases, the service
	// might return fewer results than specified by maxresults (even 0 results)
	// and also return a nextLink. Clients should not make any assumptions on the minimum number of results per page, and should
	// enumerate all pages until the nextLink becomes null.
	Maxresults *int32
}

// ClientGetDeletedKeyOptions contains the optional parameters for the Client.GetDeletedKey method.
type ClientGetDeletedKeyOptions struct {
	// placeholder for future optional parameters
}

// ClientGetDeletedKeysOptions contains the optional parameters for the Client.NewGetDeletedKeysPager method.
type ClientGetDeletedKeysOptions struct {
	// Specifies the maximum number of results to return in a page. Setting maxresults to a value less than 1 or greater than
	// 25 results in error response code 400 (Bad Request). If there are additional
	// results to return, then the service returns a nextLink containing a skip token for pagination. In certain cases, the service
	// might return fewer results than specified by maxresults (even 0 results)
	// and also return a nextLink. Clients should not make any assumptions on the minimum number of results per page, and should
	// enumerate all pages until the nextLink becomes null.
	Maxresults *int32
}

// ClientGetDeletedSasDefinitionOptions contains the optional parameters for the Client.GetDeletedSasDefinition method.
type ClientGetDeletedSasDefinitionOptions struct {
	// placeholder for future optional parameters
}

// ClientGetDeletedSasDefinitionsOptions contains the optional parameters for the Client.NewGetDeletedSasDefinitionsPager
// method.
type ClientGetDeletedSasDefinitionsOptions struct {
	// Specifies the maximum number of results to return in a page. Setting maxresults to a value less than 1 or greater than
	// 25 results in error response code 400 (Bad Request). If there are additional
	// results to return, then the service returns a nextLink containing a skip token for pagination. In certain cases, the service
	// might return fewer results than specified by maxresults (even 0 results)
	// and also return a nextLink. Clients should not make any assumptions on the minimum number of results per page, and should
	// enumerate all pages until the nextLink becomes null.
	Maxresults *int32
}

// ClientGetDeletedSecretOptions contains the optional parameters for the Client.GetDeletedSecret method.
type ClientGetDeletedSecretOptions struct {
	// placeholder for future optional parameters
}

// ClientGetDeletedSecretsOptions contains the optional parameters for the Client.NewGetDeletedSecretsPager method.
type ClientGetDeletedSecretsOptions struct {
	// Specifies the maximum number of results to return in a page. Setting maxresults to a value less than 1 or greater than
	// 25 results in error response code 400 (Bad Request). If there are additional
	// results to return, then the service returns a nextLink containing a skip token for pagination. In certain cases, the service
	// might return fewer results than specified by maxresults (even 0 results)
	// and also return a nextLink. Clients should not make any assumptions on the minimum number of results per page, and should
	// enumerate all pages until the nextLink becomes null.
	Maxresults *int32
}

// ClientGetDeletedStorageAccountOptions contains the optional parameters for the Client.GetDeletedStorageAccount method.
type ClientGetDeletedStorageAccountOptions struct {
	// placeholder for future optional parameters
}

// ClientGetDeletedStorageAccountsOptions contains the optional parameters for the Client.NewGetDeletedStorageAccountsPager
// method.
type ClientGetDeletedStorageAccountsOptions struct {
	// Specifies the maximum number of results to return in a page. Setting maxresults to a value less than 1 or greater than
	// 25 results in error response code 400 (Bad Request). If there are additional
	// results to return, then the service returns a nextLink containing a skip token for pagination. In certain cases, the service
	// might return fewer results than specified by maxresults (even 0 results)
	// and also return a nextLink. Clients should not make any assumptions on the minimum number of results per page, and should
	// enumerate all pages until the nextLink becomes null.
	Maxresults *int32
}

// ClientGetKeyOptions contains the optional parameters for the Client.GetKey method.
type ClientGetKeyOptions struct {
	// placeholder for future optional parameters
}

// ClientGetKeyVersionsOptions contains the optional parameters for the Client.NewGetKeyVersionsPager method.
type ClientGetKeyVersionsOptions struct {
	// Specifies the maximum number of results to return in a page. Setting maxresults to a value less than 1 or greater than
	// 25 results in error response code 400 (Bad Request). If there are additional
	// results to return, then the service returns a nextLink containing a skip token for pagination. In certain cases, the service
	// might return fewer results than specified by maxresults (even 0 results)
	// and also return a nextLink. Clients should not make any assumptions on the minimum number of results per page, and should
	// enumerate all pages until the nextLink becomes null.
	Maxresults *int32
}

// ClientGetKeysOptions contains the optional parameters for the Client.NewGetKeysPager method.
type ClientGetKeysOptions struct {
	// Specifies the maximum number of results to return in a page. Setting maxresults to a value less than 1 or greater than
	// 25 results in error response code 400 (Bad Request). If there are additional
	// results to return, then the service returns a nextLink containing a skip token for pagination. In certain cases, the service
	// might return fewer results than specified by maxresults (even 0 results)
	// and also return a nextLink. Clients should not make any assumptions on the minimum number of results per page, and should
	// enumerate all pages until the nextLink becomes null.
	Maxresults *int32
}

// ClientGetSasDefinitionOptions contains the optional parameters for the Client.GetSasDefinition method.
type ClientGetSasDefinitionOptions struct {
	// placeholder for future optional parameters
}

// ClientGetSasDefinitionsOptions contains the optional parameters for the Client.NewGetSasDefinitionsPager method.
type ClientGetSasDefinitionsOptions struct {
	// Specifies the maximum number of results to return in a page. Setting maxresults to a value less than 1 or greater than
	// 25 results in error response code 400 (Bad Request). If there are additional
	// results to return, then the service returns a nextLink containing a skip token for pagination. In certain cases, the service
	// might return fewer results than specified by maxresults (even 0 results)
	// and also return a nextLink. Clients should not make any assumptions on the minimum number of results per page, and should
	// enumerate all pages until the nextLink becomes null.
	Maxresults *int32
}

// ClientGetSecretOptions contains the optional parameters for the Client.GetSecret method.
type ClientGetSecretOptions struct {
	// placeholder for future optional parameters
}

// ClientGetSecretVersionsOptions contains the optional parameters for the Client.NewGetSecretVersionsPager method.
type ClientGetSecretVersionsOptions struct {
	// Specifies the maximum number of results to return in a page. Setting maxresults to a value less than 1 or greater than
	// 25 results in error response code 400 (Bad Request). If there are additional
	// results to return, then the service returns a nextLink containing a skip token for pagination. In certain cases, the service
	// might return fewer results than specified by maxresults (even 0 results)
	// and also return a nextLink. Clients should not make any assumptions on the minimum number of results per page, and should
	// enumerate all pages until the nextLink becomes null.
	Maxresults *int32
}

// ClientGetSecretsOptions contains the optional parameters for the Client.NewGetSecretsPager method.
type ClientGetSecretsOptions struct {
	// Specifies the maximum number of results to return in a page. Setting maxresults to a value less than 1 or greater than
	// 25 results in error response code 400 (Bad Request). If there are additional
	// results to return, then the service returns a nextLink containing a skip token for pagination. In certain cases, the service
	// might return fewer results than specified by maxresults (even 0 results)
	// and also return a nextLink. Clients should not make any assumptions on the minimum number of results per page, and should
	// enumerate all pages until the nextLink becomes null.
	Maxresults *int32
}

// ClientGetStorageAccountOptions contains the optional parameters for the Client.GetStorageAccount method.
type ClientGetStorageAccountOptions struct {
	// placeholder for future optional parameters
}

// ClientGetStorageAccountsOptions contains the optional parameters for the Client.NewGetStorageAccountsPager method.
type ClientGetStorageAccountsOptions struct {
	// Specifies the maximum number of results to return in a page. Setting maxresults to a value less than 1 or greater than
	// 25 results in error response code 400 (Bad Request). If there are additional
	// results to return, then the service returns a nextLink containing a skip token for pagination. In certain cases, the service
	// might return fewer results than specified by maxresults (even 0 results)
	// and also return a nextLink. Clients should not make any assumptions on the minimum number of results per page, and should
	// enumerate all pages until the nextLink becomes null.
	Maxresults *int32
}

// ClientImportCertificateOptions contains the optional parameters for the Client.ImportCertificate method.
type ClientImportCertificateOptions struct {
	// placeholder for future optional parameters
}

// ClientImportKeyOptions contains the optional parameters for the Client.ImportKey method.
type ClientImportKeyOptions struct {
	// placeholder for future optional parameters
}

// ClientMergeCertificateOptions contains the optional parameters for the Client.MergeCertificate method.
type ClientMergeCertificateOptions struct {
	// placeholder for future optional parameters
}

// ClientPurgeDeletedCertificateOptions contains the optional parameters for the Client.PurgeDeletedCertificate method.
type ClientPurgeDeletedCertificateOptions struct {
	// placeholder for future optional parameters
}

// ClientPurgeDeletedKeyOptions contains the optional parameters for the Client.PurgeDeletedKey method.
type ClientPurgeDeletedKeyOptions struct {
	// placeholder for future optional parameters
}

// ClientPurgeDeletedSecretOptions contains the optional parameters for the Client.PurgeDeletedSecret method.
type ClientPurgeDeletedSecretOptions struct {
	// placeholder for future optional parameters
}

// ClientPurgeDeletedStorageAccountOptions contains the optional parameters for the Client.PurgeDeletedStorageAccount method.
type ClientPurgeDeletedStorageAccountOptions struct {
	// placeholder for future optional parameters
}

// ClientRecoverDeletedCertificateOptions contains the optional parameters for the Client.RecoverDeletedCertificate method.
type ClientRecoverDeletedCertificateOptions struct {
	// placeholder for future optional parameters
}

// ClientRecoverDeletedKeyOptions contains the optional parameters for the Client.RecoverDeletedKey method.
type ClientRecoverDeletedKeyOptions struct {
	// placeholder for future optional parameters
}

// ClientRecoverDeletedSasDefinitionOptions contains the optional parameters for the Client.RecoverDeletedSasDefinition method.
type ClientRecoverDeletedSasDefinitionOptions struct {
	// placeholder for future optional parameters
}

// ClientRecoverDeletedSecretOptions contains the optional parameters for the Client.RecoverDeletedSecret method.
type ClientRecoverDeletedSecretOptions struct {
	// placeholder for future optional parameters
}

// ClientRecoverDeletedStorageAccountOptions contains the optional parameters for the Client.RecoverDeletedStorageAccount
// method.
type ClientRecoverDeletedStorageAccountOptions struct {
	// placeholder for future optional parameters
}

// ClientRegenerateStorageAccountKeyOptions contains the optional parameters for the Client.RegenerateStorageAccountKey method.
type ClientRegenerateStorageAccountKeyOptions struct {
	// placeholder for future optional parameters
}

// ClientRestoreCertificateOptions contains the optional parameters for the Client.RestoreCertificate method.
type ClientRestoreCertificateOptions struct {
	// placeholder for future optional parameters
}

// ClientRestoreKeyOptions contains the optional parameters for the Client.RestoreKey method.
type ClientRestoreKeyOptions struct {
	// placeholder for future optional parameters
}

// ClientRestoreSecretOptions contains the optional parameters for the Client.RestoreSecret method.
type ClientRestoreSecretOptions struct {
	// placeholder for future optional parameters
}

// ClientRestoreStatusOptions contains the optional parameters for the Client.RestoreStatus method.
type ClientRestoreStatusOptions struct {
	// placeholder for future optional parameters
}

// ClientRestoreStorageAccountOptions contains the optional parameters for the Client.RestoreStorageAccount method.
type ClientRestoreStorageAccountOptions struct {
	// placeholder for future optional parameters
}

// ClientSetCertificateContactsOptions contains the optional parameters for the Client.SetCertificateContacts method.
type ClientSetCertificateContactsOptions struct {
	// placeholder for future optional parameters
}

// ClientSetCertificateIssuerOptions contains the optional parameters for the Client.SetCertificateIssuer method.
type ClientSetCertificateIssuerOptions struct {
	// placeholder for future optional parameters
}

// ClientSetSasDefinitionOptions contains the optional parameters for the Client.SetSasDefinition method.
type ClientSetSasDefinitionOptions struct {
	// placeholder for future optional parameters
}

// ClientSetSecretOptions contains the optional parameters for the Client.SetSecret method.
type ClientSetSecretOptions struct {
	// placeholder for future optional parameters
}

// ClientSetStorageAccountOptions contains the optional parameters for the Client.SetStorageAccount method.
type ClientSetStorageAccountOptions struct {
	// placeholder for future optional parameters
}

// ClientSignOptions contains the optional parameters for the Client.Sign method.
type ClientSignOptions struct {
	// placeholder for future optional parameters
}

// ClientUnwrapKeyOptions contains the optional parameters for the Client.UnwrapKey method.
type ClientUnwrapKeyOptions struct {
	// placeholder for future optional parameters
}

// ClientUpdateCertificateIssuerOptions contains the optional parameters for the Client.UpdateCertificateIssuer method.
type ClientUpdateCertificateIssuerOptions struct {
	// placeholder for future optional parameters
}

// ClientUpdateCertificateOperationOptions contains the optional parameters for the Client.UpdateCertificateOperation method.
type ClientUpdateCertificateOperationOptions struct {
	// placeholder for future optional parameters
}

// ClientUpdateCertificateOptions contains the optional parameters for the Client.UpdateCertificate method.
type ClientUpdateCertificateOptions struct {
	// placeholder for future optional parameters
}

// ClientUpdateCertificatePolicyOptions contains the optional parameters for the Client.UpdateCertificatePolicy method.
type ClientUpdateCertificatePolicyOptions struct {
	// placeholder for future optional parameters
}

// ClientUpdateKeyOptions contains the optional parameters for the Client.UpdateKey method.
type ClientUpdateKeyOptions struct {
	// placeholder for future optional parameters
}

// ClientUpdateSasDefinitionOptions contains the optional parameters for the Client.UpdateSasDefinition method.
type ClientUpdateSasDefinitionOptions struct {
	// placeholder for future optional parameters
}

// ClientUpdateSecretOptions contains the optional parameters for the Client.UpdateSecret method.
type ClientUpdateSecretOptions struct {
	// placeholder for future optional parameters
}

// ClientUpdateStorageAccountOptions contains the optional parameters for the Client.UpdateStorageAccount method.
type ClientUpdateStorageAccountOptions struct {
	// placeholder for future optional parameters
}

// ClientVerifyOptions contains the optional parameters for the Client.Verify method.
type ClientVerifyOptions struct {
	// placeholder for future optional parameters
}

// ClientWrapKeyOptions contains the optional parameters for the Client.WrapKey method.
type ClientWrapKeyOptions struct {
	// placeholder for future optional parameters
}

// HSMSecurityDomainClientBeginDownloadOptions contains the optional parameters for the HSMSecurityDomainClient.BeginDownload
// method.
type HSMSecurityDomainClientBeginDownloadOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// HSMSecurityDomainClientBeginUploadOptions contains the optional parameters for the HSMSecurityDomainClient.BeginUpload
// method.
type HSMSecurityDomainClientBeginUploadOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// HSMSecurityDomainClientDownloadPendingOptions contains the optional parameters for the HSMSecurityDomainClient.DownloadPending
// method.
type HSMSecurityDomainClientDownloadPendingOptions struct {
	// placeholder for future optional parameters
}

// HSMSecurityDomainClientTransferKeyOptions contains the optional parameters for the HSMSecurityDomainClient.TransferKey
// method.
type HSMSecurityDomainClientTransferKeyOptions struct {
	// placeholder for future optional parameters
}

// HSMSecurityDomainClientUploadPendingOptions contains the optional parameters for the HSMSecurityDomainClient.UploadPending
// method.
type HSMSecurityDomainClientUploadPendingOptions struct {
	// placeholder for future optional parameters
}

// RoleAssignmentsClientCreateOptions contains the optional parameters for the RoleAssignmentsClient.Create method.
type RoleAssignmentsClientCreateOptions struct {
	// placeholder for future optional parameters
}

// RoleAssignmentsClientDeleteOptions contains the optional parameters for the RoleAssignmentsClient.Delete method.
type RoleAssignmentsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// RoleAssignmentsClientGetOptions contains the optional parameters for the RoleAssignmentsClient.Get method.
type RoleAssignmentsClientGetOptions struct {
	// placeholder for future optional parameters
}

// RoleAssignmentsClientListForScopeOptions contains the optional parameters for the RoleAssignmentsClient.NewListForScopePager
// method.
type RoleAssignmentsClientListForScopeOptions struct {
	// The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId
	// eq {id} to return all role assignments at, above or below the
	// scope for the specified principal.
	Filter *string
}

// RoleDefinitionsClientCreateOrUpdateOptions contains the optional parameters for the RoleDefinitionsClient.CreateOrUpdate
// method.
type RoleDefinitionsClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// RoleDefinitionsClientDeleteOptions contains the optional parameters for the RoleDefinitionsClient.Delete method.
type RoleDefinitionsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// RoleDefinitionsClientGetOptions contains the optional parameters for the RoleDefinitionsClient.Get method.
type RoleDefinitionsClientGetOptions struct {
	// placeholder for future optional parameters
}

// RoleDefinitionsClientListOptions contains the optional parameters for the RoleDefinitionsClient.NewListPager method.
type RoleDefinitionsClientListOptions struct {
	// The filter to apply on the operation. Use atScopeAndBelow filter to search below the given scope as well.
	Filter *string
}
