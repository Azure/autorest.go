//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"azkeyvault"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
	"regexp"
)

// RoleDefinitionsServer is a fake server for instances of the azkeyvault.RoleDefinitionsClient type.
type RoleDefinitionsServer struct {
	// CreateOrUpdate is the fake for method RoleDefinitionsClient.CreateOrUpdate
	// HTTP status codes to indicate success: http.StatusCreated
	CreateOrUpdate func(ctx context.Context, host string, scope string, roleDefinitionName string, parameters azkeyvault.RoleDefinitionCreateParameters, options *azkeyvault.RoleDefinitionsClientCreateOrUpdateOptions) (resp azfake.Responder[azkeyvault.RoleDefinitionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// Delete is the fake for method RoleDefinitionsClient.Delete
	// HTTP status codes to indicate success: http.StatusOK
	Delete func(ctx context.Context, host string, scope string, roleDefinitionName string, options *azkeyvault.RoleDefinitionsClientDeleteOptions) (resp azfake.Responder[azkeyvault.RoleDefinitionsClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method RoleDefinitionsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, host string, scope string, roleDefinitionName string, options *azkeyvault.RoleDefinitionsClientGetOptions) (resp azfake.Responder[azkeyvault.RoleDefinitionsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method RoleDefinitionsClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(host string, scope string, options *azkeyvault.RoleDefinitionsClientListOptions) (resp azfake.PagerResponder[azkeyvault.RoleDefinitionsClientListResponse])
}

// NewRoleDefinitionsServerTransport creates a new instance of RoleDefinitionsServerTransport with the provided implementation.
// The returned RoleDefinitionsServerTransport instance is connected to an instance of azkeyvault.RoleDefinitionsClient by way of the
// undefined.Transporter field.
func NewRoleDefinitionsServerTransport(srv *RoleDefinitionsServer) *RoleDefinitionsServerTransport {
	return &RoleDefinitionsServerTransport{srv: srv}
}

// RoleDefinitionsServerTransport connects instances of azkeyvault.RoleDefinitionsClient to instances of RoleDefinitionsServer.
// Don't use this type directly, use NewRoleDefinitionsServerTransport instead.
type RoleDefinitionsServerTransport struct {
	srv          *RoleDefinitionsServer
	newListPager *azfake.PagerResponder[azkeyvault.RoleDefinitionsClientListResponse]
}

// Do implements the policy.Transporter interface for RoleDefinitionsServerTransport.
func (r *RoleDefinitionsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "RoleDefinitionsClient.CreateOrUpdate":
		resp, err = r.dispatchCreateOrUpdate(req)
	case "RoleDefinitionsClient.Delete":
		resp, err = r.dispatchDelete(req)
	case "RoleDefinitionsClient.Get":
		resp, err = r.dispatchGet(req)
	case "RoleDefinitionsClient.NewListPager":
		resp, err = r.dispatchNewListPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (r *RoleDefinitionsServerTransport) dispatchCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if r.srv.CreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("method CreateOrUpdate not implemented")}
	}
	const regexStr = "/(?P<scope>[a-zA-Z0-9-_]+)/providers/Microsoft.Authorization/roleDefinitions/(?P<roleDefinitionName>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[azkeyvault.RoleDefinitionCreateParameters](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := r.srv.CreateOrUpdate(req.Context(), req.URL.Host, matches[regex.SubexpIndex("scope")], matches[regex.SubexpIndex("roleDefinitionName")], body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RoleDefinition, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *RoleDefinitionsServerTransport) dispatchDelete(req *http.Request) (*http.Response, error) {
	if r.srv.Delete == nil {
		return nil, &nonRetriableError{errors.New("method Delete not implemented")}
	}
	const regexStr = "/(?P<scope>[a-zA-Z0-9-_]+)/providers/Microsoft.Authorization/roleDefinitions/(?P<roleDefinitionName>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	respr, errRespr := r.srv.Delete(req.Context(), req.URL.Host, matches[regex.SubexpIndex("scope")], matches[regex.SubexpIndex("roleDefinitionName")], nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RoleDefinition, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *RoleDefinitionsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if r.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("method Get not implemented")}
	}
	const regexStr = "/(?P<scope>[a-zA-Z0-9-_]+)/providers/Microsoft.Authorization/roleDefinitions/(?P<roleDefinitionName>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	respr, errRespr := r.srv.Get(req.Context(), req.URL.Host, matches[regex.SubexpIndex("scope")], matches[regex.SubexpIndex("roleDefinitionName")], nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RoleDefinition, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *RoleDefinitionsServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if r.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListPager not implemented")}
	}
	if r.newListPager == nil {
		const regexStr = "/(?P<scope>[a-zA-Z0-9-_]+)/providers/Microsoft.Authorization/roleDefinitions"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		filterParam := getOptional(qp.Get("$filter"))
		var options *azkeyvault.RoleDefinitionsClientListOptions
		if filterParam != nil {
			options = &azkeyvault.RoleDefinitionsClientListOptions{
				Filter: filterParam,
			}
		}
		resp := r.srv.NewListPager(req.URL.Host, matches[regex.SubexpIndex("scope")], options)
		r.newListPager = &resp
		server.PagerResponderInjectNextLinks(r.newListPager, req, func(page *azkeyvault.RoleDefinitionsClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(r.newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(r.newListPager) {
		r.newListPager = nil
	}
	return resp, nil
}
