//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package azkeyvault

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
)

// HSMSecurityDomainClient contains the methods for the HSMSecurityDomain group.
// Don't use this type directly, use a constructor function instead.
type HSMSecurityDomainClient struct {
	internal *azcore.Client
}

// BeginDownload - Retrieves the Security Domain from the managed HSM. Calling this endpoint can be used to activate a provisioned
// managed HSM resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 7.2
//   - vaultBaseURL - The vault name, for example https://myvault.vault.azure.net.
//   - certificateInfoObject - The Security Domain download operation requires customer to provide N certificates (minimum 3 and
//     maximum 10) containing a public key in JWK format.
//   - options - HSMSecurityDomainClientBeginDownloadOptions contains the optional parameters for the HSMSecurityDomainClient.BeginDownload
//     method.
func (client *HSMSecurityDomainClient) BeginDownload(ctx context.Context, vaultBaseURL string, certificateInfoObject CertificateInfoObject, options *HSMSecurityDomainClientBeginDownloadOptions) (resp *runtime.Poller[HSMSecurityDomainClientDownloadResponse], err error) {
	if options == nil || options.ResumeToken == "" {
		ctx, endSpan := runtime.StartSpan(ctx, "HSMSecurityDomainClient.BeginDownload", client.internal.Tracer(), nil)
		defer func() { endSpan(err) }()
		resp, err := client.download(ctx, vaultBaseURL, certificateInfoObject, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[HSMSecurityDomainClientDownloadResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[HSMSecurityDomainClientDownloadResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Download - Retrieves the Security Domain from the managed HSM. Calling this endpoint can be used to activate a provisioned
// managed HSM resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 7.2
func (client *HSMSecurityDomainClient) download(ctx context.Context, vaultBaseURL string, certificateInfoObject CertificateInfoObject, options *HSMSecurityDomainClientBeginDownloadOptions) (resp *http.Response, err error) {
	req, err := client.downloadCreateRequest(ctx, vaultBaseURL, certificateInfoObject, options)
	if err != nil {
		return
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return
	}
	return httpResp, nil
}

// downloadCreateRequest creates the Download request.
func (client *HSMSecurityDomainClient) downloadCreateRequest(ctx context.Context, vaultBaseURL string, certificateInfoObject CertificateInfoObject, options *HSMSecurityDomainClientBeginDownloadOptions) (*policy.Request, error) {
	host := "{vaultBaseUrl}"
	host = strings.ReplaceAll(host, "{vaultBaseUrl}", vaultBaseURL)
	urlPath := "/securitydomain/download"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "7.2")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, certificateInfoObject); err != nil {
		return nil, err
	}
	return req, nil
}

// DownloadPending - Retrieves the Security Domain download operation status
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 7.2
//   - vaultBaseURL - The vault name, for example https://myvault.vault.azure.net.
//   - options - HSMSecurityDomainClientDownloadPendingOptions contains the optional parameters for the HSMSecurityDomainClient.DownloadPending
//     method.
func (client *HSMSecurityDomainClient) DownloadPending(ctx context.Context, vaultBaseURL string, options *HSMSecurityDomainClientDownloadPendingOptions) (resp HSMSecurityDomainClientDownloadPendingResponse, err error) {
	ctx, endSpan := runtime.StartSpan(ctx, "HSMSecurityDomainClient.DownloadPending", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.downloadPendingCreateRequest(ctx, vaultBaseURL, options)
	if err != nil {
		return
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return
	}
	return client.downloadPendingHandleResponse(httpResp)
}

// downloadPendingCreateRequest creates the DownloadPending request.
func (client *HSMSecurityDomainClient) downloadPendingCreateRequest(ctx context.Context, vaultBaseURL string, options *HSMSecurityDomainClientDownloadPendingOptions) (*policy.Request, error) {
	host := "{vaultBaseUrl}"
	host = strings.ReplaceAll(host, "{vaultBaseUrl}", vaultBaseURL)
	urlPath := "/securitydomain/download/pending"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// downloadPendingHandleResponse handles the DownloadPending response.
func (client *HSMSecurityDomainClient) downloadPendingHandleResponse(resp *http.Response) (HSMSecurityDomainClientDownloadPendingResponse, error) {
	result := HSMSecurityDomainClientDownloadPendingResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SecurityDomainOperationStatus); err != nil {
		return HSMSecurityDomainClientDownloadPendingResponse{}, err
	}
	return result, nil
}

// TransferKey - Retrieve Security Domain transfer key
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 7.2
//   - vaultBaseURL - The vault name, for example https://myvault.vault.azure.net.
//   - options - HSMSecurityDomainClientTransferKeyOptions contains the optional parameters for the HSMSecurityDomainClient.TransferKey
//     method.
func (client *HSMSecurityDomainClient) TransferKey(ctx context.Context, vaultBaseURL string, options *HSMSecurityDomainClientTransferKeyOptions) (resp HSMSecurityDomainClientTransferKeyResponse, err error) {
	ctx, endSpan := runtime.StartSpan(ctx, "HSMSecurityDomainClient.TransferKey", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.transferKeyCreateRequest(ctx, vaultBaseURL, options)
	if err != nil {
		return
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return
	}
	return client.transferKeyHandleResponse(httpResp)
}

// transferKeyCreateRequest creates the TransferKey request.
func (client *HSMSecurityDomainClient) transferKeyCreateRequest(ctx context.Context, vaultBaseURL string, options *HSMSecurityDomainClientTransferKeyOptions) (*policy.Request, error) {
	host := "{vaultBaseUrl}"
	host = strings.ReplaceAll(host, "{vaultBaseUrl}", vaultBaseURL)
	urlPath := "/securitydomain/upload"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "7.2")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// transferKeyHandleResponse handles the TransferKey response.
func (client *HSMSecurityDomainClient) transferKeyHandleResponse(resp *http.Response) (HSMSecurityDomainClientTransferKeyResponse, error) {
	result := HSMSecurityDomainClientTransferKeyResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.TransferKey); err != nil {
		return HSMSecurityDomainClientTransferKeyResponse{}, err
	}
	return result, nil
}

// BeginUpload - Restore the provided Security Domain.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 7.2
//   - vaultBaseURL - The vault name, for example https://myvault.vault.azure.net.
//   - securityDomain - The Security Domain to be restored.
//   - options - HSMSecurityDomainClientBeginUploadOptions contains the optional parameters for the HSMSecurityDomainClient.BeginUpload
//     method.
func (client *HSMSecurityDomainClient) BeginUpload(ctx context.Context, vaultBaseURL string, securityDomain SecurityDomainObject, options *HSMSecurityDomainClientBeginUploadOptions) (resp *runtime.Poller[HSMSecurityDomainClientUploadResponse], err error) {
	if options == nil || options.ResumeToken == "" {
		ctx, endSpan := runtime.StartSpan(ctx, "HSMSecurityDomainClient.BeginUpload", client.internal.Tracer(), nil)
		defer func() { endSpan(err) }()
		resp, err := client.upload(ctx, vaultBaseURL, securityDomain, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[HSMSecurityDomainClientUploadResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[HSMSecurityDomainClientUploadResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Upload - Restore the provided Security Domain.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 7.2
func (client *HSMSecurityDomainClient) upload(ctx context.Context, vaultBaseURL string, securityDomain SecurityDomainObject, options *HSMSecurityDomainClientBeginUploadOptions) (resp *http.Response, err error) {
	req, err := client.uploadCreateRequest(ctx, vaultBaseURL, securityDomain, options)
	if err != nil {
		return
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return
	}
	return httpResp, nil
}

// uploadCreateRequest creates the Upload request.
func (client *HSMSecurityDomainClient) uploadCreateRequest(ctx context.Context, vaultBaseURL string, securityDomain SecurityDomainObject, options *HSMSecurityDomainClientBeginUploadOptions) (*policy.Request, error) {
	host := "{vaultBaseUrl}"
	host = strings.ReplaceAll(host, "{vaultBaseUrl}", vaultBaseURL)
	urlPath := "/securitydomain/upload"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, securityDomain); err != nil {
		return nil, err
	}
	return req, nil
}

// UploadPending - Get Security Domain upload operation status
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 7.2
//   - vaultBaseURL - The vault name, for example https://myvault.vault.azure.net.
//   - options - HSMSecurityDomainClientUploadPendingOptions contains the optional parameters for the HSMSecurityDomainClient.UploadPending
//     method.
func (client *HSMSecurityDomainClient) UploadPending(ctx context.Context, vaultBaseURL string, options *HSMSecurityDomainClientUploadPendingOptions) (resp HSMSecurityDomainClientUploadPendingResponse, err error) {
	ctx, endSpan := runtime.StartSpan(ctx, "HSMSecurityDomainClient.UploadPending", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.uploadPendingCreateRequest(ctx, vaultBaseURL, options)
	if err != nil {
		return
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return
	}
	return client.uploadPendingHandleResponse(httpResp)
}

// uploadPendingCreateRequest creates the UploadPending request.
func (client *HSMSecurityDomainClient) uploadPendingCreateRequest(ctx context.Context, vaultBaseURL string, options *HSMSecurityDomainClientUploadPendingOptions) (*policy.Request, error) {
	host := "{vaultBaseUrl}"
	host = strings.ReplaceAll(host, "{vaultBaseUrl}", vaultBaseURL)
	urlPath := "/securitydomain/upload/pending"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// uploadPendingHandleResponse handles the UploadPending response.
func (client *HSMSecurityDomainClient) uploadPendingHandleResponse(resp *http.Response) (HSMSecurityDomainClientUploadPendingResponse, error) {
	result := HSMSecurityDomainClientUploadPendingResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SecurityDomainOperationStatus); err != nil {
		return HSMSecurityDomainClientUploadPendingResponse{}, err
	}
	return result, nil
}
