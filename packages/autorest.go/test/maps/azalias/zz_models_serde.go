// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azalias

import (
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"reflect"
	"time"
)

// MarshalJSON implements the json.Marshaller interface for type AliasesCreateResponse.
func (a AliasesCreateResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "aliasId", a.AliasID)
	populate(objectMap, "createdTimestamp", a.CreatedTimestamp)
	populate(objectMap, "creatorDataItemId", a.CreatorDataItemID)
	populate(objectMap, "lastUpdatedTimestamp", a.LastUpdatedTimestamp)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AliasesCreateResponse.
func (a *AliasesCreateResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "aliasId":
			err = unpopulate(val, "AliasID", &a.AliasID)
			delete(rawMsg, key)
		case "createdTimestamp":
			err = unpopulate(val, "CreatedTimestamp", &a.CreatedTimestamp)
			delete(rawMsg, key)
		case "creatorDataItemId":
			err = unpopulate(val, "CreatorDataItemID", &a.CreatorDataItemID)
			delete(rawMsg, key)
		case "lastUpdatedTimestamp":
			err = unpopulate(val, "LastUpdatedTimestamp", &a.LastUpdatedTimestamp)
			delete(rawMsg, key)
		default:
			err = fmt.Errorf("unmarshalling type %T, unknown field %q", a, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ErrorResponse.
func (e ErrorResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "code", e.Code)
	populate(objectMap, "message", e.Message)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ErrorResponse.
func (e *ErrorResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", e, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "code":
			err = unpopulate(val, "Code", &e.Code)
			delete(rawMsg, key)
		case "message":
			err = unpopulate(val, "Message", &e.Message)
			delete(rawMsg, key)
		default:
			err = fmt.Errorf("unmarshalling type %T, unknown field %q", e, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", e, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type GeoJSONFeature.
func (g GeoJSONFeature) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	if g.FeatureType == nil {
		g.FeatureType = to.Ptr("default-value")
	}
	populate(objectMap, "featureType", g.FeatureType)
	populate(objectMap, "id", g.ID)
	populateAny(objectMap, "properties", g.Properties)
	if g.Setting == nil {
		g.Setting = to.Ptr(DataSettingTwo)
	}
	populate(objectMap, "setting", g.Setting)
	objectMap["type"] = GeoJSONObjectTypeGeoJSONFeature
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type GeoJSONFeature.
func (g *GeoJSONFeature) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", g, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "featureType":
			err = unpopulate(val, "FeatureType", &g.FeatureType)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &g.ID)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, "Properties", &g.Properties)
			delete(rawMsg, key)
		case "setting":
			err = unpopulate(val, "Setting", &g.Setting)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &g.Type)
			delete(rawMsg, key)
		default:
			err = fmt.Errorf("unmarshalling type %T, unknown field %q", g, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", g, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type GeoJSONFeatureData.
func (g GeoJSONFeatureData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	if g.FeatureType == nil {
		g.FeatureType = to.Ptr("default-value")
	}
	populate(objectMap, "featureType", g.FeatureType)
	populate(objectMap, "id", g.ID)
	populateAny(objectMap, "properties", g.Properties)
	if g.Setting == nil {
		g.Setting = to.Ptr(DataSettingTwo)
	}
	populate(objectMap, "setting", g.Setting)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type GeoJSONFeatureData.
func (g *GeoJSONFeatureData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", g, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "featureType":
			err = unpopulate(val, "FeatureType", &g.FeatureType)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &g.ID)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, "Properties", &g.Properties)
			delete(rawMsg, key)
		case "setting":
			err = unpopulate(val, "Setting", &g.Setting)
			delete(rawMsg, key)
		default:
			err = fmt.Errorf("unmarshalling type %T, unknown field %q", g, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", g, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type GeoJSONObject.
func (g GeoJSONObject) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "id", g.ID)
	objectMap["type"] = g.Type
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type GeoJSONObject.
func (g *GeoJSONObject) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", g, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &g.ID)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &g.Type)
			delete(rawMsg, key)
		default:
			err = fmt.Errorf("unmarshalling type %T, unknown field %q", g, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", g, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type GeoJSONObjectNamedCollection.
func (g GeoJSONObjectNamedCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "collectionName", g.CollectionName)
	populate(objectMap, "objects", g.Objects)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type GeoJSONObjectNamedCollection.
func (g *GeoJSONObjectNamedCollection) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", g, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "collectionName":
			err = unpopulate(val, "CollectionName", &g.CollectionName)
			delete(rawMsg, key)
		case "objects":
			g.Objects, err = unmarshalGeoJSONObjectClassificationMap(val)
			delete(rawMsg, key)
		default:
			err = fmt.Errorf("unmarshalling type %T, unknown field %q", g, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", g, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type GeoJSONRecursiveDisciminators.
func (g GeoJSONRecursiveDisciminators) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "combinedOne", g.CombinedOne)
	populate(objectMap, "combinedThree", g.CombinedThree)
	populate(objectMap, "combinedTwo", g.CombinedTwo)
	populate(objectMap, "items", g.Items)
	populate(objectMap, "objects", g.Objects)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type GeoJSONRecursiveDisciminators.
func (g *GeoJSONRecursiveDisciminators) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", g, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "combinedOne":
			var combinedOneRaw []map[string]json.RawMessage
			if err = json.Unmarshal(val, &combinedOneRaw); err != nil {
				return err
			}
			combinedOne := make([]map[string]map[string]GeoJSONObjectClassification, len(combinedOneRaw))
			for i1 := range combinedOneRaw {
				combinedOne[i1] = map[string]map[string]GeoJSONObjectClassification{}
				for k2, v2 := range combinedOneRaw[i1] {
					combinedOne[i1][k2], err = unmarshalGeoJSONObjectClassificationMap(v2)
					if err != nil {
						return fmt.Errorf("unmarshalling type %T: %v", g, err)
					}
				}
			}
			g.CombinedOne = combinedOne
			delete(rawMsg, key)
		case "combinedThree":
			var combinedThreeRaw map[string][]json.RawMessage
			if err = json.Unmarshal(val, &combinedThreeRaw); err != nil {
				return err
			}
			combinedThree := map[string][]map[string]GeoJSONObjectClassification{}
			for k1, v1 := range combinedThreeRaw {
				combinedThree[k1] = make([]map[string]GeoJSONObjectClassification, len(v1))
				for i2 := range v1 {
					combinedThree[k1][i2], err = unmarshalGeoJSONObjectClassificationMap(v1[i2])
					if err != nil {
						return fmt.Errorf("unmarshalling type %T: %v", g, err)
					}
				}
			}
			g.CombinedThree = combinedThree
			delete(rawMsg, key)
		case "combinedTwo":
			var combinedTwoRaw map[string]map[string]json.RawMessage
			if err = json.Unmarshal(val, &combinedTwoRaw); err != nil {
				return err
			}
			combinedTwo := map[string]map[string][]GeoJSONObjectClassification{}
			for k1, v1 := range combinedTwoRaw {
				combinedTwo[k1] = map[string][]GeoJSONObjectClassification{}
				for k2, v2 := range v1 {
					combinedTwo[k1][k2], err = unmarshalGeoJSONObjectClassificationArray(v2)
					if err != nil {
						return fmt.Errorf("unmarshalling type %T: %v", g, err)
					}
				}
			}
			g.CombinedTwo = combinedTwo
			delete(rawMsg, key)
		case "items":
			var itemsRaw []json.RawMessage
			if err = json.Unmarshal(val, &itemsRaw); err != nil {
				return err
			}
			items := make([][]GeoJSONObjectClassification, len(itemsRaw))
			for i1 := range itemsRaw {
				items[i1], err = unmarshalGeoJSONObjectClassificationArray(itemsRaw[i1])
				if err != nil {
					return fmt.Errorf("unmarshalling type %T: %v", g, err)
				}
			}
			g.Items = items
			delete(rawMsg, key)
		case "objects":
			var objectsRaw map[string]json.RawMessage
			if err = json.Unmarshal(val, &objectsRaw); err != nil {
				return err
			}
			objects := map[string]map[string]GeoJSONObjectClassification{}
			for k1, v1 := range objectsRaw {
				objects[k1], err = unmarshalGeoJSONObjectClassificationMap(v1)
				if err != nil {
					return fmt.Errorf("unmarshalling type %T: %v", g, err)
				}
			}
			g.Objects = objects
			delete(rawMsg, key)
		default:
			err = fmt.Errorf("unmarshalling type %T, unknown field %q", g, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", g, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ListResponse.
func (l ListResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "aliases", l.Aliases)
	populate(objectMap, "nextLink", l.NextLink)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ListResponse.
func (l *ListResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", l, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "aliases":
			err = unpopulate(val, "Aliases", &l.Aliases)
			delete(rawMsg, key)
		case "nextLink":
			err = unpopulate(val, "NextLink", &l.NextLink)
			delete(rawMsg, key)
		default:
			err = fmt.Errorf("unmarshalling type %T, unknown field %q", l, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", l, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PagesOfThings.
func (p PagesOfThings) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "values", p.Values)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PagesOfThings.
func (p *PagesOfThings) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", p, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, "NextLink", &p.NextLink)
			delete(rawMsg, key)
		case "values":
			err = unpopulate(val, "Values", &p.Values)
			delete(rawMsg, key)
		default:
			err = fmt.Errorf("unmarshalling type %T, unknown field %q", p, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", p, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ParameterMetadataValue.
func (p ParameterMetadataValue) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populateAny(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ParameterMetadataValue.
func (p *ParameterMetadataValue) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", p, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "value":
			err = unpopulate(val, "Value", &p.Value)
			delete(rawMsg, key)
		default:
			err = fmt.Errorf("unmarshalling type %T, unknown field %q", p, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", p, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ParameterValuesValue.
func (p ParameterValuesValue) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populateAny(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ParameterValuesValue.
func (p *ParameterValuesValue) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", p, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "value":
			err = unpopulate(val, "Value", &p.Value)
			delete(rawMsg, key)
		default:
			err = fmt.Errorf("unmarshalling type %T, unknown field %q", p, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", p, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PolicyAssignmentProperties.
func (p PolicyAssignmentProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "displayName", p.DisplayName)
	populate(objectMap, "metadata", p.Metadata)
	populate(objectMap, "parameters", p.Parameters)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PolicyAssignmentProperties.
func (p *PolicyAssignmentProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", p, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "displayName":
			err = unpopulate(val, "DisplayName", &p.DisplayName)
			delete(rawMsg, key)
		case "metadata":
			err = unpopulate(val, "Metadata", &p.Metadata)
			delete(rawMsg, key)
		case "parameters":
			err = unpopulate(val, "Parameters", &p.Parameters)
			delete(rawMsg, key)
		default:
			err = fmt.Errorf("unmarshalling type %T, unknown field %q", p, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", p, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ScheduleCreateOrUpdateProperties.
func (s ScheduleCreateOrUpdateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "aliases", s.Aliases)
	populate(objectMap, "description", s.Description)
	populateAny(objectMap, "interval", s.Interval)
	populateDateTimeRFC3339(objectMap, "startTime", s.StartTime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ScheduleCreateOrUpdateProperties.
func (s *ScheduleCreateOrUpdateProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "aliases":
			err = unpopulate(val, "Aliases", &s.Aliases)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, "Description", &s.Description)
			delete(rawMsg, key)
		case "interval":
			err = unpopulate(val, "Interval", &s.Interval)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateDateTimeRFC3339(val, "StartTime", &s.StartTime)
			delete(rawMsg, key)
		default:
			err = fmt.Errorf("unmarshalling type %T, unknown field %q", s, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TypeWithRawJSON.
func (t TypeWithRawJSON) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populateAny(objectMap, "anyObject", t.AnyObject)
	populateAny(objectMap, "anything", t.Anything)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TypeWithRawJSON.
func (t *TypeWithRawJSON) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "anyObject":
			err = unpopulate(val, "AnyObject", &t.AnyObject)
			delete(rawMsg, key)
		case "anything":
			err = unpopulate(val, "Anything", &t.Anything)
			delete(rawMsg, key)
		default:
			err = fmt.Errorf("unmarshalling type %T, unknown field %q", t, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TypeWithSliceOfTimes.
func (t TypeWithSliceOfTimes) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populateTimeRFC3339(objectMap, "interval", t.Interval)
	aux := make([]dateTimeRFC3339, len(t.Times), len(t.Times))
	for i := 0; i < len(t.Times); i++ {
		aux[i] = (dateTimeRFC3339)(t.Times[i])
	}
	populate(objectMap, "times", aux)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TypeWithSliceOfTimes.
func (t *TypeWithSliceOfTimes) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "interval":
			err = unpopulateTimeRFC3339(val, "Interval", &t.Interval)
			delete(rawMsg, key)
		case "times":
			var aux []dateTimeRFC3339
			err = unpopulate(val, "Times", &aux)
			for _, au := range aux {
				t.Times = append(t.Times, (time.Time)(au))
			}
			delete(rawMsg, key)
		default:
			err = fmt.Errorf("unmarshalling type %T, unknown field %q", t, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

func populate(m map[string]any, k string, v any) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func populateAny(m map[string]any, k string, v any) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, fn string, v any) error {
	if data == nil || string(data) == "null" {
		return nil
	}
	if err := json.Unmarshal(data, v); err != nil {
		return fmt.Errorf("struct field %s: %v", fn, err)
	}
	return nil
}
