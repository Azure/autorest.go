//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azalias

// DataSetting - test enum with a default
type DataSetting string

const (
	DataSettingOne   DataSetting = "one"
	DataSettingThree DataSetting = "three"
	DataSettingTwo   DataSetting = "two"
)

// PossibleDataSettingValues returns the possible values for the DataSetting const type.
func PossibleDataSettingValues() []DataSetting {
	return []DataSetting{
		DataSettingOne,
		DataSettingThree,
		DataSettingTwo,
	}
}

// GeoJSONObjectType - Specifies the GeoJSON type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint,
// LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and
// FeatureCollection.
type GeoJSONObjectType string

const (
	// GeoJSONObjectTypeGeoJSONFeature - `GeoJSON Feature` object.
	GeoJSONObjectTypeGeoJSONFeature GeoJSONObjectType = "Feature"
	// GeoJSONObjectTypeGeoJSONFeatureCollection - `GeoJSON FeatureCollection` object.
	GeoJSONObjectTypeGeoJSONFeatureCollection GeoJSONObjectType = "FeatureCollection"
	// GeoJSONObjectTypeGeoJSONGeometryCollection - `GeoJSON GeometryCollection` geometry.
	GeoJSONObjectTypeGeoJSONGeometryCollection GeoJSONObjectType = "GeometryCollection"
	// GeoJSONObjectTypeGeoJSONLineString - `GeoJSON LineString` geometry.
	GeoJSONObjectTypeGeoJSONLineString GeoJSONObjectType = "LineString"
	// GeoJSONObjectTypeGeoJSONMultiLineString - `GeoJSON MultiLineString` geometry.
	GeoJSONObjectTypeGeoJSONMultiLineString GeoJSONObjectType = "MultiLineString"
	// GeoJSONObjectTypeGeoJSONMultiPoint - `GeoJSON MultiPoint` geometry.
	GeoJSONObjectTypeGeoJSONMultiPoint GeoJSONObjectType = "MultiPoint"
	// GeoJSONObjectTypeGeoJSONMultiPolygon - `GeoJSON MultiPolygon` geometry.
	GeoJSONObjectTypeGeoJSONMultiPolygon GeoJSONObjectType = "MultiPolygon"
	// GeoJSONObjectTypeGeoJSONPoint - `GeoJSON Point` geometry.
	GeoJSONObjectTypeGeoJSONPoint GeoJSONObjectType = "Point"
	// GeoJSONObjectTypeGeoJSONPolygon - `GeoJSON Polygon` geometry.
	GeoJSONObjectTypeGeoJSONPolygon GeoJSONObjectType = "Polygon"
)

// PossibleGeoJSONObjectTypeValues returns the possible values for the GeoJSONObjectType const type.
func PossibleGeoJSONObjectTypeValues() []GeoJSONObjectType {
	return []GeoJSONObjectType{
		GeoJSONObjectTypeGeoJSONFeature,
		GeoJSONObjectTypeGeoJSONFeatureCollection,
		GeoJSONObjectTypeGeoJSONGeometryCollection,
		GeoJSONObjectTypeGeoJSONLineString,
		GeoJSONObjectTypeGeoJSONMultiLineString,
		GeoJSONObjectTypeGeoJSONMultiPoint,
		GeoJSONObjectTypeGeoJSONMultiPolygon,
		GeoJSONObjectTypeGeoJSONPoint,
		GeoJSONObjectTypeGeoJSONPolygon,
	}
}

type GeographicResourceLocation string

const (
	// GeographicResourceLocationEu - Used to access an Azure Maps Creator resource in Europe
	GeographicResourceLocationEu GeographicResourceLocation = "eu"
	// GeographicResourceLocationUs - Used to access an Azure Maps Creator resource in the United States
	GeographicResourceLocationUs GeographicResourceLocation = "us"
)

// PossibleGeographicResourceLocationValues returns the possible values for the GeographicResourceLocation const type.
func PossibleGeographicResourceLocationValues() []GeographicResourceLocation {
	return []GeographicResourceLocation{
		GeographicResourceLocationEu,
		GeographicResourceLocationUs,
	}
}

// Geography - This parameter specifies where the Azure Maps Creator resource is located. Valid values are us and eu.
type Geography string

const (
	GeographyEu Geography = "eu"
	GeographyUs Geography = "us"
)

// PossibleGeographyValues returns the possible values for the Geography const type.
func PossibleGeographyValues() []Geography {
	return []Geography{
		GeographyEu,
		GeographyUs,
	}
}

type LogMetricsGroupBy string

const (
	LogMetricsGroupByCacheStatus    LogMetricsGroupBy = "cacheStatus"
	LogMetricsGroupByCountry        LogMetricsGroupBy = "country"
	LogMetricsGroupByCustomDomain   LogMetricsGroupBy = "customDomain"
	LogMetricsGroupByHTTPStatusCode LogMetricsGroupBy = "httpStatusCode"
	LogMetricsGroupByProtocol       LogMetricsGroupBy = "protocol"
)

// PossibleLogMetricsGroupByValues returns the possible values for the LogMetricsGroupBy const type.
func PossibleLogMetricsGroupByValues() []LogMetricsGroupBy {
	return []LogMetricsGroupBy{
		LogMetricsGroupByCacheStatus,
		LogMetricsGroupByCountry,
		LogMetricsGroupByCustomDomain,
		LogMetricsGroupByHTTPStatusCode,
		LogMetricsGroupByProtocol,
	}
}

type SomethingCount int32

const (
	SomethingCountForty  SomethingCount = 40
	SomethingCountTen    SomethingCount = 10
	SomethingCountThirty SomethingCount = 30
	SomethingCountTwenty SomethingCount = 20
)

// PossibleSomethingCountValues returns the possible values for the SomethingCount const type.
func PossibleSomethingCountValues() []SomethingCount {
	return []SomethingCount{
		SomethingCountForty,
		SomethingCountTen,
		SomethingCountThirty,
		SomethingCountTwenty,
	}
}

type Things string

const (
	ThingsOther Things = "other"
	ThingsThat  Things = "that"
	ThingsThis  Things = "this"
)

// PossibleThingsValues returns the possible values for the Things const type.
func PossibleThingsValues() []Things {
	return []Things{
		ThingsOther,
		ThingsThat,
		ThingsThis,
	}
}
