//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"azblob"
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"io"
	"net/http"
	"regexp"
	"strconv"
	"strings"
	"time"
)

// BlockBlobServer is a fake server for instances of the azblob.BlockBlobClient type.
type BlockBlobServer struct {
	// CommitBlockList is the fake for method BlockBlobClient.CommitBlockList
	// HTTP status codes to indicate success: http.StatusCreated
	CommitBlockList func(ctx context.Context, containerName string, blob string, comp azblob.Enum31, blocks azblob.BlockLookupList, options *azblob.BlockBlobClientCommitBlockListOptions, blobHTTPHeaders *azblob.BlobHTTPHeaders, leaseAccessConditions *azblob.LeaseAccessConditions, cpkInfo *azblob.CpkInfo, cpkScopeInfo *azblob.CpkScopeInfo, modifiedAccessConditions *azblob.ModifiedAccessConditions) (resp azfake.Responder[azblob.BlockBlobClientCommitBlockListResponse], errResp azfake.ErrorResponder)

	// GetBlockList is the fake for method BlockBlobClient.GetBlockList
	// HTTP status codes to indicate success: http.StatusOK
	GetBlockList func(ctx context.Context, containerName string, blob string, comp azblob.Enum31, listType azblob.BlockListType, options *azblob.BlockBlobClientGetBlockListOptions, leaseAccessConditions *azblob.LeaseAccessConditions, modifiedAccessConditions *azblob.ModifiedAccessConditions) (resp azfake.Responder[azblob.BlockBlobClientGetBlockListResponse], errResp azfake.ErrorResponder)

	// PutBlobFromURL is the fake for method BlockBlobClient.PutBlobFromURL
	// HTTP status codes to indicate success: http.StatusCreated
	PutBlobFromURL func(ctx context.Context, containerName string, blob string, contentLength int64, copySource string, options *azblob.BlockBlobClientPutBlobFromURLOptions, blobHTTPHeaders *azblob.BlobHTTPHeaders, leaseAccessConditions *azblob.LeaseAccessConditions, cpkInfo *azblob.CpkInfo, cpkScopeInfo *azblob.CpkScopeInfo, modifiedAccessConditions *azblob.ModifiedAccessConditions, sourceModifiedAccessConditions *azblob.SourceModifiedAccessConditions) (resp azfake.Responder[azblob.BlockBlobClientPutBlobFromURLResponse], errResp azfake.ErrorResponder)

	// StageBlock is the fake for method BlockBlobClient.StageBlock
	// HTTP status codes to indicate success: http.StatusCreated
	StageBlock func(ctx context.Context, containerName string, blob string, comp azblob.Enum30, blockID string, contentLength int64, body io.ReadSeekCloser, options *azblob.BlockBlobClientStageBlockOptions, leaseAccessConditions *azblob.LeaseAccessConditions, cpkInfo *azblob.CpkInfo, cpkScopeInfo *azblob.CpkScopeInfo) (resp azfake.Responder[azblob.BlockBlobClientStageBlockResponse], errResp azfake.ErrorResponder)

	// StageBlockFromURL is the fake for method BlockBlobClient.StageBlockFromURL
	// HTTP status codes to indicate success: http.StatusCreated
	StageBlockFromURL func(ctx context.Context, containerName string, blob string, comp azblob.Enum30, blockID string, contentLength int64, sourceURL string, options *azblob.BlockBlobClientStageBlockFromURLOptions, cpkInfo *azblob.CpkInfo, cpkScopeInfo *azblob.CpkScopeInfo, leaseAccessConditions *azblob.LeaseAccessConditions, sourceModifiedAccessConditions *azblob.SourceModifiedAccessConditions) (resp azfake.Responder[azblob.BlockBlobClientStageBlockFromURLResponse], errResp azfake.ErrorResponder)

	// Upload is the fake for method BlockBlobClient.Upload
	// HTTP status codes to indicate success: http.StatusCreated
	Upload func(ctx context.Context, containerName string, blob string, contentLength int64, body io.ReadSeekCloser, options *azblob.BlockBlobClientUploadOptions, blobHTTPHeaders *azblob.BlobHTTPHeaders, leaseAccessConditions *azblob.LeaseAccessConditions, cpkInfo *azblob.CpkInfo, cpkScopeInfo *azblob.CpkScopeInfo, modifiedAccessConditions *azblob.ModifiedAccessConditions) (resp azfake.Responder[azblob.BlockBlobClientUploadResponse], errResp azfake.ErrorResponder)
}

// NewBlockBlobServerTransport creates a new instance of BlockBlobServerTransport with the provided implementation.
// The returned BlockBlobServerTransport instance is connected to an instance of azblob.BlockBlobClient by way of the
// undefined.Transporter field.
func NewBlockBlobServerTransport(srv *BlockBlobServer) *BlockBlobServerTransport {
	return &BlockBlobServerTransport{srv: srv}
}

// BlockBlobServerTransport connects instances of azblob.BlockBlobClient to instances of BlockBlobServer.
// Don't use this type directly, use NewBlockBlobServerTransport instead.
type BlockBlobServerTransport struct {
	srv *BlockBlobServer
}

// Do implements the policy.Transporter interface for BlockBlobServerTransport.
func (b *BlockBlobServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "BlockBlobClient.CommitBlockList":
		resp, err = b.dispatchCommitBlockList(req)
	case "BlockBlobClient.GetBlockList":
		resp, err = b.dispatchGetBlockList(req)
	case "BlockBlobClient.PutBlobFromURL":
		resp, err = b.dispatchPutBlobFromURL(req)
	case "BlockBlobClient.StageBlock":
		resp, err = b.dispatchStageBlock(req)
	case "BlockBlobClient.StageBlockFromURL":
		resp, err = b.dispatchStageBlockFromURL(req)
	case "BlockBlobClient.Upload":
		resp, err = b.dispatchUpload(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (b *BlockBlobServerTransport) dispatchCommitBlockList(req *http.Request) (*http.Response, error) {
	if b.srv.CommitBlockList == nil {
		return nil, &nonRetriableError{errors.New("method CommitBlockList not implemented")}
	}
	const regexStr = "/(?P<containerName>[a-zA-Z0-9-_]+)/(?P<blob>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	body, err := server.UnmarshalRequestAsXML[azblob.BlockLookupList](req)
	if err != nil {
		return nil, err
	}
	timeoutParam, err := parseOptional(qp.Get("timeout"), func(v string) (int32, error) {
		p, parseErr := strconv.ParseInt(v, 10, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	blobCacheControlParam := getOptional(getHeaderValue(req.Header, "x-ms-blob-cache-control"))
	blobContentTypeParam := getOptional(getHeaderValue(req.Header, "x-ms-blob-content-type"))
	blobContentEncodingParam := getOptional(getHeaderValue(req.Header, "x-ms-blob-content-encoding"))
	blobContentLanguageParam := getOptional(getHeaderValue(req.Header, "x-ms-blob-content-language"))
	blobContentMD5Param, err := base64.StdEncoding.DecodeString(getHeaderValue(req.Header, "x-ms-blob-content-md5"))
	if err != nil {
		return nil, err
	}
	transactionalContentMD5Param, err := base64.StdEncoding.DecodeString(getHeaderValue(req.Header, "Content-MD5"))
	if err != nil {
		return nil, err
	}
	transactionalContentCRC64Param, err := base64.StdEncoding.DecodeString(getHeaderValue(req.Header, "x-ms-content-crc64"))
	if err != nil {
		return nil, err
	}
	var metadataParam map[string]*string
	for hh := range req.Header {
		if len(hh) > len("x-ms-meta-") && strings.EqualFold(hh[:len("x-ms-meta-")], "x-ms-meta-") {
			if metadataParam == nil {
				metadataParam = map[string]*string{}
			}
			metadataParam[hh[len("x-ms-meta-"):]] = to.Ptr(getHeaderValue(req.Header, hh))
		}
	}
	leaseIDParam := getOptional(getHeaderValue(req.Header, "x-ms-lease-id"))
	blobContentDispositionParam := getOptional(getHeaderValue(req.Header, "x-ms-blob-content-disposition"))
	encryptionKeyParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-key"))
	encryptionKeySHA256Param := getOptional(getHeaderValue(req.Header, "x-ms-encryption-key-sha256"))
	encryptionAlgorithmParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-algorithm"))
	encryptionScopeParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-scope"))
	tierParam := getOptional(azblob.AccessTier(getHeaderValue(req.Header, "x-ms-access-tier")))
	ifModifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Modified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifUnmodifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Unmodified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
	ifNoneMatchParam := getOptional(getHeaderValue(req.Header, "If-None-Match"))
	ifTagsParam := getOptional(getHeaderValue(req.Header, "x-ms-if-tags"))
	requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-request-id"))
	blobTagsStringParam := getOptional(getHeaderValue(req.Header, "x-ms-tags"))
	immutabilityPolicyExpiryParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-immutability-policy-until-date"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	immutabilityPolicyModeParam := getOptional(azblob.BlobImmutabilityPolicyMode(getHeaderValue(req.Header, "x-ms-immutability-policy-mode")))
	legalHoldParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-legal-hold"), strconv.ParseBool)
	if err != nil {
		return nil, err
	}
	var options *azblob.BlockBlobClientCommitBlockListOptions
	if timeoutParam != nil || transactionalContentMD5Param != nil || transactionalContentCRC64Param != nil || metadataParam != nil || tierParam != nil || requestIDParam != nil || blobTagsStringParam != nil || immutabilityPolicyExpiryParam != nil || immutabilityPolicyModeParam != nil || legalHoldParam != nil {
		options = &azblob.BlockBlobClientCommitBlockListOptions{
			Timeout:                   timeoutParam,
			TransactionalContentMD5:   transactionalContentMD5Param,
			TransactionalContentCRC64: transactionalContentCRC64Param,
			Metadata:                  metadataParam,
			Tier:                      tierParam,
			RequestID:                 requestIDParam,
			BlobTagsString:            blobTagsStringParam,
			ImmutabilityPolicyExpiry:  immutabilityPolicyExpiryParam,
			ImmutabilityPolicyMode:    immutabilityPolicyModeParam,
			LegalHold:                 legalHoldParam,
		}
	}
	var blobHTTPHeaders *azblob.BlobHTTPHeaders
	if blobCacheControlParam != nil || blobContentTypeParam != nil || blobContentEncodingParam != nil || blobContentLanguageParam != nil || blobContentMD5Param != nil || blobContentDispositionParam != nil {
		blobHTTPHeaders = &azblob.BlobHTTPHeaders{
			BlobCacheControl:       blobCacheControlParam,
			BlobContentType:        blobContentTypeParam,
			BlobContentEncoding:    blobContentEncodingParam,
			BlobContentLanguage:    blobContentLanguageParam,
			BlobContentMD5:         blobContentMD5Param,
			BlobContentDisposition: blobContentDispositionParam,
		}
	}
	var leaseAccessConditions *azblob.LeaseAccessConditions
	if leaseIDParam != nil {
		leaseAccessConditions = &azblob.LeaseAccessConditions{
			LeaseID: leaseIDParam,
		}
	}
	var cpkInfo *azblob.CpkInfo
	if encryptionKeyParam != nil || encryptionKeySHA256Param != nil || encryptionAlgorithmParam != nil {
		cpkInfo = &azblob.CpkInfo{
			EncryptionKey:       encryptionKeyParam,
			EncryptionKeySHA256: encryptionKeySHA256Param,
			EncryptionAlgorithm: encryptionAlgorithmParam,
		}
	}
	var cpkScopeInfo *azblob.CpkScopeInfo
	if encryptionScopeParam != nil {
		cpkScopeInfo = &azblob.CpkScopeInfo{
			EncryptionScope: encryptionScopeParam,
		}
	}
	var modifiedAccessConditions *azblob.ModifiedAccessConditions
	if ifModifiedSinceParam != nil || ifUnmodifiedSinceParam != nil || ifMatchParam != nil || ifNoneMatchParam != nil || ifTagsParam != nil {
		modifiedAccessConditions = &azblob.ModifiedAccessConditions{
			IfModifiedSince:   ifModifiedSinceParam,
			IfUnmodifiedSince: ifUnmodifiedSinceParam,
			IfMatch:           ifMatchParam,
			IfNoneMatch:       ifNoneMatchParam,
			IfTags:            ifTagsParam,
		}
	}
	respr, errRespr := b.srv.CommitBlockList(req.Context(), matches[regex.SubexpIndex("containerName")], matches[regex.SubexpIndex("blob")], azblob.Enum31(qp.Get("comp")), body, options, blobHTTPHeaders, leaseAccessConditions, cpkInfo, cpkScopeInfo, modifiedAccessConditions)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).ETag; val != nil {
		resp.Header.Set("ETag", *val)
	}
	if val := server.GetResponse(respr).LastModified; val != nil {
		resp.Header.Set("Last-Modified", val.Format(time.RFC1123))
	}
	if val := server.GetResponse(respr).ContentMD5; val != nil {
		resp.Header.Set("Content-MD5", base64.StdEncoding.EncodeToString(val))
	}
	if val := server.GetResponse(respr).XMSContentCRC64; val != nil {
		resp.Header.Set("x-ms-content-crc64", base64.StdEncoding.EncodeToString(val))
	}
	if val := server.GetResponse(respr).ClientRequestID; val != nil {
		resp.Header.Set("x-ms-client-request-id", *val)
	}
	if val := server.GetResponse(respr).RequestID; val != nil {
		resp.Header.Set("x-ms-request-id", *val)
	}
	if val := server.GetResponse(respr).Version; val != nil {
		resp.Header.Set("x-ms-version", *val)
	}
	if val := server.GetResponse(respr).VersionID; val != nil {
		resp.Header.Set("x-ms-version-id", *val)
	}
	if val := server.GetResponse(respr).Date; val != nil {
		resp.Header.Set("Date", val.Format(time.RFC1123))
	}
	if val := server.GetResponse(respr).IsServerEncrypted; val != nil {
		resp.Header.Set("x-ms-request-server-encrypted", strconv.FormatBool(*val))
	}
	if val := server.GetResponse(respr).EncryptionKeySHA256; val != nil {
		resp.Header.Set("x-ms-encryption-key-sha256", *val)
	}
	if val := server.GetResponse(respr).EncryptionScope; val != nil {
		resp.Header.Set("x-ms-encryption-scope", *val)
	}
	return resp, nil
}

func (b *BlockBlobServerTransport) dispatchGetBlockList(req *http.Request) (*http.Response, error) {
	if b.srv.GetBlockList == nil {
		return nil, &nonRetriableError{errors.New("method GetBlockList not implemented")}
	}
	const regexStr = "/(?P<containerName>[a-zA-Z0-9-_]+)/(?P<blob>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	snapshotParam := getOptional(qp.Get("snapshot"))
	timeoutParam, err := parseOptional(qp.Get("timeout"), func(v string) (int32, error) {
		p, parseErr := strconv.ParseInt(v, 10, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	leaseIDParam := getOptional(getHeaderValue(req.Header, "x-ms-lease-id"))
	ifTagsParam := getOptional(getHeaderValue(req.Header, "x-ms-if-tags"))
	requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-request-id"))
	var options *azblob.BlockBlobClientGetBlockListOptions
	if snapshotParam != nil || timeoutParam != nil || requestIDParam != nil {
		options = &azblob.BlockBlobClientGetBlockListOptions{
			Snapshot:  snapshotParam,
			Timeout:   timeoutParam,
			RequestID: requestIDParam,
		}
	}
	var leaseAccessConditions *azblob.LeaseAccessConditions
	if leaseIDParam != nil {
		leaseAccessConditions = &azblob.LeaseAccessConditions{
			LeaseID: leaseIDParam,
		}
	}
	var modifiedAccessConditions *azblob.ModifiedAccessConditions
	if ifTagsParam != nil {
		modifiedAccessConditions = &azblob.ModifiedAccessConditions{
			IfTags: ifTagsParam,
		}
	}
	respr, errRespr := b.srv.GetBlockList(req.Context(), matches[regex.SubexpIndex("containerName")], matches[regex.SubexpIndex("blob")], azblob.Enum31(qp.Get("comp")), azblob.BlockListType(qp.Get("blocklisttype")), options, leaseAccessConditions, modifiedAccessConditions)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsXML(respContent, server.GetResponse(respr).BlockList, req)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).LastModified; val != nil {
		resp.Header.Set("Last-Modified", val.Format(time.RFC1123))
	}
	if val := server.GetResponse(respr).ETag; val != nil {
		resp.Header.Set("ETag", *val)
	}
	if val := server.GetResponse(respr).ContentType; val != nil {
		resp.Header.Set("Content-Type", *val)
	}
	if val := server.GetResponse(respr).BlobContentLength; val != nil {
		resp.Header.Set("x-ms-blob-content-length", strconv.FormatInt(*val, 10))
	}
	if val := server.GetResponse(respr).ClientRequestID; val != nil {
		resp.Header.Set("x-ms-client-request-id", *val)
	}
	if val := server.GetResponse(respr).RequestID; val != nil {
		resp.Header.Set("x-ms-request-id", *val)
	}
	if val := server.GetResponse(respr).Version; val != nil {
		resp.Header.Set("x-ms-version", *val)
	}
	if val := server.GetResponse(respr).Date; val != nil {
		resp.Header.Set("Date", val.Format(time.RFC1123))
	}
	return resp, nil
}

func (b *BlockBlobServerTransport) dispatchPutBlobFromURL(req *http.Request) (*http.Response, error) {
	if b.srv.PutBlobFromURL == nil {
		return nil, &nonRetriableError{errors.New("method PutBlobFromURL not implemented")}
	}
	const regexStr = "/(?P<containerName>[a-zA-Z0-9-_]+)/(?P<blob>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	timeoutParam, err := parseOptional(qp.Get("timeout"), func(v string) (int32, error) {
		p, parseErr := strconv.ParseInt(v, 10, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	transactionalContentMD5Param, err := base64.StdEncoding.DecodeString(getHeaderValue(req.Header, "Content-MD5"))
	if err != nil {
		return nil, err
	}
	contentLengthParam, err := strconv.ParseInt(getHeaderValue(req.Header, "Content-Length"), 10, 64)
	if err != nil {
		return nil, err
	}
	blobContentTypeParam := getOptional(getHeaderValue(req.Header, "x-ms-blob-content-type"))
	blobContentEncodingParam := getOptional(getHeaderValue(req.Header, "x-ms-blob-content-encoding"))
	blobContentLanguageParam := getOptional(getHeaderValue(req.Header, "x-ms-blob-content-language"))
	blobContentMD5Param, err := base64.StdEncoding.DecodeString(getHeaderValue(req.Header, "x-ms-blob-content-md5"))
	if err != nil {
		return nil, err
	}
	blobCacheControlParam := getOptional(getHeaderValue(req.Header, "x-ms-blob-cache-control"))
	var metadataParam map[string]*string
	for hh := range req.Header {
		if len(hh) > len("x-ms-meta-") && strings.EqualFold(hh[:len("x-ms-meta-")], "x-ms-meta-") {
			if metadataParam == nil {
				metadataParam = map[string]*string{}
			}
			metadataParam[hh[len("x-ms-meta-"):]] = to.Ptr(getHeaderValue(req.Header, hh))
		}
	}
	leaseIDParam := getOptional(getHeaderValue(req.Header, "x-ms-lease-id"))
	blobContentDispositionParam := getOptional(getHeaderValue(req.Header, "x-ms-blob-content-disposition"))
	encryptionKeyParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-key"))
	encryptionKeySHA256Param := getOptional(getHeaderValue(req.Header, "x-ms-encryption-key-sha256"))
	encryptionAlgorithmParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-algorithm"))
	encryptionScopeParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-scope"))
	tierParam := getOptional(azblob.AccessTier(getHeaderValue(req.Header, "x-ms-access-tier")))
	ifModifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Modified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifUnmodifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Unmodified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
	ifNoneMatchParam := getOptional(getHeaderValue(req.Header, "If-None-Match"))
	ifTagsParam := getOptional(getHeaderValue(req.Header, "x-ms-if-tags"))
	sourceIfModifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-source-if-modified-since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	sourceIfUnmodifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-source-if-unmodified-since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	sourceIfMatchParam := getOptional(getHeaderValue(req.Header, "x-ms-source-if-match"))
	sourceIfNoneMatchParam := getOptional(getHeaderValue(req.Header, "x-ms-source-if-none-match"))
	sourceIfTagsParam := getOptional(getHeaderValue(req.Header, "x-ms-source-if-tags"))
	requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-request-id"))
	sourceContentMD5Param, err := base64.StdEncoding.DecodeString(getHeaderValue(req.Header, "x-ms-source-content-md5"))
	if err != nil {
		return nil, err
	}
	blobTagsStringParam := getOptional(getHeaderValue(req.Header, "x-ms-tags"))
	copySourceBlobPropertiesParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-copy-source-blob-properties"), strconv.ParseBool)
	if err != nil {
		return nil, err
	}
	copySourceAuthorizationParam := getOptional(getHeaderValue(req.Header, "x-ms-copy-source-authorization"))
	copySourceTagsParam := getOptional(azblob.BlobCopySourceTags(getHeaderValue(req.Header, "x-ms-copy-source-tag-option")))
	var options *azblob.BlockBlobClientPutBlobFromURLOptions
	if timeoutParam != nil || transactionalContentMD5Param != nil || metadataParam != nil || tierParam != nil || requestIDParam != nil || sourceContentMD5Param != nil || blobTagsStringParam != nil || copySourceBlobPropertiesParam != nil || copySourceAuthorizationParam != nil || copySourceTagsParam != nil {
		options = &azblob.BlockBlobClientPutBlobFromURLOptions{
			Timeout:                  timeoutParam,
			TransactionalContentMD5:  transactionalContentMD5Param,
			Metadata:                 metadataParam,
			Tier:                     tierParam,
			RequestID:                requestIDParam,
			SourceContentMD5:         sourceContentMD5Param,
			BlobTagsString:           blobTagsStringParam,
			CopySourceBlobProperties: copySourceBlobPropertiesParam,
			CopySourceAuthorization:  copySourceAuthorizationParam,
			CopySourceTags:           copySourceTagsParam,
		}
	}
	var blobHTTPHeaders *azblob.BlobHTTPHeaders
	if blobContentTypeParam != nil || blobContentEncodingParam != nil || blobContentLanguageParam != nil || blobContentMD5Param != nil || blobCacheControlParam != nil || blobContentDispositionParam != nil {
		blobHTTPHeaders = &azblob.BlobHTTPHeaders{
			BlobContentType:        blobContentTypeParam,
			BlobContentEncoding:    blobContentEncodingParam,
			BlobContentLanguage:    blobContentLanguageParam,
			BlobContentMD5:         blobContentMD5Param,
			BlobCacheControl:       blobCacheControlParam,
			BlobContentDisposition: blobContentDispositionParam,
		}
	}
	var leaseAccessConditions *azblob.LeaseAccessConditions
	if leaseIDParam != nil {
		leaseAccessConditions = &azblob.LeaseAccessConditions{
			LeaseID: leaseIDParam,
		}
	}
	var cpkInfo *azblob.CpkInfo
	if encryptionKeyParam != nil || encryptionKeySHA256Param != nil || encryptionAlgorithmParam != nil {
		cpkInfo = &azblob.CpkInfo{
			EncryptionKey:       encryptionKeyParam,
			EncryptionKeySHA256: encryptionKeySHA256Param,
			EncryptionAlgorithm: encryptionAlgorithmParam,
		}
	}
	var cpkScopeInfo *azblob.CpkScopeInfo
	if encryptionScopeParam != nil {
		cpkScopeInfo = &azblob.CpkScopeInfo{
			EncryptionScope: encryptionScopeParam,
		}
	}
	var modifiedAccessConditions *azblob.ModifiedAccessConditions
	if ifModifiedSinceParam != nil || ifUnmodifiedSinceParam != nil || ifMatchParam != nil || ifNoneMatchParam != nil || ifTagsParam != nil {
		modifiedAccessConditions = &azblob.ModifiedAccessConditions{
			IfModifiedSince:   ifModifiedSinceParam,
			IfUnmodifiedSince: ifUnmodifiedSinceParam,
			IfMatch:           ifMatchParam,
			IfNoneMatch:       ifNoneMatchParam,
			IfTags:            ifTagsParam,
		}
	}
	var sourceModifiedAccessConditions *azblob.SourceModifiedAccessConditions
	if sourceIfModifiedSinceParam != nil || sourceIfUnmodifiedSinceParam != nil || sourceIfMatchParam != nil || sourceIfNoneMatchParam != nil || sourceIfTagsParam != nil {
		sourceModifiedAccessConditions = &azblob.SourceModifiedAccessConditions{
			SourceIfModifiedSince:   sourceIfModifiedSinceParam,
			SourceIfUnmodifiedSince: sourceIfUnmodifiedSinceParam,
			SourceIfMatch:           sourceIfMatchParam,
			SourceIfNoneMatch:       sourceIfNoneMatchParam,
			SourceIfTags:            sourceIfTagsParam,
		}
	}
	respr, errRespr := b.srv.PutBlobFromURL(req.Context(), matches[regex.SubexpIndex("containerName")], matches[regex.SubexpIndex("blob")], contentLengthParam, getHeaderValue(req.Header, "x-ms-copy-source"), options, blobHTTPHeaders, leaseAccessConditions, cpkInfo, cpkScopeInfo, modifiedAccessConditions, sourceModifiedAccessConditions)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).ETag; val != nil {
		resp.Header.Set("ETag", *val)
	}
	if val := server.GetResponse(respr).LastModified; val != nil {
		resp.Header.Set("Last-Modified", val.Format(time.RFC1123))
	}
	if val := server.GetResponse(respr).ContentMD5; val != nil {
		resp.Header.Set("Content-MD5", base64.StdEncoding.EncodeToString(val))
	}
	if val := server.GetResponse(respr).ClientRequestID; val != nil {
		resp.Header.Set("x-ms-client-request-id", *val)
	}
	if val := server.GetResponse(respr).RequestID; val != nil {
		resp.Header.Set("x-ms-request-id", *val)
	}
	if val := server.GetResponse(respr).Version; val != nil {
		resp.Header.Set("x-ms-version", *val)
	}
	if val := server.GetResponse(respr).VersionID; val != nil {
		resp.Header.Set("x-ms-version-id", *val)
	}
	if val := server.GetResponse(respr).Date; val != nil {
		resp.Header.Set("Date", val.Format(time.RFC1123))
	}
	if val := server.GetResponse(respr).IsServerEncrypted; val != nil {
		resp.Header.Set("x-ms-request-server-encrypted", strconv.FormatBool(*val))
	}
	if val := server.GetResponse(respr).EncryptionKeySHA256; val != nil {
		resp.Header.Set("x-ms-encryption-key-sha256", *val)
	}
	if val := server.GetResponse(respr).EncryptionScope; val != nil {
		resp.Header.Set("x-ms-encryption-scope", *val)
	}
	return resp, nil
}

func (b *BlockBlobServerTransport) dispatchStageBlock(req *http.Request) (*http.Response, error) {
	if b.srv.StageBlock == nil {
		return nil, &nonRetriableError{errors.New("method StageBlock not implemented")}
	}
	const regexStr = "/(?P<containerName>[a-zA-Z0-9-_]+)/(?P<blob>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	contentLengthParam, err := strconv.ParseInt(getHeaderValue(req.Header, "Content-Length"), 10, 64)
	if err != nil {
		return nil, err
	}
	transactionalContentMD5Param, err := base64.StdEncoding.DecodeString(getHeaderValue(req.Header, "Content-MD5"))
	if err != nil {
		return nil, err
	}
	transactionalContentCRC64Param, err := base64.StdEncoding.DecodeString(getHeaderValue(req.Header, "x-ms-content-crc64"))
	if err != nil {
		return nil, err
	}
	timeoutParam, err := parseOptional(qp.Get("timeout"), func(v string) (int32, error) {
		p, parseErr := strconv.ParseInt(v, 10, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	leaseIDParam := getOptional(getHeaderValue(req.Header, "x-ms-lease-id"))
	encryptionKeyParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-key"))
	encryptionKeySHA256Param := getOptional(getHeaderValue(req.Header, "x-ms-encryption-key-sha256"))
	encryptionAlgorithmParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-algorithm"))
	encryptionScopeParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-scope"))
	requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-request-id"))
	var options *azblob.BlockBlobClientStageBlockOptions
	if transactionalContentMD5Param != nil || transactionalContentCRC64Param != nil || timeoutParam != nil || requestIDParam != nil {
		options = &azblob.BlockBlobClientStageBlockOptions{
			TransactionalContentMD5:   transactionalContentMD5Param,
			TransactionalContentCRC64: transactionalContentCRC64Param,
			Timeout:                   timeoutParam,
			RequestID:                 requestIDParam,
		}
	}
	var leaseAccessConditions *azblob.LeaseAccessConditions
	if leaseIDParam != nil {
		leaseAccessConditions = &azblob.LeaseAccessConditions{
			LeaseID: leaseIDParam,
		}
	}
	var cpkInfo *azblob.CpkInfo
	if encryptionKeyParam != nil || encryptionKeySHA256Param != nil || encryptionAlgorithmParam != nil {
		cpkInfo = &azblob.CpkInfo{
			EncryptionKey:       encryptionKeyParam,
			EncryptionKeySHA256: encryptionKeySHA256Param,
			EncryptionAlgorithm: encryptionAlgorithmParam,
		}
	}
	var cpkScopeInfo *azblob.CpkScopeInfo
	if encryptionScopeParam != nil {
		cpkScopeInfo = &azblob.CpkScopeInfo{
			EncryptionScope: encryptionScopeParam,
		}
	}
	respr, errRespr := b.srv.StageBlock(req.Context(), matches[regex.SubexpIndex("containerName")], matches[regex.SubexpIndex("blob")], azblob.Enum30(qp.Get("comp")), qp.Get("blockid"), contentLengthParam, req.Body.(io.ReadSeekCloser), options, leaseAccessConditions, cpkInfo, cpkScopeInfo)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).ContentMD5; val != nil {
		resp.Header.Set("Content-MD5", base64.StdEncoding.EncodeToString(val))
	}
	if val := server.GetResponse(respr).ClientRequestID; val != nil {
		resp.Header.Set("x-ms-client-request-id", *val)
	}
	if val := server.GetResponse(respr).RequestID; val != nil {
		resp.Header.Set("x-ms-request-id", *val)
	}
	if val := server.GetResponse(respr).Version; val != nil {
		resp.Header.Set("x-ms-version", *val)
	}
	if val := server.GetResponse(respr).Date; val != nil {
		resp.Header.Set("Date", val.Format(time.RFC1123))
	}
	if val := server.GetResponse(respr).XMSContentCRC64; val != nil {
		resp.Header.Set("x-ms-content-crc64", base64.StdEncoding.EncodeToString(val))
	}
	if val := server.GetResponse(respr).IsServerEncrypted; val != nil {
		resp.Header.Set("x-ms-request-server-encrypted", strconv.FormatBool(*val))
	}
	if val := server.GetResponse(respr).EncryptionKeySHA256; val != nil {
		resp.Header.Set("x-ms-encryption-key-sha256", *val)
	}
	if val := server.GetResponse(respr).EncryptionScope; val != nil {
		resp.Header.Set("x-ms-encryption-scope", *val)
	}
	return resp, nil
}

func (b *BlockBlobServerTransport) dispatchStageBlockFromURL(req *http.Request) (*http.Response, error) {
	if b.srv.StageBlockFromURL == nil {
		return nil, &nonRetriableError{errors.New("method StageBlockFromURL not implemented")}
	}
	const regexStr = "/(?P<containerName>[a-zA-Z0-9-_]+)/(?P<blob>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	contentLengthParam, err := strconv.ParseInt(getHeaderValue(req.Header, "Content-Length"), 10, 64)
	if err != nil {
		return nil, err
	}
	sourceRangeParam := getOptional(getHeaderValue(req.Header, "x-ms-source-range"))
	sourceContentMD5Param, err := base64.StdEncoding.DecodeString(getHeaderValue(req.Header, "x-ms-source-content-md5"))
	if err != nil {
		return nil, err
	}
	sourceContentcrc64Param, err := base64.StdEncoding.DecodeString(getHeaderValue(req.Header, "x-ms-source-content-crc64"))
	if err != nil {
		return nil, err
	}
	timeoutParam, err := parseOptional(qp.Get("timeout"), func(v string) (int32, error) {
		p, parseErr := strconv.ParseInt(v, 10, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	encryptionKeyParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-key"))
	encryptionKeySHA256Param := getOptional(getHeaderValue(req.Header, "x-ms-encryption-key-sha256"))
	encryptionAlgorithmParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-algorithm"))
	encryptionScopeParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-scope"))
	leaseIDParam := getOptional(getHeaderValue(req.Header, "x-ms-lease-id"))
	sourceIfModifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-source-if-modified-since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	sourceIfUnmodifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-source-if-unmodified-since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	sourceIfMatchParam := getOptional(getHeaderValue(req.Header, "x-ms-source-if-match"))
	sourceIfNoneMatchParam := getOptional(getHeaderValue(req.Header, "x-ms-source-if-none-match"))
	requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-request-id"))
	copySourceAuthorizationParam := getOptional(getHeaderValue(req.Header, "x-ms-copy-source-authorization"))
	var options *azblob.BlockBlobClientStageBlockFromURLOptions
	if sourceRangeParam != nil || sourceContentMD5Param != nil || sourceContentcrc64Param != nil || timeoutParam != nil || requestIDParam != nil || copySourceAuthorizationParam != nil {
		options = &azblob.BlockBlobClientStageBlockFromURLOptions{
			SourceRange:             sourceRangeParam,
			SourceContentMD5:        sourceContentMD5Param,
			SourceContentcrc64:      sourceContentcrc64Param,
			Timeout:                 timeoutParam,
			RequestID:               requestIDParam,
			CopySourceAuthorization: copySourceAuthorizationParam,
		}
	}
	var cpkInfo *azblob.CpkInfo
	if encryptionKeyParam != nil || encryptionKeySHA256Param != nil || encryptionAlgorithmParam != nil {
		cpkInfo = &azblob.CpkInfo{
			EncryptionKey:       encryptionKeyParam,
			EncryptionKeySHA256: encryptionKeySHA256Param,
			EncryptionAlgorithm: encryptionAlgorithmParam,
		}
	}
	var cpkScopeInfo *azblob.CpkScopeInfo
	if encryptionScopeParam != nil {
		cpkScopeInfo = &azblob.CpkScopeInfo{
			EncryptionScope: encryptionScopeParam,
		}
	}
	var leaseAccessConditions *azblob.LeaseAccessConditions
	if leaseIDParam != nil {
		leaseAccessConditions = &azblob.LeaseAccessConditions{
			LeaseID: leaseIDParam,
		}
	}
	var sourceModifiedAccessConditions *azblob.SourceModifiedAccessConditions
	if sourceIfModifiedSinceParam != nil || sourceIfUnmodifiedSinceParam != nil || sourceIfMatchParam != nil || sourceIfNoneMatchParam != nil {
		sourceModifiedAccessConditions = &azblob.SourceModifiedAccessConditions{
			SourceIfModifiedSince:   sourceIfModifiedSinceParam,
			SourceIfUnmodifiedSince: sourceIfUnmodifiedSinceParam,
			SourceIfMatch:           sourceIfMatchParam,
			SourceIfNoneMatch:       sourceIfNoneMatchParam,
		}
	}
	respr, errRespr := b.srv.StageBlockFromURL(req.Context(), matches[regex.SubexpIndex("containerName")], matches[regex.SubexpIndex("blob")], azblob.Enum30(qp.Get("comp")), qp.Get("blockid"), contentLengthParam, getHeaderValue(req.Header, "x-ms-copy-source"), options, cpkInfo, cpkScopeInfo, leaseAccessConditions, sourceModifiedAccessConditions)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).ContentMD5; val != nil {
		resp.Header.Set("Content-MD5", base64.StdEncoding.EncodeToString(val))
	}
	if val := server.GetResponse(respr).XMSContentCRC64; val != nil {
		resp.Header.Set("x-ms-content-crc64", base64.StdEncoding.EncodeToString(val))
	}
	if val := server.GetResponse(respr).ClientRequestID; val != nil {
		resp.Header.Set("x-ms-client-request-id", *val)
	}
	if val := server.GetResponse(respr).RequestID; val != nil {
		resp.Header.Set("x-ms-request-id", *val)
	}
	if val := server.GetResponse(respr).Version; val != nil {
		resp.Header.Set("x-ms-version", *val)
	}
	if val := server.GetResponse(respr).Date; val != nil {
		resp.Header.Set("Date", val.Format(time.RFC1123))
	}
	if val := server.GetResponse(respr).IsServerEncrypted; val != nil {
		resp.Header.Set("x-ms-request-server-encrypted", strconv.FormatBool(*val))
	}
	if val := server.GetResponse(respr).EncryptionKeySHA256; val != nil {
		resp.Header.Set("x-ms-encryption-key-sha256", *val)
	}
	if val := server.GetResponse(respr).EncryptionScope; val != nil {
		resp.Header.Set("x-ms-encryption-scope", *val)
	}
	return resp, nil
}

func (b *BlockBlobServerTransport) dispatchUpload(req *http.Request) (*http.Response, error) {
	if b.srv.Upload == nil {
		return nil, &nonRetriableError{errors.New("method Upload not implemented")}
	}
	const regexStr = "/(?P<containerName>[a-zA-Z0-9-_]+)/(?P<blob>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	timeoutParam, err := parseOptional(qp.Get("timeout"), func(v string) (int32, error) {
		p, parseErr := strconv.ParseInt(v, 10, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	transactionalContentMD5Param, err := base64.StdEncoding.DecodeString(getHeaderValue(req.Header, "Content-MD5"))
	if err != nil {
		return nil, err
	}
	contentLengthParam, err := strconv.ParseInt(getHeaderValue(req.Header, "Content-Length"), 10, 64)
	if err != nil {
		return nil, err
	}
	blobContentTypeParam := getOptional(getHeaderValue(req.Header, "x-ms-blob-content-type"))
	blobContentEncodingParam := getOptional(getHeaderValue(req.Header, "x-ms-blob-content-encoding"))
	blobContentLanguageParam := getOptional(getHeaderValue(req.Header, "x-ms-blob-content-language"))
	blobContentMD5Param, err := base64.StdEncoding.DecodeString(getHeaderValue(req.Header, "x-ms-blob-content-md5"))
	if err != nil {
		return nil, err
	}
	blobCacheControlParam := getOptional(getHeaderValue(req.Header, "x-ms-blob-cache-control"))
	var metadataParam map[string]*string
	for hh := range req.Header {
		if len(hh) > len("x-ms-meta-") && strings.EqualFold(hh[:len("x-ms-meta-")], "x-ms-meta-") {
			if metadataParam == nil {
				metadataParam = map[string]*string{}
			}
			metadataParam[hh[len("x-ms-meta-"):]] = to.Ptr(getHeaderValue(req.Header, hh))
		}
	}
	leaseIDParam := getOptional(getHeaderValue(req.Header, "x-ms-lease-id"))
	blobContentDispositionParam := getOptional(getHeaderValue(req.Header, "x-ms-blob-content-disposition"))
	encryptionKeyParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-key"))
	encryptionKeySHA256Param := getOptional(getHeaderValue(req.Header, "x-ms-encryption-key-sha256"))
	encryptionAlgorithmParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-algorithm"))
	encryptionScopeParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-scope"))
	tierParam := getOptional(azblob.AccessTier(getHeaderValue(req.Header, "x-ms-access-tier")))
	ifModifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Modified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifUnmodifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Unmodified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
	ifNoneMatchParam := getOptional(getHeaderValue(req.Header, "If-None-Match"))
	ifTagsParam := getOptional(getHeaderValue(req.Header, "x-ms-if-tags"))
	requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-request-id"))
	blobTagsStringParam := getOptional(getHeaderValue(req.Header, "x-ms-tags"))
	immutabilityPolicyExpiryParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-immutability-policy-until-date"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	immutabilityPolicyModeParam := getOptional(azblob.BlobImmutabilityPolicyMode(getHeaderValue(req.Header, "x-ms-immutability-policy-mode")))
	legalHoldParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-legal-hold"), strconv.ParseBool)
	if err != nil {
		return nil, err
	}
	transactionalContentCRC64Param, err := base64.StdEncoding.DecodeString(getHeaderValue(req.Header, "x-ms-content-crc64"))
	if err != nil {
		return nil, err
	}
	var options *azblob.BlockBlobClientUploadOptions
	if timeoutParam != nil || transactionalContentMD5Param != nil || metadataParam != nil || tierParam != nil || requestIDParam != nil || blobTagsStringParam != nil || immutabilityPolicyExpiryParam != nil || immutabilityPolicyModeParam != nil || legalHoldParam != nil || transactionalContentCRC64Param != nil {
		options = &azblob.BlockBlobClientUploadOptions{
			Timeout:                   timeoutParam,
			TransactionalContentMD5:   transactionalContentMD5Param,
			Metadata:                  metadataParam,
			Tier:                      tierParam,
			RequestID:                 requestIDParam,
			BlobTagsString:            blobTagsStringParam,
			ImmutabilityPolicyExpiry:  immutabilityPolicyExpiryParam,
			ImmutabilityPolicyMode:    immutabilityPolicyModeParam,
			LegalHold:                 legalHoldParam,
			TransactionalContentCRC64: transactionalContentCRC64Param,
		}
	}
	var blobHTTPHeaders *azblob.BlobHTTPHeaders
	if blobContentTypeParam != nil || blobContentEncodingParam != nil || blobContentLanguageParam != nil || blobContentMD5Param != nil || blobCacheControlParam != nil || blobContentDispositionParam != nil {
		blobHTTPHeaders = &azblob.BlobHTTPHeaders{
			BlobContentType:        blobContentTypeParam,
			BlobContentEncoding:    blobContentEncodingParam,
			BlobContentLanguage:    blobContentLanguageParam,
			BlobContentMD5:         blobContentMD5Param,
			BlobCacheControl:       blobCacheControlParam,
			BlobContentDisposition: blobContentDispositionParam,
		}
	}
	var leaseAccessConditions *azblob.LeaseAccessConditions
	if leaseIDParam != nil {
		leaseAccessConditions = &azblob.LeaseAccessConditions{
			LeaseID: leaseIDParam,
		}
	}
	var cpkInfo *azblob.CpkInfo
	if encryptionKeyParam != nil || encryptionKeySHA256Param != nil || encryptionAlgorithmParam != nil {
		cpkInfo = &azblob.CpkInfo{
			EncryptionKey:       encryptionKeyParam,
			EncryptionKeySHA256: encryptionKeySHA256Param,
			EncryptionAlgorithm: encryptionAlgorithmParam,
		}
	}
	var cpkScopeInfo *azblob.CpkScopeInfo
	if encryptionScopeParam != nil {
		cpkScopeInfo = &azblob.CpkScopeInfo{
			EncryptionScope: encryptionScopeParam,
		}
	}
	var modifiedAccessConditions *azblob.ModifiedAccessConditions
	if ifModifiedSinceParam != nil || ifUnmodifiedSinceParam != nil || ifMatchParam != nil || ifNoneMatchParam != nil || ifTagsParam != nil {
		modifiedAccessConditions = &azblob.ModifiedAccessConditions{
			IfModifiedSince:   ifModifiedSinceParam,
			IfUnmodifiedSince: ifUnmodifiedSinceParam,
			IfMatch:           ifMatchParam,
			IfNoneMatch:       ifNoneMatchParam,
			IfTags:            ifTagsParam,
		}
	}
	respr, errRespr := b.srv.Upload(req.Context(), matches[regex.SubexpIndex("containerName")], matches[regex.SubexpIndex("blob")], contentLengthParam, req.Body.(io.ReadSeekCloser), options, blobHTTPHeaders, leaseAccessConditions, cpkInfo, cpkScopeInfo, modifiedAccessConditions)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).ETag; val != nil {
		resp.Header.Set("ETag", *val)
	}
	if val := server.GetResponse(respr).LastModified; val != nil {
		resp.Header.Set("Last-Modified", val.Format(time.RFC1123))
	}
	if val := server.GetResponse(respr).ContentMD5; val != nil {
		resp.Header.Set("Content-MD5", base64.StdEncoding.EncodeToString(val))
	}
	if val := server.GetResponse(respr).ClientRequestID; val != nil {
		resp.Header.Set("x-ms-client-request-id", *val)
	}
	if val := server.GetResponse(respr).RequestID; val != nil {
		resp.Header.Set("x-ms-request-id", *val)
	}
	if val := server.GetResponse(respr).Version; val != nil {
		resp.Header.Set("x-ms-version", *val)
	}
	if val := server.GetResponse(respr).VersionID; val != nil {
		resp.Header.Set("x-ms-version-id", *val)
	}
	if val := server.GetResponse(respr).Date; val != nil {
		resp.Header.Set("Date", val.Format(time.RFC1123))
	}
	if val := server.GetResponse(respr).IsServerEncrypted; val != nil {
		resp.Header.Set("x-ms-request-server-encrypted", strconv.FormatBool(*val))
	}
	if val := server.GetResponse(respr).EncryptionKeySHA256; val != nil {
		resp.Header.Set("x-ms-encryption-key-sha256", *val)
	}
	if val := server.GetResponse(respr).EncryptionScope; val != nil {
		resp.Header.Set("x-ms-encryption-scope", *val)
	}
	return resp, nil
}
