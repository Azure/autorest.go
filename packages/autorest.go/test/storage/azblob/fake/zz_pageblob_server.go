//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"azblob"
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"io"
	"net/http"
	"regexp"
	"strconv"
	"strings"
	"time"
)

// PageBlobServer is a fake server for instances of the azblob.PageBlobClient type.
type PageBlobServer struct {
	// ClearPages is the fake for method PageBlobClient.ClearPages
	// HTTP status codes to indicate success: http.StatusCreated
	ClearPages func(ctx context.Context, containerName string, blob string, comp azblob.Enum32, contentLength int64, options *azblob.PageBlobClientClearPagesOptions, leaseAccessConditions *azblob.LeaseAccessConditions, cpkInfo *azblob.CpkInfo, cpkScopeInfo *azblob.CpkScopeInfo, sequenceNumberAccessConditions *azblob.SequenceNumberAccessConditions, modifiedAccessConditions *azblob.ModifiedAccessConditions) (resp azfake.Responder[azblob.PageBlobClientClearPagesResponse], errResp azfake.ErrorResponder)

	// CopyIncremental is the fake for method PageBlobClient.CopyIncremental
	// HTTP status codes to indicate success: http.StatusAccepted
	CopyIncremental func(ctx context.Context, containerName string, blob string, comp azblob.Enum34, copySource string, options *azblob.PageBlobClientCopyIncrementalOptions, modifiedAccessConditions *azblob.ModifiedAccessConditions) (resp azfake.Responder[azblob.PageBlobClientCopyIncrementalResponse], errResp azfake.ErrorResponder)

	// Create is the fake for method PageBlobClient.Create
	// HTTP status codes to indicate success: http.StatusCreated
	Create func(ctx context.Context, containerName string, blob string, contentLength int64, blobContentLength int64, options *azblob.PageBlobClientCreateOptions, blobHTTPHeaders *azblob.BlobHTTPHeaders, leaseAccessConditions *azblob.LeaseAccessConditions, cpkInfo *azblob.CpkInfo, cpkScopeInfo *azblob.CpkScopeInfo, modifiedAccessConditions *azblob.ModifiedAccessConditions) (resp azfake.Responder[azblob.PageBlobClientCreateResponse], errResp azfake.ErrorResponder)

	// NewGetPageRangesPager is the fake for method PageBlobClient.NewGetPageRangesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetPageRangesPager func(containerName string, blob string, comp azblob.Enum33, options *azblob.PageBlobClientGetPageRangesOptions, leaseAccessConditions *azblob.LeaseAccessConditions, modifiedAccessConditions *azblob.ModifiedAccessConditions) (resp azfake.PagerResponder[azblob.PageBlobClientGetPageRangesResponse])

	// NewGetPageRangesDiffPager is the fake for method PageBlobClient.NewGetPageRangesDiffPager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetPageRangesDiffPager func(containerName string, blob string, comp azblob.Enum33, options *azblob.PageBlobClientGetPageRangesDiffOptions, leaseAccessConditions *azblob.LeaseAccessConditions, modifiedAccessConditions *azblob.ModifiedAccessConditions) (resp azfake.PagerResponder[azblob.PageBlobClientGetPageRangesDiffResponse])

	// Resize is the fake for method PageBlobClient.Resize
	// HTTP status codes to indicate success: http.StatusOK
	Resize func(ctx context.Context, containerName string, blob string, comp azblob.Enum1, blobContentLength int64, options *azblob.PageBlobClientResizeOptions, leaseAccessConditions *azblob.LeaseAccessConditions, cpkInfo *azblob.CpkInfo, cpkScopeInfo *azblob.CpkScopeInfo, modifiedAccessConditions *azblob.ModifiedAccessConditions) (resp azfake.Responder[azblob.PageBlobClientResizeResponse], errResp azfake.ErrorResponder)

	// UpdateSequenceNumber is the fake for method PageBlobClient.UpdateSequenceNumber
	// HTTP status codes to indicate success: http.StatusOK
	UpdateSequenceNumber func(ctx context.Context, containerName string, blob string, comp azblob.Enum1, sequenceNumberAction azblob.SequenceNumberActionType, options *azblob.PageBlobClientUpdateSequenceNumberOptions, leaseAccessConditions *azblob.LeaseAccessConditions, modifiedAccessConditions *azblob.ModifiedAccessConditions) (resp azfake.Responder[azblob.PageBlobClientUpdateSequenceNumberResponse], errResp azfake.ErrorResponder)

	// UploadPages is the fake for method PageBlobClient.UploadPages
	// HTTP status codes to indicate success: http.StatusCreated
	UploadPages func(ctx context.Context, containerName string, blob string, comp azblob.Enum32, contentLength int64, body io.ReadSeekCloser, options *azblob.PageBlobClientUploadPagesOptions, leaseAccessConditions *azblob.LeaseAccessConditions, cpkInfo *azblob.CpkInfo, cpkScopeInfo *azblob.CpkScopeInfo, sequenceNumberAccessConditions *azblob.SequenceNumberAccessConditions, modifiedAccessConditions *azblob.ModifiedAccessConditions) (resp azfake.Responder[azblob.PageBlobClientUploadPagesResponse], errResp azfake.ErrorResponder)

	// UploadPagesFromURL is the fake for method PageBlobClient.UploadPagesFromURL
	// HTTP status codes to indicate success: http.StatusCreated
	UploadPagesFromURL func(ctx context.Context, containerName string, blob string, comp azblob.Enum32, sourceURL string, sourceRange string, contentLength int64, rangeParam string, options *azblob.PageBlobClientUploadPagesFromURLOptions, cpkInfo *azblob.CpkInfo, cpkScopeInfo *azblob.CpkScopeInfo, leaseAccessConditions *azblob.LeaseAccessConditions, sequenceNumberAccessConditions *azblob.SequenceNumberAccessConditions, modifiedAccessConditions *azblob.ModifiedAccessConditions, sourceModifiedAccessConditions *azblob.SourceModifiedAccessConditions) (resp azfake.Responder[azblob.PageBlobClientUploadPagesFromURLResponse], errResp azfake.ErrorResponder)
}

// NewPageBlobServerTransport creates a new instance of PageBlobServerTransport with the provided implementation.
// The returned PageBlobServerTransport instance is connected to an instance of azblob.PageBlobClient by way of the
// undefined.Transporter field.
func NewPageBlobServerTransport(srv *PageBlobServer) *PageBlobServerTransport {
	return &PageBlobServerTransport{srv: srv}
}

// PageBlobServerTransport connects instances of azblob.PageBlobClient to instances of PageBlobServer.
// Don't use this type directly, use NewPageBlobServerTransport instead.
type PageBlobServerTransport struct {
	srv                       *PageBlobServer
	newGetPageRangesPager     *azfake.PagerResponder[azblob.PageBlobClientGetPageRangesResponse]
	newGetPageRangesDiffPager *azfake.PagerResponder[azblob.PageBlobClientGetPageRangesDiffResponse]
}

// Do implements the policy.Transporter interface for PageBlobServerTransport.
func (p *PageBlobServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "PageBlobClient.ClearPages":
		resp, err = p.dispatchClearPages(req)
	case "PageBlobClient.CopyIncremental":
		resp, err = p.dispatchCopyIncremental(req)
	case "PageBlobClient.Create":
		resp, err = p.dispatchCreate(req)
	case "PageBlobClient.NewGetPageRangesPager":
		resp, err = p.dispatchNewGetPageRangesPager(req)
	case "PageBlobClient.NewGetPageRangesDiffPager":
		resp, err = p.dispatchNewGetPageRangesDiffPager(req)
	case "PageBlobClient.Resize":
		resp, err = p.dispatchResize(req)
	case "PageBlobClient.UpdateSequenceNumber":
		resp, err = p.dispatchUpdateSequenceNumber(req)
	case "PageBlobClient.UploadPages":
		resp, err = p.dispatchUploadPages(req)
	case "PageBlobClient.UploadPagesFromURL":
		resp, err = p.dispatchUploadPagesFromURL(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (p *PageBlobServerTransport) dispatchClearPages(req *http.Request) (*http.Response, error) {
	if p.srv.ClearPages == nil {
		return nil, &nonRetriableError{errors.New("method ClearPages not implemented")}
	}
	const regexStr = "/(?P<containerName>[a-zA-Z0-9-_]+)/(?P<blob>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	contentLengthParam, err := strconv.ParseInt(getHeaderValue(req.Header, "Content-Length"), 10, 64)
	if err != nil {
		return nil, err
	}
	timeoutParam, err := parseOptional(qp.Get("timeout"), func(v string) (int32, error) {
		p, parseErr := strconv.ParseInt(v, 10, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	rangeParam := getOptional(getHeaderValue(req.Header, "x-ms-range"))
	leaseIDParam := getOptional(getHeaderValue(req.Header, "x-ms-lease-id"))
	encryptionKeyParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-key"))
	encryptionKeySHA256Param := getOptional(getHeaderValue(req.Header, "x-ms-encryption-key-sha256"))
	encryptionAlgorithmParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-algorithm"))
	encryptionScopeParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-scope"))
	ifSequenceNumberLessThanOrEqualToParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-if-sequence-number-le"), func(v string) (int64, error) {
		p, parseErr := strconv.ParseInt(v, 10, 64)
		if parseErr != nil {
			return 0, parseErr
		}
		return p, nil
	})
	if err != nil {
		return nil, err
	}
	ifSequenceNumberLessThanParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-if-sequence-number-lt"), func(v string) (int64, error) {
		p, parseErr := strconv.ParseInt(v, 10, 64)
		if parseErr != nil {
			return 0, parseErr
		}
		return p, nil
	})
	if err != nil {
		return nil, err
	}
	ifSequenceNumberEqualToParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-if-sequence-number-eq"), func(v string) (int64, error) {
		p, parseErr := strconv.ParseInt(v, 10, 64)
		if parseErr != nil {
			return 0, parseErr
		}
		return p, nil
	})
	if err != nil {
		return nil, err
	}
	ifModifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Modified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifUnmodifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Unmodified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
	ifNoneMatchParam := getOptional(getHeaderValue(req.Header, "If-None-Match"))
	ifTagsParam := getOptional(getHeaderValue(req.Header, "x-ms-if-tags"))
	requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-request-id"))
	var options *azblob.PageBlobClientClearPagesOptions
	if timeoutParam != nil || rangeParam != nil || requestIDParam != nil {
		options = &azblob.PageBlobClientClearPagesOptions{
			Timeout:   timeoutParam,
			Range:     rangeParam,
			RequestID: requestIDParam,
		}
	}
	var leaseAccessConditions *azblob.LeaseAccessConditions
	if leaseIDParam != nil {
		leaseAccessConditions = &azblob.LeaseAccessConditions{
			LeaseID: leaseIDParam,
		}
	}
	var cpkInfo *azblob.CpkInfo
	if encryptionKeyParam != nil || encryptionKeySHA256Param != nil || encryptionAlgorithmParam != nil {
		cpkInfo = &azblob.CpkInfo{
			EncryptionKey:       encryptionKeyParam,
			EncryptionKeySHA256: encryptionKeySHA256Param,
			EncryptionAlgorithm: encryptionAlgorithmParam,
		}
	}
	var cpkScopeInfo *azblob.CpkScopeInfo
	if encryptionScopeParam != nil {
		cpkScopeInfo = &azblob.CpkScopeInfo{
			EncryptionScope: encryptionScopeParam,
		}
	}
	var sequenceNumberAccessConditions *azblob.SequenceNumberAccessConditions
	if ifSequenceNumberLessThanOrEqualToParam != nil || ifSequenceNumberLessThanParam != nil || ifSequenceNumberEqualToParam != nil {
		sequenceNumberAccessConditions = &azblob.SequenceNumberAccessConditions{
			IfSequenceNumberLessThanOrEqualTo: ifSequenceNumberLessThanOrEqualToParam,
			IfSequenceNumberLessThan:          ifSequenceNumberLessThanParam,
			IfSequenceNumberEqualTo:           ifSequenceNumberEqualToParam,
		}
	}
	var modifiedAccessConditions *azblob.ModifiedAccessConditions
	if ifModifiedSinceParam != nil || ifUnmodifiedSinceParam != nil || ifMatchParam != nil || ifNoneMatchParam != nil || ifTagsParam != nil {
		modifiedAccessConditions = &azblob.ModifiedAccessConditions{
			IfModifiedSince:   ifModifiedSinceParam,
			IfUnmodifiedSince: ifUnmodifiedSinceParam,
			IfMatch:           ifMatchParam,
			IfNoneMatch:       ifNoneMatchParam,
			IfTags:            ifTagsParam,
		}
	}
	respr, errRespr := p.srv.ClearPages(req.Context(), matches[regex.SubexpIndex("containerName")], matches[regex.SubexpIndex("blob")], azblob.Enum32(qp.Get("comp")), contentLengthParam, options, leaseAccessConditions, cpkInfo, cpkScopeInfo, sequenceNumberAccessConditions, modifiedAccessConditions)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).ETag; val != nil {
		resp.Header.Set("ETag", *val)
	}
	if val := server.GetResponse(respr).LastModified; val != nil {
		resp.Header.Set("Last-Modified", val.Format(time.RFC1123))
	}
	if val := server.GetResponse(respr).ContentMD5; val != nil {
		resp.Header.Set("Content-MD5", base64.StdEncoding.EncodeToString(val))
	}
	if val := server.GetResponse(respr).XMSContentCRC64; val != nil {
		resp.Header.Set("x-ms-content-crc64", base64.StdEncoding.EncodeToString(val))
	}
	if val := server.GetResponse(respr).BlobSequenceNumber; val != nil {
		resp.Header.Set("x-ms-blob-sequence-number", strconv.FormatInt(*val, 10))
	}
	if val := server.GetResponse(respr).ClientRequestID; val != nil {
		resp.Header.Set("x-ms-client-request-id", *val)
	}
	if val := server.GetResponse(respr).RequestID; val != nil {
		resp.Header.Set("x-ms-request-id", *val)
	}
	if val := server.GetResponse(respr).Version; val != nil {
		resp.Header.Set("x-ms-version", *val)
	}
	if val := server.GetResponse(respr).Date; val != nil {
		resp.Header.Set("Date", val.Format(time.RFC1123))
	}
	return resp, nil
}

func (p *PageBlobServerTransport) dispatchCopyIncremental(req *http.Request) (*http.Response, error) {
	if p.srv.CopyIncremental == nil {
		return nil, &nonRetriableError{errors.New("method CopyIncremental not implemented")}
	}
	const regexStr = "/(?P<containerName>[a-zA-Z0-9-_]+)/(?P<blob>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	timeoutParam, err := parseOptional(qp.Get("timeout"), func(v string) (int32, error) {
		p, parseErr := strconv.ParseInt(v, 10, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	ifModifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Modified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifUnmodifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Unmodified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
	ifNoneMatchParam := getOptional(getHeaderValue(req.Header, "If-None-Match"))
	ifTagsParam := getOptional(getHeaderValue(req.Header, "x-ms-if-tags"))
	requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-request-id"))
	var options *azblob.PageBlobClientCopyIncrementalOptions
	if timeoutParam != nil || requestIDParam != nil {
		options = &azblob.PageBlobClientCopyIncrementalOptions{
			Timeout:   timeoutParam,
			RequestID: requestIDParam,
		}
	}
	var modifiedAccessConditions *azblob.ModifiedAccessConditions
	if ifModifiedSinceParam != nil || ifUnmodifiedSinceParam != nil || ifMatchParam != nil || ifNoneMatchParam != nil || ifTagsParam != nil {
		modifiedAccessConditions = &azblob.ModifiedAccessConditions{
			IfModifiedSince:   ifModifiedSinceParam,
			IfUnmodifiedSince: ifUnmodifiedSinceParam,
			IfMatch:           ifMatchParam,
			IfNoneMatch:       ifNoneMatchParam,
			IfTags:            ifTagsParam,
		}
	}
	respr, errRespr := p.srv.CopyIncremental(req.Context(), matches[regex.SubexpIndex("containerName")], matches[regex.SubexpIndex("blob")], azblob.Enum34(qp.Get("comp")), getHeaderValue(req.Header, "x-ms-copy-source"), options, modifiedAccessConditions)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusAccepted}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).ETag; val != nil {
		resp.Header.Set("ETag", *val)
	}
	if val := server.GetResponse(respr).LastModified; val != nil {
		resp.Header.Set("Last-Modified", val.Format(time.RFC1123))
	}
	if val := server.GetResponse(respr).ClientRequestID; val != nil {
		resp.Header.Set("x-ms-client-request-id", *val)
	}
	if val := server.GetResponse(respr).RequestID; val != nil {
		resp.Header.Set("x-ms-request-id", *val)
	}
	if val := server.GetResponse(respr).Version; val != nil {
		resp.Header.Set("x-ms-version", *val)
	}
	if val := server.GetResponse(respr).Date; val != nil {
		resp.Header.Set("Date", val.Format(time.RFC1123))
	}
	if val := server.GetResponse(respr).CopyID; val != nil {
		resp.Header.Set("x-ms-copy-id", *val)
	}
	if val := server.GetResponse(respr).CopyStatus; val != nil {
		resp.Header.Set("x-ms-copy-status", string(*val))
	}
	return resp, nil
}

func (p *PageBlobServerTransport) dispatchCreate(req *http.Request) (*http.Response, error) {
	if p.srv.Create == nil {
		return nil, &nonRetriableError{errors.New("method Create not implemented")}
	}
	const regexStr = "/(?P<containerName>[a-zA-Z0-9-_]+)/(?P<blob>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	timeoutParam, err := parseOptional(qp.Get("timeout"), func(v string) (int32, error) {
		p, parseErr := strconv.ParseInt(v, 10, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	contentLengthParam, err := strconv.ParseInt(getHeaderValue(req.Header, "Content-Length"), 10, 64)
	if err != nil {
		return nil, err
	}
	tierParam := getOptional(azblob.PremiumPageBlobAccessTier(getHeaderValue(req.Header, "x-ms-access-tier")))
	blobContentTypeParam := getOptional(getHeaderValue(req.Header, "x-ms-blob-content-type"))
	blobContentEncodingParam := getOptional(getHeaderValue(req.Header, "x-ms-blob-content-encoding"))
	blobContentLanguageParam := getOptional(getHeaderValue(req.Header, "x-ms-blob-content-language"))
	blobContentMD5Param, err := base64.StdEncoding.DecodeString(getHeaderValue(req.Header, "x-ms-blob-content-md5"))
	if err != nil {
		return nil, err
	}
	blobCacheControlParam := getOptional(getHeaderValue(req.Header, "x-ms-blob-cache-control"))
	var metadataParam map[string]*string
	for hh := range req.Header {
		if len(hh) > len("x-ms-meta-") && strings.EqualFold(hh[:len("x-ms-meta-")], "x-ms-meta-") {
			if metadataParam == nil {
				metadataParam = map[string]*string{}
			}
			metadataParam[hh[len("x-ms-meta-"):]] = to.Ptr(getHeaderValue(req.Header, hh))
		}
	}
	leaseIDParam := getOptional(getHeaderValue(req.Header, "x-ms-lease-id"))
	blobContentDispositionParam := getOptional(getHeaderValue(req.Header, "x-ms-blob-content-disposition"))
	encryptionKeyParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-key"))
	encryptionKeySHA256Param := getOptional(getHeaderValue(req.Header, "x-ms-encryption-key-sha256"))
	encryptionAlgorithmParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-algorithm"))
	encryptionScopeParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-scope"))
	ifModifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Modified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifUnmodifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Unmodified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
	ifNoneMatchParam := getOptional(getHeaderValue(req.Header, "If-None-Match"))
	ifTagsParam := getOptional(getHeaderValue(req.Header, "x-ms-if-tags"))
	blobContentLengthParam, err := strconv.ParseInt(getHeaderValue(req.Header, "x-ms-blob-content-length"), 10, 64)
	if err != nil {
		return nil, err
	}
	blobSequenceNumberParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-blob-sequence-number"), func(v string) (int64, error) {
		p, parseErr := strconv.ParseInt(v, 10, 64)
		if parseErr != nil {
			return 0, parseErr
		}
		return p, nil
	})
	if err != nil {
		return nil, err
	}
	requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-request-id"))
	blobTagsStringParam := getOptional(getHeaderValue(req.Header, "x-ms-tags"))
	immutabilityPolicyExpiryParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-immutability-policy-until-date"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	immutabilityPolicyModeParam := getOptional(azblob.BlobImmutabilityPolicyMode(getHeaderValue(req.Header, "x-ms-immutability-policy-mode")))
	legalHoldParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-legal-hold"), strconv.ParseBool)
	if err != nil {
		return nil, err
	}
	var options *azblob.PageBlobClientCreateOptions
	if timeoutParam != nil || tierParam != nil || metadataParam != nil || blobSequenceNumberParam != nil || requestIDParam != nil || blobTagsStringParam != nil || immutabilityPolicyExpiryParam != nil || immutabilityPolicyModeParam != nil || legalHoldParam != nil {
		options = &azblob.PageBlobClientCreateOptions{
			Timeout:                  timeoutParam,
			Tier:                     tierParam,
			Metadata:                 metadataParam,
			BlobSequenceNumber:       blobSequenceNumberParam,
			RequestID:                requestIDParam,
			BlobTagsString:           blobTagsStringParam,
			ImmutabilityPolicyExpiry: immutabilityPolicyExpiryParam,
			ImmutabilityPolicyMode:   immutabilityPolicyModeParam,
			LegalHold:                legalHoldParam,
		}
	}
	var blobHTTPHeaders *azblob.BlobHTTPHeaders
	if blobContentTypeParam != nil || blobContentEncodingParam != nil || blobContentLanguageParam != nil || blobContentMD5Param != nil || blobCacheControlParam != nil || blobContentDispositionParam != nil {
		blobHTTPHeaders = &azblob.BlobHTTPHeaders{
			BlobContentType:        blobContentTypeParam,
			BlobContentEncoding:    blobContentEncodingParam,
			BlobContentLanguage:    blobContentLanguageParam,
			BlobContentMD5:         blobContentMD5Param,
			BlobCacheControl:       blobCacheControlParam,
			BlobContentDisposition: blobContentDispositionParam,
		}
	}
	var leaseAccessConditions *azblob.LeaseAccessConditions
	if leaseIDParam != nil {
		leaseAccessConditions = &azblob.LeaseAccessConditions{
			LeaseID: leaseIDParam,
		}
	}
	var cpkInfo *azblob.CpkInfo
	if encryptionKeyParam != nil || encryptionKeySHA256Param != nil || encryptionAlgorithmParam != nil {
		cpkInfo = &azblob.CpkInfo{
			EncryptionKey:       encryptionKeyParam,
			EncryptionKeySHA256: encryptionKeySHA256Param,
			EncryptionAlgorithm: encryptionAlgorithmParam,
		}
	}
	var cpkScopeInfo *azblob.CpkScopeInfo
	if encryptionScopeParam != nil {
		cpkScopeInfo = &azblob.CpkScopeInfo{
			EncryptionScope: encryptionScopeParam,
		}
	}
	var modifiedAccessConditions *azblob.ModifiedAccessConditions
	if ifModifiedSinceParam != nil || ifUnmodifiedSinceParam != nil || ifMatchParam != nil || ifNoneMatchParam != nil || ifTagsParam != nil {
		modifiedAccessConditions = &azblob.ModifiedAccessConditions{
			IfModifiedSince:   ifModifiedSinceParam,
			IfUnmodifiedSince: ifUnmodifiedSinceParam,
			IfMatch:           ifMatchParam,
			IfNoneMatch:       ifNoneMatchParam,
			IfTags:            ifTagsParam,
		}
	}
	respr, errRespr := p.srv.Create(req.Context(), matches[regex.SubexpIndex("containerName")], matches[regex.SubexpIndex("blob")], contentLengthParam, blobContentLengthParam, options, blobHTTPHeaders, leaseAccessConditions, cpkInfo, cpkScopeInfo, modifiedAccessConditions)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).ETag; val != nil {
		resp.Header.Set("ETag", *val)
	}
	if val := server.GetResponse(respr).LastModified; val != nil {
		resp.Header.Set("Last-Modified", val.Format(time.RFC1123))
	}
	if val := server.GetResponse(respr).ContentMD5; val != nil {
		resp.Header.Set("Content-MD5", base64.StdEncoding.EncodeToString(val))
	}
	if val := server.GetResponse(respr).ClientRequestID; val != nil {
		resp.Header.Set("x-ms-client-request-id", *val)
	}
	if val := server.GetResponse(respr).RequestID; val != nil {
		resp.Header.Set("x-ms-request-id", *val)
	}
	if val := server.GetResponse(respr).Version; val != nil {
		resp.Header.Set("x-ms-version", *val)
	}
	if val := server.GetResponse(respr).VersionID; val != nil {
		resp.Header.Set("x-ms-version-id", *val)
	}
	if val := server.GetResponse(respr).Date; val != nil {
		resp.Header.Set("Date", val.Format(time.RFC1123))
	}
	if val := server.GetResponse(respr).IsServerEncrypted; val != nil {
		resp.Header.Set("x-ms-request-server-encrypted", strconv.FormatBool(*val))
	}
	if val := server.GetResponse(respr).EncryptionKeySHA256; val != nil {
		resp.Header.Set("x-ms-encryption-key-sha256", *val)
	}
	if val := server.GetResponse(respr).EncryptionScope; val != nil {
		resp.Header.Set("x-ms-encryption-scope", *val)
	}
	return resp, nil
}

func (p *PageBlobServerTransport) dispatchNewGetPageRangesPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewGetPageRangesPager == nil {
		return nil, &nonRetriableError{errors.New("method NewGetPageRangesPager not implemented")}
	}
	if p.newGetPageRangesPager == nil {
		const regexStr = "/(?P<containerName>[a-zA-Z0-9-_]+)/(?P<blob>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		snapshotParam := getOptional(qp.Get("snapshot"))
		timeoutParam, err := parseOptional(qp.Get("timeout"), func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		rangeParam := getOptional(getHeaderValue(req.Header, "x-ms-range"))
		leaseIDParam := getOptional(getHeaderValue(req.Header, "x-ms-lease-id"))
		ifModifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Modified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
		if err != nil {
			return nil, err
		}
		ifUnmodifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Unmodified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
		if err != nil {
			return nil, err
		}
		ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
		ifNoneMatchParam := getOptional(getHeaderValue(req.Header, "If-None-Match"))
		ifTagsParam := getOptional(getHeaderValue(req.Header, "x-ms-if-tags"))
		requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-request-id"))
		markerParam := getOptional(qp.Get("marker"))
		maxresultsParam, err := parseOptional(qp.Get("maxresults"), func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		var options *azblob.PageBlobClientGetPageRangesOptions
		if snapshotParam != nil || timeoutParam != nil || rangeParam != nil || requestIDParam != nil || markerParam != nil || maxresultsParam != nil {
			options = &azblob.PageBlobClientGetPageRangesOptions{
				Snapshot:   snapshotParam,
				Timeout:    timeoutParam,
				Range:      rangeParam,
				RequestID:  requestIDParam,
				Marker:     markerParam,
				Maxresults: maxresultsParam,
			}
		}
		var leaseAccessConditions *azblob.LeaseAccessConditions
		if leaseIDParam != nil {
			leaseAccessConditions = &azblob.LeaseAccessConditions{
				LeaseID: leaseIDParam,
			}
		}
		var modifiedAccessConditions *azblob.ModifiedAccessConditions
		if ifModifiedSinceParam != nil || ifUnmodifiedSinceParam != nil || ifMatchParam != nil || ifNoneMatchParam != nil || ifTagsParam != nil {
			modifiedAccessConditions = &azblob.ModifiedAccessConditions{
				IfModifiedSince:   ifModifiedSinceParam,
				IfUnmodifiedSince: ifUnmodifiedSinceParam,
				IfMatch:           ifMatchParam,
				IfNoneMatch:       ifNoneMatchParam,
				IfTags:            ifTagsParam,
			}
		}
		resp := p.srv.NewGetPageRangesPager(matches[regex.SubexpIndex("containerName")], matches[regex.SubexpIndex("blob")], azblob.Enum33(qp.Get("comp")), options, leaseAccessConditions, modifiedAccessConditions)
		p.newGetPageRangesPager = &resp
		server.PagerResponderInjectNextLinks(p.newGetPageRangesPager, req, func(page *azblob.PageBlobClientGetPageRangesResponse, createLink func() string) {
			page.NextMarker = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(p.newGetPageRangesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(p.newGetPageRangesPager) {
		p.newGetPageRangesPager = nil
	}
	return resp, nil
}

func (p *PageBlobServerTransport) dispatchNewGetPageRangesDiffPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewGetPageRangesDiffPager == nil {
		return nil, &nonRetriableError{errors.New("method NewGetPageRangesDiffPager not implemented")}
	}
	if p.newGetPageRangesDiffPager == nil {
		const regexStr = "/(?P<containerName>[a-zA-Z0-9-_]+)/(?P<blob>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		snapshotParam := getOptional(qp.Get("snapshot"))
		timeoutParam, err := parseOptional(qp.Get("timeout"), func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		prevsnapshotParam := getOptional(qp.Get("prevsnapshot"))
		prevSnapshotURLParam := getOptional(getHeaderValue(req.Header, "x-ms-previous-snapshot-url"))
		rangeParam := getOptional(getHeaderValue(req.Header, "x-ms-range"))
		leaseIDParam := getOptional(getHeaderValue(req.Header, "x-ms-lease-id"))
		ifModifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Modified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
		if err != nil {
			return nil, err
		}
		ifUnmodifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Unmodified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
		if err != nil {
			return nil, err
		}
		ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
		ifNoneMatchParam := getOptional(getHeaderValue(req.Header, "If-None-Match"))
		ifTagsParam := getOptional(getHeaderValue(req.Header, "x-ms-if-tags"))
		requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-request-id"))
		markerParam := getOptional(qp.Get("marker"))
		maxresultsParam, err := parseOptional(qp.Get("maxresults"), func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		var options *azblob.PageBlobClientGetPageRangesDiffOptions
		if snapshotParam != nil || timeoutParam != nil || prevsnapshotParam != nil || prevSnapshotURLParam != nil || rangeParam != nil || requestIDParam != nil || markerParam != nil || maxresultsParam != nil {
			options = &azblob.PageBlobClientGetPageRangesDiffOptions{
				Snapshot:        snapshotParam,
				Timeout:         timeoutParam,
				Prevsnapshot:    prevsnapshotParam,
				PrevSnapshotURL: prevSnapshotURLParam,
				Range:           rangeParam,
				RequestID:       requestIDParam,
				Marker:          markerParam,
				Maxresults:      maxresultsParam,
			}
		}
		var leaseAccessConditions *azblob.LeaseAccessConditions
		if leaseIDParam != nil {
			leaseAccessConditions = &azblob.LeaseAccessConditions{
				LeaseID: leaseIDParam,
			}
		}
		var modifiedAccessConditions *azblob.ModifiedAccessConditions
		if ifModifiedSinceParam != nil || ifUnmodifiedSinceParam != nil || ifMatchParam != nil || ifNoneMatchParam != nil || ifTagsParam != nil {
			modifiedAccessConditions = &azblob.ModifiedAccessConditions{
				IfModifiedSince:   ifModifiedSinceParam,
				IfUnmodifiedSince: ifUnmodifiedSinceParam,
				IfMatch:           ifMatchParam,
				IfNoneMatch:       ifNoneMatchParam,
				IfTags:            ifTagsParam,
			}
		}
		resp := p.srv.NewGetPageRangesDiffPager(matches[regex.SubexpIndex("containerName")], matches[regex.SubexpIndex("blob")], azblob.Enum33(qp.Get("comp")), options, leaseAccessConditions, modifiedAccessConditions)
		p.newGetPageRangesDiffPager = &resp
		server.PagerResponderInjectNextLinks(p.newGetPageRangesDiffPager, req, func(page *azblob.PageBlobClientGetPageRangesDiffResponse, createLink func() string) {
			page.NextMarker = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(p.newGetPageRangesDiffPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(p.newGetPageRangesDiffPager) {
		p.newGetPageRangesDiffPager = nil
	}
	return resp, nil
}

func (p *PageBlobServerTransport) dispatchResize(req *http.Request) (*http.Response, error) {
	if p.srv.Resize == nil {
		return nil, &nonRetriableError{errors.New("method Resize not implemented")}
	}
	const regexStr = "/(?P<containerName>[a-zA-Z0-9-_]+)/(?P<blob>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	timeoutParam, err := parseOptional(qp.Get("timeout"), func(v string) (int32, error) {
		p, parseErr := strconv.ParseInt(v, 10, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	leaseIDParam := getOptional(getHeaderValue(req.Header, "x-ms-lease-id"))
	encryptionKeyParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-key"))
	encryptionKeySHA256Param := getOptional(getHeaderValue(req.Header, "x-ms-encryption-key-sha256"))
	encryptionAlgorithmParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-algorithm"))
	encryptionScopeParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-scope"))
	ifModifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Modified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifUnmodifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Unmodified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
	ifNoneMatchParam := getOptional(getHeaderValue(req.Header, "If-None-Match"))
	ifTagsParam := getOptional(getHeaderValue(req.Header, "x-ms-if-tags"))
	blobContentLengthParam, err := strconv.ParseInt(getHeaderValue(req.Header, "x-ms-blob-content-length"), 10, 64)
	if err != nil {
		return nil, err
	}
	requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-request-id"))
	var options *azblob.PageBlobClientResizeOptions
	if timeoutParam != nil || requestIDParam != nil {
		options = &azblob.PageBlobClientResizeOptions{
			Timeout:   timeoutParam,
			RequestID: requestIDParam,
		}
	}
	var leaseAccessConditions *azblob.LeaseAccessConditions
	if leaseIDParam != nil {
		leaseAccessConditions = &azblob.LeaseAccessConditions{
			LeaseID: leaseIDParam,
		}
	}
	var cpkInfo *azblob.CpkInfo
	if encryptionKeyParam != nil || encryptionKeySHA256Param != nil || encryptionAlgorithmParam != nil {
		cpkInfo = &azblob.CpkInfo{
			EncryptionKey:       encryptionKeyParam,
			EncryptionKeySHA256: encryptionKeySHA256Param,
			EncryptionAlgorithm: encryptionAlgorithmParam,
		}
	}
	var cpkScopeInfo *azblob.CpkScopeInfo
	if encryptionScopeParam != nil {
		cpkScopeInfo = &azblob.CpkScopeInfo{
			EncryptionScope: encryptionScopeParam,
		}
	}
	var modifiedAccessConditions *azblob.ModifiedAccessConditions
	if ifModifiedSinceParam != nil || ifUnmodifiedSinceParam != nil || ifMatchParam != nil || ifNoneMatchParam != nil || ifTagsParam != nil {
		modifiedAccessConditions = &azblob.ModifiedAccessConditions{
			IfModifiedSince:   ifModifiedSinceParam,
			IfUnmodifiedSince: ifUnmodifiedSinceParam,
			IfMatch:           ifMatchParam,
			IfNoneMatch:       ifNoneMatchParam,
			IfTags:            ifTagsParam,
		}
	}
	respr, errRespr := p.srv.Resize(req.Context(), matches[regex.SubexpIndex("containerName")], matches[regex.SubexpIndex("blob")], azblob.Enum1(qp.Get("comp")), blobContentLengthParam, options, leaseAccessConditions, cpkInfo, cpkScopeInfo, modifiedAccessConditions)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).ETag; val != nil {
		resp.Header.Set("ETag", *val)
	}
	if val := server.GetResponse(respr).LastModified; val != nil {
		resp.Header.Set("Last-Modified", val.Format(time.RFC1123))
	}
	if val := server.GetResponse(respr).BlobSequenceNumber; val != nil {
		resp.Header.Set("x-ms-blob-sequence-number", strconv.FormatInt(*val, 10))
	}
	if val := server.GetResponse(respr).ClientRequestID; val != nil {
		resp.Header.Set("x-ms-client-request-id", *val)
	}
	if val := server.GetResponse(respr).RequestID; val != nil {
		resp.Header.Set("x-ms-request-id", *val)
	}
	if val := server.GetResponse(respr).Version; val != nil {
		resp.Header.Set("x-ms-version", *val)
	}
	if val := server.GetResponse(respr).Date; val != nil {
		resp.Header.Set("Date", val.Format(time.RFC1123))
	}
	return resp, nil
}

func (p *PageBlobServerTransport) dispatchUpdateSequenceNumber(req *http.Request) (*http.Response, error) {
	if p.srv.UpdateSequenceNumber == nil {
		return nil, &nonRetriableError{errors.New("method UpdateSequenceNumber not implemented")}
	}
	const regexStr = "/(?P<containerName>[a-zA-Z0-9-_]+)/(?P<blob>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	timeoutParam, err := parseOptional(qp.Get("timeout"), func(v string) (int32, error) {
		p, parseErr := strconv.ParseInt(v, 10, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	leaseIDParam := getOptional(getHeaderValue(req.Header, "x-ms-lease-id"))
	ifModifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Modified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifUnmodifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Unmodified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
	ifNoneMatchParam := getOptional(getHeaderValue(req.Header, "If-None-Match"))
	ifTagsParam := getOptional(getHeaderValue(req.Header, "x-ms-if-tags"))
	blobSequenceNumberParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-blob-sequence-number"), func(v string) (int64, error) {
		p, parseErr := strconv.ParseInt(v, 10, 64)
		if parseErr != nil {
			return 0, parseErr
		}
		return p, nil
	})
	if err != nil {
		return nil, err
	}
	requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-request-id"))
	var options *azblob.PageBlobClientUpdateSequenceNumberOptions
	if timeoutParam != nil || blobSequenceNumberParam != nil || requestIDParam != nil {
		options = &azblob.PageBlobClientUpdateSequenceNumberOptions{
			Timeout:            timeoutParam,
			BlobSequenceNumber: blobSequenceNumberParam,
			RequestID:          requestIDParam,
		}
	}
	var leaseAccessConditions *azblob.LeaseAccessConditions
	if leaseIDParam != nil {
		leaseAccessConditions = &azblob.LeaseAccessConditions{
			LeaseID: leaseIDParam,
		}
	}
	var modifiedAccessConditions *azblob.ModifiedAccessConditions
	if ifModifiedSinceParam != nil || ifUnmodifiedSinceParam != nil || ifMatchParam != nil || ifNoneMatchParam != nil || ifTagsParam != nil {
		modifiedAccessConditions = &azblob.ModifiedAccessConditions{
			IfModifiedSince:   ifModifiedSinceParam,
			IfUnmodifiedSince: ifUnmodifiedSinceParam,
			IfMatch:           ifMatchParam,
			IfNoneMatch:       ifNoneMatchParam,
			IfTags:            ifTagsParam,
		}
	}
	respr, errRespr := p.srv.UpdateSequenceNumber(req.Context(), matches[regex.SubexpIndex("containerName")], matches[regex.SubexpIndex("blob")], azblob.Enum1(qp.Get("comp")), azblob.SequenceNumberActionType(getHeaderValue(req.Header, "x-ms-sequence-number-action")), options, leaseAccessConditions, modifiedAccessConditions)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).ETag; val != nil {
		resp.Header.Set("ETag", *val)
	}
	if val := server.GetResponse(respr).LastModified; val != nil {
		resp.Header.Set("Last-Modified", val.Format(time.RFC1123))
	}
	if val := server.GetResponse(respr).BlobSequenceNumber; val != nil {
		resp.Header.Set("x-ms-blob-sequence-number", strconv.FormatInt(*val, 10))
	}
	if val := server.GetResponse(respr).ClientRequestID; val != nil {
		resp.Header.Set("x-ms-client-request-id", *val)
	}
	if val := server.GetResponse(respr).RequestID; val != nil {
		resp.Header.Set("x-ms-request-id", *val)
	}
	if val := server.GetResponse(respr).Version; val != nil {
		resp.Header.Set("x-ms-version", *val)
	}
	if val := server.GetResponse(respr).Date; val != nil {
		resp.Header.Set("Date", val.Format(time.RFC1123))
	}
	return resp, nil
}

func (p *PageBlobServerTransport) dispatchUploadPages(req *http.Request) (*http.Response, error) {
	if p.srv.UploadPages == nil {
		return nil, &nonRetriableError{errors.New("method UploadPages not implemented")}
	}
	const regexStr = "/(?P<containerName>[a-zA-Z0-9-_]+)/(?P<blob>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	contentLengthParam, err := strconv.ParseInt(getHeaderValue(req.Header, "Content-Length"), 10, 64)
	if err != nil {
		return nil, err
	}
	transactionalContentMD5Param, err := base64.StdEncoding.DecodeString(getHeaderValue(req.Header, "Content-MD5"))
	if err != nil {
		return nil, err
	}
	transactionalContentCRC64Param, err := base64.StdEncoding.DecodeString(getHeaderValue(req.Header, "x-ms-content-crc64"))
	if err != nil {
		return nil, err
	}
	timeoutParam, err := parseOptional(qp.Get("timeout"), func(v string) (int32, error) {
		p, parseErr := strconv.ParseInt(v, 10, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	rangeParam := getOptional(getHeaderValue(req.Header, "x-ms-range"))
	leaseIDParam := getOptional(getHeaderValue(req.Header, "x-ms-lease-id"))
	encryptionKeyParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-key"))
	encryptionKeySHA256Param := getOptional(getHeaderValue(req.Header, "x-ms-encryption-key-sha256"))
	encryptionAlgorithmParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-algorithm"))
	encryptionScopeParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-scope"))
	ifSequenceNumberLessThanOrEqualToParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-if-sequence-number-le"), func(v string) (int64, error) {
		p, parseErr := strconv.ParseInt(v, 10, 64)
		if parseErr != nil {
			return 0, parseErr
		}
		return p, nil
	})
	if err != nil {
		return nil, err
	}
	ifSequenceNumberLessThanParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-if-sequence-number-lt"), func(v string) (int64, error) {
		p, parseErr := strconv.ParseInt(v, 10, 64)
		if parseErr != nil {
			return 0, parseErr
		}
		return p, nil
	})
	if err != nil {
		return nil, err
	}
	ifSequenceNumberEqualToParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-if-sequence-number-eq"), func(v string) (int64, error) {
		p, parseErr := strconv.ParseInt(v, 10, 64)
		if parseErr != nil {
			return 0, parseErr
		}
		return p, nil
	})
	if err != nil {
		return nil, err
	}
	ifModifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Modified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifUnmodifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Unmodified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
	ifNoneMatchParam := getOptional(getHeaderValue(req.Header, "If-None-Match"))
	ifTagsParam := getOptional(getHeaderValue(req.Header, "x-ms-if-tags"))
	requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-request-id"))
	var options *azblob.PageBlobClientUploadPagesOptions
	if transactionalContentMD5Param != nil || transactionalContentCRC64Param != nil || timeoutParam != nil || rangeParam != nil || requestIDParam != nil {
		options = &azblob.PageBlobClientUploadPagesOptions{
			TransactionalContentMD5:   transactionalContentMD5Param,
			TransactionalContentCRC64: transactionalContentCRC64Param,
			Timeout:                   timeoutParam,
			Range:                     rangeParam,
			RequestID:                 requestIDParam,
		}
	}
	var leaseAccessConditions *azblob.LeaseAccessConditions
	if leaseIDParam != nil {
		leaseAccessConditions = &azblob.LeaseAccessConditions{
			LeaseID: leaseIDParam,
		}
	}
	var cpkInfo *azblob.CpkInfo
	if encryptionKeyParam != nil || encryptionKeySHA256Param != nil || encryptionAlgorithmParam != nil {
		cpkInfo = &azblob.CpkInfo{
			EncryptionKey:       encryptionKeyParam,
			EncryptionKeySHA256: encryptionKeySHA256Param,
			EncryptionAlgorithm: encryptionAlgorithmParam,
		}
	}
	var cpkScopeInfo *azblob.CpkScopeInfo
	if encryptionScopeParam != nil {
		cpkScopeInfo = &azblob.CpkScopeInfo{
			EncryptionScope: encryptionScopeParam,
		}
	}
	var sequenceNumberAccessConditions *azblob.SequenceNumberAccessConditions
	if ifSequenceNumberLessThanOrEqualToParam != nil || ifSequenceNumberLessThanParam != nil || ifSequenceNumberEqualToParam != nil {
		sequenceNumberAccessConditions = &azblob.SequenceNumberAccessConditions{
			IfSequenceNumberLessThanOrEqualTo: ifSequenceNumberLessThanOrEqualToParam,
			IfSequenceNumberLessThan:          ifSequenceNumberLessThanParam,
			IfSequenceNumberEqualTo:           ifSequenceNumberEqualToParam,
		}
	}
	var modifiedAccessConditions *azblob.ModifiedAccessConditions
	if ifModifiedSinceParam != nil || ifUnmodifiedSinceParam != nil || ifMatchParam != nil || ifNoneMatchParam != nil || ifTagsParam != nil {
		modifiedAccessConditions = &azblob.ModifiedAccessConditions{
			IfModifiedSince:   ifModifiedSinceParam,
			IfUnmodifiedSince: ifUnmodifiedSinceParam,
			IfMatch:           ifMatchParam,
			IfNoneMatch:       ifNoneMatchParam,
			IfTags:            ifTagsParam,
		}
	}
	respr, errRespr := p.srv.UploadPages(req.Context(), matches[regex.SubexpIndex("containerName")], matches[regex.SubexpIndex("blob")], azblob.Enum32(qp.Get("comp")), contentLengthParam, req.Body.(io.ReadSeekCloser), options, leaseAccessConditions, cpkInfo, cpkScopeInfo, sequenceNumberAccessConditions, modifiedAccessConditions)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).ETag; val != nil {
		resp.Header.Set("ETag", *val)
	}
	if val := server.GetResponse(respr).LastModified; val != nil {
		resp.Header.Set("Last-Modified", val.Format(time.RFC1123))
	}
	if val := server.GetResponse(respr).ContentMD5; val != nil {
		resp.Header.Set("Content-MD5", base64.StdEncoding.EncodeToString(val))
	}
	if val := server.GetResponse(respr).XMSContentCRC64; val != nil {
		resp.Header.Set("x-ms-content-crc64", base64.StdEncoding.EncodeToString(val))
	}
	if val := server.GetResponse(respr).BlobSequenceNumber; val != nil {
		resp.Header.Set("x-ms-blob-sequence-number", strconv.FormatInt(*val, 10))
	}
	if val := server.GetResponse(respr).ClientRequestID; val != nil {
		resp.Header.Set("x-ms-client-request-id", *val)
	}
	if val := server.GetResponse(respr).RequestID; val != nil {
		resp.Header.Set("x-ms-request-id", *val)
	}
	if val := server.GetResponse(respr).Version; val != nil {
		resp.Header.Set("x-ms-version", *val)
	}
	if val := server.GetResponse(respr).Date; val != nil {
		resp.Header.Set("Date", val.Format(time.RFC1123))
	}
	if val := server.GetResponse(respr).IsServerEncrypted; val != nil {
		resp.Header.Set("x-ms-request-server-encrypted", strconv.FormatBool(*val))
	}
	if val := server.GetResponse(respr).EncryptionKeySHA256; val != nil {
		resp.Header.Set("x-ms-encryption-key-sha256", *val)
	}
	if val := server.GetResponse(respr).EncryptionScope; val != nil {
		resp.Header.Set("x-ms-encryption-scope", *val)
	}
	return resp, nil
}

func (p *PageBlobServerTransport) dispatchUploadPagesFromURL(req *http.Request) (*http.Response, error) {
	if p.srv.UploadPagesFromURL == nil {
		return nil, &nonRetriableError{errors.New("method UploadPagesFromURL not implemented")}
	}
	const regexStr = "/(?P<containerName>[a-zA-Z0-9-_]+)/(?P<blob>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	sourceContentMD5Param, err := base64.StdEncoding.DecodeString(getHeaderValue(req.Header, "x-ms-source-content-md5"))
	if err != nil {
		return nil, err
	}
	sourceContentcrc64Param, err := base64.StdEncoding.DecodeString(getHeaderValue(req.Header, "x-ms-source-content-crc64"))
	if err != nil {
		return nil, err
	}
	contentLengthParam, err := strconv.ParseInt(getHeaderValue(req.Header, "Content-Length"), 10, 64)
	if err != nil {
		return nil, err
	}
	timeoutParam, err := parseOptional(qp.Get("timeout"), func(v string) (int32, error) {
		p, parseErr := strconv.ParseInt(v, 10, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	encryptionKeyParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-key"))
	encryptionKeySHA256Param := getOptional(getHeaderValue(req.Header, "x-ms-encryption-key-sha256"))
	encryptionAlgorithmParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-algorithm"))
	encryptionScopeParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-scope"))
	leaseIDParam := getOptional(getHeaderValue(req.Header, "x-ms-lease-id"))
	ifSequenceNumberLessThanOrEqualToParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-if-sequence-number-le"), func(v string) (int64, error) {
		p, parseErr := strconv.ParseInt(v, 10, 64)
		if parseErr != nil {
			return 0, parseErr
		}
		return p, nil
	})
	if err != nil {
		return nil, err
	}
	ifSequenceNumberLessThanParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-if-sequence-number-lt"), func(v string) (int64, error) {
		p, parseErr := strconv.ParseInt(v, 10, 64)
		if parseErr != nil {
			return 0, parseErr
		}
		return p, nil
	})
	if err != nil {
		return nil, err
	}
	ifSequenceNumberEqualToParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-if-sequence-number-eq"), func(v string) (int64, error) {
		p, parseErr := strconv.ParseInt(v, 10, 64)
		if parseErr != nil {
			return 0, parseErr
		}
		return p, nil
	})
	if err != nil {
		return nil, err
	}
	ifModifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Modified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifUnmodifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Unmodified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
	ifNoneMatchParam := getOptional(getHeaderValue(req.Header, "If-None-Match"))
	ifTagsParam := getOptional(getHeaderValue(req.Header, "x-ms-if-tags"))
	sourceIfModifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-source-if-modified-since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	sourceIfUnmodifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-source-if-unmodified-since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	sourceIfMatchParam := getOptional(getHeaderValue(req.Header, "x-ms-source-if-match"))
	sourceIfNoneMatchParam := getOptional(getHeaderValue(req.Header, "x-ms-source-if-none-match"))
	requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-request-id"))
	copySourceAuthorizationParam := getOptional(getHeaderValue(req.Header, "x-ms-copy-source-authorization"))
	var options *azblob.PageBlobClientUploadPagesFromURLOptions
	if sourceContentMD5Param != nil || sourceContentcrc64Param != nil || timeoutParam != nil || requestIDParam != nil || copySourceAuthorizationParam != nil {
		options = &azblob.PageBlobClientUploadPagesFromURLOptions{
			SourceContentMD5:        sourceContentMD5Param,
			SourceContentcrc64:      sourceContentcrc64Param,
			Timeout:                 timeoutParam,
			RequestID:               requestIDParam,
			CopySourceAuthorization: copySourceAuthorizationParam,
		}
	}
	var cpkInfo *azblob.CpkInfo
	if encryptionKeyParam != nil || encryptionKeySHA256Param != nil || encryptionAlgorithmParam != nil {
		cpkInfo = &azblob.CpkInfo{
			EncryptionKey:       encryptionKeyParam,
			EncryptionKeySHA256: encryptionKeySHA256Param,
			EncryptionAlgorithm: encryptionAlgorithmParam,
		}
	}
	var cpkScopeInfo *azblob.CpkScopeInfo
	if encryptionScopeParam != nil {
		cpkScopeInfo = &azblob.CpkScopeInfo{
			EncryptionScope: encryptionScopeParam,
		}
	}
	var leaseAccessConditions *azblob.LeaseAccessConditions
	if leaseIDParam != nil {
		leaseAccessConditions = &azblob.LeaseAccessConditions{
			LeaseID: leaseIDParam,
		}
	}
	var sequenceNumberAccessConditions *azblob.SequenceNumberAccessConditions
	if ifSequenceNumberLessThanOrEqualToParam != nil || ifSequenceNumberLessThanParam != nil || ifSequenceNumberEqualToParam != nil {
		sequenceNumberAccessConditions = &azblob.SequenceNumberAccessConditions{
			IfSequenceNumberLessThanOrEqualTo: ifSequenceNumberLessThanOrEqualToParam,
			IfSequenceNumberLessThan:          ifSequenceNumberLessThanParam,
			IfSequenceNumberEqualTo:           ifSequenceNumberEqualToParam,
		}
	}
	var modifiedAccessConditions *azblob.ModifiedAccessConditions
	if ifModifiedSinceParam != nil || ifUnmodifiedSinceParam != nil || ifMatchParam != nil || ifNoneMatchParam != nil || ifTagsParam != nil {
		modifiedAccessConditions = &azblob.ModifiedAccessConditions{
			IfModifiedSince:   ifModifiedSinceParam,
			IfUnmodifiedSince: ifUnmodifiedSinceParam,
			IfMatch:           ifMatchParam,
			IfNoneMatch:       ifNoneMatchParam,
			IfTags:            ifTagsParam,
		}
	}
	var sourceModifiedAccessConditions *azblob.SourceModifiedAccessConditions
	if sourceIfModifiedSinceParam != nil || sourceIfUnmodifiedSinceParam != nil || sourceIfMatchParam != nil || sourceIfNoneMatchParam != nil {
		sourceModifiedAccessConditions = &azblob.SourceModifiedAccessConditions{
			SourceIfModifiedSince:   sourceIfModifiedSinceParam,
			SourceIfUnmodifiedSince: sourceIfUnmodifiedSinceParam,
			SourceIfMatch:           sourceIfMatchParam,
			SourceIfNoneMatch:       sourceIfNoneMatchParam,
		}
	}
	respr, errRespr := p.srv.UploadPagesFromURL(req.Context(), matches[regex.SubexpIndex("containerName")], matches[regex.SubexpIndex("blob")], azblob.Enum32(qp.Get("comp")), getHeaderValue(req.Header, "x-ms-copy-source"), getHeaderValue(req.Header, "x-ms-source-range"), contentLengthParam, getHeaderValue(req.Header, "x-ms-range"), options, cpkInfo, cpkScopeInfo, leaseAccessConditions, sequenceNumberAccessConditions, modifiedAccessConditions, sourceModifiedAccessConditions)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).ETag; val != nil {
		resp.Header.Set("ETag", *val)
	}
	if val := server.GetResponse(respr).LastModified; val != nil {
		resp.Header.Set("Last-Modified", val.Format(time.RFC1123))
	}
	if val := server.GetResponse(respr).ContentMD5; val != nil {
		resp.Header.Set("Content-MD5", base64.StdEncoding.EncodeToString(val))
	}
	if val := server.GetResponse(respr).XMSContentCRC64; val != nil {
		resp.Header.Set("x-ms-content-crc64", base64.StdEncoding.EncodeToString(val))
	}
	if val := server.GetResponse(respr).BlobSequenceNumber; val != nil {
		resp.Header.Set("x-ms-blob-sequence-number", strconv.FormatInt(*val, 10))
	}
	if val := server.GetResponse(respr).RequestID; val != nil {
		resp.Header.Set("x-ms-request-id", *val)
	}
	if val := server.GetResponse(respr).Version; val != nil {
		resp.Header.Set("x-ms-version", *val)
	}
	if val := server.GetResponse(respr).Date; val != nil {
		resp.Header.Set("Date", val.Format(time.RFC1123))
	}
	if val := server.GetResponse(respr).IsServerEncrypted; val != nil {
		resp.Header.Set("x-ms-request-server-encrypted", strconv.FormatBool(*val))
	}
	if val := server.GetResponse(respr).EncryptionKeySHA256; val != nil {
		resp.Header.Set("x-ms-encryption-key-sha256", *val)
	}
	if val := server.GetResponse(respr).EncryptionScope; val != nil {
		resp.Header.Set("x-ms-encryption-scope", *val)
	}
	return resp, nil
}
