//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"azblob"
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"io"
	"net/http"
	"regexp"
	"strconv"
	"strings"
	"time"
)

// AppendBlobServer is a fake server for instances of the azblob.AppendBlobClient type.
type AppendBlobServer struct {
	// AppendBlock is the fake for method AppendBlobClient.AppendBlock
	// HTTP status codes to indicate success: http.StatusCreated
	AppendBlock func(ctx context.Context, containerName string, blob string, comp azblob.Enum35, contentLength int64, body io.ReadSeekCloser, options *azblob.AppendBlobClientAppendBlockOptions, leaseAccessConditions *azblob.LeaseAccessConditions, appendPositionAccessConditions *azblob.AppendPositionAccessConditions, cpkInfo *azblob.CpkInfo, cpkScopeInfo *azblob.CpkScopeInfo, modifiedAccessConditions *azblob.ModifiedAccessConditions) (resp azfake.Responder[azblob.AppendBlobClientAppendBlockResponse], errResp azfake.ErrorResponder)

	// AppendBlockFromURL is the fake for method AppendBlobClient.AppendBlockFromURL
	// HTTP status codes to indicate success: http.StatusCreated
	AppendBlockFromURL func(ctx context.Context, containerName string, blob string, comp azblob.Enum35, sourceURL string, contentLength int64, options *azblob.AppendBlobClientAppendBlockFromURLOptions, cpkInfo *azblob.CpkInfo, cpkScopeInfo *azblob.CpkScopeInfo, leaseAccessConditions *azblob.LeaseAccessConditions, appendPositionAccessConditions *azblob.AppendPositionAccessConditions, modifiedAccessConditions *azblob.ModifiedAccessConditions, sourceModifiedAccessConditions *azblob.SourceModifiedAccessConditions) (resp azfake.Responder[azblob.AppendBlobClientAppendBlockFromURLResponse], errResp azfake.ErrorResponder)

	// Create is the fake for method AppendBlobClient.Create
	// HTTP status codes to indicate success: http.StatusCreated
	Create func(ctx context.Context, containerName string, blob string, contentLength int64, options *azblob.AppendBlobClientCreateOptions, blobHTTPHeaders *azblob.BlobHTTPHeaders, leaseAccessConditions *azblob.LeaseAccessConditions, cpkInfo *azblob.CpkInfo, cpkScopeInfo *azblob.CpkScopeInfo, modifiedAccessConditions *azblob.ModifiedAccessConditions) (resp azfake.Responder[azblob.AppendBlobClientCreateResponse], errResp azfake.ErrorResponder)

	// Seal is the fake for method AppendBlobClient.Seal
	// HTTP status codes to indicate success: http.StatusOK
	Seal func(ctx context.Context, containerName string, blob string, comp azblob.Enum36, options *azblob.AppendBlobClientSealOptions, leaseAccessConditions *azblob.LeaseAccessConditions, modifiedAccessConditions *azblob.ModifiedAccessConditions, appendPositionAccessConditions *azblob.AppendPositionAccessConditions) (resp azfake.Responder[azblob.AppendBlobClientSealResponse], errResp azfake.ErrorResponder)
}

// NewAppendBlobServerTransport creates a new instance of AppendBlobServerTransport with the provided implementation.
// The returned AppendBlobServerTransport instance is connected to an instance of azblob.AppendBlobClient by way of the
// undefined.Transporter field.
func NewAppendBlobServerTransport(srv *AppendBlobServer) *AppendBlobServerTransport {
	return &AppendBlobServerTransport{srv: srv}
}

// AppendBlobServerTransport connects instances of azblob.AppendBlobClient to instances of AppendBlobServer.
// Don't use this type directly, use NewAppendBlobServerTransport instead.
type AppendBlobServerTransport struct {
	srv *AppendBlobServer
}

// Do implements the policy.Transporter interface for AppendBlobServerTransport.
func (a *AppendBlobServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "AppendBlobClient.AppendBlock":
		resp, err = a.dispatchAppendBlock(req)
	case "AppendBlobClient.AppendBlockFromURL":
		resp, err = a.dispatchAppendBlockFromURL(req)
	case "AppendBlobClient.Create":
		resp, err = a.dispatchCreate(req)
	case "AppendBlobClient.Seal":
		resp, err = a.dispatchSeal(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (a *AppendBlobServerTransport) dispatchAppendBlock(req *http.Request) (*http.Response, error) {
	if a.srv.AppendBlock == nil {
		return nil, &nonRetriableError{errors.New("method AppendBlock not implemented")}
	}
	const regexStr = "/(?P<containerName>[a-zA-Z0-9-_]+)/(?P<blob>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	timeoutParam, err := parseOptional(qp.Get("timeout"), func(v string) (int32, error) {
		p, parseErr := strconv.ParseInt(v, 10, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	contentLengthParam, err := strconv.ParseInt(getHeaderValue(req.Header, "Content-Length"), 10, 64)
	if err != nil {
		return nil, err
	}
	transactionalContentMD5Param, err := base64.StdEncoding.DecodeString(getHeaderValue(req.Header, "Content-MD5"))
	if err != nil {
		return nil, err
	}
	transactionalContentCRC64Param, err := base64.StdEncoding.DecodeString(getHeaderValue(req.Header, "x-ms-content-crc64"))
	if err != nil {
		return nil, err
	}
	leaseIDParam := getOptional(getHeaderValue(req.Header, "x-ms-lease-id"))
	maxSizeParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-blob-condition-maxsize"), func(v string) (int64, error) {
		p, parseErr := strconv.ParseInt(v, 10, 64)
		if parseErr != nil {
			return 0, parseErr
		}
		return p, nil
	})
	if err != nil {
		return nil, err
	}
	appendPositionParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-blob-condition-appendpos"), func(v string) (int64, error) {
		p, parseErr := strconv.ParseInt(v, 10, 64)
		if parseErr != nil {
			return 0, parseErr
		}
		return p, nil
	})
	if err != nil {
		return nil, err
	}
	encryptionKeyParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-key"))
	encryptionKeySHA256Param := getOptional(getHeaderValue(req.Header, "x-ms-encryption-key-sha256"))
	encryptionAlgorithmParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-algorithm"))
	encryptionScopeParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-scope"))
	ifModifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Modified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifUnmodifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Unmodified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
	ifNoneMatchParam := getOptional(getHeaderValue(req.Header, "If-None-Match"))
	ifTagsParam := getOptional(getHeaderValue(req.Header, "x-ms-if-tags"))
	requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-request-id"))
	var options *azblob.AppendBlobClientAppendBlockOptions
	if timeoutParam != nil || transactionalContentMD5Param != nil || transactionalContentCRC64Param != nil || requestIDParam != nil {
		options = &azblob.AppendBlobClientAppendBlockOptions{
			Timeout:                   timeoutParam,
			TransactionalContentMD5:   transactionalContentMD5Param,
			TransactionalContentCRC64: transactionalContentCRC64Param,
			RequestID:                 requestIDParam,
		}
	}
	var leaseAccessConditions *azblob.LeaseAccessConditions
	if leaseIDParam != nil {
		leaseAccessConditions = &azblob.LeaseAccessConditions{
			LeaseID: leaseIDParam,
		}
	}
	var appendPositionAccessConditions *azblob.AppendPositionAccessConditions
	if maxSizeParam != nil || appendPositionParam != nil {
		appendPositionAccessConditions = &azblob.AppendPositionAccessConditions{
			MaxSize:        maxSizeParam,
			AppendPosition: appendPositionParam,
		}
	}
	var cpkInfo *azblob.CpkInfo
	if encryptionKeyParam != nil || encryptionKeySHA256Param != nil || encryptionAlgorithmParam != nil {
		cpkInfo = &azblob.CpkInfo{
			EncryptionKey:       encryptionKeyParam,
			EncryptionKeySHA256: encryptionKeySHA256Param,
			EncryptionAlgorithm: encryptionAlgorithmParam,
		}
	}
	var cpkScopeInfo *azblob.CpkScopeInfo
	if encryptionScopeParam != nil {
		cpkScopeInfo = &azblob.CpkScopeInfo{
			EncryptionScope: encryptionScopeParam,
		}
	}
	var modifiedAccessConditions *azblob.ModifiedAccessConditions
	if ifModifiedSinceParam != nil || ifUnmodifiedSinceParam != nil || ifMatchParam != nil || ifNoneMatchParam != nil || ifTagsParam != nil {
		modifiedAccessConditions = &azblob.ModifiedAccessConditions{
			IfModifiedSince:   ifModifiedSinceParam,
			IfUnmodifiedSince: ifUnmodifiedSinceParam,
			IfMatch:           ifMatchParam,
			IfNoneMatch:       ifNoneMatchParam,
			IfTags:            ifTagsParam,
		}
	}
	respr, errRespr := a.srv.AppendBlock(req.Context(), matches[regex.SubexpIndex("containerName")], matches[regex.SubexpIndex("blob")], azblob.Enum35(qp.Get("comp")), contentLengthParam, req.Body.(io.ReadSeekCloser), options, leaseAccessConditions, appendPositionAccessConditions, cpkInfo, cpkScopeInfo, modifiedAccessConditions)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).ETag; val != nil {
		resp.Header.Set("ETag", *val)
	}
	if val := server.GetResponse(respr).LastModified; val != nil {
		resp.Header.Set("Last-Modified", val.Format(time.RFC1123))
	}
	if val := server.GetResponse(respr).ContentMD5; val != nil {
		resp.Header.Set("Content-MD5", base64.StdEncoding.EncodeToString(val))
	}
	if val := server.GetResponse(respr).XMSContentCRC64; val != nil {
		resp.Header.Set("x-ms-content-crc64", base64.StdEncoding.EncodeToString(val))
	}
	if val := server.GetResponse(respr).ClientRequestID; val != nil {
		resp.Header.Set("x-ms-client-request-id", *val)
	}
	if val := server.GetResponse(respr).RequestID; val != nil {
		resp.Header.Set("x-ms-request-id", *val)
	}
	if val := server.GetResponse(respr).Version; val != nil {
		resp.Header.Set("x-ms-version", *val)
	}
	if val := server.GetResponse(respr).Date; val != nil {
		resp.Header.Set("Date", val.Format(time.RFC1123))
	}
	if val := server.GetResponse(respr).BlobAppendOffset; val != nil {
		resp.Header.Set("x-ms-blob-append-offset", *val)
	}
	if val := server.GetResponse(respr).BlobCommittedBlockCount; val != nil {
		resp.Header.Set("x-ms-blob-committed-block-count", strconv.FormatInt(int64(*val), 10))
	}
	if val := server.GetResponse(respr).IsServerEncrypted; val != nil {
		resp.Header.Set("x-ms-request-server-encrypted", strconv.FormatBool(*val))
	}
	if val := server.GetResponse(respr).EncryptionKeySHA256; val != nil {
		resp.Header.Set("x-ms-encryption-key-sha256", *val)
	}
	if val := server.GetResponse(respr).EncryptionScope; val != nil {
		resp.Header.Set("x-ms-encryption-scope", *val)
	}
	return resp, nil
}

func (a *AppendBlobServerTransport) dispatchAppendBlockFromURL(req *http.Request) (*http.Response, error) {
	if a.srv.AppendBlockFromURL == nil {
		return nil, &nonRetriableError{errors.New("method AppendBlockFromURL not implemented")}
	}
	const regexStr = "/(?P<containerName>[a-zA-Z0-9-_]+)/(?P<blob>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	sourceRangeParam := getOptional(getHeaderValue(req.Header, "x-ms-source-range"))
	sourceContentMD5Param, err := base64.StdEncoding.DecodeString(getHeaderValue(req.Header, "x-ms-source-content-md5"))
	if err != nil {
		return nil, err
	}
	sourceContentcrc64Param, err := base64.StdEncoding.DecodeString(getHeaderValue(req.Header, "x-ms-source-content-crc64"))
	if err != nil {
		return nil, err
	}
	timeoutParam, err := parseOptional(qp.Get("timeout"), func(v string) (int32, error) {
		p, parseErr := strconv.ParseInt(v, 10, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	contentLengthParam, err := strconv.ParseInt(getHeaderValue(req.Header, "Content-Length"), 10, 64)
	if err != nil {
		return nil, err
	}
	transactionalContentMD5Param, err := base64.StdEncoding.DecodeString(getHeaderValue(req.Header, "Content-MD5"))
	if err != nil {
		return nil, err
	}
	encryptionKeyParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-key"))
	encryptionKeySHA256Param := getOptional(getHeaderValue(req.Header, "x-ms-encryption-key-sha256"))
	encryptionAlgorithmParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-algorithm"))
	encryptionScopeParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-scope"))
	leaseIDParam := getOptional(getHeaderValue(req.Header, "x-ms-lease-id"))
	maxSizeParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-blob-condition-maxsize"), func(v string) (int64, error) {
		p, parseErr := strconv.ParseInt(v, 10, 64)
		if parseErr != nil {
			return 0, parseErr
		}
		return p, nil
	})
	if err != nil {
		return nil, err
	}
	appendPositionParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-blob-condition-appendpos"), func(v string) (int64, error) {
		p, parseErr := strconv.ParseInt(v, 10, 64)
		if parseErr != nil {
			return 0, parseErr
		}
		return p, nil
	})
	if err != nil {
		return nil, err
	}
	ifModifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Modified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifUnmodifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Unmodified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
	ifNoneMatchParam := getOptional(getHeaderValue(req.Header, "If-None-Match"))
	ifTagsParam := getOptional(getHeaderValue(req.Header, "x-ms-if-tags"))
	sourceIfModifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-source-if-modified-since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	sourceIfUnmodifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-source-if-unmodified-since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	sourceIfMatchParam := getOptional(getHeaderValue(req.Header, "x-ms-source-if-match"))
	sourceIfNoneMatchParam := getOptional(getHeaderValue(req.Header, "x-ms-source-if-none-match"))
	requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-request-id"))
	copySourceAuthorizationParam := getOptional(getHeaderValue(req.Header, "x-ms-copy-source-authorization"))
	var options *azblob.AppendBlobClientAppendBlockFromURLOptions
	if sourceRangeParam != nil || sourceContentMD5Param != nil || sourceContentcrc64Param != nil || timeoutParam != nil || transactionalContentMD5Param != nil || requestIDParam != nil || copySourceAuthorizationParam != nil {
		options = &azblob.AppendBlobClientAppendBlockFromURLOptions{
			SourceRange:             sourceRangeParam,
			SourceContentMD5:        sourceContentMD5Param,
			SourceContentcrc64:      sourceContentcrc64Param,
			Timeout:                 timeoutParam,
			TransactionalContentMD5: transactionalContentMD5Param,
			RequestID:               requestIDParam,
			CopySourceAuthorization: copySourceAuthorizationParam,
		}
	}
	var cpkInfo *azblob.CpkInfo
	if encryptionKeyParam != nil || encryptionKeySHA256Param != nil || encryptionAlgorithmParam != nil {
		cpkInfo = &azblob.CpkInfo{
			EncryptionKey:       encryptionKeyParam,
			EncryptionKeySHA256: encryptionKeySHA256Param,
			EncryptionAlgorithm: encryptionAlgorithmParam,
		}
	}
	var cpkScopeInfo *azblob.CpkScopeInfo
	if encryptionScopeParam != nil {
		cpkScopeInfo = &azblob.CpkScopeInfo{
			EncryptionScope: encryptionScopeParam,
		}
	}
	var leaseAccessConditions *azblob.LeaseAccessConditions
	if leaseIDParam != nil {
		leaseAccessConditions = &azblob.LeaseAccessConditions{
			LeaseID: leaseIDParam,
		}
	}
	var appendPositionAccessConditions *azblob.AppendPositionAccessConditions
	if maxSizeParam != nil || appendPositionParam != nil {
		appendPositionAccessConditions = &azblob.AppendPositionAccessConditions{
			MaxSize:        maxSizeParam,
			AppendPosition: appendPositionParam,
		}
	}
	var modifiedAccessConditions *azblob.ModifiedAccessConditions
	if ifModifiedSinceParam != nil || ifUnmodifiedSinceParam != nil || ifMatchParam != nil || ifNoneMatchParam != nil || ifTagsParam != nil {
		modifiedAccessConditions = &azblob.ModifiedAccessConditions{
			IfModifiedSince:   ifModifiedSinceParam,
			IfUnmodifiedSince: ifUnmodifiedSinceParam,
			IfMatch:           ifMatchParam,
			IfNoneMatch:       ifNoneMatchParam,
			IfTags:            ifTagsParam,
		}
	}
	var sourceModifiedAccessConditions *azblob.SourceModifiedAccessConditions
	if sourceIfModifiedSinceParam != nil || sourceIfUnmodifiedSinceParam != nil || sourceIfMatchParam != nil || sourceIfNoneMatchParam != nil {
		sourceModifiedAccessConditions = &azblob.SourceModifiedAccessConditions{
			SourceIfModifiedSince:   sourceIfModifiedSinceParam,
			SourceIfUnmodifiedSince: sourceIfUnmodifiedSinceParam,
			SourceIfMatch:           sourceIfMatchParam,
			SourceIfNoneMatch:       sourceIfNoneMatchParam,
		}
	}
	respr, errRespr := a.srv.AppendBlockFromURL(req.Context(), matches[regex.SubexpIndex("containerName")], matches[regex.SubexpIndex("blob")], azblob.Enum35(qp.Get("comp")), getHeaderValue(req.Header, "x-ms-copy-source"), contentLengthParam, options, cpkInfo, cpkScopeInfo, leaseAccessConditions, appendPositionAccessConditions, modifiedAccessConditions, sourceModifiedAccessConditions)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).ETag; val != nil {
		resp.Header.Set("ETag", *val)
	}
	if val := server.GetResponse(respr).LastModified; val != nil {
		resp.Header.Set("Last-Modified", val.Format(time.RFC1123))
	}
	if val := server.GetResponse(respr).ContentMD5; val != nil {
		resp.Header.Set("Content-MD5", base64.StdEncoding.EncodeToString(val))
	}
	if val := server.GetResponse(respr).XMSContentCRC64; val != nil {
		resp.Header.Set("x-ms-content-crc64", base64.StdEncoding.EncodeToString(val))
	}
	if val := server.GetResponse(respr).RequestID; val != nil {
		resp.Header.Set("x-ms-request-id", *val)
	}
	if val := server.GetResponse(respr).Version; val != nil {
		resp.Header.Set("x-ms-version", *val)
	}
	if val := server.GetResponse(respr).Date; val != nil {
		resp.Header.Set("Date", val.Format(time.RFC1123))
	}
	if val := server.GetResponse(respr).BlobAppendOffset; val != nil {
		resp.Header.Set("x-ms-blob-append-offset", *val)
	}
	if val := server.GetResponse(respr).BlobCommittedBlockCount; val != nil {
		resp.Header.Set("x-ms-blob-committed-block-count", strconv.FormatInt(int64(*val), 10))
	}
	if val := server.GetResponse(respr).EncryptionKeySHA256; val != nil {
		resp.Header.Set("x-ms-encryption-key-sha256", *val)
	}
	if val := server.GetResponse(respr).EncryptionScope; val != nil {
		resp.Header.Set("x-ms-encryption-scope", *val)
	}
	if val := server.GetResponse(respr).IsServerEncrypted; val != nil {
		resp.Header.Set("x-ms-request-server-encrypted", strconv.FormatBool(*val))
	}
	return resp, nil
}

func (a *AppendBlobServerTransport) dispatchCreate(req *http.Request) (*http.Response, error) {
	if a.srv.Create == nil {
		return nil, &nonRetriableError{errors.New("method Create not implemented")}
	}
	const regexStr = "/(?P<containerName>[a-zA-Z0-9-_]+)/(?P<blob>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	timeoutParam, err := parseOptional(qp.Get("timeout"), func(v string) (int32, error) {
		p, parseErr := strconv.ParseInt(v, 10, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	contentLengthParam, err := strconv.ParseInt(getHeaderValue(req.Header, "Content-Length"), 10, 64)
	if err != nil {
		return nil, err
	}
	blobContentTypeParam := getOptional(getHeaderValue(req.Header, "x-ms-blob-content-type"))
	blobContentEncodingParam := getOptional(getHeaderValue(req.Header, "x-ms-blob-content-encoding"))
	blobContentLanguageParam := getOptional(getHeaderValue(req.Header, "x-ms-blob-content-language"))
	blobContentMD5Param, err := base64.StdEncoding.DecodeString(getHeaderValue(req.Header, "x-ms-blob-content-md5"))
	if err != nil {
		return nil, err
	}
	blobCacheControlParam := getOptional(getHeaderValue(req.Header, "x-ms-blob-cache-control"))
	var metadataParam map[string]*string
	for hh := range req.Header {
		if len(hh) > len("x-ms-meta-") && strings.EqualFold(hh[:len("x-ms-meta-")], "x-ms-meta-") {
			if metadataParam == nil {
				metadataParam = map[string]*string{}
			}
			metadataParam[hh[len("x-ms-meta-"):]] = to.Ptr(getHeaderValue(req.Header, hh))
		}
	}
	leaseIDParam := getOptional(getHeaderValue(req.Header, "x-ms-lease-id"))
	blobContentDispositionParam := getOptional(getHeaderValue(req.Header, "x-ms-blob-content-disposition"))
	encryptionKeyParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-key"))
	encryptionKeySHA256Param := getOptional(getHeaderValue(req.Header, "x-ms-encryption-key-sha256"))
	encryptionAlgorithmParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-algorithm"))
	encryptionScopeParam := getOptional(getHeaderValue(req.Header, "x-ms-encryption-scope"))
	ifModifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Modified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifUnmodifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Unmodified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
	ifNoneMatchParam := getOptional(getHeaderValue(req.Header, "If-None-Match"))
	ifTagsParam := getOptional(getHeaderValue(req.Header, "x-ms-if-tags"))
	requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-request-id"))
	blobTagsStringParam := getOptional(getHeaderValue(req.Header, "x-ms-tags"))
	immutabilityPolicyExpiryParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-immutability-policy-until-date"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	immutabilityPolicyModeParam := getOptional(azblob.BlobImmutabilityPolicyMode(getHeaderValue(req.Header, "x-ms-immutability-policy-mode")))
	legalHoldParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-legal-hold"), strconv.ParseBool)
	if err != nil {
		return nil, err
	}
	var options *azblob.AppendBlobClientCreateOptions
	if timeoutParam != nil || metadataParam != nil || requestIDParam != nil || blobTagsStringParam != nil || immutabilityPolicyExpiryParam != nil || immutabilityPolicyModeParam != nil || legalHoldParam != nil {
		options = &azblob.AppendBlobClientCreateOptions{
			Timeout:                  timeoutParam,
			Metadata:                 metadataParam,
			RequestID:                requestIDParam,
			BlobTagsString:           blobTagsStringParam,
			ImmutabilityPolicyExpiry: immutabilityPolicyExpiryParam,
			ImmutabilityPolicyMode:   immutabilityPolicyModeParam,
			LegalHold:                legalHoldParam,
		}
	}
	var blobHTTPHeaders *azblob.BlobHTTPHeaders
	if blobContentTypeParam != nil || blobContentEncodingParam != nil || blobContentLanguageParam != nil || blobContentMD5Param != nil || blobCacheControlParam != nil || blobContentDispositionParam != nil {
		blobHTTPHeaders = &azblob.BlobHTTPHeaders{
			BlobContentType:        blobContentTypeParam,
			BlobContentEncoding:    blobContentEncodingParam,
			BlobContentLanguage:    blobContentLanguageParam,
			BlobContentMD5:         blobContentMD5Param,
			BlobCacheControl:       blobCacheControlParam,
			BlobContentDisposition: blobContentDispositionParam,
		}
	}
	var leaseAccessConditions *azblob.LeaseAccessConditions
	if leaseIDParam != nil {
		leaseAccessConditions = &azblob.LeaseAccessConditions{
			LeaseID: leaseIDParam,
		}
	}
	var cpkInfo *azblob.CpkInfo
	if encryptionKeyParam != nil || encryptionKeySHA256Param != nil || encryptionAlgorithmParam != nil {
		cpkInfo = &azblob.CpkInfo{
			EncryptionKey:       encryptionKeyParam,
			EncryptionKeySHA256: encryptionKeySHA256Param,
			EncryptionAlgorithm: encryptionAlgorithmParam,
		}
	}
	var cpkScopeInfo *azblob.CpkScopeInfo
	if encryptionScopeParam != nil {
		cpkScopeInfo = &azblob.CpkScopeInfo{
			EncryptionScope: encryptionScopeParam,
		}
	}
	var modifiedAccessConditions *azblob.ModifiedAccessConditions
	if ifModifiedSinceParam != nil || ifUnmodifiedSinceParam != nil || ifMatchParam != nil || ifNoneMatchParam != nil || ifTagsParam != nil {
		modifiedAccessConditions = &azblob.ModifiedAccessConditions{
			IfModifiedSince:   ifModifiedSinceParam,
			IfUnmodifiedSince: ifUnmodifiedSinceParam,
			IfMatch:           ifMatchParam,
			IfNoneMatch:       ifNoneMatchParam,
			IfTags:            ifTagsParam,
		}
	}
	respr, errRespr := a.srv.Create(req.Context(), matches[regex.SubexpIndex("containerName")], matches[regex.SubexpIndex("blob")], contentLengthParam, options, blobHTTPHeaders, leaseAccessConditions, cpkInfo, cpkScopeInfo, modifiedAccessConditions)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).ETag; val != nil {
		resp.Header.Set("ETag", *val)
	}
	if val := server.GetResponse(respr).LastModified; val != nil {
		resp.Header.Set("Last-Modified", val.Format(time.RFC1123))
	}
	if val := server.GetResponse(respr).ContentMD5; val != nil {
		resp.Header.Set("Content-MD5", base64.StdEncoding.EncodeToString(val))
	}
	if val := server.GetResponse(respr).ClientRequestID; val != nil {
		resp.Header.Set("x-ms-client-request-id", *val)
	}
	if val := server.GetResponse(respr).RequestID; val != nil {
		resp.Header.Set("x-ms-request-id", *val)
	}
	if val := server.GetResponse(respr).Version; val != nil {
		resp.Header.Set("x-ms-version", *val)
	}
	if val := server.GetResponse(respr).VersionID; val != nil {
		resp.Header.Set("x-ms-version-id", *val)
	}
	if val := server.GetResponse(respr).Date; val != nil {
		resp.Header.Set("Date", val.Format(time.RFC1123))
	}
	if val := server.GetResponse(respr).IsServerEncrypted; val != nil {
		resp.Header.Set("x-ms-request-server-encrypted", strconv.FormatBool(*val))
	}
	if val := server.GetResponse(respr).EncryptionKeySHA256; val != nil {
		resp.Header.Set("x-ms-encryption-key-sha256", *val)
	}
	if val := server.GetResponse(respr).EncryptionScope; val != nil {
		resp.Header.Set("x-ms-encryption-scope", *val)
	}
	return resp, nil
}

func (a *AppendBlobServerTransport) dispatchSeal(req *http.Request) (*http.Response, error) {
	if a.srv.Seal == nil {
		return nil, &nonRetriableError{errors.New("method Seal not implemented")}
	}
	const regexStr = "/(?P<containerName>[a-zA-Z0-9-_]+)/(?P<blob>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	timeoutParam, err := parseOptional(qp.Get("timeout"), func(v string) (int32, error) {
		p, parseErr := strconv.ParseInt(v, 10, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-request-id"))
	leaseIDParam := getOptional(getHeaderValue(req.Header, "x-ms-lease-id"))
	ifModifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Modified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifUnmodifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Unmodified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
	ifNoneMatchParam := getOptional(getHeaderValue(req.Header, "If-None-Match"))
	appendPositionParam, err := parseOptional(getHeaderValue(req.Header, "x-ms-blob-condition-appendpos"), func(v string) (int64, error) {
		p, parseErr := strconv.ParseInt(v, 10, 64)
		if parseErr != nil {
			return 0, parseErr
		}
		return p, nil
	})
	if err != nil {
		return nil, err
	}
	var options *azblob.AppendBlobClientSealOptions
	if timeoutParam != nil || requestIDParam != nil {
		options = &azblob.AppendBlobClientSealOptions{
			Timeout:   timeoutParam,
			RequestID: requestIDParam,
		}
	}
	var leaseAccessConditions *azblob.LeaseAccessConditions
	if leaseIDParam != nil {
		leaseAccessConditions = &azblob.LeaseAccessConditions{
			LeaseID: leaseIDParam,
		}
	}
	var modifiedAccessConditions *azblob.ModifiedAccessConditions
	if ifModifiedSinceParam != nil || ifUnmodifiedSinceParam != nil || ifMatchParam != nil || ifNoneMatchParam != nil {
		modifiedAccessConditions = &azblob.ModifiedAccessConditions{
			IfModifiedSince:   ifModifiedSinceParam,
			IfUnmodifiedSince: ifUnmodifiedSinceParam,
			IfMatch:           ifMatchParam,
			IfNoneMatch:       ifNoneMatchParam,
		}
	}
	var appendPositionAccessConditions *azblob.AppendPositionAccessConditions
	if appendPositionParam != nil {
		appendPositionAccessConditions = &azblob.AppendPositionAccessConditions{
			AppendPosition: appendPositionParam,
		}
	}
	respr, errRespr := a.srv.Seal(req.Context(), matches[regex.SubexpIndex("containerName")], matches[regex.SubexpIndex("blob")], azblob.Enum36(qp.Get("comp")), options, leaseAccessConditions, modifiedAccessConditions, appendPositionAccessConditions)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).ETag; val != nil {
		resp.Header.Set("ETag", *val)
	}
	if val := server.GetResponse(respr).LastModified; val != nil {
		resp.Header.Set("Last-Modified", val.Format(time.RFC1123))
	}
	if val := server.GetResponse(respr).ClientRequestID; val != nil {
		resp.Header.Set("x-ms-client-request-id", *val)
	}
	if val := server.GetResponse(respr).RequestID; val != nil {
		resp.Header.Set("x-ms-request-id", *val)
	}
	if val := server.GetResponse(respr).Version; val != nil {
		resp.Header.Set("x-ms-version", *val)
	}
	if val := server.GetResponse(respr).Date; val != nil {
		resp.Header.Set("Date", val.Format(time.RFC1123))
	}
	if val := server.GetResponse(respr).IsSealed; val != nil {
		resp.Header.Set("x-ms-blob-sealed", strconv.FormatBool(*val))
	}
	return resp, nil
}
