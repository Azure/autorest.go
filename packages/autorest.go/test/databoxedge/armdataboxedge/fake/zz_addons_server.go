//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"armdataboxedge"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
	"regexp"
)

// AddonsServer is a fake server for instances of the armdataboxedge.AddonsClient type.
type AddonsServer struct {
	// BeginCreateOrUpdate is the fake for method AddonsClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginCreateOrUpdate func(ctx context.Context, deviceName string, roleName string, addonName string, resourceGroupName string, addon armdataboxedge.AddonClassification, options *armdataboxedge.AddonsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armdataboxedge.AddonsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method AddonsClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, deviceName string, roleName string, addonName string, resourceGroupName string, options *armdataboxedge.AddonsClientBeginDeleteOptions) (resp azfake.PollerResponder[armdataboxedge.AddonsClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method AddonsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, deviceName string, roleName string, addonName string, resourceGroupName string, options *armdataboxedge.AddonsClientGetOptions) (resp azfake.Responder[armdataboxedge.AddonsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByRolePager is the fake for method AddonsClient.NewListByRolePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByRolePager func(deviceName string, roleName string, resourceGroupName string, options *armdataboxedge.AddonsClientListByRoleOptions) (resp azfake.PagerResponder[armdataboxedge.AddonsClientListByRoleResponse])
}

// NewAddonsServerTransport creates a new instance of AddonsServerTransport with the provided implementation.
// The returned AddonsServerTransport instance is connected to an instance of armdataboxedge.AddonsClient by way of the
// undefined.Transporter field.
func NewAddonsServerTransport(srv *AddonsServer) *AddonsServerTransport {
	return &AddonsServerTransport{srv: srv}
}

// AddonsServerTransport connects instances of armdataboxedge.AddonsClient to instances of AddonsServer.
// Don't use this type directly, use NewAddonsServerTransport instead.
type AddonsServerTransport struct {
	srv                 *AddonsServer
	beginCreateOrUpdate *azfake.PollerResponder[armdataboxedge.AddonsClientCreateOrUpdateResponse]
	beginDelete         *azfake.PollerResponder[armdataboxedge.AddonsClientDeleteResponse]
	newListByRolePager  *azfake.PagerResponder[armdataboxedge.AddonsClientListByRoleResponse]
}

// Do implements the policy.Transporter interface for AddonsServerTransport.
func (a *AddonsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "AddonsClient.BeginCreateOrUpdate":
		resp, err = a.dispatchBeginCreateOrUpdate(req)
	case "AddonsClient.BeginDelete":
		resp, err = a.dispatchBeginDelete(req)
	case "AddonsClient.Get":
		resp, err = a.dispatchGet(req)
	case "AddonsClient.NewListByRolePager":
		resp, err = a.dispatchNewListByRolePager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (a *AddonsServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if a.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("method BeginCreateOrUpdate not implemented")}
	}
	if a.beginCreateOrUpdate == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/(?P<deviceName>[a-zA-Z0-9-_]+)/roles/(?P<roleName>[a-zA-Z0-9-_]+)/addons/(?P<addonName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		raw, err := readRequestBody(req)
		if err != nil {
			return nil, err
		}
		body, err := unmarshalAddonClassification(raw)
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginCreateOrUpdate(req.Context(), matches[regex.SubexpIndex("deviceName")], matches[regex.SubexpIndex("roleName")], matches[regex.SubexpIndex("addonName")], matches[regex.SubexpIndex("resourceGroupName")], body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		a.beginCreateOrUpdate = &respr
	}

	resp, err := server.PollerResponderNext(a.beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(a.beginCreateOrUpdate) {
		a.beginCreateOrUpdate = nil
	}

	return resp, nil
}

func (a *AddonsServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if a.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("method BeginDelete not implemented")}
	}
	if a.beginDelete == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/(?P<deviceName>[a-zA-Z0-9-_]+)/roles/(?P<roleName>[a-zA-Z0-9-_]+)/addons/(?P<addonName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		respr, errRespr := a.srv.BeginDelete(req.Context(), matches[regex.SubexpIndex("deviceName")], matches[regex.SubexpIndex("roleName")], matches[regex.SubexpIndex("addonName")], matches[regex.SubexpIndex("resourceGroupName")], nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		a.beginDelete = &respr
	}

	resp, err := server.PollerResponderNext(a.beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(a.beginDelete) {
		a.beginDelete = nil
	}

	return resp, nil
}

func (a *AddonsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if a.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("method Get not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/(?P<deviceName>[a-zA-Z0-9-_]+)/roles/(?P<roleName>[a-zA-Z0-9-_]+)/addons/(?P<addonName>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	respr, errRespr := a.srv.Get(req.Context(), matches[regex.SubexpIndex("deviceName")], matches[regex.SubexpIndex("roleName")], matches[regex.SubexpIndex("addonName")], matches[regex.SubexpIndex("resourceGroupName")], nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).AddonClassification, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *AddonsServerTransport) dispatchNewListByRolePager(req *http.Request) (*http.Response, error) {
	if a.srv.NewListByRolePager == nil {
		return nil, &nonRetriableError{errors.New("method NewListByRolePager not implemented")}
	}
	if a.newListByRolePager == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/(?P<deviceName>[a-zA-Z0-9-_]+)/roles/(?P<roleName>[a-zA-Z0-9-_]+)/addons"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := a.srv.NewListByRolePager(matches[regex.SubexpIndex("deviceName")], matches[regex.SubexpIndex("roleName")], matches[regex.SubexpIndex("resourceGroupName")], nil)
		a.newListByRolePager = &resp
		server.PagerResponderInjectNextLinks(a.newListByRolePager, req, func(page *armdataboxedge.AddonsClientListByRoleResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(a.newListByRolePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(a.newListByRolePager) {
		a.newListByRolePager = nil
	}
	return resp, nil
}
