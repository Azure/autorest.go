//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"armdataboxedge"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
	"regexp"
)

// MonitoringConfigServer is a fake server for instances of the armdataboxedge.MonitoringConfigClient type.
type MonitoringConfigServer struct {
	// BeginCreateOrUpdate is the fake for method MonitoringConfigClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginCreateOrUpdate func(ctx context.Context, deviceName string, roleName string, resourceGroupName string, monitoringMetricConfiguration armdataboxedge.MonitoringMetricConfiguration, options *armdataboxedge.MonitoringConfigClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armdataboxedge.MonitoringConfigClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method MonitoringConfigClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, deviceName string, roleName string, resourceGroupName string, options *armdataboxedge.MonitoringConfigClientBeginDeleteOptions) (resp azfake.PollerResponder[armdataboxedge.MonitoringConfigClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method MonitoringConfigClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, deviceName string, roleName string, resourceGroupName string, options *armdataboxedge.MonitoringConfigClientGetOptions) (resp azfake.Responder[armdataboxedge.MonitoringConfigClientGetResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method MonitoringConfigClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(deviceName string, roleName string, resourceGroupName string, options *armdataboxedge.MonitoringConfigClientListOptions) (resp azfake.PagerResponder[armdataboxedge.MonitoringConfigClientListResponse])
}

// NewMonitoringConfigServerTransport creates a new instance of MonitoringConfigServerTransport with the provided implementation.
// The returned MonitoringConfigServerTransport instance is connected to an instance of armdataboxedge.MonitoringConfigClient by way of the
// undefined.Transporter field.
func NewMonitoringConfigServerTransport(srv *MonitoringConfigServer) *MonitoringConfigServerTransport {
	return &MonitoringConfigServerTransport{srv: srv}
}

// MonitoringConfigServerTransport connects instances of armdataboxedge.MonitoringConfigClient to instances of MonitoringConfigServer.
// Don't use this type directly, use NewMonitoringConfigServerTransport instead.
type MonitoringConfigServerTransport struct {
	srv                 *MonitoringConfigServer
	beginCreateOrUpdate *azfake.PollerResponder[armdataboxedge.MonitoringConfigClientCreateOrUpdateResponse]
	beginDelete         *azfake.PollerResponder[armdataboxedge.MonitoringConfigClientDeleteResponse]
	newListPager        *azfake.PagerResponder[armdataboxedge.MonitoringConfigClientListResponse]
}

// Do implements the policy.Transporter interface for MonitoringConfigServerTransport.
func (m *MonitoringConfigServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "MonitoringConfigClient.BeginCreateOrUpdate":
		resp, err = m.dispatchBeginCreateOrUpdate(req)
	case "MonitoringConfigClient.BeginDelete":
		resp, err = m.dispatchBeginDelete(req)
	case "MonitoringConfigClient.Get":
		resp, err = m.dispatchGet(req)
	case "MonitoringConfigClient.NewListPager":
		resp, err = m.dispatchNewListPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (m *MonitoringConfigServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if m.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("method BeginCreateOrUpdate not implemented")}
	}
	if m.beginCreateOrUpdate == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/(?P<deviceName>[a-zA-Z0-9-_]+)/roles/(?P<roleName>[a-zA-Z0-9-_]+)/monitoringConfig/default"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armdataboxedge.MonitoringMetricConfiguration](req)
		if err != nil {
			return nil, err
		}
		respr, errRespr := m.srv.BeginCreateOrUpdate(req.Context(), matches[regex.SubexpIndex("deviceName")], matches[regex.SubexpIndex("roleName")], matches[regex.SubexpIndex("resourceGroupName")], body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		m.beginCreateOrUpdate = &respr
	}

	resp, err := server.PollerResponderNext(m.beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(m.beginCreateOrUpdate) {
		m.beginCreateOrUpdate = nil
	}

	return resp, nil
}

func (m *MonitoringConfigServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if m.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("method BeginDelete not implemented")}
	}
	if m.beginDelete == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/(?P<deviceName>[a-zA-Z0-9-_]+)/roles/(?P<roleName>[a-zA-Z0-9-_]+)/monitoringConfig/default"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		respr, errRespr := m.srv.BeginDelete(req.Context(), matches[regex.SubexpIndex("deviceName")], matches[regex.SubexpIndex("roleName")], matches[regex.SubexpIndex("resourceGroupName")], nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		m.beginDelete = &respr
	}

	resp, err := server.PollerResponderNext(m.beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(m.beginDelete) {
		m.beginDelete = nil
	}

	return resp, nil
}

func (m *MonitoringConfigServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if m.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("method Get not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/(?P<deviceName>[a-zA-Z0-9-_]+)/roles/(?P<roleName>[a-zA-Z0-9-_]+)/monitoringConfig/default"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	respr, errRespr := m.srv.Get(req.Context(), matches[regex.SubexpIndex("deviceName")], matches[regex.SubexpIndex("roleName")], matches[regex.SubexpIndex("resourceGroupName")], nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MonitoringMetricConfiguration, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MonitoringConfigServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if m.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListPager not implemented")}
	}
	if m.newListPager == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/(?P<deviceName>[a-zA-Z0-9-_]+)/roles/(?P<roleName>[a-zA-Z0-9-_]+)/monitoringConfig"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := m.srv.NewListPager(matches[regex.SubexpIndex("deviceName")], matches[regex.SubexpIndex("roleName")], matches[regex.SubexpIndex("resourceGroupName")], nil)
		m.newListPager = &resp
		server.PagerResponderInjectNextLinks(m.newListPager, req, func(page *armdataboxedge.MonitoringConfigClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(m.newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(m.newListPager) {
		m.newListPager = nil
	}
	return resp, nil
}
