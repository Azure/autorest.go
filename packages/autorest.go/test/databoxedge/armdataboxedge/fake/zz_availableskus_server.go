//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"armdataboxedge"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
	"regexp"
)

// AvailableSKUsServer is a fake server for instances of the armdataboxedge.AvailableSKUsClient type.
type AvailableSKUsServer struct {
	// NewListPager is the fake for method AvailableSKUsClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(options *armdataboxedge.AvailableSKUsClientListOptions) (resp azfake.PagerResponder[armdataboxedge.AvailableSKUsClientListResponse])
}

// NewAvailableSKUsServerTransport creates a new instance of AvailableSKUsServerTransport with the provided implementation.
// The returned AvailableSKUsServerTransport instance is connected to an instance of armdataboxedge.AvailableSKUsClient by way of the
// undefined.Transporter field.
func NewAvailableSKUsServerTransport(srv *AvailableSKUsServer) *AvailableSKUsServerTransport {
	return &AvailableSKUsServerTransport{srv: srv}
}

// AvailableSKUsServerTransport connects instances of armdataboxedge.AvailableSKUsClient to instances of AvailableSKUsServer.
// Don't use this type directly, use NewAvailableSKUsServerTransport instead.
type AvailableSKUsServerTransport struct {
	srv          *AvailableSKUsServer
	newListPager *azfake.PagerResponder[armdataboxedge.AvailableSKUsClientListResponse]
}

// Do implements the policy.Transporter interface for AvailableSKUsServerTransport.
func (a *AvailableSKUsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "AvailableSKUsClient.NewListPager":
		resp, err = a.dispatchNewListPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (a *AvailableSKUsServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if a.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListPager not implemented")}
	}
	if a.newListPager == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/providers/Microsoft.DataBoxEdge/availableSkus"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := a.srv.NewListPager(nil)
		a.newListPager = &resp
		server.PagerResponderInjectNextLinks(a.newListPager, req, func(page *armdataboxedge.AvailableSKUsClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(a.newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(a.newListPager) {
		a.newListPager = nil
	}
	return resp, nil
}
