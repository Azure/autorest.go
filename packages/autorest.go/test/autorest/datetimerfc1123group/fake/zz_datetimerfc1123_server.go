//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	"generatortests/datetimerfc1123group"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"time"
)

// Datetimerfc1123Server is a fake server for instances of the datetimerfc1123group.Datetimerfc1123Client type.
type Datetimerfc1123Server struct {
	// GetInvalid is the fake for method Datetimerfc1123Client.GetInvalid
	// HTTP status codes to indicate success: http.StatusOK
	GetInvalid func(ctx context.Context, options *datetimerfc1123group.Datetimerfc1123ClientGetInvalidOptions) (resp azfake.Responder[datetimerfc1123group.Datetimerfc1123ClientGetInvalidResponse], errResp azfake.ErrorResponder)

	// GetNull is the fake for method Datetimerfc1123Client.GetNull
	// HTTP status codes to indicate success: http.StatusOK
	GetNull func(ctx context.Context, options *datetimerfc1123group.Datetimerfc1123ClientGetNullOptions) (resp azfake.Responder[datetimerfc1123group.Datetimerfc1123ClientGetNullResponse], errResp azfake.ErrorResponder)

	// GetOverflow is the fake for method Datetimerfc1123Client.GetOverflow
	// HTTP status codes to indicate success: http.StatusOK
	GetOverflow func(ctx context.Context, options *datetimerfc1123group.Datetimerfc1123ClientGetOverflowOptions) (resp azfake.Responder[datetimerfc1123group.Datetimerfc1123ClientGetOverflowResponse], errResp azfake.ErrorResponder)

	// GetUTCLowercaseMaxDateTime is the fake for method Datetimerfc1123Client.GetUTCLowercaseMaxDateTime
	// HTTP status codes to indicate success: http.StatusOK
	GetUTCLowercaseMaxDateTime func(ctx context.Context, options *datetimerfc1123group.Datetimerfc1123ClientGetUTCLowercaseMaxDateTimeOptions) (resp azfake.Responder[datetimerfc1123group.Datetimerfc1123ClientGetUTCLowercaseMaxDateTimeResponse], errResp azfake.ErrorResponder)

	// GetUTCMinDateTime is the fake for method Datetimerfc1123Client.GetUTCMinDateTime
	// HTTP status codes to indicate success: http.StatusOK
	GetUTCMinDateTime func(ctx context.Context, options *datetimerfc1123group.Datetimerfc1123ClientGetUTCMinDateTimeOptions) (resp azfake.Responder[datetimerfc1123group.Datetimerfc1123ClientGetUTCMinDateTimeResponse], errResp azfake.ErrorResponder)

	// GetUTCUppercaseMaxDateTime is the fake for method Datetimerfc1123Client.GetUTCUppercaseMaxDateTime
	// HTTP status codes to indicate success: http.StatusOK
	GetUTCUppercaseMaxDateTime func(ctx context.Context, options *datetimerfc1123group.Datetimerfc1123ClientGetUTCUppercaseMaxDateTimeOptions) (resp azfake.Responder[datetimerfc1123group.Datetimerfc1123ClientGetUTCUppercaseMaxDateTimeResponse], errResp azfake.ErrorResponder)

	// GetUnderflow is the fake for method Datetimerfc1123Client.GetUnderflow
	// HTTP status codes to indicate success: http.StatusOK
	GetUnderflow func(ctx context.Context, options *datetimerfc1123group.Datetimerfc1123ClientGetUnderflowOptions) (resp azfake.Responder[datetimerfc1123group.Datetimerfc1123ClientGetUnderflowResponse], errResp azfake.ErrorResponder)

	// PutUTCMaxDateTime is the fake for method Datetimerfc1123Client.PutUTCMaxDateTime
	// HTTP status codes to indicate success: http.StatusOK
	PutUTCMaxDateTime func(ctx context.Context, datetimeBody time.Time, options *datetimerfc1123group.Datetimerfc1123ClientPutUTCMaxDateTimeOptions) (resp azfake.Responder[datetimerfc1123group.Datetimerfc1123ClientPutUTCMaxDateTimeResponse], errResp azfake.ErrorResponder)

	// PutUTCMinDateTime is the fake for method Datetimerfc1123Client.PutUTCMinDateTime
	// HTTP status codes to indicate success: http.StatusOK
	PutUTCMinDateTime func(ctx context.Context, datetimeBody time.Time, options *datetimerfc1123group.Datetimerfc1123ClientPutUTCMinDateTimeOptions) (resp azfake.Responder[datetimerfc1123group.Datetimerfc1123ClientPutUTCMinDateTimeResponse], errResp azfake.ErrorResponder)
}

// NewDatetimerfc1123ServerTransport creates a new instance of Datetimerfc1123ServerTransport with the provided implementation.
// The returned Datetimerfc1123ServerTransport instance is connected to an instance of datetimerfc1123group.Datetimerfc1123Client by way of the
// undefined.Transporter field.
func NewDatetimerfc1123ServerTransport(srv *Datetimerfc1123Server) *Datetimerfc1123ServerTransport {
	return &Datetimerfc1123ServerTransport{srv: srv}
}

// Datetimerfc1123ServerTransport connects instances of datetimerfc1123group.Datetimerfc1123Client to instances of Datetimerfc1123Server.
// Don't use this type directly, use NewDatetimerfc1123ServerTransport instead.
type Datetimerfc1123ServerTransport struct {
	srv *Datetimerfc1123Server
}

// Do implements the policy.Transporter interface for Datetimerfc1123ServerTransport.
func (d *Datetimerfc1123ServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "Datetimerfc1123Client.GetInvalid":
		resp, err = d.dispatchGetInvalid(req)
	case "Datetimerfc1123Client.GetNull":
		resp, err = d.dispatchGetNull(req)
	case "Datetimerfc1123Client.GetOverflow":
		resp, err = d.dispatchGetOverflow(req)
	case "Datetimerfc1123Client.GetUTCLowercaseMaxDateTime":
		resp, err = d.dispatchGetUTCLowercaseMaxDateTime(req)
	case "Datetimerfc1123Client.GetUTCMinDateTime":
		resp, err = d.dispatchGetUTCMinDateTime(req)
	case "Datetimerfc1123Client.GetUTCUppercaseMaxDateTime":
		resp, err = d.dispatchGetUTCUppercaseMaxDateTime(req)
	case "Datetimerfc1123Client.GetUnderflow":
		resp, err = d.dispatchGetUnderflow(req)
	case "Datetimerfc1123Client.PutUTCMaxDateTime":
		resp, err = d.dispatchPutUTCMaxDateTime(req)
	case "Datetimerfc1123Client.PutUTCMinDateTime":
		resp, err = d.dispatchPutUTCMinDateTime(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (d *Datetimerfc1123ServerTransport) dispatchGetInvalid(req *http.Request) (*http.Response, error) {
	if d.srv.GetInvalid == nil {
		return nil, &nonRetriableError{errors.New("method GetInvalid not implemented")}
	}
	respr, errRespr := d.srv.GetInvalid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, (*timeRFC1123)(server.GetResponse(respr).Value), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *Datetimerfc1123ServerTransport) dispatchGetNull(req *http.Request) (*http.Response, error) {
	if d.srv.GetNull == nil {
		return nil, &nonRetriableError{errors.New("method GetNull not implemented")}
	}
	respr, errRespr := d.srv.GetNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, (*timeRFC1123)(server.GetResponse(respr).Value), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *Datetimerfc1123ServerTransport) dispatchGetOverflow(req *http.Request) (*http.Response, error) {
	if d.srv.GetOverflow == nil {
		return nil, &nonRetriableError{errors.New("method GetOverflow not implemented")}
	}
	respr, errRespr := d.srv.GetOverflow(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, (*timeRFC1123)(server.GetResponse(respr).Value), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *Datetimerfc1123ServerTransport) dispatchGetUTCLowercaseMaxDateTime(req *http.Request) (*http.Response, error) {
	if d.srv.GetUTCLowercaseMaxDateTime == nil {
		return nil, &nonRetriableError{errors.New("method GetUTCLowercaseMaxDateTime not implemented")}
	}
	respr, errRespr := d.srv.GetUTCLowercaseMaxDateTime(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, (*timeRFC1123)(server.GetResponse(respr).Value), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *Datetimerfc1123ServerTransport) dispatchGetUTCMinDateTime(req *http.Request) (*http.Response, error) {
	if d.srv.GetUTCMinDateTime == nil {
		return nil, &nonRetriableError{errors.New("method GetUTCMinDateTime not implemented")}
	}
	respr, errRespr := d.srv.GetUTCMinDateTime(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, (*timeRFC1123)(server.GetResponse(respr).Value), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *Datetimerfc1123ServerTransport) dispatchGetUTCUppercaseMaxDateTime(req *http.Request) (*http.Response, error) {
	if d.srv.GetUTCUppercaseMaxDateTime == nil {
		return nil, &nonRetriableError{errors.New("method GetUTCUppercaseMaxDateTime not implemented")}
	}
	respr, errRespr := d.srv.GetUTCUppercaseMaxDateTime(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, (*timeRFC1123)(server.GetResponse(respr).Value), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *Datetimerfc1123ServerTransport) dispatchGetUnderflow(req *http.Request) (*http.Response, error) {
	if d.srv.GetUnderflow == nil {
		return nil, &nonRetriableError{errors.New("method GetUnderflow not implemented")}
	}
	respr, errRespr := d.srv.GetUnderflow(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, (*timeRFC1123)(server.GetResponse(respr).Value), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *Datetimerfc1123ServerTransport) dispatchPutUTCMaxDateTime(req *http.Request) (*http.Response, error) {
	if d.srv.PutUTCMaxDateTime == nil {
		return nil, &nonRetriableError{errors.New("method PutUTCMaxDateTime not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[timeRFC1123](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.PutUTCMaxDateTime(req.Context(), time.Time(body), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *Datetimerfc1123ServerTransport) dispatchPutUTCMinDateTime(req *http.Request) (*http.Response, error) {
	if d.srv.PutUTCMinDateTime == nil {
		return nil, &nonRetriableError{errors.New("method PutUTCMinDateTime not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[timeRFC1123](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.PutUTCMinDateTime(req.Context(), time.Time(body), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
