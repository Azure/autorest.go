// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	"generatortests/booleangroup"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// BoolServer is a fake server for instances of the booleangroup.BoolClient type.
type BoolServer struct {
	// GetFalse is the fake for method BoolClient.GetFalse
	// HTTP status codes to indicate success: http.StatusOK
	GetFalse func(ctx context.Context, options *booleangroup.BoolClientGetFalseOptions) (resp azfake.Responder[booleangroup.BoolClientGetFalseResponse], errResp azfake.ErrorResponder)

	// GetInvalid is the fake for method BoolClient.GetInvalid
	// HTTP status codes to indicate success: http.StatusOK
	GetInvalid func(ctx context.Context, options *booleangroup.BoolClientGetInvalidOptions) (resp azfake.Responder[booleangroup.BoolClientGetInvalidResponse], errResp azfake.ErrorResponder)

	// GetNull is the fake for method BoolClient.GetNull
	// HTTP status codes to indicate success: http.StatusOK
	GetNull func(ctx context.Context, options *booleangroup.BoolClientGetNullOptions) (resp azfake.Responder[booleangroup.BoolClientGetNullResponse], errResp azfake.ErrorResponder)

	// GetTrue is the fake for method BoolClient.GetTrue
	// HTTP status codes to indicate success: http.StatusOK
	GetTrue func(ctx context.Context, options *booleangroup.BoolClientGetTrueOptions) (resp azfake.Responder[booleangroup.BoolClientGetTrueResponse], errResp azfake.ErrorResponder)

	// PutFalse is the fake for method BoolClient.PutFalse
	// HTTP status codes to indicate success: http.StatusOK
	PutFalse func(ctx context.Context, options *booleangroup.BoolClientPutFalseOptions) (resp azfake.Responder[booleangroup.BoolClientPutFalseResponse], errResp azfake.ErrorResponder)

	// PutTrue is the fake for method BoolClient.PutTrue
	// HTTP status codes to indicate success: http.StatusOK
	PutTrue func(ctx context.Context, options *booleangroup.BoolClientPutTrueOptions) (resp azfake.Responder[booleangroup.BoolClientPutTrueResponse], errResp azfake.ErrorResponder)
}

// NewBoolServerTransport creates a new instance of BoolServerTransport with the provided implementation.
// The returned BoolServerTransport instance is connected to an instance of booleangroup.BoolClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewBoolServerTransport(srv *BoolServer) *BoolServerTransport {
	return &BoolServerTransport{srv: srv}
}

// BoolServerTransport connects instances of booleangroup.BoolClient to instances of BoolServer.
// Don't use this type directly, use NewBoolServerTransport instead.
type BoolServerTransport struct {
	srv *BoolServer
}

// Do implements the policy.Transporter interface for BoolServerTransport.
func (b *BoolServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "BoolClient.GetFalse":
		resp, err = b.dispatchGetFalse(req)
	case "BoolClient.GetInvalid":
		resp, err = b.dispatchGetInvalid(req)
	case "BoolClient.GetNull":
		resp, err = b.dispatchGetNull(req)
	case "BoolClient.GetTrue":
		resp, err = b.dispatchGetTrue(req)
	case "BoolClient.PutFalse":
		resp, err = b.dispatchPutFalse(req)
	case "BoolClient.PutTrue":
		resp, err = b.dispatchPutTrue(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (b *BoolServerTransport) dispatchGetFalse(req *http.Request) (*http.Response, error) {
	if b.srv.GetFalse == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetFalse not implemented")}
	}
	respr, errRespr := b.srv.GetFalse(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (b *BoolServerTransport) dispatchGetInvalid(req *http.Request) (*http.Response, error) {
	if b.srv.GetInvalid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetInvalid not implemented")}
	}
	respr, errRespr := b.srv.GetInvalid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (b *BoolServerTransport) dispatchGetNull(req *http.Request) (*http.Response, error) {
	if b.srv.GetNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetNull not implemented")}
	}
	respr, errRespr := b.srv.GetNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (b *BoolServerTransport) dispatchGetTrue(req *http.Request) (*http.Response, error) {
	if b.srv.GetTrue == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetTrue not implemented")}
	}
	respr, errRespr := b.srv.GetTrue(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (b *BoolServerTransport) dispatchPutFalse(req *http.Request) (*http.Response, error) {
	if b.srv.PutFalse == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutFalse not implemented")}
	}
	respr, errRespr := b.srv.PutFalse(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (b *BoolServerTransport) dispatchPutTrue(req *http.Request) (*http.Response, error) {
	if b.srv.PutTrue == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutTrue not implemented")}
	}
	respr, errRespr := b.srv.PutTrue(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
