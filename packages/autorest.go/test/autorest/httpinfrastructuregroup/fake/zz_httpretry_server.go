// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	"generatortests/httpinfrastructuregroup"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// HTTPRetryServer is a fake server for instances of the httpinfrastructuregroup.HTTPRetryClient type.
type HTTPRetryServer struct {
	// Delete503 is the fake for method HTTPRetryClient.Delete503
	// HTTP status codes to indicate success: http.StatusOK
	Delete503 func(ctx context.Context, options *httpinfrastructuregroup.HTTPRetryClientDelete503Options) (resp azfake.Responder[httpinfrastructuregroup.HTTPRetryClientDelete503Response], errResp azfake.ErrorResponder)

	// Get502 is the fake for method HTTPRetryClient.Get502
	// HTTP status codes to indicate success: http.StatusOK
	Get502 func(ctx context.Context, options *httpinfrastructuregroup.HTTPRetryClientGet502Options) (resp azfake.Responder[httpinfrastructuregroup.HTTPRetryClientGet502Response], errResp azfake.ErrorResponder)

	// Head408 is the fake for method HTTPRetryClient.Head408
	// HTTP status codes to indicate success: http.StatusOK
	Head408 func(ctx context.Context, options *httpinfrastructuregroup.HTTPRetryClientHead408Options) (resp azfake.Responder[httpinfrastructuregroup.HTTPRetryClientHead408Response], errResp azfake.ErrorResponder)

	// Options502 is the fake for method HTTPRetryClient.Options502
	// HTTP status codes to indicate success: http.StatusOK
	Options502 func(ctx context.Context, options *httpinfrastructuregroup.HTTPRetryClientOptions502Options) (resp azfake.Responder[httpinfrastructuregroup.HTTPRetryClientOptions502Response], errResp azfake.ErrorResponder)

	// Patch500 is the fake for method HTTPRetryClient.Patch500
	// HTTP status codes to indicate success: http.StatusOK
	Patch500 func(ctx context.Context, options *httpinfrastructuregroup.HTTPRetryClientPatch500Options) (resp azfake.Responder[httpinfrastructuregroup.HTTPRetryClientPatch500Response], errResp azfake.ErrorResponder)

	// Patch504 is the fake for method HTTPRetryClient.Patch504
	// HTTP status codes to indicate success: http.StatusOK
	Patch504 func(ctx context.Context, options *httpinfrastructuregroup.HTTPRetryClientPatch504Options) (resp azfake.Responder[httpinfrastructuregroup.HTTPRetryClientPatch504Response], errResp azfake.ErrorResponder)

	// Post503 is the fake for method HTTPRetryClient.Post503
	// HTTP status codes to indicate success: http.StatusOK
	Post503 func(ctx context.Context, options *httpinfrastructuregroup.HTTPRetryClientPost503Options) (resp azfake.Responder[httpinfrastructuregroup.HTTPRetryClientPost503Response], errResp azfake.ErrorResponder)

	// Put500 is the fake for method HTTPRetryClient.Put500
	// HTTP status codes to indicate success: http.StatusOK
	Put500 func(ctx context.Context, options *httpinfrastructuregroup.HTTPRetryClientPut500Options) (resp azfake.Responder[httpinfrastructuregroup.HTTPRetryClientPut500Response], errResp azfake.ErrorResponder)

	// Put504 is the fake for method HTTPRetryClient.Put504
	// HTTP status codes to indicate success: http.StatusOK
	Put504 func(ctx context.Context, options *httpinfrastructuregroup.HTTPRetryClientPut504Options) (resp azfake.Responder[httpinfrastructuregroup.HTTPRetryClientPut504Response], errResp azfake.ErrorResponder)
}

// NewHTTPRetryServerTransport creates a new instance of HTTPRetryServerTransport with the provided implementation.
// The returned HTTPRetryServerTransport instance is connected to an instance of httpinfrastructuregroup.HTTPRetryClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewHTTPRetryServerTransport(srv *HTTPRetryServer) *HTTPRetryServerTransport {
	return &HTTPRetryServerTransport{srv: srv}
}

// HTTPRetryServerTransport connects instances of httpinfrastructuregroup.HTTPRetryClient to instances of HTTPRetryServer.
// Don't use this type directly, use NewHTTPRetryServerTransport instead.
type HTTPRetryServerTransport struct {
	srv *HTTPRetryServer
}

// Do implements the policy.Transporter interface for HTTPRetryServerTransport.
func (h *HTTPRetryServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "HTTPRetryClient.Delete503":
		resp, err = h.dispatchDelete503(req)
	case "HTTPRetryClient.Get502":
		resp, err = h.dispatchGet502(req)
	case "HTTPRetryClient.Head408":
		resp, err = h.dispatchHead408(req)
	case "HTTPRetryClient.Options502":
		resp, err = h.dispatchOptions502(req)
	case "HTTPRetryClient.Patch500":
		resp, err = h.dispatchPatch500(req)
	case "HTTPRetryClient.Patch504":
		resp, err = h.dispatchPatch504(req)
	case "HTTPRetryClient.Post503":
		resp, err = h.dispatchPost503(req)
	case "HTTPRetryClient.Put500":
		resp, err = h.dispatchPut500(req)
	case "HTTPRetryClient.Put504":
		resp, err = h.dispatchPut504(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (h *HTTPRetryServerTransport) dispatchDelete503(req *http.Request) (*http.Response, error) {
	if h.srv.Delete503 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete503 not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[bool](req)
	if err != nil {
		return nil, err
	}
	var options *httpinfrastructuregroup.HTTPRetryClientDelete503Options
	if !reflect.ValueOf(body).IsZero() {
		options = &httpinfrastructuregroup.HTTPRetryClientDelete503Options{
			BooleanValue: &body,
		}
	}
	respr, errRespr := h.srv.Delete503(req.Context(), options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HTTPRetryServerTransport) dispatchGet502(req *http.Request) (*http.Response, error) {
	if h.srv.Get502 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get502 not implemented")}
	}
	respr, errRespr := h.srv.Get502(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HTTPRetryServerTransport) dispatchHead408(req *http.Request) (*http.Response, error) {
	if h.srv.Head408 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Head408 not implemented")}
	}
	respr, errRespr := h.srv.Head408(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HTTPRetryServerTransport) dispatchOptions502(req *http.Request) (*http.Response, error) {
	if h.srv.Options502 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Options502 not implemented")}
	}
	respr, errRespr := h.srv.Options502(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HTTPRetryServerTransport) dispatchPatch500(req *http.Request) (*http.Response, error) {
	if h.srv.Patch500 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Patch500 not implemented")}
	}
	respr, errRespr := h.srv.Patch500(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HTTPRetryServerTransport) dispatchPatch504(req *http.Request) (*http.Response, error) {
	if h.srv.Patch504 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Patch504 not implemented")}
	}
	respr, errRespr := h.srv.Patch504(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HTTPRetryServerTransport) dispatchPost503(req *http.Request) (*http.Response, error) {
	if h.srv.Post503 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Post503 not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[bool](req)
	if err != nil {
		return nil, err
	}
	var options *httpinfrastructuregroup.HTTPRetryClientPost503Options
	if !reflect.ValueOf(body).IsZero() {
		options = &httpinfrastructuregroup.HTTPRetryClientPost503Options{
			BooleanValue: &body,
		}
	}
	respr, errRespr := h.srv.Post503(req.Context(), options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HTTPRetryServerTransport) dispatchPut500(req *http.Request) (*http.Response, error) {
	if h.srv.Put500 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Put500 not implemented")}
	}
	respr, errRespr := h.srv.Put500(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HTTPRetryServerTransport) dispatchPut504(req *http.Request) (*http.Response, error) {
	if h.srv.Put504 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Put504 not implemented")}
	}
	respr, errRespr := h.srv.Put504(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
