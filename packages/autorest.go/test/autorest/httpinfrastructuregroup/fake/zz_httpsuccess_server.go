//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	"generatortests/httpinfrastructuregroup"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// HTTPSuccessServer is a fake server for instances of the httpinfrastructuregroup.HTTPSuccessClient type.
type HTTPSuccessServer struct {
	// Delete200 is the fake for method HTTPSuccessClient.Delete200
	// HTTP status codes to indicate success: http.StatusOK
	Delete200 func(ctx context.Context, options *httpinfrastructuregroup.HTTPSuccessClientDelete200Options) (resp azfake.Responder[httpinfrastructuregroup.HTTPSuccessClientDelete200Response], errResp azfake.ErrorResponder)

	// Delete202 is the fake for method HTTPSuccessClient.Delete202
	// HTTP status codes to indicate success: http.StatusAccepted
	Delete202 func(ctx context.Context, options *httpinfrastructuregroup.HTTPSuccessClientDelete202Options) (resp azfake.Responder[httpinfrastructuregroup.HTTPSuccessClientDelete202Response], errResp azfake.ErrorResponder)

	// Delete204 is the fake for method HTTPSuccessClient.Delete204
	// HTTP status codes to indicate success: http.StatusNoContent
	Delete204 func(ctx context.Context, options *httpinfrastructuregroup.HTTPSuccessClientDelete204Options) (resp azfake.Responder[httpinfrastructuregroup.HTTPSuccessClientDelete204Response], errResp azfake.ErrorResponder)

	// Get200 is the fake for method HTTPSuccessClient.Get200
	// HTTP status codes to indicate success: http.StatusOK
	Get200 func(ctx context.Context, options *httpinfrastructuregroup.HTTPSuccessClientGet200Options) (resp azfake.Responder[httpinfrastructuregroup.HTTPSuccessClientGet200Response], errResp azfake.ErrorResponder)

	// Head200 is the fake for method HTTPSuccessClient.Head200
	// HTTP status codes to indicate success: http.StatusOK
	Head200 func(ctx context.Context, options *httpinfrastructuregroup.HTTPSuccessClientHead200Options) (resp azfake.Responder[httpinfrastructuregroup.HTTPSuccessClientHead200Response], errResp azfake.ErrorResponder)

	// Head204 is the fake for method HTTPSuccessClient.Head204
	// HTTP status codes to indicate success: http.StatusNoContent
	Head204 func(ctx context.Context, options *httpinfrastructuregroup.HTTPSuccessClientHead204Options) (resp azfake.Responder[httpinfrastructuregroup.HTTPSuccessClientHead204Response], errResp azfake.ErrorResponder)

	// Head404 is the fake for method HTTPSuccessClient.Head404
	// HTTP status codes to indicate success: http.StatusNoContent, http.StatusNotFound
	Head404 func(ctx context.Context, options *httpinfrastructuregroup.HTTPSuccessClientHead404Options) (resp azfake.Responder[httpinfrastructuregroup.HTTPSuccessClientHead404Response], errResp azfake.ErrorResponder)

	// Options200 is the fake for method HTTPSuccessClient.Options200
	// HTTP status codes to indicate success: http.StatusOK
	Options200 func(ctx context.Context, options *httpinfrastructuregroup.HTTPSuccessClientOptions200Options) (resp azfake.Responder[httpinfrastructuregroup.HTTPSuccessClientOptions200Response], errResp azfake.ErrorResponder)

	// Patch200 is the fake for method HTTPSuccessClient.Patch200
	// HTTP status codes to indicate success: http.StatusOK
	Patch200 func(ctx context.Context, options *httpinfrastructuregroup.HTTPSuccessClientPatch200Options) (resp azfake.Responder[httpinfrastructuregroup.HTTPSuccessClientPatch200Response], errResp azfake.ErrorResponder)

	// Patch202 is the fake for method HTTPSuccessClient.Patch202
	// HTTP status codes to indicate success: http.StatusAccepted
	Patch202 func(ctx context.Context, options *httpinfrastructuregroup.HTTPSuccessClientPatch202Options) (resp azfake.Responder[httpinfrastructuregroup.HTTPSuccessClientPatch202Response], errResp azfake.ErrorResponder)

	// Patch204 is the fake for method HTTPSuccessClient.Patch204
	// HTTP status codes to indicate success: http.StatusNoContent
	Patch204 func(ctx context.Context, options *httpinfrastructuregroup.HTTPSuccessClientPatch204Options) (resp azfake.Responder[httpinfrastructuregroup.HTTPSuccessClientPatch204Response], errResp azfake.ErrorResponder)

	// Post200 is the fake for method HTTPSuccessClient.Post200
	// HTTP status codes to indicate success: http.StatusOK
	Post200 func(ctx context.Context, options *httpinfrastructuregroup.HTTPSuccessClientPost200Options) (resp azfake.Responder[httpinfrastructuregroup.HTTPSuccessClientPost200Response], errResp azfake.ErrorResponder)

	// Post201 is the fake for method HTTPSuccessClient.Post201
	// HTTP status codes to indicate success: http.StatusCreated
	Post201 func(ctx context.Context, options *httpinfrastructuregroup.HTTPSuccessClientPost201Options) (resp azfake.Responder[httpinfrastructuregroup.HTTPSuccessClientPost201Response], errResp azfake.ErrorResponder)

	// Post202 is the fake for method HTTPSuccessClient.Post202
	// HTTP status codes to indicate success: http.StatusAccepted
	Post202 func(ctx context.Context, options *httpinfrastructuregroup.HTTPSuccessClientPost202Options) (resp azfake.Responder[httpinfrastructuregroup.HTTPSuccessClientPost202Response], errResp azfake.ErrorResponder)

	// Post204 is the fake for method HTTPSuccessClient.Post204
	// HTTP status codes to indicate success: http.StatusNoContent
	Post204 func(ctx context.Context, options *httpinfrastructuregroup.HTTPSuccessClientPost204Options) (resp azfake.Responder[httpinfrastructuregroup.HTTPSuccessClientPost204Response], errResp azfake.ErrorResponder)

	// Put200 is the fake for method HTTPSuccessClient.Put200
	// HTTP status codes to indicate success: http.StatusOK
	Put200 func(ctx context.Context, options *httpinfrastructuregroup.HTTPSuccessClientPut200Options) (resp azfake.Responder[httpinfrastructuregroup.HTTPSuccessClientPut200Response], errResp azfake.ErrorResponder)

	// Put201 is the fake for method HTTPSuccessClient.Put201
	// HTTP status codes to indicate success: http.StatusCreated
	Put201 func(ctx context.Context, options *httpinfrastructuregroup.HTTPSuccessClientPut201Options) (resp azfake.Responder[httpinfrastructuregroup.HTTPSuccessClientPut201Response], errResp azfake.ErrorResponder)

	// Put202 is the fake for method HTTPSuccessClient.Put202
	// HTTP status codes to indicate success: http.StatusAccepted
	Put202 func(ctx context.Context, options *httpinfrastructuregroup.HTTPSuccessClientPut202Options) (resp azfake.Responder[httpinfrastructuregroup.HTTPSuccessClientPut202Response], errResp azfake.ErrorResponder)

	// Put204 is the fake for method HTTPSuccessClient.Put204
	// HTTP status codes to indicate success: http.StatusNoContent
	Put204 func(ctx context.Context, options *httpinfrastructuregroup.HTTPSuccessClientPut204Options) (resp azfake.Responder[httpinfrastructuregroup.HTTPSuccessClientPut204Response], errResp azfake.ErrorResponder)
}

// NewHTTPSuccessServerTransport creates a new instance of HTTPSuccessServerTransport with the provided implementation.
// The returned HTTPSuccessServerTransport instance is connected to an instance of httpinfrastructuregroup.HTTPSuccessClient by way of the
// undefined.Transporter field.
func NewHTTPSuccessServerTransport(srv *HTTPSuccessServer) *HTTPSuccessServerTransport {
	return &HTTPSuccessServerTransport{srv: srv}
}

// HTTPSuccessServerTransport connects instances of httpinfrastructuregroup.HTTPSuccessClient to instances of HTTPSuccessServer.
// Don't use this type directly, use NewHTTPSuccessServerTransport instead.
type HTTPSuccessServerTransport struct {
	srv *HTTPSuccessServer
}

// Do implements the policy.Transporter interface for HTTPSuccessServerTransport.
func (h *HTTPSuccessServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "HTTPSuccessClient.Delete200":
		resp, err = h.dispatchDelete200(req)
	case "HTTPSuccessClient.Delete202":
		resp, err = h.dispatchDelete202(req)
	case "HTTPSuccessClient.Delete204":
		resp, err = h.dispatchDelete204(req)
	case "HTTPSuccessClient.Get200":
		resp, err = h.dispatchGet200(req)
	case "HTTPSuccessClient.Head200":
		resp, err = h.dispatchHead200(req)
	case "HTTPSuccessClient.Head204":
		resp, err = h.dispatchHead204(req)
	case "HTTPSuccessClient.Head404":
		resp, err = h.dispatchHead404(req)
	case "HTTPSuccessClient.Options200":
		resp, err = h.dispatchOptions200(req)
	case "HTTPSuccessClient.Patch200":
		resp, err = h.dispatchPatch200(req)
	case "HTTPSuccessClient.Patch202":
		resp, err = h.dispatchPatch202(req)
	case "HTTPSuccessClient.Patch204":
		resp, err = h.dispatchPatch204(req)
	case "HTTPSuccessClient.Post200":
		resp, err = h.dispatchPost200(req)
	case "HTTPSuccessClient.Post201":
		resp, err = h.dispatchPost201(req)
	case "HTTPSuccessClient.Post202":
		resp, err = h.dispatchPost202(req)
	case "HTTPSuccessClient.Post204":
		resp, err = h.dispatchPost204(req)
	case "HTTPSuccessClient.Put200":
		resp, err = h.dispatchPut200(req)
	case "HTTPSuccessClient.Put201":
		resp, err = h.dispatchPut201(req)
	case "HTTPSuccessClient.Put202":
		resp, err = h.dispatchPut202(req)
	case "HTTPSuccessClient.Put204":
		resp, err = h.dispatchPut204(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (h *HTTPSuccessServerTransport) dispatchDelete200(req *http.Request) (*http.Response, error) {
	if h.srv.Delete200 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete200 not implemented")}
	}
	respr, errRespr := h.srv.Delete200(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HTTPSuccessServerTransport) dispatchDelete202(req *http.Request) (*http.Response, error) {
	if h.srv.Delete202 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete202 not implemented")}
	}
	respr, errRespr := h.srv.Delete202(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusAccepted}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HTTPSuccessServerTransport) dispatchDelete204(req *http.Request) (*http.Response, error) {
	if h.srv.Delete204 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete204 not implemented")}
	}
	respr, errRespr := h.srv.Delete204(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HTTPSuccessServerTransport) dispatchGet200(req *http.Request) (*http.Response, error) {
	if h.srv.Get200 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get200 not implemented")}
	}
	respr, errRespr := h.srv.Get200(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HTTPSuccessServerTransport) dispatchHead200(req *http.Request) (*http.Response, error) {
	if h.srv.Head200 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Head200 not implemented")}
	}
	respr, errRespr := h.srv.Head200(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HTTPSuccessServerTransport) dispatchHead204(req *http.Request) (*http.Response, error) {
	if h.srv.Head204 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Head204 not implemented")}
	}
	respr, errRespr := h.srv.Head204(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HTTPSuccessServerTransport) dispatchHead404(req *http.Request) (*http.Response, error) {
	if h.srv.Head404 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Head404 not implemented")}
	}
	respr, errRespr := h.srv.Head404(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent, http.StatusNotFound}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent, http.StatusNotFound", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HTTPSuccessServerTransport) dispatchOptions200(req *http.Request) (*http.Response, error) {
	if h.srv.Options200 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Options200 not implemented")}
	}
	respr, errRespr := h.srv.Options200(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HTTPSuccessServerTransport) dispatchPatch200(req *http.Request) (*http.Response, error) {
	if h.srv.Patch200 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Patch200 not implemented")}
	}
	respr, errRespr := h.srv.Patch200(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HTTPSuccessServerTransport) dispatchPatch202(req *http.Request) (*http.Response, error) {
	if h.srv.Patch202 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Patch202 not implemented")}
	}
	respr, errRespr := h.srv.Patch202(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusAccepted}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HTTPSuccessServerTransport) dispatchPatch204(req *http.Request) (*http.Response, error) {
	if h.srv.Patch204 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Patch204 not implemented")}
	}
	respr, errRespr := h.srv.Patch204(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HTTPSuccessServerTransport) dispatchPost200(req *http.Request) (*http.Response, error) {
	if h.srv.Post200 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Post200 not implemented")}
	}
	respr, errRespr := h.srv.Post200(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HTTPSuccessServerTransport) dispatchPost201(req *http.Request) (*http.Response, error) {
	if h.srv.Post201 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Post201 not implemented")}
	}
	respr, errRespr := h.srv.Post201(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HTTPSuccessServerTransport) dispatchPost202(req *http.Request) (*http.Response, error) {
	if h.srv.Post202 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Post202 not implemented")}
	}
	respr, errRespr := h.srv.Post202(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusAccepted}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HTTPSuccessServerTransport) dispatchPost204(req *http.Request) (*http.Response, error) {
	if h.srv.Post204 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Post204 not implemented")}
	}
	respr, errRespr := h.srv.Post204(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HTTPSuccessServerTransport) dispatchPut200(req *http.Request) (*http.Response, error) {
	if h.srv.Put200 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Put200 not implemented")}
	}
	respr, errRespr := h.srv.Put200(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HTTPSuccessServerTransport) dispatchPut201(req *http.Request) (*http.Response, error) {
	if h.srv.Put201 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Put201 not implemented")}
	}
	respr, errRespr := h.srv.Put201(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HTTPSuccessServerTransport) dispatchPut202(req *http.Request) (*http.Response, error) {
	if h.srv.Put202 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Put202 not implemented")}
	}
	respr, errRespr := h.srv.Put202(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusAccepted}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HTTPSuccessServerTransport) dispatchPut204(req *http.Request) (*http.Response, error) {
	if h.srv.Put204 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Put204 not implemented")}
	}
	respr, errRespr := h.srv.Put204(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
