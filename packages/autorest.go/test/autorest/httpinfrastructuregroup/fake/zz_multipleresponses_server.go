//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	"generatortests/httpinfrastructuregroup"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// MultipleResponsesServer is a fake server for instances of the httpinfrastructuregroup.MultipleResponsesClient type.
type MultipleResponsesServer struct {
	// Get200Model201ModelDefaultError200Valid is the fake for method MultipleResponsesClient.Get200Model201ModelDefaultError200Valid
	// HTTP status codes to indicate success:
	//   - http.StatusOK (returns httpinfrastructuregroup.MyException)
	//   - http.StatusCreated (returns httpinfrastructuregroup.B)
	Get200Model201ModelDefaultError200Valid func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGet200Model201ModelDefaultError200ValidOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGet200Model201ModelDefaultError200ValidResponse], errResp azfake.ErrorResponder)

	// Get200Model201ModelDefaultError201Valid is the fake for method MultipleResponsesClient.Get200Model201ModelDefaultError201Valid
	// HTTP status codes to indicate success:
	//   - http.StatusOK (returns httpinfrastructuregroup.MyException)
	//   - http.StatusCreated (returns httpinfrastructuregroup.B)
	Get200Model201ModelDefaultError201Valid func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGet200Model201ModelDefaultError201ValidOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGet200Model201ModelDefaultError201ValidResponse], errResp azfake.ErrorResponder)

	// Get200Model201ModelDefaultError400Valid is the fake for method MultipleResponsesClient.Get200Model201ModelDefaultError400Valid
	// HTTP status codes to indicate success:
	//   - http.StatusOK (returns httpinfrastructuregroup.MyException)
	//   - http.StatusCreated (returns httpinfrastructuregroup.B)
	Get200Model201ModelDefaultError400Valid func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGet200Model201ModelDefaultError400ValidOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGet200Model201ModelDefaultError400ValidResponse], errResp azfake.ErrorResponder)

	// Get200Model204NoModelDefaultError200Valid is the fake for method MultipleResponsesClient.Get200Model204NoModelDefaultError200Valid
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Get200Model204NoModelDefaultError200Valid func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGet200Model204NoModelDefaultError200ValidOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGet200Model204NoModelDefaultError200ValidResponse], errResp azfake.ErrorResponder)

	// Get200Model204NoModelDefaultError201Invalid is the fake for method MultipleResponsesClient.Get200Model204NoModelDefaultError201Invalid
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Get200Model204NoModelDefaultError201Invalid func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGet200Model204NoModelDefaultError201InvalidOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGet200Model204NoModelDefaultError201InvalidResponse], errResp azfake.ErrorResponder)

	// Get200Model204NoModelDefaultError202None is the fake for method MultipleResponsesClient.Get200Model204NoModelDefaultError202None
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Get200Model204NoModelDefaultError202None func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGet200Model204NoModelDefaultError202NoneOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGet200Model204NoModelDefaultError202NoneResponse], errResp azfake.ErrorResponder)

	// Get200Model204NoModelDefaultError204Valid is the fake for method MultipleResponsesClient.Get200Model204NoModelDefaultError204Valid
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Get200Model204NoModelDefaultError204Valid func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGet200Model204NoModelDefaultError204ValidOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGet200Model204NoModelDefaultError204ValidResponse], errResp azfake.ErrorResponder)

	// Get200Model204NoModelDefaultError400Valid is the fake for method MultipleResponsesClient.Get200Model204NoModelDefaultError400Valid
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Get200Model204NoModelDefaultError400Valid func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGet200Model204NoModelDefaultError400ValidOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGet200Model204NoModelDefaultError400ValidResponse], errResp azfake.ErrorResponder)

	// Get200ModelA200Invalid is the fake for method MultipleResponsesClient.Get200ModelA200Invalid
	// HTTP status codes to indicate success: http.StatusOK
	Get200ModelA200Invalid func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGet200ModelA200InvalidOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGet200ModelA200InvalidResponse], errResp azfake.ErrorResponder)

	// Get200ModelA200None is the fake for method MultipleResponsesClient.Get200ModelA200None
	// HTTP status codes to indicate success: http.StatusOK
	Get200ModelA200None func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGet200ModelA200NoneOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGet200ModelA200NoneResponse], errResp azfake.ErrorResponder)

	// Get200ModelA200Valid is the fake for method MultipleResponsesClient.Get200ModelA200Valid
	// HTTP status codes to indicate success: http.StatusOK
	Get200ModelA200Valid func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGet200ModelA200ValidOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGet200ModelA200ValidResponse], errResp azfake.ErrorResponder)

	// Get200ModelA201ModelC404ModelDDefaultError200Valid is the fake for method MultipleResponsesClient.Get200ModelA201ModelC404ModelDDefaultError200Valid
	// HTTP status codes to indicate success:
	//   - http.StatusOK (returns httpinfrastructuregroup.MyException)
	//   - http.StatusCreated (returns httpinfrastructuregroup.C)
	//   - http.StatusNotFound (returns httpinfrastructuregroup.D)
	Get200ModelA201ModelC404ModelDDefaultError200Valid func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGet200ModelA201ModelC404ModelDDefaultError200ValidOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGet200ModelA201ModelC404ModelDDefaultError200ValidResponse], errResp azfake.ErrorResponder)

	// Get200ModelA201ModelC404ModelDDefaultError201Valid is the fake for method MultipleResponsesClient.Get200ModelA201ModelC404ModelDDefaultError201Valid
	// HTTP status codes to indicate success:
	//   - http.StatusOK (returns httpinfrastructuregroup.MyException)
	//   - http.StatusCreated (returns httpinfrastructuregroup.C)
	//   - http.StatusNotFound (returns httpinfrastructuregroup.D)
	Get200ModelA201ModelC404ModelDDefaultError201Valid func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGet200ModelA201ModelC404ModelDDefaultError201ValidOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGet200ModelA201ModelC404ModelDDefaultError201ValidResponse], errResp azfake.ErrorResponder)

	// Get200ModelA201ModelC404ModelDDefaultError400Valid is the fake for method MultipleResponsesClient.Get200ModelA201ModelC404ModelDDefaultError400Valid
	// HTTP status codes to indicate success:
	//   - http.StatusOK (returns httpinfrastructuregroup.MyException)
	//   - http.StatusCreated (returns httpinfrastructuregroup.C)
	//   - http.StatusNotFound (returns httpinfrastructuregroup.D)
	Get200ModelA201ModelC404ModelDDefaultError400Valid func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGet200ModelA201ModelC404ModelDDefaultError400ValidOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGet200ModelA201ModelC404ModelDDefaultError400ValidResponse], errResp azfake.ErrorResponder)

	// Get200ModelA201ModelC404ModelDDefaultError404Valid is the fake for method MultipleResponsesClient.Get200ModelA201ModelC404ModelDDefaultError404Valid
	// HTTP status codes to indicate success:
	//   - http.StatusOK (returns httpinfrastructuregroup.MyException)
	//   - http.StatusCreated (returns httpinfrastructuregroup.C)
	//   - http.StatusNotFound (returns httpinfrastructuregroup.D)
	Get200ModelA201ModelC404ModelDDefaultError404Valid func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGet200ModelA201ModelC404ModelDDefaultError404ValidOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGet200ModelA201ModelC404ModelDDefaultError404ValidResponse], errResp azfake.ErrorResponder)

	// Get200ModelA202Valid is the fake for method MultipleResponsesClient.Get200ModelA202Valid
	// HTTP status codes to indicate success: http.StatusOK
	Get200ModelA202Valid func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGet200ModelA202ValidOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGet200ModelA202ValidResponse], errResp azfake.ErrorResponder)

	// Get200ModelA400Invalid is the fake for method MultipleResponsesClient.Get200ModelA400Invalid
	// HTTP status codes to indicate success: http.StatusOK
	Get200ModelA400Invalid func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGet200ModelA400InvalidOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGet200ModelA400InvalidResponse], errResp azfake.ErrorResponder)

	// Get200ModelA400None is the fake for method MultipleResponsesClient.Get200ModelA400None
	// HTTP status codes to indicate success: http.StatusOK
	Get200ModelA400None func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGet200ModelA400NoneOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGet200ModelA400NoneResponse], errResp azfake.ErrorResponder)

	// Get200ModelA400Valid is the fake for method MultipleResponsesClient.Get200ModelA400Valid
	// HTTP status codes to indicate success: http.StatusOK
	Get200ModelA400Valid func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGet200ModelA400ValidOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGet200ModelA400ValidResponse], errResp azfake.ErrorResponder)

	// Get202None204NoneDefaultError202None is the fake for method MultipleResponsesClient.Get202None204NoneDefaultError202None
	// HTTP status codes to indicate success: http.StatusAccepted, http.StatusNoContent
	Get202None204NoneDefaultError202None func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGet202None204NoneDefaultError202NoneOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGet202None204NoneDefaultError202NoneResponse], errResp azfake.ErrorResponder)

	// Get202None204NoneDefaultError204None is the fake for method MultipleResponsesClient.Get202None204NoneDefaultError204None
	// HTTP status codes to indicate success: http.StatusAccepted, http.StatusNoContent
	Get202None204NoneDefaultError204None func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGet202None204NoneDefaultError204NoneOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGet202None204NoneDefaultError204NoneResponse], errResp azfake.ErrorResponder)

	// Get202None204NoneDefaultError400Valid is the fake for method MultipleResponsesClient.Get202None204NoneDefaultError400Valid
	// HTTP status codes to indicate success: http.StatusAccepted, http.StatusNoContent
	Get202None204NoneDefaultError400Valid func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGet202None204NoneDefaultError400ValidOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGet202None204NoneDefaultError400ValidResponse], errResp azfake.ErrorResponder)

	// Get202None204NoneDefaultNone202Invalid is the fake for method MultipleResponsesClient.Get202None204NoneDefaultNone202Invalid
	// HTTP status codes to indicate success: http.StatusAccepted, http.StatusNoContent
	Get202None204NoneDefaultNone202Invalid func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGet202None204NoneDefaultNone202InvalidOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGet202None204NoneDefaultNone202InvalidResponse], errResp azfake.ErrorResponder)

	// Get202None204NoneDefaultNone204None is the fake for method MultipleResponsesClient.Get202None204NoneDefaultNone204None
	// HTTP status codes to indicate success: http.StatusAccepted, http.StatusNoContent
	Get202None204NoneDefaultNone204None func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGet202None204NoneDefaultNone204NoneOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGet202None204NoneDefaultNone204NoneResponse], errResp azfake.ErrorResponder)

	// Get202None204NoneDefaultNone400Invalid is the fake for method MultipleResponsesClient.Get202None204NoneDefaultNone400Invalid
	// HTTP status codes to indicate success: http.StatusAccepted, http.StatusNoContent
	Get202None204NoneDefaultNone400Invalid func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGet202None204NoneDefaultNone400InvalidOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGet202None204NoneDefaultNone400InvalidResponse], errResp azfake.ErrorResponder)

	// Get202None204NoneDefaultNone400None is the fake for method MultipleResponsesClient.Get202None204NoneDefaultNone400None
	// HTTP status codes to indicate success: http.StatusAccepted, http.StatusNoContent
	Get202None204NoneDefaultNone400None func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGet202None204NoneDefaultNone400NoneOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGet202None204NoneDefaultNone400NoneResponse], errResp azfake.ErrorResponder)

	// GetDefaultModelA200None is the fake for method MultipleResponsesClient.GetDefaultModelA200None
	// HTTP status codes to indicate success: http.StatusOK
	GetDefaultModelA200None func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGetDefaultModelA200NoneOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGetDefaultModelA200NoneResponse], errResp azfake.ErrorResponder)

	// GetDefaultModelA200Valid is the fake for method MultipleResponsesClient.GetDefaultModelA200Valid
	// HTTP status codes to indicate success: http.StatusOK
	GetDefaultModelA200Valid func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGetDefaultModelA200ValidOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGetDefaultModelA200ValidResponse], errResp azfake.ErrorResponder)

	// GetDefaultModelA400None is the fake for method MultipleResponsesClient.GetDefaultModelA400None
	// HTTP status codes to indicate success: http.StatusOK
	GetDefaultModelA400None func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGetDefaultModelA400NoneOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGetDefaultModelA400NoneResponse], errResp azfake.ErrorResponder)

	// GetDefaultModelA400Valid is the fake for method MultipleResponsesClient.GetDefaultModelA400Valid
	// HTTP status codes to indicate success: http.StatusOK
	GetDefaultModelA400Valid func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGetDefaultModelA400ValidOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGetDefaultModelA400ValidResponse], errResp azfake.ErrorResponder)

	// GetDefaultNone200Invalid is the fake for method MultipleResponsesClient.GetDefaultNone200Invalid
	// HTTP status codes to indicate success: http.StatusOK
	GetDefaultNone200Invalid func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGetDefaultNone200InvalidOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGetDefaultNone200InvalidResponse], errResp azfake.ErrorResponder)

	// GetDefaultNone200None is the fake for method MultipleResponsesClient.GetDefaultNone200None
	// HTTP status codes to indicate success: http.StatusOK
	GetDefaultNone200None func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGetDefaultNone200NoneOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGetDefaultNone200NoneResponse], errResp azfake.ErrorResponder)

	// GetDefaultNone400Invalid is the fake for method MultipleResponsesClient.GetDefaultNone400Invalid
	// HTTP status codes to indicate success: http.StatusOK
	GetDefaultNone400Invalid func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGetDefaultNone400InvalidOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGetDefaultNone400InvalidResponse], errResp azfake.ErrorResponder)

	// GetDefaultNone400None is the fake for method MultipleResponsesClient.GetDefaultNone400None
	// HTTP status codes to indicate success: http.StatusOK
	GetDefaultNone400None func(ctx context.Context, options *httpinfrastructuregroup.MultipleResponsesClientGetDefaultNone400NoneOptions) (resp azfake.Responder[httpinfrastructuregroup.MultipleResponsesClientGetDefaultNone400NoneResponse], errResp azfake.ErrorResponder)
}

// NewMultipleResponsesServerTransport creates a new instance of MultipleResponsesServerTransport with the provided implementation.
// The returned MultipleResponsesServerTransport instance is connected to an instance of httpinfrastructuregroup.MultipleResponsesClient by way of the
// undefined.Transporter field.
func NewMultipleResponsesServerTransport(srv *MultipleResponsesServer) *MultipleResponsesServerTransport {
	return &MultipleResponsesServerTransport{srv: srv}
}

// MultipleResponsesServerTransport connects instances of httpinfrastructuregroup.MultipleResponsesClient to instances of MultipleResponsesServer.
// Don't use this type directly, use NewMultipleResponsesServerTransport instead.
type MultipleResponsesServerTransport struct {
	srv *MultipleResponsesServer
}

// Do implements the policy.Transporter interface for MultipleResponsesServerTransport.
func (m *MultipleResponsesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "MultipleResponsesClient.Get200Model201ModelDefaultError200Valid":
		resp, err = m.dispatchGet200Model201ModelDefaultError200Valid(req)
	case "MultipleResponsesClient.Get200Model201ModelDefaultError201Valid":
		resp, err = m.dispatchGet200Model201ModelDefaultError201Valid(req)
	case "MultipleResponsesClient.Get200Model201ModelDefaultError400Valid":
		resp, err = m.dispatchGet200Model201ModelDefaultError400Valid(req)
	case "MultipleResponsesClient.Get200Model204NoModelDefaultError200Valid":
		resp, err = m.dispatchGet200Model204NoModelDefaultError200Valid(req)
	case "MultipleResponsesClient.Get200Model204NoModelDefaultError201Invalid":
		resp, err = m.dispatchGet200Model204NoModelDefaultError201Invalid(req)
	case "MultipleResponsesClient.Get200Model204NoModelDefaultError202None":
		resp, err = m.dispatchGet200Model204NoModelDefaultError202None(req)
	case "MultipleResponsesClient.Get200Model204NoModelDefaultError204Valid":
		resp, err = m.dispatchGet200Model204NoModelDefaultError204Valid(req)
	case "MultipleResponsesClient.Get200Model204NoModelDefaultError400Valid":
		resp, err = m.dispatchGet200Model204NoModelDefaultError400Valid(req)
	case "MultipleResponsesClient.Get200ModelA200Invalid":
		resp, err = m.dispatchGet200ModelA200Invalid(req)
	case "MultipleResponsesClient.Get200ModelA200None":
		resp, err = m.dispatchGet200ModelA200None(req)
	case "MultipleResponsesClient.Get200ModelA200Valid":
		resp, err = m.dispatchGet200ModelA200Valid(req)
	case "MultipleResponsesClient.Get200ModelA201ModelC404ModelDDefaultError200Valid":
		resp, err = m.dispatchGet200ModelA201ModelC404ModelDDefaultError200Valid(req)
	case "MultipleResponsesClient.Get200ModelA201ModelC404ModelDDefaultError201Valid":
		resp, err = m.dispatchGet200ModelA201ModelC404ModelDDefaultError201Valid(req)
	case "MultipleResponsesClient.Get200ModelA201ModelC404ModelDDefaultError400Valid":
		resp, err = m.dispatchGet200ModelA201ModelC404ModelDDefaultError400Valid(req)
	case "MultipleResponsesClient.Get200ModelA201ModelC404ModelDDefaultError404Valid":
		resp, err = m.dispatchGet200ModelA201ModelC404ModelDDefaultError404Valid(req)
	case "MultipleResponsesClient.Get200ModelA202Valid":
		resp, err = m.dispatchGet200ModelA202Valid(req)
	case "MultipleResponsesClient.Get200ModelA400Invalid":
		resp, err = m.dispatchGet200ModelA400Invalid(req)
	case "MultipleResponsesClient.Get200ModelA400None":
		resp, err = m.dispatchGet200ModelA400None(req)
	case "MultipleResponsesClient.Get200ModelA400Valid":
		resp, err = m.dispatchGet200ModelA400Valid(req)
	case "MultipleResponsesClient.Get202None204NoneDefaultError202None":
		resp, err = m.dispatchGet202None204NoneDefaultError202None(req)
	case "MultipleResponsesClient.Get202None204NoneDefaultError204None":
		resp, err = m.dispatchGet202None204NoneDefaultError204None(req)
	case "MultipleResponsesClient.Get202None204NoneDefaultError400Valid":
		resp, err = m.dispatchGet202None204NoneDefaultError400Valid(req)
	case "MultipleResponsesClient.Get202None204NoneDefaultNone202Invalid":
		resp, err = m.dispatchGet202None204NoneDefaultNone202Invalid(req)
	case "MultipleResponsesClient.Get202None204NoneDefaultNone204None":
		resp, err = m.dispatchGet202None204NoneDefaultNone204None(req)
	case "MultipleResponsesClient.Get202None204NoneDefaultNone400Invalid":
		resp, err = m.dispatchGet202None204NoneDefaultNone400Invalid(req)
	case "MultipleResponsesClient.Get202None204NoneDefaultNone400None":
		resp, err = m.dispatchGet202None204NoneDefaultNone400None(req)
	case "MultipleResponsesClient.GetDefaultModelA200None":
		resp, err = m.dispatchGetDefaultModelA200None(req)
	case "MultipleResponsesClient.GetDefaultModelA200Valid":
		resp, err = m.dispatchGetDefaultModelA200Valid(req)
	case "MultipleResponsesClient.GetDefaultModelA400None":
		resp, err = m.dispatchGetDefaultModelA400None(req)
	case "MultipleResponsesClient.GetDefaultModelA400Valid":
		resp, err = m.dispatchGetDefaultModelA400Valid(req)
	case "MultipleResponsesClient.GetDefaultNone200Invalid":
		resp, err = m.dispatchGetDefaultNone200Invalid(req)
	case "MultipleResponsesClient.GetDefaultNone200None":
		resp, err = m.dispatchGetDefaultNone200None(req)
	case "MultipleResponsesClient.GetDefaultNone400Invalid":
		resp, err = m.dispatchGetDefaultNone400Invalid(req)
	case "MultipleResponsesClient.GetDefaultNone400None":
		resp, err = m.dispatchGetDefaultNone400None(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGet200Model201ModelDefaultError200Valid(req *http.Request) (*http.Response, error) {
	if m.srv.Get200Model201ModelDefaultError200Valid == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get200Model201ModelDefaultError200Valid not implemented")}
	}
	respr, errRespr := m.srv.Get200Model201ModelDefaultError200Valid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGet200Model201ModelDefaultError201Valid(req *http.Request) (*http.Response, error) {
	if m.srv.Get200Model201ModelDefaultError201Valid == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get200Model201ModelDefaultError201Valid not implemented")}
	}
	respr, errRespr := m.srv.Get200Model201ModelDefaultError201Valid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGet200Model201ModelDefaultError400Valid(req *http.Request) (*http.Response, error) {
	if m.srv.Get200Model201ModelDefaultError400Valid == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get200Model201ModelDefaultError400Valid not implemented")}
	}
	respr, errRespr := m.srv.Get200Model201ModelDefaultError400Valid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGet200Model204NoModelDefaultError200Valid(req *http.Request) (*http.Response, error) {
	if m.srv.Get200Model204NoModelDefaultError200Valid == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get200Model204NoModelDefaultError200Valid not implemented")}
	}
	respr, errRespr := m.srv.Get200Model204NoModelDefaultError200Valid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MyException, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGet200Model204NoModelDefaultError201Invalid(req *http.Request) (*http.Response, error) {
	if m.srv.Get200Model204NoModelDefaultError201Invalid == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get200Model204NoModelDefaultError201Invalid not implemented")}
	}
	respr, errRespr := m.srv.Get200Model204NoModelDefaultError201Invalid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MyException, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGet200Model204NoModelDefaultError202None(req *http.Request) (*http.Response, error) {
	if m.srv.Get200Model204NoModelDefaultError202None == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get200Model204NoModelDefaultError202None not implemented")}
	}
	respr, errRespr := m.srv.Get200Model204NoModelDefaultError202None(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MyException, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGet200Model204NoModelDefaultError204Valid(req *http.Request) (*http.Response, error) {
	if m.srv.Get200Model204NoModelDefaultError204Valid == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get200Model204NoModelDefaultError204Valid not implemented")}
	}
	respr, errRespr := m.srv.Get200Model204NoModelDefaultError204Valid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MyException, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGet200Model204NoModelDefaultError400Valid(req *http.Request) (*http.Response, error) {
	if m.srv.Get200Model204NoModelDefaultError400Valid == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get200Model204NoModelDefaultError400Valid not implemented")}
	}
	respr, errRespr := m.srv.Get200Model204NoModelDefaultError400Valid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MyException, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGet200ModelA200Invalid(req *http.Request) (*http.Response, error) {
	if m.srv.Get200ModelA200Invalid == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get200ModelA200Invalid not implemented")}
	}
	respr, errRespr := m.srv.Get200ModelA200Invalid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MyException, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGet200ModelA200None(req *http.Request) (*http.Response, error) {
	if m.srv.Get200ModelA200None == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get200ModelA200None not implemented")}
	}
	respr, errRespr := m.srv.Get200ModelA200None(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MyException, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGet200ModelA200Valid(req *http.Request) (*http.Response, error) {
	if m.srv.Get200ModelA200Valid == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get200ModelA200Valid not implemented")}
	}
	respr, errRespr := m.srv.Get200ModelA200Valid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MyException, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGet200ModelA201ModelC404ModelDDefaultError200Valid(req *http.Request) (*http.Response, error) {
	if m.srv.Get200ModelA201ModelC404ModelDDefaultError200Valid == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get200ModelA201ModelC404ModelDDefaultError200Valid not implemented")}
	}
	respr, errRespr := m.srv.Get200ModelA201ModelC404ModelDDefaultError200Valid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated, http.StatusNotFound}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated, http.StatusNotFound", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGet200ModelA201ModelC404ModelDDefaultError201Valid(req *http.Request) (*http.Response, error) {
	if m.srv.Get200ModelA201ModelC404ModelDDefaultError201Valid == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get200ModelA201ModelC404ModelDDefaultError201Valid not implemented")}
	}
	respr, errRespr := m.srv.Get200ModelA201ModelC404ModelDDefaultError201Valid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated, http.StatusNotFound}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated, http.StatusNotFound", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGet200ModelA201ModelC404ModelDDefaultError400Valid(req *http.Request) (*http.Response, error) {
	if m.srv.Get200ModelA201ModelC404ModelDDefaultError400Valid == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get200ModelA201ModelC404ModelDDefaultError400Valid not implemented")}
	}
	respr, errRespr := m.srv.Get200ModelA201ModelC404ModelDDefaultError400Valid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated, http.StatusNotFound}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated, http.StatusNotFound", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGet200ModelA201ModelC404ModelDDefaultError404Valid(req *http.Request) (*http.Response, error) {
	if m.srv.Get200ModelA201ModelC404ModelDDefaultError404Valid == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get200ModelA201ModelC404ModelDDefaultError404Valid not implemented")}
	}
	respr, errRespr := m.srv.Get200ModelA201ModelC404ModelDDefaultError404Valid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated, http.StatusNotFound}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated, http.StatusNotFound", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGet200ModelA202Valid(req *http.Request) (*http.Response, error) {
	if m.srv.Get200ModelA202Valid == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get200ModelA202Valid not implemented")}
	}
	respr, errRespr := m.srv.Get200ModelA202Valid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MyException, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGet200ModelA400Invalid(req *http.Request) (*http.Response, error) {
	if m.srv.Get200ModelA400Invalid == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get200ModelA400Invalid not implemented")}
	}
	respr, errRespr := m.srv.Get200ModelA400Invalid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MyException, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGet200ModelA400None(req *http.Request) (*http.Response, error) {
	if m.srv.Get200ModelA400None == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get200ModelA400None not implemented")}
	}
	respr, errRespr := m.srv.Get200ModelA400None(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MyException, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGet200ModelA400Valid(req *http.Request) (*http.Response, error) {
	if m.srv.Get200ModelA400Valid == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get200ModelA400Valid not implemented")}
	}
	respr, errRespr := m.srv.Get200ModelA400Valid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MyException, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGet202None204NoneDefaultError202None(req *http.Request) (*http.Response, error) {
	if m.srv.Get202None204NoneDefaultError202None == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get202None204NoneDefaultError202None not implemented")}
	}
	respr, errRespr := m.srv.Get202None204NoneDefaultError202None(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusAccepted, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGet202None204NoneDefaultError204None(req *http.Request) (*http.Response, error) {
	if m.srv.Get202None204NoneDefaultError204None == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get202None204NoneDefaultError204None not implemented")}
	}
	respr, errRespr := m.srv.Get202None204NoneDefaultError204None(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusAccepted, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGet202None204NoneDefaultError400Valid(req *http.Request) (*http.Response, error) {
	if m.srv.Get202None204NoneDefaultError400Valid == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get202None204NoneDefaultError400Valid not implemented")}
	}
	respr, errRespr := m.srv.Get202None204NoneDefaultError400Valid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusAccepted, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGet202None204NoneDefaultNone202Invalid(req *http.Request) (*http.Response, error) {
	if m.srv.Get202None204NoneDefaultNone202Invalid == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get202None204NoneDefaultNone202Invalid not implemented")}
	}
	respr, errRespr := m.srv.Get202None204NoneDefaultNone202Invalid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusAccepted, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGet202None204NoneDefaultNone204None(req *http.Request) (*http.Response, error) {
	if m.srv.Get202None204NoneDefaultNone204None == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get202None204NoneDefaultNone204None not implemented")}
	}
	respr, errRespr := m.srv.Get202None204NoneDefaultNone204None(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusAccepted, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGet202None204NoneDefaultNone400Invalid(req *http.Request) (*http.Response, error) {
	if m.srv.Get202None204NoneDefaultNone400Invalid == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get202None204NoneDefaultNone400Invalid not implemented")}
	}
	respr, errRespr := m.srv.Get202None204NoneDefaultNone400Invalid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusAccepted, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGet202None204NoneDefaultNone400None(req *http.Request) (*http.Response, error) {
	if m.srv.Get202None204NoneDefaultNone400None == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get202None204NoneDefaultNone400None not implemented")}
	}
	respr, errRespr := m.srv.Get202None204NoneDefaultNone400None(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusAccepted, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGetDefaultModelA200None(req *http.Request) (*http.Response, error) {
	if m.srv.GetDefaultModelA200None == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDefaultModelA200None not implemented")}
	}
	respr, errRespr := m.srv.GetDefaultModelA200None(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MyException, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGetDefaultModelA200Valid(req *http.Request) (*http.Response, error) {
	if m.srv.GetDefaultModelA200Valid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDefaultModelA200Valid not implemented")}
	}
	respr, errRespr := m.srv.GetDefaultModelA200Valid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MyException, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGetDefaultModelA400None(req *http.Request) (*http.Response, error) {
	if m.srv.GetDefaultModelA400None == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDefaultModelA400None not implemented")}
	}
	respr, errRespr := m.srv.GetDefaultModelA400None(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGetDefaultModelA400Valid(req *http.Request) (*http.Response, error) {
	if m.srv.GetDefaultModelA400Valid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDefaultModelA400Valid not implemented")}
	}
	respr, errRespr := m.srv.GetDefaultModelA400Valid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGetDefaultNone200Invalid(req *http.Request) (*http.Response, error) {
	if m.srv.GetDefaultNone200Invalid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDefaultNone200Invalid not implemented")}
	}
	respr, errRespr := m.srv.GetDefaultNone200Invalid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGetDefaultNone200None(req *http.Request) (*http.Response, error) {
	if m.srv.GetDefaultNone200None == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDefaultNone200None not implemented")}
	}
	respr, errRespr := m.srv.GetDefaultNone200None(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGetDefaultNone400Invalid(req *http.Request) (*http.Response, error) {
	if m.srv.GetDefaultNone400Invalid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDefaultNone400Invalid not implemented")}
	}
	respr, errRespr := m.srv.GetDefaultNone400Invalid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MultipleResponsesServerTransport) dispatchGetDefaultNone400None(req *http.Request) (*http.Response, error) {
	if m.srv.GetDefaultNone400None == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDefaultNone400None not implemented")}
	}
	respr, errRespr := m.srv.GetDefaultNone400None(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
