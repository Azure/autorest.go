//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package httpinfrastructuregroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// HTTPFailureClient contains the methods for the HTTPFailure group.
// Don't use this type directly, use a constructor function instead.
type HTTPFailureClient struct {
	internal *azcore.Client
}

// GetEmptyError - Get empty error form server
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - HTTPFailureClientGetEmptyErrorOptions contains the optional parameters for the HTTPFailureClient.GetEmptyError
//     method.
func (client *HTTPFailureClient) GetEmptyError(ctx context.Context, options *HTTPFailureClientGetEmptyErrorOptions) (resp HTTPFailureClientGetEmptyErrorResponse, err error) {
	ctx, endSpan := runtime.StartSpan(ctx, "HTTPFailureClient.GetEmptyError", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getEmptyErrorCreateRequest(ctx, options)
	if err != nil {
		return
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return
	}
	return client.getEmptyErrorHandleResponse(httpResp)
}

// getEmptyErrorCreateRequest creates the GetEmptyError request.
func (client *HTTPFailureClient) getEmptyErrorCreateRequest(ctx context.Context, options *HTTPFailureClientGetEmptyErrorOptions) (*policy.Request, error) {
	urlPath := "/http/failure/emptybody/error"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getEmptyErrorHandleResponse handles the GetEmptyError response.
func (client *HTTPFailureClient) getEmptyErrorHandleResponse(resp *http.Response) (HTTPFailureClientGetEmptyErrorResponse, error) {
	result := HTTPFailureClientGetEmptyErrorResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return HTTPFailureClientGetEmptyErrorResponse{}, err
	}
	return result, nil
}

// GetNoModelEmpty - Get empty response from server
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - HTTPFailureClientGetNoModelEmptyOptions contains the optional parameters for the HTTPFailureClient.GetNoModelEmpty
//     method.
func (client *HTTPFailureClient) GetNoModelEmpty(ctx context.Context, options *HTTPFailureClientGetNoModelEmptyOptions) (resp HTTPFailureClientGetNoModelEmptyResponse, err error) {
	ctx, endSpan := runtime.StartSpan(ctx, "HTTPFailureClient.GetNoModelEmpty", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getNoModelEmptyCreateRequest(ctx, options)
	if err != nil {
		return
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return
	}
	return client.getNoModelEmptyHandleResponse(httpResp)
}

// getNoModelEmptyCreateRequest creates the GetNoModelEmpty request.
func (client *HTTPFailureClient) getNoModelEmptyCreateRequest(ctx context.Context, options *HTTPFailureClientGetNoModelEmptyOptions) (*policy.Request, error) {
	urlPath := "/http/failure/nomodel/empty"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getNoModelEmptyHandleResponse handles the GetNoModelEmpty response.
func (client *HTTPFailureClient) getNoModelEmptyHandleResponse(resp *http.Response) (HTTPFailureClientGetNoModelEmptyResponse, error) {
	result := HTTPFailureClientGetNoModelEmptyResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return HTTPFailureClientGetNoModelEmptyResponse{}, err
	}
	return result, nil
}

// GetNoModelError - Get empty error form server
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - HTTPFailureClientGetNoModelErrorOptions contains the optional parameters for the HTTPFailureClient.GetNoModelError
//     method.
func (client *HTTPFailureClient) GetNoModelError(ctx context.Context, options *HTTPFailureClientGetNoModelErrorOptions) (resp HTTPFailureClientGetNoModelErrorResponse, err error) {
	ctx, endSpan := runtime.StartSpan(ctx, "HTTPFailureClient.GetNoModelError", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getNoModelErrorCreateRequest(ctx, options)
	if err != nil {
		return
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return
	}
	return client.getNoModelErrorHandleResponse(httpResp)
}

// getNoModelErrorCreateRequest creates the GetNoModelError request.
func (client *HTTPFailureClient) getNoModelErrorCreateRequest(ctx context.Context, options *HTTPFailureClientGetNoModelErrorOptions) (*policy.Request, error) {
	urlPath := "/http/failure/nomodel/error"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getNoModelErrorHandleResponse handles the GetNoModelError response.
func (client *HTTPFailureClient) getNoModelErrorHandleResponse(resp *http.Response) (HTTPFailureClientGetNoModelErrorResponse, error) {
	result := HTTPFailureClientGetNoModelErrorResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return HTTPFailureClientGetNoModelErrorResponse{}, err
	}
	return result, nil
}
