// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	"generatortests/complexgroup"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// PolymorphicrecursiveServer is a fake server for instances of the complexgroup.PolymorphicrecursiveClient type.
type PolymorphicrecursiveServer struct {
	// GetValid is the fake for method PolymorphicrecursiveClient.GetValid
	// HTTP status codes to indicate success: http.StatusOK
	GetValid func(ctx context.Context, options *complexgroup.PolymorphicrecursiveClientGetValidOptions) (resp azfake.Responder[complexgroup.PolymorphicrecursiveClientGetValidResponse], errResp azfake.ErrorResponder)

	// PutValid is the fake for method PolymorphicrecursiveClient.PutValid
	// HTTP status codes to indicate success: http.StatusOK
	PutValid func(ctx context.Context, complexBody complexgroup.FishClassification, options *complexgroup.PolymorphicrecursiveClientPutValidOptions) (resp azfake.Responder[complexgroup.PolymorphicrecursiveClientPutValidResponse], errResp azfake.ErrorResponder)
}

// NewPolymorphicrecursiveServerTransport creates a new instance of PolymorphicrecursiveServerTransport with the provided implementation.
// The returned PolymorphicrecursiveServerTransport instance is connected to an instance of complexgroup.PolymorphicrecursiveClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewPolymorphicrecursiveServerTransport(srv *PolymorphicrecursiveServer) *PolymorphicrecursiveServerTransport {
	return &PolymorphicrecursiveServerTransport{srv: srv}
}

// PolymorphicrecursiveServerTransport connects instances of complexgroup.PolymorphicrecursiveClient to instances of PolymorphicrecursiveServer.
// Don't use this type directly, use NewPolymorphicrecursiveServerTransport instead.
type PolymorphicrecursiveServerTransport struct {
	srv *PolymorphicrecursiveServer
}

// Do implements the policy.Transporter interface for PolymorphicrecursiveServerTransport.
func (p *PolymorphicrecursiveServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return p.dispatchToMethodFake(req, method)
}

func (p *PolymorphicrecursiveServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var res result
		switch method {
		case "PolymorphicrecursiveClient.GetValid":
			res.resp, res.err = p.dispatchGetValid(req)
		case "PolymorphicrecursiveClient.PutValid":
			res.resp, res.err = p.dispatchPutValid(req)
		default:
			res.err = fmt.Errorf("unhandled API %s", method)
		}

		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (p *PolymorphicrecursiveServerTransport) dispatchGetValid(req *http.Request) (*http.Response, error) {
	if p.srv.GetValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetValid not implemented")}
	}
	respr, errRespr := p.srv.GetValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).FishClassification, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PolymorphicrecursiveServerTransport) dispatchPutValid(req *http.Request) (*http.Response, error) {
	if p.srv.PutValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutValid not implemented")}
	}
	raw, err := readRequestBody(req)
	if err != nil {
		return nil, err
	}
	body, err := unmarshalFishClassification(raw)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.PutValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
