// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	"generatortests/complexgroup"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// PolymorphismServer is a fake server for instances of the complexgroup.PolymorphismClient type.
type PolymorphismServer struct {
	// GetComplicated is the fake for method PolymorphismClient.GetComplicated
	// HTTP status codes to indicate success: http.StatusOK
	GetComplicated func(ctx context.Context, options *complexgroup.PolymorphismClientGetComplicatedOptions) (resp azfake.Responder[complexgroup.PolymorphismClientGetComplicatedResponse], errResp azfake.ErrorResponder)

	// GetComposedWithDiscriminator is the fake for method PolymorphismClient.GetComposedWithDiscriminator
	// HTTP status codes to indicate success: http.StatusOK
	GetComposedWithDiscriminator func(ctx context.Context, options *complexgroup.PolymorphismClientGetComposedWithDiscriminatorOptions) (resp azfake.Responder[complexgroup.PolymorphismClientGetComposedWithDiscriminatorResponse], errResp azfake.ErrorResponder)

	// GetComposedWithoutDiscriminator is the fake for method PolymorphismClient.GetComposedWithoutDiscriminator
	// HTTP status codes to indicate success: http.StatusOK
	GetComposedWithoutDiscriminator func(ctx context.Context, options *complexgroup.PolymorphismClientGetComposedWithoutDiscriminatorOptions) (resp azfake.Responder[complexgroup.PolymorphismClientGetComposedWithoutDiscriminatorResponse], errResp azfake.ErrorResponder)

	// GetDotSyntax is the fake for method PolymorphismClient.GetDotSyntax
	// HTTP status codes to indicate success: http.StatusOK
	GetDotSyntax func(ctx context.Context, options *complexgroup.PolymorphismClientGetDotSyntaxOptions) (resp azfake.Responder[complexgroup.PolymorphismClientGetDotSyntaxResponse], errResp azfake.ErrorResponder)

	// GetValid is the fake for method PolymorphismClient.GetValid
	// HTTP status codes to indicate success: http.StatusOK
	GetValid func(ctx context.Context, options *complexgroup.PolymorphismClientGetValidOptions) (resp azfake.Responder[complexgroup.PolymorphismClientGetValidResponse], errResp azfake.ErrorResponder)

	// PutComplicated is the fake for method PolymorphismClient.PutComplicated
	// HTTP status codes to indicate success: http.StatusOK
	PutComplicated func(ctx context.Context, complexBody complexgroup.SalmonClassification, options *complexgroup.PolymorphismClientPutComplicatedOptions) (resp azfake.Responder[complexgroup.PolymorphismClientPutComplicatedResponse], errResp azfake.ErrorResponder)

	// PutMissingDiscriminator is the fake for method PolymorphismClient.PutMissingDiscriminator
	// HTTP status codes to indicate success: http.StatusOK
	PutMissingDiscriminator func(ctx context.Context, complexBody complexgroup.SalmonClassification, options *complexgroup.PolymorphismClientPutMissingDiscriminatorOptions) (resp azfake.Responder[complexgroup.PolymorphismClientPutMissingDiscriminatorResponse], errResp azfake.ErrorResponder)

	// PutValid is the fake for method PolymorphismClient.PutValid
	// HTTP status codes to indicate success: http.StatusOK
	PutValid func(ctx context.Context, complexBody complexgroup.FishClassification, options *complexgroup.PolymorphismClientPutValidOptions) (resp azfake.Responder[complexgroup.PolymorphismClientPutValidResponse], errResp azfake.ErrorResponder)

	// PutValidMissingRequired is the fake for method PolymorphismClient.PutValidMissingRequired
	// HTTP status codes to indicate success: http.StatusOK
	PutValidMissingRequired func(ctx context.Context, complexBody complexgroup.FishClassification, options *complexgroup.PolymorphismClientPutValidMissingRequiredOptions) (resp azfake.Responder[complexgroup.PolymorphismClientPutValidMissingRequiredResponse], errResp azfake.ErrorResponder)
}

// NewPolymorphismServerTransport creates a new instance of PolymorphismServerTransport with the provided implementation.
// The returned PolymorphismServerTransport instance is connected to an instance of complexgroup.PolymorphismClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewPolymorphismServerTransport(srv *PolymorphismServer) *PolymorphismServerTransport {
	return &PolymorphismServerTransport{srv: srv}
}

// PolymorphismServerTransport connects instances of complexgroup.PolymorphismClient to instances of PolymorphismServer.
// Don't use this type directly, use NewPolymorphismServerTransport instead.
type PolymorphismServerTransport struct {
	srv *PolymorphismServer
}

// Do implements the policy.Transporter interface for PolymorphismServerTransport.
func (p *PolymorphismServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "PolymorphismClient.GetComplicated":
		resp, err = p.dispatchGetComplicated(req)
	case "PolymorphismClient.GetComposedWithDiscriminator":
		resp, err = p.dispatchGetComposedWithDiscriminator(req)
	case "PolymorphismClient.GetComposedWithoutDiscriminator":
		resp, err = p.dispatchGetComposedWithoutDiscriminator(req)
	case "PolymorphismClient.GetDotSyntax":
		resp, err = p.dispatchGetDotSyntax(req)
	case "PolymorphismClient.GetValid":
		resp, err = p.dispatchGetValid(req)
	case "PolymorphismClient.PutComplicated":
		resp, err = p.dispatchPutComplicated(req)
	case "PolymorphismClient.PutMissingDiscriminator":
		resp, err = p.dispatchPutMissingDiscriminator(req)
	case "PolymorphismClient.PutValid":
		resp, err = p.dispatchPutValid(req)
	case "PolymorphismClient.PutValidMissingRequired":
		resp, err = p.dispatchPutValidMissingRequired(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (p *PolymorphismServerTransport) dispatchGetComplicated(req *http.Request) (*http.Response, error) {
	if p.srv.GetComplicated == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetComplicated not implemented")}
	}
	respr, errRespr := p.srv.GetComplicated(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SalmonClassification, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PolymorphismServerTransport) dispatchGetComposedWithDiscriminator(req *http.Request) (*http.Response, error) {
	if p.srv.GetComposedWithDiscriminator == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetComposedWithDiscriminator not implemented")}
	}
	respr, errRespr := p.srv.GetComposedWithDiscriminator(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DotFishMarket, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PolymorphismServerTransport) dispatchGetComposedWithoutDiscriminator(req *http.Request) (*http.Response, error) {
	if p.srv.GetComposedWithoutDiscriminator == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetComposedWithoutDiscriminator not implemented")}
	}
	respr, errRespr := p.srv.GetComposedWithoutDiscriminator(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DotFishMarket, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PolymorphismServerTransport) dispatchGetDotSyntax(req *http.Request) (*http.Response, error) {
	if p.srv.GetDotSyntax == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDotSyntax not implemented")}
	}
	respr, errRespr := p.srv.GetDotSyntax(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DotFishClassification, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PolymorphismServerTransport) dispatchGetValid(req *http.Request) (*http.Response, error) {
	if p.srv.GetValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetValid not implemented")}
	}
	respr, errRespr := p.srv.GetValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).FishClassification, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PolymorphismServerTransport) dispatchPutComplicated(req *http.Request) (*http.Response, error) {
	if p.srv.PutComplicated == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutComplicated not implemented")}
	}
	raw, err := readRequestBody(req)
	if err != nil {
		return nil, err
	}
	body, err := unmarshalSalmonClassification(raw)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.PutComplicated(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PolymorphismServerTransport) dispatchPutMissingDiscriminator(req *http.Request) (*http.Response, error) {
	if p.srv.PutMissingDiscriminator == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutMissingDiscriminator not implemented")}
	}
	raw, err := readRequestBody(req)
	if err != nil {
		return nil, err
	}
	body, err := unmarshalSalmonClassification(raw)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.PutMissingDiscriminator(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SalmonClassification, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PolymorphismServerTransport) dispatchPutValid(req *http.Request) (*http.Response, error) {
	if p.srv.PutValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutValid not implemented")}
	}
	raw, err := readRequestBody(req)
	if err != nil {
		return nil, err
	}
	body, err := unmarshalFishClassification(raw)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.PutValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PolymorphismServerTransport) dispatchPutValidMissingRequired(req *http.Request) (*http.Response, error) {
	if p.srv.PutValidMissingRequired == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutValidMissingRequired not implemented")}
	}
	raw, err := readRequestBody(req)
	if err != nil {
		return nil, err
	}
	body, err := unmarshalFishClassification(raw)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.PutValidMissingRequired(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
