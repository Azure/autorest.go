//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package complexgroup

import "time"

// ArrayClientGetEmptyOptions contains the optional parameters for the ArrayClient.GetEmpty method.
type ArrayClientGetEmptyOptions struct {
	// placeholder for future optional parameters
}

// ArrayClientGetNotProvidedOptions contains the optional parameters for the ArrayClient.GetNotProvided method.
type ArrayClientGetNotProvidedOptions struct {
	// placeholder for future optional parameters
}

// ArrayClientGetValidOptions contains the optional parameters for the ArrayClient.GetValid method.
type ArrayClientGetValidOptions struct {
	// placeholder for future optional parameters
}

// ArrayClientPutEmptyOptions contains the optional parameters for the ArrayClient.PutEmpty method.
type ArrayClientPutEmptyOptions struct {
	// placeholder for future optional parameters
}

// ArrayClientPutValidOptions contains the optional parameters for the ArrayClient.PutValid method.
type ArrayClientPutValidOptions struct {
	// placeholder for future optional parameters
}

type ArrayWrapper struct {
	Array []*string
}

type Basic struct {
	Color *CMYKColors

	// Basic Id
	ID *int32

	// Name property with a very long description that does not fit on a single line and a line break.
	Name *string
}

// BasicClientGetEmptyOptions contains the optional parameters for the BasicClient.GetEmpty method.
type BasicClientGetEmptyOptions struct {
	// placeholder for future optional parameters
}

// BasicClientGetInvalidOptions contains the optional parameters for the BasicClient.GetInvalid method.
type BasicClientGetInvalidOptions struct {
	// placeholder for future optional parameters
}

// BasicClientGetNotProvidedOptions contains the optional parameters for the BasicClient.GetNotProvided method.
type BasicClientGetNotProvidedOptions struct {
	// placeholder for future optional parameters
}

// BasicClientGetNullOptions contains the optional parameters for the BasicClient.GetNull method.
type BasicClientGetNullOptions struct {
	// placeholder for future optional parameters
}

// BasicClientGetValidOptions contains the optional parameters for the BasicClient.GetValid method.
type BasicClientGetValidOptions struct {
	// placeholder for future optional parameters
}

// BasicClientPutValidOptions contains the optional parameters for the BasicClient.PutValid method.
type BasicClientPutValidOptions struct {
	// placeholder for future optional parameters
}

type BooleanWrapper struct {
	FieldFalse *bool
	FieldTrue  *bool
}

type ByteWrapper struct {
	Field []byte
}

type Cookiecuttershark struct {
	// REQUIRED
	Birthday *time.Time

	// REQUIRED
	Fishtype *string

	// REQUIRED
	Length   *float32
	Age      *int32
	Siblings []FishClassification
	Species  *string
}

// GetFish implements the FishClassification interface for type Cookiecuttershark.
func (c *Cookiecuttershark) GetFish() *Fish {
	return &Fish{
		Fishtype: c.Fishtype,
		Species:  c.Species,
		Length:   c.Length,
		Siblings: c.Siblings,
	}
}

// GetShark implements the SharkClassification interface for type Cookiecuttershark.
func (c *Cookiecuttershark) GetShark() *Shark {
	return &Shark{
		Age:      c.Age,
		Birthday: c.Birthday,
		Fishtype: c.Fishtype,
		Species:  c.Species,
		Length:   c.Length,
		Siblings: c.Siblings,
	}
}

type DateWrapper struct {
	Field *time.Time
	Leap  *time.Time
}

type DatetimeWrapper struct {
	Field *time.Time
	Now   *time.Time
}

type Datetimerfc1123Wrapper struct {
	Field *time.Time
	Now   *time.Time
}

// DictionaryClientGetEmptyOptions contains the optional parameters for the DictionaryClient.GetEmpty method.
type DictionaryClientGetEmptyOptions struct {
	// placeholder for future optional parameters
}

// DictionaryClientGetNotProvidedOptions contains the optional parameters for the DictionaryClient.GetNotProvided method.
type DictionaryClientGetNotProvidedOptions struct {
	// placeholder for future optional parameters
}

// DictionaryClientGetNullOptions contains the optional parameters for the DictionaryClient.GetNull method.
type DictionaryClientGetNullOptions struct {
	// placeholder for future optional parameters
}

// DictionaryClientGetValidOptions contains the optional parameters for the DictionaryClient.GetValid method.
type DictionaryClientGetValidOptions struct {
	// placeholder for future optional parameters
}

// DictionaryClientPutEmptyOptions contains the optional parameters for the DictionaryClient.PutEmpty method.
type DictionaryClientPutEmptyOptions struct {
	// placeholder for future optional parameters
}

// DictionaryClientPutValidOptions contains the optional parameters for the DictionaryClient.PutValid method.
type DictionaryClientPutValidOptions struct {
	// placeholder for future optional parameters
}

type DictionaryWrapper struct {
	// Dictionary of
	DefaultProgram map[string]*string
}

type Dog struct {
	Food *string
	ID   *int32
	Name *string
}

// DotFishClassification provides polymorphic access to related types.
// Call the interface's GetDotFish() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *DotFish, *DotSalmon
type DotFishClassification interface {
	// GetDotFish returns the DotFish content of the underlying type.
	GetDotFish() *DotFish
}

type DotFish struct {
	// REQUIRED
	FishType *string
	Species  *string
}

// GetDotFish implements the DotFishClassification interface for type DotFish.
func (d *DotFish) GetDotFish() *DotFish { return d }

type DotFishMarket struct {
	Fishes       []DotFishClassification
	Salmons      []*DotSalmon
	SampleFish   DotFishClassification
	SampleSalmon *DotSalmon
}

type DotSalmon struct {
	// REQUIRED
	FishType *string
	Iswild   *bool
	Location *string
	Species  *string
}

// GetDotFish implements the DotFishClassification interface for type DotSalmon.
func (d *DotSalmon) GetDotFish() *DotFish {
	return &DotFish{
		FishType: d.FishType,
		Species:  d.Species,
	}
}

type DoubleWrapper struct {
	Field1                                                                          *float64
	Field56ZerosAfterTheDotAndNegativeZeroBeforeDotAndThisIsALongFieldNameOnPurpose *float64
}

type DurationWrapper struct {
	Field *string
}

// FishClassification provides polymorphic access to related types.
// Call the interface's GetFish() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *Cookiecuttershark, *Fish, *Goblinshark, *Salmon, *Sawshark, *Shark, *SmartSalmon
type FishClassification interface {
	// GetFish returns the Fish content of the underlying type.
	GetFish() *Fish
}

type Fish struct {
	// REQUIRED
	Fishtype *string

	// REQUIRED
	Length   *float32
	Siblings []FishClassification
	Species  *string
}

// GetFish implements the FishClassification interface for type Fish.
func (f *Fish) GetFish() *Fish { return f }

// FlattencomplexClientGetValidOptions contains the optional parameters for the FlattencomplexClient.GetValid method.
type FlattencomplexClientGetValidOptions struct {
	// placeholder for future optional parameters
}

type FloatWrapper struct {
	Field1 *float32
	Field2 *float32
}

type Goblinshark struct {
	// REQUIRED
	Birthday *time.Time

	// REQUIRED
	Fishtype *string

	// REQUIRED
	Length *float32
	Age    *int32

	// Colors possible
	Color    *GoblinSharkColor
	Jawsize  *int32
	Siblings []FishClassification
	Species  *string
}

// GetFish implements the FishClassification interface for type Goblinshark.
func (g *Goblinshark) GetFish() *Fish {
	return &Fish{
		Fishtype: g.Fishtype,
		Species:  g.Species,
		Length:   g.Length,
		Siblings: g.Siblings,
	}
}

// GetShark implements the SharkClassification interface for type Goblinshark.
func (g *Goblinshark) GetShark() *Shark {
	return &Shark{
		Age:      g.Age,
		Birthday: g.Birthday,
		Fishtype: g.Fishtype,
		Species:  g.Species,
		Length:   g.Length,
		Siblings: g.Siblings,
	}
}

// InheritanceClientGetValidOptions contains the optional parameters for the InheritanceClient.GetValid method.
type InheritanceClientGetValidOptions struct {
	// placeholder for future optional parameters
}

// InheritanceClientPutValidOptions contains the optional parameters for the InheritanceClient.PutValid method.
type InheritanceClientPutValidOptions struct {
	// placeholder for future optional parameters
}

type IntWrapper struct {
	Field1 *int32
	Field2 *int32
}

type LongWrapper struct {
	Field1 *int64
	Field2 *int64
}

type MyBaseHelperType struct {
	PropBH1 *string
}

// MyBaseTypeClassification provides polymorphic access to related types.
// Call the interface's GetMyBaseType() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *MyBaseType, *MyDerivedType
type MyBaseTypeClassification interface {
	// GetMyBaseType returns the MyBaseType content of the underlying type.
	GetMyBaseType() *MyBaseType
}

type MyBaseType struct {
	// REQUIRED
	Kind   *MyKind
	Helper *MyBaseHelperType
	PropB1 *string
}

// GetMyBaseType implements the MyBaseTypeClassification interface for type MyBaseType.
func (m *MyBaseType) GetMyBaseType() *MyBaseType { return m }

type MyDerivedType struct {
	// REQUIRED
	Kind   *MyKind
	Helper *MyBaseHelperType
	PropB1 *string
	PropD1 *string
}

// GetMyBaseType implements the MyBaseTypeClassification interface for type MyDerivedType.
func (m *MyDerivedType) GetMyBaseType() *MyBaseType {
	return &MyBaseType{
		Kind:   m.Kind,
		PropB1: m.PropB1,
		Helper: m.Helper,
	}
}

// PolymorphicrecursiveClientGetValidOptions contains the optional parameters for the PolymorphicrecursiveClient.GetValid
// method.
type PolymorphicrecursiveClientGetValidOptions struct {
	// placeholder for future optional parameters
}

// PolymorphicrecursiveClientPutValidOptions contains the optional parameters for the PolymorphicrecursiveClient.PutValid
// method.
type PolymorphicrecursiveClientPutValidOptions struct {
	// placeholder for future optional parameters
}

// PolymorphismClientGetComplicatedOptions contains the optional parameters for the PolymorphismClient.GetComplicated method.
type PolymorphismClientGetComplicatedOptions struct {
	// placeholder for future optional parameters
}

// PolymorphismClientGetComposedWithDiscriminatorOptions contains the optional parameters for the PolymorphismClient.GetComposedWithDiscriminator
// method.
type PolymorphismClientGetComposedWithDiscriminatorOptions struct {
	// placeholder for future optional parameters
}

// PolymorphismClientGetComposedWithoutDiscriminatorOptions contains the optional parameters for the PolymorphismClient.GetComposedWithoutDiscriminator
// method.
type PolymorphismClientGetComposedWithoutDiscriminatorOptions struct {
	// placeholder for future optional parameters
}

// PolymorphismClientGetDotSyntaxOptions contains the optional parameters for the PolymorphismClient.GetDotSyntax method.
type PolymorphismClientGetDotSyntaxOptions struct {
	// placeholder for future optional parameters
}

// PolymorphismClientGetValidOptions contains the optional parameters for the PolymorphismClient.GetValid method.
type PolymorphismClientGetValidOptions struct {
	// placeholder for future optional parameters
}

// PolymorphismClientPutComplicatedOptions contains the optional parameters for the PolymorphismClient.PutComplicated method.
type PolymorphismClientPutComplicatedOptions struct {
	// placeholder for future optional parameters
}

// PolymorphismClientPutMissingDiscriminatorOptions contains the optional parameters for the PolymorphismClient.PutMissingDiscriminator
// method.
type PolymorphismClientPutMissingDiscriminatorOptions struct {
	// placeholder for future optional parameters
}

// PolymorphismClientPutValidMissingRequiredOptions contains the optional parameters for the PolymorphismClient.PutValidMissingRequired
// method.
type PolymorphismClientPutValidMissingRequiredOptions struct {
	// placeholder for future optional parameters
}

// PolymorphismClientPutValidOptions contains the optional parameters for the PolymorphismClient.PutValid method.
type PolymorphismClientPutValidOptions struct {
	// placeholder for future optional parameters
}

// PrimitiveClientGetBoolOptions contains the optional parameters for the PrimitiveClient.GetBool method.
type PrimitiveClientGetBoolOptions struct {
	// placeholder for future optional parameters
}

// PrimitiveClientGetByteOptions contains the optional parameters for the PrimitiveClient.GetByte method.
type PrimitiveClientGetByteOptions struct {
	// placeholder for future optional parameters
}

// PrimitiveClientGetDateOptions contains the optional parameters for the PrimitiveClient.GetDate method.
type PrimitiveClientGetDateOptions struct {
	// placeholder for future optional parameters
}

// PrimitiveClientGetDateTimeOptions contains the optional parameters for the PrimitiveClient.GetDateTime method.
type PrimitiveClientGetDateTimeOptions struct {
	// placeholder for future optional parameters
}

// PrimitiveClientGetDateTimeRFC1123Options contains the optional parameters for the PrimitiveClient.GetDateTimeRFC1123 method.
type PrimitiveClientGetDateTimeRFC1123Options struct {
	// placeholder for future optional parameters
}

// PrimitiveClientGetDoubleOptions contains the optional parameters for the PrimitiveClient.GetDouble method.
type PrimitiveClientGetDoubleOptions struct {
	// placeholder for future optional parameters
}

// PrimitiveClientGetDurationOptions contains the optional parameters for the PrimitiveClient.GetDuration method.
type PrimitiveClientGetDurationOptions struct {
	// placeholder for future optional parameters
}

// PrimitiveClientGetFloatOptions contains the optional parameters for the PrimitiveClient.GetFloat method.
type PrimitiveClientGetFloatOptions struct {
	// placeholder for future optional parameters
}

// PrimitiveClientGetIntOptions contains the optional parameters for the PrimitiveClient.GetInt method.
type PrimitiveClientGetIntOptions struct {
	// placeholder for future optional parameters
}

// PrimitiveClientGetLongOptions contains the optional parameters for the PrimitiveClient.GetLong method.
type PrimitiveClientGetLongOptions struct {
	// placeholder for future optional parameters
}

// PrimitiveClientGetStringOptions contains the optional parameters for the PrimitiveClient.GetString method.
type PrimitiveClientGetStringOptions struct {
	// placeholder for future optional parameters
}

// PrimitiveClientPutBoolOptions contains the optional parameters for the PrimitiveClient.PutBool method.
type PrimitiveClientPutBoolOptions struct {
	// placeholder for future optional parameters
}

// PrimitiveClientPutByteOptions contains the optional parameters for the PrimitiveClient.PutByte method.
type PrimitiveClientPutByteOptions struct {
	// placeholder for future optional parameters
}

// PrimitiveClientPutDateOptions contains the optional parameters for the PrimitiveClient.PutDate method.
type PrimitiveClientPutDateOptions struct {
	// placeholder for future optional parameters
}

// PrimitiveClientPutDateTimeOptions contains the optional parameters for the PrimitiveClient.PutDateTime method.
type PrimitiveClientPutDateTimeOptions struct {
	// placeholder for future optional parameters
}

// PrimitiveClientPutDateTimeRFC1123Options contains the optional parameters for the PrimitiveClient.PutDateTimeRFC1123 method.
type PrimitiveClientPutDateTimeRFC1123Options struct {
	// placeholder for future optional parameters
}

// PrimitiveClientPutDoubleOptions contains the optional parameters for the PrimitiveClient.PutDouble method.
type PrimitiveClientPutDoubleOptions struct {
	// placeholder for future optional parameters
}

// PrimitiveClientPutDurationOptions contains the optional parameters for the PrimitiveClient.PutDuration method.
type PrimitiveClientPutDurationOptions struct {
	// placeholder for future optional parameters
}

// PrimitiveClientPutFloatOptions contains the optional parameters for the PrimitiveClient.PutFloat method.
type PrimitiveClientPutFloatOptions struct {
	// placeholder for future optional parameters
}

// PrimitiveClientPutIntOptions contains the optional parameters for the PrimitiveClient.PutInt method.
type PrimitiveClientPutIntOptions struct {
	// placeholder for future optional parameters
}

// PrimitiveClientPutLongOptions contains the optional parameters for the PrimitiveClient.PutLong method.
type PrimitiveClientPutLongOptions struct {
	// placeholder for future optional parameters
}

// PrimitiveClientPutStringOptions contains the optional parameters for the PrimitiveClient.PutString method.
type PrimitiveClientPutStringOptions struct {
	// placeholder for future optional parameters
}

type ReadonlyObj struct {
	Size *int32

	// READ-ONLY
	ID *string
}

// ReadonlypropertyClientGetValidOptions contains the optional parameters for the ReadonlypropertyClient.GetValid method.
type ReadonlypropertyClientGetValidOptions struct {
	// placeholder for future optional parameters
}

// ReadonlypropertyClientPutValidOptions contains the optional parameters for the ReadonlypropertyClient.PutValid method.
type ReadonlypropertyClientPutValidOptions struct {
	// placeholder for future optional parameters
}

// SalmonClassification provides polymorphic access to related types.
// Call the interface's GetSalmon() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *Salmon, *SmartSalmon
type SalmonClassification interface {
	FishClassification
	// GetSalmon returns the Salmon content of the underlying type.
	GetSalmon() *Salmon
}

type Salmon struct {
	// REQUIRED
	Fishtype *string

	// REQUIRED
	Length   *float32
	Iswild   *bool
	Location *string
	Siblings []FishClassification
	Species  *string
}

// GetFish implements the FishClassification interface for type Salmon.
func (s *Salmon) GetFish() *Fish {
	return &Fish{
		Fishtype: s.Fishtype,
		Species:  s.Species,
		Length:   s.Length,
		Siblings: s.Siblings,
	}
}

// GetSalmon implements the SalmonClassification interface for type Salmon.
func (s *Salmon) GetSalmon() *Salmon { return s }

type Sawshark struct {
	// REQUIRED
	Birthday *time.Time

	// REQUIRED
	Fishtype *string

	// REQUIRED
	Length   *float32
	Age      *int32
	Picture  []byte
	Siblings []FishClassification
	Species  *string
}

// GetFish implements the FishClassification interface for type Sawshark.
func (s *Sawshark) GetFish() *Fish {
	return &Fish{
		Fishtype: s.Fishtype,
		Species:  s.Species,
		Length:   s.Length,
		Siblings: s.Siblings,
	}
}

// GetShark implements the SharkClassification interface for type Sawshark.
func (s *Sawshark) GetShark() *Shark {
	return &Shark{
		Age:      s.Age,
		Birthday: s.Birthday,
		Fishtype: s.Fishtype,
		Species:  s.Species,
		Length:   s.Length,
		Siblings: s.Siblings,
	}
}

// SharkClassification provides polymorphic access to related types.
// Call the interface's GetShark() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *Cookiecuttershark, *Goblinshark, *Sawshark, *Shark
type SharkClassification interface {
	FishClassification
	// GetShark returns the Shark content of the underlying type.
	GetShark() *Shark
}

type Shark struct {
	// REQUIRED
	Birthday *time.Time

	// REQUIRED
	Fishtype *string

	// REQUIRED
	Length   *float32
	Age      *int32
	Siblings []FishClassification
	Species  *string
}

// GetFish implements the FishClassification interface for type Shark.
func (s *Shark) GetFish() *Fish {
	return &Fish{
		Fishtype: s.Fishtype,
		Species:  s.Species,
		Length:   s.Length,
		Siblings: s.Siblings,
	}
}

// GetShark implements the SharkClassification interface for type Shark.
func (s *Shark) GetShark() *Shark { return s }

type Siamese struct {
	Breed *string
	Color *string
	Hates []*Dog
	ID    *int32
	Name  *string
}

type SmartSalmon struct {
	// REQUIRED
	Fishtype *string

	// REQUIRED
	Length *float32

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any
	CollegeDegree        *string
	Iswild               *bool
	Location             *string
	Siblings             []FishClassification
	Species              *string
}

// GetFish implements the FishClassification interface for type SmartSalmon.
func (s *SmartSalmon) GetFish() *Fish {
	return &Fish{
		Fishtype: s.Fishtype,
		Species:  s.Species,
		Length:   s.Length,
		Siblings: s.Siblings,
	}
}

// GetSalmon implements the SalmonClassification interface for type SmartSalmon.
func (s *SmartSalmon) GetSalmon() *Salmon {
	return &Salmon{
		Location: s.Location,
		Iswild:   s.Iswild,
		Fishtype: s.Fishtype,
		Species:  s.Species,
		Length:   s.Length,
		Siblings: s.Siblings,
	}
}

type StringWrapper struct {
	Empty *string
	Field *string
	Null  *string
}
