//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package urlgroup

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// PathItemsClient contains the methods for the PathItems group.
// Don't use this type directly, use a constructor function instead.
type PathItemsClient struct {
	internal          *azcore.Client
	globalStringPath  string
	globalStringQuery *string
}

// GetAllWithValues - send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath', localStringPath='localStringPath',
// globalStringQuery='globalStringQuery', pathItemStringQuery='pathItemStringQuery',
// localStringQuery='localStringQuery'
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - pathItemStringPath - A string value 'pathItemStringPath' that appears in the path
//   - localStringPath - should contain value 'localStringPath'
//   - options - PathItemsClientGetAllWithValuesOptions contains the optional parameters for the PathItemsClient.GetAllWithValues
//     method.
func (client *PathItemsClient) GetAllWithValues(ctx context.Context, pathItemStringPath string, localStringPath string, options *PathItemsClientGetAllWithValuesOptions) (resp PathItemsClientGetAllWithValuesResponse, err error) {
	ctx, endSpan := runtime.StartSpan(ctx, "PathItemsClient.GetAllWithValues", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getAllWithValuesCreateRequest(ctx, pathItemStringPath, localStringPath, options)
	if err != nil {
		return
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return
	}
	return
}

// getAllWithValuesCreateRequest creates the GetAllWithValues request.
func (client *PathItemsClient) getAllWithValuesCreateRequest(ctx context.Context, pathItemStringPath string, localStringPath string, options *PathItemsClientGetAllWithValuesOptions) (*policy.Request, error) {
	urlPath := "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/globalStringQuery/pathItemStringQuery/localStringQuery"
	if pathItemStringPath == "" {
		return nil, errors.New("parameter pathItemStringPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{pathItemStringPath}", url.PathEscape(pathItemStringPath))
	if client.globalStringPath == "" {
		return nil, errors.New("parameter client.globalStringPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{globalStringPath}", url.PathEscape(client.globalStringPath))
	if localStringPath == "" {
		return nil, errors.New("parameter localStringPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{localStringPath}", url.PathEscape(localStringPath))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.PathItemStringQuery != nil {
		reqQP.Set("pathItemStringQuery", *options.PathItemStringQuery)
	}
	if client.globalStringQuery != nil {
		reqQP.Set("globalStringQuery", *client.globalStringQuery)
	}
	if options != nil && options.LocalStringQuery != nil {
		reqQP.Set("localStringQuery", *options.LocalStringQuery)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetGlobalAndLocalQueryNull - send globalStringPath=globalStringPath, pathItemStringPath='pathItemStringPath', localStringPath='localStringPath',
// globalStringQuery=null, pathItemStringQuery='pathItemStringQuery',
// localStringQuery=null
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - pathItemStringPath - A string value 'pathItemStringPath' that appears in the path
//   - localStringPath - should contain value 'localStringPath'
//   - options - PathItemsClientGetGlobalAndLocalQueryNullOptions contains the optional parameters for the PathItemsClient.GetGlobalAndLocalQueryNull
//     method.
func (client *PathItemsClient) GetGlobalAndLocalQueryNull(ctx context.Context, pathItemStringPath string, localStringPath string, options *PathItemsClientGetGlobalAndLocalQueryNullOptions) (resp PathItemsClientGetGlobalAndLocalQueryNullResponse, err error) {
	ctx, endSpan := runtime.StartSpan(ctx, "PathItemsClient.GetGlobalAndLocalQueryNull", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getGlobalAndLocalQueryNullCreateRequest(ctx, pathItemStringPath, localStringPath, options)
	if err != nil {
		return
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return
	}
	return
}

// getGlobalAndLocalQueryNullCreateRequest creates the GetGlobalAndLocalQueryNull request.
func (client *PathItemsClient) getGlobalAndLocalQueryNullCreateRequest(ctx context.Context, pathItemStringPath string, localStringPath string, options *PathItemsClientGetGlobalAndLocalQueryNullOptions) (*policy.Request, error) {
	urlPath := "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/null/pathItemStringQuery/null"
	if pathItemStringPath == "" {
		return nil, errors.New("parameter pathItemStringPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{pathItemStringPath}", url.PathEscape(pathItemStringPath))
	if client.globalStringPath == "" {
		return nil, errors.New("parameter client.globalStringPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{globalStringPath}", url.PathEscape(client.globalStringPath))
	if localStringPath == "" {
		return nil, errors.New("parameter localStringPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{localStringPath}", url.PathEscape(localStringPath))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.PathItemStringQuery != nil {
		reqQP.Set("pathItemStringQuery", *options.PathItemStringQuery)
	}
	if client.globalStringQuery != nil {
		reqQP.Set("globalStringQuery", *client.globalStringQuery)
	}
	if options != nil && options.LocalStringQuery != nil {
		reqQP.Set("localStringQuery", *options.LocalStringQuery)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetGlobalQueryNull - send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath', localStringPath='localStringPath',
// globalStringQuery=null, pathItemStringQuery='pathItemStringQuery',
// localStringQuery='localStringQuery'
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - pathItemStringPath - A string value 'pathItemStringPath' that appears in the path
//   - localStringPath - should contain value 'localStringPath'
//   - options - PathItemsClientGetGlobalQueryNullOptions contains the optional parameters for the PathItemsClient.GetGlobalQueryNull
//     method.
func (client *PathItemsClient) GetGlobalQueryNull(ctx context.Context, pathItemStringPath string, localStringPath string, options *PathItemsClientGetGlobalQueryNullOptions) (resp PathItemsClientGetGlobalQueryNullResponse, err error) {
	ctx, endSpan := runtime.StartSpan(ctx, "PathItemsClient.GetGlobalQueryNull", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getGlobalQueryNullCreateRequest(ctx, pathItemStringPath, localStringPath, options)
	if err != nil {
		return
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return
	}
	return
}

// getGlobalQueryNullCreateRequest creates the GetGlobalQueryNull request.
func (client *PathItemsClient) getGlobalQueryNullCreateRequest(ctx context.Context, pathItemStringPath string, localStringPath string, options *PathItemsClientGetGlobalQueryNullOptions) (*policy.Request, error) {
	urlPath := "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/null/pathItemStringQuery/localStringQuery"
	if pathItemStringPath == "" {
		return nil, errors.New("parameter pathItemStringPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{pathItemStringPath}", url.PathEscape(pathItemStringPath))
	if client.globalStringPath == "" {
		return nil, errors.New("parameter client.globalStringPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{globalStringPath}", url.PathEscape(client.globalStringPath))
	if localStringPath == "" {
		return nil, errors.New("parameter localStringPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{localStringPath}", url.PathEscape(localStringPath))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.PathItemStringQuery != nil {
		reqQP.Set("pathItemStringQuery", *options.PathItemStringQuery)
	}
	if client.globalStringQuery != nil {
		reqQP.Set("globalStringQuery", *client.globalStringQuery)
	}
	if options != nil && options.LocalStringQuery != nil {
		reqQP.Set("localStringQuery", *options.LocalStringQuery)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetLocalPathItemQueryNull - send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath', localStringPath='localStringPath',
// globalStringQuery='globalStringQuery', pathItemStringQuery=null,
// localStringQuery=null
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - pathItemStringPath - A string value 'pathItemStringPath' that appears in the path
//   - localStringPath - should contain value 'localStringPath'
//   - options - PathItemsClientGetLocalPathItemQueryNullOptions contains the optional parameters for the PathItemsClient.GetLocalPathItemQueryNull
//     method.
func (client *PathItemsClient) GetLocalPathItemQueryNull(ctx context.Context, pathItemStringPath string, localStringPath string, options *PathItemsClientGetLocalPathItemQueryNullOptions) (resp PathItemsClientGetLocalPathItemQueryNullResponse, err error) {
	ctx, endSpan := runtime.StartSpan(ctx, "PathItemsClient.GetLocalPathItemQueryNull", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getLocalPathItemQueryNullCreateRequest(ctx, pathItemStringPath, localStringPath, options)
	if err != nil {
		return
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return
	}
	return
}

// getLocalPathItemQueryNullCreateRequest creates the GetLocalPathItemQueryNull request.
func (client *PathItemsClient) getLocalPathItemQueryNullCreateRequest(ctx context.Context, pathItemStringPath string, localStringPath string, options *PathItemsClientGetLocalPathItemQueryNullOptions) (*policy.Request, error) {
	urlPath := "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/globalStringQuery/null/null"
	if pathItemStringPath == "" {
		return nil, errors.New("parameter pathItemStringPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{pathItemStringPath}", url.PathEscape(pathItemStringPath))
	if client.globalStringPath == "" {
		return nil, errors.New("parameter client.globalStringPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{globalStringPath}", url.PathEscape(client.globalStringPath))
	if localStringPath == "" {
		return nil, errors.New("parameter localStringPath cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{localStringPath}", url.PathEscape(localStringPath))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.PathItemStringQuery != nil {
		reqQP.Set("pathItemStringQuery", *options.PathItemStringQuery)
	}
	if client.globalStringQuery != nil {
		reqQP.Set("globalStringQuery", *client.globalStringQuery)
	}
	if options != nil && options.LocalStringQuery != nil {
		reqQP.Set("localStringQuery", *options.LocalStringQuery)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}
