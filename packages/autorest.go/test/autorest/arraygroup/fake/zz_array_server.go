//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	"generatortests/arraygroup"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"time"
)

// ArrayServer is a fake server for instances of the arraygroup.ArrayClient type.
type ArrayServer struct {
	// GetArrayEmpty is the fake for method ArrayClient.GetArrayEmpty
	// HTTP status codes to indicate success: http.StatusOK
	GetArrayEmpty func(ctx context.Context, options *arraygroup.ArrayClientGetArrayEmptyOptions) (resp azfake.Responder[arraygroup.ArrayClientGetArrayEmptyResponse], errResp azfake.ErrorResponder)

	// GetArrayItemEmpty is the fake for method ArrayClient.GetArrayItemEmpty
	// HTTP status codes to indicate success: http.StatusOK
	GetArrayItemEmpty func(ctx context.Context, options *arraygroup.ArrayClientGetArrayItemEmptyOptions) (resp azfake.Responder[arraygroup.ArrayClientGetArrayItemEmptyResponse], errResp azfake.ErrorResponder)

	// GetArrayItemNull is the fake for method ArrayClient.GetArrayItemNull
	// HTTP status codes to indicate success: http.StatusOK
	GetArrayItemNull func(ctx context.Context, options *arraygroup.ArrayClientGetArrayItemNullOptions) (resp azfake.Responder[arraygroup.ArrayClientGetArrayItemNullResponse], errResp azfake.ErrorResponder)

	// GetArrayNull is the fake for method ArrayClient.GetArrayNull
	// HTTP status codes to indicate success: http.StatusOK
	GetArrayNull func(ctx context.Context, options *arraygroup.ArrayClientGetArrayNullOptions) (resp azfake.Responder[arraygroup.ArrayClientGetArrayNullResponse], errResp azfake.ErrorResponder)

	// GetArrayValid is the fake for method ArrayClient.GetArrayValid
	// HTTP status codes to indicate success: http.StatusOK
	GetArrayValid func(ctx context.Context, options *arraygroup.ArrayClientGetArrayValidOptions) (resp azfake.Responder[arraygroup.ArrayClientGetArrayValidResponse], errResp azfake.ErrorResponder)

	// GetBase64URL is the fake for method ArrayClient.GetBase64URL
	// HTTP status codes to indicate success: http.StatusOK
	GetBase64URL func(ctx context.Context, options *arraygroup.ArrayClientGetBase64URLOptions) (resp azfake.Responder[arraygroup.ArrayClientGetBase64URLResponse], errResp azfake.ErrorResponder)

	// GetBooleanInvalidNull is the fake for method ArrayClient.GetBooleanInvalidNull
	// HTTP status codes to indicate success: http.StatusOK
	GetBooleanInvalidNull func(ctx context.Context, options *arraygroup.ArrayClientGetBooleanInvalidNullOptions) (resp azfake.Responder[arraygroup.ArrayClientGetBooleanInvalidNullResponse], errResp azfake.ErrorResponder)

	// GetBooleanInvalidString is the fake for method ArrayClient.GetBooleanInvalidString
	// HTTP status codes to indicate success: http.StatusOK
	GetBooleanInvalidString func(ctx context.Context, options *arraygroup.ArrayClientGetBooleanInvalidStringOptions) (resp azfake.Responder[arraygroup.ArrayClientGetBooleanInvalidStringResponse], errResp azfake.ErrorResponder)

	// GetBooleanTfft is the fake for method ArrayClient.GetBooleanTfft
	// HTTP status codes to indicate success: http.StatusOK
	GetBooleanTfft func(ctx context.Context, options *arraygroup.ArrayClientGetBooleanTfftOptions) (resp azfake.Responder[arraygroup.ArrayClientGetBooleanTfftResponse], errResp azfake.ErrorResponder)

	// GetByteInvalidNull is the fake for method ArrayClient.GetByteInvalidNull
	// HTTP status codes to indicate success: http.StatusOK
	GetByteInvalidNull func(ctx context.Context, options *arraygroup.ArrayClientGetByteInvalidNullOptions) (resp azfake.Responder[arraygroup.ArrayClientGetByteInvalidNullResponse], errResp azfake.ErrorResponder)

	// GetByteValid is the fake for method ArrayClient.GetByteValid
	// HTTP status codes to indicate success: http.StatusOK
	GetByteValid func(ctx context.Context, options *arraygroup.ArrayClientGetByteValidOptions) (resp azfake.Responder[arraygroup.ArrayClientGetByteValidResponse], errResp azfake.ErrorResponder)

	// GetComplexEmpty is the fake for method ArrayClient.GetComplexEmpty
	// HTTP status codes to indicate success: http.StatusOK
	GetComplexEmpty func(ctx context.Context, options *arraygroup.ArrayClientGetComplexEmptyOptions) (resp azfake.Responder[arraygroup.ArrayClientGetComplexEmptyResponse], errResp azfake.ErrorResponder)

	// GetComplexItemEmpty is the fake for method ArrayClient.GetComplexItemEmpty
	// HTTP status codes to indicate success: http.StatusOK
	GetComplexItemEmpty func(ctx context.Context, options *arraygroup.ArrayClientGetComplexItemEmptyOptions) (resp azfake.Responder[arraygroup.ArrayClientGetComplexItemEmptyResponse], errResp azfake.ErrorResponder)

	// GetComplexItemNull is the fake for method ArrayClient.GetComplexItemNull
	// HTTP status codes to indicate success: http.StatusOK
	GetComplexItemNull func(ctx context.Context, options *arraygroup.ArrayClientGetComplexItemNullOptions) (resp azfake.Responder[arraygroup.ArrayClientGetComplexItemNullResponse], errResp azfake.ErrorResponder)

	// GetComplexNull is the fake for method ArrayClient.GetComplexNull
	// HTTP status codes to indicate success: http.StatusOK
	GetComplexNull func(ctx context.Context, options *arraygroup.ArrayClientGetComplexNullOptions) (resp azfake.Responder[arraygroup.ArrayClientGetComplexNullResponse], errResp azfake.ErrorResponder)

	// GetComplexValid is the fake for method ArrayClient.GetComplexValid
	// HTTP status codes to indicate success: http.StatusOK
	GetComplexValid func(ctx context.Context, options *arraygroup.ArrayClientGetComplexValidOptions) (resp azfake.Responder[arraygroup.ArrayClientGetComplexValidResponse], errResp azfake.ErrorResponder)

	// GetDateInvalidChars is the fake for method ArrayClient.GetDateInvalidChars
	// HTTP status codes to indicate success: http.StatusOK
	GetDateInvalidChars func(ctx context.Context, options *arraygroup.ArrayClientGetDateInvalidCharsOptions) (resp azfake.Responder[arraygroup.ArrayClientGetDateInvalidCharsResponse], errResp azfake.ErrorResponder)

	// GetDateInvalidNull is the fake for method ArrayClient.GetDateInvalidNull
	// HTTP status codes to indicate success: http.StatusOK
	GetDateInvalidNull func(ctx context.Context, options *arraygroup.ArrayClientGetDateInvalidNullOptions) (resp azfake.Responder[arraygroup.ArrayClientGetDateInvalidNullResponse], errResp azfake.ErrorResponder)

	// GetDateTimeInvalidChars is the fake for method ArrayClient.GetDateTimeInvalidChars
	// HTTP status codes to indicate success: http.StatusOK
	GetDateTimeInvalidChars func(ctx context.Context, options *arraygroup.ArrayClientGetDateTimeInvalidCharsOptions) (resp azfake.Responder[arraygroup.ArrayClientGetDateTimeInvalidCharsResponse], errResp azfake.ErrorResponder)

	// GetDateTimeInvalidNull is the fake for method ArrayClient.GetDateTimeInvalidNull
	// HTTP status codes to indicate success: http.StatusOK
	GetDateTimeInvalidNull func(ctx context.Context, options *arraygroup.ArrayClientGetDateTimeInvalidNullOptions) (resp azfake.Responder[arraygroup.ArrayClientGetDateTimeInvalidNullResponse], errResp azfake.ErrorResponder)

	// GetDateTimeRFC1123Valid is the fake for method ArrayClient.GetDateTimeRFC1123Valid
	// HTTP status codes to indicate success: http.StatusOK
	GetDateTimeRFC1123Valid func(ctx context.Context, options *arraygroup.ArrayClientGetDateTimeRFC1123ValidOptions) (resp azfake.Responder[arraygroup.ArrayClientGetDateTimeRFC1123ValidResponse], errResp azfake.ErrorResponder)

	// GetDateTimeValid is the fake for method ArrayClient.GetDateTimeValid
	// HTTP status codes to indicate success: http.StatusOK
	GetDateTimeValid func(ctx context.Context, options *arraygroup.ArrayClientGetDateTimeValidOptions) (resp azfake.Responder[arraygroup.ArrayClientGetDateTimeValidResponse], errResp azfake.ErrorResponder)

	// GetDateValid is the fake for method ArrayClient.GetDateValid
	// HTTP status codes to indicate success: http.StatusOK
	GetDateValid func(ctx context.Context, options *arraygroup.ArrayClientGetDateValidOptions) (resp azfake.Responder[arraygroup.ArrayClientGetDateValidResponse], errResp azfake.ErrorResponder)

	// GetDictionaryEmpty is the fake for method ArrayClient.GetDictionaryEmpty
	// HTTP status codes to indicate success: http.StatusOK
	GetDictionaryEmpty func(ctx context.Context, options *arraygroup.ArrayClientGetDictionaryEmptyOptions) (resp azfake.Responder[arraygroup.ArrayClientGetDictionaryEmptyResponse], errResp azfake.ErrorResponder)

	// GetDictionaryItemEmpty is the fake for method ArrayClient.GetDictionaryItemEmpty
	// HTTP status codes to indicate success: http.StatusOK
	GetDictionaryItemEmpty func(ctx context.Context, options *arraygroup.ArrayClientGetDictionaryItemEmptyOptions) (resp azfake.Responder[arraygroup.ArrayClientGetDictionaryItemEmptyResponse], errResp azfake.ErrorResponder)

	// GetDictionaryItemNull is the fake for method ArrayClient.GetDictionaryItemNull
	// HTTP status codes to indicate success: http.StatusOK
	GetDictionaryItemNull func(ctx context.Context, options *arraygroup.ArrayClientGetDictionaryItemNullOptions) (resp azfake.Responder[arraygroup.ArrayClientGetDictionaryItemNullResponse], errResp azfake.ErrorResponder)

	// GetDictionaryNull is the fake for method ArrayClient.GetDictionaryNull
	// HTTP status codes to indicate success: http.StatusOK
	GetDictionaryNull func(ctx context.Context, options *arraygroup.ArrayClientGetDictionaryNullOptions) (resp azfake.Responder[arraygroup.ArrayClientGetDictionaryNullResponse], errResp azfake.ErrorResponder)

	// GetDictionaryValid is the fake for method ArrayClient.GetDictionaryValid
	// HTTP status codes to indicate success: http.StatusOK
	GetDictionaryValid func(ctx context.Context, options *arraygroup.ArrayClientGetDictionaryValidOptions) (resp azfake.Responder[arraygroup.ArrayClientGetDictionaryValidResponse], errResp azfake.ErrorResponder)

	// GetDoubleInvalidNull is the fake for method ArrayClient.GetDoubleInvalidNull
	// HTTP status codes to indicate success: http.StatusOK
	GetDoubleInvalidNull func(ctx context.Context, options *arraygroup.ArrayClientGetDoubleInvalidNullOptions) (resp azfake.Responder[arraygroup.ArrayClientGetDoubleInvalidNullResponse], errResp azfake.ErrorResponder)

	// GetDoubleInvalidString is the fake for method ArrayClient.GetDoubleInvalidString
	// HTTP status codes to indicate success: http.StatusOK
	GetDoubleInvalidString func(ctx context.Context, options *arraygroup.ArrayClientGetDoubleInvalidStringOptions) (resp azfake.Responder[arraygroup.ArrayClientGetDoubleInvalidStringResponse], errResp azfake.ErrorResponder)

	// GetDoubleValid is the fake for method ArrayClient.GetDoubleValid
	// HTTP status codes to indicate success: http.StatusOK
	GetDoubleValid func(ctx context.Context, options *arraygroup.ArrayClientGetDoubleValidOptions) (resp azfake.Responder[arraygroup.ArrayClientGetDoubleValidResponse], errResp azfake.ErrorResponder)

	// GetDurationValid is the fake for method ArrayClient.GetDurationValid
	// HTTP status codes to indicate success: http.StatusOK
	GetDurationValid func(ctx context.Context, options *arraygroup.ArrayClientGetDurationValidOptions) (resp azfake.Responder[arraygroup.ArrayClientGetDurationValidResponse], errResp azfake.ErrorResponder)

	// GetEmpty is the fake for method ArrayClient.GetEmpty
	// HTTP status codes to indicate success: http.StatusOK
	GetEmpty func(ctx context.Context, options *arraygroup.ArrayClientGetEmptyOptions) (resp azfake.Responder[arraygroup.ArrayClientGetEmptyResponse], errResp azfake.ErrorResponder)

	// GetEnumValid is the fake for method ArrayClient.GetEnumValid
	// HTTP status codes to indicate success: http.StatusOK
	GetEnumValid func(ctx context.Context, options *arraygroup.ArrayClientGetEnumValidOptions) (resp azfake.Responder[arraygroup.ArrayClientGetEnumValidResponse], errResp azfake.ErrorResponder)

	// GetFloatInvalidNull is the fake for method ArrayClient.GetFloatInvalidNull
	// HTTP status codes to indicate success: http.StatusOK
	GetFloatInvalidNull func(ctx context.Context, options *arraygroup.ArrayClientGetFloatInvalidNullOptions) (resp azfake.Responder[arraygroup.ArrayClientGetFloatInvalidNullResponse], errResp azfake.ErrorResponder)

	// GetFloatInvalidString is the fake for method ArrayClient.GetFloatInvalidString
	// HTTP status codes to indicate success: http.StatusOK
	GetFloatInvalidString func(ctx context.Context, options *arraygroup.ArrayClientGetFloatInvalidStringOptions) (resp azfake.Responder[arraygroup.ArrayClientGetFloatInvalidStringResponse], errResp azfake.ErrorResponder)

	// GetFloatValid is the fake for method ArrayClient.GetFloatValid
	// HTTP status codes to indicate success: http.StatusOK
	GetFloatValid func(ctx context.Context, options *arraygroup.ArrayClientGetFloatValidOptions) (resp azfake.Responder[arraygroup.ArrayClientGetFloatValidResponse], errResp azfake.ErrorResponder)

	// GetIntInvalidNull is the fake for method ArrayClient.GetIntInvalidNull
	// HTTP status codes to indicate success: http.StatusOK
	GetIntInvalidNull func(ctx context.Context, options *arraygroup.ArrayClientGetIntInvalidNullOptions) (resp azfake.Responder[arraygroup.ArrayClientGetIntInvalidNullResponse], errResp azfake.ErrorResponder)

	// GetIntInvalidString is the fake for method ArrayClient.GetIntInvalidString
	// HTTP status codes to indicate success: http.StatusOK
	GetIntInvalidString func(ctx context.Context, options *arraygroup.ArrayClientGetIntInvalidStringOptions) (resp azfake.Responder[arraygroup.ArrayClientGetIntInvalidStringResponse], errResp azfake.ErrorResponder)

	// GetIntegerValid is the fake for method ArrayClient.GetIntegerValid
	// HTTP status codes to indicate success: http.StatusOK
	GetIntegerValid func(ctx context.Context, options *arraygroup.ArrayClientGetIntegerValidOptions) (resp azfake.Responder[arraygroup.ArrayClientGetIntegerValidResponse], errResp azfake.ErrorResponder)

	// GetInvalid is the fake for method ArrayClient.GetInvalid
	// HTTP status codes to indicate success: http.StatusOK
	GetInvalid func(ctx context.Context, options *arraygroup.ArrayClientGetInvalidOptions) (resp azfake.Responder[arraygroup.ArrayClientGetInvalidResponse], errResp azfake.ErrorResponder)

	// GetLongInvalidNull is the fake for method ArrayClient.GetLongInvalidNull
	// HTTP status codes to indicate success: http.StatusOK
	GetLongInvalidNull func(ctx context.Context, options *arraygroup.ArrayClientGetLongInvalidNullOptions) (resp azfake.Responder[arraygroup.ArrayClientGetLongInvalidNullResponse], errResp azfake.ErrorResponder)

	// GetLongInvalidString is the fake for method ArrayClient.GetLongInvalidString
	// HTTP status codes to indicate success: http.StatusOK
	GetLongInvalidString func(ctx context.Context, options *arraygroup.ArrayClientGetLongInvalidStringOptions) (resp azfake.Responder[arraygroup.ArrayClientGetLongInvalidStringResponse], errResp azfake.ErrorResponder)

	// GetLongValid is the fake for method ArrayClient.GetLongValid
	// HTTP status codes to indicate success: http.StatusOK
	GetLongValid func(ctx context.Context, options *arraygroup.ArrayClientGetLongValidOptions) (resp azfake.Responder[arraygroup.ArrayClientGetLongValidResponse], errResp azfake.ErrorResponder)

	// GetNull is the fake for method ArrayClient.GetNull
	// HTTP status codes to indicate success: http.StatusOK
	GetNull func(ctx context.Context, options *arraygroup.ArrayClientGetNullOptions) (resp azfake.Responder[arraygroup.ArrayClientGetNullResponse], errResp azfake.ErrorResponder)

	// GetStringEnumValid is the fake for method ArrayClient.GetStringEnumValid
	// HTTP status codes to indicate success: http.StatusOK
	GetStringEnumValid func(ctx context.Context, options *arraygroup.ArrayClientGetStringEnumValidOptions) (resp azfake.Responder[arraygroup.ArrayClientGetStringEnumValidResponse], errResp azfake.ErrorResponder)

	// GetStringValid is the fake for method ArrayClient.GetStringValid
	// HTTP status codes to indicate success: http.StatusOK
	GetStringValid func(ctx context.Context, options *arraygroup.ArrayClientGetStringValidOptions) (resp azfake.Responder[arraygroup.ArrayClientGetStringValidResponse], errResp azfake.ErrorResponder)

	// GetStringWithInvalid is the fake for method ArrayClient.GetStringWithInvalid
	// HTTP status codes to indicate success: http.StatusOK
	GetStringWithInvalid func(ctx context.Context, options *arraygroup.ArrayClientGetStringWithInvalidOptions) (resp azfake.Responder[arraygroup.ArrayClientGetStringWithInvalidResponse], errResp azfake.ErrorResponder)

	// GetStringWithNull is the fake for method ArrayClient.GetStringWithNull
	// HTTP status codes to indicate success: http.StatusOK
	GetStringWithNull func(ctx context.Context, options *arraygroup.ArrayClientGetStringWithNullOptions) (resp azfake.Responder[arraygroup.ArrayClientGetStringWithNullResponse], errResp azfake.ErrorResponder)

	// GetUUIDInvalidChars is the fake for method ArrayClient.GetUUIDInvalidChars
	// HTTP status codes to indicate success: http.StatusOK
	GetUUIDInvalidChars func(ctx context.Context, options *arraygroup.ArrayClientGetUUIDInvalidCharsOptions) (resp azfake.Responder[arraygroup.ArrayClientGetUUIDInvalidCharsResponse], errResp azfake.ErrorResponder)

	// GetUUIDValid is the fake for method ArrayClient.GetUUIDValid
	// HTTP status codes to indicate success: http.StatusOK
	GetUUIDValid func(ctx context.Context, options *arraygroup.ArrayClientGetUUIDValidOptions) (resp azfake.Responder[arraygroup.ArrayClientGetUUIDValidResponse], errResp azfake.ErrorResponder)

	// PutArrayValid is the fake for method ArrayClient.PutArrayValid
	// HTTP status codes to indicate success: http.StatusOK
	PutArrayValid func(ctx context.Context, arrayBody [][]*string, options *arraygroup.ArrayClientPutArrayValidOptions) (resp azfake.Responder[arraygroup.ArrayClientPutArrayValidResponse], errResp azfake.ErrorResponder)

	// PutBooleanTfft is the fake for method ArrayClient.PutBooleanTfft
	// HTTP status codes to indicate success: http.StatusOK
	PutBooleanTfft func(ctx context.Context, arrayBody []*bool, options *arraygroup.ArrayClientPutBooleanTfftOptions) (resp azfake.Responder[arraygroup.ArrayClientPutBooleanTfftResponse], errResp azfake.ErrorResponder)

	// PutByteValid is the fake for method ArrayClient.PutByteValid
	// HTTP status codes to indicate success: http.StatusOK
	PutByteValid func(ctx context.Context, arrayBody [][]byte, options *arraygroup.ArrayClientPutByteValidOptions) (resp azfake.Responder[arraygroup.ArrayClientPutByteValidResponse], errResp azfake.ErrorResponder)

	// PutComplexValid is the fake for method ArrayClient.PutComplexValid
	// HTTP status codes to indicate success: http.StatusOK
	PutComplexValid func(ctx context.Context, arrayBody []*arraygroup.Product, options *arraygroup.ArrayClientPutComplexValidOptions) (resp azfake.Responder[arraygroup.ArrayClientPutComplexValidResponse], errResp azfake.ErrorResponder)

	// PutDateTimeRFC1123Valid is the fake for method ArrayClient.PutDateTimeRFC1123Valid
	// HTTP status codes to indicate success: http.StatusOK
	PutDateTimeRFC1123Valid func(ctx context.Context, arrayBody []*time.Time, options *arraygroup.ArrayClientPutDateTimeRFC1123ValidOptions) (resp azfake.Responder[arraygroup.ArrayClientPutDateTimeRFC1123ValidResponse], errResp azfake.ErrorResponder)

	// PutDateTimeValid is the fake for method ArrayClient.PutDateTimeValid
	// HTTP status codes to indicate success: http.StatusOK
	PutDateTimeValid func(ctx context.Context, arrayBody []*time.Time, options *arraygroup.ArrayClientPutDateTimeValidOptions) (resp azfake.Responder[arraygroup.ArrayClientPutDateTimeValidResponse], errResp azfake.ErrorResponder)

	// PutDateValid is the fake for method ArrayClient.PutDateValid
	// HTTP status codes to indicate success: http.StatusOK
	PutDateValid func(ctx context.Context, arrayBody []*time.Time, options *arraygroup.ArrayClientPutDateValidOptions) (resp azfake.Responder[arraygroup.ArrayClientPutDateValidResponse], errResp azfake.ErrorResponder)

	// PutDictionaryValid is the fake for method ArrayClient.PutDictionaryValid
	// HTTP status codes to indicate success: http.StatusOK
	PutDictionaryValid func(ctx context.Context, arrayBody []map[string]*string, options *arraygroup.ArrayClientPutDictionaryValidOptions) (resp azfake.Responder[arraygroup.ArrayClientPutDictionaryValidResponse], errResp azfake.ErrorResponder)

	// PutDoubleValid is the fake for method ArrayClient.PutDoubleValid
	// HTTP status codes to indicate success: http.StatusOK
	PutDoubleValid func(ctx context.Context, arrayBody []*float64, options *arraygroup.ArrayClientPutDoubleValidOptions) (resp azfake.Responder[arraygroup.ArrayClientPutDoubleValidResponse], errResp azfake.ErrorResponder)

	// PutDurationValid is the fake for method ArrayClient.PutDurationValid
	// HTTP status codes to indicate success: http.StatusOK
	PutDurationValid func(ctx context.Context, arrayBody []*string, options *arraygroup.ArrayClientPutDurationValidOptions) (resp azfake.Responder[arraygroup.ArrayClientPutDurationValidResponse], errResp azfake.ErrorResponder)

	// PutEmpty is the fake for method ArrayClient.PutEmpty
	// HTTP status codes to indicate success: http.StatusOK
	PutEmpty func(ctx context.Context, arrayBody []*string, options *arraygroup.ArrayClientPutEmptyOptions) (resp azfake.Responder[arraygroup.ArrayClientPutEmptyResponse], errResp azfake.ErrorResponder)

	// PutEnumValid is the fake for method ArrayClient.PutEnumValid
	// HTTP status codes to indicate success: http.StatusOK
	PutEnumValid func(ctx context.Context, arrayBody []*arraygroup.FooEnum, options *arraygroup.ArrayClientPutEnumValidOptions) (resp azfake.Responder[arraygroup.ArrayClientPutEnumValidResponse], errResp azfake.ErrorResponder)

	// PutFloatValid is the fake for method ArrayClient.PutFloatValid
	// HTTP status codes to indicate success: http.StatusOK
	PutFloatValid func(ctx context.Context, arrayBody []*float32, options *arraygroup.ArrayClientPutFloatValidOptions) (resp azfake.Responder[arraygroup.ArrayClientPutFloatValidResponse], errResp azfake.ErrorResponder)

	// PutIntegerValid is the fake for method ArrayClient.PutIntegerValid
	// HTTP status codes to indicate success: http.StatusOK
	PutIntegerValid func(ctx context.Context, arrayBody []*int32, options *arraygroup.ArrayClientPutIntegerValidOptions) (resp azfake.Responder[arraygroup.ArrayClientPutIntegerValidResponse], errResp azfake.ErrorResponder)

	// PutLongValid is the fake for method ArrayClient.PutLongValid
	// HTTP status codes to indicate success: http.StatusOK
	PutLongValid func(ctx context.Context, arrayBody []*int64, options *arraygroup.ArrayClientPutLongValidOptions) (resp azfake.Responder[arraygroup.ArrayClientPutLongValidResponse], errResp azfake.ErrorResponder)

	// PutStringEnumValid is the fake for method ArrayClient.PutStringEnumValid
	// HTTP status codes to indicate success: http.StatusOK
	PutStringEnumValid func(ctx context.Context, arrayBody []*arraygroup.Enum1, options *arraygroup.ArrayClientPutStringEnumValidOptions) (resp azfake.Responder[arraygroup.ArrayClientPutStringEnumValidResponse], errResp azfake.ErrorResponder)

	// PutStringValid is the fake for method ArrayClient.PutStringValid
	// HTTP status codes to indicate success: http.StatusOK
	PutStringValid func(ctx context.Context, arrayBody []*string, options *arraygroup.ArrayClientPutStringValidOptions) (resp azfake.Responder[arraygroup.ArrayClientPutStringValidResponse], errResp azfake.ErrorResponder)

	// PutUUIDValid is the fake for method ArrayClient.PutUUIDValid
	// HTTP status codes to indicate success: http.StatusOK
	PutUUIDValid func(ctx context.Context, arrayBody []*string, options *arraygroup.ArrayClientPutUUIDValidOptions) (resp azfake.Responder[arraygroup.ArrayClientPutUUIDValidResponse], errResp azfake.ErrorResponder)
}

// NewArrayServerTransport creates a new instance of ArrayServerTransport with the provided implementation.
// The returned ArrayServerTransport instance is connected to an instance of arraygroup.ArrayClient by way of the
// undefined.Transporter field.
func NewArrayServerTransport(srv *ArrayServer) *ArrayServerTransport {
	return &ArrayServerTransport{srv: srv}
}

// ArrayServerTransport connects instances of arraygroup.ArrayClient to instances of ArrayServer.
// Don't use this type directly, use NewArrayServerTransport instead.
type ArrayServerTransport struct {
	srv *ArrayServer
}

// Do implements the policy.Transporter interface for ArrayServerTransport.
func (a *ArrayServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "ArrayClient.GetArrayEmpty":
		resp, err = a.dispatchGetArrayEmpty(req)
	case "ArrayClient.GetArrayItemEmpty":
		resp, err = a.dispatchGetArrayItemEmpty(req)
	case "ArrayClient.GetArrayItemNull":
		resp, err = a.dispatchGetArrayItemNull(req)
	case "ArrayClient.GetArrayNull":
		resp, err = a.dispatchGetArrayNull(req)
	case "ArrayClient.GetArrayValid":
		resp, err = a.dispatchGetArrayValid(req)
	case "ArrayClient.GetBase64URL":
		resp, err = a.dispatchGetBase64URL(req)
	case "ArrayClient.GetBooleanInvalidNull":
		resp, err = a.dispatchGetBooleanInvalidNull(req)
	case "ArrayClient.GetBooleanInvalidString":
		resp, err = a.dispatchGetBooleanInvalidString(req)
	case "ArrayClient.GetBooleanTfft":
		resp, err = a.dispatchGetBooleanTfft(req)
	case "ArrayClient.GetByteInvalidNull":
		resp, err = a.dispatchGetByteInvalidNull(req)
	case "ArrayClient.GetByteValid":
		resp, err = a.dispatchGetByteValid(req)
	case "ArrayClient.GetComplexEmpty":
		resp, err = a.dispatchGetComplexEmpty(req)
	case "ArrayClient.GetComplexItemEmpty":
		resp, err = a.dispatchGetComplexItemEmpty(req)
	case "ArrayClient.GetComplexItemNull":
		resp, err = a.dispatchGetComplexItemNull(req)
	case "ArrayClient.GetComplexNull":
		resp, err = a.dispatchGetComplexNull(req)
	case "ArrayClient.GetComplexValid":
		resp, err = a.dispatchGetComplexValid(req)
	case "ArrayClient.GetDateInvalidChars":
		resp, err = a.dispatchGetDateInvalidChars(req)
	case "ArrayClient.GetDateInvalidNull":
		resp, err = a.dispatchGetDateInvalidNull(req)
	case "ArrayClient.GetDateTimeInvalidChars":
		resp, err = a.dispatchGetDateTimeInvalidChars(req)
	case "ArrayClient.GetDateTimeInvalidNull":
		resp, err = a.dispatchGetDateTimeInvalidNull(req)
	case "ArrayClient.GetDateTimeRFC1123Valid":
		resp, err = a.dispatchGetDateTimeRFC1123Valid(req)
	case "ArrayClient.GetDateTimeValid":
		resp, err = a.dispatchGetDateTimeValid(req)
	case "ArrayClient.GetDateValid":
		resp, err = a.dispatchGetDateValid(req)
	case "ArrayClient.GetDictionaryEmpty":
		resp, err = a.dispatchGetDictionaryEmpty(req)
	case "ArrayClient.GetDictionaryItemEmpty":
		resp, err = a.dispatchGetDictionaryItemEmpty(req)
	case "ArrayClient.GetDictionaryItemNull":
		resp, err = a.dispatchGetDictionaryItemNull(req)
	case "ArrayClient.GetDictionaryNull":
		resp, err = a.dispatchGetDictionaryNull(req)
	case "ArrayClient.GetDictionaryValid":
		resp, err = a.dispatchGetDictionaryValid(req)
	case "ArrayClient.GetDoubleInvalidNull":
		resp, err = a.dispatchGetDoubleInvalidNull(req)
	case "ArrayClient.GetDoubleInvalidString":
		resp, err = a.dispatchGetDoubleInvalidString(req)
	case "ArrayClient.GetDoubleValid":
		resp, err = a.dispatchGetDoubleValid(req)
	case "ArrayClient.GetDurationValid":
		resp, err = a.dispatchGetDurationValid(req)
	case "ArrayClient.GetEmpty":
		resp, err = a.dispatchGetEmpty(req)
	case "ArrayClient.GetEnumValid":
		resp, err = a.dispatchGetEnumValid(req)
	case "ArrayClient.GetFloatInvalidNull":
		resp, err = a.dispatchGetFloatInvalidNull(req)
	case "ArrayClient.GetFloatInvalidString":
		resp, err = a.dispatchGetFloatInvalidString(req)
	case "ArrayClient.GetFloatValid":
		resp, err = a.dispatchGetFloatValid(req)
	case "ArrayClient.GetIntInvalidNull":
		resp, err = a.dispatchGetIntInvalidNull(req)
	case "ArrayClient.GetIntInvalidString":
		resp, err = a.dispatchGetIntInvalidString(req)
	case "ArrayClient.GetIntegerValid":
		resp, err = a.dispatchGetIntegerValid(req)
	case "ArrayClient.GetInvalid":
		resp, err = a.dispatchGetInvalid(req)
	case "ArrayClient.GetLongInvalidNull":
		resp, err = a.dispatchGetLongInvalidNull(req)
	case "ArrayClient.GetLongInvalidString":
		resp, err = a.dispatchGetLongInvalidString(req)
	case "ArrayClient.GetLongValid":
		resp, err = a.dispatchGetLongValid(req)
	case "ArrayClient.GetNull":
		resp, err = a.dispatchGetNull(req)
	case "ArrayClient.GetStringEnumValid":
		resp, err = a.dispatchGetStringEnumValid(req)
	case "ArrayClient.GetStringValid":
		resp, err = a.dispatchGetStringValid(req)
	case "ArrayClient.GetStringWithInvalid":
		resp, err = a.dispatchGetStringWithInvalid(req)
	case "ArrayClient.GetStringWithNull":
		resp, err = a.dispatchGetStringWithNull(req)
	case "ArrayClient.GetUUIDInvalidChars":
		resp, err = a.dispatchGetUUIDInvalidChars(req)
	case "ArrayClient.GetUUIDValid":
		resp, err = a.dispatchGetUUIDValid(req)
	case "ArrayClient.PutArrayValid":
		resp, err = a.dispatchPutArrayValid(req)
	case "ArrayClient.PutBooleanTfft":
		resp, err = a.dispatchPutBooleanTfft(req)
	case "ArrayClient.PutByteValid":
		resp, err = a.dispatchPutByteValid(req)
	case "ArrayClient.PutComplexValid":
		resp, err = a.dispatchPutComplexValid(req)
	case "ArrayClient.PutDateTimeRFC1123Valid":
		resp, err = a.dispatchPutDateTimeRFC1123Valid(req)
	case "ArrayClient.PutDateTimeValid":
		resp, err = a.dispatchPutDateTimeValid(req)
	case "ArrayClient.PutDateValid":
		resp, err = a.dispatchPutDateValid(req)
	case "ArrayClient.PutDictionaryValid":
		resp, err = a.dispatchPutDictionaryValid(req)
	case "ArrayClient.PutDoubleValid":
		resp, err = a.dispatchPutDoubleValid(req)
	case "ArrayClient.PutDurationValid":
		resp, err = a.dispatchPutDurationValid(req)
	case "ArrayClient.PutEmpty":
		resp, err = a.dispatchPutEmpty(req)
	case "ArrayClient.PutEnumValid":
		resp, err = a.dispatchPutEnumValid(req)
	case "ArrayClient.PutFloatValid":
		resp, err = a.dispatchPutFloatValid(req)
	case "ArrayClient.PutIntegerValid":
		resp, err = a.dispatchPutIntegerValid(req)
	case "ArrayClient.PutLongValid":
		resp, err = a.dispatchPutLongValid(req)
	case "ArrayClient.PutStringEnumValid":
		resp, err = a.dispatchPutStringEnumValid(req)
	case "ArrayClient.PutStringValid":
		resp, err = a.dispatchPutStringValid(req)
	case "ArrayClient.PutUUIDValid":
		resp, err = a.dispatchPutUUIDValid(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetArrayEmpty(req *http.Request) (*http.Response, error) {
	if a.srv.GetArrayEmpty == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetArrayEmpty not implemented")}
	}
	respr, errRespr := a.srv.GetArrayEmpty(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).StringArrayArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetArrayItemEmpty(req *http.Request) (*http.Response, error) {
	if a.srv.GetArrayItemEmpty == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetArrayItemEmpty not implemented")}
	}
	respr, errRespr := a.srv.GetArrayItemEmpty(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).StringArrayArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetArrayItemNull(req *http.Request) (*http.Response, error) {
	if a.srv.GetArrayItemNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetArrayItemNull not implemented")}
	}
	respr, errRespr := a.srv.GetArrayItemNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).StringArrayArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetArrayNull(req *http.Request) (*http.Response, error) {
	if a.srv.GetArrayNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetArrayNull not implemented")}
	}
	respr, errRespr := a.srv.GetArrayNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).StringArrayArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetArrayValid(req *http.Request) (*http.Response, error) {
	if a.srv.GetArrayValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetArrayValid not implemented")}
	}
	respr, errRespr := a.srv.GetArrayValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).StringArrayArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetBase64URL(req *http.Request) (*http.Response, error) {
	if a.srv.GetBase64URL == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetBase64URL not implemented")}
	}
	respr, errRespr := a.srv.GetBase64URL(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ByteArrayArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetBooleanInvalidNull(req *http.Request) (*http.Response, error) {
	if a.srv.GetBooleanInvalidNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetBooleanInvalidNull not implemented")}
	}
	respr, errRespr := a.srv.GetBooleanInvalidNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).BoolArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetBooleanInvalidString(req *http.Request) (*http.Response, error) {
	if a.srv.GetBooleanInvalidString == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetBooleanInvalidString not implemented")}
	}
	respr, errRespr := a.srv.GetBooleanInvalidString(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).BoolArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetBooleanTfft(req *http.Request) (*http.Response, error) {
	if a.srv.GetBooleanTfft == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetBooleanTfft not implemented")}
	}
	respr, errRespr := a.srv.GetBooleanTfft(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).BoolArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetByteInvalidNull(req *http.Request) (*http.Response, error) {
	if a.srv.GetByteInvalidNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetByteInvalidNull not implemented")}
	}
	respr, errRespr := a.srv.GetByteInvalidNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ByteArrayArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetByteValid(req *http.Request) (*http.Response, error) {
	if a.srv.GetByteValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetByteValid not implemented")}
	}
	respr, errRespr := a.srv.GetByteValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ByteArrayArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetComplexEmpty(req *http.Request) (*http.Response, error) {
	if a.srv.GetComplexEmpty == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetComplexEmpty not implemented")}
	}
	respr, errRespr := a.srv.GetComplexEmpty(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ProductArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetComplexItemEmpty(req *http.Request) (*http.Response, error) {
	if a.srv.GetComplexItemEmpty == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetComplexItemEmpty not implemented")}
	}
	respr, errRespr := a.srv.GetComplexItemEmpty(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ProductArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetComplexItemNull(req *http.Request) (*http.Response, error) {
	if a.srv.GetComplexItemNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetComplexItemNull not implemented")}
	}
	respr, errRespr := a.srv.GetComplexItemNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ProductArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetComplexNull(req *http.Request) (*http.Response, error) {
	if a.srv.GetComplexNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetComplexNull not implemented")}
	}
	respr, errRespr := a.srv.GetComplexNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ProductArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetComplexValid(req *http.Request) (*http.Response, error) {
	if a.srv.GetComplexValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetComplexValid not implemented")}
	}
	respr, errRespr := a.srv.GetComplexValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ProductArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetDateInvalidChars(req *http.Request) (*http.Response, error) {
	if a.srv.GetDateInvalidChars == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDateInvalidChars not implemented")}
	}
	respr, errRespr := a.srv.GetDateInvalidChars(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).TimeArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetDateInvalidNull(req *http.Request) (*http.Response, error) {
	if a.srv.GetDateInvalidNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDateInvalidNull not implemented")}
	}
	respr, errRespr := a.srv.GetDateInvalidNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).TimeArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetDateTimeInvalidChars(req *http.Request) (*http.Response, error) {
	if a.srv.GetDateTimeInvalidChars == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDateTimeInvalidChars not implemented")}
	}
	respr, errRespr := a.srv.GetDateTimeInvalidChars(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).TimeArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetDateTimeInvalidNull(req *http.Request) (*http.Response, error) {
	if a.srv.GetDateTimeInvalidNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDateTimeInvalidNull not implemented")}
	}
	respr, errRespr := a.srv.GetDateTimeInvalidNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).TimeArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetDateTimeRFC1123Valid(req *http.Request) (*http.Response, error) {
	if a.srv.GetDateTimeRFC1123Valid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDateTimeRFC1123Valid not implemented")}
	}
	respr, errRespr := a.srv.GetDateTimeRFC1123Valid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).TimeArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetDateTimeValid(req *http.Request) (*http.Response, error) {
	if a.srv.GetDateTimeValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDateTimeValid not implemented")}
	}
	respr, errRespr := a.srv.GetDateTimeValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).TimeArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetDateValid(req *http.Request) (*http.Response, error) {
	if a.srv.GetDateValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDateValid not implemented")}
	}
	respr, errRespr := a.srv.GetDateValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).TimeArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetDictionaryEmpty(req *http.Request) (*http.Response, error) {
	if a.srv.GetDictionaryEmpty == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDictionaryEmpty not implemented")}
	}
	respr, errRespr := a.srv.GetDictionaryEmpty(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MapOfStringArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetDictionaryItemEmpty(req *http.Request) (*http.Response, error) {
	if a.srv.GetDictionaryItemEmpty == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDictionaryItemEmpty not implemented")}
	}
	respr, errRespr := a.srv.GetDictionaryItemEmpty(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MapOfStringArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetDictionaryItemNull(req *http.Request) (*http.Response, error) {
	if a.srv.GetDictionaryItemNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDictionaryItemNull not implemented")}
	}
	respr, errRespr := a.srv.GetDictionaryItemNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MapOfStringArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetDictionaryNull(req *http.Request) (*http.Response, error) {
	if a.srv.GetDictionaryNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDictionaryNull not implemented")}
	}
	respr, errRespr := a.srv.GetDictionaryNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MapOfStringArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetDictionaryValid(req *http.Request) (*http.Response, error) {
	if a.srv.GetDictionaryValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDictionaryValid not implemented")}
	}
	respr, errRespr := a.srv.GetDictionaryValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MapOfStringArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetDoubleInvalidNull(req *http.Request) (*http.Response, error) {
	if a.srv.GetDoubleInvalidNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDoubleInvalidNull not implemented")}
	}
	respr, errRespr := a.srv.GetDoubleInvalidNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Float64Array, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetDoubleInvalidString(req *http.Request) (*http.Response, error) {
	if a.srv.GetDoubleInvalidString == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDoubleInvalidString not implemented")}
	}
	respr, errRespr := a.srv.GetDoubleInvalidString(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Float64Array, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetDoubleValid(req *http.Request) (*http.Response, error) {
	if a.srv.GetDoubleValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDoubleValid not implemented")}
	}
	respr, errRespr := a.srv.GetDoubleValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Float64Array, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetDurationValid(req *http.Request) (*http.Response, error) {
	if a.srv.GetDurationValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDurationValid not implemented")}
	}
	respr, errRespr := a.srv.GetDurationValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).StringArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetEmpty(req *http.Request) (*http.Response, error) {
	if a.srv.GetEmpty == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetEmpty not implemented")}
	}
	respr, errRespr := a.srv.GetEmpty(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Int32Array, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetEnumValid(req *http.Request) (*http.Response, error) {
	if a.srv.GetEnumValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetEnumValid not implemented")}
	}
	respr, errRespr := a.srv.GetEnumValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).FooEnumArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetFloatInvalidNull(req *http.Request) (*http.Response, error) {
	if a.srv.GetFloatInvalidNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetFloatInvalidNull not implemented")}
	}
	respr, errRespr := a.srv.GetFloatInvalidNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Float32Array, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetFloatInvalidString(req *http.Request) (*http.Response, error) {
	if a.srv.GetFloatInvalidString == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetFloatInvalidString not implemented")}
	}
	respr, errRespr := a.srv.GetFloatInvalidString(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Float32Array, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetFloatValid(req *http.Request) (*http.Response, error) {
	if a.srv.GetFloatValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetFloatValid not implemented")}
	}
	respr, errRespr := a.srv.GetFloatValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Float32Array, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetIntInvalidNull(req *http.Request) (*http.Response, error) {
	if a.srv.GetIntInvalidNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetIntInvalidNull not implemented")}
	}
	respr, errRespr := a.srv.GetIntInvalidNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Int32Array, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetIntInvalidString(req *http.Request) (*http.Response, error) {
	if a.srv.GetIntInvalidString == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetIntInvalidString not implemented")}
	}
	respr, errRespr := a.srv.GetIntInvalidString(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Int32Array, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetIntegerValid(req *http.Request) (*http.Response, error) {
	if a.srv.GetIntegerValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetIntegerValid not implemented")}
	}
	respr, errRespr := a.srv.GetIntegerValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Int32Array, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetInvalid(req *http.Request) (*http.Response, error) {
	if a.srv.GetInvalid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetInvalid not implemented")}
	}
	respr, errRespr := a.srv.GetInvalid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Int32Array, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetLongInvalidNull(req *http.Request) (*http.Response, error) {
	if a.srv.GetLongInvalidNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetLongInvalidNull not implemented")}
	}
	respr, errRespr := a.srv.GetLongInvalidNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Int64Array, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetLongInvalidString(req *http.Request) (*http.Response, error) {
	if a.srv.GetLongInvalidString == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetLongInvalidString not implemented")}
	}
	respr, errRespr := a.srv.GetLongInvalidString(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Int64Array, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetLongValid(req *http.Request) (*http.Response, error) {
	if a.srv.GetLongValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetLongValid not implemented")}
	}
	respr, errRespr := a.srv.GetLongValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Int64Array, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetNull(req *http.Request) (*http.Response, error) {
	if a.srv.GetNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetNull not implemented")}
	}
	respr, errRespr := a.srv.GetNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Int32Array, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetStringEnumValid(req *http.Request) (*http.Response, error) {
	if a.srv.GetStringEnumValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetStringEnumValid not implemented")}
	}
	respr, errRespr := a.srv.GetStringEnumValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Enum0Array, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetStringValid(req *http.Request) (*http.Response, error) {
	if a.srv.GetStringValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetStringValid not implemented")}
	}
	respr, errRespr := a.srv.GetStringValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).StringArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetStringWithInvalid(req *http.Request) (*http.Response, error) {
	if a.srv.GetStringWithInvalid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetStringWithInvalid not implemented")}
	}
	respr, errRespr := a.srv.GetStringWithInvalid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).StringArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetStringWithNull(req *http.Request) (*http.Response, error) {
	if a.srv.GetStringWithNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetStringWithNull not implemented")}
	}
	respr, errRespr := a.srv.GetStringWithNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).StringArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetUUIDInvalidChars(req *http.Request) (*http.Response, error) {
	if a.srv.GetUUIDInvalidChars == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetUUIDInvalidChars not implemented")}
	}
	respr, errRespr := a.srv.GetUUIDInvalidChars(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).StringArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchGetUUIDValid(req *http.Request) (*http.Response, error) {
	if a.srv.GetUUIDValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetUUIDValid not implemented")}
	}
	respr, errRespr := a.srv.GetUUIDValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).StringArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchPutArrayValid(req *http.Request) (*http.Response, error) {
	if a.srv.PutArrayValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutArrayValid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[[][]*string](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.PutArrayValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchPutBooleanTfft(req *http.Request) (*http.Response, error) {
	if a.srv.PutBooleanTfft == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutBooleanTfft not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[[]*bool](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.PutBooleanTfft(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchPutByteValid(req *http.Request) (*http.Response, error) {
	if a.srv.PutByteValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutByteValid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[[][]byte](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.PutByteValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchPutComplexValid(req *http.Request) (*http.Response, error) {
	if a.srv.PutComplexValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutComplexValid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[[]*arraygroup.Product](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.PutComplexValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchPutDateTimeRFC1123Valid(req *http.Request) (*http.Response, error) {
	if a.srv.PutDateTimeRFC1123Valid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutDateTimeRFC1123Valid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[[]*time.Time](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.PutDateTimeRFC1123Valid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchPutDateTimeValid(req *http.Request) (*http.Response, error) {
	if a.srv.PutDateTimeValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutDateTimeValid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[[]*time.Time](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.PutDateTimeValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchPutDateValid(req *http.Request) (*http.Response, error) {
	if a.srv.PutDateValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutDateValid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[[]*time.Time](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.PutDateValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchPutDictionaryValid(req *http.Request) (*http.Response, error) {
	if a.srv.PutDictionaryValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutDictionaryValid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[[]map[string]*string](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.PutDictionaryValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchPutDoubleValid(req *http.Request) (*http.Response, error) {
	if a.srv.PutDoubleValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutDoubleValid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[[]*float64](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.PutDoubleValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchPutDurationValid(req *http.Request) (*http.Response, error) {
	if a.srv.PutDurationValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutDurationValid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[[]*string](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.PutDurationValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchPutEmpty(req *http.Request) (*http.Response, error) {
	if a.srv.PutEmpty == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutEmpty not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[[]*string](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.PutEmpty(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchPutEnumValid(req *http.Request) (*http.Response, error) {
	if a.srv.PutEnumValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutEnumValid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[[]*arraygroup.FooEnum](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.PutEnumValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchPutFloatValid(req *http.Request) (*http.Response, error) {
	if a.srv.PutFloatValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutFloatValid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[[]*float32](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.PutFloatValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchPutIntegerValid(req *http.Request) (*http.Response, error) {
	if a.srv.PutIntegerValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutIntegerValid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[[]*int32](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.PutIntegerValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchPutLongValid(req *http.Request) (*http.Response, error) {
	if a.srv.PutLongValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutLongValid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[[]*int64](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.PutLongValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchPutStringEnumValid(req *http.Request) (*http.Response, error) {
	if a.srv.PutStringEnumValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutStringEnumValid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[[]*arraygroup.Enum1](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.PutStringEnumValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchPutStringValid(req *http.Request) (*http.Response, error) {
	if a.srv.PutStringValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutStringValid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[[]*string](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.PutStringValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayServerTransport) dispatchPutUUIDValid(req *http.Request) (*http.Response, error) {
	if a.srv.PutUUIDValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutUUIDValid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[[]*string](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.PutUUIDValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
