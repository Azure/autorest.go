// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	"generatortests/paginggroup"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
)

// PagingServer is a fake server for instances of the paginggroup.PagingClient type.
type PagingServer struct {
	// NewAppendAPIVersionPager is the fake for method PagingClient.NewAppendAPIVersionPager
	// HTTP status codes to indicate success: http.StatusOK
	NewAppendAPIVersionPager func(options *paginggroup.PagingClientAppendAPIVersionOptions) (resp azfake.PagerResponder[paginggroup.PagingClientAppendAPIVersionResponse])

	// NewDuplicateParamsPager is the fake for method PagingClient.NewDuplicateParamsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewDuplicateParamsPager func(options *paginggroup.PagingClientDuplicateParamsOptions) (resp azfake.PagerResponder[paginggroup.PagingClientDuplicateParamsResponse])

	// NewFirstResponseEmptyPager is the fake for method PagingClient.NewFirstResponseEmptyPager
	// HTTP status codes to indicate success: http.StatusOK
	NewFirstResponseEmptyPager func(options *paginggroup.PagingClientFirstResponseEmptyOptions) (resp azfake.PagerResponder[paginggroup.PagingClientFirstResponseEmptyResponse])

	// NewGetEmptyNextLinkNamePagesPager is the fake for method PagingClient.NewGetEmptyNextLinkNamePagesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetEmptyNextLinkNamePagesPager func(options *paginggroup.PagingClientGetEmptyNextLinkNamePagesOptions) (resp azfake.PagerResponder[paginggroup.PagingClientGetEmptyNextLinkNamePagesResponse])

	// NewGetMultiplePagesPager is the fake for method PagingClient.NewGetMultiplePagesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetMultiplePagesPager func(options *paginggroup.PagingClientGetMultiplePagesOptions) (resp azfake.PagerResponder[paginggroup.PagingClientGetMultiplePagesResponse])

	// NewGetMultiplePagesFailurePager is the fake for method PagingClient.NewGetMultiplePagesFailurePager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetMultiplePagesFailurePager func(options *paginggroup.PagingClientGetMultiplePagesFailureOptions) (resp azfake.PagerResponder[paginggroup.PagingClientGetMultiplePagesFailureResponse])

	// NewGetMultiplePagesFailureURIPager is the fake for method PagingClient.NewGetMultiplePagesFailureURIPager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetMultiplePagesFailureURIPager func(options *paginggroup.PagingClientGetMultiplePagesFailureURIOptions) (resp azfake.PagerResponder[paginggroup.PagingClientGetMultiplePagesFailureURIResponse])

	// NewGetMultiplePagesFragmentNextLinkPager is the fake for method PagingClient.NewGetMultiplePagesFragmentNextLinkPager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetMultiplePagesFragmentNextLinkPager func(apiVersion string, tenant string, options *paginggroup.PagingClientGetMultiplePagesFragmentNextLinkOptions) (resp azfake.PagerResponder[paginggroup.PagingClientGetMultiplePagesFragmentNextLinkResponse])

	// NewGetMultiplePagesFragmentWithGroupingNextLinkPager is the fake for method PagingClient.NewGetMultiplePagesFragmentWithGroupingNextLinkPager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetMultiplePagesFragmentWithGroupingNextLinkPager func(customParameterGroup paginggroup.CustomParameterGroup, options *paginggroup.PagingClientGetMultiplePagesFragmentWithGroupingNextLinkOptions) (resp azfake.PagerResponder[paginggroup.PagingClientGetMultiplePagesFragmentWithGroupingNextLinkResponse])

	// BeginGetMultiplePagesLRO is the fake for method PagingClient.BeginGetMultiplePagesLRO
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginGetMultiplePagesLRO func(ctx context.Context, options *paginggroup.PagingClientBeginGetMultiplePagesLROOptions) (resp azfake.PollerResponder[azfake.PagerResponder[paginggroup.PagingClientGetMultiplePagesLROResponse]], errResp azfake.ErrorResponder)

	// NewGetMultiplePagesRetryFirstPager is the fake for method PagingClient.NewGetMultiplePagesRetryFirstPager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetMultiplePagesRetryFirstPager func(options *paginggroup.PagingClientGetMultiplePagesRetryFirstOptions) (resp azfake.PagerResponder[paginggroup.PagingClientGetMultiplePagesRetryFirstResponse])

	// NewGetMultiplePagesRetrySecondPager is the fake for method PagingClient.NewGetMultiplePagesRetrySecondPager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetMultiplePagesRetrySecondPager func(options *paginggroup.PagingClientGetMultiplePagesRetrySecondOptions) (resp azfake.PagerResponder[paginggroup.PagingClientGetMultiplePagesRetrySecondResponse])

	// NewGetMultiplePagesWithOffsetPager is the fake for method PagingClient.NewGetMultiplePagesWithOffsetPager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetMultiplePagesWithOffsetPager func(options paginggroup.PagingClientGetMultiplePagesWithOffsetOptions) (resp azfake.PagerResponder[paginggroup.PagingClientGetMultiplePagesWithOffsetResponse])

	// NewGetNoItemNamePagesPager is the fake for method PagingClient.NewGetNoItemNamePagesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetNoItemNamePagesPager func(options *paginggroup.PagingClientGetNoItemNamePagesOptions) (resp azfake.PagerResponder[paginggroup.PagingClientGetNoItemNamePagesResponse])

	// NewGetNullNextLinkNamePagesPager is the fake for method PagingClient.NewGetNullNextLinkNamePagesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetNullNextLinkNamePagesPager func(options *paginggroup.PagingClientGetNullNextLinkNamePagesOptions) (resp azfake.PagerResponder[paginggroup.PagingClientGetNullNextLinkNamePagesResponse])

	// NewGetODataMultiplePagesPager is the fake for method PagingClient.NewGetODataMultiplePagesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetODataMultiplePagesPager func(options *paginggroup.PagingClientGetODataMultiplePagesOptions) (resp azfake.PagerResponder[paginggroup.PagingClientGetODataMultiplePagesResponse])

	// NewGetPagingModelWithItemNameWithXMSClientNamePager is the fake for method PagingClient.NewGetPagingModelWithItemNameWithXMSClientNamePager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetPagingModelWithItemNameWithXMSClientNamePager func(options *paginggroup.PagingClientGetPagingModelWithItemNameWithXMSClientNameOptions) (resp azfake.PagerResponder[paginggroup.PagingClientGetPagingModelWithItemNameWithXMSClientNameResponse])

	// NewGetSinglePagesPager is the fake for method PagingClient.NewGetSinglePagesPager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetSinglePagesPager func(options *paginggroup.PagingClientGetSinglePagesOptions) (resp azfake.PagerResponder[paginggroup.PagingClientGetSinglePagesResponse])

	// NewGetSinglePagesFailurePager is the fake for method PagingClient.NewGetSinglePagesFailurePager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetSinglePagesFailurePager func(options *paginggroup.PagingClientGetSinglePagesFailureOptions) (resp azfake.PagerResponder[paginggroup.PagingClientGetSinglePagesFailureResponse])

	// NewGetSinglePagesWithBodyParamsPager is the fake for method PagingClient.NewGetSinglePagesWithBodyParamsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetSinglePagesWithBodyParamsPager func(parameters paginggroup.BodyParam, options *paginggroup.PagingClientGetSinglePagesWithBodyParamsOptions) (resp azfake.PagerResponder[paginggroup.PagingClientGetSinglePagesWithBodyParamsResponse])

	// NewGetWithQueryParamsPager is the fake for method PagingClient.NewGetWithQueryParamsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetWithQueryParamsPager func(requiredQueryParameter int32, options *paginggroup.PagingClientGetWithQueryParamsOptions) (resp azfake.PagerResponder[paginggroup.PagingClientGetWithQueryParamsResponse])

	// NewPageWithMaxPageSizePager is the fake for method PagingClient.NewPageWithMaxPageSizePager
	// HTTP status codes to indicate success: http.StatusOK
	NewPageWithMaxPageSizePager func(options *paginggroup.PagingClientPageWithMaxPageSizeOptions) (resp azfake.PagerResponder[paginggroup.PagingClientPageWithMaxPageSizeResponse])

	// NewReplaceAPIVersionPager is the fake for method PagingClient.NewReplaceAPIVersionPager
	// HTTP status codes to indicate success: http.StatusOK
	NewReplaceAPIVersionPager func(options *paginggroup.PagingClientReplaceAPIVersionOptions) (resp azfake.PagerResponder[paginggroup.PagingClientReplaceAPIVersionResponse])
}

// NewPagingServerTransport creates a new instance of PagingServerTransport with the provided implementation.
// The returned PagingServerTransport instance is connected to an instance of paginggroup.PagingClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewPagingServerTransport(srv *PagingServer) *PagingServerTransport {
	return &PagingServerTransport{
		srv:                                                  srv,
		newAppendAPIVersionPager:                             newTracker[azfake.PagerResponder[paginggroup.PagingClientAppendAPIVersionResponse]](),
		newDuplicateParamsPager:                              newTracker[azfake.PagerResponder[paginggroup.PagingClientDuplicateParamsResponse]](),
		newFirstResponseEmptyPager:                           newTracker[azfake.PagerResponder[paginggroup.PagingClientFirstResponseEmptyResponse]](),
		newGetEmptyNextLinkNamePagesPager:                    newTracker[azfake.PagerResponder[paginggroup.PagingClientGetEmptyNextLinkNamePagesResponse]](),
		newGetMultiplePagesPager:                             newTracker[azfake.PagerResponder[paginggroup.PagingClientGetMultiplePagesResponse]](),
		newGetMultiplePagesFailurePager:                      newTracker[azfake.PagerResponder[paginggroup.PagingClientGetMultiplePagesFailureResponse]](),
		newGetMultiplePagesFailureURIPager:                   newTracker[azfake.PagerResponder[paginggroup.PagingClientGetMultiplePagesFailureURIResponse]](),
		newGetMultiplePagesFragmentNextLinkPager:             newTracker[azfake.PagerResponder[paginggroup.PagingClientGetMultiplePagesFragmentNextLinkResponse]](),
		newGetMultiplePagesFragmentWithGroupingNextLinkPager: newTracker[azfake.PagerResponder[paginggroup.PagingClientGetMultiplePagesFragmentWithGroupingNextLinkResponse]](),
		beginGetMultiplePagesLRO:                             newTracker[azfake.PollerResponder[azfake.PagerResponder[paginggroup.PagingClientGetMultiplePagesLROResponse]]](),
		newGetMultiplePagesRetryFirstPager:                   newTracker[azfake.PagerResponder[paginggroup.PagingClientGetMultiplePagesRetryFirstResponse]](),
		newGetMultiplePagesRetrySecondPager:                  newTracker[azfake.PagerResponder[paginggroup.PagingClientGetMultiplePagesRetrySecondResponse]](),
		newGetMultiplePagesWithOffsetPager:                   newTracker[azfake.PagerResponder[paginggroup.PagingClientGetMultiplePagesWithOffsetResponse]](),
		newGetNoItemNamePagesPager:                           newTracker[azfake.PagerResponder[paginggroup.PagingClientGetNoItemNamePagesResponse]](),
		newGetNullNextLinkNamePagesPager:                     newTracker[azfake.PagerResponder[paginggroup.PagingClientGetNullNextLinkNamePagesResponse]](),
		newGetODataMultiplePagesPager:                        newTracker[azfake.PagerResponder[paginggroup.PagingClientGetODataMultiplePagesResponse]](),
		newGetPagingModelWithItemNameWithXMSClientNamePager:  newTracker[azfake.PagerResponder[paginggroup.PagingClientGetPagingModelWithItemNameWithXMSClientNameResponse]](),
		newGetSinglePagesPager:                               newTracker[azfake.PagerResponder[paginggroup.PagingClientGetSinglePagesResponse]](),
		newGetSinglePagesFailurePager:                        newTracker[azfake.PagerResponder[paginggroup.PagingClientGetSinglePagesFailureResponse]](),
		newGetSinglePagesWithBodyParamsPager:                 newTracker[azfake.PagerResponder[paginggroup.PagingClientGetSinglePagesWithBodyParamsResponse]](),
		newGetWithQueryParamsPager:                           newTracker[azfake.PagerResponder[paginggroup.PagingClientGetWithQueryParamsResponse]](),
		newPageWithMaxPageSizePager:                          newTracker[azfake.PagerResponder[paginggroup.PagingClientPageWithMaxPageSizeResponse]](),
		newReplaceAPIVersionPager:                            newTracker[azfake.PagerResponder[paginggroup.PagingClientReplaceAPIVersionResponse]](),
	}
}

// PagingServerTransport connects instances of paginggroup.PagingClient to instances of PagingServer.
// Don't use this type directly, use NewPagingServerTransport instead.
type PagingServerTransport struct {
	srv                                                  *PagingServer
	newAppendAPIVersionPager                             *tracker[azfake.PagerResponder[paginggroup.PagingClientAppendAPIVersionResponse]]
	newDuplicateParamsPager                              *tracker[azfake.PagerResponder[paginggroup.PagingClientDuplicateParamsResponse]]
	newFirstResponseEmptyPager                           *tracker[azfake.PagerResponder[paginggroup.PagingClientFirstResponseEmptyResponse]]
	newGetEmptyNextLinkNamePagesPager                    *tracker[azfake.PagerResponder[paginggroup.PagingClientGetEmptyNextLinkNamePagesResponse]]
	newGetMultiplePagesPager                             *tracker[azfake.PagerResponder[paginggroup.PagingClientGetMultiplePagesResponse]]
	newGetMultiplePagesFailurePager                      *tracker[azfake.PagerResponder[paginggroup.PagingClientGetMultiplePagesFailureResponse]]
	newGetMultiplePagesFailureURIPager                   *tracker[azfake.PagerResponder[paginggroup.PagingClientGetMultiplePagesFailureURIResponse]]
	newGetMultiplePagesFragmentNextLinkPager             *tracker[azfake.PagerResponder[paginggroup.PagingClientGetMultiplePagesFragmentNextLinkResponse]]
	newGetMultiplePagesFragmentWithGroupingNextLinkPager *tracker[azfake.PagerResponder[paginggroup.PagingClientGetMultiplePagesFragmentWithGroupingNextLinkResponse]]
	beginGetMultiplePagesLRO                             *tracker[azfake.PollerResponder[azfake.PagerResponder[paginggroup.PagingClientGetMultiplePagesLROResponse]]]
	newGetMultiplePagesRetryFirstPager                   *tracker[azfake.PagerResponder[paginggroup.PagingClientGetMultiplePagesRetryFirstResponse]]
	newGetMultiplePagesRetrySecondPager                  *tracker[azfake.PagerResponder[paginggroup.PagingClientGetMultiplePagesRetrySecondResponse]]
	newGetMultiplePagesWithOffsetPager                   *tracker[azfake.PagerResponder[paginggroup.PagingClientGetMultiplePagesWithOffsetResponse]]
	newGetNoItemNamePagesPager                           *tracker[azfake.PagerResponder[paginggroup.PagingClientGetNoItemNamePagesResponse]]
	newGetNullNextLinkNamePagesPager                     *tracker[azfake.PagerResponder[paginggroup.PagingClientGetNullNextLinkNamePagesResponse]]
	newGetODataMultiplePagesPager                        *tracker[azfake.PagerResponder[paginggroup.PagingClientGetODataMultiplePagesResponse]]
	newGetPagingModelWithItemNameWithXMSClientNamePager  *tracker[azfake.PagerResponder[paginggroup.PagingClientGetPagingModelWithItemNameWithXMSClientNameResponse]]
	newGetSinglePagesPager                               *tracker[azfake.PagerResponder[paginggroup.PagingClientGetSinglePagesResponse]]
	newGetSinglePagesFailurePager                        *tracker[azfake.PagerResponder[paginggroup.PagingClientGetSinglePagesFailureResponse]]
	newGetSinglePagesWithBodyParamsPager                 *tracker[azfake.PagerResponder[paginggroup.PagingClientGetSinglePagesWithBodyParamsResponse]]
	newGetWithQueryParamsPager                           *tracker[azfake.PagerResponder[paginggroup.PagingClientGetWithQueryParamsResponse]]
	newPageWithMaxPageSizePager                          *tracker[azfake.PagerResponder[paginggroup.PagingClientPageWithMaxPageSizeResponse]]
	newReplaceAPIVersionPager                            *tracker[azfake.PagerResponder[paginggroup.PagingClientReplaceAPIVersionResponse]]
}

// Do implements the policy.Transporter interface for PagingServerTransport.
func (p *PagingServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return p.dispatchToMethodFake(req, method)
}

func (p *PagingServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if pagingServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = pagingServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "PagingClient.NewAppendAPIVersionPager":
				res.resp, res.err = p.dispatchNewAppendAPIVersionPager(req)
			case "PagingClient.NewDuplicateParamsPager":
				res.resp, res.err = p.dispatchNewDuplicateParamsPager(req)
			case "PagingClient.NewFirstResponseEmptyPager":
				res.resp, res.err = p.dispatchNewFirstResponseEmptyPager(req)
			case "PagingClient.NewGetEmptyNextLinkNamePagesPager":
				res.resp, res.err = p.dispatchNewGetEmptyNextLinkNamePagesPager(req)
			case "PagingClient.NewGetMultiplePagesPager":
				res.resp, res.err = p.dispatchNewGetMultiplePagesPager(req)
			case "PagingClient.NewGetMultiplePagesFailurePager":
				res.resp, res.err = p.dispatchNewGetMultiplePagesFailurePager(req)
			case "PagingClient.NewGetMultiplePagesFailureURIPager":
				res.resp, res.err = p.dispatchNewGetMultiplePagesFailureURIPager(req)
			case "PagingClient.NewGetMultiplePagesFragmentNextLinkPager":
				res.resp, res.err = p.dispatchNewGetMultiplePagesFragmentNextLinkPager(req)
			case "PagingClient.NewGetMultiplePagesFragmentWithGroupingNextLinkPager":
				res.resp, res.err = p.dispatchNewGetMultiplePagesFragmentWithGroupingNextLinkPager(req)
			case "PagingClient.BeginGetMultiplePagesLRO":
				res.resp, res.err = p.dispatchBeginGetMultiplePagesLRO(req)
			case "PagingClient.NewGetMultiplePagesRetryFirstPager":
				res.resp, res.err = p.dispatchNewGetMultiplePagesRetryFirstPager(req)
			case "PagingClient.NewGetMultiplePagesRetrySecondPager":
				res.resp, res.err = p.dispatchNewGetMultiplePagesRetrySecondPager(req)
			case "PagingClient.NewGetMultiplePagesWithOffsetPager":
				res.resp, res.err = p.dispatchNewGetMultiplePagesWithOffsetPager(req)
			case "PagingClient.NewGetNoItemNamePagesPager":
				res.resp, res.err = p.dispatchNewGetNoItemNamePagesPager(req)
			case "PagingClient.NewGetNullNextLinkNamePagesPager":
				res.resp, res.err = p.dispatchNewGetNullNextLinkNamePagesPager(req)
			case "PagingClient.NewGetODataMultiplePagesPager":
				res.resp, res.err = p.dispatchNewGetODataMultiplePagesPager(req)
			case "PagingClient.NewGetPagingModelWithItemNameWithXMSClientNamePager":
				res.resp, res.err = p.dispatchNewGetPagingModelWithItemNameWithXMSClientNamePager(req)
			case "PagingClient.NewGetSinglePagesPager":
				res.resp, res.err = p.dispatchNewGetSinglePagesPager(req)
			case "PagingClient.NewGetSinglePagesFailurePager":
				res.resp, res.err = p.dispatchNewGetSinglePagesFailurePager(req)
			case "PagingClient.NewGetSinglePagesWithBodyParamsPager":
				res.resp, res.err = p.dispatchNewGetSinglePagesWithBodyParamsPager(req)
			case "PagingClient.NewGetWithQueryParamsPager":
				res.resp, res.err = p.dispatchNewGetWithQueryParamsPager(req)
			case "PagingClient.NewPageWithMaxPageSizePager":
				res.resp, res.err = p.dispatchNewPageWithMaxPageSizePager(req)
			case "PagingClient.NewReplaceAPIVersionPager":
				res.resp, res.err = p.dispatchNewReplaceAPIVersionPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (p *PagingServerTransport) dispatchNewAppendAPIVersionPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewAppendAPIVersionPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewAppendAPIVersionPager not implemented")}
	}
	newAppendAPIVersionPager := p.newAppendAPIVersionPager.get(req)
	if newAppendAPIVersionPager == nil {
		resp := p.srv.NewAppendAPIVersionPager(nil)
		newAppendAPIVersionPager = &resp
		p.newAppendAPIVersionPager.add(req, newAppendAPIVersionPager)
		server.PagerResponderInjectNextLinks(newAppendAPIVersionPager, req, func(page *paginggroup.PagingClientAppendAPIVersionResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newAppendAPIVersionPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newAppendAPIVersionPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newAppendAPIVersionPager) {
		p.newAppendAPIVersionPager.remove(req)
	}
	return resp, nil
}

func (p *PagingServerTransport) dispatchNewDuplicateParamsPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewDuplicateParamsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewDuplicateParamsPager not implemented")}
	}
	newDuplicateParamsPager := p.newDuplicateParamsPager.get(req)
	if newDuplicateParamsPager == nil {
		qp := req.URL.Query()
		filterUnescaped, err := url.QueryUnescape(qp.Get("$filter"))
		if err != nil {
			return nil, err
		}
		filterParam := getOptional(filterUnescaped)
		var options *paginggroup.PagingClientDuplicateParamsOptions
		if filterParam != nil {
			options = &paginggroup.PagingClientDuplicateParamsOptions{
				Filter: filterParam,
			}
		}
		resp := p.srv.NewDuplicateParamsPager(options)
		newDuplicateParamsPager = &resp
		p.newDuplicateParamsPager.add(req, newDuplicateParamsPager)
		server.PagerResponderInjectNextLinks(newDuplicateParamsPager, req, func(page *paginggroup.PagingClientDuplicateParamsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newDuplicateParamsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newDuplicateParamsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newDuplicateParamsPager) {
		p.newDuplicateParamsPager.remove(req)
	}
	return resp, nil
}

func (p *PagingServerTransport) dispatchNewFirstResponseEmptyPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewFirstResponseEmptyPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewFirstResponseEmptyPager not implemented")}
	}
	newFirstResponseEmptyPager := p.newFirstResponseEmptyPager.get(req)
	if newFirstResponseEmptyPager == nil {
		resp := p.srv.NewFirstResponseEmptyPager(nil)
		newFirstResponseEmptyPager = &resp
		p.newFirstResponseEmptyPager.add(req, newFirstResponseEmptyPager)
		server.PagerResponderInjectNextLinks(newFirstResponseEmptyPager, req, func(page *paginggroup.PagingClientFirstResponseEmptyResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newFirstResponseEmptyPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newFirstResponseEmptyPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newFirstResponseEmptyPager) {
		p.newFirstResponseEmptyPager.remove(req)
	}
	return resp, nil
}

func (p *PagingServerTransport) dispatchNewGetEmptyNextLinkNamePagesPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewGetEmptyNextLinkNamePagesPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewGetEmptyNextLinkNamePagesPager not implemented")}
	}
	newGetEmptyNextLinkNamePagesPager := p.newGetEmptyNextLinkNamePagesPager.get(req)
	if newGetEmptyNextLinkNamePagesPager == nil {
		resp := p.srv.NewGetEmptyNextLinkNamePagesPager(nil)
		newGetEmptyNextLinkNamePagesPager = &resp
		p.newGetEmptyNextLinkNamePagesPager.add(req, newGetEmptyNextLinkNamePagesPager)
		server.PagerResponderInjectNextLinks(newGetEmptyNextLinkNamePagesPager, req, func(page *paginggroup.PagingClientGetEmptyNextLinkNamePagesResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newGetEmptyNextLinkNamePagesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newGetEmptyNextLinkNamePagesPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newGetEmptyNextLinkNamePagesPager) {
		p.newGetEmptyNextLinkNamePagesPager.remove(req)
	}
	return resp, nil
}

func (p *PagingServerTransport) dispatchNewGetMultiplePagesPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewGetMultiplePagesPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewGetMultiplePagesPager not implemented")}
	}
	newGetMultiplePagesPager := p.newGetMultiplePagesPager.get(req)
	if newGetMultiplePagesPager == nil {
		clientRequestIDParam := getOptional(getHeaderValue(req.Header, "client-request-id"))
		maxresultsParam, err := parseOptional(getHeaderValue(req.Header, "maxresults"), func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		timeoutParam, err := parseOptional(getHeaderValue(req.Header, "timeout"), func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		var options *paginggroup.PagingClientGetMultiplePagesOptions
		if clientRequestIDParam != nil || maxresultsParam != nil || timeoutParam != nil {
			options = &paginggroup.PagingClientGetMultiplePagesOptions{
				ClientRequestID: clientRequestIDParam,
				Maxresults:      maxresultsParam,
				Timeout:         timeoutParam,
			}
		}
		resp := p.srv.NewGetMultiplePagesPager(options)
		newGetMultiplePagesPager = &resp
		p.newGetMultiplePagesPager.add(req, newGetMultiplePagesPager)
		server.PagerResponderInjectNextLinks(newGetMultiplePagesPager, req, func(page *paginggroup.PagingClientGetMultiplePagesResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newGetMultiplePagesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newGetMultiplePagesPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newGetMultiplePagesPager) {
		p.newGetMultiplePagesPager.remove(req)
	}
	return resp, nil
}

func (p *PagingServerTransport) dispatchNewGetMultiplePagesFailurePager(req *http.Request) (*http.Response, error) {
	if p.srv.NewGetMultiplePagesFailurePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewGetMultiplePagesFailurePager not implemented")}
	}
	newGetMultiplePagesFailurePager := p.newGetMultiplePagesFailurePager.get(req)
	if newGetMultiplePagesFailurePager == nil {
		resp := p.srv.NewGetMultiplePagesFailurePager(nil)
		newGetMultiplePagesFailurePager = &resp
		p.newGetMultiplePagesFailurePager.add(req, newGetMultiplePagesFailurePager)
		server.PagerResponderInjectNextLinks(newGetMultiplePagesFailurePager, req, func(page *paginggroup.PagingClientGetMultiplePagesFailureResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newGetMultiplePagesFailurePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newGetMultiplePagesFailurePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newGetMultiplePagesFailurePager) {
		p.newGetMultiplePagesFailurePager.remove(req)
	}
	return resp, nil
}

func (p *PagingServerTransport) dispatchNewGetMultiplePagesFailureURIPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewGetMultiplePagesFailureURIPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewGetMultiplePagesFailureURIPager not implemented")}
	}
	newGetMultiplePagesFailureURIPager := p.newGetMultiplePagesFailureURIPager.get(req)
	if newGetMultiplePagesFailureURIPager == nil {
		resp := p.srv.NewGetMultiplePagesFailureURIPager(nil)
		newGetMultiplePagesFailureURIPager = &resp
		p.newGetMultiplePagesFailureURIPager.add(req, newGetMultiplePagesFailureURIPager)
		server.PagerResponderInjectNextLinks(newGetMultiplePagesFailureURIPager, req, func(page *paginggroup.PagingClientGetMultiplePagesFailureURIResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newGetMultiplePagesFailureURIPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newGetMultiplePagesFailureURIPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newGetMultiplePagesFailureURIPager) {
		p.newGetMultiplePagesFailureURIPager.remove(req)
	}
	return resp, nil
}

func (p *PagingServerTransport) dispatchNewGetMultiplePagesFragmentNextLinkPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewGetMultiplePagesFragmentNextLinkPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewGetMultiplePagesFragmentNextLinkPager not implemented")}
	}
	newGetMultiplePagesFragmentNextLinkPager := p.newGetMultiplePagesFragmentNextLinkPager.get(req)
	if newGetMultiplePagesFragmentNextLinkPager == nil {
		const regexStr = `/paging/multiple/fragment/(?P<tenant>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		apiVersionParam, err := url.QueryUnescape(qp.Get("api_version"))
		if err != nil {
			return nil, err
		}
		tenantParam, err := url.PathUnescape(matches[regex.SubexpIndex("tenant")])
		if err != nil {
			return nil, err
		}
		resp := p.srv.NewGetMultiplePagesFragmentNextLinkPager(apiVersionParam, tenantParam, nil)
		newGetMultiplePagesFragmentNextLinkPager = &resp
		p.newGetMultiplePagesFragmentNextLinkPager.add(req, newGetMultiplePagesFragmentNextLinkPager)
		server.PagerResponderInjectNextLinks(newGetMultiplePagesFragmentNextLinkPager, req, func(page *paginggroup.PagingClientGetMultiplePagesFragmentNextLinkResponse, createLink func() string) {
			page.ODataNextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newGetMultiplePagesFragmentNextLinkPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newGetMultiplePagesFragmentNextLinkPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newGetMultiplePagesFragmentNextLinkPager) {
		p.newGetMultiplePagesFragmentNextLinkPager.remove(req)
	}
	return resp, nil
}

func (p *PagingServerTransport) dispatchNewGetMultiplePagesFragmentWithGroupingNextLinkPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewGetMultiplePagesFragmentWithGroupingNextLinkPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewGetMultiplePagesFragmentWithGroupingNextLinkPager not implemented")}
	}
	newGetMultiplePagesFragmentWithGroupingNextLinkPager := p.newGetMultiplePagesFragmentWithGroupingNextLinkPager.get(req)
	if newGetMultiplePagesFragmentWithGroupingNextLinkPager == nil {
		const regexStr = `/paging/multiple/fragmentwithgrouping/(?P<tenant>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		aPIVersionParam, err := url.QueryUnescape(qp.Get("api_version"))
		if err != nil {
			return nil, err
		}
		tenantParam, err := url.PathUnescape(matches[regex.SubexpIndex("tenant")])
		if err != nil {
			return nil, err
		}
		customParameterGroup := paginggroup.CustomParameterGroup{
			APIVersion: aPIVersionParam,
			Tenant:     tenantParam,
		}
		resp := p.srv.NewGetMultiplePagesFragmentWithGroupingNextLinkPager(customParameterGroup, nil)
		newGetMultiplePagesFragmentWithGroupingNextLinkPager = &resp
		p.newGetMultiplePagesFragmentWithGroupingNextLinkPager.add(req, newGetMultiplePagesFragmentWithGroupingNextLinkPager)
		server.PagerResponderInjectNextLinks(newGetMultiplePagesFragmentWithGroupingNextLinkPager, req, func(page *paginggroup.PagingClientGetMultiplePagesFragmentWithGroupingNextLinkResponse, createLink func() string) {
			page.ODataNextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newGetMultiplePagesFragmentWithGroupingNextLinkPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newGetMultiplePagesFragmentWithGroupingNextLinkPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newGetMultiplePagesFragmentWithGroupingNextLinkPager) {
		p.newGetMultiplePagesFragmentWithGroupingNextLinkPager.remove(req)
	}
	return resp, nil
}

func (p *PagingServerTransport) dispatchBeginGetMultiplePagesLRO(req *http.Request) (*http.Response, error) {
	if p.srv.BeginGetMultiplePagesLRO == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginGetMultiplePagesLRO not implemented")}
	}
	beginGetMultiplePagesLRO := p.beginGetMultiplePagesLRO.get(req)
	if beginGetMultiplePagesLRO == nil {
		clientRequestIDParam := getOptional(getHeaderValue(req.Header, "client-request-id"))
		maxresultsParam, err := parseOptional(getHeaderValue(req.Header, "maxresults"), func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		timeoutParam, err := parseOptional(getHeaderValue(req.Header, "timeout"), func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		var options *paginggroup.PagingClientBeginGetMultiplePagesLROOptions
		if clientRequestIDParam != nil || maxresultsParam != nil || timeoutParam != nil {
			options = &paginggroup.PagingClientBeginGetMultiplePagesLROOptions{
				ClientRequestID: clientRequestIDParam,
				Maxresults:      maxresultsParam,
				Timeout:         timeoutParam,
			}
		}
		respr, errRespr := p.srv.BeginGetMultiplePagesLRO(req.Context(), options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginGetMultiplePagesLRO = &respr
		p.beginGetMultiplePagesLRO.add(req, beginGetMultiplePagesLRO)
	}

	resp, err := server.PollerResponderNext(beginGetMultiplePagesLRO, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		p.beginGetMultiplePagesLRO.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginGetMultiplePagesLRO) {
		p.beginGetMultiplePagesLRO.remove(req)
	}

	return resp, nil
}

func (p *PagingServerTransport) dispatchNewGetMultiplePagesRetryFirstPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewGetMultiplePagesRetryFirstPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewGetMultiplePagesRetryFirstPager not implemented")}
	}
	newGetMultiplePagesRetryFirstPager := p.newGetMultiplePagesRetryFirstPager.get(req)
	if newGetMultiplePagesRetryFirstPager == nil {
		resp := p.srv.NewGetMultiplePagesRetryFirstPager(nil)
		newGetMultiplePagesRetryFirstPager = &resp
		p.newGetMultiplePagesRetryFirstPager.add(req, newGetMultiplePagesRetryFirstPager)
		server.PagerResponderInjectNextLinks(newGetMultiplePagesRetryFirstPager, req, func(page *paginggroup.PagingClientGetMultiplePagesRetryFirstResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newGetMultiplePagesRetryFirstPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newGetMultiplePagesRetryFirstPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newGetMultiplePagesRetryFirstPager) {
		p.newGetMultiplePagesRetryFirstPager.remove(req)
	}
	return resp, nil
}

func (p *PagingServerTransport) dispatchNewGetMultiplePagesRetrySecondPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewGetMultiplePagesRetrySecondPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewGetMultiplePagesRetrySecondPager not implemented")}
	}
	newGetMultiplePagesRetrySecondPager := p.newGetMultiplePagesRetrySecondPager.get(req)
	if newGetMultiplePagesRetrySecondPager == nil {
		resp := p.srv.NewGetMultiplePagesRetrySecondPager(nil)
		newGetMultiplePagesRetrySecondPager = &resp
		p.newGetMultiplePagesRetrySecondPager.add(req, newGetMultiplePagesRetrySecondPager)
		server.PagerResponderInjectNextLinks(newGetMultiplePagesRetrySecondPager, req, func(page *paginggroup.PagingClientGetMultiplePagesRetrySecondResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newGetMultiplePagesRetrySecondPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newGetMultiplePagesRetrySecondPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newGetMultiplePagesRetrySecondPager) {
		p.newGetMultiplePagesRetrySecondPager.remove(req)
	}
	return resp, nil
}

func (p *PagingServerTransport) dispatchNewGetMultiplePagesWithOffsetPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewGetMultiplePagesWithOffsetPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewGetMultiplePagesWithOffsetPager not implemented")}
	}
	newGetMultiplePagesWithOffsetPager := p.newGetMultiplePagesWithOffsetPager.get(req)
	if newGetMultiplePagesWithOffsetPager == nil {
		const regexStr = `/paging/multiple/withpath/(?P<offset>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		clientRequestIDParam := getOptional(getHeaderValue(req.Header, "client-request-id"))
		maxresultsParam, err := parseOptional(getHeaderValue(req.Header, "maxresults"), func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		offsetUnescaped, err := url.PathUnescape(matches[regex.SubexpIndex("offset")])
		if err != nil {
			return nil, err
		}
		offsetParam, err := parseWithCast(offsetUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		timeoutParam, err := parseOptional(getHeaderValue(req.Header, "timeout"), func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		options := paginggroup.PagingClientGetMultiplePagesWithOffsetOptions{
			ClientRequestID: clientRequestIDParam,
			Maxresults:      maxresultsParam,
			Offset:          offsetParam,
			Timeout:         timeoutParam,
		}
		resp := p.srv.NewGetMultiplePagesWithOffsetPager(options)
		newGetMultiplePagesWithOffsetPager = &resp
		p.newGetMultiplePagesWithOffsetPager.add(req, newGetMultiplePagesWithOffsetPager)
		server.PagerResponderInjectNextLinks(newGetMultiplePagesWithOffsetPager, req, func(page *paginggroup.PagingClientGetMultiplePagesWithOffsetResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newGetMultiplePagesWithOffsetPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newGetMultiplePagesWithOffsetPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newGetMultiplePagesWithOffsetPager) {
		p.newGetMultiplePagesWithOffsetPager.remove(req)
	}
	return resp, nil
}

func (p *PagingServerTransport) dispatchNewGetNoItemNamePagesPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewGetNoItemNamePagesPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewGetNoItemNamePagesPager not implemented")}
	}
	newGetNoItemNamePagesPager := p.newGetNoItemNamePagesPager.get(req)
	if newGetNoItemNamePagesPager == nil {
		resp := p.srv.NewGetNoItemNamePagesPager(nil)
		newGetNoItemNamePagesPager = &resp
		p.newGetNoItemNamePagesPager.add(req, newGetNoItemNamePagesPager)
		server.PagerResponderInjectNextLinks(newGetNoItemNamePagesPager, req, func(page *paginggroup.PagingClientGetNoItemNamePagesResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newGetNoItemNamePagesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newGetNoItemNamePagesPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newGetNoItemNamePagesPager) {
		p.newGetNoItemNamePagesPager.remove(req)
	}
	return resp, nil
}

func (p *PagingServerTransport) dispatchNewGetNullNextLinkNamePagesPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewGetNullNextLinkNamePagesPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewGetNullNextLinkNamePagesPager not implemented")}
	}
	newGetNullNextLinkNamePagesPager := p.newGetNullNextLinkNamePagesPager.get(req)
	if newGetNullNextLinkNamePagesPager == nil {
		resp := p.srv.NewGetNullNextLinkNamePagesPager(nil)
		newGetNullNextLinkNamePagesPager = &resp
		p.newGetNullNextLinkNamePagesPager.add(req, newGetNullNextLinkNamePagesPager)
	}
	resp, err := server.PagerResponderNext(newGetNullNextLinkNamePagesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newGetNullNextLinkNamePagesPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newGetNullNextLinkNamePagesPager) {
		p.newGetNullNextLinkNamePagesPager.remove(req)
	}
	return resp, nil
}

func (p *PagingServerTransport) dispatchNewGetODataMultiplePagesPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewGetODataMultiplePagesPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewGetODataMultiplePagesPager not implemented")}
	}
	newGetODataMultiplePagesPager := p.newGetODataMultiplePagesPager.get(req)
	if newGetODataMultiplePagesPager == nil {
		clientRequestIDParam := getOptional(getHeaderValue(req.Header, "client-request-id"))
		maxresultsParam, err := parseOptional(getHeaderValue(req.Header, "maxresults"), func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		timeoutParam, err := parseOptional(getHeaderValue(req.Header, "timeout"), func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		var options *paginggroup.PagingClientGetODataMultiplePagesOptions
		if clientRequestIDParam != nil || maxresultsParam != nil || timeoutParam != nil {
			options = &paginggroup.PagingClientGetODataMultiplePagesOptions{
				ClientRequestID: clientRequestIDParam,
				Maxresults:      maxresultsParam,
				Timeout:         timeoutParam,
			}
		}
		resp := p.srv.NewGetODataMultiplePagesPager(options)
		newGetODataMultiplePagesPager = &resp
		p.newGetODataMultiplePagesPager.add(req, newGetODataMultiplePagesPager)
		server.PagerResponderInjectNextLinks(newGetODataMultiplePagesPager, req, func(page *paginggroup.PagingClientGetODataMultiplePagesResponse, createLink func() string) {
			page.ODataNextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newGetODataMultiplePagesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newGetODataMultiplePagesPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newGetODataMultiplePagesPager) {
		p.newGetODataMultiplePagesPager.remove(req)
	}
	return resp, nil
}

func (p *PagingServerTransport) dispatchNewGetPagingModelWithItemNameWithXMSClientNamePager(req *http.Request) (*http.Response, error) {
	if p.srv.NewGetPagingModelWithItemNameWithXMSClientNamePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewGetPagingModelWithItemNameWithXMSClientNamePager not implemented")}
	}
	newGetPagingModelWithItemNameWithXMSClientNamePager := p.newGetPagingModelWithItemNameWithXMSClientNamePager.get(req)
	if newGetPagingModelWithItemNameWithXMSClientNamePager == nil {
		resp := p.srv.NewGetPagingModelWithItemNameWithXMSClientNamePager(nil)
		newGetPagingModelWithItemNameWithXMSClientNamePager = &resp
		p.newGetPagingModelWithItemNameWithXMSClientNamePager.add(req, newGetPagingModelWithItemNameWithXMSClientNamePager)
		server.PagerResponderInjectNextLinks(newGetPagingModelWithItemNameWithXMSClientNamePager, req, func(page *paginggroup.PagingClientGetPagingModelWithItemNameWithXMSClientNameResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newGetPagingModelWithItemNameWithXMSClientNamePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newGetPagingModelWithItemNameWithXMSClientNamePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newGetPagingModelWithItemNameWithXMSClientNamePager) {
		p.newGetPagingModelWithItemNameWithXMSClientNamePager.remove(req)
	}
	return resp, nil
}

func (p *PagingServerTransport) dispatchNewGetSinglePagesPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewGetSinglePagesPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewGetSinglePagesPager not implemented")}
	}
	newGetSinglePagesPager := p.newGetSinglePagesPager.get(req)
	if newGetSinglePagesPager == nil {
		resp := p.srv.NewGetSinglePagesPager(nil)
		newGetSinglePagesPager = &resp
		p.newGetSinglePagesPager.add(req, newGetSinglePagesPager)
		server.PagerResponderInjectNextLinks(newGetSinglePagesPager, req, func(page *paginggroup.PagingClientGetSinglePagesResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newGetSinglePagesPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newGetSinglePagesPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newGetSinglePagesPager) {
		p.newGetSinglePagesPager.remove(req)
	}
	return resp, nil
}

func (p *PagingServerTransport) dispatchNewGetSinglePagesFailurePager(req *http.Request) (*http.Response, error) {
	if p.srv.NewGetSinglePagesFailurePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewGetSinglePagesFailurePager not implemented")}
	}
	newGetSinglePagesFailurePager := p.newGetSinglePagesFailurePager.get(req)
	if newGetSinglePagesFailurePager == nil {
		resp := p.srv.NewGetSinglePagesFailurePager(nil)
		newGetSinglePagesFailurePager = &resp
		p.newGetSinglePagesFailurePager.add(req, newGetSinglePagesFailurePager)
		server.PagerResponderInjectNextLinks(newGetSinglePagesFailurePager, req, func(page *paginggroup.PagingClientGetSinglePagesFailureResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newGetSinglePagesFailurePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newGetSinglePagesFailurePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newGetSinglePagesFailurePager) {
		p.newGetSinglePagesFailurePager.remove(req)
	}
	return resp, nil
}

func (p *PagingServerTransport) dispatchNewGetSinglePagesWithBodyParamsPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewGetSinglePagesWithBodyParamsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewGetSinglePagesWithBodyParamsPager not implemented")}
	}
	newGetSinglePagesWithBodyParamsPager := p.newGetSinglePagesWithBodyParamsPager.get(req)
	if newGetSinglePagesWithBodyParamsPager == nil {
		body, err := server.UnmarshalRequestAsJSON[paginggroup.BodyParam](req)
		if err != nil {
			return nil, err
		}
		resp := p.srv.NewGetSinglePagesWithBodyParamsPager(body, nil)
		newGetSinglePagesWithBodyParamsPager = &resp
		p.newGetSinglePagesWithBodyParamsPager.add(req, newGetSinglePagesWithBodyParamsPager)
		server.PagerResponderInjectNextLinks(newGetSinglePagesWithBodyParamsPager, req, func(page *paginggroup.PagingClientGetSinglePagesWithBodyParamsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newGetSinglePagesWithBodyParamsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newGetSinglePagesWithBodyParamsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newGetSinglePagesWithBodyParamsPager) {
		p.newGetSinglePagesWithBodyParamsPager.remove(req)
	}
	return resp, nil
}

func (p *PagingServerTransport) dispatchNewGetWithQueryParamsPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewGetWithQueryParamsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewGetWithQueryParamsPager not implemented")}
	}
	newGetWithQueryParamsPager := p.newGetWithQueryParamsPager.get(req)
	if newGetWithQueryParamsPager == nil {
		qp := req.URL.Query()
		requiredQueryParameterUnescaped, err := url.QueryUnescape(qp.Get("requiredQueryParameter"))
		if err != nil {
			return nil, err
		}
		requiredQueryParameterParam, err := parseWithCast(requiredQueryParameterUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		resp := p.srv.NewGetWithQueryParamsPager(requiredQueryParameterParam, nil)
		newGetWithQueryParamsPager = &resp
		p.newGetWithQueryParamsPager.add(req, newGetWithQueryParamsPager)
		server.PagerResponderInjectNextLinks(newGetWithQueryParamsPager, req, func(page *paginggroup.PagingClientGetWithQueryParamsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newGetWithQueryParamsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newGetWithQueryParamsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newGetWithQueryParamsPager) {
		p.newGetWithQueryParamsPager.remove(req)
	}
	return resp, nil
}

func (p *PagingServerTransport) dispatchNewPageWithMaxPageSizePager(req *http.Request) (*http.Response, error) {
	if p.srv.NewPageWithMaxPageSizePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewPageWithMaxPageSizePager not implemented")}
	}
	newPageWithMaxPageSizePager := p.newPageWithMaxPageSizePager.get(req)
	if newPageWithMaxPageSizePager == nil {
		qp := req.URL.Query()
		maxpagesizeUnescaped, err := url.QueryUnescape(qp.Get("$maxpagesize"))
		if err != nil {
			return nil, err
		}
		maxpagesizeParam := getOptional(maxpagesizeUnescaped)
		var options *paginggroup.PagingClientPageWithMaxPageSizeOptions
		if maxpagesizeParam != nil {
			options = &paginggroup.PagingClientPageWithMaxPageSizeOptions{
				Maxpagesize: maxpagesizeParam,
			}
		}
		resp := p.srv.NewPageWithMaxPageSizePager(options)
		newPageWithMaxPageSizePager = &resp
		p.newPageWithMaxPageSizePager.add(req, newPageWithMaxPageSizePager)
		server.PagerResponderInjectNextLinks(newPageWithMaxPageSizePager, req, func(page *paginggroup.PagingClientPageWithMaxPageSizeResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newPageWithMaxPageSizePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newPageWithMaxPageSizePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newPageWithMaxPageSizePager) {
		p.newPageWithMaxPageSizePager.remove(req)
	}
	return resp, nil
}

func (p *PagingServerTransport) dispatchNewReplaceAPIVersionPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewReplaceAPIVersionPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewReplaceAPIVersionPager not implemented")}
	}
	newReplaceAPIVersionPager := p.newReplaceAPIVersionPager.get(req)
	if newReplaceAPIVersionPager == nil {
		resp := p.srv.NewReplaceAPIVersionPager(nil)
		newReplaceAPIVersionPager = &resp
		p.newReplaceAPIVersionPager.add(req, newReplaceAPIVersionPager)
		server.PagerResponderInjectNextLinks(newReplaceAPIVersionPager, req, func(page *paginggroup.PagingClientReplaceAPIVersionResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newReplaceAPIVersionPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newReplaceAPIVersionPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newReplaceAPIVersionPager) {
		p.newReplaceAPIVersionPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to PagingServerTransport
var pagingServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
