// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	"generatortests/binarygroup"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"io"
	"net/http"
)

// UploadServer is a fake server for instances of the binarygroup.UploadClient type.
type UploadServer struct {
	// Binary is the fake for method UploadClient.Binary
	// HTTP status codes to indicate success: http.StatusOK
	Binary func(ctx context.Context, fileParam io.ReadSeekCloser, options *binarygroup.UploadClientBinaryOptions) (resp azfake.Responder[binarygroup.UploadClientBinaryResponse], errResp azfake.ErrorResponder)

	// File is the fake for method UploadClient.File
	// HTTP status codes to indicate success: http.StatusOK
	File func(ctx context.Context, fileParam io.ReadSeekCloser, options *binarygroup.UploadClientFileOptions) (resp azfake.Responder[binarygroup.UploadClientFileResponse], errResp azfake.ErrorResponder)
}

// NewUploadServerTransport creates a new instance of UploadServerTransport with the provided implementation.
// The returned UploadServerTransport instance is connected to an instance of binarygroup.UploadClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewUploadServerTransport(srv *UploadServer) *UploadServerTransport {
	return &UploadServerTransport{srv: srv}
}

// UploadServerTransport connects instances of binarygroup.UploadClient to instances of UploadServer.
// Don't use this type directly, use NewUploadServerTransport instead.
type UploadServerTransport struct {
	srv *UploadServer
}

// Do implements the policy.Transporter interface for UploadServerTransport.
func (u *UploadServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return u.dispatchToMethodFake(req, method)
}

func (u *UploadServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var res result
		switch method {
		case "UploadClient.Binary":
			res.resp, res.err = u.dispatchBinary(req)
		case "UploadClient.File":
			res.resp, res.err = u.dispatchFile(req)
		default:
			res.err = fmt.Errorf("unhandled API %s", method)
		}

		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (u *UploadServerTransport) dispatchBinary(req *http.Request) (*http.Response, error) {
	if u.srv.Binary == nil {
		return nil, &nonRetriableError{errors.New("fake for method Binary not implemented")}
	}
	respr, errRespr := u.srv.Binary(req.Context(), req.Body.(io.ReadSeekCloser), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (u *UploadServerTransport) dispatchFile(req *http.Request) (*http.Response, error) {
	if u.srv.File == nil {
		return nil, &nonRetriableError{errors.New("fake for method File not implemented")}
	}
	respr, errRespr := u.srv.File(req.Context(), req.Body.(io.ReadSeekCloser), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
