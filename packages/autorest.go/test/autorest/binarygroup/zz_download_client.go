// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package binarygroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// DownloadClient contains the methods for the Download group.
// Don't use this type directly, use a constructor function instead.
type DownloadClient struct {
	internal *azcore.Client
}

// ErrorStream - Get binary error stream
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - DownloadClientErrorStreamOptions contains the optional parameters for the DownloadClient.ErrorStream method.
func (client *DownloadClient) ErrorStream(ctx context.Context, options *DownloadClientErrorStreamOptions) (DownloadClientErrorStreamResponse, error) {
	var err error
	const operationName = "DownloadClient.ErrorStream"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.errorStreamCreateRequest(ctx, options)
	if err != nil {
		return DownloadClientErrorStreamResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DownloadClientErrorStreamResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DownloadClientErrorStreamResponse{}, err
	}
	return DownloadClientErrorStreamResponse{Body: httpResp.Body}, nil
}

// errorStreamCreateRequest creates the ErrorStream request.
func (client *DownloadClient) errorStreamCreateRequest(ctx context.Context, _ *DownloadClientErrorStreamOptions) (*policy.Request, error) {
	urlPath := "/binary/error"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	runtime.SkipBodyDownload(req)
	req.Raw().Header["Accept"] = []string{"application/octet-stream, application/json"}
	return req, nil
}
