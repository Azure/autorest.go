//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package binarygroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"io"
	"net/http"
)

// UploadClient contains the methods for the Upload group.
// Don't use this type directly, use a constructor function instead.
type UploadClient struct {
	internal *azcore.Client
}

// Binary - Uploading binary file
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - fileParam - Non-empty binary file
//   - options - UploadClientBinaryOptions contains the optional parameters for the UploadClient.Binary method.
func (client *UploadClient) Binary(ctx context.Context, fileParam io.ReadSeekCloser, options *UploadClientBinaryOptions) (UploadClientBinaryResponse, error) {
	var err error
	const operationName = "UploadClient.Binary"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.binaryCreateRequest(ctx, fileParam, options)
	if err != nil {
		return UploadClientBinaryResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return UploadClientBinaryResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return UploadClientBinaryResponse{}, err
	}
	return UploadClientBinaryResponse{}, nil
}

// binaryCreateRequest creates the Binary request.
func (client *UploadClient) binaryCreateRequest(ctx context.Context, fileParam io.ReadSeekCloser, options *UploadClientBinaryOptions) (*policy.Request, error) {
	urlPath := "/binary/octet"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	if err := req.SetBody(fileParam, "application/octet-stream"); err != nil {
		return nil, err
	}
	return req, nil
}

// File - Uploading json file
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - fileParam - JSON file with payload { "more": "cowbell" }
//   - options - UploadClientFileOptions contains the optional parameters for the UploadClient.File method.
func (client *UploadClient) File(ctx context.Context, fileParam io.ReadSeekCloser, options *UploadClientFileOptions) (UploadClientFileResponse, error) {
	var err error
	const operationName = "UploadClient.File"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.fileCreateRequest(ctx, fileParam, options)
	if err != nil {
		return UploadClientFileResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return UploadClientFileResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return UploadClientFileResponse{}, err
	}
	return UploadClientFileResponse{}, nil
}

// fileCreateRequest creates the File request.
func (client *UploadClient) fileCreateRequest(ctx context.Context, fileParam io.ReadSeekCloser, options *UploadClientFileOptions) (*policy.Request, error) {
	urlPath := "/binary/file"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	if err := req.SetBody(fileParam, "application/json"); err != nil {
		return nil, err
	}
	return req, nil
}
