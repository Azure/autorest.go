//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	"generatortests/headgroup"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// HTTPSuccessServer is a fake server for instances of the headgroup.HTTPSuccessClient type.
type HTTPSuccessServer struct {
	// Head200 is the fake for method HTTPSuccessClient.Head200
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNotFound
	Head200 func(ctx context.Context, options *headgroup.HTTPSuccessClientHead200Options) (resp azfake.Responder[headgroup.HTTPSuccessClientHead200Response], errResp azfake.ErrorResponder)

	// Head204 is the fake for method HTTPSuccessClient.Head204
	// HTTP status codes to indicate success: http.StatusNoContent, http.StatusNotFound
	Head204 func(ctx context.Context, options *headgroup.HTTPSuccessClientHead204Options) (resp azfake.Responder[headgroup.HTTPSuccessClientHead204Response], errResp azfake.ErrorResponder)

	// Head404 is the fake for method HTTPSuccessClient.Head404
	// HTTP status codes to indicate success: http.StatusNoContent, http.StatusNotFound
	Head404 func(ctx context.Context, options *headgroup.HTTPSuccessClientHead404Options) (resp azfake.Responder[headgroup.HTTPSuccessClientHead404Response], errResp azfake.ErrorResponder)
}

// NewHTTPSuccessServerTransport creates a new instance of HTTPSuccessServerTransport with the provided implementation.
// The returned HTTPSuccessServerTransport instance is connected to an instance of headgroup.HTTPSuccessClient by way of the
// undefined.Transporter field.
func NewHTTPSuccessServerTransport(srv *HTTPSuccessServer) *HTTPSuccessServerTransport {
	return &HTTPSuccessServerTransport{srv: srv}
}

// HTTPSuccessServerTransport connects instances of headgroup.HTTPSuccessClient to instances of HTTPSuccessServer.
// Don't use this type directly, use NewHTTPSuccessServerTransport instead.
type HTTPSuccessServerTransport struct {
	srv *HTTPSuccessServer
}

// Do implements the policy.Transporter interface for HTTPSuccessServerTransport.
func (h *HTTPSuccessServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "HTTPSuccessClient.Head200":
		resp, err = h.dispatchHead200(req)
	case "HTTPSuccessClient.Head204":
		resp, err = h.dispatchHead204(req)
	case "HTTPSuccessClient.Head404":
		resp, err = h.dispatchHead404(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (h *HTTPSuccessServerTransport) dispatchHead200(req *http.Request) (*http.Response, error) {
	if h.srv.Head200 == nil {
		return nil, &nonRetriableError{errors.New("method Head200 not implemented")}
	}
	respr, errRespr := h.srv.Head200(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNotFound}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNotFound", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HTTPSuccessServerTransport) dispatchHead204(req *http.Request) (*http.Response, error) {
	if h.srv.Head204 == nil {
		return nil, &nonRetriableError{errors.New("method Head204 not implemented")}
	}
	respr, errRespr := h.srv.Head204(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent, http.StatusNotFound}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent, http.StatusNotFound", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HTTPSuccessServerTransport) dispatchHead404(req *http.Request) (*http.Response, error) {
	if h.srv.Head404 == nil {
		return nil, &nonRetriableError{errors.New("method Head404 not implemented")}
	}
	respr, errRespr := h.srv.Head404(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent, http.StatusNotFound}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent, http.StatusNotFound", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
