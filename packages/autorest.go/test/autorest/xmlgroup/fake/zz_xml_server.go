// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	"generatortests/xmlgroup"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// XMLServer is a fake server for instances of the xmlgroup.XMLClient type.
type XMLServer struct {
	// GetACLs is the fake for method XMLClient.GetACLs
	// HTTP status codes to indicate success: http.StatusOK
	GetACLs func(ctx context.Context, options *xmlgroup.XMLClientGetACLsOptions) (resp azfake.Responder[xmlgroup.XMLClientGetACLsResponse], errResp azfake.ErrorResponder)

	// GetBytes is the fake for method XMLClient.GetBytes
	// HTTP status codes to indicate success: http.StatusOK
	GetBytes func(ctx context.Context, options *xmlgroup.XMLClientGetBytesOptions) (resp azfake.Responder[xmlgroup.XMLClientGetBytesResponse], errResp azfake.ErrorResponder)

	// GetComplexTypeRefNoMeta is the fake for method XMLClient.GetComplexTypeRefNoMeta
	// HTTP status codes to indicate success: http.StatusOK
	GetComplexTypeRefNoMeta func(ctx context.Context, options *xmlgroup.XMLClientGetComplexTypeRefNoMetaOptions) (resp azfake.Responder[xmlgroup.XMLClientGetComplexTypeRefNoMetaResponse], errResp azfake.ErrorResponder)

	// GetComplexTypeRefWithMeta is the fake for method XMLClient.GetComplexTypeRefWithMeta
	// HTTP status codes to indicate success: http.StatusOK
	GetComplexTypeRefWithMeta func(ctx context.Context, options *xmlgroup.XMLClientGetComplexTypeRefWithMetaOptions) (resp azfake.Responder[xmlgroup.XMLClientGetComplexTypeRefWithMetaResponse], errResp azfake.ErrorResponder)

	// GetEmptyChildElement is the fake for method XMLClient.GetEmptyChildElement
	// HTTP status codes to indicate success: http.StatusOK
	GetEmptyChildElement func(ctx context.Context, options *xmlgroup.XMLClientGetEmptyChildElementOptions) (resp azfake.Responder[xmlgroup.XMLClientGetEmptyChildElementResponse], errResp azfake.ErrorResponder)

	// GetEmptyList is the fake for method XMLClient.GetEmptyList
	// HTTP status codes to indicate success: http.StatusOK
	GetEmptyList func(ctx context.Context, options *xmlgroup.XMLClientGetEmptyListOptions) (resp azfake.Responder[xmlgroup.XMLClientGetEmptyListResponse], errResp azfake.ErrorResponder)

	// GetEmptyRootList is the fake for method XMLClient.GetEmptyRootList
	// HTTP status codes to indicate success: http.StatusOK
	GetEmptyRootList func(ctx context.Context, options *xmlgroup.XMLClientGetEmptyRootListOptions) (resp azfake.Responder[xmlgroup.XMLClientGetEmptyRootListResponse], errResp azfake.ErrorResponder)

	// GetEmptyWrappedLists is the fake for method XMLClient.GetEmptyWrappedLists
	// HTTP status codes to indicate success: http.StatusOK
	GetEmptyWrappedLists func(ctx context.Context, options *xmlgroup.XMLClientGetEmptyWrappedListsOptions) (resp azfake.Responder[xmlgroup.XMLClientGetEmptyWrappedListsResponse], errResp azfake.ErrorResponder)

	// GetHeaders is the fake for method XMLClient.GetHeaders
	// HTTP status codes to indicate success: http.StatusOK
	GetHeaders func(ctx context.Context, options *xmlgroup.XMLClientGetHeadersOptions) (resp azfake.Responder[xmlgroup.XMLClientGetHeadersResponse], errResp azfake.ErrorResponder)

	// GetRootList is the fake for method XMLClient.GetRootList
	// HTTP status codes to indicate success: http.StatusOK
	GetRootList func(ctx context.Context, options *xmlgroup.XMLClientGetRootListOptions) (resp azfake.Responder[xmlgroup.XMLClientGetRootListResponse], errResp azfake.ErrorResponder)

	// GetRootListSingleItem is the fake for method XMLClient.GetRootListSingleItem
	// HTTP status codes to indicate success: http.StatusOK
	GetRootListSingleItem func(ctx context.Context, options *xmlgroup.XMLClientGetRootListSingleItemOptions) (resp azfake.Responder[xmlgroup.XMLClientGetRootListSingleItemResponse], errResp azfake.ErrorResponder)

	// GetServiceProperties is the fake for method XMLClient.GetServiceProperties
	// HTTP status codes to indicate success: http.StatusOK
	GetServiceProperties func(ctx context.Context, options *xmlgroup.XMLClientGetServicePropertiesOptions) (resp azfake.Responder[xmlgroup.XMLClientGetServicePropertiesResponse], errResp azfake.ErrorResponder)

	// GetSimple is the fake for method XMLClient.GetSimple
	// HTTP status codes to indicate success: http.StatusOK
	GetSimple func(ctx context.Context, options *xmlgroup.XMLClientGetSimpleOptions) (resp azfake.Responder[xmlgroup.XMLClientGetSimpleResponse], errResp azfake.ErrorResponder)

	// GetURI is the fake for method XMLClient.GetURI
	// HTTP status codes to indicate success: http.StatusOK
	GetURI func(ctx context.Context, options *xmlgroup.XMLClientGetURIOptions) (resp azfake.Responder[xmlgroup.XMLClientGetURIResponse], errResp azfake.ErrorResponder)

	// GetWrappedLists is the fake for method XMLClient.GetWrappedLists
	// HTTP status codes to indicate success: http.StatusOK
	GetWrappedLists func(ctx context.Context, options *xmlgroup.XMLClientGetWrappedListsOptions) (resp azfake.Responder[xmlgroup.XMLClientGetWrappedListsResponse], errResp azfake.ErrorResponder)

	// GetXMsText is the fake for method XMLClient.GetXMsText
	// HTTP status codes to indicate success: http.StatusOK
	GetXMsText func(ctx context.Context, options *xmlgroup.XMLClientGetXMsTextOptions) (resp azfake.Responder[xmlgroup.XMLClientGetXMsTextResponse], errResp azfake.ErrorResponder)

	// JSONInput is the fake for method XMLClient.JSONInput
	// HTTP status codes to indicate success: http.StatusOK
	JSONInput func(ctx context.Context, properties xmlgroup.JSONInput, options *xmlgroup.XMLClientJSONInputOptions) (resp azfake.Responder[xmlgroup.XMLClientJSONInputResponse], errResp azfake.ErrorResponder)

	// JSONOutput is the fake for method XMLClient.JSONOutput
	// HTTP status codes to indicate success: http.StatusOK
	JSONOutput func(ctx context.Context, options *xmlgroup.XMLClientJSONOutputOptions) (resp azfake.Responder[xmlgroup.XMLClientJSONOutputResponse], errResp azfake.ErrorResponder)

	// ListBlobs is the fake for method XMLClient.ListBlobs
	// HTTP status codes to indicate success: http.StatusOK
	ListBlobs func(ctx context.Context, options *xmlgroup.XMLClientListBlobsOptions) (resp azfake.Responder[xmlgroup.XMLClientListBlobsResponse], errResp azfake.ErrorResponder)

	// ListContainers is the fake for method XMLClient.ListContainers
	// HTTP status codes to indicate success: http.StatusOK
	ListContainers func(ctx context.Context, options *xmlgroup.XMLClientListContainersOptions) (resp azfake.Responder[xmlgroup.XMLClientListContainersResponse], errResp azfake.ErrorResponder)

	// PutACLs is the fake for method XMLClient.PutACLs
	// HTTP status codes to indicate success: http.StatusCreated
	PutACLs func(ctx context.Context, properties []*xmlgroup.SignedIdentifier, options *xmlgroup.XMLClientPutACLsOptions) (resp azfake.Responder[xmlgroup.XMLClientPutACLsResponse], errResp azfake.ErrorResponder)

	// PutBinary is the fake for method XMLClient.PutBinary
	// HTTP status codes to indicate success: http.StatusCreated
	PutBinary func(ctx context.Context, slideshow xmlgroup.ModelWithByteProperty, options *xmlgroup.XMLClientPutBinaryOptions) (resp azfake.Responder[xmlgroup.XMLClientPutBinaryResponse], errResp azfake.ErrorResponder)

	// PutComplexTypeRefNoMeta is the fake for method XMLClient.PutComplexTypeRefNoMeta
	// HTTP status codes to indicate success: http.StatusCreated
	PutComplexTypeRefNoMeta func(ctx context.Context, model xmlgroup.RootWithRefAndNoMeta, options *xmlgroup.XMLClientPutComplexTypeRefNoMetaOptions) (resp azfake.Responder[xmlgroup.XMLClientPutComplexTypeRefNoMetaResponse], errResp azfake.ErrorResponder)

	// PutComplexTypeRefWithMeta is the fake for method XMLClient.PutComplexTypeRefWithMeta
	// HTTP status codes to indicate success: http.StatusCreated
	PutComplexTypeRefWithMeta func(ctx context.Context, model xmlgroup.RootWithRefAndMeta, options *xmlgroup.XMLClientPutComplexTypeRefWithMetaOptions) (resp azfake.Responder[xmlgroup.XMLClientPutComplexTypeRefWithMetaResponse], errResp azfake.ErrorResponder)

	// PutEmptyChildElement is the fake for method XMLClient.PutEmptyChildElement
	// HTTP status codes to indicate success: http.StatusCreated
	PutEmptyChildElement func(ctx context.Context, banana xmlgroup.Banana, options *xmlgroup.XMLClientPutEmptyChildElementOptions) (resp azfake.Responder[xmlgroup.XMLClientPutEmptyChildElementResponse], errResp azfake.ErrorResponder)

	// PutEmptyList is the fake for method XMLClient.PutEmptyList
	// HTTP status codes to indicate success: http.StatusCreated
	PutEmptyList func(ctx context.Context, slideshow xmlgroup.Slideshow, options *xmlgroup.XMLClientPutEmptyListOptions) (resp azfake.Responder[xmlgroup.XMLClientPutEmptyListResponse], errResp azfake.ErrorResponder)

	// PutEmptyRootList is the fake for method XMLClient.PutEmptyRootList
	// HTTP status codes to indicate success: http.StatusCreated
	PutEmptyRootList func(ctx context.Context, bananas []*xmlgroup.Banana, options *xmlgroup.XMLClientPutEmptyRootListOptions) (resp azfake.Responder[xmlgroup.XMLClientPutEmptyRootListResponse], errResp azfake.ErrorResponder)

	// PutEmptyWrappedLists is the fake for method XMLClient.PutEmptyWrappedLists
	// HTTP status codes to indicate success: http.StatusCreated
	PutEmptyWrappedLists func(ctx context.Context, appleBarrel xmlgroup.AppleBarrel, options *xmlgroup.XMLClientPutEmptyWrappedListsOptions) (resp azfake.Responder[xmlgroup.XMLClientPutEmptyWrappedListsResponse], errResp azfake.ErrorResponder)

	// PutRootList is the fake for method XMLClient.PutRootList
	// HTTP status codes to indicate success: http.StatusCreated
	PutRootList func(ctx context.Context, bananas []*xmlgroup.Banana, options *xmlgroup.XMLClientPutRootListOptions) (resp azfake.Responder[xmlgroup.XMLClientPutRootListResponse], errResp azfake.ErrorResponder)

	// PutRootListSingleItem is the fake for method XMLClient.PutRootListSingleItem
	// HTTP status codes to indicate success: http.StatusCreated
	PutRootListSingleItem func(ctx context.Context, bananas []*xmlgroup.Banana, options *xmlgroup.XMLClientPutRootListSingleItemOptions) (resp azfake.Responder[xmlgroup.XMLClientPutRootListSingleItemResponse], errResp azfake.ErrorResponder)

	// PutServiceProperties is the fake for method XMLClient.PutServiceProperties
	// HTTP status codes to indicate success: http.StatusCreated
	PutServiceProperties func(ctx context.Context, properties xmlgroup.StorageServiceProperties, options *xmlgroup.XMLClientPutServicePropertiesOptions) (resp azfake.Responder[xmlgroup.XMLClientPutServicePropertiesResponse], errResp azfake.ErrorResponder)

	// PutSimple is the fake for method XMLClient.PutSimple
	// HTTP status codes to indicate success: http.StatusCreated
	PutSimple func(ctx context.Context, slideshow xmlgroup.Slideshow, options *xmlgroup.XMLClientPutSimpleOptions) (resp azfake.Responder[xmlgroup.XMLClientPutSimpleResponse], errResp azfake.ErrorResponder)

	// PutURI is the fake for method XMLClient.PutURI
	// HTTP status codes to indicate success: http.StatusCreated
	PutURI func(ctx context.Context, model xmlgroup.ModelWithURLProperty, options *xmlgroup.XMLClientPutURIOptions) (resp azfake.Responder[xmlgroup.XMLClientPutURIResponse], errResp azfake.ErrorResponder)

	// PutWrappedLists is the fake for method XMLClient.PutWrappedLists
	// HTTP status codes to indicate success: http.StatusCreated
	PutWrappedLists func(ctx context.Context, wrappedLists xmlgroup.AppleBarrel, options *xmlgroup.XMLClientPutWrappedListsOptions) (resp azfake.Responder[xmlgroup.XMLClientPutWrappedListsResponse], errResp azfake.ErrorResponder)
}

// NewXMLServerTransport creates a new instance of XMLServerTransport with the provided implementation.
// The returned XMLServerTransport instance is connected to an instance of xmlgroup.XMLClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewXMLServerTransport(srv *XMLServer) *XMLServerTransport {
	return &XMLServerTransport{srv: srv}
}

// XMLServerTransport connects instances of xmlgroup.XMLClient to instances of XMLServer.
// Don't use this type directly, use NewXMLServerTransport instead.
type XMLServerTransport struct {
	srv *XMLServer
}

// Do implements the policy.Transporter interface for XMLServerTransport.
func (x *XMLServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return x.dispatchToMethodFake(req, method)
}

func (x *XMLServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "XMLClient.GetACLs":
		resp, err = x.dispatchGetACLs(req)
	case "XMLClient.GetBytes":
		resp, err = x.dispatchGetBytes(req)
	case "XMLClient.GetComplexTypeRefNoMeta":
		resp, err = x.dispatchGetComplexTypeRefNoMeta(req)
	case "XMLClient.GetComplexTypeRefWithMeta":
		resp, err = x.dispatchGetComplexTypeRefWithMeta(req)
	case "XMLClient.GetEmptyChildElement":
		resp, err = x.dispatchGetEmptyChildElement(req)
	case "XMLClient.GetEmptyList":
		resp, err = x.dispatchGetEmptyList(req)
	case "XMLClient.GetEmptyRootList":
		resp, err = x.dispatchGetEmptyRootList(req)
	case "XMLClient.GetEmptyWrappedLists":
		resp, err = x.dispatchGetEmptyWrappedLists(req)
	case "XMLClient.GetHeaders":
		resp, err = x.dispatchGetHeaders(req)
	case "XMLClient.GetRootList":
		resp, err = x.dispatchGetRootList(req)
	case "XMLClient.GetRootListSingleItem":
		resp, err = x.dispatchGetRootListSingleItem(req)
	case "XMLClient.GetServiceProperties":
		resp, err = x.dispatchGetServiceProperties(req)
	case "XMLClient.GetSimple":
		resp, err = x.dispatchGetSimple(req)
	case "XMLClient.GetURI":
		resp, err = x.dispatchGetURI(req)
	case "XMLClient.GetWrappedLists":
		resp, err = x.dispatchGetWrappedLists(req)
	case "XMLClient.GetXMsText":
		resp, err = x.dispatchGetXMsText(req)
	case "XMLClient.JSONInput":
		resp, err = x.dispatchJSONInput(req)
	case "XMLClient.JSONOutput":
		resp, err = x.dispatchJSONOutput(req)
	case "XMLClient.ListBlobs":
		resp, err = x.dispatchListBlobs(req)
	case "XMLClient.ListContainers":
		resp, err = x.dispatchListContainers(req)
	case "XMLClient.PutACLs":
		resp, err = x.dispatchPutACLs(req)
	case "XMLClient.PutBinary":
		resp, err = x.dispatchPutBinary(req)
	case "XMLClient.PutComplexTypeRefNoMeta":
		resp, err = x.dispatchPutComplexTypeRefNoMeta(req)
	case "XMLClient.PutComplexTypeRefWithMeta":
		resp, err = x.dispatchPutComplexTypeRefWithMeta(req)
	case "XMLClient.PutEmptyChildElement":
		resp, err = x.dispatchPutEmptyChildElement(req)
	case "XMLClient.PutEmptyList":
		resp, err = x.dispatchPutEmptyList(req)
	case "XMLClient.PutEmptyRootList":
		resp, err = x.dispatchPutEmptyRootList(req)
	case "XMLClient.PutEmptyWrappedLists":
		resp, err = x.dispatchPutEmptyWrappedLists(req)
	case "XMLClient.PutRootList":
		resp, err = x.dispatchPutRootList(req)
	case "XMLClient.PutRootListSingleItem":
		resp, err = x.dispatchPutRootListSingleItem(req)
	case "XMLClient.PutServiceProperties":
		resp, err = x.dispatchPutServiceProperties(req)
	case "XMLClient.PutSimple":
		resp, err = x.dispatchPutSimple(req)
	case "XMLClient.PutURI":
		resp, err = x.dispatchPutURI(req)
	case "XMLClient.PutWrappedLists":
		resp, err = x.dispatchPutWrappedLists(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (x *XMLServerTransport) dispatchGetACLs(req *http.Request) (*http.Response, error) {
	if x.srv.GetACLs == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetACLs not implemented")}
	}
	respr, errRespr := x.srv.GetACLs(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsXML(respContent, server.GetResponse(respr), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchGetBytes(req *http.Request) (*http.Response, error) {
	if x.srv.GetBytes == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetBytes not implemented")}
	}
	respr, errRespr := x.srv.GetBytes(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsXML(respContent, server.GetResponse(respr).ModelWithByteProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchGetComplexTypeRefNoMeta(req *http.Request) (*http.Response, error) {
	if x.srv.GetComplexTypeRefNoMeta == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetComplexTypeRefNoMeta not implemented")}
	}
	respr, errRespr := x.srv.GetComplexTypeRefNoMeta(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsXML(respContent, server.GetResponse(respr).RootWithRefAndNoMeta, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchGetComplexTypeRefWithMeta(req *http.Request) (*http.Response, error) {
	if x.srv.GetComplexTypeRefWithMeta == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetComplexTypeRefWithMeta not implemented")}
	}
	respr, errRespr := x.srv.GetComplexTypeRefWithMeta(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsXML(respContent, server.GetResponse(respr).RootWithRefAndMeta, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchGetEmptyChildElement(req *http.Request) (*http.Response, error) {
	if x.srv.GetEmptyChildElement == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetEmptyChildElement not implemented")}
	}
	respr, errRespr := x.srv.GetEmptyChildElement(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsXML(respContent, server.GetResponse(respr).Banana, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchGetEmptyList(req *http.Request) (*http.Response, error) {
	if x.srv.GetEmptyList == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetEmptyList not implemented")}
	}
	respr, errRespr := x.srv.GetEmptyList(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsXML(respContent, server.GetResponse(respr).Slideshow, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchGetEmptyRootList(req *http.Request) (*http.Response, error) {
	if x.srv.GetEmptyRootList == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetEmptyRootList not implemented")}
	}
	respr, errRespr := x.srv.GetEmptyRootList(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsXML(respContent, server.GetResponse(respr), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchGetEmptyWrappedLists(req *http.Request) (*http.Response, error) {
	if x.srv.GetEmptyWrappedLists == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetEmptyWrappedLists not implemented")}
	}
	respr, errRespr := x.srv.GetEmptyWrappedLists(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsXML(respContent, server.GetResponse(respr).AppleBarrel, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchGetHeaders(req *http.Request) (*http.Response, error) {
	if x.srv.GetHeaders == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetHeaders not implemented")}
	}
	respr, errRespr := x.srv.GetHeaders(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).CustomHeader; val != nil {
		resp.Header.Set("Custom-Header", *val)
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchGetRootList(req *http.Request) (*http.Response, error) {
	if x.srv.GetRootList == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetRootList not implemented")}
	}
	respr, errRespr := x.srv.GetRootList(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsXML(respContent, server.GetResponse(respr), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchGetRootListSingleItem(req *http.Request) (*http.Response, error) {
	if x.srv.GetRootListSingleItem == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetRootListSingleItem not implemented")}
	}
	respr, errRespr := x.srv.GetRootListSingleItem(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsXML(respContent, server.GetResponse(respr), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchGetServiceProperties(req *http.Request) (*http.Response, error) {
	if x.srv.GetServiceProperties == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetServiceProperties not implemented")}
	}
	respr, errRespr := x.srv.GetServiceProperties(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsXML(respContent, server.GetResponse(respr).StorageServiceProperties, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchGetSimple(req *http.Request) (*http.Response, error) {
	if x.srv.GetSimple == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetSimple not implemented")}
	}
	respr, errRespr := x.srv.GetSimple(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsXML(respContent, server.GetResponse(respr).Slideshow, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchGetURI(req *http.Request) (*http.Response, error) {
	if x.srv.GetURI == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetURI not implemented")}
	}
	respr, errRespr := x.srv.GetURI(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsXML(respContent, server.GetResponse(respr).ModelWithURLProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchGetWrappedLists(req *http.Request) (*http.Response, error) {
	if x.srv.GetWrappedLists == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetWrappedLists not implemented")}
	}
	respr, errRespr := x.srv.GetWrappedLists(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsXML(respContent, server.GetResponse(respr).AppleBarrel, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchGetXMsText(req *http.Request) (*http.Response, error) {
	if x.srv.GetXMsText == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetXMsText not implemented")}
	}
	respr, errRespr := x.srv.GetXMsText(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsXML(respContent, server.GetResponse(respr).ObjectWithXMsTextProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchJSONInput(req *http.Request) (*http.Response, error) {
	if x.srv.JSONInput == nil {
		return nil, &nonRetriableError{errors.New("fake for method JSONInput not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[xmlgroup.JSONInput](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := x.srv.JSONInput(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchJSONOutput(req *http.Request) (*http.Response, error) {
	if x.srv.JSONOutput == nil {
		return nil, &nonRetriableError{errors.New("fake for method JSONOutput not implemented")}
	}
	respr, errRespr := x.srv.JSONOutput(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).JSONOutput, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchListBlobs(req *http.Request) (*http.Response, error) {
	if x.srv.ListBlobs == nil {
		return nil, &nonRetriableError{errors.New("fake for method ListBlobs not implemented")}
	}
	respr, errRespr := x.srv.ListBlobs(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsXML(respContent, server.GetResponse(respr).ListBlobsResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchListContainers(req *http.Request) (*http.Response, error) {
	if x.srv.ListContainers == nil {
		return nil, &nonRetriableError{errors.New("fake for method ListContainers not implemented")}
	}
	respr, errRespr := x.srv.ListContainers(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsXML(respContent, server.GetResponse(respr).ListContainersResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchPutACLs(req *http.Request) (*http.Response, error) {
	if x.srv.PutACLs == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutACLs not implemented")}
	}
	body, err := server.UnmarshalRequestAsXML[[]*xmlgroup.SignedIdentifier](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := x.srv.PutACLs(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchPutBinary(req *http.Request) (*http.Response, error) {
	if x.srv.PutBinary == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutBinary not implemented")}
	}
	body, err := server.UnmarshalRequestAsXML[xmlgroup.ModelWithByteProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := x.srv.PutBinary(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchPutComplexTypeRefNoMeta(req *http.Request) (*http.Response, error) {
	if x.srv.PutComplexTypeRefNoMeta == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutComplexTypeRefNoMeta not implemented")}
	}
	body, err := server.UnmarshalRequestAsXML[xmlgroup.RootWithRefAndNoMeta](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := x.srv.PutComplexTypeRefNoMeta(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchPutComplexTypeRefWithMeta(req *http.Request) (*http.Response, error) {
	if x.srv.PutComplexTypeRefWithMeta == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutComplexTypeRefWithMeta not implemented")}
	}
	body, err := server.UnmarshalRequestAsXML[xmlgroup.RootWithRefAndMeta](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := x.srv.PutComplexTypeRefWithMeta(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchPutEmptyChildElement(req *http.Request) (*http.Response, error) {
	if x.srv.PutEmptyChildElement == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutEmptyChildElement not implemented")}
	}
	body, err := server.UnmarshalRequestAsXML[xmlgroup.Banana](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := x.srv.PutEmptyChildElement(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchPutEmptyList(req *http.Request) (*http.Response, error) {
	if x.srv.PutEmptyList == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutEmptyList not implemented")}
	}
	body, err := server.UnmarshalRequestAsXML[xmlgroup.Slideshow](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := x.srv.PutEmptyList(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchPutEmptyRootList(req *http.Request) (*http.Response, error) {
	if x.srv.PutEmptyRootList == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutEmptyRootList not implemented")}
	}
	body, err := server.UnmarshalRequestAsXML[[]*xmlgroup.Banana](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := x.srv.PutEmptyRootList(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchPutEmptyWrappedLists(req *http.Request) (*http.Response, error) {
	if x.srv.PutEmptyWrappedLists == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutEmptyWrappedLists not implemented")}
	}
	body, err := server.UnmarshalRequestAsXML[xmlgroup.AppleBarrel](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := x.srv.PutEmptyWrappedLists(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchPutRootList(req *http.Request) (*http.Response, error) {
	if x.srv.PutRootList == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutRootList not implemented")}
	}
	body, err := server.UnmarshalRequestAsXML[[]*xmlgroup.Banana](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := x.srv.PutRootList(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchPutRootListSingleItem(req *http.Request) (*http.Response, error) {
	if x.srv.PutRootListSingleItem == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutRootListSingleItem not implemented")}
	}
	body, err := server.UnmarshalRequestAsXML[[]*xmlgroup.Banana](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := x.srv.PutRootListSingleItem(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchPutServiceProperties(req *http.Request) (*http.Response, error) {
	if x.srv.PutServiceProperties == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutServiceProperties not implemented")}
	}
	body, err := server.UnmarshalRequestAsXML[xmlgroup.StorageServiceProperties](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := x.srv.PutServiceProperties(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchPutSimple(req *http.Request) (*http.Response, error) {
	if x.srv.PutSimple == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutSimple not implemented")}
	}
	body, err := server.UnmarshalRequestAsXML[xmlgroup.Slideshow](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := x.srv.PutSimple(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchPutURI(req *http.Request) (*http.Response, error) {
	if x.srv.PutURI == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutURI not implemented")}
	}
	body, err := server.UnmarshalRequestAsXML[xmlgroup.ModelWithURLProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := x.srv.PutURI(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *XMLServerTransport) dispatchPutWrappedLists(req *http.Request) (*http.Response, error) {
	if x.srv.PutWrappedLists == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutWrappedLists not implemented")}
	}
	body, err := server.UnmarshalRequestAsXML[xmlgroup.AppleBarrel](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := x.srv.PutWrappedLists(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
