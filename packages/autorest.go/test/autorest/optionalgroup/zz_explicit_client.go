// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package optionalgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"io"
	"net/http"
	"strconv"
	"strings"
)

// ExplicitClient contains the methods for the Explicit group.
// Don't use this type directly, use a constructor function instead.
type ExplicitClient struct {
	internal *azcore.Client
}

// PostOptionalArrayHeader - Test explicitly optional integer. Please put a header 'headerParameter' => null.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - ExplicitClientPostOptionalArrayHeaderOptions contains the optional parameters for the ExplicitClient.PostOptionalArrayHeader
//     method.
func (client *ExplicitClient) PostOptionalArrayHeader(ctx context.Context, options *ExplicitClientPostOptionalArrayHeaderOptions) (ExplicitClientPostOptionalArrayHeaderResponse, error) {
	var err error
	const operationName = "ExplicitClient.PostOptionalArrayHeader"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.postOptionalArrayHeaderCreateRequest(ctx, options)
	if err != nil {
		return ExplicitClientPostOptionalArrayHeaderResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExplicitClientPostOptionalArrayHeaderResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExplicitClientPostOptionalArrayHeaderResponse{}, err
	}
	return ExplicitClientPostOptionalArrayHeaderResponse{}, nil
}

// postOptionalArrayHeaderCreateRequest creates the PostOptionalArrayHeader request.
func (client *ExplicitClient) postOptionalArrayHeaderCreateRequest(ctx context.Context, options *ExplicitClientPostOptionalArrayHeaderOptions) (*policy.Request, error) {
	urlPath := "/reqopt/optional/array/header"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.HeaderParameter != nil {
		req.Raw().Header["headerParameter"] = []string{strings.Join(options.HeaderParameter, ",")}
	}
	return req, nil
}

// PostOptionalArrayParameter - Test explicitly optional array. Please put null.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - ExplicitClientPostOptionalArrayParameterOptions contains the optional parameters for the ExplicitClient.PostOptionalArrayParameter
//     method.
func (client *ExplicitClient) PostOptionalArrayParameter(ctx context.Context, options *ExplicitClientPostOptionalArrayParameterOptions) (ExplicitClientPostOptionalArrayParameterResponse, error) {
	var err error
	const operationName = "ExplicitClient.PostOptionalArrayParameter"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.postOptionalArrayParameterCreateRequest(ctx, options)
	if err != nil {
		return ExplicitClientPostOptionalArrayParameterResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExplicitClientPostOptionalArrayParameterResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExplicitClientPostOptionalArrayParameterResponse{}, err
	}
	return ExplicitClientPostOptionalArrayParameterResponse{}, nil
}

// postOptionalArrayParameterCreateRequest creates the PostOptionalArrayParameter request.
func (client *ExplicitClient) postOptionalArrayParameterCreateRequest(ctx context.Context, options *ExplicitClientPostOptionalArrayParameterOptions) (*policy.Request, error) {
	urlPath := "/reqopt/optional/array/parameter"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.BodyParameter != nil {
		if err := runtime.MarshalAsJSON(req, options.BodyParameter); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// PostOptionalArrayProperty - Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - ExplicitClientPostOptionalArrayPropertyOptions contains the optional parameters for the ExplicitClient.PostOptionalArrayProperty
//     method.
func (client *ExplicitClient) PostOptionalArrayProperty(ctx context.Context, options *ExplicitClientPostOptionalArrayPropertyOptions) (ExplicitClientPostOptionalArrayPropertyResponse, error) {
	var err error
	const operationName = "ExplicitClient.PostOptionalArrayProperty"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.postOptionalArrayPropertyCreateRequest(ctx, options)
	if err != nil {
		return ExplicitClientPostOptionalArrayPropertyResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExplicitClientPostOptionalArrayPropertyResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExplicitClientPostOptionalArrayPropertyResponse{}, err
	}
	return ExplicitClientPostOptionalArrayPropertyResponse{}, nil
}

// postOptionalArrayPropertyCreateRequest creates the PostOptionalArrayProperty request.
func (client *ExplicitClient) postOptionalArrayPropertyCreateRequest(ctx context.Context, options *ExplicitClientPostOptionalArrayPropertyOptions) (*policy.Request, error) {
	urlPath := "/reqopt/optional/array/property"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.BodyParameter != nil {
		if err := runtime.MarshalAsJSON(req, *options.BodyParameter); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// PostOptionalClassParameter - Test explicitly optional complex object. Please put null.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - ExplicitClientPostOptionalClassParameterOptions contains the optional parameters for the ExplicitClient.PostOptionalClassParameter
//     method.
func (client *ExplicitClient) PostOptionalClassParameter(ctx context.Context, options *ExplicitClientPostOptionalClassParameterOptions) (ExplicitClientPostOptionalClassParameterResponse, error) {
	var err error
	const operationName = "ExplicitClient.PostOptionalClassParameter"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.postOptionalClassParameterCreateRequest(ctx, options)
	if err != nil {
		return ExplicitClientPostOptionalClassParameterResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExplicitClientPostOptionalClassParameterResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExplicitClientPostOptionalClassParameterResponse{}, err
	}
	return ExplicitClientPostOptionalClassParameterResponse{}, nil
}

// postOptionalClassParameterCreateRequest creates the PostOptionalClassParameter request.
func (client *ExplicitClient) postOptionalClassParameterCreateRequest(ctx context.Context, options *ExplicitClientPostOptionalClassParameterOptions) (*policy.Request, error) {
	urlPath := "/reqopt/optional/class/parameter"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.BodyParameter != nil {
		if err := runtime.MarshalAsJSON(req, *options.BodyParameter); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// PostOptionalClassProperty - Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - ExplicitClientPostOptionalClassPropertyOptions contains the optional parameters for the ExplicitClient.PostOptionalClassProperty
//     method.
func (client *ExplicitClient) PostOptionalClassProperty(ctx context.Context, options *ExplicitClientPostOptionalClassPropertyOptions) (ExplicitClientPostOptionalClassPropertyResponse, error) {
	var err error
	const operationName = "ExplicitClient.PostOptionalClassProperty"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.postOptionalClassPropertyCreateRequest(ctx, options)
	if err != nil {
		return ExplicitClientPostOptionalClassPropertyResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExplicitClientPostOptionalClassPropertyResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExplicitClientPostOptionalClassPropertyResponse{}, err
	}
	return ExplicitClientPostOptionalClassPropertyResponse{}, nil
}

// postOptionalClassPropertyCreateRequest creates the PostOptionalClassProperty request.
func (client *ExplicitClient) postOptionalClassPropertyCreateRequest(ctx context.Context, options *ExplicitClientPostOptionalClassPropertyOptions) (*policy.Request, error) {
	urlPath := "/reqopt/optional/class/property"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.BodyParameter != nil {
		if err := runtime.MarshalAsJSON(req, *options.BodyParameter); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// PostOptionalIntegerHeader - Test explicitly optional integer. Please put a header 'headerParameter' => null.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - ExplicitClientPostOptionalIntegerHeaderOptions contains the optional parameters for the ExplicitClient.PostOptionalIntegerHeader
//     method.
func (client *ExplicitClient) PostOptionalIntegerHeader(ctx context.Context, options *ExplicitClientPostOptionalIntegerHeaderOptions) (ExplicitClientPostOptionalIntegerHeaderResponse, error) {
	var err error
	const operationName = "ExplicitClient.PostOptionalIntegerHeader"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.postOptionalIntegerHeaderCreateRequest(ctx, options)
	if err != nil {
		return ExplicitClientPostOptionalIntegerHeaderResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExplicitClientPostOptionalIntegerHeaderResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExplicitClientPostOptionalIntegerHeaderResponse{}, err
	}
	return ExplicitClientPostOptionalIntegerHeaderResponse{}, nil
}

// postOptionalIntegerHeaderCreateRequest creates the PostOptionalIntegerHeader request.
func (client *ExplicitClient) postOptionalIntegerHeaderCreateRequest(ctx context.Context, options *ExplicitClientPostOptionalIntegerHeaderOptions) (*policy.Request, error) {
	urlPath := "/reqopt/optional/integer/header"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.HeaderParameter != nil {
		req.Raw().Header["headerParameter"] = []string{strconv.FormatInt(int64(*options.HeaderParameter), 10)}
	}
	return req, nil
}

// PostOptionalIntegerParameter - Test explicitly optional integer. Please put null.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - ExplicitClientPostOptionalIntegerParameterOptions contains the optional parameters for the ExplicitClient.PostOptionalIntegerParameter
//     method.
func (client *ExplicitClient) PostOptionalIntegerParameter(ctx context.Context, options *ExplicitClientPostOptionalIntegerParameterOptions) (ExplicitClientPostOptionalIntegerParameterResponse, error) {
	var err error
	const operationName = "ExplicitClient.PostOptionalIntegerParameter"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.postOptionalIntegerParameterCreateRequest(ctx, options)
	if err != nil {
		return ExplicitClientPostOptionalIntegerParameterResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExplicitClientPostOptionalIntegerParameterResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExplicitClientPostOptionalIntegerParameterResponse{}, err
	}
	return ExplicitClientPostOptionalIntegerParameterResponse{}, nil
}

// postOptionalIntegerParameterCreateRequest creates the PostOptionalIntegerParameter request.
func (client *ExplicitClient) postOptionalIntegerParameterCreateRequest(ctx context.Context, options *ExplicitClientPostOptionalIntegerParameterOptions) (*policy.Request, error) {
	urlPath := "/reqopt/optional/integer/parameter"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.BodyParameter != nil {
		if err := runtime.MarshalAsJSON(req, *options.BodyParameter); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// PostOptionalIntegerProperty - Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - ExplicitClientPostOptionalIntegerPropertyOptions contains the optional parameters for the ExplicitClient.PostOptionalIntegerProperty
//     method.
func (client *ExplicitClient) PostOptionalIntegerProperty(ctx context.Context, options *ExplicitClientPostOptionalIntegerPropertyOptions) (ExplicitClientPostOptionalIntegerPropertyResponse, error) {
	var err error
	const operationName = "ExplicitClient.PostOptionalIntegerProperty"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.postOptionalIntegerPropertyCreateRequest(ctx, options)
	if err != nil {
		return ExplicitClientPostOptionalIntegerPropertyResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExplicitClientPostOptionalIntegerPropertyResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExplicitClientPostOptionalIntegerPropertyResponse{}, err
	}
	return ExplicitClientPostOptionalIntegerPropertyResponse{}, nil
}

// postOptionalIntegerPropertyCreateRequest creates the PostOptionalIntegerProperty request.
func (client *ExplicitClient) postOptionalIntegerPropertyCreateRequest(ctx context.Context, options *ExplicitClientPostOptionalIntegerPropertyOptions) (*policy.Request, error) {
	urlPath := "/reqopt/optional/integer/property"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.BodyParameter != nil {
		if err := runtime.MarshalAsJSON(req, *options.BodyParameter); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// PostOptionalStringHeader - Test explicitly optional string. Please put a header 'headerParameter' => null.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - ExplicitClientPostOptionalStringHeaderOptions contains the optional parameters for the ExplicitClient.PostOptionalStringHeader
//     method.
func (client *ExplicitClient) PostOptionalStringHeader(ctx context.Context, options *ExplicitClientPostOptionalStringHeaderOptions) (ExplicitClientPostOptionalStringHeaderResponse, error) {
	var err error
	const operationName = "ExplicitClient.PostOptionalStringHeader"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.postOptionalStringHeaderCreateRequest(ctx, options)
	if err != nil {
		return ExplicitClientPostOptionalStringHeaderResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExplicitClientPostOptionalStringHeaderResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExplicitClientPostOptionalStringHeaderResponse{}, err
	}
	return ExplicitClientPostOptionalStringHeaderResponse{}, nil
}

// postOptionalStringHeaderCreateRequest creates the PostOptionalStringHeader request.
func (client *ExplicitClient) postOptionalStringHeaderCreateRequest(ctx context.Context, options *ExplicitClientPostOptionalStringHeaderOptions) (*policy.Request, error) {
	urlPath := "/reqopt/optional/string/header"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.BodyParameter != nil {
		req.Raw().Header["bodyParameter"] = []string{*options.BodyParameter}
	}
	return req, nil
}

// PostOptionalStringParameter - Test explicitly optional string. Please put null.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - ExplicitClientPostOptionalStringParameterOptions contains the optional parameters for the ExplicitClient.PostOptionalStringParameter
//     method.
func (client *ExplicitClient) PostOptionalStringParameter(ctx context.Context, options *ExplicitClientPostOptionalStringParameterOptions) (ExplicitClientPostOptionalStringParameterResponse, error) {
	var err error
	const operationName = "ExplicitClient.PostOptionalStringParameter"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.postOptionalStringParameterCreateRequest(ctx, options)
	if err != nil {
		return ExplicitClientPostOptionalStringParameterResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExplicitClientPostOptionalStringParameterResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExplicitClientPostOptionalStringParameterResponse{}, err
	}
	return ExplicitClientPostOptionalStringParameterResponse{}, nil
}

// postOptionalStringParameterCreateRequest creates the PostOptionalStringParameter request.
func (client *ExplicitClient) postOptionalStringParameterCreateRequest(ctx context.Context, options *ExplicitClientPostOptionalStringParameterOptions) (*policy.Request, error) {
	urlPath := "/reqopt/optional/string/parameter"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.BodyParameter != nil {
		if err := runtime.MarshalAsJSON(req, *options.BodyParameter); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// PostOptionalStringProperty - Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - ExplicitClientPostOptionalStringPropertyOptions contains the optional parameters for the ExplicitClient.PostOptionalStringProperty
//     method.
func (client *ExplicitClient) PostOptionalStringProperty(ctx context.Context, options *ExplicitClientPostOptionalStringPropertyOptions) (ExplicitClientPostOptionalStringPropertyResponse, error) {
	var err error
	const operationName = "ExplicitClient.PostOptionalStringProperty"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.postOptionalStringPropertyCreateRequest(ctx, options)
	if err != nil {
		return ExplicitClientPostOptionalStringPropertyResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExplicitClientPostOptionalStringPropertyResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExplicitClientPostOptionalStringPropertyResponse{}, err
	}
	return ExplicitClientPostOptionalStringPropertyResponse{}, nil
}

// postOptionalStringPropertyCreateRequest creates the PostOptionalStringProperty request.
func (client *ExplicitClient) postOptionalStringPropertyCreateRequest(ctx context.Context, options *ExplicitClientPostOptionalStringPropertyOptions) (*policy.Request, error) {
	urlPath := "/reqopt/optional/string/property"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.BodyParameter != nil {
		if err := runtime.MarshalAsJSON(req, *options.BodyParameter); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// PostRequiredArrayHeader - Test explicitly required array. Please put a header 'headerParameter' => null and the client
// library should throw before the request is sent.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - ExplicitClientPostRequiredArrayHeaderOptions contains the optional parameters for the ExplicitClient.PostRequiredArrayHeader
//     method.
func (client *ExplicitClient) PostRequiredArrayHeader(ctx context.Context, headerParameter []string, options *ExplicitClientPostRequiredArrayHeaderOptions) (ExplicitClientPostRequiredArrayHeaderResponse, error) {
	var err error
	const operationName = "ExplicitClient.PostRequiredArrayHeader"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.postRequiredArrayHeaderCreateRequest(ctx, headerParameter, options)
	if err != nil {
		return ExplicitClientPostRequiredArrayHeaderResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExplicitClientPostRequiredArrayHeaderResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExplicitClientPostRequiredArrayHeaderResponse{}, err
	}
	return ExplicitClientPostRequiredArrayHeaderResponse{}, nil
}

// postRequiredArrayHeaderCreateRequest creates the PostRequiredArrayHeader request.
func (client *ExplicitClient) postRequiredArrayHeaderCreateRequest(ctx context.Context, headerParameter []string, _ *ExplicitClientPostRequiredArrayHeaderOptions) (*policy.Request, error) {
	urlPath := "/reqopt/requied/array/header"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["headerParameter"] = []string{strings.Join(headerParameter, ",")}
	return req, nil
}

// PostRequiredArrayParameter - Test explicitly required array. Please put null and the client library should throw before
// the request is sent.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - ExplicitClientPostRequiredArrayParameterOptions contains the optional parameters for the ExplicitClient.PostRequiredArrayParameter
//     method.
func (client *ExplicitClient) PostRequiredArrayParameter(ctx context.Context, bodyParameter []*string, options *ExplicitClientPostRequiredArrayParameterOptions) (ExplicitClientPostRequiredArrayParameterResponse, error) {
	var err error
	const operationName = "ExplicitClient.PostRequiredArrayParameter"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.postRequiredArrayParameterCreateRequest(ctx, bodyParameter, options)
	if err != nil {
		return ExplicitClientPostRequiredArrayParameterResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExplicitClientPostRequiredArrayParameterResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExplicitClientPostRequiredArrayParameterResponse{}, err
	}
	return ExplicitClientPostRequiredArrayParameterResponse{}, nil
}

// postRequiredArrayParameterCreateRequest creates the PostRequiredArrayParameter request.
func (client *ExplicitClient) postRequiredArrayParameterCreateRequest(ctx context.Context, bodyParameter []*string, _ *ExplicitClientPostRequiredArrayParameterOptions) (*policy.Request, error) {
	urlPath := "/reqopt/requied/array/parameter"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, bodyParameter); err != nil {
		return nil, err
	}
	return req, nil
}

// PostRequiredArrayProperty - Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the
// client library should throw before the request is sent.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - ExplicitClientPostRequiredArrayPropertyOptions contains the optional parameters for the ExplicitClient.PostRequiredArrayProperty
//     method.
func (client *ExplicitClient) PostRequiredArrayProperty(ctx context.Context, bodyParameter ArrayWrapper, options *ExplicitClientPostRequiredArrayPropertyOptions) (ExplicitClientPostRequiredArrayPropertyResponse, error) {
	var err error
	const operationName = "ExplicitClient.PostRequiredArrayProperty"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.postRequiredArrayPropertyCreateRequest(ctx, bodyParameter, options)
	if err != nil {
		return ExplicitClientPostRequiredArrayPropertyResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExplicitClientPostRequiredArrayPropertyResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExplicitClientPostRequiredArrayPropertyResponse{}, err
	}
	return ExplicitClientPostRequiredArrayPropertyResponse{}, nil
}

// postRequiredArrayPropertyCreateRequest creates the PostRequiredArrayProperty request.
func (client *ExplicitClient) postRequiredArrayPropertyCreateRequest(ctx context.Context, bodyParameter ArrayWrapper, _ *ExplicitClientPostRequiredArrayPropertyOptions) (*policy.Request, error) {
	urlPath := "/reqopt/requied/array/property"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, bodyParameter); err != nil {
		return nil, err
	}
	return req, nil
}

// PostRequiredClassParameter - Test explicitly required complex object. Please put null and the client library should throw
// before the request is sent.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - ExplicitClientPostRequiredClassParameterOptions contains the optional parameters for the ExplicitClient.PostRequiredClassParameter
//     method.
func (client *ExplicitClient) PostRequiredClassParameter(ctx context.Context, bodyParameter Product, options *ExplicitClientPostRequiredClassParameterOptions) (ExplicitClientPostRequiredClassParameterResponse, error) {
	var err error
	const operationName = "ExplicitClient.PostRequiredClassParameter"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.postRequiredClassParameterCreateRequest(ctx, bodyParameter, options)
	if err != nil {
		return ExplicitClientPostRequiredClassParameterResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExplicitClientPostRequiredClassParameterResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExplicitClientPostRequiredClassParameterResponse{}, err
	}
	return ExplicitClientPostRequiredClassParameterResponse{}, nil
}

// postRequiredClassParameterCreateRequest creates the PostRequiredClassParameter request.
func (client *ExplicitClient) postRequiredClassParameterCreateRequest(ctx context.Context, bodyParameter Product, _ *ExplicitClientPostRequiredClassParameterOptions) (*policy.Request, error) {
	urlPath := "/reqopt/requied/class/parameter"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, bodyParameter); err != nil {
		return nil, err
	}
	return req, nil
}

// PostRequiredClassProperty - Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null
// and the client library should throw before the request is sent.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - ExplicitClientPostRequiredClassPropertyOptions contains the optional parameters for the ExplicitClient.PostRequiredClassProperty
//     method.
func (client *ExplicitClient) PostRequiredClassProperty(ctx context.Context, bodyParameter ClassWrapper, options *ExplicitClientPostRequiredClassPropertyOptions) (ExplicitClientPostRequiredClassPropertyResponse, error) {
	var err error
	const operationName = "ExplicitClient.PostRequiredClassProperty"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.postRequiredClassPropertyCreateRequest(ctx, bodyParameter, options)
	if err != nil {
		return ExplicitClientPostRequiredClassPropertyResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExplicitClientPostRequiredClassPropertyResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExplicitClientPostRequiredClassPropertyResponse{}, err
	}
	return ExplicitClientPostRequiredClassPropertyResponse{}, nil
}

// postRequiredClassPropertyCreateRequest creates the PostRequiredClassProperty request.
func (client *ExplicitClient) postRequiredClassPropertyCreateRequest(ctx context.Context, bodyParameter ClassWrapper, _ *ExplicitClientPostRequiredClassPropertyOptions) (*policy.Request, error) {
	urlPath := "/reqopt/requied/class/property"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, bodyParameter); err != nil {
		return nil, err
	}
	return req, nil
}

// PostRequiredIntegerHeader - Test explicitly required integer. Please put a header 'headerParameter' => null and the client
// library should throw before the request is sent.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - ExplicitClientPostRequiredIntegerHeaderOptions contains the optional parameters for the ExplicitClient.PostRequiredIntegerHeader
//     method.
func (client *ExplicitClient) PostRequiredIntegerHeader(ctx context.Context, headerParameter int32, options *ExplicitClientPostRequiredIntegerHeaderOptions) (ExplicitClientPostRequiredIntegerHeaderResponse, error) {
	var err error
	const operationName = "ExplicitClient.PostRequiredIntegerHeader"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.postRequiredIntegerHeaderCreateRequest(ctx, headerParameter, options)
	if err != nil {
		return ExplicitClientPostRequiredIntegerHeaderResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExplicitClientPostRequiredIntegerHeaderResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExplicitClientPostRequiredIntegerHeaderResponse{}, err
	}
	return ExplicitClientPostRequiredIntegerHeaderResponse{}, nil
}

// postRequiredIntegerHeaderCreateRequest creates the PostRequiredIntegerHeader request.
func (client *ExplicitClient) postRequiredIntegerHeaderCreateRequest(ctx context.Context, headerParameter int32, _ *ExplicitClientPostRequiredIntegerHeaderOptions) (*policy.Request, error) {
	urlPath := "/reqopt/requied/integer/header"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["headerParameter"] = []string{strconv.FormatInt(int64(headerParameter), 10)}
	return req, nil
}

// PostRequiredIntegerParameter - Test explicitly required integer. Please put null and the client library should throw before
// the request is sent.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - ExplicitClientPostRequiredIntegerParameterOptions contains the optional parameters for the ExplicitClient.PostRequiredIntegerParameter
//     method.
func (client *ExplicitClient) PostRequiredIntegerParameter(ctx context.Context, bodyParameter int32, options *ExplicitClientPostRequiredIntegerParameterOptions) (ExplicitClientPostRequiredIntegerParameterResponse, error) {
	var err error
	const operationName = "ExplicitClient.PostRequiredIntegerParameter"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.postRequiredIntegerParameterCreateRequest(ctx, bodyParameter, options)
	if err != nil {
		return ExplicitClientPostRequiredIntegerParameterResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExplicitClientPostRequiredIntegerParameterResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExplicitClientPostRequiredIntegerParameterResponse{}, err
	}
	return ExplicitClientPostRequiredIntegerParameterResponse{}, nil
}

// postRequiredIntegerParameterCreateRequest creates the PostRequiredIntegerParameter request.
func (client *ExplicitClient) postRequiredIntegerParameterCreateRequest(ctx context.Context, bodyParameter int32, _ *ExplicitClientPostRequiredIntegerParameterOptions) (*policy.Request, error) {
	urlPath := "/reqopt/requied/integer/parameter"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, bodyParameter); err != nil {
		return nil, err
	}
	return req, nil
}

// PostRequiredIntegerProperty - Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and
// the client library should throw before the request is sent.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - ExplicitClientPostRequiredIntegerPropertyOptions contains the optional parameters for the ExplicitClient.PostRequiredIntegerProperty
//     method.
func (client *ExplicitClient) PostRequiredIntegerProperty(ctx context.Context, bodyParameter IntWrapper, options *ExplicitClientPostRequiredIntegerPropertyOptions) (ExplicitClientPostRequiredIntegerPropertyResponse, error) {
	var err error
	const operationName = "ExplicitClient.PostRequiredIntegerProperty"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.postRequiredIntegerPropertyCreateRequest(ctx, bodyParameter, options)
	if err != nil {
		return ExplicitClientPostRequiredIntegerPropertyResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExplicitClientPostRequiredIntegerPropertyResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExplicitClientPostRequiredIntegerPropertyResponse{}, err
	}
	return ExplicitClientPostRequiredIntegerPropertyResponse{}, nil
}

// postRequiredIntegerPropertyCreateRequest creates the PostRequiredIntegerProperty request.
func (client *ExplicitClient) postRequiredIntegerPropertyCreateRequest(ctx context.Context, bodyParameter IntWrapper, _ *ExplicitClientPostRequiredIntegerPropertyOptions) (*policy.Request, error) {
	urlPath := "/reqopt/requied/integer/property"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, bodyParameter); err != nil {
		return nil, err
	}
	return req, nil
}

// PostRequiredStringHeader - Test explicitly required string. Please put a header 'headerParameter' => null and the client
// library should throw before the request is sent.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - ExplicitClientPostRequiredStringHeaderOptions contains the optional parameters for the ExplicitClient.PostRequiredStringHeader
//     method.
func (client *ExplicitClient) PostRequiredStringHeader(ctx context.Context, headerParameter string, options *ExplicitClientPostRequiredStringHeaderOptions) (ExplicitClientPostRequiredStringHeaderResponse, error) {
	var err error
	const operationName = "ExplicitClient.PostRequiredStringHeader"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.postRequiredStringHeaderCreateRequest(ctx, headerParameter, options)
	if err != nil {
		return ExplicitClientPostRequiredStringHeaderResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExplicitClientPostRequiredStringHeaderResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExplicitClientPostRequiredStringHeaderResponse{}, err
	}
	return ExplicitClientPostRequiredStringHeaderResponse{}, nil
}

// postRequiredStringHeaderCreateRequest creates the PostRequiredStringHeader request.
func (client *ExplicitClient) postRequiredStringHeaderCreateRequest(ctx context.Context, headerParameter string, _ *ExplicitClientPostRequiredStringHeaderOptions) (*policy.Request, error) {
	urlPath := "/reqopt/requied/string/header"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["headerParameter"] = []string{headerParameter}
	return req, nil
}

// PostRequiredStringParameter - Test explicitly required string. Please put null and the client library should throw before
// the request is sent.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - ExplicitClientPostRequiredStringParameterOptions contains the optional parameters for the ExplicitClient.PostRequiredStringParameter
//     method.
func (client *ExplicitClient) PostRequiredStringParameter(ctx context.Context, bodyParameter string, options *ExplicitClientPostRequiredStringParameterOptions) (ExplicitClientPostRequiredStringParameterResponse, error) {
	var err error
	const operationName = "ExplicitClient.PostRequiredStringParameter"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.postRequiredStringParameterCreateRequest(ctx, bodyParameter, options)
	if err != nil {
		return ExplicitClientPostRequiredStringParameterResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExplicitClientPostRequiredStringParameterResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExplicitClientPostRequiredStringParameterResponse{}, err
	}
	return ExplicitClientPostRequiredStringParameterResponse{}, nil
}

// postRequiredStringParameterCreateRequest creates the PostRequiredStringParameter request.
func (client *ExplicitClient) postRequiredStringParameterCreateRequest(ctx context.Context, bodyParameter string, _ *ExplicitClientPostRequiredStringParameterOptions) (*policy.Request, error) {
	urlPath := "/reqopt/requied/string/parameter"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, bodyParameter); err != nil {
		return nil, err
	}
	return req, nil
}

// PostRequiredStringProperty - Test explicitly required string. Please put a valid string-wrapper with 'value' = null and
// the client library should throw before the request is sent.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - ExplicitClientPostRequiredStringPropertyOptions contains the optional parameters for the ExplicitClient.PostRequiredStringProperty
//     method.
func (client *ExplicitClient) PostRequiredStringProperty(ctx context.Context, bodyParameter StringWrapper, options *ExplicitClientPostRequiredStringPropertyOptions) (ExplicitClientPostRequiredStringPropertyResponse, error) {
	var err error
	const operationName = "ExplicitClient.PostRequiredStringProperty"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.postRequiredStringPropertyCreateRequest(ctx, bodyParameter, options)
	if err != nil {
		return ExplicitClientPostRequiredStringPropertyResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExplicitClientPostRequiredStringPropertyResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExplicitClientPostRequiredStringPropertyResponse{}, err
	}
	return ExplicitClientPostRequiredStringPropertyResponse{}, nil
}

// postRequiredStringPropertyCreateRequest creates the PostRequiredStringProperty request.
func (client *ExplicitClient) postRequiredStringPropertyCreateRequest(ctx context.Context, bodyParameter StringWrapper, _ *ExplicitClientPostRequiredStringPropertyOptions) (*policy.Request, error) {
	urlPath := "/reqopt/requied/string/property"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, bodyParameter); err != nil {
		return nil, err
	}
	return req, nil
}

// PutOptionalBinaryBody - Test explicitly optional body parameter
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - ExplicitClientPutOptionalBinaryBodyOptions contains the optional parameters for the ExplicitClient.PutOptionalBinaryBody
//     method.
func (client *ExplicitClient) PutOptionalBinaryBody(ctx context.Context, options *ExplicitClientPutOptionalBinaryBodyOptions) (ExplicitClientPutOptionalBinaryBodyResponse, error) {
	var err error
	const operationName = "ExplicitClient.PutOptionalBinaryBody"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putOptionalBinaryBodyCreateRequest(ctx, options)
	if err != nil {
		return ExplicitClientPutOptionalBinaryBodyResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExplicitClientPutOptionalBinaryBodyResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExplicitClientPutOptionalBinaryBodyResponse{}, err
	}
	return ExplicitClientPutOptionalBinaryBodyResponse{}, nil
}

// putOptionalBinaryBodyCreateRequest creates the PutOptionalBinaryBody request.
func (client *ExplicitClient) putOptionalBinaryBodyCreateRequest(ctx context.Context, options *ExplicitClientPutOptionalBinaryBodyOptions) (*policy.Request, error) {
	urlPath := "/reqopt/explicit/optional/binary-body"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.BodyParameter != nil {
		if err := req.SetBody(options.BodyParameter, "application/octet-stream"); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// PutRequiredBinaryBody - Test explicitly required body parameter
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - ExplicitClientPutRequiredBinaryBodyOptions contains the optional parameters for the ExplicitClient.PutRequiredBinaryBody
//     method.
func (client *ExplicitClient) PutRequiredBinaryBody(ctx context.Context, bodyParameter io.ReadSeekCloser, options *ExplicitClientPutRequiredBinaryBodyOptions) (ExplicitClientPutRequiredBinaryBodyResponse, error) {
	var err error
	const operationName = "ExplicitClient.PutRequiredBinaryBody"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putRequiredBinaryBodyCreateRequest(ctx, bodyParameter, options)
	if err != nil {
		return ExplicitClientPutRequiredBinaryBodyResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ExplicitClientPutRequiredBinaryBodyResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ExplicitClientPutRequiredBinaryBodyResponse{}, err
	}
	return ExplicitClientPutRequiredBinaryBodyResponse{}, nil
}

// putRequiredBinaryBodyCreateRequest creates the PutRequiredBinaryBody request.
func (client *ExplicitClient) putRequiredBinaryBodyCreateRequest(ctx context.Context, bodyParameter io.ReadSeekCloser, _ *ExplicitClientPutRequiredBinaryBodyOptions) (*policy.Request, error) {
	urlPath := "/reqopt/explicit/required/binary-body"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := req.SetBody(bodyParameter, "application/octet-stream"); err != nil {
		return nil, err
	}
	return req, nil
}
