//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	"generatortests/optionalgroup"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"io"
	"net/http"
	"regexp"
)

// ImplicitServer is a fake server for instances of the optionalgroup.ImplicitClient type.
type ImplicitServer struct {
	// GetOptionalGlobalQuery is the fake for method ImplicitClient.GetOptionalGlobalQuery
	// HTTP status codes to indicate success: http.StatusOK
	GetOptionalGlobalQuery func(ctx context.Context, options *optionalgroup.ImplicitClientGetOptionalGlobalQueryOptions) (resp azfake.Responder[optionalgroup.ImplicitClientGetOptionalGlobalQueryResponse], errResp azfake.ErrorResponder)

	// GetRequiredGlobalPath is the fake for method ImplicitClient.GetRequiredGlobalPath
	// HTTP status codes to indicate success: http.StatusOK
	GetRequiredGlobalPath func(ctx context.Context, options *optionalgroup.ImplicitClientGetRequiredGlobalPathOptions) (resp azfake.Responder[optionalgroup.ImplicitClientGetRequiredGlobalPathResponse], errResp azfake.ErrorResponder)

	// GetRequiredGlobalQuery is the fake for method ImplicitClient.GetRequiredGlobalQuery
	// HTTP status codes to indicate success: http.StatusOK
	GetRequiredGlobalQuery func(ctx context.Context, options *optionalgroup.ImplicitClientGetRequiredGlobalQueryOptions) (resp azfake.Responder[optionalgroup.ImplicitClientGetRequiredGlobalQueryResponse], errResp azfake.ErrorResponder)

	// GetRequiredPath is the fake for method ImplicitClient.GetRequiredPath
	// HTTP status codes to indicate success: http.StatusOK
	GetRequiredPath func(ctx context.Context, pathParameter string, options *optionalgroup.ImplicitClientGetRequiredPathOptions) (resp azfake.Responder[optionalgroup.ImplicitClientGetRequiredPathResponse], errResp azfake.ErrorResponder)

	// PutOptionalBinaryBody is the fake for method ImplicitClient.PutOptionalBinaryBody
	// HTTP status codes to indicate success: http.StatusOK
	PutOptionalBinaryBody func(ctx context.Context, bodyParameter io.ReadSeekCloser, options *optionalgroup.ImplicitClientPutOptionalBinaryBodyOptions) (resp azfake.Responder[optionalgroup.ImplicitClientPutOptionalBinaryBodyResponse], errResp azfake.ErrorResponder)

	// PutOptionalBody is the fake for method ImplicitClient.PutOptionalBody
	// HTTP status codes to indicate success: http.StatusOK
	PutOptionalBody func(ctx context.Context, bodyParameter string, options *optionalgroup.ImplicitClientPutOptionalBodyOptions) (resp azfake.Responder[optionalgroup.ImplicitClientPutOptionalBodyResponse], errResp azfake.ErrorResponder)

	// PutOptionalHeader is the fake for method ImplicitClient.PutOptionalHeader
	// HTTP status codes to indicate success: http.StatusOK
	PutOptionalHeader func(ctx context.Context, options *optionalgroup.ImplicitClientPutOptionalHeaderOptions) (resp azfake.Responder[optionalgroup.ImplicitClientPutOptionalHeaderResponse], errResp azfake.ErrorResponder)

	// PutOptionalQuery is the fake for method ImplicitClient.PutOptionalQuery
	// HTTP status codes to indicate success: http.StatusOK
	PutOptionalQuery func(ctx context.Context, options *optionalgroup.ImplicitClientPutOptionalQueryOptions) (resp azfake.Responder[optionalgroup.ImplicitClientPutOptionalQueryResponse], errResp azfake.ErrorResponder)
}

// NewImplicitServerTransport creates a new instance of ImplicitServerTransport with the provided implementation.
// The returned ImplicitServerTransport instance is connected to an instance of optionalgroup.ImplicitClient by way of the
// undefined.Transporter field.
func NewImplicitServerTransport(srv *ImplicitServer) *ImplicitServerTransport {
	return &ImplicitServerTransport{srv: srv}
}

// ImplicitServerTransport connects instances of optionalgroup.ImplicitClient to instances of ImplicitServer.
// Don't use this type directly, use NewImplicitServerTransport instead.
type ImplicitServerTransport struct {
	srv *ImplicitServer
}

// Do implements the policy.Transporter interface for ImplicitServerTransport.
func (i *ImplicitServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "ImplicitClient.GetOptionalGlobalQuery":
		resp, err = i.dispatchGetOptionalGlobalQuery(req)
	case "ImplicitClient.GetRequiredGlobalPath":
		resp, err = i.dispatchGetRequiredGlobalPath(req)
	case "ImplicitClient.GetRequiredGlobalQuery":
		resp, err = i.dispatchGetRequiredGlobalQuery(req)
	case "ImplicitClient.GetRequiredPath":
		resp, err = i.dispatchGetRequiredPath(req)
	case "ImplicitClient.PutOptionalBinaryBody":
		resp, err = i.dispatchPutOptionalBinaryBody(req)
	case "ImplicitClient.PutOptionalBody":
		resp, err = i.dispatchPutOptionalBody(req)
	case "ImplicitClient.PutOptionalHeader":
		resp, err = i.dispatchPutOptionalHeader(req)
	case "ImplicitClient.PutOptionalQuery":
		resp, err = i.dispatchPutOptionalQuery(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (i *ImplicitServerTransport) dispatchGetOptionalGlobalQuery(req *http.Request) (*http.Response, error) {
	if i.srv.GetOptionalGlobalQuery == nil {
		return nil, &nonRetriableError{errors.New("method GetOptionalGlobalQuery not implemented")}
	}
	respr, errRespr := i.srv.GetOptionalGlobalQuery(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ImplicitServerTransport) dispatchGetRequiredGlobalPath(req *http.Request) (*http.Response, error) {
	if i.srv.GetRequiredGlobalPath == nil {
		return nil, &nonRetriableError{errors.New("method GetRequiredGlobalPath not implemented")}
	}
	const regexStr = "/reqopt/global/required/path/(?P<required_global-path>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	respr, errRespr := i.srv.GetRequiredGlobalPath(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ImplicitServerTransport) dispatchGetRequiredGlobalQuery(req *http.Request) (*http.Response, error) {
	if i.srv.GetRequiredGlobalQuery == nil {
		return nil, &nonRetriableError{errors.New("method GetRequiredGlobalQuery not implemented")}
	}
	respr, errRespr := i.srv.GetRequiredGlobalQuery(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ImplicitServerTransport) dispatchGetRequiredPath(req *http.Request) (*http.Response, error) {
	if i.srv.GetRequiredPath == nil {
		return nil, &nonRetriableError{errors.New("method GetRequiredPath not implemented")}
	}
	const regexStr = "/reqopt/implicit/required/path/(?P<pathParameter>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	respr, errRespr := i.srv.GetRequiredPath(req.Context(), matches[regex.SubexpIndex("pathParameter")], nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ImplicitServerTransport) dispatchPutOptionalBinaryBody(req *http.Request) (*http.Response, error) {
	if i.srv.PutOptionalBinaryBody == nil {
		return nil, &nonRetriableError{errors.New("method PutOptionalBinaryBody not implemented")}
	}
	respr, errRespr := i.srv.PutOptionalBinaryBody(req.Context(), req.Body.(io.ReadSeekCloser), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ImplicitServerTransport) dispatchPutOptionalBody(req *http.Request) (*http.Response, error) {
	if i.srv.PutOptionalBody == nil {
		return nil, &nonRetriableError{errors.New("method PutOptionalBody not implemented")}
	}
	body, err := server.UnmarshalRequestAsText(req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.PutOptionalBody(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ImplicitServerTransport) dispatchPutOptionalHeader(req *http.Request) (*http.Response, error) {
	if i.srv.PutOptionalHeader == nil {
		return nil, &nonRetriableError{errors.New("method PutOptionalHeader not implemented")}
	}
	queryParameterParam := getOptional(getHeaderValue(req.Header, "queryParameter"))
	var options *optionalgroup.ImplicitClientPutOptionalHeaderOptions
	if queryParameterParam != nil {
		options = &optionalgroup.ImplicitClientPutOptionalHeaderOptions{
			QueryParameter: queryParameterParam,
		}
	}
	respr, errRespr := i.srv.PutOptionalHeader(req.Context(), options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *ImplicitServerTransport) dispatchPutOptionalQuery(req *http.Request) (*http.Response, error) {
	if i.srv.PutOptionalQuery == nil {
		return nil, &nonRetriableError{errors.New("method PutOptionalQuery not implemented")}
	}
	qp := req.URL.Query()
	queryParameterParam := getOptional(qp.Get("queryParameter"))
	var options *optionalgroup.ImplicitClientPutOptionalQueryOptions
	if queryParameterParam != nil {
		options = &optionalgroup.ImplicitClientPutOptionalQueryOptions{
			QueryParameter: queryParameterParam,
		}
	}
	respr, errRespr := i.srv.PutOptionalQuery(req.Context(), options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
