//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	"generatortests/bytegroup"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// ByteServer is a fake server for instances of the bytegroup.ByteClient type.
type ByteServer struct {
	// GetEmpty is the fake for method ByteClient.GetEmpty
	// HTTP status codes to indicate success: http.StatusOK
	GetEmpty func(ctx context.Context, options *bytegroup.ByteClientGetEmptyOptions) (resp azfake.Responder[bytegroup.ByteClientGetEmptyResponse], errResp azfake.ErrorResponder)

	// GetInvalid is the fake for method ByteClient.GetInvalid
	// HTTP status codes to indicate success: http.StatusOK
	GetInvalid func(ctx context.Context, options *bytegroup.ByteClientGetInvalidOptions) (resp azfake.Responder[bytegroup.ByteClientGetInvalidResponse], errResp azfake.ErrorResponder)

	// GetNonASCII is the fake for method ByteClient.GetNonASCII
	// HTTP status codes to indicate success: http.StatusOK
	GetNonASCII func(ctx context.Context, options *bytegroup.ByteClientGetNonASCIIOptions) (resp azfake.Responder[bytegroup.ByteClientGetNonASCIIResponse], errResp azfake.ErrorResponder)

	// GetNull is the fake for method ByteClient.GetNull
	// HTTP status codes to indicate success: http.StatusOK
	GetNull func(ctx context.Context, options *bytegroup.ByteClientGetNullOptions) (resp azfake.Responder[bytegroup.ByteClientGetNullResponse], errResp azfake.ErrorResponder)

	// PutNonASCII is the fake for method ByteClient.PutNonASCII
	// HTTP status codes to indicate success: http.StatusOK
	PutNonASCII func(ctx context.Context, byteBody []byte, options *bytegroup.ByteClientPutNonASCIIOptions) (resp azfake.Responder[bytegroup.ByteClientPutNonASCIIResponse], errResp azfake.ErrorResponder)
}

// NewByteServerTransport creates a new instance of ByteServerTransport with the provided implementation.
// The returned ByteServerTransport instance is connected to an instance of bytegroup.ByteClient by way of the
// undefined.Transporter field.
func NewByteServerTransport(srv *ByteServer) *ByteServerTransport {
	return &ByteServerTransport{srv: srv}
}

// ByteServerTransport connects instances of bytegroup.ByteClient to instances of ByteServer.
// Don't use this type directly, use NewByteServerTransport instead.
type ByteServerTransport struct {
	srv *ByteServer
}

// Do implements the policy.Transporter interface for ByteServerTransport.
func (b *ByteServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "ByteClient.GetEmpty":
		resp, err = b.dispatchGetEmpty(req)
	case "ByteClient.GetInvalid":
		resp, err = b.dispatchGetInvalid(req)
	case "ByteClient.GetNonASCII":
		resp, err = b.dispatchGetNonASCII(req)
	case "ByteClient.GetNull":
		resp, err = b.dispatchGetNull(req)
	case "ByteClient.PutNonASCII":
		resp, err = b.dispatchPutNonASCII(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (b *ByteServerTransport) dispatchGetEmpty(req *http.Request) (*http.Response, error) {
	if b.srv.GetEmpty == nil {
		return nil, &nonRetriableError{errors.New("method GetEmpty not implemented")}
	}
	respr, errRespr := b.srv.GetEmpty(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsByteArray(respContent, server.GetResponse(respr).Value, runtime.Base64StdFormat, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (b *ByteServerTransport) dispatchGetInvalid(req *http.Request) (*http.Response, error) {
	if b.srv.GetInvalid == nil {
		return nil, &nonRetriableError{errors.New("method GetInvalid not implemented")}
	}
	respr, errRespr := b.srv.GetInvalid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsByteArray(respContent, server.GetResponse(respr).Value, runtime.Base64StdFormat, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (b *ByteServerTransport) dispatchGetNonASCII(req *http.Request) (*http.Response, error) {
	if b.srv.GetNonASCII == nil {
		return nil, &nonRetriableError{errors.New("method GetNonASCII not implemented")}
	}
	respr, errRespr := b.srv.GetNonASCII(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsByteArray(respContent, server.GetResponse(respr).Value, runtime.Base64StdFormat, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (b *ByteServerTransport) dispatchGetNull(req *http.Request) (*http.Response, error) {
	if b.srv.GetNull == nil {
		return nil, &nonRetriableError{errors.New("method GetNull not implemented")}
	}
	respr, errRespr := b.srv.GetNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsByteArray(respContent, server.GetResponse(respr).Value, runtime.Base64StdFormat, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (b *ByteServerTransport) dispatchPutNonASCII(req *http.Request) (*http.Response, error) {
	if b.srv.PutNonASCII == nil {
		return nil, &nonRetriableError{errors.New("method PutNonASCII not implemented")}
	}
	body, err := server.UnmarshalRequestAsByteArray(req, runtime.Base64StdFormat)
	if err != nil {
		return nil, err
	}
	respr, errRespr := b.srv.PutNonASCII(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
