// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package integergroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"time"
)

// IntClient contains the methods for the Int group.
// Don't use this type directly, use a constructor function instead.
type IntClient struct {
	internal *azcore.Client
}

// GetInvalid - Get invalid Int value
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - IntClientGetInvalidOptions contains the optional parameters for the IntClient.GetInvalid method.
func (client *IntClient) GetInvalid(ctx context.Context, options *IntClientGetInvalidOptions) (IntClientGetInvalidResponse, error) {
	var err error
	const operationName = "IntClient.GetInvalid"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getInvalidCreateRequest(ctx, options)
	if err != nil {
		return IntClientGetInvalidResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IntClientGetInvalidResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return IntClientGetInvalidResponse{}, err
	}
	resp, err := client.getInvalidHandleResponse(httpResp)
	return resp, err
}

// getInvalidCreateRequest creates the GetInvalid request.
func (client *IntClient) getInvalidCreateRequest(ctx context.Context, _ *IntClientGetInvalidOptions) (*policy.Request, error) {
	urlPath := "/int/invalid"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getInvalidHandleResponse handles the GetInvalid response.
func (client *IntClient) getInvalidHandleResponse(resp *http.Response) (IntClientGetInvalidResponse, error) {
	result := IntClientGetInvalidResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return IntClientGetInvalidResponse{}, err
	}
	return result, nil
}

// GetInvalidUnixTime - Get invalid Unix time value
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - IntClientGetInvalidUnixTimeOptions contains the optional parameters for the IntClient.GetInvalidUnixTime method.
func (client *IntClient) GetInvalidUnixTime(ctx context.Context, options *IntClientGetInvalidUnixTimeOptions) (IntClientGetInvalidUnixTimeResponse, error) {
	var err error
	const operationName = "IntClient.GetInvalidUnixTime"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getInvalidUnixTimeCreateRequest(ctx, options)
	if err != nil {
		return IntClientGetInvalidUnixTimeResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IntClientGetInvalidUnixTimeResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return IntClientGetInvalidUnixTimeResponse{}, err
	}
	resp, err := client.getInvalidUnixTimeHandleResponse(httpResp)
	return resp, err
}

// getInvalidUnixTimeCreateRequest creates the GetInvalidUnixTime request.
func (client *IntClient) getInvalidUnixTimeCreateRequest(ctx context.Context, _ *IntClientGetInvalidUnixTimeOptions) (*policy.Request, error) {
	urlPath := "/int/invalidunixtime"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getInvalidUnixTimeHandleResponse handles the GetInvalidUnixTime response.
func (client *IntClient) getInvalidUnixTimeHandleResponse(resp *http.Response) (IntClientGetInvalidUnixTimeResponse, error) {
	result := IntClientGetInvalidUnixTimeResponse{}
	var aux *timeUnix
	if err := runtime.UnmarshalAsJSON(resp, &aux); err != nil {
		return IntClientGetInvalidUnixTimeResponse{}, err
	}
	result.Value = (*time.Time)(aux)
	return result, nil
}

// GetNull - Get null Int value
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - IntClientGetNullOptions contains the optional parameters for the IntClient.GetNull method.
func (client *IntClient) GetNull(ctx context.Context, options *IntClientGetNullOptions) (IntClientGetNullResponse, error) {
	var err error
	const operationName = "IntClient.GetNull"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getNullCreateRequest(ctx, options)
	if err != nil {
		return IntClientGetNullResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IntClientGetNullResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return IntClientGetNullResponse{}, err
	}
	resp, err := client.getNullHandleResponse(httpResp)
	return resp, err
}

// getNullCreateRequest creates the GetNull request.
func (client *IntClient) getNullCreateRequest(ctx context.Context, _ *IntClientGetNullOptions) (*policy.Request, error) {
	urlPath := "/int/null"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getNullHandleResponse handles the GetNull response.
func (client *IntClient) getNullHandleResponse(resp *http.Response) (IntClientGetNullResponse, error) {
	result := IntClientGetNullResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return IntClientGetNullResponse{}, err
	}
	return result, nil
}

// GetNullUnixTime - Get null Unix time value
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - IntClientGetNullUnixTimeOptions contains the optional parameters for the IntClient.GetNullUnixTime method.
func (client *IntClient) GetNullUnixTime(ctx context.Context, options *IntClientGetNullUnixTimeOptions) (IntClientGetNullUnixTimeResponse, error) {
	var err error
	const operationName = "IntClient.GetNullUnixTime"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getNullUnixTimeCreateRequest(ctx, options)
	if err != nil {
		return IntClientGetNullUnixTimeResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IntClientGetNullUnixTimeResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return IntClientGetNullUnixTimeResponse{}, err
	}
	resp, err := client.getNullUnixTimeHandleResponse(httpResp)
	return resp, err
}

// getNullUnixTimeCreateRequest creates the GetNullUnixTime request.
func (client *IntClient) getNullUnixTimeCreateRequest(ctx context.Context, _ *IntClientGetNullUnixTimeOptions) (*policy.Request, error) {
	urlPath := "/int/nullunixtime"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getNullUnixTimeHandleResponse handles the GetNullUnixTime response.
func (client *IntClient) getNullUnixTimeHandleResponse(resp *http.Response) (IntClientGetNullUnixTimeResponse, error) {
	result := IntClientGetNullUnixTimeResponse{}
	var aux *timeUnix
	if err := runtime.UnmarshalAsJSON(resp, &aux); err != nil {
		return IntClientGetNullUnixTimeResponse{}, err
	}
	result.Value = (*time.Time)(aux)
	return result, nil
}

// GetOverflowInt32 - Get overflow Int32 value
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - IntClientGetOverflowInt32Options contains the optional parameters for the IntClient.GetOverflowInt32 method.
func (client *IntClient) GetOverflowInt32(ctx context.Context, options *IntClientGetOverflowInt32Options) (IntClientGetOverflowInt32Response, error) {
	var err error
	const operationName = "IntClient.GetOverflowInt32"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getOverflowInt32CreateRequest(ctx, options)
	if err != nil {
		return IntClientGetOverflowInt32Response{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IntClientGetOverflowInt32Response{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return IntClientGetOverflowInt32Response{}, err
	}
	resp, err := client.getOverflowInt32HandleResponse(httpResp)
	return resp, err
}

// getOverflowInt32CreateRequest creates the GetOverflowInt32 request.
func (client *IntClient) getOverflowInt32CreateRequest(ctx context.Context, _ *IntClientGetOverflowInt32Options) (*policy.Request, error) {
	urlPath := "/int/overflowint32"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getOverflowInt32HandleResponse handles the GetOverflowInt32 response.
func (client *IntClient) getOverflowInt32HandleResponse(resp *http.Response) (IntClientGetOverflowInt32Response, error) {
	result := IntClientGetOverflowInt32Response{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return IntClientGetOverflowInt32Response{}, err
	}
	return result, nil
}

// GetOverflowInt64 - Get overflow Int64 value
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - IntClientGetOverflowInt64Options contains the optional parameters for the IntClient.GetOverflowInt64 method.
func (client *IntClient) GetOverflowInt64(ctx context.Context, options *IntClientGetOverflowInt64Options) (IntClientGetOverflowInt64Response, error) {
	var err error
	const operationName = "IntClient.GetOverflowInt64"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getOverflowInt64CreateRequest(ctx, options)
	if err != nil {
		return IntClientGetOverflowInt64Response{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IntClientGetOverflowInt64Response{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return IntClientGetOverflowInt64Response{}, err
	}
	resp, err := client.getOverflowInt64HandleResponse(httpResp)
	return resp, err
}

// getOverflowInt64CreateRequest creates the GetOverflowInt64 request.
func (client *IntClient) getOverflowInt64CreateRequest(ctx context.Context, _ *IntClientGetOverflowInt64Options) (*policy.Request, error) {
	urlPath := "/int/overflowint64"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getOverflowInt64HandleResponse handles the GetOverflowInt64 response.
func (client *IntClient) getOverflowInt64HandleResponse(resp *http.Response) (IntClientGetOverflowInt64Response, error) {
	result := IntClientGetOverflowInt64Response{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return IntClientGetOverflowInt64Response{}, err
	}
	return result, nil
}

// GetUnderflowInt32 - Get underflow Int32 value
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - IntClientGetUnderflowInt32Options contains the optional parameters for the IntClient.GetUnderflowInt32 method.
func (client *IntClient) GetUnderflowInt32(ctx context.Context, options *IntClientGetUnderflowInt32Options) (IntClientGetUnderflowInt32Response, error) {
	var err error
	const operationName = "IntClient.GetUnderflowInt32"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getUnderflowInt32CreateRequest(ctx, options)
	if err != nil {
		return IntClientGetUnderflowInt32Response{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IntClientGetUnderflowInt32Response{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return IntClientGetUnderflowInt32Response{}, err
	}
	resp, err := client.getUnderflowInt32HandleResponse(httpResp)
	return resp, err
}

// getUnderflowInt32CreateRequest creates the GetUnderflowInt32 request.
func (client *IntClient) getUnderflowInt32CreateRequest(ctx context.Context, _ *IntClientGetUnderflowInt32Options) (*policy.Request, error) {
	urlPath := "/int/underflowint32"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getUnderflowInt32HandleResponse handles the GetUnderflowInt32 response.
func (client *IntClient) getUnderflowInt32HandleResponse(resp *http.Response) (IntClientGetUnderflowInt32Response, error) {
	result := IntClientGetUnderflowInt32Response{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return IntClientGetUnderflowInt32Response{}, err
	}
	return result, nil
}

// GetUnderflowInt64 - Get underflow Int64 value
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - IntClientGetUnderflowInt64Options contains the optional parameters for the IntClient.GetUnderflowInt64 method.
func (client *IntClient) GetUnderflowInt64(ctx context.Context, options *IntClientGetUnderflowInt64Options) (IntClientGetUnderflowInt64Response, error) {
	var err error
	const operationName = "IntClient.GetUnderflowInt64"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getUnderflowInt64CreateRequest(ctx, options)
	if err != nil {
		return IntClientGetUnderflowInt64Response{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IntClientGetUnderflowInt64Response{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return IntClientGetUnderflowInt64Response{}, err
	}
	resp, err := client.getUnderflowInt64HandleResponse(httpResp)
	return resp, err
}

// getUnderflowInt64CreateRequest creates the GetUnderflowInt64 request.
func (client *IntClient) getUnderflowInt64CreateRequest(ctx context.Context, _ *IntClientGetUnderflowInt64Options) (*policy.Request, error) {
	urlPath := "/int/underflowint64"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getUnderflowInt64HandleResponse handles the GetUnderflowInt64 response.
func (client *IntClient) getUnderflowInt64HandleResponse(resp *http.Response) (IntClientGetUnderflowInt64Response, error) {
	result := IntClientGetUnderflowInt64Response{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return IntClientGetUnderflowInt64Response{}, err
	}
	return result, nil
}

// GetUnixTime - Get datetime encoded as Unix time value
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - IntClientGetUnixTimeOptions contains the optional parameters for the IntClient.GetUnixTime method.
func (client *IntClient) GetUnixTime(ctx context.Context, options *IntClientGetUnixTimeOptions) (IntClientGetUnixTimeResponse, error) {
	var err error
	const operationName = "IntClient.GetUnixTime"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getUnixTimeCreateRequest(ctx, options)
	if err != nil {
		return IntClientGetUnixTimeResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IntClientGetUnixTimeResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return IntClientGetUnixTimeResponse{}, err
	}
	resp, err := client.getUnixTimeHandleResponse(httpResp)
	return resp, err
}

// getUnixTimeCreateRequest creates the GetUnixTime request.
func (client *IntClient) getUnixTimeCreateRequest(ctx context.Context, _ *IntClientGetUnixTimeOptions) (*policy.Request, error) {
	urlPath := "/int/unixtime"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getUnixTimeHandleResponse handles the GetUnixTime response.
func (client *IntClient) getUnixTimeHandleResponse(resp *http.Response) (IntClientGetUnixTimeResponse, error) {
	result := IntClientGetUnixTimeResponse{}
	var aux *timeUnix
	if err := runtime.UnmarshalAsJSON(resp, &aux); err != nil {
		return IntClientGetUnixTimeResponse{}, err
	}
	result.Value = (*time.Time)(aux)
	return result, nil
}

// PutMax32 - Put max int32 value
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - intBody - int body
//   - options - IntClientPutMax32Options contains the optional parameters for the IntClient.PutMax32 method.
func (client *IntClient) PutMax32(ctx context.Context, intBody int32, options *IntClientPutMax32Options) (IntClientPutMax32Response, error) {
	var err error
	const operationName = "IntClient.PutMax32"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putMax32CreateRequest(ctx, intBody, options)
	if err != nil {
		return IntClientPutMax32Response{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IntClientPutMax32Response{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return IntClientPutMax32Response{}, err
	}
	return IntClientPutMax32Response{}, nil
}

// putMax32CreateRequest creates the PutMax32 request.
func (client *IntClient) putMax32CreateRequest(ctx context.Context, intBody int32, _ *IntClientPutMax32Options) (*policy.Request, error) {
	urlPath := "/int/max/32"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, intBody); err != nil {
		return nil, err
	}
	return req, nil
}

// PutMax64 - Put max int64 value
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - intBody - int body
//   - options - IntClientPutMax64Options contains the optional parameters for the IntClient.PutMax64 method.
func (client *IntClient) PutMax64(ctx context.Context, intBody int64, options *IntClientPutMax64Options) (IntClientPutMax64Response, error) {
	var err error
	const operationName = "IntClient.PutMax64"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putMax64CreateRequest(ctx, intBody, options)
	if err != nil {
		return IntClientPutMax64Response{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IntClientPutMax64Response{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return IntClientPutMax64Response{}, err
	}
	return IntClientPutMax64Response{}, nil
}

// putMax64CreateRequest creates the PutMax64 request.
func (client *IntClient) putMax64CreateRequest(ctx context.Context, intBody int64, _ *IntClientPutMax64Options) (*policy.Request, error) {
	urlPath := "/int/max/64"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, intBody); err != nil {
		return nil, err
	}
	return req, nil
}

// PutMin32 - Put min int32 value
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - intBody - int body
//   - options - IntClientPutMin32Options contains the optional parameters for the IntClient.PutMin32 method.
func (client *IntClient) PutMin32(ctx context.Context, intBody int32, options *IntClientPutMin32Options) (IntClientPutMin32Response, error) {
	var err error
	const operationName = "IntClient.PutMin32"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putMin32CreateRequest(ctx, intBody, options)
	if err != nil {
		return IntClientPutMin32Response{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IntClientPutMin32Response{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return IntClientPutMin32Response{}, err
	}
	return IntClientPutMin32Response{}, nil
}

// putMin32CreateRequest creates the PutMin32 request.
func (client *IntClient) putMin32CreateRequest(ctx context.Context, intBody int32, _ *IntClientPutMin32Options) (*policy.Request, error) {
	urlPath := "/int/min/32"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, intBody); err != nil {
		return nil, err
	}
	return req, nil
}

// PutMin64 - Put min int64 value
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - intBody - int body
//   - options - IntClientPutMin64Options contains the optional parameters for the IntClient.PutMin64 method.
func (client *IntClient) PutMin64(ctx context.Context, intBody int64, options *IntClientPutMin64Options) (IntClientPutMin64Response, error) {
	var err error
	const operationName = "IntClient.PutMin64"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putMin64CreateRequest(ctx, intBody, options)
	if err != nil {
		return IntClientPutMin64Response{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IntClientPutMin64Response{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return IntClientPutMin64Response{}, err
	}
	return IntClientPutMin64Response{}, nil
}

// putMin64CreateRequest creates the PutMin64 request.
func (client *IntClient) putMin64CreateRequest(ctx context.Context, intBody int64, _ *IntClientPutMin64Options) (*policy.Request, error) {
	urlPath := "/int/min/64"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, intBody); err != nil {
		return nil, err
	}
	return req, nil
}

// PutUnixTimeDate - Put datetime encoded as Unix time
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - intBody - int body
//   - options - IntClientPutUnixTimeDateOptions contains the optional parameters for the IntClient.PutUnixTimeDate method.
func (client *IntClient) PutUnixTimeDate(ctx context.Context, intBody time.Time, options *IntClientPutUnixTimeDateOptions) (IntClientPutUnixTimeDateResponse, error) {
	var err error
	const operationName = "IntClient.PutUnixTimeDate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putUnixTimeDateCreateRequest(ctx, intBody, options)
	if err != nil {
		return IntClientPutUnixTimeDateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IntClientPutUnixTimeDateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return IntClientPutUnixTimeDateResponse{}, err
	}
	return IntClientPutUnixTimeDateResponse{}, nil
}

// putUnixTimeDateCreateRequest creates the PutUnixTimeDate request.
func (client *IntClient) putUnixTimeDateCreateRequest(ctx context.Context, intBody time.Time, _ *IntClientPutUnixTimeDateOptions) (*policy.Request, error) {
	urlPath := "/int/unixtime"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	aux := timeUnix(intBody)
	if err := runtime.MarshalAsJSON(req, aux); err != nil {
		return nil, err
	}
	return req, nil
}
