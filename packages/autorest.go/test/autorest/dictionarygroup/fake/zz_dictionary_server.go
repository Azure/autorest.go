//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	"generatortests/dictionarygroup"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"time"
)

// DictionaryServer is a fake server for instances of the dictionarygroup.DictionaryClient type.
type DictionaryServer struct {
	// GetArrayEmpty is the fake for method DictionaryClient.GetArrayEmpty
	// HTTP status codes to indicate success: http.StatusOK
	GetArrayEmpty func(ctx context.Context, options *dictionarygroup.DictionaryClientGetArrayEmptyOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetArrayEmptyResponse], errResp azfake.ErrorResponder)

	// GetArrayItemEmpty is the fake for method DictionaryClient.GetArrayItemEmpty
	// HTTP status codes to indicate success: http.StatusOK
	GetArrayItemEmpty func(ctx context.Context, options *dictionarygroup.DictionaryClientGetArrayItemEmptyOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetArrayItemEmptyResponse], errResp azfake.ErrorResponder)

	// GetArrayItemNull is the fake for method DictionaryClient.GetArrayItemNull
	// HTTP status codes to indicate success: http.StatusOK
	GetArrayItemNull func(ctx context.Context, options *dictionarygroup.DictionaryClientGetArrayItemNullOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetArrayItemNullResponse], errResp azfake.ErrorResponder)

	// GetArrayNull is the fake for method DictionaryClient.GetArrayNull
	// HTTP status codes to indicate success: http.StatusOK
	GetArrayNull func(ctx context.Context, options *dictionarygroup.DictionaryClientGetArrayNullOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetArrayNullResponse], errResp azfake.ErrorResponder)

	// GetArrayValid is the fake for method DictionaryClient.GetArrayValid
	// HTTP status codes to indicate success: http.StatusOK
	GetArrayValid func(ctx context.Context, options *dictionarygroup.DictionaryClientGetArrayValidOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetArrayValidResponse], errResp azfake.ErrorResponder)

	// GetBase64URL is the fake for method DictionaryClient.GetBase64URL
	// HTTP status codes to indicate success: http.StatusOK
	GetBase64URL func(ctx context.Context, options *dictionarygroup.DictionaryClientGetBase64URLOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetBase64URLResponse], errResp azfake.ErrorResponder)

	// GetBooleanInvalidNull is the fake for method DictionaryClient.GetBooleanInvalidNull
	// HTTP status codes to indicate success: http.StatusOK
	GetBooleanInvalidNull func(ctx context.Context, options *dictionarygroup.DictionaryClientGetBooleanInvalidNullOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetBooleanInvalidNullResponse], errResp azfake.ErrorResponder)

	// GetBooleanInvalidString is the fake for method DictionaryClient.GetBooleanInvalidString
	// HTTP status codes to indicate success: http.StatusOK
	GetBooleanInvalidString func(ctx context.Context, options *dictionarygroup.DictionaryClientGetBooleanInvalidStringOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetBooleanInvalidStringResponse], errResp azfake.ErrorResponder)

	// GetBooleanTfft is the fake for method DictionaryClient.GetBooleanTfft
	// HTTP status codes to indicate success: http.StatusOK
	GetBooleanTfft func(ctx context.Context, options *dictionarygroup.DictionaryClientGetBooleanTfftOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetBooleanTfftResponse], errResp azfake.ErrorResponder)

	// GetByteInvalidNull is the fake for method DictionaryClient.GetByteInvalidNull
	// HTTP status codes to indicate success: http.StatusOK
	GetByteInvalidNull func(ctx context.Context, options *dictionarygroup.DictionaryClientGetByteInvalidNullOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetByteInvalidNullResponse], errResp azfake.ErrorResponder)

	// GetByteValid is the fake for method DictionaryClient.GetByteValid
	// HTTP status codes to indicate success: http.StatusOK
	GetByteValid func(ctx context.Context, options *dictionarygroup.DictionaryClientGetByteValidOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetByteValidResponse], errResp azfake.ErrorResponder)

	// GetComplexEmpty is the fake for method DictionaryClient.GetComplexEmpty
	// HTTP status codes to indicate success: http.StatusOK
	GetComplexEmpty func(ctx context.Context, options *dictionarygroup.DictionaryClientGetComplexEmptyOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetComplexEmptyResponse], errResp azfake.ErrorResponder)

	// GetComplexItemEmpty is the fake for method DictionaryClient.GetComplexItemEmpty
	// HTTP status codes to indicate success: http.StatusOK
	GetComplexItemEmpty func(ctx context.Context, options *dictionarygroup.DictionaryClientGetComplexItemEmptyOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetComplexItemEmptyResponse], errResp azfake.ErrorResponder)

	// GetComplexItemNull is the fake for method DictionaryClient.GetComplexItemNull
	// HTTP status codes to indicate success: http.StatusOK
	GetComplexItemNull func(ctx context.Context, options *dictionarygroup.DictionaryClientGetComplexItemNullOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetComplexItemNullResponse], errResp azfake.ErrorResponder)

	// GetComplexNull is the fake for method DictionaryClient.GetComplexNull
	// HTTP status codes to indicate success: http.StatusOK
	GetComplexNull func(ctx context.Context, options *dictionarygroup.DictionaryClientGetComplexNullOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetComplexNullResponse], errResp azfake.ErrorResponder)

	// GetComplexValid is the fake for method DictionaryClient.GetComplexValid
	// HTTP status codes to indicate success: http.StatusOK
	GetComplexValid func(ctx context.Context, options *dictionarygroup.DictionaryClientGetComplexValidOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetComplexValidResponse], errResp azfake.ErrorResponder)

	// GetDateInvalidChars is the fake for method DictionaryClient.GetDateInvalidChars
	// HTTP status codes to indicate success: http.StatusOK
	GetDateInvalidChars func(ctx context.Context, options *dictionarygroup.DictionaryClientGetDateInvalidCharsOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetDateInvalidCharsResponse], errResp azfake.ErrorResponder)

	// GetDateInvalidNull is the fake for method DictionaryClient.GetDateInvalidNull
	// HTTP status codes to indicate success: http.StatusOK
	GetDateInvalidNull func(ctx context.Context, options *dictionarygroup.DictionaryClientGetDateInvalidNullOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetDateInvalidNullResponse], errResp azfake.ErrorResponder)

	// GetDateTimeInvalidChars is the fake for method DictionaryClient.GetDateTimeInvalidChars
	// HTTP status codes to indicate success: http.StatusOK
	GetDateTimeInvalidChars func(ctx context.Context, options *dictionarygroup.DictionaryClientGetDateTimeInvalidCharsOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetDateTimeInvalidCharsResponse], errResp azfake.ErrorResponder)

	// GetDateTimeInvalidNull is the fake for method DictionaryClient.GetDateTimeInvalidNull
	// HTTP status codes to indicate success: http.StatusOK
	GetDateTimeInvalidNull func(ctx context.Context, options *dictionarygroup.DictionaryClientGetDateTimeInvalidNullOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetDateTimeInvalidNullResponse], errResp azfake.ErrorResponder)

	// GetDateTimeRFC1123Valid is the fake for method DictionaryClient.GetDateTimeRFC1123Valid
	// HTTP status codes to indicate success: http.StatusOK
	GetDateTimeRFC1123Valid func(ctx context.Context, options *dictionarygroup.DictionaryClientGetDateTimeRFC1123ValidOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetDateTimeRFC1123ValidResponse], errResp azfake.ErrorResponder)

	// GetDateTimeValid is the fake for method DictionaryClient.GetDateTimeValid
	// HTTP status codes to indicate success: http.StatusOK
	GetDateTimeValid func(ctx context.Context, options *dictionarygroup.DictionaryClientGetDateTimeValidOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetDateTimeValidResponse], errResp azfake.ErrorResponder)

	// GetDateValid is the fake for method DictionaryClient.GetDateValid
	// HTTP status codes to indicate success: http.StatusOK
	GetDateValid func(ctx context.Context, options *dictionarygroup.DictionaryClientGetDateValidOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetDateValidResponse], errResp azfake.ErrorResponder)

	// GetDictionaryEmpty is the fake for method DictionaryClient.GetDictionaryEmpty
	// HTTP status codes to indicate success: http.StatusOK
	GetDictionaryEmpty func(ctx context.Context, options *dictionarygroup.DictionaryClientGetDictionaryEmptyOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetDictionaryEmptyResponse], errResp azfake.ErrorResponder)

	// GetDictionaryItemEmpty is the fake for method DictionaryClient.GetDictionaryItemEmpty
	// HTTP status codes to indicate success: http.StatusOK
	GetDictionaryItemEmpty func(ctx context.Context, options *dictionarygroup.DictionaryClientGetDictionaryItemEmptyOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetDictionaryItemEmptyResponse], errResp azfake.ErrorResponder)

	// GetDictionaryItemNull is the fake for method DictionaryClient.GetDictionaryItemNull
	// HTTP status codes to indicate success: http.StatusOK
	GetDictionaryItemNull func(ctx context.Context, options *dictionarygroup.DictionaryClientGetDictionaryItemNullOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetDictionaryItemNullResponse], errResp azfake.ErrorResponder)

	// GetDictionaryNull is the fake for method DictionaryClient.GetDictionaryNull
	// HTTP status codes to indicate success: http.StatusOK
	GetDictionaryNull func(ctx context.Context, options *dictionarygroup.DictionaryClientGetDictionaryNullOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetDictionaryNullResponse], errResp azfake.ErrorResponder)

	// GetDictionaryValid is the fake for method DictionaryClient.GetDictionaryValid
	// HTTP status codes to indicate success: http.StatusOK
	GetDictionaryValid func(ctx context.Context, options *dictionarygroup.DictionaryClientGetDictionaryValidOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetDictionaryValidResponse], errResp azfake.ErrorResponder)

	// GetDoubleInvalidNull is the fake for method DictionaryClient.GetDoubleInvalidNull
	// HTTP status codes to indicate success: http.StatusOK
	GetDoubleInvalidNull func(ctx context.Context, options *dictionarygroup.DictionaryClientGetDoubleInvalidNullOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetDoubleInvalidNullResponse], errResp azfake.ErrorResponder)

	// GetDoubleInvalidString is the fake for method DictionaryClient.GetDoubleInvalidString
	// HTTP status codes to indicate success: http.StatusOK
	GetDoubleInvalidString func(ctx context.Context, options *dictionarygroup.DictionaryClientGetDoubleInvalidStringOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetDoubleInvalidStringResponse], errResp azfake.ErrorResponder)

	// GetDoubleValid is the fake for method DictionaryClient.GetDoubleValid
	// HTTP status codes to indicate success: http.StatusOK
	GetDoubleValid func(ctx context.Context, options *dictionarygroup.DictionaryClientGetDoubleValidOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetDoubleValidResponse], errResp azfake.ErrorResponder)

	// GetDurationValid is the fake for method DictionaryClient.GetDurationValid
	// HTTP status codes to indicate success: http.StatusOK
	GetDurationValid func(ctx context.Context, options *dictionarygroup.DictionaryClientGetDurationValidOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetDurationValidResponse], errResp azfake.ErrorResponder)

	// GetEmpty is the fake for method DictionaryClient.GetEmpty
	// HTTP status codes to indicate success: http.StatusOK
	GetEmpty func(ctx context.Context, options *dictionarygroup.DictionaryClientGetEmptyOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetEmptyResponse], errResp azfake.ErrorResponder)

	// GetEmptyStringKey is the fake for method DictionaryClient.GetEmptyStringKey
	// HTTP status codes to indicate success: http.StatusOK
	GetEmptyStringKey func(ctx context.Context, options *dictionarygroup.DictionaryClientGetEmptyStringKeyOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetEmptyStringKeyResponse], errResp azfake.ErrorResponder)

	// GetFloatInvalidNull is the fake for method DictionaryClient.GetFloatInvalidNull
	// HTTP status codes to indicate success: http.StatusOK
	GetFloatInvalidNull func(ctx context.Context, options *dictionarygroup.DictionaryClientGetFloatInvalidNullOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetFloatInvalidNullResponse], errResp azfake.ErrorResponder)

	// GetFloatInvalidString is the fake for method DictionaryClient.GetFloatInvalidString
	// HTTP status codes to indicate success: http.StatusOK
	GetFloatInvalidString func(ctx context.Context, options *dictionarygroup.DictionaryClientGetFloatInvalidStringOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetFloatInvalidStringResponse], errResp azfake.ErrorResponder)

	// GetFloatValid is the fake for method DictionaryClient.GetFloatValid
	// HTTP status codes to indicate success: http.StatusOK
	GetFloatValid func(ctx context.Context, options *dictionarygroup.DictionaryClientGetFloatValidOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetFloatValidResponse], errResp azfake.ErrorResponder)

	// GetIntInvalidNull is the fake for method DictionaryClient.GetIntInvalidNull
	// HTTP status codes to indicate success: http.StatusOK
	GetIntInvalidNull func(ctx context.Context, options *dictionarygroup.DictionaryClientGetIntInvalidNullOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetIntInvalidNullResponse], errResp azfake.ErrorResponder)

	// GetIntInvalidString is the fake for method DictionaryClient.GetIntInvalidString
	// HTTP status codes to indicate success: http.StatusOK
	GetIntInvalidString func(ctx context.Context, options *dictionarygroup.DictionaryClientGetIntInvalidStringOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetIntInvalidStringResponse], errResp azfake.ErrorResponder)

	// GetIntegerValid is the fake for method DictionaryClient.GetIntegerValid
	// HTTP status codes to indicate success: http.StatusOK
	GetIntegerValid func(ctx context.Context, options *dictionarygroup.DictionaryClientGetIntegerValidOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetIntegerValidResponse], errResp azfake.ErrorResponder)

	// GetInvalid is the fake for method DictionaryClient.GetInvalid
	// HTTP status codes to indicate success: http.StatusOK
	GetInvalid func(ctx context.Context, options *dictionarygroup.DictionaryClientGetInvalidOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetInvalidResponse], errResp azfake.ErrorResponder)

	// GetLongInvalidNull is the fake for method DictionaryClient.GetLongInvalidNull
	// HTTP status codes to indicate success: http.StatusOK
	GetLongInvalidNull func(ctx context.Context, options *dictionarygroup.DictionaryClientGetLongInvalidNullOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetLongInvalidNullResponse], errResp azfake.ErrorResponder)

	// GetLongInvalidString is the fake for method DictionaryClient.GetLongInvalidString
	// HTTP status codes to indicate success: http.StatusOK
	GetLongInvalidString func(ctx context.Context, options *dictionarygroup.DictionaryClientGetLongInvalidStringOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetLongInvalidStringResponse], errResp azfake.ErrorResponder)

	// GetLongValid is the fake for method DictionaryClient.GetLongValid
	// HTTP status codes to indicate success: http.StatusOK
	GetLongValid func(ctx context.Context, options *dictionarygroup.DictionaryClientGetLongValidOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetLongValidResponse], errResp azfake.ErrorResponder)

	// GetNull is the fake for method DictionaryClient.GetNull
	// HTTP status codes to indicate success: http.StatusOK
	GetNull func(ctx context.Context, options *dictionarygroup.DictionaryClientGetNullOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetNullResponse], errResp azfake.ErrorResponder)

	// GetNullKey is the fake for method DictionaryClient.GetNullKey
	// HTTP status codes to indicate success: http.StatusOK
	GetNullKey func(ctx context.Context, options *dictionarygroup.DictionaryClientGetNullKeyOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetNullKeyResponse], errResp azfake.ErrorResponder)

	// GetNullValue is the fake for method DictionaryClient.GetNullValue
	// HTTP status codes to indicate success: http.StatusOK
	GetNullValue func(ctx context.Context, options *dictionarygroup.DictionaryClientGetNullValueOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetNullValueResponse], errResp azfake.ErrorResponder)

	// GetStringValid is the fake for method DictionaryClient.GetStringValid
	// HTTP status codes to indicate success: http.StatusOK
	GetStringValid func(ctx context.Context, options *dictionarygroup.DictionaryClientGetStringValidOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetStringValidResponse], errResp azfake.ErrorResponder)

	// GetStringWithInvalid is the fake for method DictionaryClient.GetStringWithInvalid
	// HTTP status codes to indicate success: http.StatusOK
	GetStringWithInvalid func(ctx context.Context, options *dictionarygroup.DictionaryClientGetStringWithInvalidOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetStringWithInvalidResponse], errResp azfake.ErrorResponder)

	// GetStringWithNull is the fake for method DictionaryClient.GetStringWithNull
	// HTTP status codes to indicate success: http.StatusOK
	GetStringWithNull func(ctx context.Context, options *dictionarygroup.DictionaryClientGetStringWithNullOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientGetStringWithNullResponse], errResp azfake.ErrorResponder)

	// PutArrayValid is the fake for method DictionaryClient.PutArrayValid
	// HTTP status codes to indicate success: http.StatusOK
	PutArrayValid func(ctx context.Context, arrayBody map[string][]*string, options *dictionarygroup.DictionaryClientPutArrayValidOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientPutArrayValidResponse], errResp azfake.ErrorResponder)

	// PutBooleanTfft is the fake for method DictionaryClient.PutBooleanTfft
	// HTTP status codes to indicate success: http.StatusOK
	PutBooleanTfft func(ctx context.Context, arrayBody map[string]*bool, options *dictionarygroup.DictionaryClientPutBooleanTfftOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientPutBooleanTfftResponse], errResp azfake.ErrorResponder)

	// PutByteValid is the fake for method DictionaryClient.PutByteValid
	// HTTP status codes to indicate success: http.StatusOK
	PutByteValid func(ctx context.Context, arrayBody map[string][]byte, options *dictionarygroup.DictionaryClientPutByteValidOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientPutByteValidResponse], errResp azfake.ErrorResponder)

	// PutComplexValid is the fake for method DictionaryClient.PutComplexValid
	// HTTP status codes to indicate success: http.StatusOK
	PutComplexValid func(ctx context.Context, arrayBody map[string]*dictionarygroup.Widget, options *dictionarygroup.DictionaryClientPutComplexValidOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientPutComplexValidResponse], errResp azfake.ErrorResponder)

	// PutDateTimeRFC1123Valid is the fake for method DictionaryClient.PutDateTimeRFC1123Valid
	// HTTP status codes to indicate success: http.StatusOK
	PutDateTimeRFC1123Valid func(ctx context.Context, arrayBody map[string]*time.Time, options *dictionarygroup.DictionaryClientPutDateTimeRFC1123ValidOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientPutDateTimeRFC1123ValidResponse], errResp azfake.ErrorResponder)

	// PutDateTimeValid is the fake for method DictionaryClient.PutDateTimeValid
	// HTTP status codes to indicate success: http.StatusOK
	PutDateTimeValid func(ctx context.Context, arrayBody map[string]*time.Time, options *dictionarygroup.DictionaryClientPutDateTimeValidOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientPutDateTimeValidResponse], errResp azfake.ErrorResponder)

	// PutDateValid is the fake for method DictionaryClient.PutDateValid
	// HTTP status codes to indicate success: http.StatusOK
	PutDateValid func(ctx context.Context, arrayBody map[string]*time.Time, options *dictionarygroup.DictionaryClientPutDateValidOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientPutDateValidResponse], errResp azfake.ErrorResponder)

	// PutDictionaryValid is the fake for method DictionaryClient.PutDictionaryValid
	// HTTP status codes to indicate success: http.StatusOK
	PutDictionaryValid func(ctx context.Context, arrayBody map[string]map[string]*string, options *dictionarygroup.DictionaryClientPutDictionaryValidOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientPutDictionaryValidResponse], errResp azfake.ErrorResponder)

	// PutDoubleValid is the fake for method DictionaryClient.PutDoubleValid
	// HTTP status codes to indicate success: http.StatusOK
	PutDoubleValid func(ctx context.Context, arrayBody map[string]*float64, options *dictionarygroup.DictionaryClientPutDoubleValidOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientPutDoubleValidResponse], errResp azfake.ErrorResponder)

	// PutDurationValid is the fake for method DictionaryClient.PutDurationValid
	// HTTP status codes to indicate success: http.StatusOK
	PutDurationValid func(ctx context.Context, arrayBody map[string]*string, options *dictionarygroup.DictionaryClientPutDurationValidOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientPutDurationValidResponse], errResp azfake.ErrorResponder)

	// PutEmpty is the fake for method DictionaryClient.PutEmpty
	// HTTP status codes to indicate success: http.StatusOK
	PutEmpty func(ctx context.Context, arrayBody map[string]*string, options *dictionarygroup.DictionaryClientPutEmptyOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientPutEmptyResponse], errResp azfake.ErrorResponder)

	// PutFloatValid is the fake for method DictionaryClient.PutFloatValid
	// HTTP status codes to indicate success: http.StatusOK
	PutFloatValid func(ctx context.Context, arrayBody map[string]*float32, options *dictionarygroup.DictionaryClientPutFloatValidOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientPutFloatValidResponse], errResp azfake.ErrorResponder)

	// PutIntegerValid is the fake for method DictionaryClient.PutIntegerValid
	// HTTP status codes to indicate success: http.StatusOK
	PutIntegerValid func(ctx context.Context, arrayBody map[string]*int32, options *dictionarygroup.DictionaryClientPutIntegerValidOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientPutIntegerValidResponse], errResp azfake.ErrorResponder)

	// PutLongValid is the fake for method DictionaryClient.PutLongValid
	// HTTP status codes to indicate success: http.StatusOK
	PutLongValid func(ctx context.Context, arrayBody map[string]*int64, options *dictionarygroup.DictionaryClientPutLongValidOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientPutLongValidResponse], errResp azfake.ErrorResponder)

	// PutStringValid is the fake for method DictionaryClient.PutStringValid
	// HTTP status codes to indicate success: http.StatusOK
	PutStringValid func(ctx context.Context, arrayBody map[string]*string, options *dictionarygroup.DictionaryClientPutStringValidOptions) (resp azfake.Responder[dictionarygroup.DictionaryClientPutStringValidResponse], errResp azfake.ErrorResponder)
}

// NewDictionaryServerTransport creates a new instance of DictionaryServerTransport with the provided implementation.
// The returned DictionaryServerTransport instance is connected to an instance of dictionarygroup.DictionaryClient by way of the
// undefined.Transporter field.
func NewDictionaryServerTransport(srv *DictionaryServer) *DictionaryServerTransport {
	return &DictionaryServerTransport{srv: srv}
}

// DictionaryServerTransport connects instances of dictionarygroup.DictionaryClient to instances of DictionaryServer.
// Don't use this type directly, use NewDictionaryServerTransport instead.
type DictionaryServerTransport struct {
	srv *DictionaryServer
}

// Do implements the policy.Transporter interface for DictionaryServerTransport.
func (d *DictionaryServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "DictionaryClient.GetArrayEmpty":
		resp, err = d.dispatchGetArrayEmpty(req)
	case "DictionaryClient.GetArrayItemEmpty":
		resp, err = d.dispatchGetArrayItemEmpty(req)
	case "DictionaryClient.GetArrayItemNull":
		resp, err = d.dispatchGetArrayItemNull(req)
	case "DictionaryClient.GetArrayNull":
		resp, err = d.dispatchGetArrayNull(req)
	case "DictionaryClient.GetArrayValid":
		resp, err = d.dispatchGetArrayValid(req)
	case "DictionaryClient.GetBase64URL":
		resp, err = d.dispatchGetBase64URL(req)
	case "DictionaryClient.GetBooleanInvalidNull":
		resp, err = d.dispatchGetBooleanInvalidNull(req)
	case "DictionaryClient.GetBooleanInvalidString":
		resp, err = d.dispatchGetBooleanInvalidString(req)
	case "DictionaryClient.GetBooleanTfft":
		resp, err = d.dispatchGetBooleanTfft(req)
	case "DictionaryClient.GetByteInvalidNull":
		resp, err = d.dispatchGetByteInvalidNull(req)
	case "DictionaryClient.GetByteValid":
		resp, err = d.dispatchGetByteValid(req)
	case "DictionaryClient.GetComplexEmpty":
		resp, err = d.dispatchGetComplexEmpty(req)
	case "DictionaryClient.GetComplexItemEmpty":
		resp, err = d.dispatchGetComplexItemEmpty(req)
	case "DictionaryClient.GetComplexItemNull":
		resp, err = d.dispatchGetComplexItemNull(req)
	case "DictionaryClient.GetComplexNull":
		resp, err = d.dispatchGetComplexNull(req)
	case "DictionaryClient.GetComplexValid":
		resp, err = d.dispatchGetComplexValid(req)
	case "DictionaryClient.GetDateInvalidChars":
		resp, err = d.dispatchGetDateInvalidChars(req)
	case "DictionaryClient.GetDateInvalidNull":
		resp, err = d.dispatchGetDateInvalidNull(req)
	case "DictionaryClient.GetDateTimeInvalidChars":
		resp, err = d.dispatchGetDateTimeInvalidChars(req)
	case "DictionaryClient.GetDateTimeInvalidNull":
		resp, err = d.dispatchGetDateTimeInvalidNull(req)
	case "DictionaryClient.GetDateTimeRFC1123Valid":
		resp, err = d.dispatchGetDateTimeRFC1123Valid(req)
	case "DictionaryClient.GetDateTimeValid":
		resp, err = d.dispatchGetDateTimeValid(req)
	case "DictionaryClient.GetDateValid":
		resp, err = d.dispatchGetDateValid(req)
	case "DictionaryClient.GetDictionaryEmpty":
		resp, err = d.dispatchGetDictionaryEmpty(req)
	case "DictionaryClient.GetDictionaryItemEmpty":
		resp, err = d.dispatchGetDictionaryItemEmpty(req)
	case "DictionaryClient.GetDictionaryItemNull":
		resp, err = d.dispatchGetDictionaryItemNull(req)
	case "DictionaryClient.GetDictionaryNull":
		resp, err = d.dispatchGetDictionaryNull(req)
	case "DictionaryClient.GetDictionaryValid":
		resp, err = d.dispatchGetDictionaryValid(req)
	case "DictionaryClient.GetDoubleInvalidNull":
		resp, err = d.dispatchGetDoubleInvalidNull(req)
	case "DictionaryClient.GetDoubleInvalidString":
		resp, err = d.dispatchGetDoubleInvalidString(req)
	case "DictionaryClient.GetDoubleValid":
		resp, err = d.dispatchGetDoubleValid(req)
	case "DictionaryClient.GetDurationValid":
		resp, err = d.dispatchGetDurationValid(req)
	case "DictionaryClient.GetEmpty":
		resp, err = d.dispatchGetEmpty(req)
	case "DictionaryClient.GetEmptyStringKey":
		resp, err = d.dispatchGetEmptyStringKey(req)
	case "DictionaryClient.GetFloatInvalidNull":
		resp, err = d.dispatchGetFloatInvalidNull(req)
	case "DictionaryClient.GetFloatInvalidString":
		resp, err = d.dispatchGetFloatInvalidString(req)
	case "DictionaryClient.GetFloatValid":
		resp, err = d.dispatchGetFloatValid(req)
	case "DictionaryClient.GetIntInvalidNull":
		resp, err = d.dispatchGetIntInvalidNull(req)
	case "DictionaryClient.GetIntInvalidString":
		resp, err = d.dispatchGetIntInvalidString(req)
	case "DictionaryClient.GetIntegerValid":
		resp, err = d.dispatchGetIntegerValid(req)
	case "DictionaryClient.GetInvalid":
		resp, err = d.dispatchGetInvalid(req)
	case "DictionaryClient.GetLongInvalidNull":
		resp, err = d.dispatchGetLongInvalidNull(req)
	case "DictionaryClient.GetLongInvalidString":
		resp, err = d.dispatchGetLongInvalidString(req)
	case "DictionaryClient.GetLongValid":
		resp, err = d.dispatchGetLongValid(req)
	case "DictionaryClient.GetNull":
		resp, err = d.dispatchGetNull(req)
	case "DictionaryClient.GetNullKey":
		resp, err = d.dispatchGetNullKey(req)
	case "DictionaryClient.GetNullValue":
		resp, err = d.dispatchGetNullValue(req)
	case "DictionaryClient.GetStringValid":
		resp, err = d.dispatchGetStringValid(req)
	case "DictionaryClient.GetStringWithInvalid":
		resp, err = d.dispatchGetStringWithInvalid(req)
	case "DictionaryClient.GetStringWithNull":
		resp, err = d.dispatchGetStringWithNull(req)
	case "DictionaryClient.PutArrayValid":
		resp, err = d.dispatchPutArrayValid(req)
	case "DictionaryClient.PutBooleanTfft":
		resp, err = d.dispatchPutBooleanTfft(req)
	case "DictionaryClient.PutByteValid":
		resp, err = d.dispatchPutByteValid(req)
	case "DictionaryClient.PutComplexValid":
		resp, err = d.dispatchPutComplexValid(req)
	case "DictionaryClient.PutDateTimeRFC1123Valid":
		resp, err = d.dispatchPutDateTimeRFC1123Valid(req)
	case "DictionaryClient.PutDateTimeValid":
		resp, err = d.dispatchPutDateTimeValid(req)
	case "DictionaryClient.PutDateValid":
		resp, err = d.dispatchPutDateValid(req)
	case "DictionaryClient.PutDictionaryValid":
		resp, err = d.dispatchPutDictionaryValid(req)
	case "DictionaryClient.PutDoubleValid":
		resp, err = d.dispatchPutDoubleValid(req)
	case "DictionaryClient.PutDurationValid":
		resp, err = d.dispatchPutDurationValid(req)
	case "DictionaryClient.PutEmpty":
		resp, err = d.dispatchPutEmpty(req)
	case "DictionaryClient.PutFloatValid":
		resp, err = d.dispatchPutFloatValid(req)
	case "DictionaryClient.PutIntegerValid":
		resp, err = d.dispatchPutIntegerValid(req)
	case "DictionaryClient.PutLongValid":
		resp, err = d.dispatchPutLongValid(req)
	case "DictionaryClient.PutStringValid":
		resp, err = d.dispatchPutStringValid(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetArrayEmpty(req *http.Request) (*http.Response, error) {
	if d.srv.GetArrayEmpty == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetArrayEmpty not implemented")}
	}
	respr, errRespr := d.srv.GetArrayEmpty(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetArrayItemEmpty(req *http.Request) (*http.Response, error) {
	if d.srv.GetArrayItemEmpty == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetArrayItemEmpty not implemented")}
	}
	respr, errRespr := d.srv.GetArrayItemEmpty(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetArrayItemNull(req *http.Request) (*http.Response, error) {
	if d.srv.GetArrayItemNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetArrayItemNull not implemented")}
	}
	respr, errRespr := d.srv.GetArrayItemNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetArrayNull(req *http.Request) (*http.Response, error) {
	if d.srv.GetArrayNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetArrayNull not implemented")}
	}
	respr, errRespr := d.srv.GetArrayNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetArrayValid(req *http.Request) (*http.Response, error) {
	if d.srv.GetArrayValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetArrayValid not implemented")}
	}
	respr, errRespr := d.srv.GetArrayValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetBase64URL(req *http.Request) (*http.Response, error) {
	if d.srv.GetBase64URL == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetBase64URL not implemented")}
	}
	respr, errRespr := d.srv.GetBase64URL(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetBooleanInvalidNull(req *http.Request) (*http.Response, error) {
	if d.srv.GetBooleanInvalidNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetBooleanInvalidNull not implemented")}
	}
	respr, errRespr := d.srv.GetBooleanInvalidNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetBooleanInvalidString(req *http.Request) (*http.Response, error) {
	if d.srv.GetBooleanInvalidString == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetBooleanInvalidString not implemented")}
	}
	respr, errRespr := d.srv.GetBooleanInvalidString(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetBooleanTfft(req *http.Request) (*http.Response, error) {
	if d.srv.GetBooleanTfft == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetBooleanTfft not implemented")}
	}
	respr, errRespr := d.srv.GetBooleanTfft(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetByteInvalidNull(req *http.Request) (*http.Response, error) {
	if d.srv.GetByteInvalidNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetByteInvalidNull not implemented")}
	}
	respr, errRespr := d.srv.GetByteInvalidNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetByteValid(req *http.Request) (*http.Response, error) {
	if d.srv.GetByteValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetByteValid not implemented")}
	}
	respr, errRespr := d.srv.GetByteValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetComplexEmpty(req *http.Request) (*http.Response, error) {
	if d.srv.GetComplexEmpty == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetComplexEmpty not implemented")}
	}
	respr, errRespr := d.srv.GetComplexEmpty(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetComplexItemEmpty(req *http.Request) (*http.Response, error) {
	if d.srv.GetComplexItemEmpty == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetComplexItemEmpty not implemented")}
	}
	respr, errRespr := d.srv.GetComplexItemEmpty(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetComplexItemNull(req *http.Request) (*http.Response, error) {
	if d.srv.GetComplexItemNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetComplexItemNull not implemented")}
	}
	respr, errRespr := d.srv.GetComplexItemNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetComplexNull(req *http.Request) (*http.Response, error) {
	if d.srv.GetComplexNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetComplexNull not implemented")}
	}
	respr, errRespr := d.srv.GetComplexNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetComplexValid(req *http.Request) (*http.Response, error) {
	if d.srv.GetComplexValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetComplexValid not implemented")}
	}
	respr, errRespr := d.srv.GetComplexValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetDateInvalidChars(req *http.Request) (*http.Response, error) {
	if d.srv.GetDateInvalidChars == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDateInvalidChars not implemented")}
	}
	respr, errRespr := d.srv.GetDateInvalidChars(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetDateInvalidNull(req *http.Request) (*http.Response, error) {
	if d.srv.GetDateInvalidNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDateInvalidNull not implemented")}
	}
	respr, errRespr := d.srv.GetDateInvalidNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetDateTimeInvalidChars(req *http.Request) (*http.Response, error) {
	if d.srv.GetDateTimeInvalidChars == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDateTimeInvalidChars not implemented")}
	}
	respr, errRespr := d.srv.GetDateTimeInvalidChars(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetDateTimeInvalidNull(req *http.Request) (*http.Response, error) {
	if d.srv.GetDateTimeInvalidNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDateTimeInvalidNull not implemented")}
	}
	respr, errRespr := d.srv.GetDateTimeInvalidNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetDateTimeRFC1123Valid(req *http.Request) (*http.Response, error) {
	if d.srv.GetDateTimeRFC1123Valid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDateTimeRFC1123Valid not implemented")}
	}
	respr, errRespr := d.srv.GetDateTimeRFC1123Valid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetDateTimeValid(req *http.Request) (*http.Response, error) {
	if d.srv.GetDateTimeValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDateTimeValid not implemented")}
	}
	respr, errRespr := d.srv.GetDateTimeValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetDateValid(req *http.Request) (*http.Response, error) {
	if d.srv.GetDateValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDateValid not implemented")}
	}
	respr, errRespr := d.srv.GetDateValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetDictionaryEmpty(req *http.Request) (*http.Response, error) {
	if d.srv.GetDictionaryEmpty == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDictionaryEmpty not implemented")}
	}
	respr, errRespr := d.srv.GetDictionaryEmpty(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetDictionaryItemEmpty(req *http.Request) (*http.Response, error) {
	if d.srv.GetDictionaryItemEmpty == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDictionaryItemEmpty not implemented")}
	}
	respr, errRespr := d.srv.GetDictionaryItemEmpty(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetDictionaryItemNull(req *http.Request) (*http.Response, error) {
	if d.srv.GetDictionaryItemNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDictionaryItemNull not implemented")}
	}
	respr, errRespr := d.srv.GetDictionaryItemNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetDictionaryNull(req *http.Request) (*http.Response, error) {
	if d.srv.GetDictionaryNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDictionaryNull not implemented")}
	}
	respr, errRespr := d.srv.GetDictionaryNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetDictionaryValid(req *http.Request) (*http.Response, error) {
	if d.srv.GetDictionaryValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDictionaryValid not implemented")}
	}
	respr, errRespr := d.srv.GetDictionaryValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetDoubleInvalidNull(req *http.Request) (*http.Response, error) {
	if d.srv.GetDoubleInvalidNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDoubleInvalidNull not implemented")}
	}
	respr, errRespr := d.srv.GetDoubleInvalidNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetDoubleInvalidString(req *http.Request) (*http.Response, error) {
	if d.srv.GetDoubleInvalidString == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDoubleInvalidString not implemented")}
	}
	respr, errRespr := d.srv.GetDoubleInvalidString(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetDoubleValid(req *http.Request) (*http.Response, error) {
	if d.srv.GetDoubleValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDoubleValid not implemented")}
	}
	respr, errRespr := d.srv.GetDoubleValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetDurationValid(req *http.Request) (*http.Response, error) {
	if d.srv.GetDurationValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDurationValid not implemented")}
	}
	respr, errRespr := d.srv.GetDurationValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetEmpty(req *http.Request) (*http.Response, error) {
	if d.srv.GetEmpty == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetEmpty not implemented")}
	}
	respr, errRespr := d.srv.GetEmpty(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetEmptyStringKey(req *http.Request) (*http.Response, error) {
	if d.srv.GetEmptyStringKey == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetEmptyStringKey not implemented")}
	}
	respr, errRespr := d.srv.GetEmptyStringKey(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetFloatInvalidNull(req *http.Request) (*http.Response, error) {
	if d.srv.GetFloatInvalidNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetFloatInvalidNull not implemented")}
	}
	respr, errRespr := d.srv.GetFloatInvalidNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetFloatInvalidString(req *http.Request) (*http.Response, error) {
	if d.srv.GetFloatInvalidString == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetFloatInvalidString not implemented")}
	}
	respr, errRespr := d.srv.GetFloatInvalidString(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetFloatValid(req *http.Request) (*http.Response, error) {
	if d.srv.GetFloatValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetFloatValid not implemented")}
	}
	respr, errRespr := d.srv.GetFloatValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetIntInvalidNull(req *http.Request) (*http.Response, error) {
	if d.srv.GetIntInvalidNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetIntInvalidNull not implemented")}
	}
	respr, errRespr := d.srv.GetIntInvalidNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetIntInvalidString(req *http.Request) (*http.Response, error) {
	if d.srv.GetIntInvalidString == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetIntInvalidString not implemented")}
	}
	respr, errRespr := d.srv.GetIntInvalidString(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetIntegerValid(req *http.Request) (*http.Response, error) {
	if d.srv.GetIntegerValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetIntegerValid not implemented")}
	}
	respr, errRespr := d.srv.GetIntegerValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetInvalid(req *http.Request) (*http.Response, error) {
	if d.srv.GetInvalid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetInvalid not implemented")}
	}
	respr, errRespr := d.srv.GetInvalid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetLongInvalidNull(req *http.Request) (*http.Response, error) {
	if d.srv.GetLongInvalidNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetLongInvalidNull not implemented")}
	}
	respr, errRespr := d.srv.GetLongInvalidNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetLongInvalidString(req *http.Request) (*http.Response, error) {
	if d.srv.GetLongInvalidString == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetLongInvalidString not implemented")}
	}
	respr, errRespr := d.srv.GetLongInvalidString(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetLongValid(req *http.Request) (*http.Response, error) {
	if d.srv.GetLongValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetLongValid not implemented")}
	}
	respr, errRespr := d.srv.GetLongValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetNull(req *http.Request) (*http.Response, error) {
	if d.srv.GetNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetNull not implemented")}
	}
	respr, errRespr := d.srv.GetNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetNullKey(req *http.Request) (*http.Response, error) {
	if d.srv.GetNullKey == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetNullKey not implemented")}
	}
	respr, errRespr := d.srv.GetNullKey(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetNullValue(req *http.Request) (*http.Response, error) {
	if d.srv.GetNullValue == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetNullValue not implemented")}
	}
	respr, errRespr := d.srv.GetNullValue(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetStringValid(req *http.Request) (*http.Response, error) {
	if d.srv.GetStringValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetStringValid not implemented")}
	}
	respr, errRespr := d.srv.GetStringValid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetStringWithInvalid(req *http.Request) (*http.Response, error) {
	if d.srv.GetStringWithInvalid == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetStringWithInvalid not implemented")}
	}
	respr, errRespr := d.srv.GetStringWithInvalid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchGetStringWithNull(req *http.Request) (*http.Response, error) {
	if d.srv.GetStringWithNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetStringWithNull not implemented")}
	}
	respr, errRespr := d.srv.GetStringWithNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchPutArrayValid(req *http.Request) (*http.Response, error) {
	if d.srv.PutArrayValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutArrayValid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[map[string][]*string](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.PutArrayValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchPutBooleanTfft(req *http.Request) (*http.Response, error) {
	if d.srv.PutBooleanTfft == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutBooleanTfft not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[map[string]*bool](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.PutBooleanTfft(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchPutByteValid(req *http.Request) (*http.Response, error) {
	if d.srv.PutByteValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutByteValid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[map[string][]byte](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.PutByteValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchPutComplexValid(req *http.Request) (*http.Response, error) {
	if d.srv.PutComplexValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutComplexValid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[map[string]*dictionarygroup.Widget](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.PutComplexValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchPutDateTimeRFC1123Valid(req *http.Request) (*http.Response, error) {
	if d.srv.PutDateTimeRFC1123Valid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutDateTimeRFC1123Valid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[map[string]*time.Time](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.PutDateTimeRFC1123Valid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchPutDateTimeValid(req *http.Request) (*http.Response, error) {
	if d.srv.PutDateTimeValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutDateTimeValid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[map[string]*time.Time](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.PutDateTimeValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchPutDateValid(req *http.Request) (*http.Response, error) {
	if d.srv.PutDateValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutDateValid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[map[string]*time.Time](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.PutDateValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchPutDictionaryValid(req *http.Request) (*http.Response, error) {
	if d.srv.PutDictionaryValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutDictionaryValid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[map[string]map[string]*string](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.PutDictionaryValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchPutDoubleValid(req *http.Request) (*http.Response, error) {
	if d.srv.PutDoubleValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutDoubleValid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[map[string]*float64](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.PutDoubleValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchPutDurationValid(req *http.Request) (*http.Response, error) {
	if d.srv.PutDurationValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutDurationValid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[map[string]*string](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.PutDurationValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchPutEmpty(req *http.Request) (*http.Response, error) {
	if d.srv.PutEmpty == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutEmpty not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[map[string]*string](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.PutEmpty(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchPutFloatValid(req *http.Request) (*http.Response, error) {
	if d.srv.PutFloatValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutFloatValid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[map[string]*float32](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.PutFloatValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchPutIntegerValid(req *http.Request) (*http.Response, error) {
	if d.srv.PutIntegerValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutIntegerValid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[map[string]*int32](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.PutIntegerValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchPutLongValid(req *http.Request) (*http.Response, error) {
	if d.srv.PutLongValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutLongValid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[map[string]*int64](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.PutLongValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DictionaryServerTransport) dispatchPutStringValid(req *http.Request) (*http.Response, error) {
	if d.srv.PutStringValid == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutStringValid not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[map[string]*string](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.PutStringValid(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
