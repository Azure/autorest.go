//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	"generatortests/complexmodelgroup"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"regexp"
)

// ComplexModelServer is a fake server for instances of the complexmodelgroup.ComplexModelClient type.
type ComplexModelServer struct {
	// Create is the fake for method ComplexModelClient.Create
	// HTTP status codes to indicate success: http.StatusOK
	Create func(ctx context.Context, subscriptionID string, resourceGroupName string, bodyParameter complexmodelgroup.CatalogDictionaryOfArray, options *complexmodelgroup.ComplexModelClientCreateOptions) (resp azfake.Responder[complexmodelgroup.ComplexModelClientCreateResponse], errResp azfake.ErrorResponder)

	// List is the fake for method ComplexModelClient.List
	// HTTP status codes to indicate success: http.StatusOK
	List func(ctx context.Context, resourceGroupName string, options *complexmodelgroup.ComplexModelClientListOptions) (resp azfake.Responder[complexmodelgroup.ComplexModelClientListResponse], errResp azfake.ErrorResponder)

	// Update is the fake for method ComplexModelClient.Update
	// HTTP status codes to indicate success: http.StatusOK
	Update func(ctx context.Context, subscriptionID string, resourceGroupName string, bodyParameter complexmodelgroup.CatalogArrayOfDictionary, options *complexmodelgroup.ComplexModelClientUpdateOptions) (resp azfake.Responder[complexmodelgroup.ComplexModelClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewComplexModelServerTransport creates a new instance of ComplexModelServerTransport with the provided implementation.
// The returned ComplexModelServerTransport instance is connected to an instance of complexmodelgroup.ComplexModelClient by way of the
// undefined.Transporter field.
func NewComplexModelServerTransport(srv *ComplexModelServer) *ComplexModelServerTransport {
	return &ComplexModelServerTransport{srv: srv}
}

// ComplexModelServerTransport connects instances of complexmodelgroup.ComplexModelClient to instances of ComplexModelServer.
// Don't use this type directly, use NewComplexModelServerTransport instead.
type ComplexModelServerTransport struct {
	srv *ComplexModelServer
}

// Do implements the policy.Transporter interface for ComplexModelServerTransport.
func (c *ComplexModelServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "ComplexModelClient.Create":
		resp, err = c.dispatchCreate(req)
	case "ComplexModelClient.List":
		resp, err = c.dispatchList(req)
	case "ComplexModelClient.Update":
		resp, err = c.dispatchUpdate(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (c *ComplexModelServerTransport) dispatchCreate(req *http.Request) (*http.Response, error) {
	if c.srv.Create == nil {
		return nil, &nonRetriableError{errors.New("method Create not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourcegroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/Microsoft.Cache/Redis"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[complexmodelgroup.CatalogDictionaryOfArray](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.Create(req.Context(), matches[regex.SubexpIndex("subscriptionId")], matches[regex.SubexpIndex("resourceGroupName")], body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).CatalogDictionary, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *ComplexModelServerTransport) dispatchList(req *http.Request) (*http.Response, error) {
	if c.srv.List == nil {
		return nil, &nonRetriableError{errors.New("method List not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourcegroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/Microsoft.Cache/Redis"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	respr, errRespr := c.srv.List(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).CatalogArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *ComplexModelServerTransport) dispatchUpdate(req *http.Request) (*http.Response, error) {
	if c.srv.Update == nil {
		return nil, &nonRetriableError{errors.New("method Update not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourcegroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/Microsoft.Cache/Redis"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[complexmodelgroup.CatalogArrayOfDictionary](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.Update(req.Context(), matches[regex.SubexpIndex("subscriptionId")], matches[regex.SubexpIndex("resourceGroupName")], body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).CatalogArray, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
