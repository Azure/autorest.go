// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	"generatortests/additionalpropsgroup"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// PetsServer is a fake server for instances of the additionalpropsgroup.PetsClient type.
type PetsServer struct {
	// CreateAPInProperties is the fake for method PetsClient.CreateAPInProperties
	// HTTP status codes to indicate success: http.StatusOK
	CreateAPInProperties func(ctx context.Context, createParameters additionalpropsgroup.PetAPInProperties, options *additionalpropsgroup.PetsClientCreateAPInPropertiesOptions) (resp azfake.Responder[additionalpropsgroup.PetsClientCreateAPInPropertiesResponse], errResp azfake.ErrorResponder)

	// CreateAPInPropertiesWithAPString is the fake for method PetsClient.CreateAPInPropertiesWithAPString
	// HTTP status codes to indicate success: http.StatusOK
	CreateAPInPropertiesWithAPString func(ctx context.Context, createParameters additionalpropsgroup.PetAPInPropertiesWithAPString, options *additionalpropsgroup.PetsClientCreateAPInPropertiesWithAPStringOptions) (resp azfake.Responder[additionalpropsgroup.PetsClientCreateAPInPropertiesWithAPStringResponse], errResp azfake.ErrorResponder)

	// CreateAPObject is the fake for method PetsClient.CreateAPObject
	// HTTP status codes to indicate success: http.StatusOK
	CreateAPObject func(ctx context.Context, createParameters additionalpropsgroup.PetAPObject, options *additionalpropsgroup.PetsClientCreateAPObjectOptions) (resp azfake.Responder[additionalpropsgroup.PetsClientCreateAPObjectResponse], errResp azfake.ErrorResponder)

	// CreateAPString is the fake for method PetsClient.CreateAPString
	// HTTP status codes to indicate success: http.StatusOK
	CreateAPString func(ctx context.Context, createParameters additionalpropsgroup.PetAPString, options *additionalpropsgroup.PetsClientCreateAPStringOptions) (resp azfake.Responder[additionalpropsgroup.PetsClientCreateAPStringResponse], errResp azfake.ErrorResponder)

	// CreateAPTrue is the fake for method PetsClient.CreateAPTrue
	// HTTP status codes to indicate success: http.StatusOK
	CreateAPTrue func(ctx context.Context, createParameters additionalpropsgroup.PetAPTrue, options *additionalpropsgroup.PetsClientCreateAPTrueOptions) (resp azfake.Responder[additionalpropsgroup.PetsClientCreateAPTrueResponse], errResp azfake.ErrorResponder)

	// CreateCatAPTrue is the fake for method PetsClient.CreateCatAPTrue
	// HTTP status codes to indicate success: http.StatusOK
	CreateCatAPTrue func(ctx context.Context, createParameters additionalpropsgroup.CatAPTrue, options *additionalpropsgroup.PetsClientCreateCatAPTrueOptions) (resp azfake.Responder[additionalpropsgroup.PetsClientCreateCatAPTrueResponse], errResp azfake.ErrorResponder)
}

// NewPetsServerTransport creates a new instance of PetsServerTransport with the provided implementation.
// The returned PetsServerTransport instance is connected to an instance of additionalpropsgroup.PetsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewPetsServerTransport(srv *PetsServer) *PetsServerTransport {
	return &PetsServerTransport{srv: srv}
}

// PetsServerTransport connects instances of additionalpropsgroup.PetsClient to instances of PetsServer.
// Don't use this type directly, use NewPetsServerTransport instead.
type PetsServerTransport struct {
	srv *PetsServer
}

// Do implements the policy.Transporter interface for PetsServerTransport.
func (p *PetsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "PetsClient.CreateAPInProperties":
		resp, err = p.dispatchCreateAPInProperties(req)
	case "PetsClient.CreateAPInPropertiesWithAPString":
		resp, err = p.dispatchCreateAPInPropertiesWithAPString(req)
	case "PetsClient.CreateAPObject":
		resp, err = p.dispatchCreateAPObject(req)
	case "PetsClient.CreateAPString":
		resp, err = p.dispatchCreateAPString(req)
	case "PetsClient.CreateAPTrue":
		resp, err = p.dispatchCreateAPTrue(req)
	case "PetsClient.CreateCatAPTrue":
		resp, err = p.dispatchCreateCatAPTrue(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (p *PetsServerTransport) dispatchCreateAPInProperties(req *http.Request) (*http.Response, error) {
	if p.srv.CreateAPInProperties == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateAPInProperties not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[additionalpropsgroup.PetAPInProperties](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.CreateAPInProperties(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).PetAPInProperties, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PetsServerTransport) dispatchCreateAPInPropertiesWithAPString(req *http.Request) (*http.Response, error) {
	if p.srv.CreateAPInPropertiesWithAPString == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateAPInPropertiesWithAPString not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[additionalpropsgroup.PetAPInPropertiesWithAPString](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.CreateAPInPropertiesWithAPString(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).PetAPInPropertiesWithAPString, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PetsServerTransport) dispatchCreateAPObject(req *http.Request) (*http.Response, error) {
	if p.srv.CreateAPObject == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateAPObject not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[additionalpropsgroup.PetAPObject](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.CreateAPObject(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).PetAPObject, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PetsServerTransport) dispatchCreateAPString(req *http.Request) (*http.Response, error) {
	if p.srv.CreateAPString == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateAPString not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[additionalpropsgroup.PetAPString](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.CreateAPString(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).PetAPString, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PetsServerTransport) dispatchCreateAPTrue(req *http.Request) (*http.Response, error) {
	if p.srv.CreateAPTrue == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateAPTrue not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[additionalpropsgroup.PetAPTrue](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.CreateAPTrue(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).PetAPTrue, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PetsServerTransport) dispatchCreateCatAPTrue(req *http.Request) (*http.Response, error) {
	if p.srv.CreateCatAPTrue == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateCatAPTrue not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[additionalpropsgroup.CatAPTrue](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.CreateCatAPTrue(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).CatAPTrue, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
