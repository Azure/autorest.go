//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package numbergroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// NumberClient contains the methods for the Number group.
// Don't use this type directly, use a constructor function instead.
type NumberClient struct {
	internal *azcore.Client
}

// GetBigDecimal - Get big decimal value 2.5976931e+101
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - NumberClientGetBigDecimalOptions contains the optional parameters for the NumberClient.GetBigDecimal method.
func (client *NumberClient) GetBigDecimal(ctx context.Context, options *NumberClientGetBigDecimalOptions) (NumberClientGetBigDecimalResponse, error) {
	var err error
	const operationName = "NumberClient.GetBigDecimal"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getBigDecimalCreateRequest(ctx, options)
	if err != nil {
		return NumberClientGetBigDecimalResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NumberClientGetBigDecimalResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NumberClientGetBigDecimalResponse{}, err
	}
	resp, err := client.getBigDecimalHandleResponse(httpResp)
	return resp, err
}

// getBigDecimalCreateRequest creates the GetBigDecimal request.
func (client *NumberClient) getBigDecimalCreateRequest(ctx context.Context, options *NumberClientGetBigDecimalOptions) (*policy.Request, error) {
	urlPath := "/number/big/decimal/2.5976931e+101"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getBigDecimalHandleResponse handles the GetBigDecimal response.
func (client *NumberClient) getBigDecimalHandleResponse(resp *http.Response) (NumberClientGetBigDecimalResponse, error) {
	result := NumberClientGetBigDecimalResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return NumberClientGetBigDecimalResponse{}, err
	}
	return result, nil
}

// GetBigDecimalNegativeDecimal - Get big decimal value -99999999.99
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - NumberClientGetBigDecimalNegativeDecimalOptions contains the optional parameters for the NumberClient.GetBigDecimalNegativeDecimal
//     method.
func (client *NumberClient) GetBigDecimalNegativeDecimal(ctx context.Context, options *NumberClientGetBigDecimalNegativeDecimalOptions) (NumberClientGetBigDecimalNegativeDecimalResponse, error) {
	var err error
	const operationName = "NumberClient.GetBigDecimalNegativeDecimal"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getBigDecimalNegativeDecimalCreateRequest(ctx, options)
	if err != nil {
		return NumberClientGetBigDecimalNegativeDecimalResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NumberClientGetBigDecimalNegativeDecimalResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NumberClientGetBigDecimalNegativeDecimalResponse{}, err
	}
	resp, err := client.getBigDecimalNegativeDecimalHandleResponse(httpResp)
	return resp, err
}

// getBigDecimalNegativeDecimalCreateRequest creates the GetBigDecimalNegativeDecimal request.
func (client *NumberClient) getBigDecimalNegativeDecimalCreateRequest(ctx context.Context, options *NumberClientGetBigDecimalNegativeDecimalOptions) (*policy.Request, error) {
	urlPath := "/number/big/decimal/-99999999.99"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getBigDecimalNegativeDecimalHandleResponse handles the GetBigDecimalNegativeDecimal response.
func (client *NumberClient) getBigDecimalNegativeDecimalHandleResponse(resp *http.Response) (NumberClientGetBigDecimalNegativeDecimalResponse, error) {
	result := NumberClientGetBigDecimalNegativeDecimalResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return NumberClientGetBigDecimalNegativeDecimalResponse{}, err
	}
	return result, nil
}

// GetBigDecimalPositiveDecimal - Get big decimal value 99999999.99
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - NumberClientGetBigDecimalPositiveDecimalOptions contains the optional parameters for the NumberClient.GetBigDecimalPositiveDecimal
//     method.
func (client *NumberClient) GetBigDecimalPositiveDecimal(ctx context.Context, options *NumberClientGetBigDecimalPositiveDecimalOptions) (NumberClientGetBigDecimalPositiveDecimalResponse, error) {
	var err error
	const operationName = "NumberClient.GetBigDecimalPositiveDecimal"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getBigDecimalPositiveDecimalCreateRequest(ctx, options)
	if err != nil {
		return NumberClientGetBigDecimalPositiveDecimalResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NumberClientGetBigDecimalPositiveDecimalResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NumberClientGetBigDecimalPositiveDecimalResponse{}, err
	}
	resp, err := client.getBigDecimalPositiveDecimalHandleResponse(httpResp)
	return resp, err
}

// getBigDecimalPositiveDecimalCreateRequest creates the GetBigDecimalPositiveDecimal request.
func (client *NumberClient) getBigDecimalPositiveDecimalCreateRequest(ctx context.Context, options *NumberClientGetBigDecimalPositiveDecimalOptions) (*policy.Request, error) {
	urlPath := "/number/big/decimal/99999999.99"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getBigDecimalPositiveDecimalHandleResponse handles the GetBigDecimalPositiveDecimal response.
func (client *NumberClient) getBigDecimalPositiveDecimalHandleResponse(resp *http.Response) (NumberClientGetBigDecimalPositiveDecimalResponse, error) {
	result := NumberClientGetBigDecimalPositiveDecimalResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return NumberClientGetBigDecimalPositiveDecimalResponse{}, err
	}
	return result, nil
}

// GetBigDouble - Get big double value 2.5976931e+101
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - NumberClientGetBigDoubleOptions contains the optional parameters for the NumberClient.GetBigDouble method.
func (client *NumberClient) GetBigDouble(ctx context.Context, options *NumberClientGetBigDoubleOptions) (NumberClientGetBigDoubleResponse, error) {
	var err error
	const operationName = "NumberClient.GetBigDouble"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getBigDoubleCreateRequest(ctx, options)
	if err != nil {
		return NumberClientGetBigDoubleResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NumberClientGetBigDoubleResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NumberClientGetBigDoubleResponse{}, err
	}
	resp, err := client.getBigDoubleHandleResponse(httpResp)
	return resp, err
}

// getBigDoubleCreateRequest creates the GetBigDouble request.
func (client *NumberClient) getBigDoubleCreateRequest(ctx context.Context, options *NumberClientGetBigDoubleOptions) (*policy.Request, error) {
	urlPath := "/number/big/double/2.5976931e+101"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getBigDoubleHandleResponse handles the GetBigDouble response.
func (client *NumberClient) getBigDoubleHandleResponse(resp *http.Response) (NumberClientGetBigDoubleResponse, error) {
	result := NumberClientGetBigDoubleResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return NumberClientGetBigDoubleResponse{}, err
	}
	return result, nil
}

// GetBigDoubleNegativeDecimal - Get big double value -99999999.99
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - NumberClientGetBigDoubleNegativeDecimalOptions contains the optional parameters for the NumberClient.GetBigDoubleNegativeDecimal
//     method.
func (client *NumberClient) GetBigDoubleNegativeDecimal(ctx context.Context, options *NumberClientGetBigDoubleNegativeDecimalOptions) (NumberClientGetBigDoubleNegativeDecimalResponse, error) {
	var err error
	const operationName = "NumberClient.GetBigDoubleNegativeDecimal"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getBigDoubleNegativeDecimalCreateRequest(ctx, options)
	if err != nil {
		return NumberClientGetBigDoubleNegativeDecimalResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NumberClientGetBigDoubleNegativeDecimalResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NumberClientGetBigDoubleNegativeDecimalResponse{}, err
	}
	resp, err := client.getBigDoubleNegativeDecimalHandleResponse(httpResp)
	return resp, err
}

// getBigDoubleNegativeDecimalCreateRequest creates the GetBigDoubleNegativeDecimal request.
func (client *NumberClient) getBigDoubleNegativeDecimalCreateRequest(ctx context.Context, options *NumberClientGetBigDoubleNegativeDecimalOptions) (*policy.Request, error) {
	urlPath := "/number/big/double/-99999999.99"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getBigDoubleNegativeDecimalHandleResponse handles the GetBigDoubleNegativeDecimal response.
func (client *NumberClient) getBigDoubleNegativeDecimalHandleResponse(resp *http.Response) (NumberClientGetBigDoubleNegativeDecimalResponse, error) {
	result := NumberClientGetBigDoubleNegativeDecimalResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return NumberClientGetBigDoubleNegativeDecimalResponse{}, err
	}
	return result, nil
}

// GetBigDoublePositiveDecimal - Get big double value 99999999.99
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - NumberClientGetBigDoublePositiveDecimalOptions contains the optional parameters for the NumberClient.GetBigDoublePositiveDecimal
//     method.
func (client *NumberClient) GetBigDoublePositiveDecimal(ctx context.Context, options *NumberClientGetBigDoublePositiveDecimalOptions) (NumberClientGetBigDoublePositiveDecimalResponse, error) {
	var err error
	const operationName = "NumberClient.GetBigDoublePositiveDecimal"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getBigDoublePositiveDecimalCreateRequest(ctx, options)
	if err != nil {
		return NumberClientGetBigDoublePositiveDecimalResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NumberClientGetBigDoublePositiveDecimalResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NumberClientGetBigDoublePositiveDecimalResponse{}, err
	}
	resp, err := client.getBigDoublePositiveDecimalHandleResponse(httpResp)
	return resp, err
}

// getBigDoublePositiveDecimalCreateRequest creates the GetBigDoublePositiveDecimal request.
func (client *NumberClient) getBigDoublePositiveDecimalCreateRequest(ctx context.Context, options *NumberClientGetBigDoublePositiveDecimalOptions) (*policy.Request, error) {
	urlPath := "/number/big/double/99999999.99"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getBigDoublePositiveDecimalHandleResponse handles the GetBigDoublePositiveDecimal response.
func (client *NumberClient) getBigDoublePositiveDecimalHandleResponse(resp *http.Response) (NumberClientGetBigDoublePositiveDecimalResponse, error) {
	result := NumberClientGetBigDoublePositiveDecimalResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return NumberClientGetBigDoublePositiveDecimalResponse{}, err
	}
	return result, nil
}

// GetBigFloat - Get big float value 3.402823e+20
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - NumberClientGetBigFloatOptions contains the optional parameters for the NumberClient.GetBigFloat method.
func (client *NumberClient) GetBigFloat(ctx context.Context, options *NumberClientGetBigFloatOptions) (NumberClientGetBigFloatResponse, error) {
	var err error
	const operationName = "NumberClient.GetBigFloat"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getBigFloatCreateRequest(ctx, options)
	if err != nil {
		return NumberClientGetBigFloatResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NumberClientGetBigFloatResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NumberClientGetBigFloatResponse{}, err
	}
	resp, err := client.getBigFloatHandleResponse(httpResp)
	return resp, err
}

// getBigFloatCreateRequest creates the GetBigFloat request.
func (client *NumberClient) getBigFloatCreateRequest(ctx context.Context, options *NumberClientGetBigFloatOptions) (*policy.Request, error) {
	urlPath := "/number/big/float/3.402823e+20"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getBigFloatHandleResponse handles the GetBigFloat response.
func (client *NumberClient) getBigFloatHandleResponse(resp *http.Response) (NumberClientGetBigFloatResponse, error) {
	result := NumberClientGetBigFloatResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return NumberClientGetBigFloatResponse{}, err
	}
	return result, nil
}

// GetInvalidDecimal - Get invalid decimal Number value
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - NumberClientGetInvalidDecimalOptions contains the optional parameters for the NumberClient.GetInvalidDecimal
//     method.
func (client *NumberClient) GetInvalidDecimal(ctx context.Context, options *NumberClientGetInvalidDecimalOptions) (NumberClientGetInvalidDecimalResponse, error) {
	var err error
	const operationName = "NumberClient.GetInvalidDecimal"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getInvalidDecimalCreateRequest(ctx, options)
	if err != nil {
		return NumberClientGetInvalidDecimalResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NumberClientGetInvalidDecimalResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NumberClientGetInvalidDecimalResponse{}, err
	}
	resp, err := client.getInvalidDecimalHandleResponse(httpResp)
	return resp, err
}

// getInvalidDecimalCreateRequest creates the GetInvalidDecimal request.
func (client *NumberClient) getInvalidDecimalCreateRequest(ctx context.Context, options *NumberClientGetInvalidDecimalOptions) (*policy.Request, error) {
	urlPath := "/number/invaliddecimal"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getInvalidDecimalHandleResponse handles the GetInvalidDecimal response.
func (client *NumberClient) getInvalidDecimalHandleResponse(resp *http.Response) (NumberClientGetInvalidDecimalResponse, error) {
	result := NumberClientGetInvalidDecimalResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return NumberClientGetInvalidDecimalResponse{}, err
	}
	return result, nil
}

// GetInvalidDouble - Get invalid double Number value
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - NumberClientGetInvalidDoubleOptions contains the optional parameters for the NumberClient.GetInvalidDouble method.
func (client *NumberClient) GetInvalidDouble(ctx context.Context, options *NumberClientGetInvalidDoubleOptions) (NumberClientGetInvalidDoubleResponse, error) {
	var err error
	const operationName = "NumberClient.GetInvalidDouble"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getInvalidDoubleCreateRequest(ctx, options)
	if err != nil {
		return NumberClientGetInvalidDoubleResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NumberClientGetInvalidDoubleResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NumberClientGetInvalidDoubleResponse{}, err
	}
	resp, err := client.getInvalidDoubleHandleResponse(httpResp)
	return resp, err
}

// getInvalidDoubleCreateRequest creates the GetInvalidDouble request.
func (client *NumberClient) getInvalidDoubleCreateRequest(ctx context.Context, options *NumberClientGetInvalidDoubleOptions) (*policy.Request, error) {
	urlPath := "/number/invaliddouble"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getInvalidDoubleHandleResponse handles the GetInvalidDouble response.
func (client *NumberClient) getInvalidDoubleHandleResponse(resp *http.Response) (NumberClientGetInvalidDoubleResponse, error) {
	result := NumberClientGetInvalidDoubleResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return NumberClientGetInvalidDoubleResponse{}, err
	}
	return result, nil
}

// GetInvalidFloat - Get invalid float Number value
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - NumberClientGetInvalidFloatOptions contains the optional parameters for the NumberClient.GetInvalidFloat method.
func (client *NumberClient) GetInvalidFloat(ctx context.Context, options *NumberClientGetInvalidFloatOptions) (NumberClientGetInvalidFloatResponse, error) {
	var err error
	const operationName = "NumberClient.GetInvalidFloat"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getInvalidFloatCreateRequest(ctx, options)
	if err != nil {
		return NumberClientGetInvalidFloatResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NumberClientGetInvalidFloatResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NumberClientGetInvalidFloatResponse{}, err
	}
	resp, err := client.getInvalidFloatHandleResponse(httpResp)
	return resp, err
}

// getInvalidFloatCreateRequest creates the GetInvalidFloat request.
func (client *NumberClient) getInvalidFloatCreateRequest(ctx context.Context, options *NumberClientGetInvalidFloatOptions) (*policy.Request, error) {
	urlPath := "/number/invalidfloat"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getInvalidFloatHandleResponse handles the GetInvalidFloat response.
func (client *NumberClient) getInvalidFloatHandleResponse(resp *http.Response) (NumberClientGetInvalidFloatResponse, error) {
	result := NumberClientGetInvalidFloatResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return NumberClientGetInvalidFloatResponse{}, err
	}
	return result, nil
}

// GetNull - Get null Number value
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - NumberClientGetNullOptions contains the optional parameters for the NumberClient.GetNull method.
func (client *NumberClient) GetNull(ctx context.Context, options *NumberClientGetNullOptions) (NumberClientGetNullResponse, error) {
	var err error
	const operationName = "NumberClient.GetNull"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getNullCreateRequest(ctx, options)
	if err != nil {
		return NumberClientGetNullResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NumberClientGetNullResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NumberClientGetNullResponse{}, err
	}
	resp, err := client.getNullHandleResponse(httpResp)
	return resp, err
}

// getNullCreateRequest creates the GetNull request.
func (client *NumberClient) getNullCreateRequest(ctx context.Context, options *NumberClientGetNullOptions) (*policy.Request, error) {
	urlPath := "/number/null"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getNullHandleResponse handles the GetNull response.
func (client *NumberClient) getNullHandleResponse(resp *http.Response) (NumberClientGetNullResponse, error) {
	result := NumberClientGetNullResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return NumberClientGetNullResponse{}, err
	}
	return result, nil
}

// GetSmallDecimal - Get small decimal value 2.5976931e-101
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - NumberClientGetSmallDecimalOptions contains the optional parameters for the NumberClient.GetSmallDecimal method.
func (client *NumberClient) GetSmallDecimal(ctx context.Context, options *NumberClientGetSmallDecimalOptions) (NumberClientGetSmallDecimalResponse, error) {
	var err error
	const operationName = "NumberClient.GetSmallDecimal"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getSmallDecimalCreateRequest(ctx, options)
	if err != nil {
		return NumberClientGetSmallDecimalResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NumberClientGetSmallDecimalResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NumberClientGetSmallDecimalResponse{}, err
	}
	resp, err := client.getSmallDecimalHandleResponse(httpResp)
	return resp, err
}

// getSmallDecimalCreateRequest creates the GetSmallDecimal request.
func (client *NumberClient) getSmallDecimalCreateRequest(ctx context.Context, options *NumberClientGetSmallDecimalOptions) (*policy.Request, error) {
	urlPath := "/number/small/decimal/2.5976931e-101"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getSmallDecimalHandleResponse handles the GetSmallDecimal response.
func (client *NumberClient) getSmallDecimalHandleResponse(resp *http.Response) (NumberClientGetSmallDecimalResponse, error) {
	result := NumberClientGetSmallDecimalResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return NumberClientGetSmallDecimalResponse{}, err
	}
	return result, nil
}

// GetSmallDouble - Get big double value 2.5976931e-101
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - NumberClientGetSmallDoubleOptions contains the optional parameters for the NumberClient.GetSmallDouble method.
func (client *NumberClient) GetSmallDouble(ctx context.Context, options *NumberClientGetSmallDoubleOptions) (NumberClientGetSmallDoubleResponse, error) {
	var err error
	const operationName = "NumberClient.GetSmallDouble"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getSmallDoubleCreateRequest(ctx, options)
	if err != nil {
		return NumberClientGetSmallDoubleResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NumberClientGetSmallDoubleResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NumberClientGetSmallDoubleResponse{}, err
	}
	resp, err := client.getSmallDoubleHandleResponse(httpResp)
	return resp, err
}

// getSmallDoubleCreateRequest creates the GetSmallDouble request.
func (client *NumberClient) getSmallDoubleCreateRequest(ctx context.Context, options *NumberClientGetSmallDoubleOptions) (*policy.Request, error) {
	urlPath := "/number/small/double/2.5976931e-101"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getSmallDoubleHandleResponse handles the GetSmallDouble response.
func (client *NumberClient) getSmallDoubleHandleResponse(resp *http.Response) (NumberClientGetSmallDoubleResponse, error) {
	result := NumberClientGetSmallDoubleResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return NumberClientGetSmallDoubleResponse{}, err
	}
	return result, nil
}

// GetSmallFloat - Get big double value 3.402823e-20
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - NumberClientGetSmallFloatOptions contains the optional parameters for the NumberClient.GetSmallFloat method.
func (client *NumberClient) GetSmallFloat(ctx context.Context, options *NumberClientGetSmallFloatOptions) (NumberClientGetSmallFloatResponse, error) {
	var err error
	const operationName = "NumberClient.GetSmallFloat"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getSmallFloatCreateRequest(ctx, options)
	if err != nil {
		return NumberClientGetSmallFloatResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NumberClientGetSmallFloatResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NumberClientGetSmallFloatResponse{}, err
	}
	resp, err := client.getSmallFloatHandleResponse(httpResp)
	return resp, err
}

// getSmallFloatCreateRequest creates the GetSmallFloat request.
func (client *NumberClient) getSmallFloatCreateRequest(ctx context.Context, options *NumberClientGetSmallFloatOptions) (*policy.Request, error) {
	urlPath := "/number/small/float/3.402823e-20"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getSmallFloatHandleResponse handles the GetSmallFloat response.
func (client *NumberClient) getSmallFloatHandleResponse(resp *http.Response) (NumberClientGetSmallFloatResponse, error) {
	result := NumberClientGetSmallFloatResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return NumberClientGetSmallFloatResponse{}, err
	}
	return result, nil
}

// PutBigDecimal - Put big decimal value 2.5976931e+101
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - numberBody - number body
//   - options - NumberClientPutBigDecimalOptions contains the optional parameters for the NumberClient.PutBigDecimal method.
func (client *NumberClient) PutBigDecimal(ctx context.Context, numberBody float64, options *NumberClientPutBigDecimalOptions) (NumberClientPutBigDecimalResponse, error) {
	var err error
	const operationName = "NumberClient.PutBigDecimal"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putBigDecimalCreateRequest(ctx, numberBody, options)
	if err != nil {
		return NumberClientPutBigDecimalResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NumberClientPutBigDecimalResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NumberClientPutBigDecimalResponse{}, err
	}
	return NumberClientPutBigDecimalResponse{}, nil
}

// putBigDecimalCreateRequest creates the PutBigDecimal request.
func (client *NumberClient) putBigDecimalCreateRequest(ctx context.Context, numberBody float64, options *NumberClientPutBigDecimalOptions) (*policy.Request, error) {
	urlPath := "/number/big/decimal/2.5976931e+101"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, numberBody); err != nil {
		return nil, err
	}
	return req, nil
}

// PutBigDecimalNegativeDecimal - Put big decimal value -99999999.99
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - NumberClientPutBigDecimalNegativeDecimalOptions contains the optional parameters for the NumberClient.PutBigDecimalNegativeDecimal
//     method.
func (client *NumberClient) PutBigDecimalNegativeDecimal(ctx context.Context, options *NumberClientPutBigDecimalNegativeDecimalOptions) (NumberClientPutBigDecimalNegativeDecimalResponse, error) {
	var err error
	const operationName = "NumberClient.PutBigDecimalNegativeDecimal"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putBigDecimalNegativeDecimalCreateRequest(ctx, options)
	if err != nil {
		return NumberClientPutBigDecimalNegativeDecimalResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NumberClientPutBigDecimalNegativeDecimalResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NumberClientPutBigDecimalNegativeDecimalResponse{}, err
	}
	return NumberClientPutBigDecimalNegativeDecimalResponse{}, nil
}

// putBigDecimalNegativeDecimalCreateRequest creates the PutBigDecimalNegativeDecimal request.
func (client *NumberClient) putBigDecimalNegativeDecimalCreateRequest(ctx context.Context, options *NumberClientPutBigDecimalNegativeDecimalOptions) (*policy.Request, error) {
	urlPath := "/number/big/decimal/-99999999.99"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, float64(-99999999.99)); err != nil {
		return nil, err
	}
	return req, nil
}

// PutBigDecimalPositiveDecimal - Put big decimal value 99999999.99
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - NumberClientPutBigDecimalPositiveDecimalOptions contains the optional parameters for the NumberClient.PutBigDecimalPositiveDecimal
//     method.
func (client *NumberClient) PutBigDecimalPositiveDecimal(ctx context.Context, options *NumberClientPutBigDecimalPositiveDecimalOptions) (NumberClientPutBigDecimalPositiveDecimalResponse, error) {
	var err error
	const operationName = "NumberClient.PutBigDecimalPositiveDecimal"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putBigDecimalPositiveDecimalCreateRequest(ctx, options)
	if err != nil {
		return NumberClientPutBigDecimalPositiveDecimalResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NumberClientPutBigDecimalPositiveDecimalResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NumberClientPutBigDecimalPositiveDecimalResponse{}, err
	}
	return NumberClientPutBigDecimalPositiveDecimalResponse{}, nil
}

// putBigDecimalPositiveDecimalCreateRequest creates the PutBigDecimalPositiveDecimal request.
func (client *NumberClient) putBigDecimalPositiveDecimalCreateRequest(ctx context.Context, options *NumberClientPutBigDecimalPositiveDecimalOptions) (*policy.Request, error) {
	urlPath := "/number/big/decimal/99999999.99"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, float64(99999999.99)); err != nil {
		return nil, err
	}
	return req, nil
}

// PutBigDouble - Put big double value 2.5976931e+101
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - numberBody - number body
//   - options - NumberClientPutBigDoubleOptions contains the optional parameters for the NumberClient.PutBigDouble method.
func (client *NumberClient) PutBigDouble(ctx context.Context, numberBody float64, options *NumberClientPutBigDoubleOptions) (NumberClientPutBigDoubleResponse, error) {
	var err error
	const operationName = "NumberClient.PutBigDouble"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putBigDoubleCreateRequest(ctx, numberBody, options)
	if err != nil {
		return NumberClientPutBigDoubleResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NumberClientPutBigDoubleResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NumberClientPutBigDoubleResponse{}, err
	}
	return NumberClientPutBigDoubleResponse{}, nil
}

// putBigDoubleCreateRequest creates the PutBigDouble request.
func (client *NumberClient) putBigDoubleCreateRequest(ctx context.Context, numberBody float64, options *NumberClientPutBigDoubleOptions) (*policy.Request, error) {
	urlPath := "/number/big/double/2.5976931e+101"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, numberBody); err != nil {
		return nil, err
	}
	return req, nil
}

// PutBigDoubleNegativeDecimal - Put big double value -99999999.99
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - NumberClientPutBigDoubleNegativeDecimalOptions contains the optional parameters for the NumberClient.PutBigDoubleNegativeDecimal
//     method.
func (client *NumberClient) PutBigDoubleNegativeDecimal(ctx context.Context, options *NumberClientPutBigDoubleNegativeDecimalOptions) (NumberClientPutBigDoubleNegativeDecimalResponse, error) {
	var err error
	const operationName = "NumberClient.PutBigDoubleNegativeDecimal"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putBigDoubleNegativeDecimalCreateRequest(ctx, options)
	if err != nil {
		return NumberClientPutBigDoubleNegativeDecimalResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NumberClientPutBigDoubleNegativeDecimalResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NumberClientPutBigDoubleNegativeDecimalResponse{}, err
	}
	return NumberClientPutBigDoubleNegativeDecimalResponse{}, nil
}

// putBigDoubleNegativeDecimalCreateRequest creates the PutBigDoubleNegativeDecimal request.
func (client *NumberClient) putBigDoubleNegativeDecimalCreateRequest(ctx context.Context, options *NumberClientPutBigDoubleNegativeDecimalOptions) (*policy.Request, error) {
	urlPath := "/number/big/double/-99999999.99"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, float64(-99999999.99)); err != nil {
		return nil, err
	}
	return req, nil
}

// PutBigDoublePositiveDecimal - Put big double value 99999999.99
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - NumberClientPutBigDoublePositiveDecimalOptions contains the optional parameters for the NumberClient.PutBigDoublePositiveDecimal
//     method.
func (client *NumberClient) PutBigDoublePositiveDecimal(ctx context.Context, options *NumberClientPutBigDoublePositiveDecimalOptions) (NumberClientPutBigDoublePositiveDecimalResponse, error) {
	var err error
	const operationName = "NumberClient.PutBigDoublePositiveDecimal"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putBigDoublePositiveDecimalCreateRequest(ctx, options)
	if err != nil {
		return NumberClientPutBigDoublePositiveDecimalResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NumberClientPutBigDoublePositiveDecimalResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NumberClientPutBigDoublePositiveDecimalResponse{}, err
	}
	return NumberClientPutBigDoublePositiveDecimalResponse{}, nil
}

// putBigDoublePositiveDecimalCreateRequest creates the PutBigDoublePositiveDecimal request.
func (client *NumberClient) putBigDoublePositiveDecimalCreateRequest(ctx context.Context, options *NumberClientPutBigDoublePositiveDecimalOptions) (*policy.Request, error) {
	urlPath := "/number/big/double/99999999.99"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, float64(99999999.99)); err != nil {
		return nil, err
	}
	return req, nil
}

// PutBigFloat - Put big float value 3.402823e+20
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - numberBody - number body
//   - options - NumberClientPutBigFloatOptions contains the optional parameters for the NumberClient.PutBigFloat method.
func (client *NumberClient) PutBigFloat(ctx context.Context, numberBody float32, options *NumberClientPutBigFloatOptions) (NumberClientPutBigFloatResponse, error) {
	var err error
	const operationName = "NumberClient.PutBigFloat"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putBigFloatCreateRequest(ctx, numberBody, options)
	if err != nil {
		return NumberClientPutBigFloatResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NumberClientPutBigFloatResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NumberClientPutBigFloatResponse{}, err
	}
	return NumberClientPutBigFloatResponse{}, nil
}

// putBigFloatCreateRequest creates the PutBigFloat request.
func (client *NumberClient) putBigFloatCreateRequest(ctx context.Context, numberBody float32, options *NumberClientPutBigFloatOptions) (*policy.Request, error) {
	urlPath := "/number/big/float/3.402823e+20"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, numberBody); err != nil {
		return nil, err
	}
	return req, nil
}

// PutSmallDecimal - Put small decimal value 2.5976931e-101
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - numberBody - number body
//   - options - NumberClientPutSmallDecimalOptions contains the optional parameters for the NumberClient.PutSmallDecimal method.
func (client *NumberClient) PutSmallDecimal(ctx context.Context, numberBody float64, options *NumberClientPutSmallDecimalOptions) (NumberClientPutSmallDecimalResponse, error) {
	var err error
	const operationName = "NumberClient.PutSmallDecimal"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putSmallDecimalCreateRequest(ctx, numberBody, options)
	if err != nil {
		return NumberClientPutSmallDecimalResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NumberClientPutSmallDecimalResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NumberClientPutSmallDecimalResponse{}, err
	}
	return NumberClientPutSmallDecimalResponse{}, nil
}

// putSmallDecimalCreateRequest creates the PutSmallDecimal request.
func (client *NumberClient) putSmallDecimalCreateRequest(ctx context.Context, numberBody float64, options *NumberClientPutSmallDecimalOptions) (*policy.Request, error) {
	urlPath := "/number/small/decimal/2.5976931e-101"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, numberBody); err != nil {
		return nil, err
	}
	return req, nil
}

// PutSmallDouble - Put small double value 2.5976931e-101
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - numberBody - number body
//   - options - NumberClientPutSmallDoubleOptions contains the optional parameters for the NumberClient.PutSmallDouble method.
func (client *NumberClient) PutSmallDouble(ctx context.Context, numberBody float64, options *NumberClientPutSmallDoubleOptions) (NumberClientPutSmallDoubleResponse, error) {
	var err error
	const operationName = "NumberClient.PutSmallDouble"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putSmallDoubleCreateRequest(ctx, numberBody, options)
	if err != nil {
		return NumberClientPutSmallDoubleResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NumberClientPutSmallDoubleResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NumberClientPutSmallDoubleResponse{}, err
	}
	return NumberClientPutSmallDoubleResponse{}, nil
}

// putSmallDoubleCreateRequest creates the PutSmallDouble request.
func (client *NumberClient) putSmallDoubleCreateRequest(ctx context.Context, numberBody float64, options *NumberClientPutSmallDoubleOptions) (*policy.Request, error) {
	urlPath := "/number/small/double/2.5976931e-101"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, numberBody); err != nil {
		return nil, err
	}
	return req, nil
}

// PutSmallFloat - Put small float value 3.402823e-20
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - numberBody - number body
//   - options - NumberClientPutSmallFloatOptions contains the optional parameters for the NumberClient.PutSmallFloat method.
func (client *NumberClient) PutSmallFloat(ctx context.Context, numberBody float32, options *NumberClientPutSmallFloatOptions) (NumberClientPutSmallFloatResponse, error) {
	var err error
	const operationName = "NumberClient.PutSmallFloat"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putSmallFloatCreateRequest(ctx, numberBody, options)
	if err != nil {
		return NumberClientPutSmallFloatResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NumberClientPutSmallFloatResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NumberClientPutSmallFloatResponse{}, err
	}
	return NumberClientPutSmallFloatResponse{}, nil
}

// putSmallFloatCreateRequest creates the PutSmallFloat request.
func (client *NumberClient) putSmallFloatCreateRequest(ctx context.Context, numberBody float32, options *NumberClientPutSmallFloatOptions) (*policy.Request, error) {
	urlPath := "/number/small/float/3.402823e-20"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, numberBody); err != nil {
		return nil, err
	}
	return req, nil
}
