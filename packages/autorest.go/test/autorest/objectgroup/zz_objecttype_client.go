//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package objectgroup

import (
	"bytes"
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/streaming"
	"net/http"
)

// ObjectTypeClient contains the methods for the ObjectTypeClient group.
// Don't use this type directly, use a constructor function instead.
type ObjectTypeClient struct {
	internal *azcore.Client
}

// Get - Basic get that returns an object. Returns object { 'message': 'An object was successfully returned' }
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - ObjectTypeClientGetOptions contains the optional parameters for the ObjectTypeClient.Get method.
func (client *ObjectTypeClient) Get(ctx context.Context, options *ObjectTypeClientGetOptions) (ObjectTypeClientGetResponse, error) {
	var err error
	const operationName = "ObjectTypeClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, options)
	if err != nil {
		return ObjectTypeClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ObjectTypeClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ObjectTypeClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *ObjectTypeClient) getCreateRequest(ctx context.Context, options *ObjectTypeClientGetOptions) (*policy.Request, error) {
	urlPath := "/objectType/get"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ObjectTypeClient) getHandleResponse(resp *http.Response) (ObjectTypeClientGetResponse, error) {
	result := ObjectTypeClientGetResponse{}
	body, err := runtime.Payload(resp)
	if err != nil {
		return ObjectTypeClientGetResponse{}, err
	}
	result.RawJSON = body
	return result, nil
}

// Put - Basic put that puts an object. Pass in {'foo': 'bar'} to get a 200 and anything else to get an object error.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - putObject - Pass in {'foo': 'bar'} for a 200, anything else for an object error
//   - options - ObjectTypeClientPutOptions contains the optional parameters for the ObjectTypeClient.Put method.
func (client *ObjectTypeClient) Put(ctx context.Context, putObject []byte, options *ObjectTypeClientPutOptions) (ObjectTypeClientPutResponse, error) {
	var err error
	const operationName = "ObjectTypeClient.Put"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putCreateRequest(ctx, putObject, options)
	if err != nil {
		return ObjectTypeClientPutResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ObjectTypeClientPutResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ObjectTypeClientPutResponse{}, err
	}
	return ObjectTypeClientPutResponse{}, nil
}

// putCreateRequest creates the Put request.
func (client *ObjectTypeClient) putCreateRequest(ctx context.Context, putObject []byte, options *ObjectTypeClientPutOptions) (*policy.Request, error) {
	urlPath := "/objectType/put"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := req.SetBody(streaming.NopCloser(bytes.NewReader(putObject)), "application/json"); err != nil {
		return nil, err
	}
	return req, nil
}
