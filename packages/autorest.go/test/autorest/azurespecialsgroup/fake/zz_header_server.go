//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	"generatortests/azurespecialsgroup"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// HeaderServer is a fake server for instances of the azurespecialsgroup.HeaderClient type.
type HeaderServer struct {
	// CustomNamedRequestID is the fake for method HeaderClient.CustomNamedRequestID
	// HTTP status codes to indicate success: http.StatusOK
	CustomNamedRequestID func(ctx context.Context, fooClientRequestID string, options *azurespecialsgroup.HeaderClientCustomNamedRequestIDOptions) (resp azfake.Responder[azurespecialsgroup.HeaderClientCustomNamedRequestIDResponse], errResp azfake.ErrorResponder)

	// CustomNamedRequestIDHead is the fake for method HeaderClient.CustomNamedRequestIDHead
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNotFound
	CustomNamedRequestIDHead func(ctx context.Context, fooClientRequestID string, options *azurespecialsgroup.HeaderClientCustomNamedRequestIDHeadOptions) (resp azfake.Responder[azurespecialsgroup.HeaderClientCustomNamedRequestIDHeadResponse], errResp azfake.ErrorResponder)

	// CustomNamedRequestIDParamGrouping is the fake for method HeaderClient.CustomNamedRequestIDParamGrouping
	// HTTP status codes to indicate success: http.StatusOK
	CustomNamedRequestIDParamGrouping func(ctx context.Context, headerClientCustomNamedRequestIDParamGroupingParameters azurespecialsgroup.HeaderClientCustomNamedRequestIDParamGroupingParameters, options *azurespecialsgroup.HeaderClientCustomNamedRequestIDParamGroupingOptions) (resp azfake.Responder[azurespecialsgroup.HeaderClientCustomNamedRequestIDParamGroupingResponse], errResp azfake.ErrorResponder)
}

// NewHeaderServerTransport creates a new instance of HeaderServerTransport with the provided implementation.
// The returned HeaderServerTransport instance is connected to an instance of azurespecialsgroup.HeaderClient by way of the
// undefined.Transporter field.
func NewHeaderServerTransport(srv *HeaderServer) *HeaderServerTransport {
	return &HeaderServerTransport{srv: srv}
}

// HeaderServerTransport connects instances of azurespecialsgroup.HeaderClient to instances of HeaderServer.
// Don't use this type directly, use NewHeaderServerTransport instead.
type HeaderServerTransport struct {
	srv *HeaderServer
}

// Do implements the policy.Transporter interface for HeaderServerTransport.
func (h *HeaderServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "HeaderClient.CustomNamedRequestID":
		resp, err = h.dispatchCustomNamedRequestID(req)
	case "HeaderClient.CustomNamedRequestIDHead":
		resp, err = h.dispatchCustomNamedRequestIDHead(req)
	case "HeaderClient.CustomNamedRequestIDParamGrouping":
		resp, err = h.dispatchCustomNamedRequestIDParamGrouping(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (h *HeaderServerTransport) dispatchCustomNamedRequestID(req *http.Request) (*http.Response, error) {
	if h.srv.CustomNamedRequestID == nil {
		return nil, &nonRetriableError{errors.New("method CustomNamedRequestID not implemented")}
	}
	respr, errRespr := h.srv.CustomNamedRequestID(req.Context(), getHeaderValue(req.Header, "foo-client-request-id"), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).FooRequestID; val != nil {
		resp.Header.Set("foo-request-id", *val)
	}
	return resp, nil
}

func (h *HeaderServerTransport) dispatchCustomNamedRequestIDHead(req *http.Request) (*http.Response, error) {
	if h.srv.CustomNamedRequestIDHead == nil {
		return nil, &nonRetriableError{errors.New("method CustomNamedRequestIDHead not implemented")}
	}
	respr, errRespr := h.srv.CustomNamedRequestIDHead(req.Context(), getHeaderValue(req.Header, "foo-client-request-id"), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNotFound}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNotFound", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).FooRequestID; val != nil {
		resp.Header.Set("foo-request-id", *val)
	}
	return resp, nil
}

func (h *HeaderServerTransport) dispatchCustomNamedRequestIDParamGrouping(req *http.Request) (*http.Response, error) {
	if h.srv.CustomNamedRequestIDParamGrouping == nil {
		return nil, &nonRetriableError{errors.New("method CustomNamedRequestIDParamGrouping not implemented")}
	}
	fooClientRequestIDParam := getHeaderValue(req.Header, "foo-client-request-id")
	headerClientCustomNamedRequestIDParamGroupingParameters := azurespecialsgroup.HeaderClientCustomNamedRequestIDParamGroupingParameters{
		FooClientRequestID: fooClientRequestIDParam,
	}
	respr, errRespr := h.srv.CustomNamedRequestIDParamGrouping(req.Context(), headerClientCustomNamedRequestIDParamGroupingParameters, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).FooRequestID; val != nil {
		resp.Header.Set("foo-request-id", *val)
	}
	return resp, nil
}
