// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package TestInternalNaming

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// InternalTestOperationsClient contains the methods for the InternalTestOperations group.
// Don't use this type directly, use [InternalClient.NewInternalTestOperationsClient] instead.
type InternalTestOperationsClient struct {
	internal *azcore.Client
	endpoint string
}

// getLowercase -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - internalTestOperationsClientgetLowercaseOptions contains the optional parameters for the InternalTestOperationsClient.getLowercase
//     method.
func (client *InternalTestOperationsClient) getLowercase(ctx context.Context, options *internalTestOperationsClientgetLowercaseOptions) (internalTestOperationsClientgetLowercaseResponse, error) {
	var err error
	req, err := client.getLowercaseCreateRequest(ctx, options)
	if err != nil {
		return internalTestOperationsClientgetLowercaseResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return internalTestOperationsClientgetLowercaseResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return internalTestOperationsClientgetLowercaseResponse{}, err
	}
	resp, err := client.getLowercaseHandleResponse(httpResp)
	return resp, err
}

// getLowercaseCreateRequest creates the getLowercase request.
func (client *InternalTestOperationsClient) getLowercaseCreateRequest(ctx context.Context, _ *internalTestOperationsClientgetLowercaseOptions) (*policy.Request, error) {
	urlPath := "/test/lowercase"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getLowercaseHandleResponse handles the getLowercase response.
func (client *InternalTestOperationsClient) getLowercaseHandleResponse(resp *http.Response) (internalTestOperationsClientgetLowercaseResponse, error) {
	result := internalTestOperationsClientgetLowercaseResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.internalACSMessageChannelEventError); err != nil {
		return internalTestOperationsClientgetLowercaseResponse{}, err
	}
	return result, nil
}

// getNormal -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - internalTestOperationsClientgetNormalOptions contains the optional parameters for the InternalTestOperationsClient.getNormal
//     method.
func (client *InternalTestOperationsClient) getNormal(ctx context.Context, options *internalTestOperationsClientgetNormalOptions) (internalTestOperationsClientgetNormalResponse, error) {
	var err error
	req, err := client.getNormalCreateRequest(ctx, options)
	if err != nil {
		return internalTestOperationsClientgetNormalResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return internalTestOperationsClientgetNormalResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return internalTestOperationsClientgetNormalResponse{}, err
	}
	resp, err := client.getNormalHandleResponse(httpResp)
	return resp, err
}

// getNormalCreateRequest creates the getNormal request.
func (client *InternalTestOperationsClient) getNormalCreateRequest(ctx context.Context, _ *internalTestOperationsClientgetNormalOptions) (*policy.Request, error) {
	urlPath := "/test/normal"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getNormalHandleResponse handles the getNormal response.
func (client *InternalTestOperationsClient) getNormalHandleResponse(resp *http.Response) (internalTestOperationsClientgetNormalResponse, error) {
	result := internalTestOperationsClientgetNormalResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.normalInternalModel); err != nil {
		return internalTestOperationsClientgetNormalResponse{}, err
	}
	return result, nil
}

// getUppercase -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - internalTestOperationsClientgetUppercaseOptions contains the optional parameters for the InternalTestOperationsClient.getUppercase
//     method.
func (client *InternalTestOperationsClient) getUppercase(ctx context.Context, options *internalTestOperationsClientgetUppercaseOptions) (internalTestOperationsClientgetUppercaseResponse, error) {
	var err error
	req, err := client.getUppercaseCreateRequest(ctx, options)
	if err != nil {
		return internalTestOperationsClientgetUppercaseResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return internalTestOperationsClientgetUppercaseResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return internalTestOperationsClientgetUppercaseResponse{}, err
	}
	resp, err := client.getUppercaseHandleResponse(httpResp)
	return resp, err
}

// getUppercaseCreateRequest creates the getUppercase request.
func (client *InternalTestOperationsClient) getUppercaseCreateRequest(ctx context.Context, _ *internalTestOperationsClientgetUppercaseOptions) (*policy.Request, error) {
	urlPath := "/test/uppercase"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getUppercaseHandleResponse handles the getUppercase response.
func (client *InternalTestOperationsClient) getUppercaseHandleResponse(resp *http.Response) (internalTestOperationsClientgetUppercaseResponse, error) {
	result := internalTestOperationsClientgetUppercaseResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.uppercaseInternalModel); err != nil {
		return internalTestOperationsClientgetUppercaseResponse{}, err
	}
	return result, nil
}
