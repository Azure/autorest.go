// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// EnumConflictServer is a fake server for instances of the enumconflictgroup.EnumConflictClient type.
type EnumConflictServer struct {
	// EnumConflictFirstOperationsServer contains the fakes for client EnumConflictFirstOperationsClient
	EnumConflictFirstOperationsServer EnumConflictFirstOperationsServer

	// EnumConflictSecondOperationsServer contains the fakes for client EnumConflictSecondOperationsClient
	EnumConflictSecondOperationsServer EnumConflictSecondOperationsServer
}

// NewEnumConflictServerTransport creates a new instance of EnumConflictServerTransport with the provided implementation.
// The returned EnumConflictServerTransport instance is connected to an instance of enumconflictgroup.EnumConflictClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewEnumConflictServerTransport(srv *EnumConflictServer) *EnumConflictServerTransport {
	return &EnumConflictServerTransport{srv: srv}
}

// EnumConflictServerTransport connects instances of enumconflictgroup.EnumConflictClient to instances of EnumConflictServer.
// Don't use this type directly, use NewEnumConflictServerTransport instead.
type EnumConflictServerTransport struct {
	srv                                  *EnumConflictServer
	trMu                                 sync.Mutex
	trEnumConflictFirstOperationsServer  *EnumConflictFirstOperationsServerTransport
	trEnumConflictSecondOperationsServer *EnumConflictSecondOperationsServerTransport
}

// Do implements the policy.Transporter interface for EnumConflictServerTransport.
func (e *EnumConflictServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return e.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (e *EnumConflictServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "EnumConflictFirstOperationsClient":
		initServer(&e.trMu, &e.trEnumConflictFirstOperationsServer, func() *EnumConflictFirstOperationsServerTransport {
			return NewEnumConflictFirstOperationsServerTransport(&e.srv.EnumConflictFirstOperationsServer)
		})
		resp, err = e.trEnumConflictFirstOperationsServer.Do(req)
	case "EnumConflictSecondOperationsClient":
		initServer(&e.trMu, &e.trEnumConflictSecondOperationsServer, func() *EnumConflictSecondOperationsServerTransport {
			return NewEnumConflictSecondOperationsServerTransport(&e.srv.EnumConflictSecondOperationsServer)
		})
		resp, err = e.trEnumConflictSecondOperationsServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}

// set this to conditionally intercept incoming requests to EnumConflictServerTransport
var enumConflictServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
