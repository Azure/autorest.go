// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ClientNamespaceServer is a fake server for instances of the clientnamespacegroup.ClientNamespaceClient type.
type ClientNamespaceServer struct {
	// ClientNamespaceFirstServer contains the fakes for client ClientNamespaceFirstClient
	ClientNamespaceFirstServer ClientNamespaceFirstServer

	// ClientNamespaceSecondServer contains the fakes for client ClientNamespaceSecondClient
	ClientNamespaceSecondServer ClientNamespaceSecondServer
}

// NewClientNamespaceServerTransport creates a new instance of ClientNamespaceServerTransport with the provided implementation.
// The returned ClientNamespaceServerTransport instance is connected to an instance of clientnamespacegroup.ClientNamespaceClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewClientNamespaceServerTransport(srv *ClientNamespaceServer) *ClientNamespaceServerTransport {
	return &ClientNamespaceServerTransport{srv: srv}
}

// ClientNamespaceServerTransport connects instances of clientnamespacegroup.ClientNamespaceClient to instances of ClientNamespaceServer.
// Don't use this type directly, use NewClientNamespaceServerTransport instead.
type ClientNamespaceServerTransport struct {
	srv                           *ClientNamespaceServer
	trMu                          sync.Mutex
	trClientNamespaceFirstServer  *ClientNamespaceFirstServerTransport
	trClientNamespaceSecondServer *ClientNamespaceSecondServerTransport
}

// Do implements the policy.Transporter interface for ClientNamespaceServerTransport.
func (c *ClientNamespaceServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return c.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (c *ClientNamespaceServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "ClientNamespaceFirstClient":
		initServer(&c.trMu, &c.trClientNamespaceFirstServer, func() *ClientNamespaceFirstServerTransport {
			return NewClientNamespaceFirstServerTransport(&c.srv.ClientNamespaceFirstServer)
		})
		resp, err = c.trClientNamespaceFirstServer.Do(req)
	case "ClientNamespaceSecondClient":
		initServer(&c.trMu, &c.trClientNamespaceSecondServer, func() *ClientNamespaceSecondServerTransport {
			return NewClientNamespaceSecondServerTransport(&c.srv.ClientNamespaceSecondServer)
		})
		resp, err = c.trClientNamespaceSecondServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}

// set this to conditionally intercept incoming requests to ClientNamespaceServerTransport
var clientNamespaceServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
