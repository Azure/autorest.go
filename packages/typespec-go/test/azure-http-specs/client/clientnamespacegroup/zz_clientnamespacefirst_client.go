// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package clientnamespacegroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// ClientNamespaceFirstClient contains the methods for the ClientNamespaceFirst group.
// Don't use this type directly, use [ClientNamespaceClient.NewClientNamespaceFirstClient] instead.
type ClientNamespaceFirstClient struct {
	internal *azcore.Client
}

// GetFirst -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - ClientNamespaceFirstClientGetFirstOptions contains the optional parameters for the ClientNamespaceFirstClient.GetFirst
//     method.
func (client *ClientNamespaceFirstClient) GetFirst(ctx context.Context, options *ClientNamespaceFirstClientGetFirstOptions) (ClientNamespaceFirstClientGetFirstResponse, error) {
	var err error
	const operationName = "ClientNamespaceFirstClient.GetFirst"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getFirstCreateRequest(ctx, options)
	if err != nil {
		return ClientNamespaceFirstClientGetFirstResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ClientNamespaceFirstClientGetFirstResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ClientNamespaceFirstClientGetFirstResponse{}, err
	}
	resp, err := client.getFirstHandleResponse(httpResp)
	return resp, err
}

// getFirstCreateRequest creates the GetFirst request.
func (client *ClientNamespaceFirstClient) getFirstCreateRequest(ctx context.Context, _ *ClientNamespaceFirstClientGetFirstOptions) (*policy.Request, error) {
	urlPath := "/client/client-namespace/first"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getFirstHandleResponse handles the GetFirst response.
func (client *ClientNamespaceFirstClient) getFirstHandleResponse(resp *http.Response) (ClientNamespaceFirstClientGetFirstResponse, error) {
	result := ClientNamespaceFirstClientGetFirstResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.FirstClientResult); err != nil {
		return ClientNamespaceFirstClientGetFirstResponse{}, err
	}
	return result, nil
}
