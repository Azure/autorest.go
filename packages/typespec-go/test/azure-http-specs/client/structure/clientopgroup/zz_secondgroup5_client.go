// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package clientopgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// SecondGroup5Client contains the methods for the SecondGroup5 group.
// Don't use this type directly, use [SecondClient.NewSecondGroup5Client] instead.
type SecondGroup5Client struct {
	internal *azcore.Client
	endpoint string
}

// Six -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SecondGroup5ClientSixOptions contains the optional parameters for the SecondGroup5Client.Six method.
func (client *SecondGroup5Client) Six(ctx context.Context, options *SecondGroup5ClientSixOptions) (SecondGroup5ClientSixResponse, error) {
	var err error
	const operationName = "SecondGroup5Client.Six"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.sixCreateRequest(ctx, options)
	if err != nil {
		return SecondGroup5ClientSixResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SecondGroup5ClientSixResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SecondGroup5ClientSixResponse{}, err
	}
	return SecondGroup5ClientSixResponse{}, nil
}

// sixCreateRequest creates the Six request.
func (client *SecondGroup5Client) sixCreateRequest(ctx context.Context, _ *SecondGroup5ClientSixOptions) (*policy.Request, error) {
	urlPath := "/six"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}
