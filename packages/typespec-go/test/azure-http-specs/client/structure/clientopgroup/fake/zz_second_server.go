// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"clientopgroup"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// SecondServer is a fake server for instances of the clientopgroup.SecondClient type.
type SecondServer struct {
	// SecondGroup5Server contains the fakes for client SecondGroup5Client
	SecondGroup5Server SecondGroup5Server

	// Five is the fake for method SecondClient.Five
	// HTTP status codes to indicate success: http.StatusNoContent
	Five func(ctx context.Context, options *clientopgroup.SecondClientFiveOptions) (resp azfake.Responder[clientopgroup.SecondClientFiveResponse], errResp azfake.ErrorResponder)
}

// NewSecondServerTransport creates a new instance of SecondServerTransport with the provided implementation.
// The returned SecondServerTransport instance is connected to an instance of clientopgroup.SecondClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSecondServerTransport(srv *SecondServer) *SecondServerTransport {
	return &SecondServerTransport{srv: srv}
}

// SecondServerTransport connects instances of clientopgroup.SecondClient to instances of SecondServer.
// Don't use this type directly, use NewSecondServerTransport instead.
type SecondServerTransport struct {
	srv                  *SecondServer
	trMu                 sync.Mutex
	trSecondGroup5Server *SecondGroup5ServerTransport
}

// Do implements the policy.Transporter interface for SecondServerTransport.
func (s *SecondServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	if client := method[:strings.Index(method, ".")]; client != "SecondClient" {
		return s.dispatchToClientFake(req, client)
	}
	return s.dispatchToMethodFake(req, method)
}

func (s *SecondServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "SecondGroup5Client":
		initServer(&s.trMu, &s.trSecondGroup5Server, func() *SecondGroup5ServerTransport {
			return NewSecondGroup5ServerTransport(&s.srv.SecondGroup5Server)
		})
		resp, err = s.trSecondGroup5Server.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}

func (s *SecondServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if secondServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = secondServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "SecondClient.Five":
				res.resp, res.err = s.dispatchFive(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (s *SecondServerTransport) dispatchFive(req *http.Request) (*http.Response, error) {
	if s.srv.Five == nil {
		return nil, &nonRetriableError{errors.New("fake for method Five not implemented")}
	}
	respr, errRespr := s.srv.Five(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to SecondServerTransport
var secondServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
