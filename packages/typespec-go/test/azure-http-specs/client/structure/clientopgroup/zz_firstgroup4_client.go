// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package clientopgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// FirstGroup4Client contains the methods for the FirstGroup4 group.
// Don't use this type directly, use [FirstClient.NewFirstGroup4Client] instead.
type FirstGroup4Client struct {
	internal *azcore.Client
	endpoint string
}

// Four -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - FirstGroup4ClientFourOptions contains the optional parameters for the FirstGroup4Client.Four method.
func (client *FirstGroup4Client) Four(ctx context.Context, options *FirstGroup4ClientFourOptions) (FirstGroup4ClientFourResponse, error) {
	var err error
	const operationName = "FirstGroup4Client.Four"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.fourCreateRequest(ctx, options)
	if err != nil {
		return FirstGroup4ClientFourResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FirstGroup4ClientFourResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return FirstGroup4ClientFourResponse{}, err
	}
	return FirstGroup4ClientFourResponse{}, nil
}

// fourCreateRequest creates the Four request.
func (client *FirstGroup4Client) fourCreateRequest(ctx context.Context, _ *FirstGroup4ClientFourOptions) (*policy.Request, error) {
	urlPath := "/four"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}
