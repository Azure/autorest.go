// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package clientopgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// FirstGroup3Client contains the methods for the FirstGroup3 group.
// Don't use this type directly, use [FirstClient.NewFirstGroup3Client] instead.
type FirstGroup3Client struct {
	internal *azcore.Client
	endpoint string
}

// Three -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - FirstGroup3ClientThreeOptions contains the optional parameters for the FirstGroup3Client.Three method.
func (client *FirstGroup3Client) Three(ctx context.Context, options *FirstGroup3ClientThreeOptions) (FirstGroup3ClientThreeResponse, error) {
	var err error
	const operationName = "FirstGroup3Client.Three"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.threeCreateRequest(ctx, options)
	if err != nil {
		return FirstGroup3ClientThreeResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FirstGroup3ClientThreeResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return FirstGroup3ClientThreeResponse{}, err
	}
	return FirstGroup3ClientThreeResponse{}, nil
}

// threeCreateRequest creates the Three request.
func (client *FirstGroup3Client) threeCreateRequest(ctx context.Context, _ *FirstGroup3ClientThreeOptions) (*policy.Request, error) {
	urlPath := "/three"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// Two -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - FirstGroup3ClientTwoOptions contains the optional parameters for the FirstGroup3Client.Two method.
func (client *FirstGroup3Client) Two(ctx context.Context, options *FirstGroup3ClientTwoOptions) (FirstGroup3ClientTwoResponse, error) {
	var err error
	const operationName = "FirstGroup3Client.Two"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.twoCreateRequest(ctx, options)
	if err != nil {
		return FirstGroup3ClientTwoResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FirstGroup3ClientTwoResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return FirstGroup3ClientTwoResponse{}, err
	}
	return FirstGroup3ClientTwoResponse{}, nil
}

// twoCreateRequest creates the Two request.
func (client *FirstGroup3Client) twoCreateRequest(ctx context.Context, _ *FirstGroup3ClientTwoOptions) (*policy.Request, error) {
	urlPath := "/two"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}
