// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package twoopgroup

import (
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"strings"
)

// TwoOperationGroupClient contains the methods for the TwoOperationGroup group.
// Don't use this type directly, use NewTwoOperationGroupClientWithNoCredential() instead.
type TwoOperationGroupClient struct {
	internal *azcore.Client
	endpoint string
}

// TwoOperationGroupClientOptions contains the optional values for creating a [TwoOperationGroupClient].
type TwoOperationGroupClientOptions struct {
	azcore.ClientOptions
}

// NewTwoOperationGroupClientWithNoCredential creates a new instance of TwoOperationGroupClient with the specified values.
//   - endpoint - Service host
//   - client - Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client.
//   - options - TwoOperationGroupClientOptions contains the optional values for creating a [TwoOperationGroupClient]
func NewTwoOperationGroupClientWithNoCredential(endpoint string, client ClientType, options *TwoOperationGroupClientOptions) (*TwoOperationGroupClient, error) {
	if options == nil {
		options = &TwoOperationGroupClientOptions{}
	}
	cl, err := azcore.NewClient(moduleName, moduleVersion, runtime.PipelineOptions{}, &options.ClientOptions)
	if err != nil {
		return nil, err
	}
	host := "client/structure/{client}"
	host = strings.ReplaceAll(host, "{client}", string(client))
	endpoint = runtime.JoinPaths(endpoint, host)
	twoOperationGroupClient := &TwoOperationGroupClient{
		endpoint: endpoint,
		internal: cl,
	}
	return twoOperationGroupClient, nil
}

// NewTwoOperationGroupGroup1Client creates a new instance of [TwoOperationGroupGroup1Client].
func (client *TwoOperationGroupClient) NewTwoOperationGroupGroup1Client() *TwoOperationGroupGroup1Client {
	return &TwoOperationGroupGroup1Client{
		internal: client.internal,
		endpoint: client.endpoint,
	}
}

// NewTwoOperationGroupGroup2Client creates a new instance of [TwoOperationGroupGroup2Client].
func (client *TwoOperationGroupClient) NewTwoOperationGroupGroup2Client() *TwoOperationGroupGroup2Client {
	return &TwoOperationGroupGroup2Client{
		internal: client.internal,
		endpoint: client.endpoint,
	}
}
