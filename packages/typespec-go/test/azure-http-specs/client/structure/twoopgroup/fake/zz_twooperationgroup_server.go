// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// TwoOperationGroupServer is a fake server for instances of the twoopgroup.TwoOperationGroupClient type.
type TwoOperationGroupServer struct {
	// TwoOperationGroupGroup1Server contains the fakes for client TwoOperationGroupGroup1Client
	TwoOperationGroupGroup1Server TwoOperationGroupGroup1Server

	// TwoOperationGroupGroup2Server contains the fakes for client TwoOperationGroupGroup2Client
	TwoOperationGroupGroup2Server TwoOperationGroupGroup2Server
}

// NewTwoOperationGroupServerTransport creates a new instance of TwoOperationGroupServerTransport with the provided implementation.
// The returned TwoOperationGroupServerTransport instance is connected to an instance of twoopgroup.TwoOperationGroupClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewTwoOperationGroupServerTransport(srv *TwoOperationGroupServer) *TwoOperationGroupServerTransport {
	return &TwoOperationGroupServerTransport{srv: srv}
}

// TwoOperationGroupServerTransport connects instances of twoopgroup.TwoOperationGroupClient to instances of TwoOperationGroupServer.
// Don't use this type directly, use NewTwoOperationGroupServerTransport instead.
type TwoOperationGroupServerTransport struct {
	srv                             *TwoOperationGroupServer
	trMu                            sync.Mutex
	trTwoOperationGroupGroup1Server *TwoOperationGroupGroup1ServerTransport
	trTwoOperationGroupGroup2Server *TwoOperationGroupGroup2ServerTransport
}

// Do implements the policy.Transporter interface for TwoOperationGroupServerTransport.
func (t *TwoOperationGroupServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return t.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (t *TwoOperationGroupServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "TwoOperationGroupGroup1Client":
		initServer(&t.trMu, &t.trTwoOperationGroupGroup1Server, func() *TwoOperationGroupGroup1ServerTransport {
			return NewTwoOperationGroupGroup1ServerTransport(&t.srv.TwoOperationGroupGroup1Server)
		})
		resp, err = t.trTwoOperationGroupGroup1Server.Do(req)
	case "TwoOperationGroupGroup2Client":
		initServer(&t.trMu, &t.trTwoOperationGroupGroup2Server, func() *TwoOperationGroupGroup2ServerTransport {
			return NewTwoOperationGroupGroup2ServerTransport(&t.srv.TwoOperationGroupGroup2Server)
		})
		resp, err = t.trTwoOperationGroupGroup2Server.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}

// set this to conditionally intercept incoming requests to TwoOperationGroupServerTransport
var twoOperationGroupServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
