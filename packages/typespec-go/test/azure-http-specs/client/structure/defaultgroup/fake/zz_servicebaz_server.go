// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServiceBazServer is a fake server for instances of the defaultgroup.ServiceBazClient type.
type ServiceBazServer struct {
	// ServiceBazFooServer contains the fakes for client ServiceBazFooClient
	ServiceBazFooServer ServiceBazFooServer
}

// NewServiceBazServerTransport creates a new instance of ServiceBazServerTransport with the provided implementation.
// The returned ServiceBazServerTransport instance is connected to an instance of defaultgroup.ServiceBazClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServiceBazServerTransport(srv *ServiceBazServer) *ServiceBazServerTransport {
	return &ServiceBazServerTransport{srv: srv}
}

// ServiceBazServerTransport connects instances of defaultgroup.ServiceBazClient to instances of ServiceBazServer.
// Don't use this type directly, use NewServiceBazServerTransport instead.
type ServiceBazServerTransport struct {
	srv                   *ServiceBazServer
	trMu                  sync.Mutex
	trServiceBazFooServer *ServiceBazFooServerTransport
}

// Do implements the policy.Transporter interface for ServiceBazServerTransport.
func (s *ServiceBazServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (s *ServiceBazServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "ServiceBazFooClient":
		initServer(&s.trMu, &s.trServiceBazFooServer, func() *ServiceBazFooServerTransport {
			return NewServiceBazFooServerTransport(&s.srv.ServiceBazFooServer)
		})
		resp, err = s.trServiceBazFooServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}

// set this to conditionally intercept incoming requests to ServiceBazServerTransport
var serviceBazServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
