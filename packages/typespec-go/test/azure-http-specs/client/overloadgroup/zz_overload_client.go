// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package overloadgroup

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// OverloadClient - Test for overload operation in .NET.
// Don't use this type directly, use NewOverloadClientWithNoCredential() instead.
type OverloadClient struct {
	internal *azcore.Client
	endpoint string
}

// OverloadClientOptions contains the optional values for creating a [OverloadClient].
type OverloadClientOptions struct {
	azcore.ClientOptions
}

// NewOverloadClientWithNoCredential creates a new instance of OverloadClient with the specified values.
//   - endpoint - Service host
//   - options - Contains optional client configuration. Pass nil to accept the default values.
func NewOverloadClientWithNoCredential(endpoint string, options *OverloadClientOptions) (*OverloadClient, error) {
	if options == nil {
		options = &OverloadClientOptions{}
	}
	cl, err := azcore.NewClient(moduleName, moduleVersion, runtime.PipelineOptions{}, &options.ClientOptions)
	if err != nil {
		return nil, err
	}
	client := &OverloadClient{
		endpoint: endpoint,
		internal: cl,
	}
	return client, nil
}

// List -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - OverloadClientListOptions contains the optional parameters for the OverloadClient.List method.
func (client *OverloadClient) List(ctx context.Context, options *OverloadClientListOptions) (OverloadClientListResponse, error) {
	var err error
	const operationName = "OverloadClient.List"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.listCreateRequest(ctx, options)
	if err != nil {
		return OverloadClientListResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return OverloadClientListResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return OverloadClientListResponse{}, err
	}
	resp, err := client.listHandleResponse(httpResp)
	return resp, err
}

// listCreateRequest creates the List request.
func (client *OverloadClient) listCreateRequest(ctx context.Context, _ *OverloadClientListOptions) (*policy.Request, error) {
	urlPath := "/client/overload/resources"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *OverloadClient) listHandleResponse(resp *http.Response) (OverloadClientListResponse, error) {
	result := OverloadClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ResourceArray); err != nil {
		return OverloadClientListResponse{}, err
	}
	return result, nil
}

// ListByScope -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - OverloadClientListByScopeOptions contains the optional parameters for the OverloadClient.ListByScope method.
func (client *OverloadClient) ListByScope(ctx context.Context, scope string, options *OverloadClientListByScopeOptions) (OverloadClientListByScopeResponse, error) {
	var err error
	const operationName = "OverloadClient.ListByScope"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.listByScopeCreateRequest(ctx, scope, options)
	if err != nil {
		return OverloadClientListByScopeResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return OverloadClientListByScopeResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return OverloadClientListByScopeResponse{}, err
	}
	resp, err := client.listByScopeHandleResponse(httpResp)
	return resp, err
}

// listByScopeCreateRequest creates the ListByScope request.
func (client *OverloadClient) listByScopeCreateRequest(ctx context.Context, scope string, _ *OverloadClientListByScopeOptions) (*policy.Request, error) {
	urlPath := "/client/overload/resources/{scope}"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", url.PathEscape(scope))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByScopeHandleResponse handles the ListByScope response.
func (client *OverloadClient) listByScopeHandleResponse(resp *http.Response) (OverloadClientListByScopeResponse, error) {
	result := OverloadClientListByScopeResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ResourceArray); err != nil {
		return OverloadClientListByScopeResponse{}, err
	}
	return result, nil
}
