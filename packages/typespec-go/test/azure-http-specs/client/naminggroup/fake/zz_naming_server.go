// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"naminggroup"
	"net/http"
	"net/url"
	"strings"
	"sync"
)

// NamingServer is a fake server for instances of the naminggroup.NamingClient type.
type NamingServer struct {
	// NamingClientModelServer contains the fakes for client NamingClientModelClient
	NamingClientModelServer NamingClientModelServer

	// NamingUnionEnumServer contains the fakes for client NamingUnionEnumClient
	NamingUnionEnumServer NamingUnionEnumServer

	// Client is the fake for method NamingClient.Client
	// HTTP status codes to indicate success: http.StatusNoContent
	Client func(ctx context.Context, body naminggroup.ClientNameModel, options *naminggroup.NamingClientClientOptions) (resp azfake.Responder[naminggroup.NamingClientClientResponse], errResp azfake.ErrorResponder)

	// ClientName is the fake for method NamingClient.ClientName
	// HTTP status codes to indicate success: http.StatusNoContent
	ClientName func(ctx context.Context, options *naminggroup.NamingClientClientNameOptions) (resp azfake.Responder[naminggroup.NamingClientClientNameResponse], errResp azfake.ErrorResponder)

	// CompatibleWithEncodedName is the fake for method NamingClient.CompatibleWithEncodedName
	// HTTP status codes to indicate success: http.StatusNoContent
	CompatibleWithEncodedName func(ctx context.Context, body naminggroup.ClientNameAndJSONEncodedNameModel, options *naminggroup.NamingClientCompatibleWithEncodedNameOptions) (resp azfake.Responder[naminggroup.NamingClientCompatibleWithEncodedNameResponse], errResp azfake.ErrorResponder)

	// Language is the fake for method NamingClient.Language
	// HTTP status codes to indicate success: http.StatusNoContent
	Language func(ctx context.Context, body naminggroup.LanguageClientNameModel, options *naminggroup.NamingClientLanguageOptions) (resp azfake.Responder[naminggroup.NamingClientLanguageResponse], errResp azfake.ErrorResponder)

	// Parameter is the fake for method NamingClient.Parameter
	// HTTP status codes to indicate success: http.StatusNoContent
	Parameter func(ctx context.Context, clientName string, options *naminggroup.NamingClientParameterOptions) (resp azfake.Responder[naminggroup.NamingClientParameterResponse], errResp azfake.ErrorResponder)

	// Request is the fake for method NamingClient.Request
	// HTTP status codes to indicate success: http.StatusNoContent
	Request func(ctx context.Context, clientName string, options *naminggroup.NamingClientRequestOptions) (resp azfake.Responder[naminggroup.NamingClientRequestResponse], errResp azfake.ErrorResponder)

	// Response is the fake for method NamingClient.Response
	// HTTP status codes to indicate success: http.StatusNoContent
	Response func(ctx context.Context, options *naminggroup.NamingClientResponseOptions) (resp azfake.Responder[naminggroup.NamingClientResponseResponse], errResp azfake.ErrorResponder)
}

// NewNamingServerTransport creates a new instance of NamingServerTransport with the provided implementation.
// The returned NamingServerTransport instance is connected to an instance of naminggroup.NamingClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewNamingServerTransport(srv *NamingServer) *NamingServerTransport {
	return &NamingServerTransport{srv: srv}
}

// NamingServerTransport connects instances of naminggroup.NamingClient to instances of NamingServer.
// Don't use this type directly, use NewNamingServerTransport instead.
type NamingServerTransport struct {
	srv                       *NamingServer
	trMu                      sync.Mutex
	trNamingClientModelServer *NamingClientModelServerTransport
	trNamingUnionEnumServer   *NamingUnionEnumServerTransport
}

// Do implements the policy.Transporter interface for NamingServerTransport.
func (n *NamingServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	if client := method[:strings.Index(method, ".")]; client != "NamingClient" {
		return n.dispatchToClientFake(req, client)
	}
	return n.dispatchToMethodFake(req, method)
}

func (n *NamingServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "NamingClientModelClient":
		initServer(&n.trMu, &n.trNamingClientModelServer, func() *NamingClientModelServerTransport {
			return NewNamingClientModelServerTransport(&n.srv.NamingClientModelServer)
		})
		resp, err = n.trNamingClientModelServer.Do(req)
	case "NamingUnionEnumClient":
		initServer(&n.trMu, &n.trNamingUnionEnumServer, func() *NamingUnionEnumServerTransport {
			return NewNamingUnionEnumServerTransport(&n.srv.NamingUnionEnumServer)
		})
		resp, err = n.trNamingUnionEnumServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}

func (n *NamingServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if namingServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = namingServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "NamingClient.Client":
				res.resp, res.err = n.dispatchClient(req)
			case "NamingClient.ClientName":
				res.resp, res.err = n.dispatchClientName(req)
			case "NamingClient.CompatibleWithEncodedName":
				res.resp, res.err = n.dispatchCompatibleWithEncodedName(req)
			case "NamingClient.Language":
				res.resp, res.err = n.dispatchLanguage(req)
			case "NamingClient.Parameter":
				res.resp, res.err = n.dispatchParameter(req)
			case "NamingClient.Request":
				res.resp, res.err = n.dispatchRequest(req)
			case "NamingClient.Response":
				res.resp, res.err = n.dispatchResponse(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (n *NamingServerTransport) dispatchClient(req *http.Request) (*http.Response, error) {
	if n.srv.Client == nil {
		return nil, &nonRetriableError{errors.New("fake for method Client not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[naminggroup.ClientNameModel](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := n.srv.Client(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (n *NamingServerTransport) dispatchClientName(req *http.Request) (*http.Response, error) {
	if n.srv.ClientName == nil {
		return nil, &nonRetriableError{errors.New("fake for method ClientName not implemented")}
	}
	respr, errRespr := n.srv.ClientName(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (n *NamingServerTransport) dispatchCompatibleWithEncodedName(req *http.Request) (*http.Response, error) {
	if n.srv.CompatibleWithEncodedName == nil {
		return nil, &nonRetriableError{errors.New("fake for method CompatibleWithEncodedName not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[naminggroup.ClientNameAndJSONEncodedNameModel](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := n.srv.CompatibleWithEncodedName(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (n *NamingServerTransport) dispatchLanguage(req *http.Request) (*http.Response, error) {
	if n.srv.Language == nil {
		return nil, &nonRetriableError{errors.New("fake for method Language not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[naminggroup.LanguageClientNameModel](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := n.srv.Language(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (n *NamingServerTransport) dispatchParameter(req *http.Request) (*http.Response, error) {
	if n.srv.Parameter == nil {
		return nil, &nonRetriableError{errors.New("fake for method Parameter not implemented")}
	}
	qp := req.URL.Query()
	clientNameParam, err := url.QueryUnescape(qp.Get("defaultName"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := n.srv.Parameter(req.Context(), clientNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (n *NamingServerTransport) dispatchRequest(req *http.Request) (*http.Response, error) {
	if n.srv.Request == nil {
		return nil, &nonRetriableError{errors.New("fake for method Request not implemented")}
	}
	respr, errRespr := n.srv.Request(req.Context(), getHeaderValue(req.Header, "default-name"), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (n *NamingServerTransport) dispatchResponse(req *http.Request) (*http.Response, error) {
	if n.srv.Response == nil {
		return nil, &nonRetriableError{errors.New("fake for method Response not implemented")}
	}
	respr, errRespr := n.srv.Response(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).DefaultName; val != nil {
		resp.Header.Set("default-name", *val)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to NamingServerTransport
var namingServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
