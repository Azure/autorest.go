// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package pageablegroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strconv"
)

// PageableClient - Test describing pageable.
// Don't use this type directly, use NewPageableClientWithNoCredential() instead.
type PageableClient struct {
	internal *azcore.Client
	endpoint string
}

// PageableClientOptions contains the optional values for creating a [PageableClient].
type PageableClientOptions struct {
	azcore.ClientOptions
}

// NewPageableClientWithNoCredential creates a new instance of PageableClient with the specified values.
//   - endpoint - Service host
//   - PageableClientOptions - PageableClientOptions contains the optional values for creating a [PageableClient]
func NewPageableClientWithNoCredential(endpoint string, options *PageableClientOptions) (*PageableClient, error) {
	if options == nil {
		options = &PageableClientOptions{}
	}
	cl, err := azcore.NewClient(moduleName, moduleVersion, runtime.PipelineOptions{}, &options.ClientOptions)
	if err != nil {
		return nil, err
	}
	client := &PageableClient{
		endpoint: endpoint,
		internal: cl,
	}
	return client, nil
}

// NewListPager - List users
//   - options - PageableClientListOptions contains the optional parameters for the PageableClient.NewListPager method.
func (client *PageableClient) NewListPager(options *PageableClientListOptions) *runtime.Pager[PageableClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[PageableClientListResponse]{
		More: func(page PageableClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PageableClientListResponse) (PageableClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PageableClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return PageableClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *PageableClient) listCreateRequest(ctx context.Context, options *PageableClientListOptions) (*policy.Request, error) {
	urlPath := "/azure/payload/pageable"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Maxpagesize != nil {
		reqQP.Set("maxpagesize", strconv.FormatInt(int64(*options.Maxpagesize), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *PageableClient) listHandleResponse(resp *http.Response) (PageableClientListResponse, error) {
	result := PageableClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PagedUser); err != nil {
		return PageableClientListResponse{}, err
	}
	return result, nil
}
