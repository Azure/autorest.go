// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package commonpropsgroup

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// ErrorClient contains the methods for the Error group.
// Don't use this type directly, use NewErrorClient() instead.
type ErrorClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewErrorClient creates a new instance of ErrorClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewErrorClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ErrorClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &ErrorClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CreateForUserDefinedError - Create a ConfidentialResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - confidentialResourceName - The name of the ConfidentialResource
//   - resource - Resource create parameters.
//   - options - ErrorClientCreateForUserDefinedErrorOptions contains the optional parameters for the ErrorClient.CreateForUserDefinedError
//     method.
func (client *ErrorClient) CreateForUserDefinedError(ctx context.Context, resourceGroupName string, confidentialResourceName string, resource ConfidentialResource, options *ErrorClientCreateForUserDefinedErrorOptions) (ErrorClientCreateForUserDefinedErrorResponse, error) {
	var err error
	const operationName = "ErrorClient.CreateForUserDefinedError"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createForUserDefinedErrorCreateRequest(ctx, resourceGroupName, confidentialResourceName, resource, options)
	if err != nil {
		return ErrorClientCreateForUserDefinedErrorResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ErrorClientCreateForUserDefinedErrorResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return ErrorClientCreateForUserDefinedErrorResponse{}, err
	}
	resp, err := client.createForUserDefinedErrorHandleResponse(httpResp)
	return resp, err
}

// createForUserDefinedErrorCreateRequest creates the CreateForUserDefinedError request.
func (client *ErrorClient) createForUserDefinedErrorCreateRequest(ctx context.Context, resourceGroupName string, confidentialResourceName string, resource ConfidentialResource, _ *ErrorClientCreateForUserDefinedErrorOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.CommonProperties/confidentialResources/{confidentialResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if confidentialResourceName == "" {
		return nil, errors.New("parameter confidentialResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{confidentialResourceName}", url.PathEscape(confidentialResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// createForUserDefinedErrorHandleResponse handles the CreateForUserDefinedError response.
func (client *ErrorClient) createForUserDefinedErrorHandleResponse(resp *http.Response) (ErrorClientCreateForUserDefinedErrorResponse, error) {
	result := ErrorClientCreateForUserDefinedErrorResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ConfidentialResource); err != nil {
		return ErrorClientCreateForUserDefinedErrorResponse{}, err
	}
	return result, nil
}

// GetForPredefinedError - Get a ConfidentialResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - confidentialResourceName - The name of the ConfidentialResource
//   - options - ErrorClientGetForPredefinedErrorOptions contains the optional parameters for the ErrorClient.GetForPredefinedError
//     method.
func (client *ErrorClient) GetForPredefinedError(ctx context.Context, resourceGroupName string, confidentialResourceName string, options *ErrorClientGetForPredefinedErrorOptions) (ErrorClientGetForPredefinedErrorResponse, error) {
	var err error
	const operationName = "ErrorClient.GetForPredefinedError"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getForPredefinedErrorCreateRequest(ctx, resourceGroupName, confidentialResourceName, options)
	if err != nil {
		return ErrorClientGetForPredefinedErrorResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ErrorClientGetForPredefinedErrorResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ErrorClientGetForPredefinedErrorResponse{}, err
	}
	resp, err := client.getForPredefinedErrorHandleResponse(httpResp)
	return resp, err
}

// getForPredefinedErrorCreateRequest creates the GetForPredefinedError request.
func (client *ErrorClient) getForPredefinedErrorCreateRequest(ctx context.Context, resourceGroupName string, confidentialResourceName string, _ *ErrorClientGetForPredefinedErrorOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.CommonProperties/confidentialResources/{confidentialResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if confidentialResourceName == "" {
		return nil, errors.New("parameter confidentialResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{confidentialResourceName}", url.PathEscape(confidentialResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getForPredefinedErrorHandleResponse handles the GetForPredefinedError response.
func (client *ErrorClient) getForPredefinedErrorHandleResponse(resp *http.Response) (ErrorClientGetForPredefinedErrorResponse, error) {
	result := ErrorClientGetForPredefinedErrorResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ConfidentialResource); err != nil {
		return ErrorClientGetForPredefinedErrorResponse{}, err
	}
	return result, nil
}
