// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package resources

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// LocationResourcesClient contains the methods for the LocationResources group.
// Don't use this type directly, use NewLocationResourcesClient() instead.
type LocationResourcesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewLocationResourcesClient creates a new instance of LocationResourcesClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewLocationResourcesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*LocationResourcesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &LocationResourcesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CreateOrUpdate - Create a LocationResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - location - The name of the Azure region.
//   - locationResourceName - The name of the LocationResource
//   - resource - Resource create parameters.
//   - options - LocationResourcesClientCreateOrUpdateOptions contains the optional parameters for the LocationResourcesClient.CreateOrUpdate
//     method.
func (client *LocationResourcesClient) CreateOrUpdate(ctx context.Context, location string, locationResourceName string, resource LocationResource, options *LocationResourcesClientCreateOrUpdateOptions) (LocationResourcesClientCreateOrUpdateResponse, error) {
	var err error
	const operationName = "LocationResourcesClient.CreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, location, locationResourceName, resource, options)
	if err != nil {
		return LocationResourcesClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return LocationResourcesClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return LocationResourcesClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *LocationResourcesClient) createOrUpdateCreateRequest(ctx context.Context, location string, locationResourceName string, resource LocationResource, _ *LocationResourcesClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.Resources/locations/{location}/locationResources/{locationResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if locationResourceName == "" {
		return nil, errors.New("parameter locationResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{locationResourceName}", url.PathEscape(locationResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *LocationResourcesClient) createOrUpdateHandleResponse(resp *http.Response) (LocationResourcesClientCreateOrUpdateResponse, error) {
	result := LocationResourcesClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.LocationResource); err != nil {
		return LocationResourcesClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Delete a LocationResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - location - The name of the Azure region.
//   - locationResourceName - The name of the LocationResource
//   - options - LocationResourcesClientDeleteOptions contains the optional parameters for the LocationResourcesClient.Delete
//     method.
func (client *LocationResourcesClient) Delete(ctx context.Context, location string, locationResourceName string, options *LocationResourcesClientDeleteOptions) (LocationResourcesClientDeleteResponse, error) {
	var err error
	const operationName = "LocationResourcesClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, location, locationResourceName, options)
	if err != nil {
		return LocationResourcesClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return LocationResourcesClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return LocationResourcesClientDeleteResponse{}, err
	}
	return LocationResourcesClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *LocationResourcesClient) deleteCreateRequest(ctx context.Context, location string, locationResourceName string, _ *LocationResourcesClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.Resources/locations/{location}/locationResources/{locationResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if locationResourceName == "" {
		return nil, errors.New("parameter locationResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{locationResourceName}", url.PathEscape(locationResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a LocationResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - location - The name of the Azure region.
//   - locationResourceName - The name of the LocationResource
//   - options - LocationResourcesClientGetOptions contains the optional parameters for the LocationResourcesClient.Get method.
func (client *LocationResourcesClient) Get(ctx context.Context, location string, locationResourceName string, options *LocationResourcesClientGetOptions) (LocationResourcesClientGetResponse, error) {
	var err error
	const operationName = "LocationResourcesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, location, locationResourceName, options)
	if err != nil {
		return LocationResourcesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return LocationResourcesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return LocationResourcesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *LocationResourcesClient) getCreateRequest(ctx context.Context, location string, locationResourceName string, _ *LocationResourcesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.Resources/locations/{location}/locationResources/{locationResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if locationResourceName == "" {
		return nil, errors.New("parameter locationResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{locationResourceName}", url.PathEscape(locationResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *LocationResourcesClient) getHandleResponse(resp *http.Response) (LocationResourcesClientGetResponse, error) {
	result := LocationResourcesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.LocationResource); err != nil {
		return LocationResourcesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByLocationPager - List LocationResource resources by SubscriptionLocationResource
//
// Generated from API version 2023-12-01-preview
//   - location - The name of the Azure region.
//   - options - LocationResourcesClientListByLocationOptions contains the optional parameters for the LocationResourcesClient.NewListByLocationPager
//     method.
func (client *LocationResourcesClient) NewListByLocationPager(location string, options *LocationResourcesClientListByLocationOptions) *runtime.Pager[LocationResourcesClientListByLocationResponse] {
	return runtime.NewPager(runtime.PagingHandler[LocationResourcesClientListByLocationResponse]{
		More: func(page LocationResourcesClientListByLocationResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *LocationResourcesClientListByLocationResponse) (LocationResourcesClientListByLocationResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "LocationResourcesClient.NewListByLocationPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByLocationCreateRequest(ctx, location, options)
			}, nil)
			if err != nil {
				return LocationResourcesClientListByLocationResponse{}, err
			}
			return client.listByLocationHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByLocationCreateRequest creates the ListByLocation request.
func (client *LocationResourcesClient) listByLocationCreateRequest(ctx context.Context, location string, _ *LocationResourcesClientListByLocationOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.Resources/locations/{location}/locationResources"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByLocationHandleResponse handles the ListByLocation response.
func (client *LocationResourcesClient) listByLocationHandleResponse(resp *http.Response) (LocationResourcesClientListByLocationResponse, error) {
	result := LocationResourcesClientListByLocationResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.LocationResourceListResult); err != nil {
		return LocationResourcesClientListByLocationResponse{}, err
	}
	return result, nil
}

// Update - Update a LocationResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - location - The name of the Azure region.
//   - locationResourceName - The name of the LocationResource
//   - properties - The resource properties to be updated.
//   - options - LocationResourcesClientUpdateOptions contains the optional parameters for the LocationResourcesClient.Update
//     method.
func (client *LocationResourcesClient) Update(ctx context.Context, location string, locationResourceName string, properties LocationResource, options *LocationResourcesClientUpdateOptions) (LocationResourcesClientUpdateResponse, error) {
	var err error
	const operationName = "LocationResourcesClient.Update"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, location, locationResourceName, properties, options)
	if err != nil {
		return LocationResourcesClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return LocationResourcesClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return LocationResourcesClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *LocationResourcesClient) updateCreateRequest(ctx context.Context, location string, locationResourceName string, properties LocationResource, _ *LocationResourcesClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.Resources/locations/{location}/locationResources/{locationResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if locationResourceName == "" {
		return nil, errors.New("parameter locationResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{locationResourceName}", url.PathEscape(locationResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *LocationResourcesClient) updateHandleResponse(resp *http.Response) (LocationResourcesClientUpdateResponse, error) {
	result := LocationResourcesClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.LocationResource); err != nil {
		return LocationResourcesClientUpdateResponse{}, err
	}
	return result, nil
}
