// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package resources

import (
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
)

// ClientFactory is a client factory used to create any client in this module.
// Don't use this type directly, use NewClientFactory instead.
type ClientFactory struct {
	internal *arm.Client
}

// NewClientFactory creates a new instance of ClientFactory with the specified values.
// The parameter values will be propagated to any client created from this factory.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewClientFactory(credential azcore.TokenCredential, options *arm.ClientOptions) (*ClientFactory, error) {
	internal, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	return &ClientFactory{
		internal: internal,
	}, nil
}

// NewExtensionsResourcesClient creates a new instance of ExtensionsResourcesClient.
func (c *ClientFactory) NewExtensionsResourcesClient() *ExtensionsResourcesClient {
	return &ExtensionsResourcesClient{
		internal: c.internal,
	}
}

// NewLocationResourcesClient creates a new instance of LocationResourcesClient.
func (c *ClientFactory) NewLocationResourcesClient(subscriptionID string) *LocationResourcesClient {
	return &LocationResourcesClient{
		subscriptionID: subscriptionID,
		internal:       c.internal,
	}
}

// NewNestedClient creates a new instance of NestedClient.
func (c *ClientFactory) NewNestedClient(subscriptionID string) *NestedClient {
	return &NestedClient{
		subscriptionID: subscriptionID,
		internal:       c.internal,
	}
}

// NewSingletonClient creates a new instance of SingletonClient.
func (c *ClientFactory) NewSingletonClient(subscriptionID string) *SingletonClient {
	return &SingletonClient{
		subscriptionID: subscriptionID,
		internal:       c.internal,
	}
}

// NewTopLevelClient creates a new instance of TopLevelClient.
func (c *ClientFactory) NewTopLevelClient(subscriptionID string) *TopLevelClient {
	return &TopLevelClient{
		subscriptionID: subscriptionID,
		internal:       c.internal,
	}
}
