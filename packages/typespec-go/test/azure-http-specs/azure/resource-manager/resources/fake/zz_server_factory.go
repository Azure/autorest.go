// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"net/http"
	"strings"
	"sync"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// ServerFactory is a fake server for instances of the resources.ClientFactory type.
type ServerFactory struct {
	// ExtensionsResourcesServer contains the fakes for client ExtensionsResourcesClient
	ExtensionsResourcesServer ExtensionsResourcesServer

	// LocationResourcesServer contains the fakes for client LocationResourcesClient
	LocationResourcesServer LocationResourcesServer

	// NestedServer contains the fakes for client NestedClient
	NestedServer NestedServer

	// SingletonServer contains the fakes for client SingletonClient
	SingletonServer SingletonServer

	// TopLevelServer contains the fakes for client TopLevelClient
	TopLevelServer TopLevelServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of resources.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of resources.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                         *ServerFactory
	trMu                        sync.Mutex
	trExtensionsResourcesServer *ExtensionsResourcesServerTransport
	trLocationResourcesServer   *LocationResourcesServerTransport
	trNestedServer              *NestedServerTransport
	trSingletonServer           *SingletonServerTransport
	trTopLevelServer            *TopLevelServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "ExtensionsResourcesClient":
		initServer(s, &s.trExtensionsResourcesServer, func() *ExtensionsResourcesServerTransport {
			return NewExtensionsResourcesServerTransport(&s.srv.ExtensionsResourcesServer)
		})
		resp, err = s.trExtensionsResourcesServer.Do(req)
	case "LocationResourcesClient":
		initServer(s, &s.trLocationResourcesServer, func() *LocationResourcesServerTransport {
			return NewLocationResourcesServerTransport(&s.srv.LocationResourcesServer)
		})
		resp, err = s.trLocationResourcesServer.Do(req)
	case "NestedClient":
		initServer(s, &s.trNestedServer, func() *NestedServerTransport { return NewNestedServerTransport(&s.srv.NestedServer) })
		resp, err = s.trNestedServer.Do(req)
	case "SingletonClient":
		initServer(s, &s.trSingletonServer, func() *SingletonServerTransport { return NewSingletonServerTransport(&s.srv.SingletonServer) })
		resp, err = s.trSingletonServer.Do(req)
	case "TopLevelClient":
		initServer(s, &s.trTopLevelServer, func() *TopLevelServerTransport { return NewTopLevelServerTransport(&s.srv.TopLevelServer) })
		resp, err = s.trTopLevelServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
