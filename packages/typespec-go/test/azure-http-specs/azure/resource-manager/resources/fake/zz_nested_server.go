// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
	"net/url"
	"regexp"
	"resources"
)

// NestedServer is a fake server for instances of the resources.NestedClient type.
type NestedServer struct {
	// BeginCreateOrReplace is the fake for method NestedClient.BeginCreateOrReplace
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrReplace func(ctx context.Context, resourceGroupName string, topLevelTrackedResourceName string, nextedProxyResourceName string, resource resources.NestedProxyResource, options *resources.NestedClientBeginCreateOrReplaceOptions) (resp azfake.PollerResponder[resources.NestedClientCreateOrReplaceResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method NestedClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, topLevelTrackedResourceName string, nextedProxyResourceName string, options *resources.NestedClientBeginDeleteOptions) (resp azfake.PollerResponder[resources.NestedClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method NestedClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, topLevelTrackedResourceName string, nextedProxyResourceName string, options *resources.NestedClientGetOptions) (resp azfake.Responder[resources.NestedClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByTopLevelTrackedResourcePager is the fake for method NestedClient.NewListByTopLevelTrackedResourcePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByTopLevelTrackedResourcePager func(resourceGroupName string, topLevelTrackedResourceName string, options *resources.NestedClientListByTopLevelTrackedResourceOptions) (resp azfake.PagerResponder[resources.NestedClientListByTopLevelTrackedResourceResponse])

	// BeginUpdate is the fake for method NestedClient.BeginUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdate func(ctx context.Context, resourceGroupName string, topLevelTrackedResourceName string, nextedProxyResourceName string, properties resources.NestedProxyResource, options *resources.NestedClientBeginUpdateOptions) (resp azfake.PollerResponder[resources.NestedClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewNestedServerTransport creates a new instance of NestedServerTransport with the provided implementation.
// The returned NestedServerTransport instance is connected to an instance of resources.NestedClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewNestedServerTransport(srv *NestedServer) *NestedServerTransport {
	return &NestedServerTransport{
		srv:                                   srv,
		beginCreateOrReplace:                  newTracker[azfake.PollerResponder[resources.NestedClientCreateOrReplaceResponse]](),
		beginDelete:                           newTracker[azfake.PollerResponder[resources.NestedClientDeleteResponse]](),
		newListByTopLevelTrackedResourcePager: newTracker[azfake.PagerResponder[resources.NestedClientListByTopLevelTrackedResourceResponse]](),
		beginUpdate:                           newTracker[azfake.PollerResponder[resources.NestedClientUpdateResponse]](),
	}
}

// NestedServerTransport connects instances of resources.NestedClient to instances of NestedServer.
// Don't use this type directly, use NewNestedServerTransport instead.
type NestedServerTransport struct {
	srv                                   *NestedServer
	beginCreateOrReplace                  *tracker[azfake.PollerResponder[resources.NestedClientCreateOrReplaceResponse]]
	beginDelete                           *tracker[azfake.PollerResponder[resources.NestedClientDeleteResponse]]
	newListByTopLevelTrackedResourcePager *tracker[azfake.PagerResponder[resources.NestedClientListByTopLevelTrackedResourceResponse]]
	beginUpdate                           *tracker[azfake.PollerResponder[resources.NestedClientUpdateResponse]]
}

// Do implements the policy.Transporter interface for NestedServerTransport.
func (n *NestedServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return n.dispatchToMethodFake(req, method)
}

func (n *NestedServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if nestedServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = nestedServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "NestedClient.BeginCreateOrReplace":
				res.resp, res.err = n.dispatchBeginCreateOrReplace(req)
			case "NestedClient.BeginDelete":
				res.resp, res.err = n.dispatchBeginDelete(req)
			case "NestedClient.Get":
				res.resp, res.err = n.dispatchGet(req)
			case "NestedClient.NewListByTopLevelTrackedResourcePager":
				res.resp, res.err = n.dispatchNewListByTopLevelTrackedResourcePager(req)
			case "NestedClient.BeginUpdate":
				res.resp, res.err = n.dispatchBeginUpdate(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (n *NestedServerTransport) dispatchBeginCreateOrReplace(req *http.Request) (*http.Response, error) {
	if n.srv.BeginCreateOrReplace == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrReplace not implemented")}
	}
	beginCreateOrReplace := n.beginCreateOrReplace.get(req)
	if beginCreateOrReplace == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Azure\.ResourceManager\.Resources/topLevelTrackedResources/(?P<topLevelTrackedResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/nestedProxyResources/(?P<nextedProxyResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[resources.NestedProxyResource](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		topLevelTrackedResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("topLevelTrackedResourceName")])
		if err != nil {
			return nil, err
		}
		nextedProxyResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("nextedProxyResourceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := n.srv.BeginCreateOrReplace(req.Context(), resourceGroupNameParam, topLevelTrackedResourceNameParam, nextedProxyResourceNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrReplace = &respr
		n.beginCreateOrReplace.add(req, beginCreateOrReplace)
	}

	resp, err := server.PollerResponderNext(beginCreateOrReplace, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		n.beginCreateOrReplace.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrReplace) {
		n.beginCreateOrReplace.remove(req)
	}

	return resp, nil
}

func (n *NestedServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if n.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := n.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Azure\.ResourceManager\.Resources/topLevelTrackedResources/(?P<topLevelTrackedResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/nestedProxyResources/(?P<nextedProxyResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		topLevelTrackedResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("topLevelTrackedResourceName")])
		if err != nil {
			return nil, err
		}
		nextedProxyResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("nextedProxyResourceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := n.srv.BeginDelete(req.Context(), resourceGroupNameParam, topLevelTrackedResourceNameParam, nextedProxyResourceNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		n.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		n.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		n.beginDelete.remove(req)
	}

	return resp, nil
}

func (n *NestedServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if n.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Azure\.ResourceManager\.Resources/topLevelTrackedResources/(?P<topLevelTrackedResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/nestedProxyResources/(?P<nextedProxyResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	topLevelTrackedResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("topLevelTrackedResourceName")])
	if err != nil {
		return nil, err
	}
	nextedProxyResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("nextedProxyResourceName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := n.srv.Get(req.Context(), resourceGroupNameParam, topLevelTrackedResourceNameParam, nextedProxyResourceNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).NestedProxyResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (n *NestedServerTransport) dispatchNewListByTopLevelTrackedResourcePager(req *http.Request) (*http.Response, error) {
	if n.srv.NewListByTopLevelTrackedResourcePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByTopLevelTrackedResourcePager not implemented")}
	}
	newListByTopLevelTrackedResourcePager := n.newListByTopLevelTrackedResourcePager.get(req)
	if newListByTopLevelTrackedResourcePager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Azure\.ResourceManager\.Resources/topLevelTrackedResources/(?P<topLevelTrackedResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/nestedProxyResources`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		topLevelTrackedResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("topLevelTrackedResourceName")])
		if err != nil {
			return nil, err
		}
		resp := n.srv.NewListByTopLevelTrackedResourcePager(resourceGroupNameParam, topLevelTrackedResourceNameParam, nil)
		newListByTopLevelTrackedResourcePager = &resp
		n.newListByTopLevelTrackedResourcePager.add(req, newListByTopLevelTrackedResourcePager)
		server.PagerResponderInjectNextLinks(newListByTopLevelTrackedResourcePager, req, func(page *resources.NestedClientListByTopLevelTrackedResourceResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByTopLevelTrackedResourcePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		n.newListByTopLevelTrackedResourcePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByTopLevelTrackedResourcePager) {
		n.newListByTopLevelTrackedResourcePager.remove(req)
	}
	return resp, nil
}

func (n *NestedServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if n.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdate not implemented")}
	}
	beginUpdate := n.beginUpdate.get(req)
	if beginUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Azure\.ResourceManager\.Resources/topLevelTrackedResources/(?P<topLevelTrackedResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/nestedProxyResources/(?P<nextedProxyResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[resources.NestedProxyResource](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		topLevelTrackedResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("topLevelTrackedResourceName")])
		if err != nil {
			return nil, err
		}
		nextedProxyResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("nextedProxyResourceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := n.srv.BeginUpdate(req.Context(), resourceGroupNameParam, topLevelTrackedResourceNameParam, nextedProxyResourceNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdate = &respr
		n.beginUpdate.add(req, beginUpdate)
	}

	resp, err := server.PollerResponderNext(beginUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		n.beginUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdate) {
		n.beginUpdate.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to NestedServerTransport
var nestedServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
