// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package templatesgroup

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// OptionalBodyClient contains the methods for the OptionalBody group.
// Don't use this type directly, use NewOptionalBodyClient() instead.
type OptionalBodyClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewOptionalBodyClient creates a new instance of OptionalBodyClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewOptionalBodyClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*OptionalBodyClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &OptionalBodyClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Get - Get a Widget
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - widgetName - The name of the Widget
//   - options - OptionalBodyClientGetOptions contains the optional parameters for the OptionalBodyClient.Get method.
func (client *OptionalBodyClient) Get(ctx context.Context, resourceGroupName string, widgetName string, options *OptionalBodyClientGetOptions) (OptionalBodyClientGetResponse, error) {
	var err error
	const operationName = "OptionalBodyClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, widgetName, options)
	if err != nil {
		return OptionalBodyClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return OptionalBodyClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return OptionalBodyClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *OptionalBodyClient) getCreateRequest(ctx context.Context, resourceGroupName string, widgetName string, _ *OptionalBodyClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.OperationTemplates/widgets/{widgetName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if widgetName == "" {
		return nil, errors.New("parameter widgetName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{widgetName}", url.PathEscape(widgetName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *OptionalBodyClient) getHandleResponse(resp *http.Response) (OptionalBodyClientGetResponse, error) {
	result := OptionalBodyClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Widget); err != nil {
		return OptionalBodyClientGetResponse{}, err
	}
	return result, nil
}

// Patch - Update a Widget
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - widgetName - The name of the Widget
//   - properties - The resource properties to be updated.
//   - options - OptionalBodyClientPatchOptions contains the optional parameters for the OptionalBodyClient.Patch method.
func (client *OptionalBodyClient) Patch(ctx context.Context, resourceGroupName string, widgetName string, properties Widget, options *OptionalBodyClientPatchOptions) (OptionalBodyClientPatchResponse, error) {
	var err error
	const operationName = "OptionalBodyClient.Patch"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.patchCreateRequest(ctx, resourceGroupName, widgetName, properties, options)
	if err != nil {
		return OptionalBodyClientPatchResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return OptionalBodyClientPatchResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return OptionalBodyClientPatchResponse{}, err
	}
	resp, err := client.patchHandleResponse(httpResp)
	return resp, err
}

// patchCreateRequest creates the Patch request.
func (client *OptionalBodyClient) patchCreateRequest(ctx context.Context, resourceGroupName string, widgetName string, properties Widget, _ *OptionalBodyClientPatchOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.OperationTemplates/widgets/{widgetName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if widgetName == "" {
		return nil, errors.New("parameter widgetName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{widgetName}", url.PathEscape(widgetName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}

// patchHandleResponse handles the Patch response.
func (client *OptionalBodyClient) patchHandleResponse(resp *http.Response) (OptionalBodyClientPatchResponse, error) {
	result := OptionalBodyClientPatchResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Widget); err != nil {
		return OptionalBodyClientPatchResponse{}, err
	}
	return result, nil
}

// Post - A synchronous resource action.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - widgetName - The name of the Widget
//   - options - OptionalBodyClientPostOptions contains the optional parameters for the OptionalBodyClient.Post method.
func (client *OptionalBodyClient) Post(ctx context.Context, resourceGroupName string, widgetName string, options *OptionalBodyClientPostOptions) (OptionalBodyClientPostResponse, error) {
	var err error
	const operationName = "OptionalBodyClient.Post"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.postCreateRequest(ctx, resourceGroupName, widgetName, options)
	if err != nil {
		return OptionalBodyClientPostResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return OptionalBodyClientPostResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return OptionalBodyClientPostResponse{}, err
	}
	resp, err := client.postHandleResponse(httpResp)
	return resp, err
}

// postCreateRequest creates the Post request.
func (client *OptionalBodyClient) postCreateRequest(ctx context.Context, resourceGroupName string, widgetName string, options *OptionalBodyClientPostOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.OperationTemplates/widgets/{widgetName}/post"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if widgetName == "" {
		return nil, errors.New("parameter widgetName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{widgetName}", url.PathEscape(widgetName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.Body != nil {
		req.Raw().Header["Content-Type"] = []string{"application/json"}
		if err := runtime.MarshalAsJSON(req, *options.Body); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// postHandleResponse handles the Post response.
func (client *OptionalBodyClient) postHandleResponse(resp *http.Response) (OptionalBodyClientPostResponse, error) {
	result := OptionalBodyClientPostResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ActionResult); err != nil {
		return OptionalBodyClientPostResponse{}, err
	}
	return result, nil
}

// ProviderPost -
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - options - OptionalBodyClientProviderPostOptions contains the optional parameters for the OptionalBodyClient.ProviderPost
//     method.
func (client *OptionalBodyClient) ProviderPost(ctx context.Context, options *OptionalBodyClientProviderPostOptions) (OptionalBodyClientProviderPostResponse, error) {
	var err error
	const operationName = "OptionalBodyClient.ProviderPost"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.providerPostCreateRequest(ctx, options)
	if err != nil {
		return OptionalBodyClientProviderPostResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return OptionalBodyClientProviderPostResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return OptionalBodyClientProviderPostResponse{}, err
	}
	resp, err := client.providerPostHandleResponse(httpResp)
	return resp, err
}

// providerPostCreateRequest creates the ProviderPost request.
func (client *OptionalBodyClient) providerPostCreateRequest(ctx context.Context, options *OptionalBodyClientProviderPostOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.OperationTemplates/providerPost"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.Body != nil {
		req.Raw().Header["Content-Type"] = []string{"application/json"}
		if err := runtime.MarshalAsJSON(req, *options.Body); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// providerPostHandleResponse handles the ProviderPost response.
func (client *OptionalBodyClient) providerPostHandleResponse(resp *http.Response) (OptionalBodyClientProviderPostResponse, error) {
	result := OptionalBodyClientProviderPostResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ChangeAllowanceResult); err != nil {
		return OptionalBodyClientProviderPostResponse{}, err
	}
	return result, nil
}
