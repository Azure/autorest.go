// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"templatesgroup"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// LroServer is a fake server for instances of the templatesgroup.LroClient type.
type LroServer struct {
	// BeginCreateOrReplace is the fake for method LroClient.BeginCreateOrReplace
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrReplace func(ctx context.Context, resourceGroupName string, orderName string, resource templatesgroup.Order, options *templatesgroup.LroClientBeginCreateOrReplaceOptions) (resp azfake.PollerResponder[templatesgroup.LroClientCreateOrReplaceResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method LroClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, orderName string, options *templatesgroup.LroClientBeginDeleteOptions) (resp azfake.PollerResponder[templatesgroup.LroClientDeleteResponse], errResp azfake.ErrorResponder)

	// BeginExport is the fake for method LroClient.BeginExport
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginExport func(ctx context.Context, resourceGroupName string, orderName string, body templatesgroup.ExportRequest, options *templatesgroup.LroClientBeginExportOptions) (resp azfake.PollerResponder[templatesgroup.LroClientExportResponse], errResp azfake.ErrorResponder)
}

// NewLroServerTransport creates a new instance of LroServerTransport with the provided implementation.
// The returned LroServerTransport instance is connected to an instance of templatesgroup.LroClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewLroServerTransport(srv *LroServer) *LroServerTransport {
	return &LroServerTransport{
		srv:                  srv,
		beginCreateOrReplace: newTracker[azfake.PollerResponder[templatesgroup.LroClientCreateOrReplaceResponse]](),
		beginDelete:          newTracker[azfake.PollerResponder[templatesgroup.LroClientDeleteResponse]](),
		beginExport:          newTracker[azfake.PollerResponder[templatesgroup.LroClientExportResponse]](),
	}
}

// LroServerTransport connects instances of templatesgroup.LroClient to instances of LroServer.
// Don't use this type directly, use NewLroServerTransport instead.
type LroServerTransport struct {
	srv                  *LroServer
	beginCreateOrReplace *tracker[azfake.PollerResponder[templatesgroup.LroClientCreateOrReplaceResponse]]
	beginDelete          *tracker[azfake.PollerResponder[templatesgroup.LroClientDeleteResponse]]
	beginExport          *tracker[azfake.PollerResponder[templatesgroup.LroClientExportResponse]]
}

// Do implements the policy.Transporter interface for LroServerTransport.
func (l *LroServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return l.dispatchToMethodFake(req, method)
}

func (l *LroServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if lroServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = lroServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "LroClient.BeginCreateOrReplace":
				res.resp, res.err = l.dispatchBeginCreateOrReplace(req)
			case "LroClient.BeginDelete":
				res.resp, res.err = l.dispatchBeginDelete(req)
			case "LroClient.BeginExport":
				res.resp, res.err = l.dispatchBeginExport(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (l *LroServerTransport) dispatchBeginCreateOrReplace(req *http.Request) (*http.Response, error) {
	if l.srv.BeginCreateOrReplace == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrReplace not implemented")}
	}
	beginCreateOrReplace := l.beginCreateOrReplace.get(req)
	if beginCreateOrReplace == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Azure\.ResourceManager\.OperationTemplates/orders/(?P<orderName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[templatesgroup.Order](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		orderNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("orderName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := l.srv.BeginCreateOrReplace(req.Context(), resourceGroupNameParam, orderNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrReplace = &respr
		l.beginCreateOrReplace.add(req, beginCreateOrReplace)
	}

	resp, err := server.PollerResponderNext(beginCreateOrReplace, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		l.beginCreateOrReplace.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrReplace) {
		l.beginCreateOrReplace.remove(req)
	}

	return resp, nil
}

func (l *LroServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if l.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := l.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Azure\.ResourceManager\.OperationTemplates/orders/(?P<orderName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		orderNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("orderName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := l.srv.BeginDelete(req.Context(), resourceGroupNameParam, orderNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		l.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		l.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		l.beginDelete.remove(req)
	}

	return resp, nil
}

func (l *LroServerTransport) dispatchBeginExport(req *http.Request) (*http.Response, error) {
	if l.srv.BeginExport == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginExport not implemented")}
	}
	beginExport := l.beginExport.get(req)
	if beginExport == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Azure\.ResourceManager\.OperationTemplates/orders/(?P<orderName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/export`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[templatesgroup.ExportRequest](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		orderNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("orderName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := l.srv.BeginExport(req.Context(), resourceGroupNameParam, orderNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginExport = &respr
		l.beginExport.add(req, beginExport)
	}

	resp, err := server.PollerResponderNext(beginExport, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		l.beginExport.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginExport) {
		l.beginExport.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to LroServerTransport
var lroServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
