// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"reflect"
	"regexp"
	"templatesgroup"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// OptionalBodyServer is a fake server for instances of the templatesgroup.OptionalBodyClient type.
type OptionalBodyServer struct {
	// Get is the fake for method OptionalBodyClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, widgetName string, options *templatesgroup.OptionalBodyClientGetOptions) (resp azfake.Responder[templatesgroup.OptionalBodyClientGetResponse], errResp azfake.ErrorResponder)

	// Patch is the fake for method OptionalBodyClient.Patch
	// HTTP status codes to indicate success: http.StatusOK
	Patch func(ctx context.Context, resourceGroupName string, widgetName string, properties templatesgroup.Widget, options *templatesgroup.OptionalBodyClientPatchOptions) (resp azfake.Responder[templatesgroup.OptionalBodyClientPatchResponse], errResp azfake.ErrorResponder)

	// Post is the fake for method OptionalBodyClient.Post
	// HTTP status codes to indicate success: http.StatusOK
	Post func(ctx context.Context, resourceGroupName string, widgetName string, options *templatesgroup.OptionalBodyClientPostOptions) (resp azfake.Responder[templatesgroup.OptionalBodyClientPostResponse], errResp azfake.ErrorResponder)

	// ProviderPost is the fake for method OptionalBodyClient.ProviderPost
	// HTTP status codes to indicate success: http.StatusOK
	ProviderPost func(ctx context.Context, options *templatesgroup.OptionalBodyClientProviderPostOptions) (resp azfake.Responder[templatesgroup.OptionalBodyClientProviderPostResponse], errResp azfake.ErrorResponder)
}

// NewOptionalBodyServerTransport creates a new instance of OptionalBodyServerTransport with the provided implementation.
// The returned OptionalBodyServerTransport instance is connected to an instance of templatesgroup.OptionalBodyClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewOptionalBodyServerTransport(srv *OptionalBodyServer) *OptionalBodyServerTransport {
	return &OptionalBodyServerTransport{srv: srv}
}

// OptionalBodyServerTransport connects instances of templatesgroup.OptionalBodyClient to instances of OptionalBodyServer.
// Don't use this type directly, use NewOptionalBodyServerTransport instead.
type OptionalBodyServerTransport struct {
	srv *OptionalBodyServer
}

// Do implements the policy.Transporter interface for OptionalBodyServerTransport.
func (o *OptionalBodyServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return o.dispatchToMethodFake(req, method)
}

func (o *OptionalBodyServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if optionalBodyServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = optionalBodyServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "OptionalBodyClient.Get":
				res.resp, res.err = o.dispatchGet(req)
			case "OptionalBodyClient.Patch":
				res.resp, res.err = o.dispatchPatch(req)
			case "OptionalBodyClient.Post":
				res.resp, res.err = o.dispatchPost(req)
			case "OptionalBodyClient.ProviderPost":
				res.resp, res.err = o.dispatchProviderPost(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (o *OptionalBodyServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if o.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Azure\.ResourceManager\.OperationTemplates/widgets/(?P<widgetName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	widgetNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("widgetName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := o.srv.Get(req.Context(), resourceGroupNameParam, widgetNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Widget, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *OptionalBodyServerTransport) dispatchPatch(req *http.Request) (*http.Response, error) {
	if o.srv.Patch == nil {
		return nil, &nonRetriableError{errors.New("fake for method Patch not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Azure\.ResourceManager\.OperationTemplates/widgets/(?P<widgetName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[templatesgroup.Widget](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	widgetNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("widgetName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := o.srv.Patch(req.Context(), resourceGroupNameParam, widgetNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Widget, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *OptionalBodyServerTransport) dispatchPost(req *http.Request) (*http.Response, error) {
	if o.srv.Post == nil {
		return nil, &nonRetriableError{errors.New("fake for method Post not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Azure\.ResourceManager\.OperationTemplates/widgets/(?P<widgetName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/post`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[templatesgroup.ActionRequest](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	widgetNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("widgetName")])
	if err != nil {
		return nil, err
	}
	var options *templatesgroup.OptionalBodyClientPostOptions
	if !reflect.ValueOf(body).IsZero() {
		options = &templatesgroup.OptionalBodyClientPostOptions{
			Body: &body,
		}
	}
	respr, errRespr := o.srv.Post(req.Context(), resourceGroupNameParam, widgetNameParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ActionResult, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *OptionalBodyServerTransport) dispatchProviderPost(req *http.Request) (*http.Response, error) {
	if o.srv.ProviderPost == nil {
		return nil, &nonRetriableError{errors.New("fake for method ProviderPost not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Azure\.ResourceManager\.OperationTemplates/providerPost`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[templatesgroup.ChangeAllowanceRequest](req)
	if err != nil {
		return nil, err
	}
	var options *templatesgroup.OptionalBodyClientProviderPostOptions
	if !reflect.ValueOf(body).IsZero() {
		options = &templatesgroup.OptionalBodyClientProviderPostOptions{
			Body: &body,
		}
	}
	respr, errRespr := o.srv.ProviderPost(req.Context(), options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ChangeAllowanceResult, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to OptionalBodyServerTransport
var optionalBodyServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
