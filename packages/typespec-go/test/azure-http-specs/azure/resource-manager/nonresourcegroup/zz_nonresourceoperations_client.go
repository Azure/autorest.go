// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package nonresourcegroup

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// NonResourceOperationsClient - Operations on non resource model should not be marked as `@armResourceOperations`.
// Don't use this type directly, use NewNonResourceOperationsClient() instead.
type NonResourceOperationsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewNonResourceOperationsClient creates a new instance of NonResourceOperationsClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewNonResourceOperationsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*NonResourceOperationsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &NonResourceOperationsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Create -
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - location - The location parameter.
//   - parameter - Another parameter.
//   - body - The request body.
//   - options - NonResourceOperationsClientCreateOptions contains the optional parameters for the NonResourceOperationsClient.Create
//     method.
func (client *NonResourceOperationsClient) Create(ctx context.Context, location string, parameter string, body NonResource, options *NonResourceOperationsClientCreateOptions) (NonResourceOperationsClientCreateResponse, error) {
	var err error
	const operationName = "NonResourceOperationsClient.Create"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createCreateRequest(ctx, location, parameter, body, options)
	if err != nil {
		return NonResourceOperationsClientCreateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NonResourceOperationsClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NonResourceOperationsClientCreateResponse{}, err
	}
	resp, err := client.createHandleResponse(httpResp)
	return resp, err
}

// createCreateRequest creates the Create request.
func (client *NonResourceOperationsClient) createCreateRequest(ctx context.Context, location string, parameter string, body NonResource, _ *NonResourceOperationsClientCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.NonResource/locations/{location}/otherParameters/{parameter}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if parameter == "" {
		return nil, errors.New("parameter parameter cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{parameter}", url.PathEscape(parameter))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// createHandleResponse handles the Create response.
func (client *NonResourceOperationsClient) createHandleResponse(resp *http.Response) (NonResourceOperationsClientCreateResponse, error) {
	result := NonResourceOperationsClientCreateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NonResource); err != nil {
		return NonResourceOperationsClientCreateResponse{}, err
	}
	return result, nil
}

// Get -
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - location - The location parameter.
//   - parameter - Another parameter.
//   - options - NonResourceOperationsClientGetOptions contains the optional parameters for the NonResourceOperationsClient.Get
//     method.
func (client *NonResourceOperationsClient) Get(ctx context.Context, location string, parameter string, options *NonResourceOperationsClientGetOptions) (NonResourceOperationsClientGetResponse, error) {
	var err error
	const operationName = "NonResourceOperationsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, location, parameter, options)
	if err != nil {
		return NonResourceOperationsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NonResourceOperationsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NonResourceOperationsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *NonResourceOperationsClient) getCreateRequest(ctx context.Context, location string, parameter string, _ *NonResourceOperationsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.NonResource/locations/{location}/otherParameters/{parameter}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if parameter == "" {
		return nil, errors.New("parameter parameter cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{parameter}", url.PathEscape(parameter))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *NonResourceOperationsClient) getHandleResponse(resp *http.Response) (NonResourceOperationsClientGetResponse, error) {
	result := NonResourceOperationsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NonResource); err != nil {
		return NonResourceOperationsClientGetResponse{}, err
	}
	return result, nil
}
