// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"methodsubscriptionidgroup"
	"net/http"
	"net/url"
	"regexp"
)

// SubscriptionResource1OperationsServer is a fake server for instances of the methodsubscriptionidgroup.SubscriptionResource1OperationsClient type.
type SubscriptionResource1OperationsServer struct {
	// Delete is the fake for method SubscriptionResource1OperationsClient.Delete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Delete func(ctx context.Context, subscriptionResource1Name string, options *methodsubscriptionidgroup.SubscriptionResource1OperationsClientDeleteOptions) (resp azfake.Responder[methodsubscriptionidgroup.SubscriptionResource1OperationsClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method SubscriptionResource1OperationsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, subscriptionResource1Name string, options *methodsubscriptionidgroup.SubscriptionResource1OperationsClientGetOptions) (resp azfake.Responder[methodsubscriptionidgroup.SubscriptionResource1OperationsClientGetResponse], errResp azfake.ErrorResponder)

	// Put is the fake for method SubscriptionResource1OperationsClient.Put
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	Put func(ctx context.Context, subscriptionResource1Name string, resource methodsubscriptionidgroup.SubscriptionResource1, options *methodsubscriptionidgroup.SubscriptionResource1OperationsClientPutOptions) (resp azfake.Responder[methodsubscriptionidgroup.SubscriptionResource1OperationsClientPutResponse], errResp azfake.ErrorResponder)
}

// NewSubscriptionResource1OperationsServerTransport creates a new instance of SubscriptionResource1OperationsServerTransport with the provided implementation.
// The returned SubscriptionResource1OperationsServerTransport instance is connected to an instance of methodsubscriptionidgroup.SubscriptionResource1OperationsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSubscriptionResource1OperationsServerTransport(srv *SubscriptionResource1OperationsServer) *SubscriptionResource1OperationsServerTransport {
	return &SubscriptionResource1OperationsServerTransport{srv: srv}
}

// SubscriptionResource1OperationsServerTransport connects instances of methodsubscriptionidgroup.SubscriptionResource1OperationsClient to instances of SubscriptionResource1OperationsServer.
// Don't use this type directly, use NewSubscriptionResource1OperationsServerTransport instead.
type SubscriptionResource1OperationsServerTransport struct {
	srv *SubscriptionResource1OperationsServer
}

// Do implements the policy.Transporter interface for SubscriptionResource1OperationsServerTransport.
func (s *SubscriptionResource1OperationsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToMethodFake(req, method)
}

func (s *SubscriptionResource1OperationsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if subscriptionResource1OperationsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = subscriptionResource1OperationsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "SubscriptionResource1OperationsClient.Delete":
				res.resp, res.err = s.dispatchDelete(req)
			case "SubscriptionResource1OperationsClient.Get":
				res.resp, res.err = s.dispatchGet(req)
			case "SubscriptionResource1OperationsClient.Put":
				res.resp, res.err = s.dispatchPut(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (s *SubscriptionResource1OperationsServerTransport) dispatchDelete(req *http.Request) (*http.Response, error) {
	if s.srv.Delete == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Azure\.ResourceManager\.MethodSubscriptionId/subscriptionResource1s/(?P<subscriptionResource1Name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	subscriptionResource1NameParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionResource1Name")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Delete(req.Context(), subscriptionResource1NameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SubscriptionResource1OperationsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if s.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Azure\.ResourceManager\.MethodSubscriptionId/subscriptionResource1s/(?P<subscriptionResource1Name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	subscriptionResource1NameParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionResource1Name")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Get(req.Context(), subscriptionResource1NameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SubscriptionResource1, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SubscriptionResource1OperationsServerTransport) dispatchPut(req *http.Request) (*http.Response, error) {
	if s.srv.Put == nil {
		return nil, &nonRetriableError{errors.New("fake for method Put not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Azure\.ResourceManager\.MethodSubscriptionId/subscriptionResource1s/(?P<subscriptionResource1Name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[methodsubscriptionidgroup.SubscriptionResource1](req)
	if err != nil {
		return nil, err
	}
	subscriptionResource1NameParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionResource1Name")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Put(req.Context(), subscriptionResource1NameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SubscriptionResource1, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to SubscriptionResource1OperationsServerTransport
var subscriptionResource1OperationsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
