// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the methodsubscriptionidgroup.ClientFactory type.
type ServerFactory struct {
	// OperationsServer contains the fakes for client OperationsClient
	OperationsServer OperationsServer

	// ResourceGroupResourceOperationsServer contains the fakes for client ResourceGroupResourceOperationsClient
	ResourceGroupResourceOperationsServer ResourceGroupResourceOperationsServer

	// SubscriptionResource1OperationsServer contains the fakes for client SubscriptionResource1OperationsClient
	SubscriptionResource1OperationsServer SubscriptionResource1OperationsServer

	// SubscriptionResource2OperationsServer contains the fakes for client SubscriptionResource2OperationsClient
	SubscriptionResource2OperationsServer SubscriptionResource2OperationsServer

	// SubscriptionResourceOperationsServer contains the fakes for client SubscriptionResourceOperationsClient
	SubscriptionResourceOperationsServer SubscriptionResourceOperationsServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of methodsubscriptionidgroup.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of methodsubscriptionidgroup.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                                     *ServerFactory
	trMu                                    sync.Mutex
	trOperationsServer                      *OperationsServerTransport
	trResourceGroupResourceOperationsServer *ResourceGroupResourceOperationsServerTransport
	trSubscriptionResource1OperationsServer *SubscriptionResource1OperationsServerTransport
	trSubscriptionResource2OperationsServer *SubscriptionResource2OperationsServerTransport
	trSubscriptionResourceOperationsServer  *SubscriptionResourceOperationsServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "OperationsClient":
		initServer(s, &s.trOperationsServer, func() *OperationsServerTransport { return NewOperationsServerTransport(&s.srv.OperationsServer) })
		resp, err = s.trOperationsServer.Do(req)
	case "ResourceGroupResourceOperationsClient":
		initServer(s, &s.trResourceGroupResourceOperationsServer, func() *ResourceGroupResourceOperationsServerTransport {
			return NewResourceGroupResourceOperationsServerTransport(&s.srv.ResourceGroupResourceOperationsServer)
		})
		resp, err = s.trResourceGroupResourceOperationsServer.Do(req)
	case "SubscriptionResource1OperationsClient":
		initServer(s, &s.trSubscriptionResource1OperationsServer, func() *SubscriptionResource1OperationsServerTransport {
			return NewSubscriptionResource1OperationsServerTransport(&s.srv.SubscriptionResource1OperationsServer)
		})
		resp, err = s.trSubscriptionResource1OperationsServer.Do(req)
	case "SubscriptionResource2OperationsClient":
		initServer(s, &s.trSubscriptionResource2OperationsServer, func() *SubscriptionResource2OperationsServerTransport {
			return NewSubscriptionResource2OperationsServerTransport(&s.srv.SubscriptionResource2OperationsServer)
		})
		resp, err = s.trSubscriptionResource2OperationsServer.Do(req)
	case "SubscriptionResourceOperationsClient":
		initServer(s, &s.trSubscriptionResourceOperationsServer, func() *SubscriptionResourceOperationsServerTransport {
			return NewSubscriptionResourceOperationsServerTransport(&s.srv.SubscriptionResourceOperationsServer)
		})
		resp, err = s.trSubscriptionResourceOperationsServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
