// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package methodsubscriptionidgroup

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ResourceGroupResourceOperationsClient contains the methods for the ResourceGroupResourceOperations group.
// Don't use this type directly, use NewResourceGroupResourceOperationsClient() instead.
type ResourceGroupResourceOperationsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewResourceGroupResourceOperationsClient creates a new instance of ResourceGroupResourceOperationsClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewResourceGroupResourceOperationsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ResourceGroupResourceOperationsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &ResourceGroupResourceOperationsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Delete - Delete a ResourceGroupResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceGroupResourceName - The name of the ResourceGroupResource
//   - options - ResourceGroupResourceOperationsClientDeleteOptions contains the optional parameters for the ResourceGroupResourceOperationsClient.Delete
//     method.
func (client *ResourceGroupResourceOperationsClient) Delete(ctx context.Context, resourceGroupName string, resourceGroupResourceName string, options *ResourceGroupResourceOperationsClientDeleteOptions) (ResourceGroupResourceOperationsClientDeleteResponse, error) {
	var err error
	const operationName = "ResourceGroupResourceOperationsClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, resourceGroupResourceName, options)
	if err != nil {
		return ResourceGroupResourceOperationsClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ResourceGroupResourceOperationsClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ResourceGroupResourceOperationsClientDeleteResponse{}, err
	}
	return ResourceGroupResourceOperationsClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *ResourceGroupResourceOperationsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, resourceGroupResourceName string, _ *ResourceGroupResourceOperationsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.MethodSubscriptionId/resourceGroupResources/{resourceGroupResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceGroupResourceName == "" {
		return nil, errors.New("parameter resourceGroupResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupResourceName}", url.PathEscape(resourceGroupResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// Get - Get a ResourceGroupResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceGroupResourceName - The name of the ResourceGroupResource
//   - options - ResourceGroupResourceOperationsClientGetOptions contains the optional parameters for the ResourceGroupResourceOperationsClient.Get
//     method.
func (client *ResourceGroupResourceOperationsClient) Get(ctx context.Context, resourceGroupName string, resourceGroupResourceName string, options *ResourceGroupResourceOperationsClientGetOptions) (ResourceGroupResourceOperationsClientGetResponse, error) {
	var err error
	const operationName = "ResourceGroupResourceOperationsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, resourceGroupResourceName, options)
	if err != nil {
		return ResourceGroupResourceOperationsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ResourceGroupResourceOperationsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ResourceGroupResourceOperationsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *ResourceGroupResourceOperationsClient) getCreateRequest(ctx context.Context, resourceGroupName string, resourceGroupResourceName string, _ *ResourceGroupResourceOperationsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.MethodSubscriptionId/resourceGroupResources/{resourceGroupResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceGroupResourceName == "" {
		return nil, errors.New("parameter resourceGroupResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupResourceName}", url.PathEscape(resourceGroupResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ResourceGroupResourceOperationsClient) getHandleResponse(resp *http.Response) (ResourceGroupResourceOperationsClientGetResponse, error) {
	result := ResourceGroupResourceOperationsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ResourceGroupResource); err != nil {
		return ResourceGroupResourceOperationsClientGetResponse{}, err
	}
	return result, nil
}

// Put - Create a ResourceGroupResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceGroupResourceName - The name of the ResourceGroupResource
//   - resource - Resource create parameters.
//   - options - ResourceGroupResourceOperationsClientPutOptions contains the optional parameters for the ResourceGroupResourceOperationsClient.Put
//     method.
func (client *ResourceGroupResourceOperationsClient) Put(ctx context.Context, resourceGroupName string, resourceGroupResourceName string, resource ResourceGroupResource, options *ResourceGroupResourceOperationsClientPutOptions) (ResourceGroupResourceOperationsClientPutResponse, error) {
	var err error
	const operationName = "ResourceGroupResourceOperationsClient.Put"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putCreateRequest(ctx, resourceGroupName, resourceGroupResourceName, resource, options)
	if err != nil {
		return ResourceGroupResourceOperationsClientPutResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ResourceGroupResourceOperationsClientPutResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return ResourceGroupResourceOperationsClientPutResponse{}, err
	}
	resp, err := client.putHandleResponse(httpResp)
	return resp, err
}

// putCreateRequest creates the Put request.
func (client *ResourceGroupResourceOperationsClient) putCreateRequest(ctx context.Context, resourceGroupName string, resourceGroupResourceName string, resource ResourceGroupResource, _ *ResourceGroupResourceOperationsClientPutOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.MethodSubscriptionId/resourceGroupResources/{resourceGroupResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceGroupResourceName == "" {
		return nil, errors.New("parameter resourceGroupResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupResourceName}", url.PathEscape(resourceGroupResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// putHandleResponse handles the Put response.
func (client *ResourceGroupResourceOperationsClient) putHandleResponse(resp *http.Response) (ResourceGroupResourceOperationsClientPutResponse, error) {
	result := ResourceGroupResourceOperationsClientPutResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ResourceGroupResource); err != nil {
		return ResourceGroupResourceOperationsClientPutResponse{}, err
	}
	return result, nil
}
