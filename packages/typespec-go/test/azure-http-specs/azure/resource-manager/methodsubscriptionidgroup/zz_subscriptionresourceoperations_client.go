// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package methodsubscriptionidgroup

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// SubscriptionResourceOperationsClient contains the methods for the SubscriptionResourceOperations group.
// Don't use this type directly, use NewSubscriptionResourceOperationsClient() instead.
type SubscriptionResourceOperationsClient struct {
	internal *arm.Client
}

// NewSubscriptionResourceOperationsClient creates a new instance of SubscriptionResourceOperationsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewSubscriptionResourceOperationsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*SubscriptionResourceOperationsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &SubscriptionResourceOperationsClient{
		internal: cl,
	}
	return client, nil
}

// Delete - Delete a SubscriptionResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - subscriptionResourceName - The name of the SubscriptionResource
//   - options - SubscriptionResourceOperationsClientDeleteOptions contains the optional parameters for the SubscriptionResourceOperationsClient.Delete
//     method.
func (client *SubscriptionResourceOperationsClient) Delete(ctx context.Context, subscriptionID string, subscriptionResourceName string, options *SubscriptionResourceOperationsClientDeleteOptions) (SubscriptionResourceOperationsClientDeleteResponse, error) {
	var err error
	const operationName = "SubscriptionResourceOperationsClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, subscriptionID, subscriptionResourceName, options)
	if err != nil {
		return SubscriptionResourceOperationsClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SubscriptionResourceOperationsClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SubscriptionResourceOperationsClientDeleteResponse{}, err
	}
	return SubscriptionResourceOperationsClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *SubscriptionResourceOperationsClient) deleteCreateRequest(ctx context.Context, subscriptionID string, subscriptionResourceName string, _ *SubscriptionResourceOperationsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.MethodSubscriptionId/subscriptionResources/{subscriptionResourceName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if subscriptionResourceName == "" {
		return nil, errors.New("parameter subscriptionResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionResourceName}", url.PathEscape(subscriptionResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// Get - Get a SubscriptionResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - subscriptionResourceName - The name of the SubscriptionResource
//   - options - SubscriptionResourceOperationsClientGetOptions contains the optional parameters for the SubscriptionResourceOperationsClient.Get
//     method.
func (client *SubscriptionResourceOperationsClient) Get(ctx context.Context, subscriptionID string, subscriptionResourceName string, options *SubscriptionResourceOperationsClientGetOptions) (SubscriptionResourceOperationsClientGetResponse, error) {
	var err error
	const operationName = "SubscriptionResourceOperationsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, subscriptionID, subscriptionResourceName, options)
	if err != nil {
		return SubscriptionResourceOperationsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SubscriptionResourceOperationsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SubscriptionResourceOperationsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *SubscriptionResourceOperationsClient) getCreateRequest(ctx context.Context, subscriptionID string, subscriptionResourceName string, _ *SubscriptionResourceOperationsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.MethodSubscriptionId/subscriptionResources/{subscriptionResourceName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if subscriptionResourceName == "" {
		return nil, errors.New("parameter subscriptionResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionResourceName}", url.PathEscape(subscriptionResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SubscriptionResourceOperationsClient) getHandleResponse(resp *http.Response) (SubscriptionResourceOperationsClientGetResponse, error) {
	result := SubscriptionResourceOperationsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SubscriptionResource); err != nil {
		return SubscriptionResourceOperationsClientGetResponse{}, err
	}
	return result, nil
}

// Put - Create a SubscriptionResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - subscriptionResourceName - The name of the SubscriptionResource
//   - resource - Resource create parameters.
//   - options - SubscriptionResourceOperationsClientPutOptions contains the optional parameters for the SubscriptionResourceOperationsClient.Put
//     method.
func (client *SubscriptionResourceOperationsClient) Put(ctx context.Context, subscriptionID string, subscriptionResourceName string, resource SubscriptionResource, options *SubscriptionResourceOperationsClientPutOptions) (SubscriptionResourceOperationsClientPutResponse, error) {
	var err error
	const operationName = "SubscriptionResourceOperationsClient.Put"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putCreateRequest(ctx, subscriptionID, subscriptionResourceName, resource, options)
	if err != nil {
		return SubscriptionResourceOperationsClientPutResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SubscriptionResourceOperationsClientPutResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return SubscriptionResourceOperationsClientPutResponse{}, err
	}
	resp, err := client.putHandleResponse(httpResp)
	return resp, err
}

// putCreateRequest creates the Put request.
func (client *SubscriptionResourceOperationsClient) putCreateRequest(ctx context.Context, subscriptionID string, subscriptionResourceName string, resource SubscriptionResource, _ *SubscriptionResourceOperationsClientPutOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.MethodSubscriptionId/subscriptionResources/{subscriptionResourceName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if subscriptionResourceName == "" {
		return nil, errors.New("parameter subscriptionResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionResourceName}", url.PathEscape(subscriptionResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// putHandleResponse handles the Put response.
func (client *SubscriptionResourceOperationsClient) putHandleResponse(resp *http.Response) (SubscriptionResourceOperationsClientPutResponse, error) {
	result := SubscriptionResourceOperationsClientPutResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SubscriptionResource); err != nil {
		return SubscriptionResourceOperationsClientPutResponse{}, err
	}
	return result, nil
}
