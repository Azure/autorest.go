// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package methodsubscriptionidgroup

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// SubscriptionResource2OperationsClient contains the methods for the SubscriptionResource2Operations group.
// Don't use this type directly, use NewSubscriptionResource2OperationsClient() instead.
type SubscriptionResource2OperationsClient struct {
	internal *arm.Client
}

// NewSubscriptionResource2OperationsClient creates a new instance of SubscriptionResource2OperationsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - Contains optional client configuration. Pass nil to accept the default values.
func NewSubscriptionResource2OperationsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*SubscriptionResource2OperationsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &SubscriptionResource2OperationsClient{
		internal: cl,
	}
	return client, nil
}

// Delete - Delete a SubscriptionResource2
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - subscriptionResource2Name - The name of the SubscriptionResource2
//   - options - SubscriptionResource2OperationsClientDeleteOptions contains the optional parameters for the SubscriptionResource2OperationsClient.Delete
//     method.
func (client *SubscriptionResource2OperationsClient) Delete(ctx context.Context, subscriptionID string, subscriptionResource2Name string, options *SubscriptionResource2OperationsClientDeleteOptions) (SubscriptionResource2OperationsClientDeleteResponse, error) {
	var err error
	const operationName = "SubscriptionResource2OperationsClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, subscriptionID, subscriptionResource2Name, options)
	if err != nil {
		return SubscriptionResource2OperationsClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SubscriptionResource2OperationsClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SubscriptionResource2OperationsClientDeleteResponse{}, err
	}
	return SubscriptionResource2OperationsClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *SubscriptionResource2OperationsClient) deleteCreateRequest(ctx context.Context, subscriptionID string, subscriptionResource2Name string, _ *SubscriptionResource2OperationsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.MethodSubscriptionId/subscriptionResource2s/{subscriptionResource2Name}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if subscriptionResource2Name == "" {
		return nil, errors.New("parameter subscriptionResource2Name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionResource2Name}", url.PathEscape(subscriptionResource2Name))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// Get - Get a SubscriptionResource2
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - subscriptionResource2Name - The name of the SubscriptionResource2
//   - options - SubscriptionResource2OperationsClientGetOptions contains the optional parameters for the SubscriptionResource2OperationsClient.Get
//     method.
func (client *SubscriptionResource2OperationsClient) Get(ctx context.Context, subscriptionID string, subscriptionResource2Name string, options *SubscriptionResource2OperationsClientGetOptions) (SubscriptionResource2OperationsClientGetResponse, error) {
	var err error
	const operationName = "SubscriptionResource2OperationsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, subscriptionID, subscriptionResource2Name, options)
	if err != nil {
		return SubscriptionResource2OperationsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SubscriptionResource2OperationsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SubscriptionResource2OperationsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *SubscriptionResource2OperationsClient) getCreateRequest(ctx context.Context, subscriptionID string, subscriptionResource2Name string, _ *SubscriptionResource2OperationsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.MethodSubscriptionId/subscriptionResource2s/{subscriptionResource2Name}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if subscriptionResource2Name == "" {
		return nil, errors.New("parameter subscriptionResource2Name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionResource2Name}", url.PathEscape(subscriptionResource2Name))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SubscriptionResource2OperationsClient) getHandleResponse(resp *http.Response) (SubscriptionResource2OperationsClientGetResponse, error) {
	result := SubscriptionResource2OperationsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SubscriptionResource2); err != nil {
		return SubscriptionResource2OperationsClientGetResponse{}, err
	}
	return result, nil
}

// Put - Create a SubscriptionResource2
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - subscriptionResource2Name - The name of the SubscriptionResource2
//   - resource - Resource create parameters.
//   - options - SubscriptionResource2OperationsClientPutOptions contains the optional parameters for the SubscriptionResource2OperationsClient.Put
//     method.
func (client *SubscriptionResource2OperationsClient) Put(ctx context.Context, subscriptionID string, subscriptionResource2Name string, resource SubscriptionResource2, options *SubscriptionResource2OperationsClientPutOptions) (SubscriptionResource2OperationsClientPutResponse, error) {
	var err error
	const operationName = "SubscriptionResource2OperationsClient.Put"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putCreateRequest(ctx, subscriptionID, subscriptionResource2Name, resource, options)
	if err != nil {
		return SubscriptionResource2OperationsClientPutResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SubscriptionResource2OperationsClientPutResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return SubscriptionResource2OperationsClientPutResponse{}, err
	}
	resp, err := client.putHandleResponse(httpResp)
	return resp, err
}

// putCreateRequest creates the Put request.
func (client *SubscriptionResource2OperationsClient) putCreateRequest(ctx context.Context, subscriptionID string, subscriptionResource2Name string, resource SubscriptionResource2, _ *SubscriptionResource2OperationsClientPutOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.MethodSubscriptionId/subscriptionResource2s/{subscriptionResource2Name}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if subscriptionResource2Name == "" {
		return nil, errors.New("parameter subscriptionResource2Name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionResource2Name}", url.PathEscape(subscriptionResource2Name))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// putHandleResponse handles the Put response.
func (client *SubscriptionResource2OperationsClient) putHandleResponse(resp *http.Response) (SubscriptionResource2OperationsClientPutResponse, error) {
	result := SubscriptionResource2OperationsClientPutResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SubscriptionResource2); err != nil {
		return SubscriptionResource2OperationsClientPutResponse{}, err
	}
	return result, nil
}
