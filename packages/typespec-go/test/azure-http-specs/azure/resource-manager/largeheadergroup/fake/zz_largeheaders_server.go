// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"largeheadergroup"
	"net/http"
	"net/url"
	"regexp"
)

// LargeHeadersServer is a fake server for instances of the largeheadergroup.LargeHeadersClient type.
type LargeHeadersServer struct {
	// BeginTwo6K is the fake for method LargeHeadersClient.BeginTwo6K
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginTwo6K func(ctx context.Context, resourceGroupName string, largeHeaderName string, options *largeheadergroup.LargeHeadersClientBeginTwo6KOptions) (resp azfake.PollerResponder[largeheadergroup.LargeHeadersClientTwo6KResponse], errResp azfake.ErrorResponder)
}

// NewLargeHeadersServerTransport creates a new instance of LargeHeadersServerTransport with the provided implementation.
// The returned LargeHeadersServerTransport instance is connected to an instance of largeheadergroup.LargeHeadersClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewLargeHeadersServerTransport(srv *LargeHeadersServer) *LargeHeadersServerTransport {
	return &LargeHeadersServerTransport{
		srv:        srv,
		beginTwo6K: newTracker[azfake.PollerResponder[largeheadergroup.LargeHeadersClientTwo6KResponse]](),
	}
}

// LargeHeadersServerTransport connects instances of largeheadergroup.LargeHeadersClient to instances of LargeHeadersServer.
// Don't use this type directly, use NewLargeHeadersServerTransport instead.
type LargeHeadersServerTransport struct {
	srv        *LargeHeadersServer
	beginTwo6K *tracker[azfake.PollerResponder[largeheadergroup.LargeHeadersClientTwo6KResponse]]
}

// Do implements the policy.Transporter interface for LargeHeadersServerTransport.
func (l *LargeHeadersServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return l.dispatchToMethodFake(req, method)
}

func (l *LargeHeadersServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if largeHeadersServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = largeHeadersServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "LargeHeadersClient.BeginTwo6K":
				res.resp, res.err = l.dispatchBeginTwo6K(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (l *LargeHeadersServerTransport) dispatchBeginTwo6K(req *http.Request) (*http.Response, error) {
	if l.srv.BeginTwo6K == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginTwo6K not implemented")}
	}
	beginTwo6K := l.beginTwo6K.get(req)
	if beginTwo6K == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Azure\.ResourceManager\.LargeHeader/largeHeaders/(?P<largeHeaderName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/two6k`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		largeHeaderNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("largeHeaderName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := l.srv.BeginTwo6K(req.Context(), resourceGroupNameParam, largeHeaderNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginTwo6K = &respr
		l.beginTwo6K.add(req, beginTwo6K)
	}

	resp, err := server.PollerResponderNext(beginTwo6K, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		l.beginTwo6K.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginTwo6K) {
		l.beginTwo6K.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to LargeHeadersServerTransport
var largeHeadersServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
