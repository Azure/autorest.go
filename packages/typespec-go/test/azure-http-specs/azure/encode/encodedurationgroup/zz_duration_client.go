// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package encodedurationgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// DurationClient - Test for azure related encode decorator.
// Don't use this type directly, use NewDurationClientWithNoCredential() instead.
type DurationClient struct {
	internal *azcore.Client
	endpoint string
}

// DurationClientOptions contains the optional values for creating a [DurationClient].
type DurationClientOptions struct {
	azcore.ClientOptions
}

// NewDurationClientWithNoCredential creates a new instance of DurationClient with the specified values.
//   - endpoint - Service host
//   - DurationClientOptions - DurationClientOptions contains the optional values for creating a [DurationClient]
func NewDurationClientWithNoCredential(endpoint string, options *DurationClientOptions) (*DurationClient, error) {
	if options == nil {
		options = &DurationClientOptions{}
	}
	cl, err := azcore.NewClient(moduleName, moduleVersion, runtime.PipelineOptions{}, &options.ClientOptions)
	if err != nil {
		return nil, err
	}
	client := &DurationClient{
		endpoint: endpoint,
		internal: cl,
	}
	return client, nil
}

// DurationConstant - Test duration with azure specific encoding.
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - DurationClientDurationConstantOptions contains the optional parameters for the DurationClient.DurationConstant
//     method.
func (client *DurationClient) DurationConstant(ctx context.Context, body DurationModel, options *DurationClientDurationConstantOptions) (DurationClientDurationConstantResponse, error) {
	var err error
	const operationName = "DurationClient.DurationConstant"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.durationConstantCreateRequest(ctx, body, options)
	if err != nil {
		return DurationClientDurationConstantResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DurationClientDurationConstantResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return DurationClientDurationConstantResponse{}, err
	}
	return DurationClientDurationConstantResponse{}, nil
}

// durationConstantCreateRequest creates the DurationConstant request.
func (client *DurationClient) durationConstantCreateRequest(ctx context.Context, body DurationModel, _ *DurationClientDurationConstantOptions) (*policy.Request, error) {
	urlPath := "/azure/encode/duration/duration-constant"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}
