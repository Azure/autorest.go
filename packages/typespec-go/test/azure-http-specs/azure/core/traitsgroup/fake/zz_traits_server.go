// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
	"time"
	"traitsgroup"
)

// TraitsServer is a fake server for instances of the traitsgroup.TraitsClient type.
type TraitsServer struct {
	// RepeatableAction is the fake for method TraitsClient.RepeatableAction
	// HTTP status codes to indicate success: http.StatusOK
	RepeatableAction func(ctx context.Context, id int32, body traitsgroup.UserActionParam, options *traitsgroup.TraitsClientRepeatableActionOptions) (resp azfake.Responder[traitsgroup.TraitsClientRepeatableActionResponse], errResp azfake.ErrorResponder)

	// SmokeTest is the fake for method TraitsClient.SmokeTest
	// HTTP status codes to indicate success: http.StatusOK
	SmokeTest func(ctx context.Context, id int32, foo string, options *traitsgroup.TraitsClientSmokeTestOptions) (resp azfake.Responder[traitsgroup.TraitsClientSmokeTestResponse], errResp azfake.ErrorResponder)
}

// NewTraitsServerTransport creates a new instance of TraitsServerTransport with the provided implementation.
// The returned TraitsServerTransport instance is connected to an instance of traitsgroup.TraitsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewTraitsServerTransport(srv *TraitsServer) *TraitsServerTransport {
	return &TraitsServerTransport{srv: srv}
}

// TraitsServerTransport connects instances of traitsgroup.TraitsClient to instances of TraitsServer.
// Don't use this type directly, use NewTraitsServerTransport instead.
type TraitsServerTransport struct {
	srv *TraitsServer
}

// Do implements the policy.Transporter interface for TraitsServerTransport.
func (t *TraitsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return t.dispatchToMethodFake(req, method)
}

func (t *TraitsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if traitsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = traitsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "TraitsClient.RepeatableAction":
				res.resp, res.err = t.dispatchRepeatableAction(req)
			case "TraitsClient.SmokeTest":
				res.resp, res.err = t.dispatchSmokeTest(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (t *TraitsServerTransport) dispatchRepeatableAction(req *http.Request) (*http.Response, error) {
	if t.srv.RepeatableAction == nil {
		return nil, &nonRetriableError{errors.New("fake for method RepeatableAction not implemented")}
	}
	const regexStr = `/azure/core/traits/user/(?P<id>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+):repeatableAction`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[traitsgroup.UserActionParam](req)
	if err != nil {
		return nil, err
	}
	idUnescaped, err := url.PathUnescape(matches[regex.SubexpIndex("id")])
	if err != nil {
		return nil, err
	}
	idParam, err := parseWithCast(idUnescaped, func(v string) (int32, error) {
		p, parseErr := strconv.ParseInt(v, 10, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	repeatabilityRequestIDParam := getOptional(getHeaderValue(req.Header, "Repeatability-Request-ID"))
	repeatabilityFirstSentParam, err := parseOptional(getHeaderValue(req.Header, "Repeatability-First-Sent"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	var options *traitsgroup.TraitsClientRepeatableActionOptions
	if repeatabilityRequestIDParam != nil || repeatabilityFirstSentParam != nil {
		options = &traitsgroup.TraitsClientRepeatableActionOptions{
			RepeatabilityRequestID: repeatabilityRequestIDParam,
			RepeatabilityFirstSent: repeatabilityFirstSentParam,
		}
	}
	respr, errRespr := t.srv.RepeatableAction(req.Context(), idParam, body, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).UserActionResponse, req)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).RepeatabilityResult; val != nil {
		resp.Header.Set("Repeatability-Result", string(*val))
	}
	return resp, nil
}

func (t *TraitsServerTransport) dispatchSmokeTest(req *http.Request) (*http.Response, error) {
	if t.srv.SmokeTest == nil {
		return nil, &nonRetriableError{errors.New("fake for method SmokeTest not implemented")}
	}
	const regexStr = `/azure/core/traits/user/(?P<id>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	idUnescaped, err := url.PathUnescape(matches[regex.SubexpIndex("id")])
	if err != nil {
		return nil, err
	}
	idParam, err := parseWithCast(idUnescaped, func(v string) (int32, error) {
		p, parseErr := strconv.ParseInt(v, 10, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
	ifNoneMatchParam := getOptional(getHeaderValue(req.Header, "If-None-Match"))
	ifUnmodifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Unmodified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	ifModifiedSinceParam, err := parseOptional(getHeaderValue(req.Header, "If-Modified-Since"), func(v string) (time.Time, error) { return time.Parse(time.RFC1123, v) })
	if err != nil {
		return nil, err
	}
	clientRequestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-client-request-id"))
	var options *traitsgroup.TraitsClientSmokeTestOptions
	if ifMatchParam != nil || ifNoneMatchParam != nil || ifUnmodifiedSinceParam != nil || ifModifiedSinceParam != nil || clientRequestIDParam != nil {
		options = &traitsgroup.TraitsClientSmokeTestOptions{
			IfMatch:           ifMatchParam,
			IfNoneMatch:       ifNoneMatchParam,
			IfUnmodifiedSince: ifUnmodifiedSinceParam,
			IfModifiedSince:   ifModifiedSinceParam,
			ClientRequestID:   clientRequestIDParam,
		}
	}
	respr, errRespr := t.srv.SmokeTest(req.Context(), idParam, getHeaderValue(req.Header, "foo"), options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).User, req)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).Bar; val != nil {
		resp.Header.Set("bar", *val)
	}
	if val := server.GetResponse(respr).ETag; val != nil {
		resp.Header.Set("ETag", *val)
	}
	if val := server.GetResponse(respr).XMSClientRequestID; val != nil {
		resp.Header.Set("x-ms-client-request-id", *val)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to TraitsServerTransport
var traitsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
