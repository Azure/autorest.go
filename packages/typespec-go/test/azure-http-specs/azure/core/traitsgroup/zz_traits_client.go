// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package traitsgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
	"time"
)

// TraitsClient - Illustrates Azure Core operation customizations by traits
// Don't use this type directly, use NewTraitsClientWithNoCredential() instead.
type TraitsClient struct {
	internal *azcore.Client
	endpoint string
}

// TraitsClientOptions contains the optional values for creating a [TraitsClient].
type TraitsClientOptions struct {
	azcore.ClientOptions
}

// NewTraitsClientWithNoCredential creates a new instance of TraitsClient with the specified values.
//   - endpoint - Service host
//   - options - Contains optional client configuration. Pass nil to accept the default values.
func NewTraitsClientWithNoCredential(endpoint string, options *TraitsClientOptions) (*TraitsClient, error) {
	if options == nil {
		options = &TraitsClientOptions{}
	}
	cl, err := azcore.NewClient(moduleName, moduleVersion, runtime.PipelineOptions{
		APIVersion: runtime.APIVersionOptions{
			Name:     "api-version",
			Location: runtime.APIVersionLocationQueryParam,
		},
	}, &options.ClientOptions)
	if err != nil {
		return nil, err
	}
	client := &TraitsClient{
		endpoint: endpoint,
		internal: cl,
	}
	return client, nil
}

// RepeatableAction - Test for repeatable requests
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-01-preview
//   - id - The user's id.
//   - body - The body parameter.
//   - options - TraitsClientRepeatableActionOptions contains the optional parameters for the TraitsClient.RepeatableAction method.
func (client *TraitsClient) RepeatableAction(ctx context.Context, id int32, body UserActionParam, options *TraitsClientRepeatableActionOptions) (TraitsClientRepeatableActionResponse, error) {
	var err error
	const operationName = "TraitsClient.RepeatableAction"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.repeatableActionCreateRequest(ctx, id, body, options)
	if err != nil {
		return TraitsClientRepeatableActionResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return TraitsClientRepeatableActionResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return TraitsClientRepeatableActionResponse{}, err
	}
	resp, err := client.repeatableActionHandleResponse(httpResp)
	return resp, err
}

// repeatableActionCreateRequest creates the RepeatableAction request.
func (client *TraitsClient) repeatableActionCreateRequest(ctx context.Context, id int32, body UserActionParam, options *TraitsClientRepeatableActionOptions) (*policy.Request, error) {
	urlPath := "/azure/core/traits/user/{id}:repeatableAction"
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(strconv.FormatInt(int64(id), 10)))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.RepeatabilityFirstSent != nil {
		req.Raw().Header["Repeatability-First-Sent"] = []string{options.RepeatabilityFirstSent.Format(time.RFC1123)}
	}
	if options != nil && options.RepeatabilityRequestID != nil {
		req.Raw().Header["Repeatability-Request-ID"] = []string{*options.RepeatabilityRequestID}
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// repeatableActionHandleResponse handles the RepeatableAction response.
func (client *TraitsClient) repeatableActionHandleResponse(resp *http.Response) (TraitsClientRepeatableActionResponse, error) {
	result := TraitsClientRepeatableActionResponse{}
	if val := resp.Header.Get("Repeatability-Result"); val != "" {
		result.RepeatabilityResult = (*RepeatabilityResult)(&val)
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.UserActionResponse); err != nil {
		return TraitsClientRepeatableActionResponse{}, err
	}
	return result, nil
}

// SmokeTest - Get a resource, sending and receiving headers.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-01-preview
//   - id - The user's id.
//   - foo - header in request
//   - options - TraitsClientSmokeTestOptions contains the optional parameters for the TraitsClient.SmokeTest method.
func (client *TraitsClient) SmokeTest(ctx context.Context, id int32, foo string, options *TraitsClientSmokeTestOptions) (TraitsClientSmokeTestResponse, error) {
	var err error
	const operationName = "TraitsClient.SmokeTest"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.smokeTestCreateRequest(ctx, id, foo, options)
	if err != nil {
		return TraitsClientSmokeTestResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return TraitsClientSmokeTestResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return TraitsClientSmokeTestResponse{}, err
	}
	resp, err := client.smokeTestHandleResponse(httpResp)
	return resp, err
}

// smokeTestCreateRequest creates the SmokeTest request.
func (client *TraitsClient) smokeTestCreateRequest(ctx context.Context, id int32, foo string, options *TraitsClientSmokeTestOptions) (*policy.Request, error) {
	urlPath := "/azure/core/traits/user/{id}"
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(strconv.FormatInt(int64(id), 10)))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.IfMatch != nil {
		req.Raw().Header["If-Match"] = []string{*options.IfMatch}
	}
	if options != nil && options.IfModifiedSince != nil {
		req.Raw().Header["If-Modified-Since"] = []string{options.IfModifiedSince.Format(time.RFC1123)}
	}
	if options != nil && options.IfNoneMatch != nil {
		req.Raw().Header["If-None-Match"] = []string{*options.IfNoneMatch}
	}
	if options != nil && options.IfUnmodifiedSince != nil {
		req.Raw().Header["If-Unmodified-Since"] = []string{options.IfUnmodifiedSince.Format(time.RFC1123)}
	}
	req.Raw().Header["foo"] = []string{foo}
	if options != nil && options.ClientRequestID != nil {
		req.Raw().Header["x-ms-client-request-id"] = []string{*options.ClientRequestID}
	}
	return req, nil
}

// smokeTestHandleResponse handles the SmokeTest response.
func (client *TraitsClient) smokeTestHandleResponse(resp *http.Response) (TraitsClientSmokeTestResponse, error) {
	result := TraitsClientSmokeTestResponse{}
	if val := resp.Header.Get("bar"); val != "" {
		result.Bar = &val
	}
	if val := resp.Header.Get("ETag"); val != "" {
		result.ETag = &val
	}
	if val := resp.Header.Get("x-ms-client-request-id"); val != "" {
		result.XMSClientRequestID = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.User); err != nil {
		return TraitsClientSmokeTestResponse{}, err
	}
	return result, nil
}
