// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"net/http"
	"strings"
	"sync"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// ModelServer is a fake server for instances of the coremodelgroup.ModelClient type.
type ModelServer struct {
	// ModelAzureCoreEmbeddingVectorServer contains the fakes for client ModelAzureCoreEmbeddingVectorClient
	ModelAzureCoreEmbeddingVectorServer ModelAzureCoreEmbeddingVectorServer
}

// NewModelServerTransport creates a new instance of ModelServerTransport with the provided implementation.
// The returned ModelServerTransport instance is connected to an instance of coremodelgroup.ModelClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewModelServerTransport(srv *ModelServer) *ModelServerTransport {
	return &ModelServerTransport{srv: srv}
}

// ModelServerTransport connects instances of coremodelgroup.ModelClient to instances of ModelServer.
// Don't use this type directly, use NewModelServerTransport instead.
type ModelServerTransport struct {
	srv                                   *ModelServer
	trMu                                  sync.Mutex
	trModelAzureCoreEmbeddingVectorServer *ModelAzureCoreEmbeddingVectorServerTransport
}

// Do implements the policy.Transporter interface for ModelServerTransport.
func (m *ModelServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return m.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (m *ModelServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "ModelAzureCoreEmbeddingVectorClient":
		initServer(&m.trMu, &m.trModelAzureCoreEmbeddingVectorServer, func() *ModelAzureCoreEmbeddingVectorServerTransport {
			return NewModelAzureCoreEmbeddingVectorServerTransport(&m.srv.ModelAzureCoreEmbeddingVectorServer)
		})
		resp, err = m.trModelAzureCoreEmbeddingVectorServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}

// set this to conditionally intercept incoming requests to ModelServerTransport
var modelServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
