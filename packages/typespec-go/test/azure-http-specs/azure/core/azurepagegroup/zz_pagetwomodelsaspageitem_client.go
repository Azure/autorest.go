// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package azurepagegroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// PageTwoModelsAsPageItemClient contains the methods for the PageTwoModelsAsPageItem group.
// Don't use this type directly, use [PageClient.NewPageTwoModelsAsPageItemClient] instead.
type PageTwoModelsAsPageItemClient struct {
	internal *azcore.Client
}

// NewListFirstItemPager - Two operations with two different page item types should be successfully generated. Should generate
// model for FirstItem.
//
// Generated from API version 2022-12-01-preview
//   - options - PageTwoModelsAsPageItemClientListFirstItemOptions contains the optional parameters for the PageTwoModelsAsPageItemClient.NewListFirstItemPager
//     method.
func (client *PageTwoModelsAsPageItemClient) NewListFirstItemPager(options *PageTwoModelsAsPageItemClientListFirstItemOptions) *runtime.Pager[PageTwoModelsAsPageItemClientListFirstItemResponse] {
	return runtime.NewPager(runtime.PagingHandler[PageTwoModelsAsPageItemClientListFirstItemResponse]{
		More: func(page PageTwoModelsAsPageItemClientListFirstItemResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PageTwoModelsAsPageItemClientListFirstItemResponse) (PageTwoModelsAsPageItemClientListFirstItemResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PageTwoModelsAsPageItemClient.NewListFirstItemPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listFirstItemCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return PageTwoModelsAsPageItemClientListFirstItemResponse{}, err
			}
			return client.listFirstItemHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listFirstItemCreateRequest creates the ListFirstItem request.
func (client *PageTwoModelsAsPageItemClient) listFirstItemCreateRequest(ctx context.Context, _ *PageTwoModelsAsPageItemClientListFirstItemOptions) (*policy.Request, error) {
	urlPath := "/azure/core/page/first-item"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listFirstItemHandleResponse handles the ListFirstItem response.
func (client *PageTwoModelsAsPageItemClient) listFirstItemHandleResponse(resp *http.Response) (PageTwoModelsAsPageItemClientListFirstItemResponse, error) {
	result := PageTwoModelsAsPageItemClientListFirstItemResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PagedFirstItem); err != nil {
		return PageTwoModelsAsPageItemClientListFirstItemResponse{}, err
	}
	return result, nil
}

// NewListSecondItemPager - Two operations with two different page item types should be successfully generated. Should generate
// model for SecondItem.
//
// Generated from API version 2022-12-01-preview
//   - options - PageTwoModelsAsPageItemClientListSecondItemOptions contains the optional parameters for the PageTwoModelsAsPageItemClient.NewListSecondItemPager
//     method.
func (client *PageTwoModelsAsPageItemClient) NewListSecondItemPager(options *PageTwoModelsAsPageItemClientListSecondItemOptions) *runtime.Pager[PageTwoModelsAsPageItemClientListSecondItemResponse] {
	return runtime.NewPager(runtime.PagingHandler[PageTwoModelsAsPageItemClientListSecondItemResponse]{
		More: func(page PageTwoModelsAsPageItemClientListSecondItemResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PageTwoModelsAsPageItemClientListSecondItemResponse) (PageTwoModelsAsPageItemClientListSecondItemResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PageTwoModelsAsPageItemClient.NewListSecondItemPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listSecondItemCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return PageTwoModelsAsPageItemClientListSecondItemResponse{}, err
			}
			return client.listSecondItemHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listSecondItemCreateRequest creates the ListSecondItem request.
func (client *PageTwoModelsAsPageItemClient) listSecondItemCreateRequest(ctx context.Context, _ *PageTwoModelsAsPageItemClientListSecondItemOptions) (*policy.Request, error) {
	urlPath := "/azure/core/page/second-item"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listSecondItemHandleResponse handles the ListSecondItem response.
func (client *PageTwoModelsAsPageItemClient) listSecondItemHandleResponse(resp *http.Response) (PageTwoModelsAsPageItemClientListSecondItemResponse, error) {
	result := PageTwoModelsAsPageItemClientListSecondItemResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PagedSecondItem); err != nil {
		return PageTwoModelsAsPageItemClientListSecondItemResponse{}, err
	}
	return result, nil
}
