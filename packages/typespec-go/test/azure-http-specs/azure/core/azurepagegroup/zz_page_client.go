// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package azurepagegroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// PageClient - Illustrates bodies templated with Azure Core with paging support
// Don't use this type directly, use a constructor function instead.
type PageClient struct {
	internal *azcore.Client
}

// NewPageTwoModelsAsPageItemClient creates a new instance of [PageTwoModelsAsPageItemClient].
func (client *PageClient) NewPageTwoModelsAsPageItemClient() *PageTwoModelsAsPageItemClient {
	return &PageTwoModelsAsPageItemClient{
		internal: client.internal,
	}
}

// NewListWithCustomPageModelPager - List with custom page model.
//
// Generated from API version 2022-12-01-preview
//   - options - PageClientListWithCustomPageModelOptions contains the optional parameters for the PageClient.NewListWithCustomPageModelPager
//     method.
func (client *PageClient) NewListWithCustomPageModelPager(options *PageClientListWithCustomPageModelOptions) *runtime.Pager[PageClientListWithCustomPageModelResponse] {
	return runtime.NewPager(runtime.PagingHandler[PageClientListWithCustomPageModelResponse]{
		More: func(page PageClientListWithCustomPageModelResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PageClientListWithCustomPageModelResponse) (PageClientListWithCustomPageModelResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PageClient.NewListWithCustomPageModelPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listWithCustomPageModelCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return PageClientListWithCustomPageModelResponse{}, err
			}
			return client.listWithCustomPageModelHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listWithCustomPageModelCreateRequest creates the ListWithCustomPageModel request.
func (client *PageClient) listWithCustomPageModelCreateRequest(ctx context.Context, _ *PageClientListWithCustomPageModelOptions) (*policy.Request, error) {
	urlPath := "/azure/core/page/custom-page"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listWithCustomPageModelHandleResponse handles the ListWithCustomPageModel response.
func (client *PageClient) listWithCustomPageModelHandleResponse(resp *http.Response) (PageClientListWithCustomPageModelResponse, error) {
	result := PageClientListWithCustomPageModelResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.UserListResults); err != nil {
		return PageClientListWithCustomPageModelResponse{}, err
	}
	return result, nil
}

// NewListWithPagePager - List with Azure.Core.Page<>.
//
// Generated from API version 2022-12-01-preview
//   - options - PageClientListWithPageOptions contains the optional parameters for the PageClient.NewListWithPagePager method.
func (client *PageClient) NewListWithPagePager(options *PageClientListWithPageOptions) *runtime.Pager[PageClientListWithPageResponse] {
	return runtime.NewPager(runtime.PagingHandler[PageClientListWithPageResponse]{
		More: func(page PageClientListWithPageResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PageClientListWithPageResponse) (PageClientListWithPageResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PageClient.NewListWithPagePager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listWithPageCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return PageClientListWithPageResponse{}, err
			}
			return client.listWithPageHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listWithPageCreateRequest creates the ListWithPage request.
func (client *PageClient) listWithPageCreateRequest(ctx context.Context, _ *PageClientListWithPageOptions) (*policy.Request, error) {
	urlPath := "/azure/core/page/page"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listWithPageHandleResponse handles the ListWithPage response.
func (client *PageClient) listWithPageHandleResponse(resp *http.Response) (PageClientListWithPageResponse, error) {
	result := PageClientListWithPageResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PagedUser); err != nil {
		return PageClientListWithPageResponse{}, err
	}
	return result, nil
}

// NewListWithParametersPager - List with extensible enum parameter Azure.Core.Page<>.
//
// Generated from API version 2022-12-01-preview
//   - bodyInput - The body of the input.
//   - options - PageClientListWithParametersOptions contains the optional parameters for the PageClient.NewListWithParametersPager
//     method.
func (client *PageClient) NewListWithParametersPager(bodyInput ListItemInputBody, options *PageClientListWithParametersOptions) *runtime.Pager[PageClientListWithParametersResponse] {
	return runtime.NewPager(runtime.PagingHandler[PageClientListWithParametersResponse]{
		More: func(page PageClientListWithParametersResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PageClientListWithParametersResponse) (PageClientListWithParametersResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PageClient.NewListWithParametersPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listWithParametersCreateRequest(ctx, bodyInput, options)
			}, nil)
			if err != nil {
				return PageClientListWithParametersResponse{}, err
			}
			return client.listWithParametersHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listWithParametersCreateRequest creates the ListWithParameters request.
func (client *PageClient) listWithParametersCreateRequest(ctx context.Context, bodyInput ListItemInputBody, options *PageClientListWithParametersOptions) (*policy.Request, error) {
	urlPath := "/azure/core/page/parameters"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Another != nil {
		reqQP.Set("another", string(*options.Another))
	}
	reqQP.Set("api-version", "2022-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, bodyInput); err != nil {
		return nil, err
	}
	return req, nil
}

// listWithParametersHandleResponse handles the ListWithParameters response.
func (client *PageClient) listWithParametersHandleResponse(resp *http.Response) (PageClientListWithParametersResponse, error) {
	result := PageClientListWithParametersResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PagedUser); err != nil {
		return PageClientListWithParametersResponse{}, err
	}
	return result, nil
}
