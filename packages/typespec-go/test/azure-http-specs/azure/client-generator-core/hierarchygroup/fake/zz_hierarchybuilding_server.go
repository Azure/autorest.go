// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// HierarchyBuildingServer is a fake server for instances of the hierarchygroup.HierarchyBuildingClient type.
type HierarchyBuildingServer struct {
	// HierarchyBuildingAnimalOperationsServer contains the fakes for client HierarchyBuildingAnimalOperationsClient
	HierarchyBuildingAnimalOperationsServer HierarchyBuildingAnimalOperationsServer

	// HierarchyBuildingDogOperationsServer contains the fakes for client HierarchyBuildingDogOperationsClient
	HierarchyBuildingDogOperationsServer HierarchyBuildingDogOperationsServer

	// HierarchyBuildingPetOperationsServer contains the fakes for client HierarchyBuildingPetOperationsClient
	HierarchyBuildingPetOperationsServer HierarchyBuildingPetOperationsServer
}

// NewHierarchyBuildingServerTransport creates a new instance of HierarchyBuildingServerTransport with the provided implementation.
// The returned HierarchyBuildingServerTransport instance is connected to an instance of hierarchygroup.HierarchyBuildingClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewHierarchyBuildingServerTransport(srv *HierarchyBuildingServer) *HierarchyBuildingServerTransport {
	return &HierarchyBuildingServerTransport{srv: srv}
}

// HierarchyBuildingServerTransport connects instances of hierarchygroup.HierarchyBuildingClient to instances of HierarchyBuildingServer.
// Don't use this type directly, use NewHierarchyBuildingServerTransport instead.
type HierarchyBuildingServerTransport struct {
	srv                                       *HierarchyBuildingServer
	trMu                                      sync.Mutex
	trHierarchyBuildingAnimalOperationsServer *HierarchyBuildingAnimalOperationsServerTransport
	trHierarchyBuildingDogOperationsServer    *HierarchyBuildingDogOperationsServerTransport
	trHierarchyBuildingPetOperationsServer    *HierarchyBuildingPetOperationsServerTransport
}

// Do implements the policy.Transporter interface for HierarchyBuildingServerTransport.
func (h *HierarchyBuildingServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return h.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (h *HierarchyBuildingServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "HierarchyBuildingAnimalOperationsClient":
		initServer(&h.trMu, &h.trHierarchyBuildingAnimalOperationsServer, func() *HierarchyBuildingAnimalOperationsServerTransport {
			return NewHierarchyBuildingAnimalOperationsServerTransport(&h.srv.HierarchyBuildingAnimalOperationsServer)
		})
		resp, err = h.trHierarchyBuildingAnimalOperationsServer.Do(req)
	case "HierarchyBuildingDogOperationsClient":
		initServer(&h.trMu, &h.trHierarchyBuildingDogOperationsServer, func() *HierarchyBuildingDogOperationsServerTransport {
			return NewHierarchyBuildingDogOperationsServerTransport(&h.srv.HierarchyBuildingDogOperationsServer)
		})
		resp, err = h.trHierarchyBuildingDogOperationsServer.Do(req)
	case "HierarchyBuildingPetOperationsClient":
		initServer(&h.trMu, &h.trHierarchyBuildingPetOperationsServer, func() *HierarchyBuildingPetOperationsServerTransport {
			return NewHierarchyBuildingPetOperationsServerTransport(&h.srv.HierarchyBuildingPetOperationsServer)
		})
		resp, err = h.trHierarchyBuildingPetOperationsServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}

// set this to conditionally intercept incoming requests to HierarchyBuildingServerTransport
var hierarchyBuildingServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
