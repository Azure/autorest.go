// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package hierarchygroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// HierarchyBuildingAnimalOperationsClient contains the methods for the HierarchyBuildingAnimalOperations group.
// Don't use this type directly, use [HierarchyBuildingClient.NewHierarchyBuildingAnimalOperationsClient] instead.
type HierarchyBuildingAnimalOperationsClient struct {
	internal *azcore.Client
	endpoint string
}

// UpdateDogAsAnimal - Update a dog as an animal
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - HierarchyBuildingAnimalOperationsClientUpdateDogAsAnimalOptions contains the optional parameters for the HierarchyBuildingAnimalOperationsClient.UpdateDogAsAnimal
//     method.
func (client *HierarchyBuildingAnimalOperationsClient) UpdateDogAsAnimal(ctx context.Context, animal AnimalClassification, options *HierarchyBuildingAnimalOperationsClientUpdateDogAsAnimalOptions) (HierarchyBuildingAnimalOperationsClientUpdateDogAsAnimalResponse, error) {
	var err error
	const operationName = "HierarchyBuildingAnimalOperationsClient.UpdateDogAsAnimal"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateDogAsAnimalCreateRequest(ctx, animal, options)
	if err != nil {
		return HierarchyBuildingAnimalOperationsClientUpdateDogAsAnimalResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HierarchyBuildingAnimalOperationsClientUpdateDogAsAnimalResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return HierarchyBuildingAnimalOperationsClientUpdateDogAsAnimalResponse{}, err
	}
	resp, err := client.updateDogAsAnimalHandleResponse(httpResp)
	return resp, err
}

// updateDogAsAnimalCreateRequest creates the UpdateDogAsAnimal request.
func (client *HierarchyBuildingAnimalOperationsClient) updateDogAsAnimalCreateRequest(ctx context.Context, animal AnimalClassification, _ *HierarchyBuildingAnimalOperationsClientUpdateDogAsAnimalOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/hierarchy-building/dog/as-animal"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, animal); err != nil {
		return nil, err
	}
	return req, nil
}

// updateDogAsAnimalHandleResponse handles the UpdateDogAsAnimal response.
func (client *HierarchyBuildingAnimalOperationsClient) updateDogAsAnimalHandleResponse(resp *http.Response) (HierarchyBuildingAnimalOperationsClientUpdateDogAsAnimalResponse, error) {
	result := HierarchyBuildingAnimalOperationsClientUpdateDogAsAnimalResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result); err != nil {
		return HierarchyBuildingAnimalOperationsClientUpdateDogAsAnimalResponse{}, err
	}
	return result, nil
}

// UpdatePetAsAnimal - Update a pet as an animal
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - HierarchyBuildingAnimalOperationsClientUpdatePetAsAnimalOptions contains the optional parameters for the HierarchyBuildingAnimalOperationsClient.UpdatePetAsAnimal
//     method.
func (client *HierarchyBuildingAnimalOperationsClient) UpdatePetAsAnimal(ctx context.Context, animal AnimalClassification, options *HierarchyBuildingAnimalOperationsClientUpdatePetAsAnimalOptions) (HierarchyBuildingAnimalOperationsClientUpdatePetAsAnimalResponse, error) {
	var err error
	const operationName = "HierarchyBuildingAnimalOperationsClient.UpdatePetAsAnimal"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updatePetAsAnimalCreateRequest(ctx, animal, options)
	if err != nil {
		return HierarchyBuildingAnimalOperationsClientUpdatePetAsAnimalResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HierarchyBuildingAnimalOperationsClientUpdatePetAsAnimalResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return HierarchyBuildingAnimalOperationsClientUpdatePetAsAnimalResponse{}, err
	}
	resp, err := client.updatePetAsAnimalHandleResponse(httpResp)
	return resp, err
}

// updatePetAsAnimalCreateRequest creates the UpdatePetAsAnimal request.
func (client *HierarchyBuildingAnimalOperationsClient) updatePetAsAnimalCreateRequest(ctx context.Context, animal AnimalClassification, _ *HierarchyBuildingAnimalOperationsClientUpdatePetAsAnimalOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/hierarchy-building/pet/as-animal"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, animal); err != nil {
		return nil, err
	}
	return req, nil
}

// updatePetAsAnimalHandleResponse handles the UpdatePetAsAnimal response.
func (client *HierarchyBuildingAnimalOperationsClient) updatePetAsAnimalHandleResponse(resp *http.Response) (HierarchyBuildingAnimalOperationsClientUpdatePetAsAnimalResponse, error) {
	result := HierarchyBuildingAnimalOperationsClientUpdatePetAsAnimalResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result); err != nil {
		return HierarchyBuildingAnimalOperationsClientUpdatePetAsAnimalResponse{}, err
	}
	return result, nil
}
