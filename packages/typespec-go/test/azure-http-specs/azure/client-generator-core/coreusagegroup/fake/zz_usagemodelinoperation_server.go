// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"coreusagegroup"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// UsageModelInOperationServer is a fake server for instances of the coreusagegroup.UsageModelInOperationClient type.
type UsageModelInOperationServer struct {
	// InputToInputOutput is the fake for method UsageModelInOperationClient.InputToInputOutput
	// HTTP status codes to indicate success: http.StatusNoContent
	InputToInputOutput func(ctx context.Context, body coreusagegroup.InputModel, options *coreusagegroup.UsageModelInOperationClientInputToInputOutputOptions) (resp azfake.Responder[coreusagegroup.UsageModelInOperationClientInputToInputOutputResponse], errResp azfake.ErrorResponder)

	// ModelInReadOnlyProperty is the fake for method UsageModelInOperationClient.ModelInReadOnlyProperty
	// HTTP status codes to indicate success: http.StatusOK
	ModelInReadOnlyProperty func(ctx context.Context, body coreusagegroup.RoundTripModel, options *coreusagegroup.UsageModelInOperationClientModelInReadOnlyPropertyOptions) (resp azfake.Responder[coreusagegroup.UsageModelInOperationClientModelInReadOnlyPropertyResponse], errResp azfake.ErrorResponder)

	// OutputToInputOutput is the fake for method UsageModelInOperationClient.OutputToInputOutput
	// HTTP status codes to indicate success: http.StatusOK
	OutputToInputOutput func(ctx context.Context, options *coreusagegroup.UsageModelInOperationClientOutputToInputOutputOptions) (resp azfake.Responder[coreusagegroup.UsageModelInOperationClientOutputToInputOutputResponse], errResp azfake.ErrorResponder)
}

// NewUsageModelInOperationServerTransport creates a new instance of UsageModelInOperationServerTransport with the provided implementation.
// The returned UsageModelInOperationServerTransport instance is connected to an instance of coreusagegroup.UsageModelInOperationClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewUsageModelInOperationServerTransport(srv *UsageModelInOperationServer) *UsageModelInOperationServerTransport {
	return &UsageModelInOperationServerTransport{srv: srv}
}

// UsageModelInOperationServerTransport connects instances of coreusagegroup.UsageModelInOperationClient to instances of UsageModelInOperationServer.
// Don't use this type directly, use NewUsageModelInOperationServerTransport instead.
type UsageModelInOperationServerTransport struct {
	srv *UsageModelInOperationServer
}

// Do implements the policy.Transporter interface for UsageModelInOperationServerTransport.
func (u *UsageModelInOperationServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return u.dispatchToMethodFake(req, method)
}

func (u *UsageModelInOperationServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if usageModelInOperationServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = usageModelInOperationServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "UsageModelInOperationClient.InputToInputOutput":
				res.resp, res.err = u.dispatchInputToInputOutput(req)
			case "UsageModelInOperationClient.ModelInReadOnlyProperty":
				res.resp, res.err = u.dispatchModelInReadOnlyProperty(req)
			case "UsageModelInOperationClient.OutputToInputOutput":
				res.resp, res.err = u.dispatchOutputToInputOutput(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (u *UsageModelInOperationServerTransport) dispatchInputToInputOutput(req *http.Request) (*http.Response, error) {
	if u.srv.InputToInputOutput == nil {
		return nil, &nonRetriableError{errors.New("fake for method InputToInputOutput not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[coreusagegroup.InputModel](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := u.srv.InputToInputOutput(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (u *UsageModelInOperationServerTransport) dispatchModelInReadOnlyProperty(req *http.Request) (*http.Response, error) {
	if u.srv.ModelInReadOnlyProperty == nil {
		return nil, &nonRetriableError{errors.New("fake for method ModelInReadOnlyProperty not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[coreusagegroup.RoundTripModel](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := u.srv.ModelInReadOnlyProperty(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RoundTripModel, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (u *UsageModelInOperationServerTransport) dispatchOutputToInputOutput(req *http.Request) (*http.Response, error) {
	if u.srv.OutputToInputOutput == nil {
		return nil, &nonRetriableError{errors.New("fake for method OutputToInputOutput not implemented")}
	}
	respr, errRespr := u.srv.OutputToInputOutput(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).OutputModel, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to UsageModelInOperationServerTransport
var usageModelInOperationServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
