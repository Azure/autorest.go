// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package coreinitializationgroup

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ServiceChildClient - Blob operations with path parameter that should be moved to client level, in child client
// Don't use this type directly, use [ServiceClient.NewServiceChildClient] instead.
type ServiceChildClient struct {
	internal *azcore.Client
}

// DeleteStandalone -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - ServiceChildClientDeleteStandaloneOptions contains the optional parameters for the ServiceChildClient.DeleteStandalone
//     method.
func (client *ServiceChildClient) DeleteStandalone(ctx context.Context, blobName string, options *ServiceChildClientDeleteStandaloneOptions) (ServiceChildClientDeleteStandaloneResponse, error) {
	var err error
	const operationName = "ServiceChildClient.DeleteStandalone"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteStandaloneCreateRequest(ctx, blobName, options)
	if err != nil {
		return ServiceChildClientDeleteStandaloneResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ServiceChildClientDeleteStandaloneResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ServiceChildClientDeleteStandaloneResponse{}, err
	}
	return ServiceChildClientDeleteStandaloneResponse{}, nil
}

// deleteStandaloneCreateRequest creates the DeleteStandalone request.
func (client *ServiceChildClient) deleteStandaloneCreateRequest(ctx context.Context, blobName string, _ *ServiceChildClientDeleteStandaloneOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/client-initialization/child-client/{blobName}"
	if blobName == "" {
		return nil, errors.New("parameter blobName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{blobName}", url.PathEscape(blobName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// GetStandalone -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - ServiceChildClientGetStandaloneOptions contains the optional parameters for the ServiceChildClient.GetStandalone
//     method.
func (client *ServiceChildClient) GetStandalone(ctx context.Context, blobName string, options *ServiceChildClientGetStandaloneOptions) (ServiceChildClientGetStandaloneResponse, error) {
	var err error
	const operationName = "ServiceChildClient.GetStandalone"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getStandaloneCreateRequest(ctx, blobName, options)
	if err != nil {
		return ServiceChildClientGetStandaloneResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ServiceChildClientGetStandaloneResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ServiceChildClientGetStandaloneResponse{}, err
	}
	resp, err := client.getStandaloneHandleResponse(httpResp)
	return resp, err
}

// getStandaloneCreateRequest creates the GetStandalone request.
func (client *ServiceChildClient) getStandaloneCreateRequest(ctx context.Context, blobName string, _ *ServiceChildClientGetStandaloneOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/client-initialization/child-client/{blobName}/get-standalone"
	if blobName == "" {
		return nil, errors.New("parameter blobName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{blobName}", url.PathEscape(blobName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getStandaloneHandleResponse handles the GetStandalone response.
func (client *ServiceChildClient) getStandaloneHandleResponse(resp *http.Response) (ServiceChildClientGetStandaloneResponse, error) {
	result := ServiceChildClientGetStandaloneResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.BlobProperties); err != nil {
		return ServiceChildClientGetStandaloneResponse{}, err
	}
	return result, nil
}

// WithQuery -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - ServiceChildClientWithQueryOptions contains the optional parameters for the ServiceChildClient.WithQuery method.
func (client *ServiceChildClient) WithQuery(ctx context.Context, blobName string, options *ServiceChildClientWithQueryOptions) (ServiceChildClientWithQueryResponse, error) {
	var err error
	const operationName = "ServiceChildClient.WithQuery"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withQueryCreateRequest(ctx, blobName, options)
	if err != nil {
		return ServiceChildClientWithQueryResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ServiceChildClientWithQueryResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ServiceChildClientWithQueryResponse{}, err
	}
	return ServiceChildClientWithQueryResponse{}, nil
}

// withQueryCreateRequest creates the WithQuery request.
func (client *ServiceChildClient) withQueryCreateRequest(ctx context.Context, blobName string, options *ServiceChildClientWithQueryOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/client-initialization/child-client/{blobName}/with-query"
	if blobName == "" {
		return nil, errors.New("parameter blobName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{blobName}", url.PathEscape(blobName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.FormatParam != nil {
		reqQP.Set("format", *options.FormatParam)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}
