// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package apiversionpathgroup

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// PathClient contains the methods for the Path group.
// Don't use this type directly, use a constructor function instead.
type PathClient struct {
	internal *azcore.Client
}

// PathAPIVersion - Path api version parameter.
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - PathClientPathAPIVersionOptions contains the optional parameters for the PathClient.PathAPIVersion method.
func (client *PathClient) PathAPIVersion(ctx context.Context, version string, options *PathClientPathAPIVersionOptions) (PathClientPathAPIVersionResponse, error) {
	var err error
	const operationName = "PathClient.PathAPIVersion"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.pathAPIVersionCreateRequest(ctx, version, options)
	if err != nil {
		return PathClientPathAPIVersionResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PathClientPathAPIVersionResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PathClientPathAPIVersionResponse{}, err
	}
	return PathClientPathAPIVersionResponse{}, nil
}

// pathAPIVersionCreateRequest creates the PathAPIVersion request.
func (client *PathClient) pathAPIVersionCreateRequest(ctx context.Context, version string, _ *PathClientPathAPIVersionOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/api-version/path/{version}"
	if version == "" {
		return nil, errors.New("parameter version cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{version}", url.PathEscape(version))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}
