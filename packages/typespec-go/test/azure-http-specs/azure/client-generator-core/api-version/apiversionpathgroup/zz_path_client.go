// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package apiversionpathgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// PathClient contains the methods for the Path group.
// Don't use this type directly, use NewPathClientWithNoCredential() instead.
type PathClient struct {
	internal *azcore.Client
	endpoint string
}

// PathClientOptions contains the optional values for creating a [PathClient].
type PathClientOptions struct {
	azcore.ClientOptions
}

// NewPathClientWithNoCredential creates a new instance of PathClient with the specified values.
//   - endpoint - Service host
//   - options - Contains optional client configuration. Pass nil to accept the default values.
func NewPathClientWithNoCredential(endpoint string, options *PathClientOptions) (*PathClient, error) {
	if options == nil {
		options = &PathClientOptions{}
	}
	cl, err := azcore.NewClient(moduleName, moduleVersion, runtime.PipelineOptions{
		APIVersion: runtime.APIVersionOptions{
			Location: runtime.APIVersionLocationPath,
		},
	}, &options.ClientOptions)
	if err != nil {
		return nil, err
	}
	client := &PathClient{
		endpoint: endpoint,
		internal: cl,
	}
	return client, nil
}

// PathAPIVersion - Path api version parameter.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-01-01
//   - options - PathClientPathAPIVersionOptions contains the optional parameters for the PathClient.PathAPIVersion method.
func (client *PathClient) PathAPIVersion(ctx context.Context, options *PathClientPathAPIVersionOptions) (PathClientPathAPIVersionResponse, error) {
	var err error
	const operationName = "PathClient.PathAPIVersion"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.pathAPIVersionCreateRequest(ctx, options)
	if err != nil {
		return PathClientPathAPIVersionResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PathClientPathAPIVersionResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PathClientPathAPIVersionResponse{}, err
	}
	return PathClientPathAPIVersionResponse{}, nil
}

// pathAPIVersionCreateRequest creates the PathAPIVersion request.
func (client *PathClient) pathAPIVersionCreateRequest(ctx context.Context, _ *PathClientPathAPIVersionOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/api-version/path/{version}"
	urlPath = strings.ReplaceAll(urlPath, "{version}", url.PathEscape("2025-01-01"))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}
