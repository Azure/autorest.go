// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"overridegroup"
	"regexp"
)

// OverrideReorderParametersServer is a fake server for instances of the overridegroup.OverrideReorderParametersClient type.
type OverrideReorderParametersServer struct {
	// Reorder is the fake for method OverrideReorderParametersClient.Reorder
	// HTTP status codes to indicate success: http.StatusNoContent
	Reorder func(ctx context.Context, param1 string, param2 string, options *overridegroup.OverrideReorderParametersClientReorderOptions) (resp azfake.Responder[overridegroup.OverrideReorderParametersClientReorderResponse], errResp azfake.ErrorResponder)
}

// NewOverrideReorderParametersServerTransport creates a new instance of OverrideReorderParametersServerTransport with the provided implementation.
// The returned OverrideReorderParametersServerTransport instance is connected to an instance of overridegroup.OverrideReorderParametersClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewOverrideReorderParametersServerTransport(srv *OverrideReorderParametersServer) *OverrideReorderParametersServerTransport {
	return &OverrideReorderParametersServerTransport{srv: srv}
}

// OverrideReorderParametersServerTransport connects instances of overridegroup.OverrideReorderParametersClient to instances of OverrideReorderParametersServer.
// Don't use this type directly, use NewOverrideReorderParametersServerTransport instead.
type OverrideReorderParametersServerTransport struct {
	srv *OverrideReorderParametersServer
}

// Do implements the policy.Transporter interface for OverrideReorderParametersServerTransport.
func (o *OverrideReorderParametersServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return o.dispatchToMethodFake(req, method)
}

func (o *OverrideReorderParametersServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if overrideReorderParametersServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = overrideReorderParametersServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "OverrideReorderParametersClient.Reorder":
				res.resp, res.err = o.dispatchReorder(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (o *OverrideReorderParametersServerTransport) dispatchReorder(req *http.Request) (*http.Response, error) {
	if o.srv.Reorder == nil {
		return nil, &nonRetriableError{errors.New("fake for method Reorder not implemented")}
	}
	const regexStr = `/azure/client-generator-core/override/reorder/(?P<param2>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<param1>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	param1Param, err := url.PathUnescape(matches[regex.SubexpIndex("param1")])
	if err != nil {
		return nil, err
	}
	param2Param, err := url.PathUnescape(matches[regex.SubexpIndex("param2")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := o.srv.Reorder(req.Context(), param1Param, param2Param, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to OverrideReorderParametersServerTransport
var overrideReorderParametersServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
