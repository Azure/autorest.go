// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// OverrideServer is a fake server for instances of the overridegroup.OverrideClient type.
type OverrideServer struct {
	// OverrideGroupParametersServer contains the fakes for client OverrideGroupParametersClient
	OverrideGroupParametersServer OverrideGroupParametersServer

	// OverrideRemoveOptionalParameterServer contains the fakes for client OverrideRemoveOptionalParameterClient
	OverrideRemoveOptionalParameterServer OverrideRemoveOptionalParameterServer

	// OverrideReorderParametersServer contains the fakes for client OverrideReorderParametersClient
	OverrideReorderParametersServer OverrideReorderParametersServer

	// OverrideRequireOptionalParameterServer contains the fakes for client OverrideRequireOptionalParameterClient
	OverrideRequireOptionalParameterServer OverrideRequireOptionalParameterServer
}

// NewOverrideServerTransport creates a new instance of OverrideServerTransport with the provided implementation.
// The returned OverrideServerTransport instance is connected to an instance of overridegroup.OverrideClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewOverrideServerTransport(srv *OverrideServer) *OverrideServerTransport {
	return &OverrideServerTransport{srv: srv}
}

// OverrideServerTransport connects instances of overridegroup.OverrideClient to instances of OverrideServer.
// Don't use this type directly, use NewOverrideServerTransport instead.
type OverrideServerTransport struct {
	srv                                      *OverrideServer
	trMu                                     sync.Mutex
	trOverrideGroupParametersServer          *OverrideGroupParametersServerTransport
	trOverrideRemoveOptionalParameterServer  *OverrideRemoveOptionalParameterServerTransport
	trOverrideReorderParametersServer        *OverrideReorderParametersServerTransport
	trOverrideRequireOptionalParameterServer *OverrideRequireOptionalParameterServerTransport
}

// Do implements the policy.Transporter interface for OverrideServerTransport.
func (o *OverrideServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return o.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (o *OverrideServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "OverrideGroupParametersClient":
		initServer(&o.trMu, &o.trOverrideGroupParametersServer, func() *OverrideGroupParametersServerTransport {
			return NewOverrideGroupParametersServerTransport(&o.srv.OverrideGroupParametersServer)
		})
		resp, err = o.trOverrideGroupParametersServer.Do(req)
	case "OverrideRemoveOptionalParameterClient":
		initServer(&o.trMu, &o.trOverrideRemoveOptionalParameterServer, func() *OverrideRemoveOptionalParameterServerTransport {
			return NewOverrideRemoveOptionalParameterServerTransport(&o.srv.OverrideRemoveOptionalParameterServer)
		})
		resp, err = o.trOverrideRemoveOptionalParameterServer.Do(req)
	case "OverrideReorderParametersClient":
		initServer(&o.trMu, &o.trOverrideReorderParametersServer, func() *OverrideReorderParametersServerTransport {
			return NewOverrideReorderParametersServerTransport(&o.srv.OverrideReorderParametersServer)
		})
		resp, err = o.trOverrideReorderParametersServer.Do(req)
	case "OverrideRequireOptionalParameterClient":
		initServer(&o.trMu, &o.trOverrideRequireOptionalParameterServer, func() *OverrideRequireOptionalParameterServerTransport {
			return NewOverrideRequireOptionalParameterServerTransport(&o.srv.OverrideRequireOptionalParameterServer)
		})
		resp, err = o.trOverrideRequireOptionalParameterServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}

// set this to conditionally intercept incoming requests to OverrideServerTransport
var overrideServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
