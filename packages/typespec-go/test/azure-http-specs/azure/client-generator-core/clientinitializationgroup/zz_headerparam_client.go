// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package clientinitializationgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// HeaderParamClient - Client for testing header parameter moved to client level.
// Don't use this type directly, use NewHeaderParamClientWithNoCredential() instead.
type HeaderParamClient struct {
	internal *azcore.Client
	endpoint string
	name     string
}

// HeaderParamClientOptions contains the optional values for creating a [HeaderParamClient].
type HeaderParamClientOptions struct {
	azcore.ClientOptions
}

// NewHeaderParamClientWithNoCredential creates a new instance of HeaderParamClient with the specified values.
//   - endpoint - Service host
//   - options - Contains optional client configuration. Pass nil to accept the default values.
func NewHeaderParamClientWithNoCredential(endpoint string, name string, options *HeaderParamClientOptions) (*HeaderParamClient, error) {
	if options == nil {
		options = &HeaderParamClientOptions{}
	}
	cl, err := azcore.NewClient(moduleName, moduleVersion, runtime.PipelineOptions{}, &options.ClientOptions)
	if err != nil {
		return nil, err
	}
	client := &HeaderParamClient{
		endpoint: endpoint,
		name:     name,
		internal: cl,
	}
	return client, nil
}

// WithBody -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - HeaderParamClientWithBodyOptions contains the optional parameters for the HeaderParamClient.WithBody method.
func (client *HeaderParamClient) WithBody(ctx context.Context, body Input, options *HeaderParamClientWithBodyOptions) (HeaderParamClientWithBodyResponse, error) {
	var err error
	const operationName = "HeaderParamClient.WithBody"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withBodyCreateRequest(ctx, body, options)
	if err != nil {
		return HeaderParamClientWithBodyResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HeaderParamClientWithBodyResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return HeaderParamClientWithBodyResponse{}, err
	}
	return HeaderParamClientWithBodyResponse{}, nil
}

// withBodyCreateRequest creates the WithBody request.
func (client *HeaderParamClient) withBodyCreateRequest(ctx context.Context, body Input, _ *HeaderParamClientWithBodyOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/client-initialization/header-param/with-body"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["name"] = []string{client.name}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// WithQuery -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - HeaderParamClientWithQueryOptions contains the optional parameters for the HeaderParamClient.WithQuery method.
func (client *HeaderParamClient) WithQuery(ctx context.Context, id string, options *HeaderParamClientWithQueryOptions) (HeaderParamClientWithQueryResponse, error) {
	var err error
	const operationName = "HeaderParamClient.WithQuery"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withQueryCreateRequest(ctx, id, options)
	if err != nil {
		return HeaderParamClientWithQueryResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HeaderParamClientWithQueryResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return HeaderParamClientWithQueryResponse{}, err
	}
	return HeaderParamClientWithQueryResponse{}, nil
}

// withQueryCreateRequest creates the WithQuery request.
func (client *HeaderParamClient) withQueryCreateRequest(ctx context.Context, id string, _ *HeaderParamClientWithQueryOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/client-initialization/header-param/with-query"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("id", id)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["name"] = []string{client.name}
	return req, nil
}
