// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package clientinitializationgroup

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ServiceParamAliasClient - Operations demonstrating the @paramAlias decorator for renaming parameters in client code
// Don't use this type directly, use [ServiceClient.NewServiceParamAliasClient] instead.
type ServiceParamAliasClient struct {
	internal *azcore.Client
}

// WithAliasedName -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - ServiceParamAliasClientWithAliasedNameOptions contains the optional parameters for the ServiceParamAliasClient.WithAliasedName
//     method.
func (client *ServiceParamAliasClient) WithAliasedName(ctx context.Context, blob string, options *ServiceParamAliasClientWithAliasedNameOptions) (ServiceParamAliasClientWithAliasedNameResponse, error) {
	var err error
	const operationName = "ServiceParamAliasClient.WithAliasedName"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withAliasedNameCreateRequest(ctx, blob, options)
	if err != nil {
		return ServiceParamAliasClientWithAliasedNameResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ServiceParamAliasClientWithAliasedNameResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ServiceParamAliasClientWithAliasedNameResponse{}, err
	}
	return ServiceParamAliasClientWithAliasedNameResponse{}, nil
}

// withAliasedNameCreateRequest creates the WithAliasedName request.
func (client *ServiceParamAliasClient) withAliasedNameCreateRequest(ctx context.Context, blob string, _ *ServiceParamAliasClientWithAliasedNameOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/client-initialization/param-alias/{blob}/with-aliased-name"
	if blob == "" {
		return nil, errors.New("parameter blob cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{blob}", url.PathEscape(blob))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// WithOriginalName -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - ServiceParamAliasClientWithOriginalNameOptions contains the optional parameters for the ServiceParamAliasClient.WithOriginalName
//     method.
func (client *ServiceParamAliasClient) WithOriginalName(ctx context.Context, blobName string, options *ServiceParamAliasClientWithOriginalNameOptions) (ServiceParamAliasClientWithOriginalNameResponse, error) {
	var err error
	const operationName = "ServiceParamAliasClient.WithOriginalName"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withOriginalNameCreateRequest(ctx, blobName, options)
	if err != nil {
		return ServiceParamAliasClientWithOriginalNameResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ServiceParamAliasClientWithOriginalNameResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ServiceParamAliasClientWithOriginalNameResponse{}, err
	}
	return ServiceParamAliasClientWithOriginalNameResponse{}, nil
}

// withOriginalNameCreateRequest creates the WithOriginalName request.
func (client *ServiceParamAliasClient) withOriginalNameCreateRequest(ctx context.Context, blobName string, _ *ServiceParamAliasClientWithOriginalNameOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/client-initialization/param-alias/{blobName}/with-original-name"
	if blobName == "" {
		return nil, errors.New("parameter blobName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{blobName}", url.PathEscape(blobName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}
