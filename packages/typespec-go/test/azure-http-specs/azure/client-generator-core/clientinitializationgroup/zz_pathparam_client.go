// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package clientinitializationgroup

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// PathParamClient contains the methods for the PathParam group.
// Don't use this type directly, use NewPathParamClientWithNoCredential() instead.
type PathParamClient struct {
	internal *azcore.Client
	blobName string
	endpoint string
}

// PathParamClientOptions contains the optional values for creating a [PathParamClient].
type PathParamClientOptions struct {
	azcore.ClientOptions
}

// NewPathParamClientWithNoCredential creates a new instance of PathParamClient with the specified values.
//   - endpoint - Service host
//   - options - Contains optional client configuration. Pass nil to accept the default values.
func NewPathParamClientWithNoCredential(blobName string, endpoint string, options *PathParamClientOptions) (*PathParamClient, error) {
	if options == nil {
		options = &PathParamClientOptions{}
	}
	cl, err := azcore.NewClient(moduleName, moduleVersion, runtime.PipelineOptions{}, &options.ClientOptions)
	if err != nil {
		return nil, err
	}
	client := &PathParamClient{
		blobName: blobName,
		endpoint: endpoint,
		internal: cl,
	}
	return client, nil
}

// DeleteStandalone -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - PathParamClientDeleteStandaloneOptions contains the optional parameters for the PathParamClient.DeleteStandalone
//     method.
func (client *PathParamClient) DeleteStandalone(ctx context.Context, options *PathParamClientDeleteStandaloneOptions) (PathParamClientDeleteStandaloneResponse, error) {
	var err error
	const operationName = "PathParamClient.DeleteStandalone"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteStandaloneCreateRequest(ctx, options)
	if err != nil {
		return PathParamClientDeleteStandaloneResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PathParamClientDeleteStandaloneResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return PathParamClientDeleteStandaloneResponse{}, err
	}
	return PathParamClientDeleteStandaloneResponse{}, nil
}

// deleteStandaloneCreateRequest creates the DeleteStandalone request.
func (client *PathParamClient) deleteStandaloneCreateRequest(ctx context.Context, _ *PathParamClientDeleteStandaloneOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/client-initialization/path/{blobName}"
	if client.blobName == "" {
		return nil, errors.New("parameter client.blobName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{blobName}", url.PathEscape(client.blobName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// GetStandalone -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - PathParamClientGetStandaloneOptions contains the optional parameters for the PathParamClient.GetStandalone method.
func (client *PathParamClient) GetStandalone(ctx context.Context, options *PathParamClientGetStandaloneOptions) (PathParamClientGetStandaloneResponse, error) {
	var err error
	const operationName = "PathParamClient.GetStandalone"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getStandaloneCreateRequest(ctx, options)
	if err != nil {
		return PathParamClientGetStandaloneResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PathParamClientGetStandaloneResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PathParamClientGetStandaloneResponse{}, err
	}
	resp, err := client.getStandaloneHandleResponse(httpResp)
	return resp, err
}

// getStandaloneCreateRequest creates the GetStandalone request.
func (client *PathParamClient) getStandaloneCreateRequest(ctx context.Context, _ *PathParamClientGetStandaloneOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/client-initialization/path/{blobName}/get-standalone"
	if client.blobName == "" {
		return nil, errors.New("parameter client.blobName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{blobName}", url.PathEscape(client.blobName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getStandaloneHandleResponse handles the GetStandalone response.
func (client *PathParamClient) getStandaloneHandleResponse(resp *http.Response) (PathParamClientGetStandaloneResponse, error) {
	result := PathParamClientGetStandaloneResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.BlobProperties); err != nil {
		return PathParamClientGetStandaloneResponse{}, err
	}
	return result, nil
}

// WithQuery -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - PathParamClientWithQueryOptions contains the optional parameters for the PathParamClient.WithQuery method.
func (client *PathParamClient) WithQuery(ctx context.Context, options *PathParamClientWithQueryOptions) (PathParamClientWithQueryResponse, error) {
	var err error
	const operationName = "PathParamClient.WithQuery"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withQueryCreateRequest(ctx, options)
	if err != nil {
		return PathParamClientWithQueryResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PathParamClientWithQueryResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return PathParamClientWithQueryResponse{}, err
	}
	return PathParamClientWithQueryResponse{}, nil
}

// withQueryCreateRequest creates the WithQuery request.
func (client *PathParamClient) withQueryCreateRequest(ctx context.Context, options *PathParamClientWithQueryOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/client-initialization/path/{blobName}/with-query"
	if client.blobName == "" {
		return nil, errors.New("parameter client.blobName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{blobName}", url.PathEscape(client.blobName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Format != nil {
		reqQP.Set("format", *options.Format)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}
