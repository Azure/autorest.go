// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package clientinitializationgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// ServiceMixedParamsClient contains the methods for the ServiceMixedParams group.
// Don't use this type directly, use [ServiceClient.NewServiceMixedParamsClient] instead.
type ServiceMixedParamsClient struct {
	internal *azcore.Client
}

// WithBody -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - ServiceMixedParamsClientWithBodyOptions contains the optional parameters for the ServiceMixedParamsClient.WithBody
//     method.
func (client *ServiceMixedParamsClient) WithBody(ctx context.Context, name string, region string, body WithBodyRequest, options *ServiceMixedParamsClientWithBodyOptions) (ServiceMixedParamsClientWithBodyResponse, error) {
	var err error
	const operationName = "ServiceMixedParamsClient.WithBody"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withBodyCreateRequest(ctx, name, region, body, options)
	if err != nil {
		return ServiceMixedParamsClientWithBodyResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ServiceMixedParamsClientWithBodyResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ServiceMixedParamsClientWithBodyResponse{}, err
	}
	return ServiceMixedParamsClientWithBodyResponse{}, nil
}

// withBodyCreateRequest creates the WithBody request.
func (client *ServiceMixedParamsClient) withBodyCreateRequest(ctx context.Context, name string, region string, body WithBodyRequest, _ *ServiceMixedParamsClientWithBodyOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/client-initialization/mixed-params/with-body"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("region", region)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["name"] = []string{name}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// WithQuery -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - ServiceMixedParamsClientWithQueryOptions contains the optional parameters for the ServiceMixedParamsClient.WithQuery
//     method.
func (client *ServiceMixedParamsClient) WithQuery(ctx context.Context, name string, region string, id string, options *ServiceMixedParamsClientWithQueryOptions) (ServiceMixedParamsClientWithQueryResponse, error) {
	var err error
	const operationName = "ServiceMixedParamsClient.WithQuery"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withQueryCreateRequest(ctx, name, region, id, options)
	if err != nil {
		return ServiceMixedParamsClientWithQueryResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ServiceMixedParamsClientWithQueryResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ServiceMixedParamsClientWithQueryResponse{}, err
	}
	return ServiceMixedParamsClientWithQueryResponse{}, nil
}

// withQueryCreateRequest creates the WithQuery request.
func (client *ServiceMixedParamsClient) withQueryCreateRequest(ctx context.Context, name string, region string, id string, _ *ServiceMixedParamsClientWithQueryOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/client-initialization/mixed-params/with-query"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("id", id)
	reqQP.Set("region", region)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["name"] = []string{name}
	return req, nil
}
