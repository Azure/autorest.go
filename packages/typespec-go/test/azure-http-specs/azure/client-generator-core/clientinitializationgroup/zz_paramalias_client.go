// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package clientinitializationgroup

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ParamAliasClient contains the methods for the ParamAlias group.
// Don't use this type directly, use NewParamAliasClientWithNoCredential() instead.
type ParamAliasClient struct {
	internal *azcore.Client
	blobName string
	endpoint string
}

// ParamAliasClientOptions contains the optional values for creating a [ParamAliasClient].
type ParamAliasClientOptions struct {
	azcore.ClientOptions
}

// NewParamAliasClientWithNoCredential creates a new instance of ParamAliasClient with the specified values.
//   - endpoint - Service host
//   - options - Contains optional client configuration. Pass nil to accept the default values.
func NewParamAliasClientWithNoCredential(blobName string, endpoint string, options *ParamAliasClientOptions) (*ParamAliasClient, error) {
	if options == nil {
		options = &ParamAliasClientOptions{}
	}
	cl, err := azcore.NewClient(moduleName, moduleVersion, runtime.PipelineOptions{}, &options.ClientOptions)
	if err != nil {
		return nil, err
	}
	client := &ParamAliasClient{
		blobName: blobName,
		endpoint: endpoint,
		internal: cl,
	}
	return client, nil
}

// WithAliasedName -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - ParamAliasClientWithAliasedNameOptions contains the optional parameters for the ParamAliasClient.WithAliasedName
//     method.
func (client *ParamAliasClient) WithAliasedName(ctx context.Context, options *ParamAliasClientWithAliasedNameOptions) (ParamAliasClientWithAliasedNameResponse, error) {
	var err error
	const operationName = "ParamAliasClient.WithAliasedName"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withAliasedNameCreateRequest(ctx, options)
	if err != nil {
		return ParamAliasClientWithAliasedNameResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParamAliasClientWithAliasedNameResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParamAliasClientWithAliasedNameResponse{}, err
	}
	return ParamAliasClientWithAliasedNameResponse{}, nil
}

// withAliasedNameCreateRequest creates the WithAliasedName request.
func (client *ParamAliasClient) withAliasedNameCreateRequest(ctx context.Context, _ *ParamAliasClientWithAliasedNameOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/client-initialization/param-alias/{blob}/with-aliased-name"
	if client.blobName == "" {
		return nil, errors.New("parameter client.blobName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{blob}", url.PathEscape(client.blobName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// WithOriginalName -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - ParamAliasClientWithOriginalNameOptions contains the optional parameters for the ParamAliasClient.WithOriginalName
//     method.
func (client *ParamAliasClient) WithOriginalName(ctx context.Context, options *ParamAliasClientWithOriginalNameOptions) (ParamAliasClientWithOriginalNameResponse, error) {
	var err error
	const operationName = "ParamAliasClient.WithOriginalName"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withOriginalNameCreateRequest(ctx, options)
	if err != nil {
		return ParamAliasClientWithOriginalNameResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParamAliasClientWithOriginalNameResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParamAliasClientWithOriginalNameResponse{}, err
	}
	return ParamAliasClientWithOriginalNameResponse{}, nil
}

// withOriginalNameCreateRequest creates the WithOriginalName request.
func (client *ParamAliasClient) withOriginalNameCreateRequest(ctx context.Context, _ *ParamAliasClientWithOriginalNameOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/client-initialization/param-alias/{blobName}/with-original-name"
	if client.blobName == "" {
		return nil, errors.New("parameter client.blobName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{blobName}", url.PathEscape(client.blobName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}
