// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServiceServer is a fake server for instances of the clientinitializationgroup.ServiceClient type.
type ServiceServer struct {
	// ServiceChildServer contains the fakes for client ServiceChildClient
	ServiceChildServer ServiceChildServer

	// ServiceHeaderParamServer contains the fakes for client ServiceHeaderParamClient
	ServiceHeaderParamServer ServiceHeaderParamServer

	// ServiceMixedParamsServer contains the fakes for client ServiceMixedParamsClient
	ServiceMixedParamsServer ServiceMixedParamsServer

	// ServiceMultipleParamsServer contains the fakes for client ServiceMultipleParamsClient
	ServiceMultipleParamsServer ServiceMultipleParamsServer

	// ServiceParamAliasServer contains the fakes for client ServiceParamAliasClient
	ServiceParamAliasServer ServiceParamAliasServer

	// ServicePathParamServer contains the fakes for client ServicePathParamClient
	ServicePathParamServer ServicePathParamServer
}

// NewServiceServerTransport creates a new instance of ServiceServerTransport with the provided implementation.
// The returned ServiceServerTransport instance is connected to an instance of clientinitializationgroup.ServiceClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServiceServerTransport(srv *ServiceServer) *ServiceServerTransport {
	return &ServiceServerTransport{srv: srv}
}

// ServiceServerTransport connects instances of clientinitializationgroup.ServiceClient to instances of ServiceServer.
// Don't use this type directly, use NewServiceServerTransport instead.
type ServiceServerTransport struct {
	srv                           *ServiceServer
	trMu                          sync.Mutex
	trServiceChildServer          *ServiceChildServerTransport
	trServiceHeaderParamServer    *ServiceHeaderParamServerTransport
	trServiceMixedParamsServer    *ServiceMixedParamsServerTransport
	trServiceMultipleParamsServer *ServiceMultipleParamsServerTransport
	trServiceParamAliasServer     *ServiceParamAliasServerTransport
	trServicePathParamServer      *ServicePathParamServerTransport
}

// Do implements the policy.Transporter interface for ServiceServerTransport.
func (s *ServiceServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (s *ServiceServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "ServiceChildClient":
		initServer(&s.trMu, &s.trServiceChildServer, func() *ServiceChildServerTransport {
			return NewServiceChildServerTransport(&s.srv.ServiceChildServer)
		})
		resp, err = s.trServiceChildServer.Do(req)
	case "ServiceHeaderParamClient":
		initServer(&s.trMu, &s.trServiceHeaderParamServer, func() *ServiceHeaderParamServerTransport {
			return NewServiceHeaderParamServerTransport(&s.srv.ServiceHeaderParamServer)
		})
		resp, err = s.trServiceHeaderParamServer.Do(req)
	case "ServiceMixedParamsClient":
		initServer(&s.trMu, &s.trServiceMixedParamsServer, func() *ServiceMixedParamsServerTransport {
			return NewServiceMixedParamsServerTransport(&s.srv.ServiceMixedParamsServer)
		})
		resp, err = s.trServiceMixedParamsServer.Do(req)
	case "ServiceMultipleParamsClient":
		initServer(&s.trMu, &s.trServiceMultipleParamsServer, func() *ServiceMultipleParamsServerTransport {
			return NewServiceMultipleParamsServerTransport(&s.srv.ServiceMultipleParamsServer)
		})
		resp, err = s.trServiceMultipleParamsServer.Do(req)
	case "ServiceParamAliasClient":
		initServer(&s.trMu, &s.trServiceParamAliasServer, func() *ServiceParamAliasServerTransport {
			return NewServiceParamAliasServerTransport(&s.srv.ServiceParamAliasServer)
		})
		resp, err = s.trServiceParamAliasServer.Do(req)
	case "ServicePathParamClient":
		initServer(&s.trMu, &s.trServicePathParamServer, func() *ServicePathParamServerTransport {
			return NewServicePathParamServerTransport(&s.srv.ServicePathParamServer)
		})
		resp, err = s.trServicePathParamServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}

// set this to conditionally intercept incoming requests to ServiceServerTransport
var serviceServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
