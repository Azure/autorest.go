// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"clientinitializationgroup"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"regexp"
)

// PathParamServer is a fake server for instances of the clientinitializationgroup.PathParamClient type.
type PathParamServer struct {
	// DeleteStandalone is the fake for method PathParamClient.DeleteStandalone
	// HTTP status codes to indicate success: http.StatusNoContent
	DeleteStandalone func(ctx context.Context, options *clientinitializationgroup.PathParamClientDeleteStandaloneOptions) (resp azfake.Responder[clientinitializationgroup.PathParamClientDeleteStandaloneResponse], errResp azfake.ErrorResponder)

	// GetStandalone is the fake for method PathParamClient.GetStandalone
	// HTTP status codes to indicate success: http.StatusOK
	GetStandalone func(ctx context.Context, options *clientinitializationgroup.PathParamClientGetStandaloneOptions) (resp azfake.Responder[clientinitializationgroup.PathParamClientGetStandaloneResponse], errResp azfake.ErrorResponder)

	// WithQuery is the fake for method PathParamClient.WithQuery
	// HTTP status codes to indicate success: http.StatusNoContent
	WithQuery func(ctx context.Context, options *clientinitializationgroup.PathParamClientWithQueryOptions) (resp azfake.Responder[clientinitializationgroup.PathParamClientWithQueryResponse], errResp azfake.ErrorResponder)
}

// NewPathParamServerTransport creates a new instance of PathParamServerTransport with the provided implementation.
// The returned PathParamServerTransport instance is connected to an instance of clientinitializationgroup.PathParamClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewPathParamServerTransport(srv *PathParamServer) *PathParamServerTransport {
	return &PathParamServerTransport{srv: srv}
}

// PathParamServerTransport connects instances of clientinitializationgroup.PathParamClient to instances of PathParamServer.
// Don't use this type directly, use NewPathParamServerTransport instead.
type PathParamServerTransport struct {
	srv *PathParamServer
}

// Do implements the policy.Transporter interface for PathParamServerTransport.
func (p *PathParamServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return p.dispatchToMethodFake(req, method)
}

func (p *PathParamServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if pathParamServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = pathParamServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "PathParamClient.DeleteStandalone":
				res.resp, res.err = p.dispatchDeleteStandalone(req)
			case "PathParamClient.GetStandalone":
				res.resp, res.err = p.dispatchGetStandalone(req)
			case "PathParamClient.WithQuery":
				res.resp, res.err = p.dispatchWithQuery(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (p *PathParamServerTransport) dispatchDeleteStandalone(req *http.Request) (*http.Response, error) {
	if p.srv.DeleteStandalone == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteStandalone not implemented")}
	}
	const regexStr = `/azure/client-generator-core/client-initialization/path/(?P<blobName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	respr, errRespr := p.srv.DeleteStandalone(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PathParamServerTransport) dispatchGetStandalone(req *http.Request) (*http.Response, error) {
	if p.srv.GetStandalone == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetStandalone not implemented")}
	}
	const regexStr = `/azure/client-generator-core/client-initialization/path/(?P<blobName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/get-standalone`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	respr, errRespr := p.srv.GetStandalone(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).BlobProperties, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PathParamServerTransport) dispatchWithQuery(req *http.Request) (*http.Response, error) {
	if p.srv.WithQuery == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithQuery not implemented")}
	}
	const regexStr = `/azure/client-generator-core/client-initialization/path/(?P<blobName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/with-query`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	formatUnescaped, err := url.QueryUnescape(qp.Get("format"))
	if err != nil {
		return nil, err
	}
	formatParam := getOptional(formatUnescaped)
	var options *clientinitializationgroup.PathParamClientWithQueryOptions
	if formatParam != nil {
		options = &clientinitializationgroup.PathParamClientWithQueryOptions{
			Format: formatParam,
		}
	}
	respr, errRespr := p.srv.WithQuery(req.Context(), options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to PathParamServerTransport
var pathParamServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
