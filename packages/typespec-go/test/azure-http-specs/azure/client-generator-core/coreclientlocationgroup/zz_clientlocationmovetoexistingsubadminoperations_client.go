// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package coreclientlocationgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// ClientLocationMoveToExistingSubAdminOperationsClient contains the methods for the ClientLocationMoveToExistingSubAdminOperations
// group.
// Don't use this type directly, use [ClientLocationMoveToExistingSubClient.NewClientLocationMoveToExistingSubAdminOperationsClient] instead.
type ClientLocationMoveToExistingSubAdminOperationsClient struct {
	internal *azcore.Client
}

// DeleteUser -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - ClientLocationMoveToExistingSubAdminOperationsClientDeleteUserOptions contains the optional parameters for the
//     ClientLocationMoveToExistingSubAdminOperationsClient.DeleteUser method.
func (client *ClientLocationMoveToExistingSubAdminOperationsClient) DeleteUser(ctx context.Context, options *ClientLocationMoveToExistingSubAdminOperationsClientDeleteUserOptions) (ClientLocationMoveToExistingSubAdminOperationsClientDeleteUserResponse, error) {
	var err error
	const operationName = "ClientLocationMoveToExistingSubAdminOperationsClient.DeleteUser"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteUserCreateRequest(ctx, options)
	if err != nil {
		return ClientLocationMoveToExistingSubAdminOperationsClientDeleteUserResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ClientLocationMoveToExistingSubAdminOperationsClientDeleteUserResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ClientLocationMoveToExistingSubAdminOperationsClientDeleteUserResponse{}, err
	}
	return ClientLocationMoveToExistingSubAdminOperationsClientDeleteUserResponse{}, nil
}

// deleteUserCreateRequest creates the DeleteUser request.
func (client *ClientLocationMoveToExistingSubAdminOperationsClient) deleteUserCreateRequest(ctx context.Context, _ *ClientLocationMoveToExistingSubAdminOperationsClientDeleteUserOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/client-location/user"
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// GetAdminInfo -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - ClientLocationMoveToExistingSubAdminOperationsClientGetAdminInfoOptions contains the optional parameters for
//     the ClientLocationMoveToExistingSubAdminOperationsClient.GetAdminInfo method.
func (client *ClientLocationMoveToExistingSubAdminOperationsClient) GetAdminInfo(ctx context.Context, options *ClientLocationMoveToExistingSubAdminOperationsClientGetAdminInfoOptions) (ClientLocationMoveToExistingSubAdminOperationsClientGetAdminInfoResponse, error) {
	var err error
	const operationName = "ClientLocationMoveToExistingSubAdminOperationsClient.GetAdminInfo"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getAdminInfoCreateRequest(ctx, options)
	if err != nil {
		return ClientLocationMoveToExistingSubAdminOperationsClientGetAdminInfoResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ClientLocationMoveToExistingSubAdminOperationsClientGetAdminInfoResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ClientLocationMoveToExistingSubAdminOperationsClientGetAdminInfoResponse{}, err
	}
	return ClientLocationMoveToExistingSubAdminOperationsClientGetAdminInfoResponse{}, nil
}

// getAdminInfoCreateRequest creates the GetAdminInfo request.
func (client *ClientLocationMoveToExistingSubAdminOperationsClient) getAdminInfoCreateRequest(ctx context.Context, _ *ClientLocationMoveToExistingSubAdminOperationsClientGetAdminInfoOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/client-location/admin"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}
