// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package coreclientlocationgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// ClientLocationMoveMethodParameterToBlobOperationsClient contains the methods for the ClientLocationMoveMethodParameterToBlobOperations
// group.
// Don't use this type directly, use [ClientLocationMoveMethodParameterToClient.NewClientLocationMoveMethodParameterToBlobOperationsClient] instead.
type ClientLocationMoveMethodParameterToBlobOperationsClient struct {
	internal       *azcore.Client
	endpoint       string
	storageAccount string
}

// GetBlob -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - ClientLocationMoveMethodParameterToBlobOperationsClientGetBlobOptions contains the optional parameters for the
//     ClientLocationMoveMethodParameterToBlobOperationsClient.GetBlob method.
func (client *ClientLocationMoveMethodParameterToBlobOperationsClient) GetBlob(ctx context.Context, containerParam string, blob string, options *ClientLocationMoveMethodParameterToBlobOperationsClientGetBlobOptions) (ClientLocationMoveMethodParameterToBlobOperationsClientGetBlobResponse, error) {
	var err error
	const operationName = "ClientLocationMoveMethodParameterToBlobOperationsClient.GetBlob"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getBlobCreateRequest(ctx, containerParam, blob, options)
	if err != nil {
		return ClientLocationMoveMethodParameterToBlobOperationsClientGetBlobResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ClientLocationMoveMethodParameterToBlobOperationsClientGetBlobResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ClientLocationMoveMethodParameterToBlobOperationsClientGetBlobResponse{}, err
	}
	resp, err := client.getBlobHandleResponse(httpResp)
	return resp, err
}

// getBlobCreateRequest creates the GetBlob request.
func (client *ClientLocationMoveMethodParameterToBlobOperationsClient) getBlobCreateRequest(ctx context.Context, containerParam string, blob string, _ *ClientLocationMoveMethodParameterToBlobOperationsClientGetBlobOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/client-location/blob"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("blob", blob)
	reqQP.Set("container", containerParam)
	reqQP.Set("storageAccount", client.storageAccount)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getBlobHandleResponse handles the GetBlob response.
func (client *ClientLocationMoveMethodParameterToBlobOperationsClient) getBlobHandleResponse(resp *http.Response) (ClientLocationMoveMethodParameterToBlobOperationsClientGetBlobResponse, error) {
	result := ClientLocationMoveMethodParameterToBlobOperationsClientGetBlobResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Blob); err != nil {
		return ClientLocationMoveMethodParameterToBlobOperationsClientGetBlobResponse{}, err
	}
	return result, nil
}
