// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ClientLocationMoveMethodParameterToServer is a fake server for instances of the coreclientlocationgroup.ClientLocationMoveMethodParameterToClient type.
type ClientLocationMoveMethodParameterToServer struct {
	// ClientLocationMoveMethodParameterToBlobOperationsServer contains the fakes for client ClientLocationMoveMethodParameterToBlobOperationsClient
	ClientLocationMoveMethodParameterToBlobOperationsServer ClientLocationMoveMethodParameterToBlobOperationsServer
}

// NewClientLocationMoveMethodParameterToServerTransport creates a new instance of ClientLocationMoveMethodParameterToServerTransport with the provided implementation.
// The returned ClientLocationMoveMethodParameterToServerTransport instance is connected to an instance of coreclientlocationgroup.ClientLocationMoveMethodParameterToClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewClientLocationMoveMethodParameterToServerTransport(srv *ClientLocationMoveMethodParameterToServer) *ClientLocationMoveMethodParameterToServerTransport {
	return &ClientLocationMoveMethodParameterToServerTransport{srv: srv}
}

// ClientLocationMoveMethodParameterToServerTransport connects instances of coreclientlocationgroup.ClientLocationMoveMethodParameterToClient to instances of ClientLocationMoveMethodParameterToServer.
// Don't use this type directly, use NewClientLocationMoveMethodParameterToServerTransport instead.
type ClientLocationMoveMethodParameterToServerTransport struct {
	srv                                                       *ClientLocationMoveMethodParameterToServer
	trMu                                                      sync.Mutex
	trClientLocationMoveMethodParameterToBlobOperationsServer *ClientLocationMoveMethodParameterToBlobOperationsServerTransport
}

// Do implements the policy.Transporter interface for ClientLocationMoveMethodParameterToServerTransport.
func (c *ClientLocationMoveMethodParameterToServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return c.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (c *ClientLocationMoveMethodParameterToServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "ClientLocationMoveMethodParameterToBlobOperationsClient":
		initServer(&c.trMu, &c.trClientLocationMoveMethodParameterToBlobOperationsServer, func() *ClientLocationMoveMethodParameterToBlobOperationsServerTransport {
			return NewClientLocationMoveMethodParameterToBlobOperationsServerTransport(&c.srv.ClientLocationMoveMethodParameterToBlobOperationsServer)
		})
		resp, err = c.trClientLocationMoveMethodParameterToBlobOperationsServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}

// set this to conditionally intercept incoming requests to ClientLocationMoveMethodParameterToServerTransport
var clientLocationMoveMethodParameterToServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
