// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"coreclientlocationgroup"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ClientLocationServer is a fake server for instances of the coreclientlocationgroup.ClientLocationClient type.
type ClientLocationServer struct {
	// ClientLocationArchiveOperationsServer contains the fakes for client ClientLocationArchiveOperationsClient
	ClientLocationArchiveOperationsServer ClientLocationArchiveOperationsServer

	// GetHealthStatus is the fake for method ClientLocationClient.GetHealthStatus
	// HTTP status codes to indicate success: http.StatusNoContent
	GetHealthStatus func(ctx context.Context, options *coreclientlocationgroup.ClientLocationClientGetHealthStatusOptions) (resp azfake.Responder[coreclientlocationgroup.ClientLocationClientGetHealthStatusResponse], errResp azfake.ErrorResponder)
}

// NewClientLocationServerTransport creates a new instance of ClientLocationServerTransport with the provided implementation.
// The returned ClientLocationServerTransport instance is connected to an instance of coreclientlocationgroup.ClientLocationClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewClientLocationServerTransport(srv *ClientLocationServer) *ClientLocationServerTransport {
	return &ClientLocationServerTransport{srv: srv}
}

// ClientLocationServerTransport connects instances of coreclientlocationgroup.ClientLocationClient to instances of ClientLocationServer.
// Don't use this type directly, use NewClientLocationServerTransport instead.
type ClientLocationServerTransport struct {
	srv                                     *ClientLocationServer
	trMu                                    sync.Mutex
	trClientLocationArchiveOperationsServer *ClientLocationArchiveOperationsServerTransport
}

// Do implements the policy.Transporter interface for ClientLocationServerTransport.
func (c *ClientLocationServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	if client := method[:strings.Index(method, ".")]; client != "ClientLocationClient" {
		return c.dispatchToClientFake(req, client)
	}
	return c.dispatchToMethodFake(req, method)
}

func (c *ClientLocationServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "ClientLocationArchiveOperationsClient":
		initServer(&c.trMu, &c.trClientLocationArchiveOperationsServer, func() *ClientLocationArchiveOperationsServerTransport {
			return NewClientLocationArchiveOperationsServerTransport(&c.srv.ClientLocationArchiveOperationsServer)
		})
		resp, err = c.trClientLocationArchiveOperationsServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}

func (c *ClientLocationServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if clientLocationServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = clientLocationServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ClientLocationClient.GetHealthStatus":
				res.resp, res.err = c.dispatchGetHealthStatus(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (c *ClientLocationServerTransport) dispatchGetHealthStatus(req *http.Request) (*http.Response, error) {
	if c.srv.GetHealthStatus == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetHealthStatus not implemented")}
	}
	respr, errRespr := c.srv.GetHealthStatus(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to ClientLocationServerTransport
var clientLocationServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
