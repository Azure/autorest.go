// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ClientLocationMoveToExistingSubServer is a fake server for instances of the locationgroup.ClientLocationMoveToExistingSubClient type.
type ClientLocationMoveToExistingSubServer struct {
	// ClientLocationMoveToExistingSubAdminOperationsServer contains the fakes for client ClientLocationMoveToExistingSubAdminOperationsClient
	ClientLocationMoveToExistingSubAdminOperationsServer ClientLocationMoveToExistingSubAdminOperationsServer

	// ClientLocationMoveToExistingSubUserOperationsServer contains the fakes for client ClientLocationMoveToExistingSubUserOperationsClient
	ClientLocationMoveToExistingSubUserOperationsServer ClientLocationMoveToExistingSubUserOperationsServer
}

// NewClientLocationMoveToExistingSubServerTransport creates a new instance of ClientLocationMoveToExistingSubServerTransport with the provided implementation.
// The returned ClientLocationMoveToExistingSubServerTransport instance is connected to an instance of locationgroup.ClientLocationMoveToExistingSubClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewClientLocationMoveToExistingSubServerTransport(srv *ClientLocationMoveToExistingSubServer) *ClientLocationMoveToExistingSubServerTransport {
	return &ClientLocationMoveToExistingSubServerTransport{srv: srv}
}

// ClientLocationMoveToExistingSubServerTransport connects instances of locationgroup.ClientLocationMoveToExistingSubClient to instances of ClientLocationMoveToExistingSubServer.
// Don't use this type directly, use NewClientLocationMoveToExistingSubServerTransport instead.
type ClientLocationMoveToExistingSubServerTransport struct {
	srv                                                    *ClientLocationMoveToExistingSubServer
	trMu                                                   sync.Mutex
	trClientLocationMoveToExistingSubAdminOperationsServer *ClientLocationMoveToExistingSubAdminOperationsServerTransport
	trClientLocationMoveToExistingSubUserOperationsServer  *ClientLocationMoveToExistingSubUserOperationsServerTransport
}

// Do implements the policy.Transporter interface for ClientLocationMoveToExistingSubServerTransport.
func (c *ClientLocationMoveToExistingSubServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return c.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (c *ClientLocationMoveToExistingSubServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "ClientLocationMoveToExistingSubAdminOperationsClient":
		initServer(&c.trMu, &c.trClientLocationMoveToExistingSubAdminOperationsServer, func() *ClientLocationMoveToExistingSubAdminOperationsServerTransport {
			return NewClientLocationMoveToExistingSubAdminOperationsServerTransport(&c.srv.ClientLocationMoveToExistingSubAdminOperationsServer)
		})
		resp, err = c.trClientLocationMoveToExistingSubAdminOperationsServer.Do(req)
	case "ClientLocationMoveToExistingSubUserOperationsClient":
		initServer(&c.trMu, &c.trClientLocationMoveToExistingSubUserOperationsServer, func() *ClientLocationMoveToExistingSubUserOperationsServerTransport {
			return NewClientLocationMoveToExistingSubUserOperationsServerTransport(&c.srv.ClientLocationMoveToExistingSubUserOperationsServer)
		})
		resp, err = c.trClientLocationMoveToExistingSubUserOperationsServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}

// set this to conditionally intercept incoming requests to ClientLocationMoveToExistingSubServerTransport
var clientLocationMoveToExistingSubServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
