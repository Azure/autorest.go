// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ClientLocationMoveToRootServer is a fake server for instances of the locationgroup.ClientLocationMoveToRootClient type.
type ClientLocationMoveToRootServer struct {
	// ClientLocationMoveToRootResourceOperationsServer contains the fakes for client ClientLocationMoveToRootResourceOperationsClient
	ClientLocationMoveToRootResourceOperationsServer ClientLocationMoveToRootResourceOperationsServer
}

// NewClientLocationMoveToRootServerTransport creates a new instance of ClientLocationMoveToRootServerTransport with the provided implementation.
// The returned ClientLocationMoveToRootServerTransport instance is connected to an instance of locationgroup.ClientLocationMoveToRootClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewClientLocationMoveToRootServerTransport(srv *ClientLocationMoveToRootServer) *ClientLocationMoveToRootServerTransport {
	return &ClientLocationMoveToRootServerTransport{srv: srv}
}

// ClientLocationMoveToRootServerTransport connects instances of locationgroup.ClientLocationMoveToRootClient to instances of ClientLocationMoveToRootServer.
// Don't use this type directly, use NewClientLocationMoveToRootServerTransport instead.
type ClientLocationMoveToRootServerTransport struct {
	srv                                                *ClientLocationMoveToRootServer
	trMu                                               sync.Mutex
	trClientLocationMoveToRootResourceOperationsServer *ClientLocationMoveToRootResourceOperationsServerTransport
}

// Do implements the policy.Transporter interface for ClientLocationMoveToRootServerTransport.
func (c *ClientLocationMoveToRootServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return c.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (c *ClientLocationMoveToRootServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "ClientLocationMoveToRootResourceOperationsClient":
		initServer(&c.trMu, &c.trClientLocationMoveToRootResourceOperationsServer, func() *ClientLocationMoveToRootResourceOperationsServerTransport {
			return NewClientLocationMoveToRootResourceOperationsServerTransport(&c.srv.ClientLocationMoveToRootResourceOperationsServer)
		})
		resp, err = c.trClientLocationMoveToRootResourceOperationsServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}

// set this to conditionally intercept incoming requests to ClientLocationMoveToRootServerTransport
var clientLocationMoveToRootServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
