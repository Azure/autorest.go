// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package locationgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// ClientLocationClient - Test for @clientLocation decorator - moving operations between clients
// Don't use this type directly, use a constructor function instead.
type ClientLocationClient struct {
	internal *azcore.Client
}

// NewClientLocationArchiveOperationsClient creates a new instance of [ClientLocationArchiveOperationsClient].
func (client *ClientLocationClient) NewClientLocationArchiveOperationsClient() *ClientLocationArchiveOperationsClient {
	return &ClientLocationArchiveOperationsClient{
		internal: client.internal,
	}
}

// NewClientLocationMoveToExistingSubClient creates a new instance of [ClientLocationMoveToExistingSubClient].
func (client *ClientLocationClient) NewClientLocationMoveToExistingSubClient() *ClientLocationMoveToExistingSubClient {
	return &ClientLocationMoveToExistingSubClient{
		internal: client.internal,
	}
}

// NewClientLocationMoveToNewSubClient creates a new instance of [ClientLocationMoveToNewSubClient].
func (client *ClientLocationClient) NewClientLocationMoveToNewSubClient() *ClientLocationMoveToNewSubClient {
	return &ClientLocationMoveToNewSubClient{
		internal: client.internal,
	}
}

// NewClientLocationMoveToRootClient creates a new instance of [ClientLocationMoveToRootClient].
func (client *ClientLocationClient) NewClientLocationMoveToRootClient() *ClientLocationMoveToRootClient {
	return &ClientLocationMoveToRootClient{
		internal: client.internal,
	}
}

// GetHealthStatus -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - ClientLocationClientGetHealthStatusOptions contains the optional parameters for the ClientLocationClient.GetHealthStatus
//     method.
func (client *ClientLocationClient) GetHealthStatus(ctx context.Context, options *ClientLocationClientGetHealthStatusOptions) (ClientLocationClientGetHealthStatusResponse, error) {
	var err error
	const operationName = "ClientLocationClient.GetHealthStatus"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getHealthStatusCreateRequest(ctx, options)
	if err != nil {
		return ClientLocationClientGetHealthStatusResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ClientLocationClientGetHealthStatusResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ClientLocationClientGetHealthStatusResponse{}, err
	}
	return ClientLocationClientGetHealthStatusResponse{}, nil
}

// getHealthStatusCreateRequest creates the GetHealthStatus request.
func (client *ClientLocationClient) getHealthStatusCreateRequest(ctx context.Context, _ *ClientLocationClientGetHealthStatusOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/client-location/health"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}
