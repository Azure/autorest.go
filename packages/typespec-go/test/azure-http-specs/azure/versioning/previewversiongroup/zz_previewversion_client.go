// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package previewversiongroup

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// PreviewVersionClient contains the methods for the PreviewVersion group.
// Don't use this type directly, use NewPreviewVersionClientWithNoCredential() instead.
type PreviewVersionClient struct {
	internal *azcore.Client
	endpoint string
}

// PreviewVersionClientOptions contains the optional values for creating a [PreviewVersionClient].
type PreviewVersionClientOptions struct {
	azcore.ClientOptions
}

// NewPreviewVersionClientWithNoCredential creates a new instance of PreviewVersionClient with the specified values.
//   - endpoint - Service host
//   - options - PreviewVersionClientOptions contains the optional values for creating a [PreviewVersionClient]
func NewPreviewVersionClientWithNoCredential(endpoint string, options *PreviewVersionClientOptions) (*PreviewVersionClient, error) {
	if options == nil {
		options = &PreviewVersionClientOptions{}
	}
	cl, err := azcore.NewClient(moduleName, moduleVersion, runtime.PipelineOptions{
		APIVersion: runtime.APIVersionOptions{
			Name:     "api-version",
			Location: runtime.APIVersionLocationQueryParam,
		},
	}, &options.ClientOptions)
	if err != nil {
		return nil, err
	}
	client := &PreviewVersionClient{
		endpoint: endpoint,
		internal: cl,
	}
	return client, nil
}

// GetWidget - Get widget by id (available in all versions)
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-12-01-preview
//   - options - PreviewVersionClientGetWidgetOptions contains the optional parameters for the PreviewVersionClient.GetWidget
//     method.
func (client *PreviewVersionClient) GetWidget(ctx context.Context, id string, options *PreviewVersionClientGetWidgetOptions) (PreviewVersionClientGetWidgetResponse, error) {
	var err error
	const operationName = "PreviewVersionClient.GetWidget"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getWidgetCreateRequest(ctx, id, options)
	if err != nil {
		return PreviewVersionClientGetWidgetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PreviewVersionClientGetWidgetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNotFound) {
		err = runtime.NewResponseError(httpResp)
		return PreviewVersionClientGetWidgetResponse{}, err
	}
	resp, err := client.getWidgetHandleResponse(httpResp)
	return resp, err
}

// getWidgetCreateRequest creates the GetWidget request.
func (client *PreviewVersionClient) getWidgetCreateRequest(ctx context.Context, id string, _ *PreviewVersionClientGetWidgetOptions) (*policy.Request, error) {
	urlPath := "/azure/versioning/previewVersion/widgets/{id}"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getWidgetHandleResponse handles the GetWidget response.
func (client *PreviewVersionClient) getWidgetHandleResponse(resp *http.Response) (PreviewVersionClientGetWidgetResponse, error) {
	result := PreviewVersionClientGetWidgetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Widget); err != nil {
		return PreviewVersionClientGetWidgetResponse{}, err
	}
	return result, nil
}

// ListWidgets - List widgets with optional color filtering
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-12-01-preview
//   - options - PreviewVersionClientListWidgetsOptions contains the optional parameters for the PreviewVersionClient.ListWidgets
//     method.
func (client *PreviewVersionClient) ListWidgets(ctx context.Context, options *PreviewVersionClientListWidgetsOptions) (PreviewVersionClientListWidgetsResponse, error) {
	var err error
	const operationName = "PreviewVersionClient.ListWidgets"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.listWidgetsCreateRequest(ctx, options)
	if err != nil {
		return PreviewVersionClientListWidgetsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PreviewVersionClientListWidgetsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PreviewVersionClientListWidgetsResponse{}, err
	}
	resp, err := client.listWidgetsHandleResponse(httpResp)
	return resp, err
}

// listWidgetsCreateRequest creates the ListWidgets request.
func (client *PreviewVersionClient) listWidgetsCreateRequest(ctx context.Context, options *PreviewVersionClientListWidgetsOptions) (*policy.Request, error) {
	urlPath := "/azure/versioning/previewVersion/widgets"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-12-01-preview")
	if options != nil && options.Color != nil {
		reqQP.Set("color", *options.Color)
	}
	if options != nil && options.Name != nil {
		reqQP.Set("name", *options.Name)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listWidgetsHandleResponse handles the ListWidgets response.
func (client *PreviewVersionClient) listWidgetsHandleResponse(resp *http.Response) (PreviewVersionClientListWidgetsResponse, error) {
	result := PreviewVersionClientListWidgetsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ListWidgetsResponse); err != nil {
		return PreviewVersionClientListWidgetsResponse{}, err
	}
	return result, nil
}

// UpdateWidgetColor - Update widget color (preview only)
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-12-01-preview
//   - options - PreviewVersionClientUpdateWidgetColorOptions contains the optional parameters for the PreviewVersionClient.UpdateWidgetColor
//     method.
func (client *PreviewVersionClient) UpdateWidgetColor(ctx context.Context, id string, colorUpdate UpdateWidgetColorRequest, options *PreviewVersionClientUpdateWidgetColorOptions) (PreviewVersionClientUpdateWidgetColorResponse, error) {
	var err error
	const operationName = "PreviewVersionClient.UpdateWidgetColor"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateWidgetColorCreateRequest(ctx, id, colorUpdate, options)
	if err != nil {
		return PreviewVersionClientUpdateWidgetColorResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PreviewVersionClientUpdateWidgetColorResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNotFound) {
		err = runtime.NewResponseError(httpResp)
		return PreviewVersionClientUpdateWidgetColorResponse{}, err
	}
	resp, err := client.updateWidgetColorHandleResponse(httpResp)
	return resp, err
}

// updateWidgetColorCreateRequest creates the UpdateWidgetColor request.
func (client *PreviewVersionClient) updateWidgetColorCreateRequest(ctx context.Context, id string, colorUpdate UpdateWidgetColorRequest, _ *PreviewVersionClientUpdateWidgetColorOptions) (*policy.Request, error) {
	urlPath := "/azure/versioning/previewVersion/widgets/{id}/color"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/merge-patch+json"}
	if err := runtime.MarshalAsJSON(req, colorUpdate); err != nil {
		return nil, err
	}
	return req, nil
}

// updateWidgetColorHandleResponse handles the UpdateWidgetColor response.
func (client *PreviewVersionClient) updateWidgetColorHandleResponse(resp *http.Response) (PreviewVersionClientUpdateWidgetColorResponse, error) {
	result := PreviewVersionClientUpdateWidgetColorResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Widget); err != nil {
		return PreviewVersionClientUpdateWidgetColorResponse{}, err
	}
	return result, nil
}
