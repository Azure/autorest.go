// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"previewversiongroupspecificversion"
	"regexp"
)

// PreviewVersionServer is a fake server for instances of the previewversiongroupspecificversion.PreviewVersionClient type.
type PreviewVersionServer struct {
	// GetWidget is the fake for method PreviewVersionClient.GetWidget
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNotFound
	GetWidget func(ctx context.Context, id string, options *previewversiongroupspecificversion.PreviewVersionClientGetWidgetOptions) (resp azfake.Responder[previewversiongroupspecificversion.PreviewVersionClientGetWidgetResponse], errResp azfake.ErrorResponder)

	// ListWidgets is the fake for method PreviewVersionClient.ListWidgets
	// HTTP status codes to indicate success: http.StatusOK
	ListWidgets func(ctx context.Context, options *previewversiongroupspecificversion.PreviewVersionClientListWidgetsOptions) (resp azfake.Responder[previewversiongroupspecificversion.PreviewVersionClientListWidgetsResponse], errResp azfake.ErrorResponder)
}

// NewPreviewVersionServerTransport creates a new instance of PreviewVersionServerTransport with the provided implementation.
// The returned PreviewVersionServerTransport instance is connected to an instance of previewversiongroupspecificversion.PreviewVersionClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewPreviewVersionServerTransport(srv *PreviewVersionServer) *PreviewVersionServerTransport {
	return &PreviewVersionServerTransport{srv: srv}
}

// PreviewVersionServerTransport connects instances of previewversiongroupspecificversion.PreviewVersionClient to instances of PreviewVersionServer.
// Don't use this type directly, use NewPreviewVersionServerTransport instead.
type PreviewVersionServerTransport struct {
	srv *PreviewVersionServer
}

// Do implements the policy.Transporter interface for PreviewVersionServerTransport.
func (p *PreviewVersionServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return p.dispatchToMethodFake(req, method)
}

func (p *PreviewVersionServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if previewVersionServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = previewVersionServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "PreviewVersionClient.GetWidget":
				res.resp, res.err = p.dispatchGetWidget(req)
			case "PreviewVersionClient.ListWidgets":
				res.resp, res.err = p.dispatchListWidgets(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (p *PreviewVersionServerTransport) dispatchGetWidget(req *http.Request) (*http.Response, error) {
	if p.srv.GetWidget == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetWidget not implemented")}
	}
	const regexStr = `/azure/versioning/previewVersion/widgets/(?P<id>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	idParam, err := url.PathUnescape(matches[regex.SubexpIndex("id")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.GetWidget(req.Context(), idParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNotFound}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNotFound", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Widget, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PreviewVersionServerTransport) dispatchListWidgets(req *http.Request) (*http.Response, error) {
	if p.srv.ListWidgets == nil {
		return nil, &nonRetriableError{errors.New("fake for method ListWidgets not implemented")}
	}
	qp := req.URL.Query()
	nameUnescaped, err := url.QueryUnescape(qp.Get("name"))
	if err != nil {
		return nil, err
	}
	nameParam := getOptional(nameUnescaped)
	var options *previewversiongroupspecificversion.PreviewVersionClientListWidgetsOptions
	if nameParam != nil {
		options = &previewversiongroupspecificversion.PreviewVersionClientListWidgetsOptions{
			Name: nameParam,
		}
	}
	respr, errRespr := p.srv.ListWidgets(req.Context(), options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ListWidgetsResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to PreviewVersionServerTransport
var previewVersionServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
