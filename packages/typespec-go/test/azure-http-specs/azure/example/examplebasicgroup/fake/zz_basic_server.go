// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"net/http"
	"strings"
	"sync"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// BasicServer is a fake server for instances of the examplebasicgroup.BasicClient type.
type BasicServer struct {
	// BasicServiceOperationGroupServer contains the fakes for client BasicServiceOperationGroupClient
	BasicServiceOperationGroupServer BasicServiceOperationGroupServer
}

// NewBasicServerTransport creates a new instance of BasicServerTransport with the provided implementation.
// The returned BasicServerTransport instance is connected to an instance of examplebasicgroup.BasicClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewBasicServerTransport(srv *BasicServer) *BasicServerTransport {
	return &BasicServerTransport{srv: srv}
}

// BasicServerTransport connects instances of examplebasicgroup.BasicClient to instances of BasicServer.
// Don't use this type directly, use NewBasicServerTransport instead.
type BasicServerTransport struct {
	srv                                *BasicServer
	trMu                               sync.Mutex
	trBasicServiceOperationGroupServer *BasicServiceOperationGroupServerTransport
}

// Do implements the policy.Transporter interface for BasicServerTransport.
func (b *BasicServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return b.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (b *BasicServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "BasicServiceOperationGroupClient":
		initServer(&b.trMu, &b.trBasicServiceOperationGroupServer, func() *BasicServiceOperationGroupServerTransport {
			return NewBasicServiceOperationGroupServerTransport(&b.srv.BasicServiceOperationGroupServer)
		})
		resp, err = b.trBasicServiceOperationGroupServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}

// set this to conditionally intercept incoming requests to BasicServerTransport
var basicServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
