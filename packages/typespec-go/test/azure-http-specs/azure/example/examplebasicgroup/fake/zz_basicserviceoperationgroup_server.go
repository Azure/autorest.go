// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"examplebasicgroup"
	"fmt"
	"net/http"
	"net/url"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// BasicServiceOperationGroupServer is a fake server for instances of the examplebasicgroup.BasicServiceOperationGroupClient type.
type BasicServiceOperationGroupServer struct {
	// Basic is the fake for method BasicServiceOperationGroupClient.Basic
	// HTTP status codes to indicate success: http.StatusOK
	Basic func(ctx context.Context, queryParam string, headerParam string, body examplebasicgroup.ActionRequest, options *examplebasicgroup.BasicServiceOperationGroupClientBasicOptions) (resp azfake.Responder[examplebasicgroup.BasicServiceOperationGroupClientBasicResponse], errResp azfake.ErrorResponder)
}

// NewBasicServiceOperationGroupServerTransport creates a new instance of BasicServiceOperationGroupServerTransport with the provided implementation.
// The returned BasicServiceOperationGroupServerTransport instance is connected to an instance of examplebasicgroup.BasicServiceOperationGroupClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewBasicServiceOperationGroupServerTransport(srv *BasicServiceOperationGroupServer) *BasicServiceOperationGroupServerTransport {
	return &BasicServiceOperationGroupServerTransport{srv: srv}
}

// BasicServiceOperationGroupServerTransport connects instances of examplebasicgroup.BasicServiceOperationGroupClient to instances of BasicServiceOperationGroupServer.
// Don't use this type directly, use NewBasicServiceOperationGroupServerTransport instead.
type BasicServiceOperationGroupServerTransport struct {
	srv *BasicServiceOperationGroupServer
}

// Do implements the policy.Transporter interface for BasicServiceOperationGroupServerTransport.
func (b *BasicServiceOperationGroupServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return b.dispatchToMethodFake(req, method)
}

func (b *BasicServiceOperationGroupServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if basicServiceOperationGroupServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = basicServiceOperationGroupServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "BasicServiceOperationGroupClient.Basic":
				res.resp, res.err = b.dispatchBasic(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (b *BasicServiceOperationGroupServerTransport) dispatchBasic(req *http.Request) (*http.Response, error) {
	if b.srv.Basic == nil {
		return nil, &nonRetriableError{errors.New("fake for method Basic not implemented")}
	}
	qp := req.URL.Query()
	body, err := server.UnmarshalRequestAsJSON[examplebasicgroup.ActionRequest](req)
	if err != nil {
		return nil, err
	}
	queryParamParam, err := url.QueryUnescape(qp.Get("query-param"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := b.srv.Basic(req.Context(), queryParamParam, getHeaderValue(req.Header, "header-param"), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ActionResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to BasicServiceOperationGroupServerTransport
var basicServiceOperationGroupServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
