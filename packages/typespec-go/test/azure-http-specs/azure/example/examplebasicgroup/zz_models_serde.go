// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package examplebasicgroup

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
)

// MarshalJSON implements the json.Marshaller interface for type ActionRequest.
func (a ActionRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "arrayProperty", a.ArrayProperty)
	populate(objectMap, "modelProperty", a.ModelProperty)
	populate(objectMap, "recordProperty", a.RecordProperty)
	populate(objectMap, "stringProperty", a.StringProperty)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ActionRequest.
func (a *ActionRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "arrayProperty":
			err = unpopulate(val, "ArrayProperty", &a.ArrayProperty)
			delete(rawMsg, key)
		case "modelProperty":
			err = unpopulate(val, "ModelProperty", &a.ModelProperty)
			delete(rawMsg, key)
		case "recordProperty":
			err = unpopulate(val, "RecordProperty", &a.RecordProperty)
			delete(rawMsg, key)
		case "stringProperty":
			err = unpopulate(val, "StringProperty", &a.StringProperty)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ActionResponse.
func (a ActionResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "arrayProperty", a.ArrayProperty)
	populate(objectMap, "modelProperty", a.ModelProperty)
	populate(objectMap, "recordProperty", a.RecordProperty)
	populate(objectMap, "stringProperty", a.StringProperty)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ActionResponse.
func (a *ActionResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "arrayProperty":
			err = unpopulate(val, "ArrayProperty", &a.ArrayProperty)
			delete(rawMsg, key)
		case "modelProperty":
			err = unpopulate(val, "ModelProperty", &a.ModelProperty)
			delete(rawMsg, key)
		case "recordProperty":
			err = unpopulate(val, "RecordProperty", &a.RecordProperty)
			delete(rawMsg, key)
		case "stringProperty":
			err = unpopulate(val, "StringProperty", &a.StringProperty)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Model.
func (m Model) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "enumProperty", m.EnumProperty)
	populate(objectMap, "float32Property", m.Float32Property)
	populate(objectMap, "int32Property", m.Int32Property)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Model.
func (m *Model) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "enumProperty":
			err = unpopulate(val, "EnumProperty", &m.EnumProperty)
			delete(rawMsg, key)
		case "float32Property":
			err = unpopulate(val, "Float32Property", &m.Float32Property)
			delete(rawMsg, key)
		case "int32Property":
			err = unpopulate(val, "Int32Property", &m.Int32Property)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

func populate(m map[string]any, k string, v any) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, fn string, v any) error {
	if data == nil || string(data) == "null" {
		return nil
	}
	if err := json.Unmarshal(data, v); err != nil {
		return fmt.Errorf("struct field %s: %v", fn, err)
	}
	return nil
}
