// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// JsonServer is a fake server for instances of the jsongroup.JsonClient type.
type JsonServer struct {
	// PropertyServer contains the fakes for client PropertyClient
	PropertyServer PropertyServer
}

// NewJsonServerTransport creates a new instance of JsonServerTransport with the provided implementation.
// The returned JsonServerTransport instance is connected to an instance of jsongroup.JsonClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewJsonServerTransport(srv *JsonServer) *JsonServerTransport {
	return &JsonServerTransport{srv: srv}
}

// JsonServerTransport connects instances of jsongroup.JsonClient to instances of JsonServer.
// Don't use this type directly, use NewJsonServerTransport instead.
type JsonServerTransport struct {
	srv              *JsonServer
	trMu             sync.Mutex
	trPropertyServer *PropertyServerTransport
}

// Do implements the policy.Transporter interface for JsonServerTransport.
func (j *JsonServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return j.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (j *JsonServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "PropertyClient":
		initServer(&j.trMu, &j.trPropertyServer, func() *PropertyServerTransport {
			return NewPropertyServerTransport(&j.srv.PropertyServer)
		})
		resp, err = j.trPropertyServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}
