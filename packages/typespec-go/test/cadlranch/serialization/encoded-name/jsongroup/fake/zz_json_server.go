// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// JSONServer is a fake server for instances of the jsongroup.JSONClient type.
type JSONServer struct {
	// JSONPropertyServer contains the fakes for client JSONPropertyClient
	JSONPropertyServer JSONPropertyServer
}

// NewJSONServerTransport creates a new instance of JSONServerTransport with the provided implementation.
// The returned JSONServerTransport instance is connected to an instance of jsongroup.JSONClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewJSONServerTransport(srv *JSONServer) *JSONServerTransport {
	return &JSONServerTransport{srv: srv}
}

// JSONServerTransport connects instances of jsongroup.JSONClient to instances of JSONServer.
// Don't use this type directly, use NewJSONServerTransport instead.
type JSONServerTransport struct {
	srv                  *JSONServer
	trMu                 sync.Mutex
	trJSONPropertyServer *JSONPropertyServerTransport
}

// Do implements the policy.Transporter interface for JSONServerTransport.
func (j *JSONServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return j.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (j *JSONServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "JSONPropertyClient":
		initServer(&j.trMu, &j.trJSONPropertyServer, func() *JSONPropertyServerTransport {
			return NewJSONPropertyServerTransport(&j.srv.JSONPropertyServer)
		})
		resp, err = j.trJSONPropertyServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}
