// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package projectednamegroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// ProjectedNameClient - Projection
// Don't use this type directly, use a constructor function instead.
type ProjectedNameClient struct {
	internal *azcore.Client
}

// NewModelClient creates a new instance of [ModelClient].
func (client *ProjectedNameClient) NewModelClient() *ModelClient {
	return &ModelClient{
		internal: client.internal,
	}
}

// NewPropertyClient creates a new instance of [PropertyClient].
func (client *ProjectedNameClient) NewPropertyClient() *PropertyClient {
	return &PropertyClient{
		internal: client.internal,
	}
}

//   - options - ProjectedNameClientClientNameOptions contains the optional parameters for the ProjectedNameClient.ClientName
//     method.
func (client *ProjectedNameClient) ClientName(ctx context.Context, options *ProjectedNameClientClientNameOptions) (ProjectedNameClientClientNameResponse, error) {
	var err error
	const operationName = "ProjectedNameClient.ClientName"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.clientNameCreateRequest(ctx, options)
	if err != nil {
		return ProjectedNameClientClientNameResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ProjectedNameClientClientNameResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ProjectedNameClientClientNameResponse{}, err
	}
	return ProjectedNameClientClientNameResponse{}, nil
}

// clientNameCreateRequest creates the ClientName request.
func (client *ProjectedNameClient) clientNameCreateRequest(ctx context.Context, options *ProjectedNameClientClientNameOptions) (*policy.Request, error) {
	urlPath := "/projection/projected-name/operation"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// - options - ProjectedNameClientParameterOptions contains the optional parameters for the ProjectedNameClient.Parameter method.
func (client *ProjectedNameClient) Parameter(ctx context.Context, clientName string, options *ProjectedNameClientParameterOptions) (ProjectedNameClientParameterResponse, error) {
	var err error
	const operationName = "ProjectedNameClient.Parameter"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.parameterCreateRequest(ctx, clientName, options)
	if err != nil {
		return ProjectedNameClientParameterResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ProjectedNameClientParameterResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ProjectedNameClientParameterResponse{}, err
	}
	return ProjectedNameClientParameterResponse{}, nil
}

// parameterCreateRequest creates the Parameter request.
func (client *ProjectedNameClient) parameterCreateRequest(ctx context.Context, clientName string, options *ProjectedNameClientParameterOptions) (*policy.Request, error) {
	urlPath := "/projection/projected-name/parameter"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("default-name", clientName)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}
