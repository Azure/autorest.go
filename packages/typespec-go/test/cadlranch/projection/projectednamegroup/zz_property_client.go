//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package projectednamegroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// PropertyClient contains the methods for the Projection.ProjectedName group.
// Don't use this type directly, use a constructor function instead.
type PropertyClient struct {
	internal *azcore.Client
}

func (client *PropertyClient) Client(ctx context.Context, body ClientProjectedNameModel, options *PropertyClientClientOptions) (PropertyClientClientResponse, error) {
	var err error
	req, err := client.clientCreateRequest(ctx, body, options)
	if err != nil {
		return PropertyClientClientResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PropertyClientClientResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return PropertyClientClientResponse{}, err
	}
	return PropertyClientClientResponse{}, nil
}

// clientCreateRequest creates the Client request.
func (client *PropertyClient) clientCreateRequest(ctx context.Context, body ClientProjectedNameModel, options *PropertyClientClientOptions) (*policy.Request, error) {
	urlPath := "/projection/projected-name/property/client"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

func (client *PropertyClient) JSON(ctx context.Context, body JSONProjectedNameModel, options *PropertyClientJSONOptions) (PropertyClientJSONResponse, error) {
	var err error
	req, err := client.jsonCreateRequest(ctx, body, options)
	if err != nil {
		return PropertyClientJSONResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PropertyClientJSONResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return PropertyClientJSONResponse{}, err
	}
	return PropertyClientJSONResponse{}, nil
}

// jsonCreateRequest creates the JSON request.
func (client *PropertyClient) jsonCreateRequest(ctx context.Context, body JSONProjectedNameModel, options *PropertyClientJSONOptions) (*policy.Request, error) {
	urlPath := "/projection/projected-name/property/json"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

func (client *PropertyClient) JSONAndClient(ctx context.Context, body JSONAndClientProjectedNameModel, options *PropertyClientJSONAndClientOptions) (PropertyClientJSONAndClientResponse, error) {
	var err error
	req, err := client.jsonAndClientCreateRequest(ctx, body, options)
	if err != nil {
		return PropertyClientJSONAndClientResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PropertyClientJSONAndClientResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return PropertyClientJSONAndClientResponse{}, err
	}
	return PropertyClientJSONAndClientResponse{}, nil
}

// jsonAndClientCreateRequest creates the JSONAndClient request.
func (client *PropertyClient) jsonAndClientCreateRequest(ctx context.Context, body JSONAndClientProjectedNameModel, options *PropertyClientJSONAndClientOptions) (*policy.Request, error) {
	urlPath := "/projection/projected-name/property/json-and-client"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

func (client *PropertyClient) Language(ctx context.Context, body LanguageProjectedNameModel, options *PropertyClientLanguageOptions) (PropertyClientLanguageResponse, error) {
	var err error
	req, err := client.languageCreateRequest(ctx, body, options)
	if err != nil {
		return PropertyClientLanguageResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PropertyClientLanguageResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return PropertyClientLanguageResponse{}, err
	}
	return PropertyClientLanguageResponse{}, nil
}

// languageCreateRequest creates the Language request.
func (client *PropertyClient) languageCreateRequest(ctx context.Context, body LanguageProjectedNameModel, options *PropertyClientLanguageOptions) (*policy.Request, error) {
	urlPath := "/projection/projected-name/property/language"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}
