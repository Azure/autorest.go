// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"projectednamegroup"
)

// ProjectedNameModelServer is a fake server for instances of the projectednamegroup.ProjectedNameModelClient type.
type ProjectedNameModelServer struct {
	// Client is the fake for method ProjectedNameModelClient.Client
	// HTTP status codes to indicate success: http.StatusNoContent
	Client func(ctx context.Context, body projectednamegroup.ClientModel, options *projectednamegroup.ProjectedNameModelClientClientOptions) (resp azfake.Responder[projectednamegroup.ProjectedNameModelClientClientResponse], errResp azfake.ErrorResponder)

	// Language is the fake for method ProjectedNameModelClient.Language
	// HTTP status codes to indicate success: http.StatusNoContent
	Language func(ctx context.Context, body projectednamegroup.GoModel, options *projectednamegroup.ProjectedNameModelClientLanguageOptions) (resp azfake.Responder[projectednamegroup.ProjectedNameModelClientLanguageResponse], errResp azfake.ErrorResponder)
}

// NewProjectedNameModelServerTransport creates a new instance of ProjectedNameModelServerTransport with the provided implementation.
// The returned ProjectedNameModelServerTransport instance is connected to an instance of projectednamegroup.ProjectedNameModelClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewProjectedNameModelServerTransport(srv *ProjectedNameModelServer) *ProjectedNameModelServerTransport {
	return &ProjectedNameModelServerTransport{srv: srv}
}

// ProjectedNameModelServerTransport connects instances of projectednamegroup.ProjectedNameModelClient to instances of ProjectedNameModelServer.
// Don't use this type directly, use NewProjectedNameModelServerTransport instead.
type ProjectedNameModelServerTransport struct {
	srv *ProjectedNameModelServer
}

// Do implements the policy.Transporter interface for ProjectedNameModelServerTransport.
func (p *ProjectedNameModelServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return p.dispatchToMethodFake(req, method)
}

func (p *ProjectedNameModelServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "ProjectedNameModelClient.Client":
		resp, err = p.dispatchClient(req)
	case "ProjectedNameModelClient.Language":
		resp, err = p.dispatchLanguage(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (p *ProjectedNameModelServerTransport) dispatchClient(req *http.Request) (*http.Response, error) {
	if p.srv.Client == nil {
		return nil, &nonRetriableError{errors.New("fake for method Client not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[projectednamegroup.ClientModel](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.Client(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ProjectedNameModelServerTransport) dispatchLanguage(req *http.Request) (*http.Response, error) {
	if p.srv.Language == nil {
		return nil, &nonRetriableError{errors.New("fake for method Language not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[projectednamegroup.GoModel](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.Language(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
