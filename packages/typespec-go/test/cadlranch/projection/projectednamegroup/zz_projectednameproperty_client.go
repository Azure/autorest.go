// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package projectednamegroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// ProjectedNamePropertyClient contains the methods for the Projection.ProjectedName namespace.
// Don't use this type directly, use [ProjectedNameClient.NewProjectedNamePropertyClient] instead.
type ProjectedNamePropertyClient struct {
	internal *azcore.Client
}

//   - options - ProjectedNamePropertyClientClientOptions contains the optional parameters for the ProjectedNamePropertyClient.Client
//     method.
func (client *ProjectedNamePropertyClient) Client(ctx context.Context, body ClientProjectedNameModel, options *ProjectedNamePropertyClientClientOptions) (ProjectedNamePropertyClientClientResponse, error) {
	var err error
	const operationName = "ProjectedNamePropertyClient.Client"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.clientCreateRequest(ctx, body, options)
	if err != nil {
		return ProjectedNamePropertyClientClientResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ProjectedNamePropertyClientClientResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ProjectedNamePropertyClientClientResponse{}, err
	}
	return ProjectedNamePropertyClientClientResponse{}, nil
}

// clientCreateRequest creates the Client request.
func (client *ProjectedNamePropertyClient) clientCreateRequest(ctx context.Context, body ClientProjectedNameModel, options *ProjectedNamePropertyClientClientOptions) (*policy.Request, error) {
	urlPath := "/projection/projected-name/property/client"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

//   - options - ProjectedNamePropertyClientJSONOptions contains the optional parameters for the ProjectedNamePropertyClient.JSON
//     method.
func (client *ProjectedNamePropertyClient) JSON(ctx context.Context, body JSONProjectedNameModel, options *ProjectedNamePropertyClientJSONOptions) (ProjectedNamePropertyClientJSONResponse, error) {
	var err error
	const operationName = "ProjectedNamePropertyClient.JSON"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.jsonCreateRequest(ctx, body, options)
	if err != nil {
		return ProjectedNamePropertyClientJSONResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ProjectedNamePropertyClientJSONResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ProjectedNamePropertyClientJSONResponse{}, err
	}
	return ProjectedNamePropertyClientJSONResponse{}, nil
}

// jsonCreateRequest creates the JSON request.
func (client *ProjectedNamePropertyClient) jsonCreateRequest(ctx context.Context, body JSONProjectedNameModel, options *ProjectedNamePropertyClientJSONOptions) (*policy.Request, error) {
	urlPath := "/projection/projected-name/property/json"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

//   - options - ProjectedNamePropertyClientJSONAndClientOptions contains the optional parameters for the ProjectedNamePropertyClient.JSONAndClient
//     method.
func (client *ProjectedNamePropertyClient) JSONAndClient(ctx context.Context, body JSONAndClientProjectedNameModel, options *ProjectedNamePropertyClientJSONAndClientOptions) (ProjectedNamePropertyClientJSONAndClientResponse, error) {
	var err error
	const operationName = "ProjectedNamePropertyClient.JSONAndClient"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.jsonAndClientCreateRequest(ctx, body, options)
	if err != nil {
		return ProjectedNamePropertyClientJSONAndClientResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ProjectedNamePropertyClientJSONAndClientResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ProjectedNamePropertyClientJSONAndClientResponse{}, err
	}
	return ProjectedNamePropertyClientJSONAndClientResponse{}, nil
}

// jsonAndClientCreateRequest creates the JSONAndClient request.
func (client *ProjectedNamePropertyClient) jsonAndClientCreateRequest(ctx context.Context, body JSONAndClientProjectedNameModel, options *ProjectedNamePropertyClientJSONAndClientOptions) (*policy.Request, error) {
	urlPath := "/projection/projected-name/property/json-and-client"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

//   - options - ProjectedNamePropertyClientLanguageOptions contains the optional parameters for the ProjectedNamePropertyClient.Language
//     method.
func (client *ProjectedNamePropertyClient) Language(ctx context.Context, body LanguageProjectedNameModel, options *ProjectedNamePropertyClientLanguageOptions) (ProjectedNamePropertyClientLanguageResponse, error) {
	var err error
	const operationName = "ProjectedNamePropertyClient.Language"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.languageCreateRequest(ctx, body, options)
	if err != nil {
		return ProjectedNamePropertyClientLanguageResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ProjectedNamePropertyClientLanguageResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ProjectedNamePropertyClientLanguageResponse{}, err
	}
	return ProjectedNamePropertyClientLanguageResponse{}, nil
}

// languageCreateRequest creates the Language request.
func (client *ProjectedNamePropertyClient) languageCreateRequest(ctx context.Context, body LanguageProjectedNameModel, options *ProjectedNamePropertyClientLanguageOptions) (*policy.Request, error) {
	urlPath := "/projection/projected-name/property/language"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}
