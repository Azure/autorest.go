// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"oauth2group"
)

// OAuth2Server is a fake server for instances of the oauth2group.OAuth2Client type.
type OAuth2Server struct {
	// Invalid is the fake for method OAuth2Client.Invalid
	// HTTP status codes to indicate success: http.StatusNoContent
	Invalid func(ctx context.Context, options *oauth2group.OAuth2ClientInvalidOptions) (resp azfake.Responder[oauth2group.OAuth2ClientInvalidResponse], errResp azfake.ErrorResponder)

	// Valid is the fake for method OAuth2Client.Valid
	// HTTP status codes to indicate success: http.StatusNoContent
	Valid func(ctx context.Context, options *oauth2group.OAuth2ClientValidOptions) (resp azfake.Responder[oauth2group.OAuth2ClientValidResponse], errResp azfake.ErrorResponder)
}

// NewOAuth2ServerTransport creates a new instance of OAuth2ServerTransport with the provided implementation.
// The returned OAuth2ServerTransport instance is connected to an instance of oauth2group.OAuth2Client via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewOAuth2ServerTransport(srv *OAuth2Server) *OAuth2ServerTransport {
	return &OAuth2ServerTransport{srv: srv}
}

// OAuth2ServerTransport connects instances of oauth2group.OAuth2Client to instances of OAuth2Server.
// Don't use this type directly, use NewOAuth2ServerTransport instead.
type OAuth2ServerTransport struct {
	srv *OAuth2Server
}

// Do implements the policy.Transporter interface for OAuth2ServerTransport.
func (o *OAuth2ServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return o.dispatchToMethodFake(req, method)
}

func (o *OAuth2ServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var res result
		switch method {
		case "OAuth2Client.Invalid":
			res.resp, res.err = o.dispatchInvalid(req)
		case "OAuth2Client.Valid":
			res.resp, res.err = o.dispatchValid(req)
		default:
			res.err = fmt.Errorf("unhandled API %s", method)
		}

		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (o *OAuth2ServerTransport) dispatchInvalid(req *http.Request) (*http.Response, error) {
	if o.srv.Invalid == nil {
		return nil, &nonRetriableError{errors.New("fake for method Invalid not implemented")}
	}
	respr, errRespr := o.srv.Invalid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *OAuth2ServerTransport) dispatchValid(req *http.Request) (*http.Response, error) {
	if o.srv.Valid == nil {
		return nil, &nonRetriableError{errors.New("fake for method Valid not implemented")}
	}
	respr, errRespr := o.srv.Valid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
