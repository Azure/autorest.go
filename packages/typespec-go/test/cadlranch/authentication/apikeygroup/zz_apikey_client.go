// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package apikeygroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// ApiKeyClient - Illustrates clients generated with ApiKey authentication.
// Don't use this type directly, use a constructor function instead.
type ApiKeyClient struct {
	internal *azcore.Client
}

// Invalid - Check whether client is authenticated.
//   - options - ApiKeyClientInvalidOptions contains the optional parameters for the ApiKeyClient.Invalid method.
func (client *ApiKeyClient) Invalid(ctx context.Context, options *ApiKeyClientInvalidOptions) (ApiKeyClientInvalidResponse, error) {
	var err error
	const operationName = "ApiKeyClient.Invalid"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.invalidCreateRequest(ctx, options)
	if err != nil {
		return ApiKeyClientInvalidResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ApiKeyClientInvalidResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ApiKeyClientInvalidResponse{}, err
	}
	return ApiKeyClientInvalidResponse{}, nil
}

// invalidCreateRequest creates the Invalid request.
func (client *ApiKeyClient) invalidCreateRequest(ctx context.Context, options *ApiKeyClientInvalidOptions) (*policy.Request, error) {
	urlPath := "/authentication/api-key/invalid"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Valid - Check whether client is authenticated
//   - options - ApiKeyClientValidOptions contains the optional parameters for the ApiKeyClient.Valid method.
func (client *ApiKeyClient) Valid(ctx context.Context, options *ApiKeyClientValidOptions) (ApiKeyClientValidResponse, error) {
	var err error
	const operationName = "ApiKeyClient.Valid"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.validCreateRequest(ctx, options)
	if err != nil {
		return ApiKeyClientValidResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ApiKeyClientValidResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ApiKeyClientValidResponse{}, err
	}
	return ApiKeyClientValidResponse{}, nil
}

// validCreateRequest creates the Valid request.
func (client *ApiKeyClient) validCreateRequest(ctx context.Context, options *ApiKeyClientValidOptions) (*policy.Request, error) {
	urlPath := "/authentication/api-key/valid"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}
