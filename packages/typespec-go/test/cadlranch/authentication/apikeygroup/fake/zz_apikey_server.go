// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"apikeygroup"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// ApiKeyServer is a fake server for instances of the apikeygroup.ApiKeyClient type.
type ApiKeyServer struct {
	// Invalid is the fake for method ApiKeyClient.Invalid
	// HTTP status codes to indicate success: http.StatusNoContent
	Invalid func(ctx context.Context, options *apikeygroup.ApiKeyClientInvalidOptions) (resp azfake.Responder[apikeygroup.ApiKeyClientInvalidResponse], errResp azfake.ErrorResponder)

	// Valid is the fake for method ApiKeyClient.Valid
	// HTTP status codes to indicate success: http.StatusNoContent
	Valid func(ctx context.Context, options *apikeygroup.ApiKeyClientValidOptions) (resp azfake.Responder[apikeygroup.ApiKeyClientValidResponse], errResp azfake.ErrorResponder)
}

// NewApiKeyServerTransport creates a new instance of ApiKeyServerTransport with the provided implementation.
// The returned ApiKeyServerTransport instance is connected to an instance of apikeygroup.ApiKeyClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewApiKeyServerTransport(srv *ApiKeyServer) *ApiKeyServerTransport {
	return &ApiKeyServerTransport{srv: srv}
}

// ApiKeyServerTransport connects instances of apikeygroup.ApiKeyClient to instances of ApiKeyServer.
// Don't use this type directly, use NewApiKeyServerTransport instead.
type ApiKeyServerTransport struct {
	srv *ApiKeyServer
}

// Do implements the policy.Transporter interface for ApiKeyServerTransport.
func (a *ApiKeyServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return a.dispatchToMethodFake(req, method)
}

func (a *ApiKeyServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "ApiKeyClient.Invalid":
		resp, err = a.dispatchInvalid(req)
	case "ApiKeyClient.Valid":
		resp, err = a.dispatchValid(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (a *ApiKeyServerTransport) dispatchInvalid(req *http.Request) (*http.Response, error) {
	if a.srv.Invalid == nil {
		return nil, &nonRetriableError{errors.New("fake for method Invalid not implemented")}
	}
	respr, errRespr := a.srv.Invalid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ApiKeyServerTransport) dispatchValid(req *http.Request) (*http.Response, error) {
	if a.srv.Valid == nil {
		return nil, &nonRetriableError{errors.New("fake for method Valid not implemented")}
	}
	respr, errRespr := a.srv.Valid(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
