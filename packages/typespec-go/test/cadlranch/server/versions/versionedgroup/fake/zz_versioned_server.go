// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"versionedgroup"
)

// VersionedServer is a fake server for instances of the versionedgroup.VersionedClient type.
type VersionedServer struct {
	// WithPathAPIVersion is the fake for method VersionedClient.WithPathAPIVersion
	// HTTP status codes to indicate success: http.StatusOK
	WithPathAPIVersion func(ctx context.Context, options *versionedgroup.VersionedClientWithPathAPIVersionOptions) (resp azfake.Responder[versionedgroup.VersionedClientWithPathAPIVersionResponse], errResp azfake.ErrorResponder)

	// WithQueryAPIVersion is the fake for method VersionedClient.WithQueryAPIVersion
	// HTTP status codes to indicate success: http.StatusOK
	WithQueryAPIVersion func(ctx context.Context, options *versionedgroup.VersionedClientWithQueryAPIVersionOptions) (resp azfake.Responder[versionedgroup.VersionedClientWithQueryAPIVersionResponse], errResp azfake.ErrorResponder)

	// WithQueryOldAPIVersion is the fake for method VersionedClient.WithQueryOldAPIVersion
	// HTTP status codes to indicate success: http.StatusOK
	WithQueryOldAPIVersion func(ctx context.Context, options *versionedgroup.VersionedClientWithQueryOldAPIVersionOptions) (resp azfake.Responder[versionedgroup.VersionedClientWithQueryOldAPIVersionResponse], errResp azfake.ErrorResponder)

	// WithoutAPIVersion is the fake for method VersionedClient.WithoutAPIVersion
	// HTTP status codes to indicate success: http.StatusOK
	WithoutAPIVersion func(ctx context.Context, options *versionedgroup.VersionedClientWithoutAPIVersionOptions) (resp azfake.Responder[versionedgroup.VersionedClientWithoutAPIVersionResponse], errResp azfake.ErrorResponder)
}

// NewVersionedServerTransport creates a new instance of VersionedServerTransport with the provided implementation.
// The returned VersionedServerTransport instance is connected to an instance of versionedgroup.VersionedClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewVersionedServerTransport(srv *VersionedServer) *VersionedServerTransport {
	return &VersionedServerTransport{srv: srv}
}

// VersionedServerTransport connects instances of versionedgroup.VersionedClient to instances of VersionedServer.
// Don't use this type directly, use NewVersionedServerTransport instead.
type VersionedServerTransport struct {
	srv *VersionedServer
}

// Do implements the policy.Transporter interface for VersionedServerTransport.
func (v *VersionedServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return v.dispatchToMethodFake(req, method)
}

func (v *VersionedServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var res result
		switch method {
		case "VersionedClient.WithPathAPIVersion":
			res.resp, res.err = v.dispatchWithPathAPIVersion(req)
		case "VersionedClient.WithQueryAPIVersion":
			res.resp, res.err = v.dispatchWithQueryAPIVersion(req)
		case "VersionedClient.WithQueryOldAPIVersion":
			res.resp, res.err = v.dispatchWithQueryOldAPIVersion(req)
		case "VersionedClient.WithoutAPIVersion":
			res.resp, res.err = v.dispatchWithoutAPIVersion(req)
		default:
			res.err = fmt.Errorf("unhandled API %s", method)
		}

		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (v *VersionedServerTransport) dispatchWithPathAPIVersion(req *http.Request) (*http.Response, error) {
	if v.srv.WithPathAPIVersion == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithPathAPIVersion not implemented")}
	}
	respr, errRespr := v.srv.WithPathAPIVersion(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (v *VersionedServerTransport) dispatchWithQueryAPIVersion(req *http.Request) (*http.Response, error) {
	if v.srv.WithQueryAPIVersion == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithQueryAPIVersion not implemented")}
	}
	respr, errRespr := v.srv.WithQueryAPIVersion(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (v *VersionedServerTransport) dispatchWithQueryOldAPIVersion(req *http.Request) (*http.Response, error) {
	if v.srv.WithQueryOldAPIVersion == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithQueryOldAPIVersion not implemented")}
	}
	respr, errRespr := v.srv.WithQueryOldAPIVersion(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (v *VersionedServerTransport) dispatchWithoutAPIVersion(req *http.Request) (*http.Response, error) {
	if v.srv.WithoutAPIVersion == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithoutAPIVersion not implemented")}
	}
	respr, errRespr := v.srv.WithoutAPIVersion(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
