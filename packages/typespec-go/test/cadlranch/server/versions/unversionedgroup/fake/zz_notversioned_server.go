// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"regexp"
	"unversionedgroup"
)

// NotVersionedServer is a fake server for instances of the unversionedgroup.NotVersionedClient type.
type NotVersionedServer struct {
	// WithPathAPIVersion is the fake for method NotVersionedClient.WithPathAPIVersion
	// HTTP status codes to indicate success: http.StatusOK
	WithPathAPIVersion func(ctx context.Context, apiVersion string, options *unversionedgroup.NotVersionedClientWithPathAPIVersionOptions) (resp azfake.Responder[unversionedgroup.NotVersionedClientWithPathAPIVersionResponse], errResp azfake.ErrorResponder)

	// WithQueryAPIVersion is the fake for method NotVersionedClient.WithQueryAPIVersion
	// HTTP status codes to indicate success: http.StatusOK
	WithQueryAPIVersion func(ctx context.Context, apiVersion string, options *unversionedgroup.NotVersionedClientWithQueryAPIVersionOptions) (resp azfake.Responder[unversionedgroup.NotVersionedClientWithQueryAPIVersionResponse], errResp azfake.ErrorResponder)

	// WithoutAPIVersion is the fake for method NotVersionedClient.WithoutAPIVersion
	// HTTP status codes to indicate success: http.StatusOK
	WithoutAPIVersion func(ctx context.Context, options *unversionedgroup.NotVersionedClientWithoutAPIVersionOptions) (resp azfake.Responder[unversionedgroup.NotVersionedClientWithoutAPIVersionResponse], errResp azfake.ErrorResponder)
}

// NewNotVersionedServerTransport creates a new instance of NotVersionedServerTransport with the provided implementation.
// The returned NotVersionedServerTransport instance is connected to an instance of unversionedgroup.NotVersionedClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewNotVersionedServerTransport(srv *NotVersionedServer) *NotVersionedServerTransport {
	return &NotVersionedServerTransport{srv: srv}
}

// NotVersionedServerTransport connects instances of unversionedgroup.NotVersionedClient to instances of NotVersionedServer.
// Don't use this type directly, use NewNotVersionedServerTransport instead.
type NotVersionedServerTransport struct {
	srv *NotVersionedServer
}

// Do implements the policy.Transporter interface for NotVersionedServerTransport.
func (n *NotVersionedServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return n.dispatchToMethodFake(req, method)
}

func (n *NotVersionedServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var res result
		switch method {
		case "NotVersionedClient.WithPathAPIVersion":
			res.resp, res.err = n.dispatchWithPathAPIVersion(req)
		case "NotVersionedClient.WithQueryAPIVersion":
			res.resp, res.err = n.dispatchWithQueryAPIVersion(req)
		case "NotVersionedClient.WithoutAPIVersion":
			res.resp, res.err = n.dispatchWithoutAPIVersion(req)
		default:
			res.err = fmt.Errorf("unhandled API %s", method)
		}

		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (n *NotVersionedServerTransport) dispatchWithPathAPIVersion(req *http.Request) (*http.Response, error) {
	if n.srv.WithPathAPIVersion == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithPathAPIVersion not implemented")}
	}
	const regexStr = `/server/versions/not-versioned/with-path-api-version/(?P<apiVersion>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	apiVersionParam, err := url.PathUnescape(matches[regex.SubexpIndex("apiVersion")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := n.srv.WithPathAPIVersion(req.Context(), apiVersionParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (n *NotVersionedServerTransport) dispatchWithQueryAPIVersion(req *http.Request) (*http.Response, error) {
	if n.srv.WithQueryAPIVersion == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithQueryAPIVersion not implemented")}
	}
	qp := req.URL.Query()
	apiVersionParam, err := url.QueryUnescape(qp.Get("api-version"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := n.srv.WithQueryAPIVersion(req.Context(), apiVersionParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (n *NotVersionedServerTransport) dispatchWithoutAPIVersion(req *http.Request) (*http.Response, error) {
	if n.srv.WithoutAPIVersion == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithoutAPIVersion not implemented")}
	}
	respr, errRespr := n.srv.WithoutAPIVersion(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
