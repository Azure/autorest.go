// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"datetimegroup"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"time"
)

// QueryServer is a fake server for instances of the datetimegroup.QueryClient type.
type QueryServer struct {
	// Default is the fake for method QueryClient.Default
	// HTTP status codes to indicate success: http.StatusNoContent
	Default func(ctx context.Context, value time.Time, options *datetimegroup.QueryClientDefaultOptions) (resp azfake.Responder[datetimegroup.QueryClientDefaultResponse], errResp azfake.ErrorResponder)

	// RFC3339 is the fake for method QueryClient.RFC3339
	// HTTP status codes to indicate success: http.StatusNoContent
	RFC3339 func(ctx context.Context, value time.Time, options *datetimegroup.QueryClientRFC3339Options) (resp azfake.Responder[datetimegroup.QueryClientRFC3339Response], errResp azfake.ErrorResponder)

	// RFC7231 is the fake for method QueryClient.RFC7231
	// HTTP status codes to indicate success: http.StatusNoContent
	RFC7231 func(ctx context.Context, value time.Time, options *datetimegroup.QueryClientRFC7231Options) (resp azfake.Responder[datetimegroup.QueryClientRFC7231Response], errResp azfake.ErrorResponder)

	// UnixTimestamp is the fake for method QueryClient.UnixTimestamp
	// HTTP status codes to indicate success: http.StatusNoContent
	UnixTimestamp func(ctx context.Context, value time.Time, options *datetimegroup.QueryClientUnixTimestampOptions) (resp azfake.Responder[datetimegroup.QueryClientUnixTimestampResponse], errResp azfake.ErrorResponder)

	// UnixTimestampArray is the fake for method QueryClient.UnixTimestampArray
	// HTTP status codes to indicate success: http.StatusNoContent
	UnixTimestampArray func(ctx context.Context, value []time.Time, options *datetimegroup.QueryClientUnixTimestampArrayOptions) (resp azfake.Responder[datetimegroup.QueryClientUnixTimestampArrayResponse], errResp azfake.ErrorResponder)
}

// NewQueryServerTransport creates a new instance of QueryServerTransport with the provided implementation.
// The returned QueryServerTransport instance is connected to an instance of datetimegroup.QueryClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewQueryServerTransport(srv *QueryServer) *QueryServerTransport {
	return &QueryServerTransport{srv: srv}
}

// QueryServerTransport connects instances of datetimegroup.QueryClient to instances of QueryServer.
// Don't use this type directly, use NewQueryServerTransport instead.
type QueryServerTransport struct {
	srv *QueryServer
}

// Do implements the policy.Transporter interface for QueryServerTransport.
func (q *QueryServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return q.dispatchToMethodFake(req, method)
}

func (q *QueryServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "QueryClient.Default":
		resp, err = q.dispatchDefault(req)
	case "QueryClient.RFC3339":
		resp, err = q.dispatchRFC3339(req)
	case "QueryClient.RFC7231":
		resp, err = q.dispatchRFC7231(req)
	case "QueryClient.UnixTimestamp":
		resp, err = q.dispatchUnixTimestamp(req)
	case "QueryClient.UnixTimestampArray":
		resp, err = q.dispatchUnixTimestampArray(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (q *QueryServerTransport) dispatchDefault(req *http.Request) (*http.Response, error) {
	if q.srv.Default == nil {
		return nil, &nonRetriableError{errors.New("fake for method Default not implemented")}
	}
	qp := req.URL.Query()
	valueUnescaped, err := url.QueryUnescape(qp.Get("value"))
	if err != nil {
		return nil, err
	}
	valueParam, err := time.Parse(time.RFC3339Nano, valueUnescaped)
	if err != nil {
		return nil, err
	}
	respr, errRespr := q.srv.Default(req.Context(), valueParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (q *QueryServerTransport) dispatchRFC3339(req *http.Request) (*http.Response, error) {
	if q.srv.RFC3339 == nil {
		return nil, &nonRetriableError{errors.New("fake for method RFC3339 not implemented")}
	}
	qp := req.URL.Query()
	valueUnescaped, err := url.QueryUnescape(qp.Get("value"))
	if err != nil {
		return nil, err
	}
	valueParam, err := time.Parse(time.RFC3339Nano, valueUnescaped)
	if err != nil {
		return nil, err
	}
	respr, errRespr := q.srv.RFC3339(req.Context(), valueParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (q *QueryServerTransport) dispatchRFC7231(req *http.Request) (*http.Response, error) {
	if q.srv.RFC7231 == nil {
		return nil, &nonRetriableError{errors.New("fake for method RFC7231 not implemented")}
	}
	qp := req.URL.Query()
	valueUnescaped, err := url.QueryUnescape(qp.Get("value"))
	if err != nil {
		return nil, err
	}
	valueParam, err := time.Parse(time.RFC1123, valueUnescaped)
	if err != nil {
		return nil, err
	}
	respr, errRespr := q.srv.RFC7231(req.Context(), valueParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (q *QueryServerTransport) dispatchUnixTimestamp(req *http.Request) (*http.Response, error) {
	if q.srv.UnixTimestamp == nil {
		return nil, &nonRetriableError{errors.New("fake for method UnixTimestamp not implemented")}
	}
	qp := req.URL.Query()
	valueUnescaped, err := url.QueryUnescape(qp.Get("value"))
	if err != nil {
		return nil, err
	}
	valueParam, err := parseWithCast(valueUnescaped, func(v string) (time.Time, error) {
		p, parseErr := strconv.ParseInt(v, 10, 64)
		if parseErr != nil {
			return time.Time{}, parseErr
		}
		return time.Unix(p, 0).UTC(), nil
	})
	if err != nil {
		return nil, err
	}
	respr, errRespr := q.srv.UnixTimestamp(req.Context(), valueParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (q *QueryServerTransport) dispatchUnixTimestampArray(req *http.Request) (*http.Response, error) {
	if q.srv.UnixTimestampArray == nil {
		return nil, &nonRetriableError{errors.New("fake for method UnixTimestampArray not implemented")}
	}
	qp := req.URL.Query()
	valueUnescaped, err := url.QueryUnescape(qp.Get("value"))
	if err != nil {
		return nil, err
	}
	valueElements := splitHelper(valueUnescaped, ",")
	valueParam := make([]time.Time, len(valueElements))
	for i := 0; i < len(valueElements); i++ {
		p, parseErr := strconv.ParseInt(valueElements[i], 10, 64)
		if parseErr != nil {
			return nil, parseErr
		}
		parsedTimeUnix := time.Unix(p, 0).UTC()
		valueParam[i] = time.Time(parsedTimeUnix)
	}
	respr, errRespr := q.srv.UnixTimestampArray(req.Context(), valueParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
