// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"datetimegroup"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// PropertyServer is a fake server for instances of the datetimegroup.PropertyClient type.
type PropertyServer struct {
	// Default is the fake for method PropertyClient.Default
	// HTTP status codes to indicate success: http.StatusOK
	Default func(ctx context.Context, body datetimegroup.DefaultDatetimeProperty, options *datetimegroup.PropertyClientDefaultOptions) (resp azfake.Responder[datetimegroup.PropertyClientDefaultResponse], errResp azfake.ErrorResponder)

	// RFC3339 is the fake for method PropertyClient.RFC3339
	// HTTP status codes to indicate success: http.StatusOK
	RFC3339 func(ctx context.Context, body datetimegroup.RFC3339DatetimeProperty, options *datetimegroup.PropertyClientRFC3339Options) (resp azfake.Responder[datetimegroup.PropertyClientRFC3339Response], errResp azfake.ErrorResponder)

	// RFC7231 is the fake for method PropertyClient.RFC7231
	// HTTP status codes to indicate success: http.StatusOK
	RFC7231 func(ctx context.Context, body datetimegroup.RFC7231DatetimeProperty, options *datetimegroup.PropertyClientRFC7231Options) (resp azfake.Responder[datetimegroup.PropertyClientRFC7231Response], errResp azfake.ErrorResponder)

	// UnixTimestamp is the fake for method PropertyClient.UnixTimestamp
	// HTTP status codes to indicate success: http.StatusOK
	UnixTimestamp func(ctx context.Context, body datetimegroup.UnixTimestampDatetimeProperty, options *datetimegroup.PropertyClientUnixTimestampOptions) (resp azfake.Responder[datetimegroup.PropertyClientUnixTimestampResponse], errResp azfake.ErrorResponder)

	// UnixTimestampArray is the fake for method PropertyClient.UnixTimestampArray
	// HTTP status codes to indicate success: http.StatusOK
	UnixTimestampArray func(ctx context.Context, body datetimegroup.UnixTimestampArrayDatetimeProperty, options *datetimegroup.PropertyClientUnixTimestampArrayOptions) (resp azfake.Responder[datetimegroup.PropertyClientUnixTimestampArrayResponse], errResp azfake.ErrorResponder)
}

// NewPropertyServerTransport creates a new instance of PropertyServerTransport with the provided implementation.
// The returned PropertyServerTransport instance is connected to an instance of datetimegroup.PropertyClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewPropertyServerTransport(srv *PropertyServer) *PropertyServerTransport {
	return &PropertyServerTransport{srv: srv}
}

// PropertyServerTransport connects instances of datetimegroup.PropertyClient to instances of PropertyServer.
// Don't use this type directly, use NewPropertyServerTransport instead.
type PropertyServerTransport struct {
	srv *PropertyServer
}

// Do implements the policy.Transporter interface for PropertyServerTransport.
func (p *PropertyServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "PropertyClient.Default":
		resp, err = p.dispatchDefault(req)
	case "PropertyClient.RFC3339":
		resp, err = p.dispatchRFC3339(req)
	case "PropertyClient.RFC7231":
		resp, err = p.dispatchRFC7231(req)
	case "PropertyClient.UnixTimestamp":
		resp, err = p.dispatchUnixTimestamp(req)
	case "PropertyClient.UnixTimestampArray":
		resp, err = p.dispatchUnixTimestampArray(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (p *PropertyServerTransport) dispatchDefault(req *http.Request) (*http.Response, error) {
	if p.srv.Default == nil {
		return nil, &nonRetriableError{errors.New("fake for method Default not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[datetimegroup.DefaultDatetimeProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.Default(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DefaultDatetimeProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PropertyServerTransport) dispatchRFC3339(req *http.Request) (*http.Response, error) {
	if p.srv.RFC3339 == nil {
		return nil, &nonRetriableError{errors.New("fake for method RFC3339 not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[datetimegroup.RFC3339DatetimeProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.RFC3339(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RFC3339DatetimeProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PropertyServerTransport) dispatchRFC7231(req *http.Request) (*http.Response, error) {
	if p.srv.RFC7231 == nil {
		return nil, &nonRetriableError{errors.New("fake for method RFC7231 not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[datetimegroup.RFC7231DatetimeProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.RFC7231(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RFC7231DatetimeProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PropertyServerTransport) dispatchUnixTimestamp(req *http.Request) (*http.Response, error) {
	if p.srv.UnixTimestamp == nil {
		return nil, &nonRetriableError{errors.New("fake for method UnixTimestamp not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[datetimegroup.UnixTimestampDatetimeProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.UnixTimestamp(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).UnixTimestampDatetimeProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PropertyServerTransport) dispatchUnixTimestampArray(req *http.Request) (*http.Response, error) {
	if p.srv.UnixTimestampArray == nil {
		return nil, &nonRetriableError{errors.New("fake for method UnixTimestampArray not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[datetimegroup.UnixTimestampArrayDatetimeProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.UnixTimestampArray(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).UnixTimestampArrayDatetimeProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
