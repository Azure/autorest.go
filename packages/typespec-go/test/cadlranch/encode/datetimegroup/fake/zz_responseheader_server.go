// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"datetimegroup"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"time"
)

// ResponseHeaderServer is a fake server for instances of the datetimegroup.ResponseHeaderClient type.
type ResponseHeaderServer struct {
	// Default is the fake for method ResponseHeaderClient.Default
	// HTTP status codes to indicate success: http.StatusNoContent
	Default func(ctx context.Context, options *datetimegroup.ResponseHeaderClientDefaultOptions) (resp azfake.Responder[datetimegroup.ResponseHeaderClientDefaultResponse], errResp azfake.ErrorResponder)

	// RFC3339 is the fake for method ResponseHeaderClient.RFC3339
	// HTTP status codes to indicate success: http.StatusNoContent
	RFC3339 func(ctx context.Context, options *datetimegroup.ResponseHeaderClientRFC3339Options) (resp azfake.Responder[datetimegroup.ResponseHeaderClientRFC3339Response], errResp azfake.ErrorResponder)

	// RFC7231 is the fake for method ResponseHeaderClient.RFC7231
	// HTTP status codes to indicate success: http.StatusNoContent
	RFC7231 func(ctx context.Context, options *datetimegroup.ResponseHeaderClientRFC7231Options) (resp azfake.Responder[datetimegroup.ResponseHeaderClientRFC7231Response], errResp azfake.ErrorResponder)

	// UnixTimestamp is the fake for method ResponseHeaderClient.UnixTimestamp
	// HTTP status codes to indicate success: http.StatusNoContent
	UnixTimestamp func(ctx context.Context, options *datetimegroup.ResponseHeaderClientUnixTimestampOptions) (resp azfake.Responder[datetimegroup.ResponseHeaderClientUnixTimestampResponse], errResp azfake.ErrorResponder)
}

// NewResponseHeaderServerTransport creates a new instance of ResponseHeaderServerTransport with the provided implementation.
// The returned ResponseHeaderServerTransport instance is connected to an instance of datetimegroup.ResponseHeaderClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewResponseHeaderServerTransport(srv *ResponseHeaderServer) *ResponseHeaderServerTransport {
	return &ResponseHeaderServerTransport{srv: srv}
}

// ResponseHeaderServerTransport connects instances of datetimegroup.ResponseHeaderClient to instances of ResponseHeaderServer.
// Don't use this type directly, use NewResponseHeaderServerTransport instead.
type ResponseHeaderServerTransport struct {
	srv *ResponseHeaderServer
}

// Do implements the policy.Transporter interface for ResponseHeaderServerTransport.
func (r *ResponseHeaderServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "ResponseHeaderClient.Default":
		resp, err = r.dispatchDefault(req)
	case "ResponseHeaderClient.RFC3339":
		resp, err = r.dispatchRFC3339(req)
	case "ResponseHeaderClient.RFC7231":
		resp, err = r.dispatchRFC7231(req)
	case "ResponseHeaderClient.UnixTimestamp":
		resp, err = r.dispatchUnixTimestamp(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (r *ResponseHeaderServerTransport) dispatchDefault(req *http.Request) (*http.Response, error) {
	if r.srv.Default == nil {
		return nil, &nonRetriableError{errors.New("fake for method Default not implemented")}
	}
	respr, errRespr := r.srv.Default(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).Value; val != nil {
		resp.Header.Set("value", val.Format(time.RFC1123))
	}
	return resp, nil
}

func (r *ResponseHeaderServerTransport) dispatchRFC3339(req *http.Request) (*http.Response, error) {
	if r.srv.RFC3339 == nil {
		return nil, &nonRetriableError{errors.New("fake for method RFC3339 not implemented")}
	}
	respr, errRespr := r.srv.RFC3339(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).Value; val != nil {
		resp.Header.Set("value", val.Format(time.RFC3339Nano))
	}
	return resp, nil
}

func (r *ResponseHeaderServerTransport) dispatchRFC7231(req *http.Request) (*http.Response, error) {
	if r.srv.RFC7231 == nil {
		return nil, &nonRetriableError{errors.New("fake for method RFC7231 not implemented")}
	}
	respr, errRespr := r.srv.RFC7231(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).Value; val != nil {
		resp.Header.Set("value", val.Format(time.RFC1123))
	}
	return resp, nil
}

func (r *ResponseHeaderServerTransport) dispatchUnixTimestamp(req *http.Request) (*http.Response, error) {
	if r.srv.UnixTimestamp == nil {
		return nil, &nonRetriableError{errors.New("fake for method UnixTimestamp not implemented")}
	}
	respr, errRespr := r.srv.UnixTimestamp(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).Value; val != nil {
		resp.Header.Set("value", timeUnix(*val).String())
	}
	return resp, nil
}
