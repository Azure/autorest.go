// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package datetimegroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// PropertyClient contains the methods for the Encode.Datetime namespace.
// Don't use this type directly, use [DatetimeClient.NewPropertyClient] instead.
type PropertyClient struct {
	internal *azcore.Client
}

// - options - PropertyClientDefaultOptions contains the optional parameters for the PropertyClient.Default method.
func (client *PropertyClient) Default(ctx context.Context, body DefaultDatetimeProperty, options *PropertyClientDefaultOptions) (PropertyClientDefaultResponse, error) {
	var err error
	req, err := client.defaultCreateRequest(ctx, body, options)
	if err != nil {
		return PropertyClientDefaultResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PropertyClientDefaultResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PropertyClientDefaultResponse{}, err
	}
	resp, err := client.defaultHandleResponse(httpResp)
	return resp, err
}

// defaultCreateRequest creates the Default request.
func (client *PropertyClient) defaultCreateRequest(ctx context.Context, body DefaultDatetimeProperty, options *PropertyClientDefaultOptions) (*policy.Request, error) {
	urlPath := "/encode/datetime/property/default"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// defaultHandleResponse handles the Default response.
func (client *PropertyClient) defaultHandleResponse(resp *http.Response) (PropertyClientDefaultResponse, error) {
	result := PropertyClientDefaultResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DefaultDatetimeProperty); err != nil {
		return PropertyClientDefaultResponse{}, err
	}
	return result, nil
}

// - options - PropertyClientRFC3339Options contains the optional parameters for the PropertyClient.RFC3339 method.
func (client *PropertyClient) RFC3339(ctx context.Context, body RFC3339DatetimeProperty, options *PropertyClientRFC3339Options) (PropertyClientRFC3339Response, error) {
	var err error
	req, err := client.rfc3339CreateRequest(ctx, body, options)
	if err != nil {
		return PropertyClientRFC3339Response{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PropertyClientRFC3339Response{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PropertyClientRFC3339Response{}, err
	}
	resp, err := client.rfc3339HandleResponse(httpResp)
	return resp, err
}

// rfc3339CreateRequest creates the RFC3339 request.
func (client *PropertyClient) rfc3339CreateRequest(ctx context.Context, body RFC3339DatetimeProperty, options *PropertyClientRFC3339Options) (*policy.Request, error) {
	urlPath := "/encode/datetime/property/rfc3339"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// rfc3339HandleResponse handles the RFC3339 response.
func (client *PropertyClient) rfc3339HandleResponse(resp *http.Response) (PropertyClientRFC3339Response, error) {
	result := PropertyClientRFC3339Response{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RFC3339DatetimeProperty); err != nil {
		return PropertyClientRFC3339Response{}, err
	}
	return result, nil
}

// - options - PropertyClientRFC7231Options contains the optional parameters for the PropertyClient.RFC7231 method.
func (client *PropertyClient) RFC7231(ctx context.Context, body RFC7231DatetimeProperty, options *PropertyClientRFC7231Options) (PropertyClientRFC7231Response, error) {
	var err error
	req, err := client.rfc7231CreateRequest(ctx, body, options)
	if err != nil {
		return PropertyClientRFC7231Response{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PropertyClientRFC7231Response{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PropertyClientRFC7231Response{}, err
	}
	resp, err := client.rfc7231HandleResponse(httpResp)
	return resp, err
}

// rfc7231CreateRequest creates the RFC7231 request.
func (client *PropertyClient) rfc7231CreateRequest(ctx context.Context, body RFC7231DatetimeProperty, options *PropertyClientRFC7231Options) (*policy.Request, error) {
	urlPath := "/encode/datetime/property/rfc7231"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// rfc7231HandleResponse handles the RFC7231 response.
func (client *PropertyClient) rfc7231HandleResponse(resp *http.Response) (PropertyClientRFC7231Response, error) {
	result := PropertyClientRFC7231Response{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RFC7231DatetimeProperty); err != nil {
		return PropertyClientRFC7231Response{}, err
	}
	return result, nil
}

// - options - PropertyClientUnixTimestampOptions contains the optional parameters for the PropertyClient.UnixTimestamp method.
func (client *PropertyClient) UnixTimestamp(ctx context.Context, body UnixTimestampDatetimeProperty, options *PropertyClientUnixTimestampOptions) (PropertyClientUnixTimestampResponse, error) {
	var err error
	req, err := client.unixTimestampCreateRequest(ctx, body, options)
	if err != nil {
		return PropertyClientUnixTimestampResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PropertyClientUnixTimestampResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PropertyClientUnixTimestampResponse{}, err
	}
	resp, err := client.unixTimestampHandleResponse(httpResp)
	return resp, err
}

// unixTimestampCreateRequest creates the UnixTimestamp request.
func (client *PropertyClient) unixTimestampCreateRequest(ctx context.Context, body UnixTimestampDatetimeProperty, options *PropertyClientUnixTimestampOptions) (*policy.Request, error) {
	urlPath := "/encode/datetime/property/unix-timestamp"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// unixTimestampHandleResponse handles the UnixTimestamp response.
func (client *PropertyClient) unixTimestampHandleResponse(resp *http.Response) (PropertyClientUnixTimestampResponse, error) {
	result := PropertyClientUnixTimestampResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.UnixTimestampDatetimeProperty); err != nil {
		return PropertyClientUnixTimestampResponse{}, err
	}
	return result, nil
}

//   - options - PropertyClientUnixTimestampArrayOptions contains the optional parameters for the PropertyClient.UnixTimestampArray
//     method.
func (client *PropertyClient) UnixTimestampArray(ctx context.Context, body UnixTimestampArrayDatetimeProperty, options *PropertyClientUnixTimestampArrayOptions) (PropertyClientUnixTimestampArrayResponse, error) {
	var err error
	req, err := client.unixTimestampArrayCreateRequest(ctx, body, options)
	if err != nil {
		return PropertyClientUnixTimestampArrayResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PropertyClientUnixTimestampArrayResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PropertyClientUnixTimestampArrayResponse{}, err
	}
	resp, err := client.unixTimestampArrayHandleResponse(httpResp)
	return resp, err
}

// unixTimestampArrayCreateRequest creates the UnixTimestampArray request.
func (client *PropertyClient) unixTimestampArrayCreateRequest(ctx context.Context, body UnixTimestampArrayDatetimeProperty, options *PropertyClientUnixTimestampArrayOptions) (*policy.Request, error) {
	urlPath := "/encode/datetime/property/unix-timestamp-array"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// unixTimestampArrayHandleResponse handles the UnixTimestampArray response.
func (client *PropertyClient) unixTimestampArrayHandleResponse(resp *http.Response) (PropertyClientUnixTimestampArrayResponse, error) {
	result := PropertyClientUnixTimestampArrayResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.UnixTimestampArrayDatetimeProperty); err != nil {
		return PropertyClientUnixTimestampArrayResponse{}, err
	}
	return result, nil
}
