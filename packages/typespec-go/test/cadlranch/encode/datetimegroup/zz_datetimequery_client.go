// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package datetimegroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"time"
)

// DatetimeQueryClient contains the methods for the Encode.Datetime namespace.
// Don't use this type directly, use [DatetimeClient.NewDatetimeQueryClient] instead.
type DatetimeQueryClient struct {
	internal *azcore.Client
}

// Default -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - DatetimeQueryClientDefaultOptions contains the optional parameters for the DatetimeQueryClient.Default method.
func (client *DatetimeQueryClient) Default(ctx context.Context, value time.Time, options *DatetimeQueryClientDefaultOptions) (DatetimeQueryClientDefaultResponse, error) {
	var err error
	const operationName = "DatetimeQueryClient.Default"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.defaultCreateRequest(ctx, value, options)
	if err != nil {
		return DatetimeQueryClientDefaultResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DatetimeQueryClientDefaultResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return DatetimeQueryClientDefaultResponse{}, err
	}
	return DatetimeQueryClientDefaultResponse{}, nil
}

// defaultCreateRequest creates the Default request.
func (client *DatetimeQueryClient) defaultCreateRequest(ctx context.Context, value time.Time, _ *DatetimeQueryClientDefaultOptions) (*policy.Request, error) {
	urlPath := "/encode/datetime/query/default"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("value", value.Format(time.RFC3339Nano))
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// RFC3339 -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - DatetimeQueryClientRFC3339Options contains the optional parameters for the DatetimeQueryClient.RFC3339 method.
func (client *DatetimeQueryClient) RFC3339(ctx context.Context, value time.Time, options *DatetimeQueryClientRFC3339Options) (DatetimeQueryClientRFC3339Response, error) {
	var err error
	const operationName = "DatetimeQueryClient.RFC3339"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.rfc3339CreateRequest(ctx, value, options)
	if err != nil {
		return DatetimeQueryClientRFC3339Response{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DatetimeQueryClientRFC3339Response{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return DatetimeQueryClientRFC3339Response{}, err
	}
	return DatetimeQueryClientRFC3339Response{}, nil
}

// rfc3339CreateRequest creates the RFC3339 request.
func (client *DatetimeQueryClient) rfc3339CreateRequest(ctx context.Context, value time.Time, _ *DatetimeQueryClientRFC3339Options) (*policy.Request, error) {
	urlPath := "/encode/datetime/query/rfc3339"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("value", value.Format(time.RFC3339Nano))
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// RFC7231 -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - DatetimeQueryClientRFC7231Options contains the optional parameters for the DatetimeQueryClient.RFC7231 method.
func (client *DatetimeQueryClient) RFC7231(ctx context.Context, value time.Time, options *DatetimeQueryClientRFC7231Options) (DatetimeQueryClientRFC7231Response, error) {
	var err error
	const operationName = "DatetimeQueryClient.RFC7231"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.rfc7231CreateRequest(ctx, value, options)
	if err != nil {
		return DatetimeQueryClientRFC7231Response{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DatetimeQueryClientRFC7231Response{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return DatetimeQueryClientRFC7231Response{}, err
	}
	return DatetimeQueryClientRFC7231Response{}, nil
}

// rfc7231CreateRequest creates the RFC7231 request.
func (client *DatetimeQueryClient) rfc7231CreateRequest(ctx context.Context, value time.Time, _ *DatetimeQueryClientRFC7231Options) (*policy.Request, error) {
	urlPath := "/encode/datetime/query/rfc7231"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("value", value.Format(time.RFC1123))
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// UnixTimestamp -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - DatetimeQueryClientUnixTimestampOptions contains the optional parameters for the DatetimeQueryClient.UnixTimestamp
//     method.
func (client *DatetimeQueryClient) UnixTimestamp(ctx context.Context, value time.Time, options *DatetimeQueryClientUnixTimestampOptions) (DatetimeQueryClientUnixTimestampResponse, error) {
	var err error
	const operationName = "DatetimeQueryClient.UnixTimestamp"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.unixTimestampCreateRequest(ctx, value, options)
	if err != nil {
		return DatetimeQueryClientUnixTimestampResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DatetimeQueryClientUnixTimestampResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return DatetimeQueryClientUnixTimestampResponse{}, err
	}
	return DatetimeQueryClientUnixTimestampResponse{}, nil
}

// unixTimestampCreateRequest creates the UnixTimestamp request.
func (client *DatetimeQueryClient) unixTimestampCreateRequest(ctx context.Context, value time.Time, _ *DatetimeQueryClientUnixTimestampOptions) (*policy.Request, error) {
	urlPath := "/encode/datetime/query/unix-timestamp"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("value", timeUnix(value).String())
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// UnixTimestampArray -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - DatetimeQueryClientUnixTimestampArrayOptions contains the optional parameters for the DatetimeQueryClient.UnixTimestampArray
//     method.
func (client *DatetimeQueryClient) UnixTimestampArray(ctx context.Context, value []time.Time, options *DatetimeQueryClientUnixTimestampArrayOptions) (DatetimeQueryClientUnixTimestampArrayResponse, error) {
	var err error
	const operationName = "DatetimeQueryClient.UnixTimestampArray"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.unixTimestampArrayCreateRequest(ctx, value, options)
	if err != nil {
		return DatetimeQueryClientUnixTimestampArrayResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DatetimeQueryClientUnixTimestampArrayResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return DatetimeQueryClientUnixTimestampArrayResponse{}, err
	}
	return DatetimeQueryClientUnixTimestampArrayResponse{}, nil
}

// unixTimestampArrayCreateRequest creates the UnixTimestampArray request.
func (client *DatetimeQueryClient) unixTimestampArrayCreateRequest(ctx context.Context, value []time.Time, _ *DatetimeQueryClientUnixTimestampArrayOptions) (*policy.Request, error) {
	urlPath := "/encode/datetime/query/unix-timestamp-array"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("value", strings.Join(func() []string {
		encodedValue := make([]string, len(value))
		for i := 0; i < len(value); i++ {
			encodedValue[i] = timeUnix(value[i]).String()
		}
		return encodedValue
	}(), ","))
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}
