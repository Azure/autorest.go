//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package datetimegroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"time"
)

// ResponseHeaderClient contains the methods for the Encode.Datetime group.
// Don't use this type directly, use a constructor function instead.
type ResponseHeaderClient struct {
	internal *azcore.Client
}

func (client *ResponseHeaderClient) Default(ctx context.Context, options *ResponseHeaderClientDefaultOptions) (ResponseHeaderClientDefaultResponse, error) {
	var err error
	req, err := client.defaultCreateRequest(ctx, options)
	if err != nil {
		return ResponseHeaderClientDefaultResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ResponseHeaderClientDefaultResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ResponseHeaderClientDefaultResponse{}, err
	}
	resp, err := client.defaultHandleResponse(httpResp)
	return resp, err
}

// defaultCreateRequest creates the Default request.
func (client *ResponseHeaderClient) defaultCreateRequest(ctx context.Context, options *ResponseHeaderClientDefaultOptions) (*policy.Request, error) {
	urlPath := "/encode/datetime/responseheader/default"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// defaultHandleResponse handles the Default response.
func (client *ResponseHeaderClient) defaultHandleResponse(resp *http.Response) (ResponseHeaderClientDefaultResponse, error) {
	result := ResponseHeaderClientDefaultResponse{}
	if val := resp.Header.Get("value"); val != "" {
		value, err := time.Parse(time.RFC3339Nano, val)
		if err != nil {
			return ResponseHeaderClientDefaultResponse{}, err
		}
		result.Value = &value
	}
	return result, nil
}

func (client *ResponseHeaderClient) RFC3339(ctx context.Context, options *ResponseHeaderClientRFC3339Options) (ResponseHeaderClientRFC3339Response, error) {
	var err error
	req, err := client.rfc3339CreateRequest(ctx, options)
	if err != nil {
		return ResponseHeaderClientRFC3339Response{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ResponseHeaderClientRFC3339Response{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ResponseHeaderClientRFC3339Response{}, err
	}
	resp, err := client.rfc3339HandleResponse(httpResp)
	return resp, err
}

// rfc3339CreateRequest creates the RFC3339 request.
func (client *ResponseHeaderClient) rfc3339CreateRequest(ctx context.Context, options *ResponseHeaderClientRFC3339Options) (*policy.Request, error) {
	urlPath := "/encode/datetime/responseheader/rfc3339"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// rfc3339HandleResponse handles the RFC3339 response.
func (client *ResponseHeaderClient) rfc3339HandleResponse(resp *http.Response) (ResponseHeaderClientRFC3339Response, error) {
	result := ResponseHeaderClientRFC3339Response{}
	if val := resp.Header.Get("value"); val != "" {
		value, err := time.Parse(time.RFC3339Nano, val)
		if err != nil {
			return ResponseHeaderClientRFC3339Response{}, err
		}
		result.Value = &value
	}
	return result, nil
}

func (client *ResponseHeaderClient) RFC7231(ctx context.Context, options *ResponseHeaderClientRFC7231Options) (ResponseHeaderClientRFC7231Response, error) {
	var err error
	req, err := client.rfc7231CreateRequest(ctx, options)
	if err != nil {
		return ResponseHeaderClientRFC7231Response{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ResponseHeaderClientRFC7231Response{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ResponseHeaderClientRFC7231Response{}, err
	}
	resp, err := client.rfc7231HandleResponse(httpResp)
	return resp, err
}

// rfc7231CreateRequest creates the RFC7231 request.
func (client *ResponseHeaderClient) rfc7231CreateRequest(ctx context.Context, options *ResponseHeaderClientRFC7231Options) (*policy.Request, error) {
	urlPath := "/encode/datetime/responseheader/rfc7231"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// rfc7231HandleResponse handles the RFC7231 response.
func (client *ResponseHeaderClient) rfc7231HandleResponse(resp *http.Response) (ResponseHeaderClientRFC7231Response, error) {
	result := ResponseHeaderClientRFC7231Response{}
	if val := resp.Header.Get("value"); val != "" {
		value, err := time.Parse(time.RFC3339Nano, val)
		if err != nil {
			return ResponseHeaderClientRFC7231Response{}, err
		}
		result.Value = &value
	}
	return result, nil
}

func (client *ResponseHeaderClient) UnixTimestamp(ctx context.Context, options *ResponseHeaderClientUnixTimestampOptions) (ResponseHeaderClientUnixTimestampResponse, error) {
	var err error
	req, err := client.unixTimestampCreateRequest(ctx, options)
	if err != nil {
		return ResponseHeaderClientUnixTimestampResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ResponseHeaderClientUnixTimestampResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ResponseHeaderClientUnixTimestampResponse{}, err
	}
	resp, err := client.unixTimestampHandleResponse(httpResp)
	return resp, err
}

// unixTimestampCreateRequest creates the UnixTimestamp request.
func (client *ResponseHeaderClient) unixTimestampCreateRequest(ctx context.Context, options *ResponseHeaderClientUnixTimestampOptions) (*policy.Request, error) {
	urlPath := "/encode/datetime/responseheader/unix-timestamp"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// unixTimestampHandleResponse handles the UnixTimestamp response.
func (client *ResponseHeaderClient) unixTimestampHandleResponse(resp *http.Response) (ResponseHeaderClientUnixTimestampResponse, error) {
	result := ResponseHeaderClientUnixTimestampResponse{}
	if val := resp.Header.Get("value"); val != "" {
		value, err := time.Parse(time.RFC3339Nano, val)
		if err != nil {
			return ResponseHeaderClientUnixTimestampResponse{}, err
		}
		result.Value = &value
	}
	return result, nil
}
