// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"numericgroup"
)

// NumericPropertyServer is a fake server for instances of the numericgroup.NumericPropertyClient type.
type NumericPropertyServer struct {
	// SafeintAsString is the fake for method NumericPropertyClient.SafeintAsString
	// HTTP status codes to indicate success: http.StatusOK
	SafeintAsString func(ctx context.Context, body numericgroup.SafeintAsStringProperty, options *numericgroup.NumericPropertyClientSafeintAsStringOptions) (resp azfake.Responder[numericgroup.NumericPropertyClientSafeintAsStringResponse], errResp azfake.ErrorResponder)

	// Uint32AsStringOptional is the fake for method NumericPropertyClient.Uint32AsStringOptional
	// HTTP status codes to indicate success: http.StatusOK
	Uint32AsStringOptional func(ctx context.Context, body numericgroup.Uint32AsStringProperty, options *numericgroup.NumericPropertyClientUint32AsStringOptionalOptions) (resp azfake.Responder[numericgroup.NumericPropertyClientUint32AsStringOptionalResponse], errResp azfake.ErrorResponder)
}

// NewNumericPropertyServerTransport creates a new instance of NumericPropertyServerTransport with the provided implementation.
// The returned NumericPropertyServerTransport instance is connected to an instance of numericgroup.NumericPropertyClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewNumericPropertyServerTransport(srv *NumericPropertyServer) *NumericPropertyServerTransport {
	return &NumericPropertyServerTransport{srv: srv}
}

// NumericPropertyServerTransport connects instances of numericgroup.NumericPropertyClient to instances of NumericPropertyServer.
// Don't use this type directly, use NewNumericPropertyServerTransport instead.
type NumericPropertyServerTransport struct {
	srv *NumericPropertyServer
}

// Do implements the policy.Transporter interface for NumericPropertyServerTransport.
func (n *NumericPropertyServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return n.dispatchToMethodFake(req, method)
}

func (n *NumericPropertyServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var res result
		switch method {
		case "NumericPropertyClient.SafeintAsString":
			res.resp, res.err = n.dispatchSafeintAsString(req)
		case "NumericPropertyClient.Uint32AsStringOptional":
			res.resp, res.err = n.dispatchUint32AsStringOptional(req)
		default:
			res.err = fmt.Errorf("unhandled API %s", method)
		}

		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (n *NumericPropertyServerTransport) dispatchSafeintAsString(req *http.Request) (*http.Response, error) {
	if n.srv.SafeintAsString == nil {
		return nil, &nonRetriableError{errors.New("fake for method SafeintAsString not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[numericgroup.SafeintAsStringProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := n.srv.SafeintAsString(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SafeintAsStringProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (n *NumericPropertyServerTransport) dispatchUint32AsStringOptional(req *http.Request) (*http.Response, error) {
	if n.srv.Uint32AsStringOptional == nil {
		return nil, &nonRetriableError{errors.New("fake for method Uint32AsStringOptional not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[numericgroup.Uint32AsStringProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := n.srv.Uint32AsStringOptional(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Uint32AsStringProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
