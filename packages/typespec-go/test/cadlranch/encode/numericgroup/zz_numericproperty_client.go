// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package numericgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// NumericPropertyClient contains the methods for the NumericProperty group.
// Don't use this type directly, use [NumericClient.NewNumericPropertyClient] instead.
type NumericPropertyClient struct {
	internal *azcore.Client
}

// SafeintAsString -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - NumericPropertyClientSafeintAsStringOptions contains the optional parameters for the NumericPropertyClient.SafeintAsString
//     method.
func (client *NumericPropertyClient) SafeintAsString(ctx context.Context, body SafeintAsStringProperty, options *NumericPropertyClientSafeintAsStringOptions) (NumericPropertyClientSafeintAsStringResponse, error) {
	var err error
	const operationName = "NumericPropertyClient.SafeintAsString"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.safeintAsStringCreateRequest(ctx, body, options)
	if err != nil {
		return NumericPropertyClientSafeintAsStringResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NumericPropertyClientSafeintAsStringResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NumericPropertyClientSafeintAsStringResponse{}, err
	}
	resp, err := client.safeintAsStringHandleResponse(httpResp)
	return resp, err
}

// safeintAsStringCreateRequest creates the SafeintAsString request.
func (client *NumericPropertyClient) safeintAsStringCreateRequest(ctx context.Context, body SafeintAsStringProperty, _ *NumericPropertyClientSafeintAsStringOptions) (*policy.Request, error) {
	urlPath := "/encode/numeric/property/safeint"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// safeintAsStringHandleResponse handles the SafeintAsString response.
func (client *NumericPropertyClient) safeintAsStringHandleResponse(resp *http.Response) (NumericPropertyClientSafeintAsStringResponse, error) {
	result := NumericPropertyClientSafeintAsStringResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SafeintAsStringProperty); err != nil {
		return NumericPropertyClientSafeintAsStringResponse{}, err
	}
	return result, nil
}

// Uint32AsStringOptional -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - NumericPropertyClientUint32AsStringOptionalOptions contains the optional parameters for the NumericPropertyClient.Uint32AsStringOptional
//     method.
func (client *NumericPropertyClient) Uint32AsStringOptional(ctx context.Context, body Uint32AsStringProperty, options *NumericPropertyClientUint32AsStringOptionalOptions) (NumericPropertyClientUint32AsStringOptionalResponse, error) {
	var err error
	const operationName = "NumericPropertyClient.Uint32AsStringOptional"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.uint32AsStringOptionalCreateRequest(ctx, body, options)
	if err != nil {
		return NumericPropertyClientUint32AsStringOptionalResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NumericPropertyClientUint32AsStringOptionalResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NumericPropertyClientUint32AsStringOptionalResponse{}, err
	}
	resp, err := client.uint32AsStringOptionalHandleResponse(httpResp)
	return resp, err
}

// uint32AsStringOptionalCreateRequest creates the Uint32AsStringOptional request.
func (client *NumericPropertyClient) uint32AsStringOptionalCreateRequest(ctx context.Context, body Uint32AsStringProperty, _ *NumericPropertyClientUint32AsStringOptionalOptions) (*policy.Request, error) {
	urlPath := "/encode/numeric/property/uint32"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// uint32AsStringOptionalHandleResponse handles the Uint32AsStringOptional response.
func (client *NumericPropertyClient) uint32AsStringOptionalHandleResponse(resp *http.Response) (NumericPropertyClientUint32AsStringOptionalResponse, error) {
	result := NumericPropertyClientUint32AsStringOptionalResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Uint32AsStringProperty); err != nil {
		return NumericPropertyClientUint32AsStringOptionalResponse{}, err
	}
	return result, nil
}
