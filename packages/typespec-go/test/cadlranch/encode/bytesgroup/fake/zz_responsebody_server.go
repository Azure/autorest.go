// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"bytesgroup"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// ResponseBodyServer is a fake server for instances of the bytesgroup.ResponseBodyClient type.
type ResponseBodyServer struct {
	// Base64 is the fake for method ResponseBodyClient.Base64
	// HTTP status codes to indicate success: http.StatusOK
	Base64 func(ctx context.Context, options *bytesgroup.ResponseBodyClientBase64Options) (resp azfake.Responder[bytesgroup.ResponseBodyClientBase64Response], errResp azfake.ErrorResponder)

	// Base64URL is the fake for method ResponseBodyClient.Base64URL
	// HTTP status codes to indicate success: http.StatusOK
	Base64URL func(ctx context.Context, options *bytesgroup.ResponseBodyClientBase64URLOptions) (resp azfake.Responder[bytesgroup.ResponseBodyClientBase64URLResponse], errResp azfake.ErrorResponder)

	// CustomContentType is the fake for method ResponseBodyClient.CustomContentType
	// HTTP status codes to indicate success: http.StatusOK
	CustomContentType func(ctx context.Context, options *bytesgroup.ResponseBodyClientCustomContentTypeOptions) (resp azfake.Responder[bytesgroup.ResponseBodyClientCustomContentTypeResponse], errResp azfake.ErrorResponder)

	// Default is the fake for method ResponseBodyClient.Default
	// HTTP status codes to indicate success: http.StatusOK
	Default func(ctx context.Context, options *bytesgroup.ResponseBodyClientDefaultOptions) (resp azfake.Responder[bytesgroup.ResponseBodyClientDefaultResponse], errResp azfake.ErrorResponder)

	// OctetStream is the fake for method ResponseBodyClient.OctetStream
	// HTTP status codes to indicate success: http.StatusOK
	OctetStream func(ctx context.Context, options *bytesgroup.ResponseBodyClientOctetStreamOptions) (resp azfake.Responder[bytesgroup.ResponseBodyClientOctetStreamResponse], errResp azfake.ErrorResponder)
}

// NewResponseBodyServerTransport creates a new instance of ResponseBodyServerTransport with the provided implementation.
// The returned ResponseBodyServerTransport instance is connected to an instance of bytesgroup.ResponseBodyClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewResponseBodyServerTransport(srv *ResponseBodyServer) *ResponseBodyServerTransport {
	return &ResponseBodyServerTransport{srv: srv}
}

// ResponseBodyServerTransport connects instances of bytesgroup.ResponseBodyClient to instances of ResponseBodyServer.
// Don't use this type directly, use NewResponseBodyServerTransport instead.
type ResponseBodyServerTransport struct {
	srv *ResponseBodyServer
}

// Do implements the policy.Transporter interface for ResponseBodyServerTransport.
func (r *ResponseBodyServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "ResponseBodyClient.Base64":
		resp, err = r.dispatchBase64(req)
	case "ResponseBodyClient.Base64URL":
		resp, err = r.dispatchBase64URL(req)
	case "ResponseBodyClient.CustomContentType":
		resp, err = r.dispatchCustomContentType(req)
	case "ResponseBodyClient.Default":
		resp, err = r.dispatchDefault(req)
	case "ResponseBodyClient.OctetStream":
		resp, err = r.dispatchOctetStream(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (r *ResponseBodyServerTransport) dispatchBase64(req *http.Request) (*http.Response, error) {
	if r.srv.Base64 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Base64 not implemented")}
	}
	respr, errRespr := r.srv.Base64(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsByteArray(respContent, server.GetResponse(respr).Value, runtime.Base64StdFormat, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *ResponseBodyServerTransport) dispatchBase64URL(req *http.Request) (*http.Response, error) {
	if r.srv.Base64URL == nil {
		return nil, &nonRetriableError{errors.New("fake for method Base64URL not implemented")}
	}
	respr, errRespr := r.srv.Base64URL(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsByteArray(respContent, server.GetResponse(respr).Value, runtime.Base64URLFormat, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *ResponseBodyServerTransport) dispatchCustomContentType(req *http.Request) (*http.Response, error) {
	if r.srv.CustomContentType == nil {
		return nil, &nonRetriableError{errors.New("fake for method CustomContentType not implemented")}
	}
	respr, errRespr := r.srv.CustomContentType(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsByteArray(respContent, server.GetResponse(respr).Value, runtime.Base64StdFormat, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *ResponseBodyServerTransport) dispatchDefault(req *http.Request) (*http.Response, error) {
	if r.srv.Default == nil {
		return nil, &nonRetriableError{errors.New("fake for method Default not implemented")}
	}
	respr, errRespr := r.srv.Default(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsByteArray(respContent, server.GetResponse(respr).Value, runtime.Base64StdFormat, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *ResponseBodyServerTransport) dispatchOctetStream(req *http.Request) (*http.Response, error) {
	if r.srv.OctetStream == nil {
		return nil, &nonRetriableError{errors.New("fake for method OctetStream not implemented")}
	}
	respr, errRespr := r.srv.OctetStream(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsByteArray(respContent, server.GetResponse(respr).Value, runtime.Base64StdFormat, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
