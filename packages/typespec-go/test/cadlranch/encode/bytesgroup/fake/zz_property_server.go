// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"bytesgroup"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// PropertyServer is a fake server for instances of the bytesgroup.PropertyClient type.
type PropertyServer struct {
	// Base64 is the fake for method PropertyClient.Base64
	// HTTP status codes to indicate success: http.StatusOK
	Base64 func(ctx context.Context, body bytesgroup.Base64BytesProperty, options *bytesgroup.PropertyClientBase64Options) (resp azfake.Responder[bytesgroup.PropertyClientBase64Response], errResp azfake.ErrorResponder)

	// Base64URL is the fake for method PropertyClient.Base64URL
	// HTTP status codes to indicate success: http.StatusOK
	Base64URL func(ctx context.Context, body bytesgroup.Base64URLBytesProperty, options *bytesgroup.PropertyClientBase64URLOptions) (resp azfake.Responder[bytesgroup.PropertyClientBase64URLResponse], errResp azfake.ErrorResponder)

	// Base64URLArray is the fake for method PropertyClient.Base64URLArray
	// HTTP status codes to indicate success: http.StatusOK
	Base64URLArray func(ctx context.Context, body bytesgroup.Base64URLArrayBytesProperty, options *bytesgroup.PropertyClientBase64URLArrayOptions) (resp azfake.Responder[bytesgroup.PropertyClientBase64URLArrayResponse], errResp azfake.ErrorResponder)

	// Default is the fake for method PropertyClient.Default
	// HTTP status codes to indicate success: http.StatusOK
	Default func(ctx context.Context, body bytesgroup.DefaultBytesProperty, options *bytesgroup.PropertyClientDefaultOptions) (resp azfake.Responder[bytesgroup.PropertyClientDefaultResponse], errResp azfake.ErrorResponder)
}

// NewPropertyServerTransport creates a new instance of PropertyServerTransport with the provided implementation.
// The returned PropertyServerTransport instance is connected to an instance of bytesgroup.PropertyClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewPropertyServerTransport(srv *PropertyServer) *PropertyServerTransport {
	return &PropertyServerTransport{srv: srv}
}

// PropertyServerTransport connects instances of bytesgroup.PropertyClient to instances of PropertyServer.
// Don't use this type directly, use NewPropertyServerTransport instead.
type PropertyServerTransport struct {
	srv *PropertyServer
}

// Do implements the policy.Transporter interface for PropertyServerTransport.
func (p *PropertyServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return p.dispatchToMethodFake(req, method)
}

func (p *PropertyServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "PropertyClient.Base64":
		resp, err = p.dispatchBase64(req)
	case "PropertyClient.Base64URL":
		resp, err = p.dispatchBase64URL(req)
	case "PropertyClient.Base64URLArray":
		resp, err = p.dispatchBase64URLArray(req)
	case "PropertyClient.Default":
		resp, err = p.dispatchDefault(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (p *PropertyServerTransport) dispatchBase64(req *http.Request) (*http.Response, error) {
	if p.srv.Base64 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Base64 not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[bytesgroup.Base64BytesProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.Base64(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Base64BytesProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PropertyServerTransport) dispatchBase64URL(req *http.Request) (*http.Response, error) {
	if p.srv.Base64URL == nil {
		return nil, &nonRetriableError{errors.New("fake for method Base64URL not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[bytesgroup.Base64URLBytesProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.Base64URL(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Base64URLBytesProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PropertyServerTransport) dispatchBase64URLArray(req *http.Request) (*http.Response, error) {
	if p.srv.Base64URLArray == nil {
		return nil, &nonRetriableError{errors.New("fake for method Base64URLArray not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[bytesgroup.Base64URLArrayBytesProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.Base64URLArray(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Base64URLArrayBytesProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PropertyServerTransport) dispatchDefault(req *http.Request) (*http.Response, error) {
	if p.srv.Default == nil {
		return nil, &nonRetriableError{errors.New("fake for method Default not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[bytesgroup.DefaultBytesProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.Default(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DefaultBytesProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
