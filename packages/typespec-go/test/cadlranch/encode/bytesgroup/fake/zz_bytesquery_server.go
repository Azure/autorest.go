// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"bytesgroup"
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
)

// BytesQueryServer is a fake server for instances of the bytesgroup.BytesQueryClient type.
type BytesQueryServer struct {
	// Base64 is the fake for method BytesQueryClient.Base64
	// HTTP status codes to indicate success: http.StatusNoContent
	Base64 func(ctx context.Context, value []byte, options *bytesgroup.BytesQueryClientBase64Options) (resp azfake.Responder[bytesgroup.BytesQueryClientBase64Response], errResp azfake.ErrorResponder)

	// Base64URL is the fake for method BytesQueryClient.Base64URL
	// HTTP status codes to indicate success: http.StatusNoContent
	Base64URL func(ctx context.Context, value []byte, options *bytesgroup.BytesQueryClientBase64URLOptions) (resp azfake.Responder[bytesgroup.BytesQueryClientBase64URLResponse], errResp azfake.ErrorResponder)

	// Base64URLArray is the fake for method BytesQueryClient.Base64URLArray
	// HTTP status codes to indicate success: http.StatusNoContent
	Base64URLArray func(ctx context.Context, value [][]byte, options *bytesgroup.BytesQueryClientBase64URLArrayOptions) (resp azfake.Responder[bytesgroup.BytesQueryClientBase64URLArrayResponse], errResp azfake.ErrorResponder)

	// Default is the fake for method BytesQueryClient.Default
	// HTTP status codes to indicate success: http.StatusNoContent
	Default func(ctx context.Context, value []byte, options *bytesgroup.BytesQueryClientDefaultOptions) (resp azfake.Responder[bytesgroup.BytesQueryClientDefaultResponse], errResp azfake.ErrorResponder)
}

// NewBytesQueryServerTransport creates a new instance of BytesQueryServerTransport with the provided implementation.
// The returned BytesQueryServerTransport instance is connected to an instance of bytesgroup.BytesQueryClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewBytesQueryServerTransport(srv *BytesQueryServer) *BytesQueryServerTransport {
	return &BytesQueryServerTransport{srv: srv}
}

// BytesQueryServerTransport connects instances of bytesgroup.BytesQueryClient to instances of BytesQueryServer.
// Don't use this type directly, use NewBytesQueryServerTransport instead.
type BytesQueryServerTransport struct {
	srv *BytesQueryServer
}

// Do implements the policy.Transporter interface for BytesQueryServerTransport.
func (b *BytesQueryServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return b.dispatchToMethodFake(req, method)
}

func (b *BytesQueryServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var res result
		switch method {
		case "BytesQueryClient.Base64":
			res.resp, res.err = b.dispatchBase64(req)
		case "BytesQueryClient.Base64URL":
			res.resp, res.err = b.dispatchBase64URL(req)
		case "BytesQueryClient.Base64URLArray":
			res.resp, res.err = b.dispatchBase64URLArray(req)
		case "BytesQueryClient.Default":
			res.resp, res.err = b.dispatchDefault(req)
		default:
			res.err = fmt.Errorf("unhandled API %s", method)
		}

		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (b *BytesQueryServerTransport) dispatchBase64(req *http.Request) (*http.Response, error) {
	if b.srv.Base64 == nil {
		return nil, &nonRetriableError{errors.New("fake for method Base64 not implemented")}
	}
	qp := req.URL.Query()
	valueUnescaped, err := url.QueryUnescape(qp.Get("value"))
	if err != nil {
		return nil, err
	}
	valueParam, err := base64.StdEncoding.DecodeString(valueUnescaped)
	if err != nil {
		return nil, err
	}
	respr, errRespr := b.srv.Base64(req.Context(), valueParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (b *BytesQueryServerTransport) dispatchBase64URL(req *http.Request) (*http.Response, error) {
	if b.srv.Base64URL == nil {
		return nil, &nonRetriableError{errors.New("fake for method Base64URL not implemented")}
	}
	qp := req.URL.Query()
	valueUnescaped, err := url.QueryUnescape(qp.Get("value"))
	if err != nil {
		return nil, err
	}
	valueParam, err := base64.URLEncoding.DecodeString(valueUnescaped)
	if err != nil {
		return nil, err
	}
	respr, errRespr := b.srv.Base64URL(req.Context(), valueParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (b *BytesQueryServerTransport) dispatchBase64URLArray(req *http.Request) (*http.Response, error) {
	if b.srv.Base64URLArray == nil {
		return nil, &nonRetriableError{errors.New("fake for method Base64URLArray not implemented")}
	}
	qp := req.URL.Query()
	valueUnescaped, err := url.QueryUnescape(qp.Get("value"))
	if err != nil {
		return nil, err
	}
	valueElements := splitHelper(valueUnescaped, ",")
	valueParam := make([][]byte, len(valueElements))
	for i := 0; i < len(valueElements); i++ {
		parsedURL, parseErr := base64.URLEncoding.DecodeString(valueElements[i])
		if parseErr != nil {
			return nil, parseErr
		}
		valueParam[i] = []byte(parsedURL)
	}
	respr, errRespr := b.srv.Base64URLArray(req.Context(), valueParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (b *BytesQueryServerTransport) dispatchDefault(req *http.Request) (*http.Response, error) {
	if b.srv.Default == nil {
		return nil, &nonRetriableError{errors.New("fake for method Default not implemented")}
	}
	qp := req.URL.Query()
	valueUnescaped, err := url.QueryUnescape(qp.Get("value"))
	if err != nil {
		return nil, err
	}
	valueParam, err := base64.StdEncoding.DecodeString(valueUnescaped)
	if err != nil {
		return nil, err
	}
	respr, errRespr := b.srv.Default(req.Context(), valueParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
