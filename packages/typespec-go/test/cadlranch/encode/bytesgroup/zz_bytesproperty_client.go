// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package bytesgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// BytesPropertyClient contains the methods for the Encode.Bytes namespace.
// Don't use this type directly, use [BytesClient.NewBytesPropertyClient] instead.
type BytesPropertyClient struct {
	internal *azcore.Client
}

// - options - BytesPropertyClientBase64Options contains the optional parameters for the BytesPropertyClient.Base64 method.
func (client *BytesPropertyClient) Base64(ctx context.Context, body Base64BytesProperty, options *BytesPropertyClientBase64Options) (BytesPropertyClientBase64Response, error) {
	var err error
	const operationName = "BytesPropertyClient.Base64"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.base64CreateRequest(ctx, body, options)
	if err != nil {
		return BytesPropertyClientBase64Response{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BytesPropertyClientBase64Response{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return BytesPropertyClientBase64Response{}, err
	}
	resp, err := client.base64HandleResponse(httpResp)
	return resp, err
}

// base64CreateRequest creates the Base64 request.
func (client *BytesPropertyClient) base64CreateRequest(ctx context.Context, body Base64BytesProperty, options *BytesPropertyClientBase64Options) (*policy.Request, error) {
	urlPath := "/encode/bytes/property/base64"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// base64HandleResponse handles the Base64 response.
func (client *BytesPropertyClient) base64HandleResponse(resp *http.Response) (BytesPropertyClientBase64Response, error) {
	result := BytesPropertyClientBase64Response{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Base64BytesProperty); err != nil {
		return BytesPropertyClientBase64Response{}, err
	}
	return result, nil
}

// - options - BytesPropertyClientBase64URLOptions contains the optional parameters for the BytesPropertyClient.Base64URL method.
func (client *BytesPropertyClient) Base64URL(ctx context.Context, body Base64URLBytesProperty, options *BytesPropertyClientBase64URLOptions) (BytesPropertyClientBase64URLResponse, error) {
	var err error
	const operationName = "BytesPropertyClient.Base64URL"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.base64URLCreateRequest(ctx, body, options)
	if err != nil {
		return BytesPropertyClientBase64URLResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BytesPropertyClientBase64URLResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return BytesPropertyClientBase64URLResponse{}, err
	}
	resp, err := client.base64URLHandleResponse(httpResp)
	return resp, err
}

// base64URLCreateRequest creates the Base64URL request.
func (client *BytesPropertyClient) base64URLCreateRequest(ctx context.Context, body Base64URLBytesProperty, options *BytesPropertyClientBase64URLOptions) (*policy.Request, error) {
	urlPath := "/encode/bytes/property/base64url"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// base64URLHandleResponse handles the Base64URL response.
func (client *BytesPropertyClient) base64URLHandleResponse(resp *http.Response) (BytesPropertyClientBase64URLResponse, error) {
	result := BytesPropertyClientBase64URLResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Base64URLBytesProperty); err != nil {
		return BytesPropertyClientBase64URLResponse{}, err
	}
	return result, nil
}

//   - options - BytesPropertyClientBase64URLArrayOptions contains the optional parameters for the BytesPropertyClient.Base64URLArray
//     method.
func (client *BytesPropertyClient) Base64URLArray(ctx context.Context, body Base64URLArrayBytesProperty, options *BytesPropertyClientBase64URLArrayOptions) (BytesPropertyClientBase64URLArrayResponse, error) {
	var err error
	const operationName = "BytesPropertyClient.Base64URLArray"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.base64URLArrayCreateRequest(ctx, body, options)
	if err != nil {
		return BytesPropertyClientBase64URLArrayResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BytesPropertyClientBase64URLArrayResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return BytesPropertyClientBase64URLArrayResponse{}, err
	}
	resp, err := client.base64URLArrayHandleResponse(httpResp)
	return resp, err
}

// base64URLArrayCreateRequest creates the Base64URLArray request.
func (client *BytesPropertyClient) base64URLArrayCreateRequest(ctx context.Context, body Base64URLArrayBytesProperty, options *BytesPropertyClientBase64URLArrayOptions) (*policy.Request, error) {
	urlPath := "/encode/bytes/property/base64url-array"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// base64URLArrayHandleResponse handles the Base64URLArray response.
func (client *BytesPropertyClient) base64URLArrayHandleResponse(resp *http.Response) (BytesPropertyClientBase64URLArrayResponse, error) {
	result := BytesPropertyClientBase64URLArrayResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Base64URLArrayBytesProperty); err != nil {
		return BytesPropertyClientBase64URLArrayResponse{}, err
	}
	return result, nil
}

// - options - BytesPropertyClientDefaultOptions contains the optional parameters for the BytesPropertyClient.Default method.
func (client *BytesPropertyClient) Default(ctx context.Context, body DefaultBytesProperty, options *BytesPropertyClientDefaultOptions) (BytesPropertyClientDefaultResponse, error) {
	var err error
	const operationName = "BytesPropertyClient.Default"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.defaultCreateRequest(ctx, body, options)
	if err != nil {
		return BytesPropertyClientDefaultResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BytesPropertyClientDefaultResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return BytesPropertyClientDefaultResponse{}, err
	}
	resp, err := client.defaultHandleResponse(httpResp)
	return resp, err
}

// defaultCreateRequest creates the Default request.
func (client *BytesPropertyClient) defaultCreateRequest(ctx context.Context, body DefaultBytesProperty, options *BytesPropertyClientDefaultOptions) (*policy.Request, error) {
	urlPath := "/encode/bytes/property/default"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// defaultHandleResponse handles the Default response.
func (client *BytesPropertyClient) defaultHandleResponse(resp *http.Response) (BytesPropertyClientDefaultResponse, error) {
	result := BytesPropertyClientDefaultResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DefaultBytesProperty); err != nil {
		return BytesPropertyClientDefaultResponse{}, err
	}
	return result, nil
}
