//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package bytesgroup

import (
	"context"
	"encoding/base64"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
)

// HeaderClient contains the methods for the Encode.Bytes group.
// Don't use this type directly, use a constructor function instead.
type HeaderClient struct {
	internal *azcore.Client
}

func (client *HeaderClient) Base64(ctx context.Context, value []byte, options *HeaderClientBase64Options) (HeaderClientBase64Response, error) {
	var err error
	req, err := client.base64CreateRequest(ctx, value, options)
	if err != nil {
		return HeaderClientBase64Response{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HeaderClientBase64Response{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return HeaderClientBase64Response{}, err
	}
	return HeaderClientBase64Response{}, nil
}

// base64CreateRequest creates the Base64 request.
func (client *HeaderClient) base64CreateRequest(ctx context.Context, value []byte, options *HeaderClientBase64Options) (*policy.Request, error) {
	urlPath := "/encode/bytes/header/base64"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["value"] = []string{base64.StdEncoding.EncodeToString(value)}
	return req, nil
}

func (client *HeaderClient) Base64url(ctx context.Context, value []byte, options *HeaderClientBase64urlOptions) (HeaderClientBase64urlResponse, error) {
	var err error
	req, err := client.base64URLCreateRequest(ctx, value, options)
	if err != nil {
		return HeaderClientBase64urlResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HeaderClientBase64urlResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return HeaderClientBase64urlResponse{}, err
	}
	return HeaderClientBase64urlResponse{}, nil
}

// base64URLCreateRequest creates the Base64url request.
func (client *HeaderClient) base64URLCreateRequest(ctx context.Context, value []byte, options *HeaderClientBase64urlOptions) (*policy.Request, error) {
	urlPath := "/encode/bytes/header/base64url"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["value"] = []string{base64.RawURLEncoding.EncodeToString(value)}
	return req, nil
}

func (client *HeaderClient) Base64urlArray(ctx context.Context, value [][]byte, options *HeaderClientBase64urlArrayOptions) (HeaderClientBase64urlArrayResponse, error) {
	var err error
	req, err := client.base64URLArrayCreateRequest(ctx, value, options)
	if err != nil {
		return HeaderClientBase64urlArrayResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HeaderClientBase64urlArrayResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return HeaderClientBase64urlArrayResponse{}, err
	}
	return HeaderClientBase64urlArrayResponse{}, nil
}

// base64URLArrayCreateRequest creates the Base64urlArray request.
func (client *HeaderClient) base64URLArrayCreateRequest(ctx context.Context, value [][]byte, options *HeaderClientBase64urlArrayOptions) (*policy.Request, error) {
	urlPath := "/encode/bytes/header/base64url-array"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["value"] = []string{strings.Join(func() []string {
		encodedValue := make([]string, len(value))
		for i := 0; i < len(value); i++ {
			encodedValue[i] = base64.RawURLEncoding.EncodeToString(value[i])
		}
		return encodedValue
	}(), ",")}
	return req, nil
}

func (client *HeaderClient) Default(ctx context.Context, value []byte, options *HeaderClientDefaultOptions) (HeaderClientDefaultResponse, error) {
	var err error
	req, err := client.defaultCreateRequest(ctx, value, options)
	if err != nil {
		return HeaderClientDefaultResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HeaderClientDefaultResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return HeaderClientDefaultResponse{}, err
	}
	return HeaderClientDefaultResponse{}, nil
}

// defaultCreateRequest creates the Default request.
func (client *HeaderClient) defaultCreateRequest(ctx context.Context, value []byte, options *HeaderClientDefaultOptions) (*policy.Request, error) {
	urlPath := "/encode/bytes/header/default"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["value"] = []string{base64.StdEncoding.EncodeToString(value)}
	return req, nil
}
