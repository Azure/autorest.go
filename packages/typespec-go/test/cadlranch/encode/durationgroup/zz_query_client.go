//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package durationgroup

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strconv"
	"strings"
)

// QueryClient contains the methods for the Encode.Duration namespace.
// Don't use this type directly, use [DurationClient.NewQueryClient] instead.
type QueryClient struct {
	internal *azcore.Client
}

// - options - QueryClientDefaultOptions contains the optional parameters for the QueryClient.Default method.
func (client *QueryClient) Default(ctx context.Context, input string, options *QueryClientDefaultOptions) (QueryClientDefaultResponse, error) {
	var err error
	req, err := client.defaultCreateRequest(ctx, input, options)
	if err != nil {
		return QueryClientDefaultResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return QueryClientDefaultResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return QueryClientDefaultResponse{}, err
	}
	return QueryClientDefaultResponse{}, nil
}

// defaultCreateRequest creates the Default request.
func (client *QueryClient) defaultCreateRequest(ctx context.Context, input string, options *QueryClientDefaultOptions) (*policy.Request, error) {
	urlPath := "/encode/duration/query/default"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("input", input)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - QueryClientFloatSecondsOptions contains the optional parameters for the QueryClient.FloatSeconds method.
func (client *QueryClient) FloatSeconds(ctx context.Context, input float32, options *QueryClientFloatSecondsOptions) (QueryClientFloatSecondsResponse, error) {
	var err error
	req, err := client.floatSecondsCreateRequest(ctx, input, options)
	if err != nil {
		return QueryClientFloatSecondsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return QueryClientFloatSecondsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return QueryClientFloatSecondsResponse{}, err
	}
	return QueryClientFloatSecondsResponse{}, nil
}

// floatSecondsCreateRequest creates the FloatSeconds request.
func (client *QueryClient) floatSecondsCreateRequest(ctx context.Context, input float32, options *QueryClientFloatSecondsOptions) (*policy.Request, error) {
	urlPath := "/encode/duration/query/float-seconds"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("input", strconv.FormatFloat(float64(input), 'f', -1, 32))
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - QueryClientISO8601Options contains the optional parameters for the QueryClient.ISO8601 method.
func (client *QueryClient) ISO8601(ctx context.Context, input string, options *QueryClientISO8601Options) (QueryClientISO8601Response, error) {
	var err error
	req, err := client.iso8601CreateRequest(ctx, input, options)
	if err != nil {
		return QueryClientISO8601Response{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return QueryClientISO8601Response{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return QueryClientISO8601Response{}, err
	}
	return QueryClientISO8601Response{}, nil
}

// iso8601CreateRequest creates the ISO8601 request.
func (client *QueryClient) iso8601CreateRequest(ctx context.Context, input string, options *QueryClientISO8601Options) (*policy.Request, error) {
	urlPath := "/encode/duration/query/iso8601"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("input", input)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - QueryClientInt32SecondsOptions contains the optional parameters for the QueryClient.Int32Seconds method.
func (client *QueryClient) Int32Seconds(ctx context.Context, input int32, options *QueryClientInt32SecondsOptions) (QueryClientInt32SecondsResponse, error) {
	var err error
	req, err := client.int32SecondsCreateRequest(ctx, input, options)
	if err != nil {
		return QueryClientInt32SecondsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return QueryClientInt32SecondsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return QueryClientInt32SecondsResponse{}, err
	}
	return QueryClientInt32SecondsResponse{}, nil
}

// int32SecondsCreateRequest creates the Int32Seconds request.
func (client *QueryClient) int32SecondsCreateRequest(ctx context.Context, input int32, options *QueryClientInt32SecondsOptions) (*policy.Request, error) {
	urlPath := "/encode/duration/query/int32-seconds"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("input", strconv.FormatInt(int64(input), 10))
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - QueryClientInt32SecondsArrayOptions contains the optional parameters for the QueryClient.Int32SecondsArray method.
func (client *QueryClient) Int32SecondsArray(ctx context.Context, input []int32, options *QueryClientInt32SecondsArrayOptions) (QueryClientInt32SecondsArrayResponse, error) {
	var err error
	req, err := client.int32SecondsArrayCreateRequest(ctx, input, options)
	if err != nil {
		return QueryClientInt32SecondsArrayResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return QueryClientInt32SecondsArrayResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return QueryClientInt32SecondsArrayResponse{}, err
	}
	return QueryClientInt32SecondsArrayResponse{}, nil
}

// int32SecondsArrayCreateRequest creates the Int32SecondsArray request.
func (client *QueryClient) int32SecondsArrayCreateRequest(ctx context.Context, input []int32, options *QueryClientInt32SecondsArrayOptions) (*policy.Request, error) {
	urlPath := "/encode/duration/query/int32-seconds-array"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("input", strings.Join(strings.Fields(strings.Trim(fmt.Sprint(input), "[]")), ","))
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}
