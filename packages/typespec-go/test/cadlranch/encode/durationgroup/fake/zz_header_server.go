// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"durationgroup"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strconv"
)

// HeaderServer is a fake server for instances of the durationgroup.HeaderClient type.
type HeaderServer struct {
	// Default is the fake for method HeaderClient.Default
	// HTTP status codes to indicate success: http.StatusNoContent
	Default func(ctx context.Context, duration string, options *durationgroup.HeaderClientDefaultOptions) (resp azfake.Responder[durationgroup.HeaderClientDefaultResponse], errResp azfake.ErrorResponder)

	// FloatSeconds is the fake for method HeaderClient.FloatSeconds
	// HTTP status codes to indicate success: http.StatusNoContent
	FloatSeconds func(ctx context.Context, duration float32, options *durationgroup.HeaderClientFloatSecondsOptions) (resp azfake.Responder[durationgroup.HeaderClientFloatSecondsResponse], errResp azfake.ErrorResponder)

	// ISO8601 is the fake for method HeaderClient.ISO8601
	// HTTP status codes to indicate success: http.StatusNoContent
	ISO8601 func(ctx context.Context, duration string, options *durationgroup.HeaderClientISO8601Options) (resp azfake.Responder[durationgroup.HeaderClientISO8601Response], errResp azfake.ErrorResponder)

	// ISO8601Array is the fake for method HeaderClient.ISO8601Array
	// HTTP status codes to indicate success: http.StatusNoContent
	ISO8601Array func(ctx context.Context, duration []string, options *durationgroup.HeaderClientISO8601ArrayOptions) (resp azfake.Responder[durationgroup.HeaderClientISO8601ArrayResponse], errResp azfake.ErrorResponder)

	// Int32Seconds is the fake for method HeaderClient.Int32Seconds
	// HTTP status codes to indicate success: http.StatusNoContent
	Int32Seconds func(ctx context.Context, duration int32, options *durationgroup.HeaderClientInt32SecondsOptions) (resp azfake.Responder[durationgroup.HeaderClientInt32SecondsResponse], errResp azfake.ErrorResponder)
}

// NewHeaderServerTransport creates a new instance of HeaderServerTransport with the provided implementation.
// The returned HeaderServerTransport instance is connected to an instance of durationgroup.HeaderClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewHeaderServerTransport(srv *HeaderServer) *HeaderServerTransport {
	return &HeaderServerTransport{srv: srv}
}

// HeaderServerTransport connects instances of durationgroup.HeaderClient to instances of HeaderServer.
// Don't use this type directly, use NewHeaderServerTransport instead.
type HeaderServerTransport struct {
	srv *HeaderServer
}

// Do implements the policy.Transporter interface for HeaderServerTransport.
func (h *HeaderServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "HeaderClient.Default":
		resp, err = h.dispatchDefault(req)
	case "HeaderClient.FloatSeconds":
		resp, err = h.dispatchFloatSeconds(req)
	case "HeaderClient.ISO8601":
		resp, err = h.dispatchISO8601(req)
	case "HeaderClient.ISO8601Array":
		resp, err = h.dispatchISO8601Array(req)
	case "HeaderClient.Int32Seconds":
		resp, err = h.dispatchInt32Seconds(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (h *HeaderServerTransport) dispatchDefault(req *http.Request) (*http.Response, error) {
	if h.srv.Default == nil {
		return nil, &nonRetriableError{errors.New("fake for method Default not implemented")}
	}
	respr, errRespr := h.srv.Default(req.Context(), getHeaderValue(req.Header, "duration"), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HeaderServerTransport) dispatchFloatSeconds(req *http.Request) (*http.Response, error) {
	if h.srv.FloatSeconds == nil {
		return nil, &nonRetriableError{errors.New("fake for method FloatSeconds not implemented")}
	}
	durationParam, err := parseWithCast(getHeaderValue(req.Header, "duration"), func(v string) (float32, error) {
		p, parseErr := strconv.ParseFloat(v, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return float32(p), nil
	})
	if err != nil {
		return nil, err
	}
	respr, errRespr := h.srv.FloatSeconds(req.Context(), durationParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HeaderServerTransport) dispatchISO8601(req *http.Request) (*http.Response, error) {
	if h.srv.ISO8601 == nil {
		return nil, &nonRetriableError{errors.New("fake for method ISO8601 not implemented")}
	}
	respr, errRespr := h.srv.ISO8601(req.Context(), getHeaderValue(req.Header, "duration"), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HeaderServerTransport) dispatchISO8601Array(req *http.Request) (*http.Response, error) {
	if h.srv.ISO8601Array == nil {
		return nil, &nonRetriableError{errors.New("fake for method ISO8601Array not implemented")}
	}
	respr, errRespr := h.srv.ISO8601Array(req.Context(), splitHelper(getHeaderValue(req.Header, "duration"), ","), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HeaderServerTransport) dispatchInt32Seconds(req *http.Request) (*http.Response, error) {
	if h.srv.Int32Seconds == nil {
		return nil, &nonRetriableError{errors.New("fake for method Int32Seconds not implemented")}
	}
	durationParam, err := parseWithCast(getHeaderValue(req.Header, "duration"), func(v string) (int32, error) {
		p, parseErr := strconv.ParseInt(v, 10, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	respr, errRespr := h.srv.Int32Seconds(req.Context(), durationParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
