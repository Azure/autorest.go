// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"durationgroup"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// DurationPropertyServer is a fake server for instances of the durationgroup.DurationPropertyClient type.
type DurationPropertyServer struct {
	// Default is the fake for method DurationPropertyClient.Default
	// HTTP status codes to indicate success: http.StatusOK
	Default func(ctx context.Context, body durationgroup.DefaultDurationProperty, options *durationgroup.DurationPropertyClientDefaultOptions) (resp azfake.Responder[durationgroup.DurationPropertyClientDefaultResponse], errResp azfake.ErrorResponder)

	// Float64Seconds is the fake for method DurationPropertyClient.Float64Seconds
	// HTTP status codes to indicate success: http.StatusOK
	Float64Seconds func(ctx context.Context, body durationgroup.Float64SecondsDurationProperty, options *durationgroup.DurationPropertyClientFloat64SecondsOptions) (resp azfake.Responder[durationgroup.DurationPropertyClientFloat64SecondsResponse], errResp azfake.ErrorResponder)

	// FloatSeconds is the fake for method DurationPropertyClient.FloatSeconds
	// HTTP status codes to indicate success: http.StatusOK
	FloatSeconds func(ctx context.Context, body durationgroup.FloatSecondsDurationProperty, options *durationgroup.DurationPropertyClientFloatSecondsOptions) (resp azfake.Responder[durationgroup.DurationPropertyClientFloatSecondsResponse], errResp azfake.ErrorResponder)

	// FloatSecondsArray is the fake for method DurationPropertyClient.FloatSecondsArray
	// HTTP status codes to indicate success: http.StatusOK
	FloatSecondsArray func(ctx context.Context, body durationgroup.FloatSecondsDurationArrayProperty, options *durationgroup.DurationPropertyClientFloatSecondsArrayOptions) (resp azfake.Responder[durationgroup.DurationPropertyClientFloatSecondsArrayResponse], errResp azfake.ErrorResponder)

	// ISO8601 is the fake for method DurationPropertyClient.ISO8601
	// HTTP status codes to indicate success: http.StatusOK
	ISO8601 func(ctx context.Context, body durationgroup.ISO8601DurationProperty, options *durationgroup.DurationPropertyClientISO8601Options) (resp azfake.Responder[durationgroup.DurationPropertyClientISO8601Response], errResp azfake.ErrorResponder)

	// Int32Seconds is the fake for method DurationPropertyClient.Int32Seconds
	// HTTP status codes to indicate success: http.StatusOK
	Int32Seconds func(ctx context.Context, body durationgroup.Int32SecondsDurationProperty, options *durationgroup.DurationPropertyClientInt32SecondsOptions) (resp azfake.Responder[durationgroup.DurationPropertyClientInt32SecondsResponse], errResp azfake.ErrorResponder)
}

// NewDurationPropertyServerTransport creates a new instance of DurationPropertyServerTransport with the provided implementation.
// The returned DurationPropertyServerTransport instance is connected to an instance of durationgroup.DurationPropertyClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewDurationPropertyServerTransport(srv *DurationPropertyServer) *DurationPropertyServerTransport {
	return &DurationPropertyServerTransport{srv: srv}
}

// DurationPropertyServerTransport connects instances of durationgroup.DurationPropertyClient to instances of DurationPropertyServer.
// Don't use this type directly, use NewDurationPropertyServerTransport instead.
type DurationPropertyServerTransport struct {
	srv *DurationPropertyServer
}

// Do implements the policy.Transporter interface for DurationPropertyServerTransport.
func (d *DurationPropertyServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return d.dispatchToMethodFake(req, method)
}

func (d *DurationPropertyServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var res result
		switch method {
		case "DurationPropertyClient.Default":
			res.resp, res.err = d.dispatchDefault(req)
		case "DurationPropertyClient.Float64Seconds":
			res.resp, res.err = d.dispatchFloat64Seconds(req)
		case "DurationPropertyClient.FloatSeconds":
			res.resp, res.err = d.dispatchFloatSeconds(req)
		case "DurationPropertyClient.FloatSecondsArray":
			res.resp, res.err = d.dispatchFloatSecondsArray(req)
		case "DurationPropertyClient.ISO8601":
			res.resp, res.err = d.dispatchISO8601(req)
		case "DurationPropertyClient.Int32Seconds":
			res.resp, res.err = d.dispatchInt32Seconds(req)
		default:
			res.err = fmt.Errorf("unhandled API %s", method)
		}

		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (d *DurationPropertyServerTransport) dispatchDefault(req *http.Request) (*http.Response, error) {
	if d.srv.Default == nil {
		return nil, &nonRetriableError{errors.New("fake for method Default not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[durationgroup.DefaultDurationProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.Default(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DefaultDurationProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DurationPropertyServerTransport) dispatchFloat64Seconds(req *http.Request) (*http.Response, error) {
	if d.srv.Float64Seconds == nil {
		return nil, &nonRetriableError{errors.New("fake for method Float64Seconds not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[durationgroup.Float64SecondsDurationProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.Float64Seconds(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Float64SecondsDurationProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DurationPropertyServerTransport) dispatchFloatSeconds(req *http.Request) (*http.Response, error) {
	if d.srv.FloatSeconds == nil {
		return nil, &nonRetriableError{errors.New("fake for method FloatSeconds not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[durationgroup.FloatSecondsDurationProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.FloatSeconds(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).FloatSecondsDurationProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DurationPropertyServerTransport) dispatchFloatSecondsArray(req *http.Request) (*http.Response, error) {
	if d.srv.FloatSecondsArray == nil {
		return nil, &nonRetriableError{errors.New("fake for method FloatSecondsArray not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[durationgroup.FloatSecondsDurationArrayProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.FloatSecondsArray(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).FloatSecondsDurationArrayProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DurationPropertyServerTransport) dispatchISO8601(req *http.Request) (*http.Response, error) {
	if d.srv.ISO8601 == nil {
		return nil, &nonRetriableError{errors.New("fake for method ISO8601 not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[durationgroup.ISO8601DurationProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.ISO8601(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ISO8601DurationProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DurationPropertyServerTransport) dispatchInt32Seconds(req *http.Request) (*http.Response, error) {
	if d.srv.Int32Seconds == nil {
		return nil, &nonRetriableError{errors.New("fake for method Int32Seconds not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[durationgroup.Int32SecondsDurationProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.Int32Seconds(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Int32SecondsDurationProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
