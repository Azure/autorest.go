// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"durationgroup"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// PropertyServer is a fake server for instances of the durationgroup.PropertyClient type.
type PropertyServer struct {
	// Default is the fake for method PropertyClient.Default
	// HTTP status codes to indicate success: http.StatusOK
	Default func(ctx context.Context, body durationgroup.DefaultDurationProperty, options *durationgroup.PropertyClientDefaultOptions) (resp azfake.Responder[durationgroup.PropertyClientDefaultResponse], errResp azfake.ErrorResponder)

	// FloatSeconds is the fake for method PropertyClient.FloatSeconds
	// HTTP status codes to indicate success: http.StatusOK
	FloatSeconds func(ctx context.Context, body durationgroup.FloatSecondsDurationProperty, options *durationgroup.PropertyClientFloatSecondsOptions) (resp azfake.Responder[durationgroup.PropertyClientFloatSecondsResponse], errResp azfake.ErrorResponder)

	// FloatSecondsArray is the fake for method PropertyClient.FloatSecondsArray
	// HTTP status codes to indicate success: http.StatusOK
	FloatSecondsArray func(ctx context.Context, body durationgroup.FloatSecondsDurationArrayProperty, options *durationgroup.PropertyClientFloatSecondsArrayOptions) (resp azfake.Responder[durationgroup.PropertyClientFloatSecondsArrayResponse], errResp azfake.ErrorResponder)

	// ISO8601 is the fake for method PropertyClient.ISO8601
	// HTTP status codes to indicate success: http.StatusOK
	ISO8601 func(ctx context.Context, body durationgroup.ISO8601DurationProperty, options *durationgroup.PropertyClientISO8601Options) (resp azfake.Responder[durationgroup.PropertyClientISO8601Response], errResp azfake.ErrorResponder)

	// Int32Seconds is the fake for method PropertyClient.Int32Seconds
	// HTTP status codes to indicate success: http.StatusOK
	Int32Seconds func(ctx context.Context, body durationgroup.Int32SecondsDurationProperty, options *durationgroup.PropertyClientInt32SecondsOptions) (resp azfake.Responder[durationgroup.PropertyClientInt32SecondsResponse], errResp azfake.ErrorResponder)
}

// NewPropertyServerTransport creates a new instance of PropertyServerTransport with the provided implementation.
// The returned PropertyServerTransport instance is connected to an instance of durationgroup.PropertyClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewPropertyServerTransport(srv *PropertyServer) *PropertyServerTransport {
	return &PropertyServerTransport{srv: srv}
}

// PropertyServerTransport connects instances of durationgroup.PropertyClient to instances of PropertyServer.
// Don't use this type directly, use NewPropertyServerTransport instead.
type PropertyServerTransport struct {
	srv *PropertyServer
}

// Do implements the policy.Transporter interface for PropertyServerTransport.
func (p *PropertyServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "PropertyClient.Default":
		resp, err = p.dispatchDefault(req)
	case "PropertyClient.FloatSeconds":
		resp, err = p.dispatchFloatSeconds(req)
	case "PropertyClient.FloatSecondsArray":
		resp, err = p.dispatchFloatSecondsArray(req)
	case "PropertyClient.ISO8601":
		resp, err = p.dispatchISO8601(req)
	case "PropertyClient.Int32Seconds":
		resp, err = p.dispatchInt32Seconds(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (p *PropertyServerTransport) dispatchDefault(req *http.Request) (*http.Response, error) {
	if p.srv.Default == nil {
		return nil, &nonRetriableError{errors.New("fake for method Default not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[durationgroup.DefaultDurationProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.Default(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DefaultDurationProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PropertyServerTransport) dispatchFloatSeconds(req *http.Request) (*http.Response, error) {
	if p.srv.FloatSeconds == nil {
		return nil, &nonRetriableError{errors.New("fake for method FloatSeconds not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[durationgroup.FloatSecondsDurationProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.FloatSeconds(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).FloatSecondsDurationProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PropertyServerTransport) dispatchFloatSecondsArray(req *http.Request) (*http.Response, error) {
	if p.srv.FloatSecondsArray == nil {
		return nil, &nonRetriableError{errors.New("fake for method FloatSecondsArray not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[durationgroup.FloatSecondsDurationArrayProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.FloatSecondsArray(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).FloatSecondsDurationArrayProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PropertyServerTransport) dispatchISO8601(req *http.Request) (*http.Response, error) {
	if p.srv.ISO8601 == nil {
		return nil, &nonRetriableError{errors.New("fake for method ISO8601 not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[durationgroup.ISO8601DurationProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.ISO8601(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ISO8601DurationProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PropertyServerTransport) dispatchInt32Seconds(req *http.Request) (*http.Response, error) {
	if p.srv.Int32Seconds == nil {
		return nil, &nonRetriableError{errors.New("fake for method Int32Seconds not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[durationgroup.Int32SecondsDurationProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.Int32Seconds(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Int32SecondsDurationProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
