// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"durationgroup"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
)

// QueryServer is a fake server for instances of the durationgroup.QueryClient type.
type QueryServer struct {
	// Default is the fake for method QueryClient.Default
	// HTTP status codes to indicate success: http.StatusNoContent
	Default func(ctx context.Context, input string, options *durationgroup.QueryClientDefaultOptions) (resp azfake.Responder[durationgroup.QueryClientDefaultResponse], errResp azfake.ErrorResponder)

	// FloatSeconds is the fake for method QueryClient.FloatSeconds
	// HTTP status codes to indicate success: http.StatusNoContent
	FloatSeconds func(ctx context.Context, input float32, options *durationgroup.QueryClientFloatSecondsOptions) (resp azfake.Responder[durationgroup.QueryClientFloatSecondsResponse], errResp azfake.ErrorResponder)

	// ISO8601 is the fake for method QueryClient.ISO8601
	// HTTP status codes to indicate success: http.StatusNoContent
	ISO8601 func(ctx context.Context, input string, options *durationgroup.QueryClientISO8601Options) (resp azfake.Responder[durationgroup.QueryClientISO8601Response], errResp azfake.ErrorResponder)

	// Int32Seconds is the fake for method QueryClient.Int32Seconds
	// HTTP status codes to indicate success: http.StatusNoContent
	Int32Seconds func(ctx context.Context, input int32, options *durationgroup.QueryClientInt32SecondsOptions) (resp azfake.Responder[durationgroup.QueryClientInt32SecondsResponse], errResp azfake.ErrorResponder)

	// Int32SecondsArray is the fake for method QueryClient.Int32SecondsArray
	// HTTP status codes to indicate success: http.StatusNoContent
	Int32SecondsArray func(ctx context.Context, input []int32, options *durationgroup.QueryClientInt32SecondsArrayOptions) (resp azfake.Responder[durationgroup.QueryClientInt32SecondsArrayResponse], errResp azfake.ErrorResponder)
}

// NewQueryServerTransport creates a new instance of QueryServerTransport with the provided implementation.
// The returned QueryServerTransport instance is connected to an instance of durationgroup.QueryClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewQueryServerTransport(srv *QueryServer) *QueryServerTransport {
	return &QueryServerTransport{srv: srv}
}

// QueryServerTransport connects instances of durationgroup.QueryClient to instances of QueryServer.
// Don't use this type directly, use NewQueryServerTransport instead.
type QueryServerTransport struct {
	srv *QueryServer
}

// Do implements the policy.Transporter interface for QueryServerTransport.
func (q *QueryServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return q.dispatchToMethodFake(req, method)
}

func (q *QueryServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "QueryClient.Default":
		resp, err = q.dispatchDefault(req)
	case "QueryClient.FloatSeconds":
		resp, err = q.dispatchFloatSeconds(req)
	case "QueryClient.ISO8601":
		resp, err = q.dispatchISO8601(req)
	case "QueryClient.Int32Seconds":
		resp, err = q.dispatchInt32Seconds(req)
	case "QueryClient.Int32SecondsArray":
		resp, err = q.dispatchInt32SecondsArray(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (q *QueryServerTransport) dispatchDefault(req *http.Request) (*http.Response, error) {
	if q.srv.Default == nil {
		return nil, &nonRetriableError{errors.New("fake for method Default not implemented")}
	}
	qp := req.URL.Query()
	inputParam, err := url.QueryUnescape(qp.Get("input"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := q.srv.Default(req.Context(), inputParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (q *QueryServerTransport) dispatchFloatSeconds(req *http.Request) (*http.Response, error) {
	if q.srv.FloatSeconds == nil {
		return nil, &nonRetriableError{errors.New("fake for method FloatSeconds not implemented")}
	}
	qp := req.URL.Query()
	inputUnescaped, err := url.QueryUnescape(qp.Get("input"))
	if err != nil {
		return nil, err
	}
	inputParam, err := parseWithCast(inputUnescaped, func(v string) (float32, error) {
		p, parseErr := strconv.ParseFloat(v, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return float32(p), nil
	})
	if err != nil {
		return nil, err
	}
	respr, errRespr := q.srv.FloatSeconds(req.Context(), inputParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (q *QueryServerTransport) dispatchISO8601(req *http.Request) (*http.Response, error) {
	if q.srv.ISO8601 == nil {
		return nil, &nonRetriableError{errors.New("fake for method ISO8601 not implemented")}
	}
	qp := req.URL.Query()
	inputParam, err := url.QueryUnescape(qp.Get("input"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := q.srv.ISO8601(req.Context(), inputParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (q *QueryServerTransport) dispatchInt32Seconds(req *http.Request) (*http.Response, error) {
	if q.srv.Int32Seconds == nil {
		return nil, &nonRetriableError{errors.New("fake for method Int32Seconds not implemented")}
	}
	qp := req.URL.Query()
	inputUnescaped, err := url.QueryUnescape(qp.Get("input"))
	if err != nil {
		return nil, err
	}
	inputParam, err := parseWithCast(inputUnescaped, func(v string) (int32, error) {
		p, parseErr := strconv.ParseInt(v, 10, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	respr, errRespr := q.srv.Int32Seconds(req.Context(), inputParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (q *QueryServerTransport) dispatchInt32SecondsArray(req *http.Request) (*http.Response, error) {
	if q.srv.Int32SecondsArray == nil {
		return nil, &nonRetriableError{errors.New("fake for method Int32SecondsArray not implemented")}
	}
	qp := req.URL.Query()
	inputUnescaped, err := url.QueryUnescape(qp.Get("input"))
	if err != nil {
		return nil, err
	}
	inputElements := splitHelper(inputUnescaped, ",")
	inputParam := make([]int32, len(inputElements))
	for i := 0; i < len(inputElements); i++ {
		parsedInt32, parseErr := strconv.ParseInt(inputElements[i], 10, 32)
		if parseErr != nil {
			return nil, parseErr
		}
		inputParam[i] = int32(parsedInt32)
	}
	respr, errRespr := q.srv.Int32SecondsArray(req.Context(), inputParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
