// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package durationgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strconv"
	"strings"
)

// DurationHeaderClient contains the methods for the Encode.Duration namespace.
// Don't use this type directly, use [DurationClient.NewDurationHeaderClient] instead.
type DurationHeaderClient struct {
	internal *azcore.Client
}

// - options - DurationHeaderClientDefaultOptions contains the optional parameters for the DurationHeaderClient.Default method.
func (client *DurationHeaderClient) Default(ctx context.Context, duration string, options *DurationHeaderClientDefaultOptions) (DurationHeaderClientDefaultResponse, error) {
	var err error
	const operationName = "DurationHeaderClient.Default"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.defaultCreateRequest(ctx, duration, options)
	if err != nil {
		return DurationHeaderClientDefaultResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DurationHeaderClientDefaultResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return DurationHeaderClientDefaultResponse{}, err
	}
	return DurationHeaderClientDefaultResponse{}, nil
}

// defaultCreateRequest creates the Default request.
func (client *DurationHeaderClient) defaultCreateRequest(ctx context.Context, duration string, options *DurationHeaderClientDefaultOptions) (*policy.Request, error) {
	urlPath := "/encode/duration/header/default"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["duration"] = []string{duration}
	return req, nil
}

//   - options - DurationHeaderClientFloatSecondsOptions contains the optional parameters for the DurationHeaderClient.FloatSeconds
//     method.
func (client *DurationHeaderClient) FloatSeconds(ctx context.Context, duration float32, options *DurationHeaderClientFloatSecondsOptions) (DurationHeaderClientFloatSecondsResponse, error) {
	var err error
	const operationName = "DurationHeaderClient.FloatSeconds"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.floatSecondsCreateRequest(ctx, duration, options)
	if err != nil {
		return DurationHeaderClientFloatSecondsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DurationHeaderClientFloatSecondsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return DurationHeaderClientFloatSecondsResponse{}, err
	}
	return DurationHeaderClientFloatSecondsResponse{}, nil
}

// floatSecondsCreateRequest creates the FloatSeconds request.
func (client *DurationHeaderClient) floatSecondsCreateRequest(ctx context.Context, duration float32, options *DurationHeaderClientFloatSecondsOptions) (*policy.Request, error) {
	urlPath := "/encode/duration/header/float-seconds"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["duration"] = []string{strconv.FormatFloat(float64(duration), 'f', -1, 32)}
	return req, nil
}

// - options - DurationHeaderClientISO8601Options contains the optional parameters for the DurationHeaderClient.ISO8601 method.
func (client *DurationHeaderClient) ISO8601(ctx context.Context, duration string, options *DurationHeaderClientISO8601Options) (DurationHeaderClientISO8601Response, error) {
	var err error
	const operationName = "DurationHeaderClient.ISO8601"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.iso8601CreateRequest(ctx, duration, options)
	if err != nil {
		return DurationHeaderClientISO8601Response{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DurationHeaderClientISO8601Response{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return DurationHeaderClientISO8601Response{}, err
	}
	return DurationHeaderClientISO8601Response{}, nil
}

// iso8601CreateRequest creates the ISO8601 request.
func (client *DurationHeaderClient) iso8601CreateRequest(ctx context.Context, duration string, options *DurationHeaderClientISO8601Options) (*policy.Request, error) {
	urlPath := "/encode/duration/header/iso8601"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["duration"] = []string{duration}
	return req, nil
}

//   - options - DurationHeaderClientISO8601ArrayOptions contains the optional parameters for the DurationHeaderClient.ISO8601Array
//     method.
func (client *DurationHeaderClient) ISO8601Array(ctx context.Context, duration []string, options *DurationHeaderClientISO8601ArrayOptions) (DurationHeaderClientISO8601ArrayResponse, error) {
	var err error
	const operationName = "DurationHeaderClient.ISO8601Array"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.iso8601ArrayCreateRequest(ctx, duration, options)
	if err != nil {
		return DurationHeaderClientISO8601ArrayResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DurationHeaderClientISO8601ArrayResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return DurationHeaderClientISO8601ArrayResponse{}, err
	}
	return DurationHeaderClientISO8601ArrayResponse{}, nil
}

// iso8601ArrayCreateRequest creates the ISO8601Array request.
func (client *DurationHeaderClient) iso8601ArrayCreateRequest(ctx context.Context, duration []string, options *DurationHeaderClientISO8601ArrayOptions) (*policy.Request, error) {
	urlPath := "/encode/duration/header/iso8601-array"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["duration"] = []string{strings.Join(duration, ",")}
	return req, nil
}

//   - options - DurationHeaderClientInt32SecondsOptions contains the optional parameters for the DurationHeaderClient.Int32Seconds
//     method.
func (client *DurationHeaderClient) Int32Seconds(ctx context.Context, duration int32, options *DurationHeaderClientInt32SecondsOptions) (DurationHeaderClientInt32SecondsResponse, error) {
	var err error
	const operationName = "DurationHeaderClient.Int32Seconds"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.int32SecondsCreateRequest(ctx, duration, options)
	if err != nil {
		return DurationHeaderClientInt32SecondsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DurationHeaderClientInt32SecondsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return DurationHeaderClientInt32SecondsResponse{}, err
	}
	return DurationHeaderClientInt32SecondsResponse{}, nil
}

// int32SecondsCreateRequest creates the Int32Seconds request.
func (client *DurationHeaderClient) int32SecondsCreateRequest(ctx context.Context, duration int32, options *DurationHeaderClientInt32SecondsOptions) (*policy.Request, error) {
	urlPath := "/encode/duration/header/int32-seconds"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["duration"] = []string{strconv.FormatInt(int64(duration), 10)}
	return req, nil
}
