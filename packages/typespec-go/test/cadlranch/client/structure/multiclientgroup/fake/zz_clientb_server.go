// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"multiclientgroup"
	"net/http"
)

// ClientBServer is a fake server for instances of the multiclientgroup.ClientBClient type.
type ClientBServer struct {
	// RenamedFour is the fake for method ClientBClient.RenamedFour
	// HTTP status codes to indicate success: http.StatusNoContent
	RenamedFour func(ctx context.Context, options *multiclientgroup.ClientBClientRenamedFourOptions) (resp azfake.Responder[multiclientgroup.ClientBClientRenamedFourResponse], errResp azfake.ErrorResponder)

	// RenamedSix is the fake for method ClientBClient.RenamedSix
	// HTTP status codes to indicate success: http.StatusNoContent
	RenamedSix func(ctx context.Context, options *multiclientgroup.ClientBClientRenamedSixOptions) (resp azfake.Responder[multiclientgroup.ClientBClientRenamedSixResponse], errResp azfake.ErrorResponder)

	// RenamedTwo is the fake for method ClientBClient.RenamedTwo
	// HTTP status codes to indicate success: http.StatusNoContent
	RenamedTwo func(ctx context.Context, options *multiclientgroup.ClientBClientRenamedTwoOptions) (resp azfake.Responder[multiclientgroup.ClientBClientRenamedTwoResponse], errResp azfake.ErrorResponder)
}

// NewClientBServerTransport creates a new instance of ClientBServerTransport with the provided implementation.
// The returned ClientBServerTransport instance is connected to an instance of multiclientgroup.ClientBClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewClientBServerTransport(srv *ClientBServer) *ClientBServerTransport {
	return &ClientBServerTransport{srv: srv}
}

// ClientBServerTransport connects instances of multiclientgroup.ClientBClient to instances of ClientBServer.
// Don't use this type directly, use NewClientBServerTransport instead.
type ClientBServerTransport struct {
	srv *ClientBServer
}

// Do implements the policy.Transporter interface for ClientBServerTransport.
func (c *ClientBServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return c.dispatchToMethodFake(req, method)
}

func (c *ClientBServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "ClientBClient.RenamedFour":
		resp, err = c.dispatchRenamedFour(req)
	case "ClientBClient.RenamedSix":
		resp, err = c.dispatchRenamedSix(req)
	case "ClientBClient.RenamedTwo":
		resp, err = c.dispatchRenamedTwo(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (c *ClientBServerTransport) dispatchRenamedFour(req *http.Request) (*http.Response, error) {
	if c.srv.RenamedFour == nil {
		return nil, &nonRetriableError{errors.New("fake for method RenamedFour not implemented")}
	}
	respr, errRespr := c.srv.RenamedFour(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *ClientBServerTransport) dispatchRenamedSix(req *http.Request) (*http.Response, error) {
	if c.srv.RenamedSix == nil {
		return nil, &nonRetriableError{errors.New("fake for method RenamedSix not implemented")}
	}
	respr, errRespr := c.srv.RenamedSix(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *ClientBServerTransport) dispatchRenamedTwo(req *http.Request) (*http.Response, error) {
	if c.srv.RenamedTwo == nil {
		return nil, &nonRetriableError{errors.New("fake for method RenamedTwo not implemented")}
	}
	respr, errRespr := c.srv.RenamedTwo(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
