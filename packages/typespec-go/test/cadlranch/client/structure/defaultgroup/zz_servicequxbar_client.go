// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package defaultgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
)

// ServiceQuxBarClient contains the methods for the Client.Structure.Service namespace.
// Don't use this type directly, use [ServiceQuxClient.NewServiceQuxBarClient] instead.
type ServiceQuxBarClient struct {
	internal *azcore.Client
	endpoint string
	client   ClientType
}

// Nine -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - ServiceQuxBarClientNineOptions contains the optional parameters for the ServiceQuxBarClient.Nine method.
func (client *ServiceQuxBarClient) Nine(ctx context.Context, options *ServiceQuxBarClientNineOptions) (ServiceQuxBarClientNineResponse, error) {
	var err error
	const operationName = "ServiceQuxBarClient.Nine"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.nineCreateRequest(ctx, options)
	if err != nil {
		return ServiceQuxBarClientNineResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ServiceQuxBarClientNineResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ServiceQuxBarClientNineResponse{}, err
	}
	return ServiceQuxBarClientNineResponse{}, nil
}

// nineCreateRequest creates the Nine request.
func (client *ServiceQuxBarClient) nineCreateRequest(ctx context.Context, _ *ServiceQuxBarClientNineOptions) (*policy.Request, error) {
	host := "{endpoint}/client/structure/{client}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	host = strings.ReplaceAll(host, "{client}", string(client.client))
	urlPath := "/nine"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}
