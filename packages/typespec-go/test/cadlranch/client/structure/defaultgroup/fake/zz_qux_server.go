// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"defaultgroup"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// QuxServer is a fake server for instances of the defaultgroup.QuxClient type.
type QuxServer struct {
	// Eight is the fake for method QuxClient.Eight
	// HTTP status codes to indicate success: http.StatusNoContent
	Eight func(ctx context.Context, options *defaultgroup.QuxClientEightOptions) (resp azfake.Responder[defaultgroup.QuxClientEightResponse], errResp azfake.ErrorResponder)
}

// NewQuxServerTransport creates a new instance of QuxServerTransport with the provided implementation.
// The returned QuxServerTransport instance is connected to an instance of defaultgroup.QuxClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewQuxServerTransport(srv *QuxServer) *QuxServerTransport {
	return &QuxServerTransport{srv: srv}
}

// QuxServerTransport connects instances of defaultgroup.QuxClient to instances of QuxServer.
// Don't use this type directly, use NewQuxServerTransport instead.
type QuxServerTransport struct {
	srv *QuxServer
}

// Do implements the policy.Transporter interface for QuxServerTransport.
func (q *QuxServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "QuxClient.Eight":
		resp, err = q.dispatchEight(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (q *QuxServerTransport) dispatchEight(req *http.Request) (*http.Response, error) {
	if q.srv.Eight == nil {
		return nil, &nonRetriableError{errors.New("fake for method Eight not implemented")}
	}
	respr, errRespr := q.srv.Eight(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
