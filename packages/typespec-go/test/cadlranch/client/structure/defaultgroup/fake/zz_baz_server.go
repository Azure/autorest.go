// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// BazServer is a fake server for instances of the defaultgroup.BazClient type.
type BazServer struct {
	// FooServer contains the fakes for client FooClient
	FooServer FooServer
}

// NewBazServerTransport creates a new instance of BazServerTransport with the provided implementation.
// The returned BazServerTransport instance is connected to an instance of defaultgroup.BazClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewBazServerTransport(srv *BazServer) *BazServerTransport {
	return &BazServerTransport{srv: srv}
}

// BazServerTransport connects instances of defaultgroup.BazClient to instances of BazServer.
// Don't use this type directly, use NewBazServerTransport instead.
type BazServerTransport struct {
	srv         *BazServer
	trMu        sync.Mutex
	trFooServer *FooServerTransport
}

// Do implements the policy.Transporter interface for BazServerTransport.
func (b *BazServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return b.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (b *BazServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "FooClient":
		initServer(&b.trMu, &b.trFooServer, func() *FooServerTransport {
			return NewFooServerTransport(&b.srv.FooServer)
		})
		resp, err = b.trFooServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}
