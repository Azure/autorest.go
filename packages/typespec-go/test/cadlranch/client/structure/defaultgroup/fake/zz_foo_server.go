// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"defaultgroup"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// FooServer is a fake server for instances of the defaultgroup.FooClient type.
type FooServer struct {
	// Four is the fake for method FooClient.Four
	// HTTP status codes to indicate success: http.StatusNoContent
	Four func(ctx context.Context, options *defaultgroup.FooClientFourOptions) (resp azfake.Responder[defaultgroup.FooClientFourResponse], errResp azfake.ErrorResponder)

	// Seven is the fake for method FooClient.Seven
	// HTTP status codes to indicate success: http.StatusNoContent
	Seven func(ctx context.Context, options *defaultgroup.FooClientSevenOptions) (resp azfake.Responder[defaultgroup.FooClientSevenResponse], errResp azfake.ErrorResponder)

	// Three is the fake for method FooClient.Three
	// HTTP status codes to indicate success: http.StatusNoContent
	Three func(ctx context.Context, options *defaultgroup.FooClientThreeOptions) (resp azfake.Responder[defaultgroup.FooClientThreeResponse], errResp azfake.ErrorResponder)
}

// NewFooServerTransport creates a new instance of FooServerTransport with the provided implementation.
// The returned FooServerTransport instance is connected to an instance of defaultgroup.FooClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewFooServerTransport(srv *FooServer) *FooServerTransport {
	return &FooServerTransport{srv: srv}
}

// FooServerTransport connects instances of defaultgroup.FooClient to instances of FooServer.
// Don't use this type directly, use NewFooServerTransport instead.
type FooServerTransport struct {
	srv *FooServer
}

// Do implements the policy.Transporter interface for FooServerTransport.
func (f *FooServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "FooClient.Four":
		resp, err = f.dispatchFour(req)
	case "FooClient.Seven":
		resp, err = f.dispatchSeven(req)
	case "FooClient.Three":
		resp, err = f.dispatchThree(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (f *FooServerTransport) dispatchFour(req *http.Request) (*http.Response, error) {
	if f.srv.Four == nil {
		return nil, &nonRetriableError{errors.New("fake for method Four not implemented")}
	}
	respr, errRespr := f.srv.Four(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (f *FooServerTransport) dispatchSeven(req *http.Request) (*http.Response, error) {
	if f.srv.Seven == nil {
		return nil, &nonRetriableError{errors.New("fake for method Seven not implemented")}
	}
	respr, errRespr := f.srv.Seven(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (f *FooServerTransport) dispatchThree(req *http.Request) (*http.Response, error) {
	if f.srv.Three == nil {
		return nil, &nonRetriableError{errors.New("fake for method Three not implemented")}
	}
	respr, errRespr := f.srv.Three(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
