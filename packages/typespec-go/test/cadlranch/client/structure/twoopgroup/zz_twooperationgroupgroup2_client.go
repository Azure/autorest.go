// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package twoopgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
)

// TwoOperationGroupGroup2Client contains the methods for the Client.Structure.Service namespace.
// Don't use this type directly, use [TwoOperationGroupClient.NewTwoOperationGroupGroup2Client] instead.
type TwoOperationGroupGroup2Client struct {
	internal *azcore.Client
	endpoint string
	client   ClientType
}

//   - options - TwoOperationGroupGroup2ClientFiveOptions contains the optional parameters for the TwoOperationGroupGroup2Client.Five
//     method.
func (client *TwoOperationGroupGroup2Client) Five(ctx context.Context, options *TwoOperationGroupGroup2ClientFiveOptions) (TwoOperationGroupGroup2ClientFiveResponse, error) {
	var err error
	const operationName = "TwoOperationGroupGroup2Client.Five"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.fiveCreateRequest(ctx, options)
	if err != nil {
		return TwoOperationGroupGroup2ClientFiveResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return TwoOperationGroupGroup2ClientFiveResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return TwoOperationGroupGroup2ClientFiveResponse{}, err
	}
	return TwoOperationGroupGroup2ClientFiveResponse{}, nil
}

// fiveCreateRequest creates the Five request.
func (client *TwoOperationGroupGroup2Client) fiveCreateRequest(ctx context.Context, options *TwoOperationGroupGroup2ClientFiveOptions) (*policy.Request, error) {
	host := "{endpoint}/client/structure/{client}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	host = strings.ReplaceAll(host, "{client}", string(client.client))
	urlPath := "/five"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

//   - options - TwoOperationGroupGroup2ClientSixOptions contains the optional parameters for the TwoOperationGroupGroup2Client.Six
//     method.
func (client *TwoOperationGroupGroup2Client) Six(ctx context.Context, options *TwoOperationGroupGroup2ClientSixOptions) (TwoOperationGroupGroup2ClientSixResponse, error) {
	var err error
	const operationName = "TwoOperationGroupGroup2Client.Six"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.sixCreateRequest(ctx, options)
	if err != nil {
		return TwoOperationGroupGroup2ClientSixResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return TwoOperationGroupGroup2ClientSixResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return TwoOperationGroupGroup2ClientSixResponse{}, err
	}
	return TwoOperationGroupGroup2ClientSixResponse{}, nil
}

// sixCreateRequest creates the Six request.
func (client *TwoOperationGroupGroup2Client) sixCreateRequest(ctx context.Context, options *TwoOperationGroupGroup2ClientSixOptions) (*policy.Request, error) {
	host := "{endpoint}/client/structure/{client}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	host = strings.ReplaceAll(host, "{client}", string(client.client))
	urlPath := "/six"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

//   - options - TwoOperationGroupGroup2ClientTwoOptions contains the optional parameters for the TwoOperationGroupGroup2Client.Two
//     method.
func (client *TwoOperationGroupGroup2Client) Two(ctx context.Context, options *TwoOperationGroupGroup2ClientTwoOptions) (TwoOperationGroupGroup2ClientTwoResponse, error) {
	var err error
	const operationName = "TwoOperationGroupGroup2Client.Two"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.twoCreateRequest(ctx, options)
	if err != nil {
		return TwoOperationGroupGroup2ClientTwoResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return TwoOperationGroupGroup2ClientTwoResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return TwoOperationGroupGroup2ClientTwoResponse{}, err
	}
	return TwoOperationGroupGroup2ClientTwoResponse{}, nil
}

// twoCreateRequest creates the Two request.
func (client *TwoOperationGroupGroup2Client) twoCreateRequest(ctx context.Context, options *TwoOperationGroupGroup2ClientTwoOptions) (*policy.Request, error) {
	host := "{endpoint}/client/structure/{client}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	host = strings.ReplaceAll(host, "{client}", string(client.client))
	urlPath := "/two"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}
