//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package twoopgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// Group2Client contains the methods for the Client.Structure.Service group.
// Don't use this type directly, use a constructor function instead.
type Group2Client struct {
	internal *azcore.Client
}

// - options - Group2ClientFiveOptions contains the optional parameters for the Group2Client.Five method.
func (client *Group2Client) Five(ctx context.Context, options *Group2ClientFiveOptions) (Group2ClientFiveResponse, error) {
	var err error
	req, err := client.fiveCreateRequest(ctx, options)
	if err != nil {
		return Group2ClientFiveResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return Group2ClientFiveResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return Group2ClientFiveResponse{}, err
	}
	return Group2ClientFiveResponse{}, nil
}

// fiveCreateRequest creates the Five request.
func (client *Group2Client) fiveCreateRequest(ctx context.Context, options *Group2ClientFiveOptions) (*policy.Request, error) {
	urlPath := "/five"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// - options - Group2ClientSixOptions contains the optional parameters for the Group2Client.Six method.
func (client *Group2Client) Six(ctx context.Context, options *Group2ClientSixOptions) (Group2ClientSixResponse, error) {
	var err error
	req, err := client.sixCreateRequest(ctx, options)
	if err != nil {
		return Group2ClientSixResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return Group2ClientSixResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return Group2ClientSixResponse{}, err
	}
	return Group2ClientSixResponse{}, nil
}

// sixCreateRequest creates the Six request.
func (client *Group2Client) sixCreateRequest(ctx context.Context, options *Group2ClientSixOptions) (*policy.Request, error) {
	urlPath := "/six"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// - options - Group2ClientTwoOptions contains the optional parameters for the Group2Client.Two method.
func (client *Group2Client) Two(ctx context.Context, options *Group2ClientTwoOptions) (Group2ClientTwoResponse, error) {
	var err error
	req, err := client.twoCreateRequest(ctx, options)
	if err != nil {
		return Group2ClientTwoResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return Group2ClientTwoResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return Group2ClientTwoResponse{}, err
	}
	return Group2ClientTwoResponse{}, nil
}

// twoCreateRequest creates the Two request.
func (client *Group2Client) twoCreateRequest(ctx context.Context, options *Group2ClientTwoOptions) (*policy.Request, error) {
	urlPath := "/two"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}
