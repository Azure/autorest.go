// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"twoopgroup"
)

// Group2Server is a fake server for instances of the twoopgroup.Group2Client type.
type Group2Server struct {
	// Five is the fake for method Group2Client.Five
	// HTTP status codes to indicate success: http.StatusNoContent
	Five func(ctx context.Context, options *twoopgroup.Group2ClientFiveOptions) (resp azfake.Responder[twoopgroup.Group2ClientFiveResponse], errResp azfake.ErrorResponder)

	// Six is the fake for method Group2Client.Six
	// HTTP status codes to indicate success: http.StatusNoContent
	Six func(ctx context.Context, options *twoopgroup.Group2ClientSixOptions) (resp azfake.Responder[twoopgroup.Group2ClientSixResponse], errResp azfake.ErrorResponder)

	// Two is the fake for method Group2Client.Two
	// HTTP status codes to indicate success: http.StatusNoContent
	Two func(ctx context.Context, options *twoopgroup.Group2ClientTwoOptions) (resp azfake.Responder[twoopgroup.Group2ClientTwoResponse], errResp azfake.ErrorResponder)
}

// NewGroup2ServerTransport creates a new instance of Group2ServerTransport with the provided implementation.
// The returned Group2ServerTransport instance is connected to an instance of twoopgroup.Group2Client via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewGroup2ServerTransport(srv *Group2Server) *Group2ServerTransport {
	return &Group2ServerTransport{srv: srv}
}

// Group2ServerTransport connects instances of twoopgroup.Group2Client to instances of Group2Server.
// Don't use this type directly, use NewGroup2ServerTransport instead.
type Group2ServerTransport struct {
	srv *Group2Server
}

// Do implements the policy.Transporter interface for Group2ServerTransport.
func (g *Group2ServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "Group2Client.Five":
		resp, err = g.dispatchFive(req)
	case "Group2Client.Six":
		resp, err = g.dispatchSix(req)
	case "Group2Client.Two":
		resp, err = g.dispatchTwo(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *Group2ServerTransport) dispatchFive(req *http.Request) (*http.Response, error) {
	if g.srv.Five == nil {
		return nil, &nonRetriableError{errors.New("fake for method Five not implemented")}
	}
	respr, errRespr := g.srv.Five(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (g *Group2ServerTransport) dispatchSix(req *http.Request) (*http.Response, error) {
	if g.srv.Six == nil {
		return nil, &nonRetriableError{errors.New("fake for method Six not implemented")}
	}
	respr, errRespr := g.srv.Six(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (g *Group2ServerTransport) dispatchTwo(req *http.Request) (*http.Response, error) {
	if g.srv.Two == nil {
		return nil, &nonRetriableError{errors.New("fake for method Two not implemented")}
	}
	respr, errRespr := g.srv.Two(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
