// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"twoopgroup"
)

// TwoOperationGroupGroup1Server is a fake server for instances of the twoopgroup.TwoOperationGroupGroup1Client type.
type TwoOperationGroupGroup1Server struct {
	// Four is the fake for method TwoOperationGroupGroup1Client.Four
	// HTTP status codes to indicate success: http.StatusNoContent
	Four func(ctx context.Context, options *twoopgroup.TwoOperationGroupGroup1ClientFourOptions) (resp azfake.Responder[twoopgroup.TwoOperationGroupGroup1ClientFourResponse], errResp azfake.ErrorResponder)

	// One is the fake for method TwoOperationGroupGroup1Client.One
	// HTTP status codes to indicate success: http.StatusNoContent
	One func(ctx context.Context, options *twoopgroup.TwoOperationGroupGroup1ClientOneOptions) (resp azfake.Responder[twoopgroup.TwoOperationGroupGroup1ClientOneResponse], errResp azfake.ErrorResponder)

	// Three is the fake for method TwoOperationGroupGroup1Client.Three
	// HTTP status codes to indicate success: http.StatusNoContent
	Three func(ctx context.Context, options *twoopgroup.TwoOperationGroupGroup1ClientThreeOptions) (resp azfake.Responder[twoopgroup.TwoOperationGroupGroup1ClientThreeResponse], errResp azfake.ErrorResponder)
}

// NewTwoOperationGroupGroup1ServerTransport creates a new instance of TwoOperationGroupGroup1ServerTransport with the provided implementation.
// The returned TwoOperationGroupGroup1ServerTransport instance is connected to an instance of twoopgroup.TwoOperationGroupGroup1Client via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewTwoOperationGroupGroup1ServerTransport(srv *TwoOperationGroupGroup1Server) *TwoOperationGroupGroup1ServerTransport {
	return &TwoOperationGroupGroup1ServerTransport{srv: srv}
}

// TwoOperationGroupGroup1ServerTransport connects instances of twoopgroup.TwoOperationGroupGroup1Client to instances of TwoOperationGroupGroup1Server.
// Don't use this type directly, use NewTwoOperationGroupGroup1ServerTransport instead.
type TwoOperationGroupGroup1ServerTransport struct {
	srv *TwoOperationGroupGroup1Server
}

// Do implements the policy.Transporter interface for TwoOperationGroupGroup1ServerTransport.
func (t *TwoOperationGroupGroup1ServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return t.dispatchToMethodFake(req, method)
}

func (t *TwoOperationGroupGroup1ServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var res result
		switch method {
		case "TwoOperationGroupGroup1Client.Four":
			res.resp, res.err = t.dispatchFour(req)
		case "TwoOperationGroupGroup1Client.One":
			res.resp, res.err = t.dispatchOne(req)
		case "TwoOperationGroupGroup1Client.Three":
			res.resp, res.err = t.dispatchThree(req)
		default:
			res.err = fmt.Errorf("unhandled API %s", method)
		}

		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (t *TwoOperationGroupGroup1ServerTransport) dispatchFour(req *http.Request) (*http.Response, error) {
	if t.srv.Four == nil {
		return nil, &nonRetriableError{errors.New("fake for method Four not implemented")}
	}
	respr, errRespr := t.srv.Four(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (t *TwoOperationGroupGroup1ServerTransport) dispatchOne(req *http.Request) (*http.Response, error) {
	if t.srv.One == nil {
		return nil, &nonRetriableError{errors.New("fake for method One not implemented")}
	}
	respr, errRespr := t.srv.One(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (t *TwoOperationGroupGroup1ServerTransport) dispatchThree(req *http.Request) (*http.Response, error) {
	if t.srv.Three == nil {
		return nil, &nonRetriableError{errors.New("fake for method Three not implemented")}
	}
	respr, errRespr := t.srv.Three(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
