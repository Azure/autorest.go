// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// TwoOperationGroupServer is a fake server for instances of the twoopgroup.TwoOperationGroupClient type.
type TwoOperationGroupServer struct {
	// Group1Server contains the fakes for client Group1Client
	Group1Server Group1Server

	// Group2Server contains the fakes for client Group2Client
	Group2Server Group2Server
}

// NewTwoOperationGroupServerTransport creates a new instance of TwoOperationGroupServerTransport with the provided implementation.
// The returned TwoOperationGroupServerTransport instance is connected to an instance of twoopgroup.TwoOperationGroupClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewTwoOperationGroupServerTransport(srv *TwoOperationGroupServer) *TwoOperationGroupServerTransport {
	return &TwoOperationGroupServerTransport{srv: srv}
}

// TwoOperationGroupServerTransport connects instances of twoopgroup.TwoOperationGroupClient to instances of TwoOperationGroupServer.
// Don't use this type directly, use NewTwoOperationGroupServerTransport instead.
type TwoOperationGroupServerTransport struct {
	srv            *TwoOperationGroupServer
	trMu           sync.Mutex
	trGroup1Server *Group1ServerTransport
	trGroup2Server *Group2ServerTransport
}

// Do implements the policy.Transporter interface for TwoOperationGroupServerTransport.
func (t *TwoOperationGroupServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return t.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (t *TwoOperationGroupServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "Group1Client":
		initServer(&t.trMu, &t.trGroup1Server, func() *Group1ServerTransport {
			return NewGroup1ServerTransport(&t.srv.Group1Server)
		})
		resp, err = t.trGroup1Server.Do(req)
	case "Group2Client":
		initServer(&t.trMu, &t.trGroup2Server, func() *Group2ServerTransport {
			return NewGroup2ServerTransport(&t.srv.Group2Server)
		})
		resp, err = t.trGroup2Server.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}
