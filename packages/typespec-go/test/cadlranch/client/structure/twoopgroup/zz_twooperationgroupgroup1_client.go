// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package twoopgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
)

// TwoOperationGroupGroup1Client contains the methods for the Client.Structure.Service namespace.
// Don't use this type directly, use [TwoOperationGroupClient.NewTwoOperationGroupGroup1Client] instead.
type TwoOperationGroupGroup1Client struct {
	internal *azcore.Client
	endpoint string
	client   ClientType
}

//   - options - TwoOperationGroupGroup1ClientFourOptions contains the optional parameters for the TwoOperationGroupGroup1Client.Four
//     method.
func (client *TwoOperationGroupGroup1Client) Four(ctx context.Context, options *TwoOperationGroupGroup1ClientFourOptions) (TwoOperationGroupGroup1ClientFourResponse, error) {
	var err error
	const operationName = "TwoOperationGroupGroup1Client.Four"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.fourCreateRequest(ctx, options)
	if err != nil {
		return TwoOperationGroupGroup1ClientFourResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return TwoOperationGroupGroup1ClientFourResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return TwoOperationGroupGroup1ClientFourResponse{}, err
	}
	return TwoOperationGroupGroup1ClientFourResponse{}, nil
}

// fourCreateRequest creates the Four request.
func (client *TwoOperationGroupGroup1Client) fourCreateRequest(ctx context.Context, options *TwoOperationGroupGroup1ClientFourOptions) (*policy.Request, error) {
	host := "{endpoint}/client/structure/{client}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	host = strings.ReplaceAll(host, "{client}", string(client.client))
	urlPath := "/four"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

//   - options - TwoOperationGroupGroup1ClientOneOptions contains the optional parameters for the TwoOperationGroupGroup1Client.One
//     method.
func (client *TwoOperationGroupGroup1Client) One(ctx context.Context, options *TwoOperationGroupGroup1ClientOneOptions) (TwoOperationGroupGroup1ClientOneResponse, error) {
	var err error
	const operationName = "TwoOperationGroupGroup1Client.One"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.oneCreateRequest(ctx, options)
	if err != nil {
		return TwoOperationGroupGroup1ClientOneResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return TwoOperationGroupGroup1ClientOneResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return TwoOperationGroupGroup1ClientOneResponse{}, err
	}
	return TwoOperationGroupGroup1ClientOneResponse{}, nil
}

// oneCreateRequest creates the One request.
func (client *TwoOperationGroupGroup1Client) oneCreateRequest(ctx context.Context, options *TwoOperationGroupGroup1ClientOneOptions) (*policy.Request, error) {
	host := "{endpoint}/client/structure/{client}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	host = strings.ReplaceAll(host, "{client}", string(client.client))
	urlPath := "/one"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

//   - options - TwoOperationGroupGroup1ClientThreeOptions contains the optional parameters for the TwoOperationGroupGroup1Client.Three
//     method.
func (client *TwoOperationGroupGroup1Client) Three(ctx context.Context, options *TwoOperationGroupGroup1ClientThreeOptions) (TwoOperationGroupGroup1ClientThreeResponse, error) {
	var err error
	const operationName = "TwoOperationGroupGroup1Client.Three"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.threeCreateRequest(ctx, options)
	if err != nil {
		return TwoOperationGroupGroup1ClientThreeResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return TwoOperationGroupGroup1ClientThreeResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return TwoOperationGroupGroup1ClientThreeResponse{}, err
	}
	return TwoOperationGroupGroup1ClientThreeResponse{}, nil
}

// threeCreateRequest creates the Three request.
func (client *TwoOperationGroupGroup1Client) threeCreateRequest(ctx context.Context, options *TwoOperationGroupGroup1ClientThreeOptions) (*policy.Request, error) {
	host := "{endpoint}/client/structure/{client}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	host = strings.ReplaceAll(host, "{client}", string(client.client))
	urlPath := "/three"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}
