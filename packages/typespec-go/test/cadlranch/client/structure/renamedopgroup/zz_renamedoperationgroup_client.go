// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package renamedopgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
)

// RenamedOperationGroupClient contains the methods for the Client.Structure.Service namespace.
// Don't use this type directly, use [RenamedOperationClient.NewRenamedOperationGroupClient] instead.
type RenamedOperationGroupClient struct {
	internal *azcore.Client
	endpoint string
	client   ClientType
}

// RenamedFour -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - RenamedOperationGroupClientRenamedFourOptions contains the optional parameters for the RenamedOperationGroupClient.RenamedFour
//     method.
func (client *RenamedOperationGroupClient) RenamedFour(ctx context.Context, options *RenamedOperationGroupClientRenamedFourOptions) (RenamedOperationGroupClientRenamedFourResponse, error) {
	var err error
	const operationName = "RenamedOperationGroupClient.RenamedFour"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.renamedFourCreateRequest(ctx, options)
	if err != nil {
		return RenamedOperationGroupClientRenamedFourResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return RenamedOperationGroupClientRenamedFourResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return RenamedOperationGroupClientRenamedFourResponse{}, err
	}
	return RenamedOperationGroupClientRenamedFourResponse{}, nil
}

// renamedFourCreateRequest creates the RenamedFour request.
func (client *RenamedOperationGroupClient) renamedFourCreateRequest(ctx context.Context, _ *RenamedOperationGroupClientRenamedFourOptions) (*policy.Request, error) {
	host := "{endpoint}/client/structure/{client}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	host = strings.ReplaceAll(host, "{client}", string(client.client))
	urlPath := "/four"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// RenamedSix -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - RenamedOperationGroupClientRenamedSixOptions contains the optional parameters for the RenamedOperationGroupClient.RenamedSix
//     method.
func (client *RenamedOperationGroupClient) RenamedSix(ctx context.Context, options *RenamedOperationGroupClientRenamedSixOptions) (RenamedOperationGroupClientRenamedSixResponse, error) {
	var err error
	const operationName = "RenamedOperationGroupClient.RenamedSix"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.renamedSixCreateRequest(ctx, options)
	if err != nil {
		return RenamedOperationGroupClientRenamedSixResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return RenamedOperationGroupClientRenamedSixResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return RenamedOperationGroupClientRenamedSixResponse{}, err
	}
	return RenamedOperationGroupClientRenamedSixResponse{}, nil
}

// renamedSixCreateRequest creates the RenamedSix request.
func (client *RenamedOperationGroupClient) renamedSixCreateRequest(ctx context.Context, _ *RenamedOperationGroupClientRenamedSixOptions) (*policy.Request, error) {
	host := "{endpoint}/client/structure/{client}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	host = strings.ReplaceAll(host, "{client}", string(client.client))
	urlPath := "/six"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// RenamedTwo -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - RenamedOperationGroupClientRenamedTwoOptions contains the optional parameters for the RenamedOperationGroupClient.RenamedTwo
//     method.
func (client *RenamedOperationGroupClient) RenamedTwo(ctx context.Context, options *RenamedOperationGroupClientRenamedTwoOptions) (RenamedOperationGroupClientRenamedTwoResponse, error) {
	var err error
	const operationName = "RenamedOperationGroupClient.RenamedTwo"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.renamedTwoCreateRequest(ctx, options)
	if err != nil {
		return RenamedOperationGroupClientRenamedTwoResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return RenamedOperationGroupClientRenamedTwoResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return RenamedOperationGroupClientRenamedTwoResponse{}, err
	}
	return RenamedOperationGroupClientRenamedTwoResponse{}, nil
}

// renamedTwoCreateRequest creates the RenamedTwo request.
func (client *RenamedOperationGroupClient) renamedTwoCreateRequest(ctx context.Context, _ *RenamedOperationGroupClientRenamedTwoOptions) (*policy.Request, error) {
	host := "{endpoint}/client/structure/{client}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	host = strings.ReplaceAll(host, "{client}", string(client.client))
	urlPath := "/two"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}
