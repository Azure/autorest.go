// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"renamedopgroup"
)

// RenamedOperationServer is a fake server for instances of the renamedopgroup.RenamedOperationClient type.
type RenamedOperationServer struct {
	// RenamedFive is the fake for method RenamedOperationClient.RenamedFive
	// HTTP status codes to indicate success: http.StatusNoContent
	RenamedFive func(ctx context.Context, options *renamedopgroup.RenamedOperationClientRenamedFiveOptions) (resp azfake.Responder[renamedopgroup.RenamedOperationClientRenamedFiveResponse], errResp azfake.ErrorResponder)

	// RenamedOne is the fake for method RenamedOperationClient.RenamedOne
	// HTTP status codes to indicate success: http.StatusNoContent
	RenamedOne func(ctx context.Context, options *renamedopgroup.RenamedOperationClientRenamedOneOptions) (resp azfake.Responder[renamedopgroup.RenamedOperationClientRenamedOneResponse], errResp azfake.ErrorResponder)

	// RenamedThree is the fake for method RenamedOperationClient.RenamedThree
	// HTTP status codes to indicate success: http.StatusNoContent
	RenamedThree func(ctx context.Context, options *renamedopgroup.RenamedOperationClientRenamedThreeOptions) (resp azfake.Responder[renamedopgroup.RenamedOperationClientRenamedThreeResponse], errResp azfake.ErrorResponder)
}

// NewRenamedOperationServerTransport creates a new instance of RenamedOperationServerTransport with the provided implementation.
// The returned RenamedOperationServerTransport instance is connected to an instance of renamedopgroup.RenamedOperationClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewRenamedOperationServerTransport(srv *RenamedOperationServer) *RenamedOperationServerTransport {
	return &RenamedOperationServerTransport{srv: srv}
}

// RenamedOperationServerTransport connects instances of renamedopgroup.RenamedOperationClient to instances of RenamedOperationServer.
// Don't use this type directly, use NewRenamedOperationServerTransport instead.
type RenamedOperationServerTransport struct {
	srv *RenamedOperationServer
}

// Do implements the policy.Transporter interface for RenamedOperationServerTransport.
func (r *RenamedOperationServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "RenamedOperationClient.RenamedFive":
		resp, err = r.dispatchRenamedFive(req)
	case "RenamedOperationClient.RenamedOne":
		resp, err = r.dispatchRenamedOne(req)
	case "RenamedOperationClient.RenamedThree":
		resp, err = r.dispatchRenamedThree(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (r *RenamedOperationServerTransport) dispatchRenamedFive(req *http.Request) (*http.Response, error) {
	if r.srv.RenamedFive == nil {
		return nil, &nonRetriableError{errors.New("fake for method RenamedFive not implemented")}
	}
	respr, errRespr := r.srv.RenamedFive(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *RenamedOperationServerTransport) dispatchRenamedOne(req *http.Request) (*http.Response, error) {
	if r.srv.RenamedOne == nil {
		return nil, &nonRetriableError{errors.New("fake for method RenamedOne not implemented")}
	}
	respr, errRespr := r.srv.RenamedOne(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *RenamedOperationServerTransport) dispatchRenamedThree(req *http.Request) (*http.Response, error) {
	if r.srv.RenamedThree == nil {
		return nil, &nonRetriableError{errors.New("fake for method RenamedThree not implemented")}
	}
	respr, errRespr := r.srv.RenamedThree(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
