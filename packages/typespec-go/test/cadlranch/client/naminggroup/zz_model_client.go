// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package naminggroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// ModelClient contains the methods for the Client.Naming namespace.
// Don't use this type directly, use [NamingClient.NewModelClient] instead.
type ModelClient struct {
	internal *azcore.Client
}

// - options - ModelClientClientOptions contains the optional parameters for the ModelClient.Client method.
func (client *ModelClient) Client(ctx context.Context, body ClientModel, options *ModelClientClientOptions) (ModelClientClientResponse, error) {
	var err error
	const operationName = "ModelClient.Client"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.clientCreateRequest(ctx, body, options)
	if err != nil {
		return ModelClientClientResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ModelClientClientResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ModelClientClientResponse{}, err
	}
	return ModelClientClientResponse{}, nil
}

// clientCreateRequest creates the Client request.
func (client *ModelClient) clientCreateRequest(ctx context.Context, body ClientModel, options *ModelClientClientOptions) (*policy.Request, error) {
	urlPath := "/client/naming/model/client"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// - options - ModelClientLanguageOptions contains the optional parameters for the ModelClient.Language method.
func (client *ModelClient) Language(ctx context.Context, body GoModel, options *ModelClientLanguageOptions) (ModelClientLanguageResponse, error) {
	var err error
	const operationName = "ModelClient.Language"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.languageCreateRequest(ctx, body, options)
	if err != nil {
		return ModelClientLanguageResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ModelClientLanguageResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ModelClientLanguageResponse{}, err
	}
	return ModelClientLanguageResponse{}, nil
}

// languageCreateRequest creates the Language request.
func (client *ModelClient) languageCreateRequest(ctx context.Context, body GoModel, options *ModelClientLanguageOptions) (*policy.Request, error) {
	urlPath := "/client/naming/model/language"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}
