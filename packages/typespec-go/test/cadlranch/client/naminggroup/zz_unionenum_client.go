// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package naminggroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// UnionEnumClient contains the methods for the Client.Naming namespace.
// Don't use this type directly, use [NamingClient.NewUnionEnumClient] instead.
type UnionEnumClient struct {
	internal *azcore.Client
}

//   - options - UnionEnumClientUnionEnumMemberNameOptions contains the optional parameters for the UnionEnumClient.UnionEnumMemberName
//     method.
func (client *UnionEnumClient) UnionEnumMemberName(ctx context.Context, body ExtensibleEnum, options *UnionEnumClientUnionEnumMemberNameOptions) (UnionEnumClientUnionEnumMemberNameResponse, error) {
	var err error
	const operationName = "UnionEnumClient.UnionEnumMemberName"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.unionEnumMemberNameCreateRequest(ctx, body, options)
	if err != nil {
		return UnionEnumClientUnionEnumMemberNameResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return UnionEnumClientUnionEnumMemberNameResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return UnionEnumClientUnionEnumMemberNameResponse{}, err
	}
	return UnionEnumClientUnionEnumMemberNameResponse{}, nil
}

// unionEnumMemberNameCreateRequest creates the UnionEnumMemberName request.
func (client *UnionEnumClient) unionEnumMemberNameCreateRequest(ctx context.Context, body ExtensibleEnum, options *UnionEnumClientUnionEnumMemberNameOptions) (*policy.Request, error) {
	urlPath := "/client/naming/union-enum/union-enum-member-name"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// - options - UnionEnumClientUnionEnumNameOptions contains the optional parameters for the UnionEnumClient.UnionEnumName method.
func (client *UnionEnumClient) UnionEnumName(ctx context.Context, body ClientExtensibleEnum, options *UnionEnumClientUnionEnumNameOptions) (UnionEnumClientUnionEnumNameResponse, error) {
	var err error
	const operationName = "UnionEnumClient.UnionEnumName"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.unionEnumNameCreateRequest(ctx, body, options)
	if err != nil {
		return UnionEnumClientUnionEnumNameResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return UnionEnumClientUnionEnumNameResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return UnionEnumClientUnionEnumNameResponse{}, err
	}
	return UnionEnumClientUnionEnumNameResponse{}, nil
}

// unionEnumNameCreateRequest creates the UnionEnumName request.
func (client *UnionEnumClient) unionEnumNameCreateRequest(ctx context.Context, body ClientExtensibleEnum, options *UnionEnumClientUnionEnumNameOptions) (*policy.Request, error) {
	urlPath := "/client/naming/union-enum/union-enum-name"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}
