// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"naminggroup"
	"net/http"
)

// NamingClientModelServer is a fake server for instances of the naminggroup.NamingClientModelClient type.
type NamingClientModelServer struct {
	// Client is the fake for method NamingClientModelClient.Client
	// HTTP status codes to indicate success: http.StatusNoContent
	Client func(ctx context.Context, body naminggroup.ClientModel, options *naminggroup.NamingClientModelClientClientOptions) (resp azfake.Responder[naminggroup.NamingClientModelClientClientResponse], errResp azfake.ErrorResponder)

	// Language is the fake for method NamingClientModelClient.Language
	// HTTP status codes to indicate success: http.StatusNoContent
	Language func(ctx context.Context, body naminggroup.GoModel, options *naminggroup.NamingClientModelClientLanguageOptions) (resp azfake.Responder[naminggroup.NamingClientModelClientLanguageResponse], errResp azfake.ErrorResponder)
}

// NewNamingClientModelServerTransport creates a new instance of NamingClientModelServerTransport with the provided implementation.
// The returned NamingClientModelServerTransport instance is connected to an instance of naminggroup.NamingClientModelClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewNamingClientModelServerTransport(srv *NamingClientModelServer) *NamingClientModelServerTransport {
	return &NamingClientModelServerTransport{srv: srv}
}

// NamingClientModelServerTransport connects instances of naminggroup.NamingClientModelClient to instances of NamingClientModelServer.
// Don't use this type directly, use NewNamingClientModelServerTransport instead.
type NamingClientModelServerTransport struct {
	srv *NamingClientModelServer
}

// Do implements the policy.Transporter interface for NamingClientModelServerTransport.
func (n *NamingClientModelServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return n.dispatchToMethodFake(req, method)
}

func (n *NamingClientModelServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var res result
		switch method {
		case "NamingClientModelClient.Client":
			res.resp, res.err = n.dispatchClient(req)
		case "NamingClientModelClient.Language":
			res.resp, res.err = n.dispatchLanguage(req)
		default:
			res.err = fmt.Errorf("unhandled API %s", method)
		}

		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (n *NamingClientModelServerTransport) dispatchClient(req *http.Request) (*http.Response, error) {
	if n.srv.Client == nil {
		return nil, &nonRetriableError{errors.New("fake for method Client not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[naminggroup.ClientModel](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := n.srv.Client(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (n *NamingClientModelServerTransport) dispatchLanguage(req *http.Request) (*http.Response, error) {
	if n.srv.Language == nil {
		return nil, &nonRetriableError{errors.New("fake for method Language not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[naminggroup.GoModel](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := n.srv.Language(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
