// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"naminggroup"
	"net/http"
)

// UnionEnumServer is a fake server for instances of the naminggroup.UnionEnumClient type.
type UnionEnumServer struct {
	// UnionEnumMemberName is the fake for method UnionEnumClient.UnionEnumMemberName
	// HTTP status codes to indicate success: http.StatusNoContent
	UnionEnumMemberName func(ctx context.Context, body naminggroup.ExtensibleEnum, options *naminggroup.UnionEnumClientUnionEnumMemberNameOptions) (resp azfake.Responder[naminggroup.UnionEnumClientUnionEnumMemberNameResponse], errResp azfake.ErrorResponder)

	// UnionEnumName is the fake for method UnionEnumClient.UnionEnumName
	// HTTP status codes to indicate success: http.StatusNoContent
	UnionEnumName func(ctx context.Context, body naminggroup.ClientExtensibleEnum, options *naminggroup.UnionEnumClientUnionEnumNameOptions) (resp azfake.Responder[naminggroup.UnionEnumClientUnionEnumNameResponse], errResp azfake.ErrorResponder)
}

// NewUnionEnumServerTransport creates a new instance of UnionEnumServerTransport with the provided implementation.
// The returned UnionEnumServerTransport instance is connected to an instance of naminggroup.UnionEnumClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewUnionEnumServerTransport(srv *UnionEnumServer) *UnionEnumServerTransport {
	return &UnionEnumServerTransport{srv: srv}
}

// UnionEnumServerTransport connects instances of naminggroup.UnionEnumClient to instances of UnionEnumServer.
// Don't use this type directly, use NewUnionEnumServerTransport instead.
type UnionEnumServerTransport struct {
	srv *UnionEnumServer
}

// Do implements the policy.Transporter interface for UnionEnumServerTransport.
func (u *UnionEnumServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return u.dispatchToMethodFake(req, method)
}

func (u *UnionEnumServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "UnionEnumClient.UnionEnumMemberName":
		resp, err = u.dispatchUnionEnumMemberName(req)
	case "UnionEnumClient.UnionEnumName":
		resp, err = u.dispatchUnionEnumName(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (u *UnionEnumServerTransport) dispatchUnionEnumMemberName(req *http.Request) (*http.Response, error) {
	if u.srv.UnionEnumMemberName == nil {
		return nil, &nonRetriableError{errors.New("fake for method UnionEnumMemberName not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[naminggroup.ExtensibleEnum](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := u.srv.UnionEnumMemberName(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (u *UnionEnumServerTransport) dispatchUnionEnumName(req *http.Request) (*http.Response, error) {
	if u.srv.UnionEnumName == nil {
		return nil, &nonRetriableError{errors.New("fake for method UnionEnumName not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[naminggroup.ClientExtensibleEnum](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := u.srv.UnionEnumName(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
