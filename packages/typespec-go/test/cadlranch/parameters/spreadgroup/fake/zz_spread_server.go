// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// SpreadServer is a fake server for instances of the spreadgroup.SpreadClient type.
type SpreadServer struct {
	// SpreadAliasServer contains the fakes for client SpreadAliasClient
	SpreadAliasServer SpreadAliasServer

	// SpreadModelServer contains the fakes for client SpreadModelClient
	SpreadModelServer SpreadModelServer
}

// NewSpreadServerTransport creates a new instance of SpreadServerTransport with the provided implementation.
// The returned SpreadServerTransport instance is connected to an instance of spreadgroup.SpreadClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSpreadServerTransport(srv *SpreadServer) *SpreadServerTransport {
	return &SpreadServerTransport{srv: srv}
}

// SpreadServerTransport connects instances of spreadgroup.SpreadClient to instances of SpreadServer.
// Don't use this type directly, use NewSpreadServerTransport instead.
type SpreadServerTransport struct {
	srv                 *SpreadServer
	trMu                sync.Mutex
	trSpreadAliasServer *SpreadAliasServerTransport
	trSpreadModelServer *SpreadModelServerTransport
}

// Do implements the policy.Transporter interface for SpreadServerTransport.
func (s *SpreadServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (s *SpreadServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "SpreadAliasClient":
		initServer(&s.trMu, &s.trSpreadAliasServer, func() *SpreadAliasServerTransport {
			return NewSpreadAliasServerTransport(&s.srv.SpreadAliasServer)
		})
		resp, err = s.trSpreadAliasServer.Do(req)
	case "SpreadModelClient":
		initServer(&s.trMu, &s.trSpreadModelServer, func() *SpreadModelServerTransport {
			return NewSpreadModelServerTransport(&s.srv.SpreadModelServer)
		})
		resp, err = s.trSpreadModelServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}
