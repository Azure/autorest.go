// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"regexp"
	"spreadgroup"
)

// SpreadModelServer is a fake server for instances of the spreadgroup.SpreadModelClient type.
type SpreadModelServer struct {
	// SpreadAsRequestBody is the fake for method SpreadModelClient.SpreadAsRequestBody
	// HTTP status codes to indicate success: http.StatusNoContent
	SpreadAsRequestBody func(ctx context.Context, bodyParameter spreadgroup.BodyParameter, options *spreadgroup.SpreadModelClientSpreadAsRequestBodyOptions) (resp azfake.Responder[spreadgroup.SpreadModelClientSpreadAsRequestBodyResponse], errResp azfake.ErrorResponder)

	// SpreadCompositeRequest is the fake for method SpreadModelClient.SpreadCompositeRequest
	// HTTP status codes to indicate success: http.StatusNoContent
	SpreadCompositeRequest func(ctx context.Context, name string, testHeader string, body spreadgroup.BodyParameter, options *spreadgroup.SpreadModelClientSpreadCompositeRequestOptions) (resp azfake.Responder[spreadgroup.SpreadModelClientSpreadCompositeRequestResponse], errResp azfake.ErrorResponder)

	// SpreadCompositeRequestMix is the fake for method SpreadModelClient.SpreadCompositeRequestMix
	// HTTP status codes to indicate success: http.StatusNoContent
	SpreadCompositeRequestMix func(ctx context.Context, name string, testHeader string, compositeRequestMix spreadgroup.CompositeRequestMix, options *spreadgroup.SpreadModelClientSpreadCompositeRequestMixOptions) (resp azfake.Responder[spreadgroup.SpreadModelClientSpreadCompositeRequestMixResponse], errResp azfake.ErrorResponder)

	// SpreadCompositeRequestOnlyWithBody is the fake for method SpreadModelClient.SpreadCompositeRequestOnlyWithBody
	// HTTP status codes to indicate success: http.StatusNoContent
	SpreadCompositeRequestOnlyWithBody func(ctx context.Context, body spreadgroup.BodyParameter, options *spreadgroup.SpreadModelClientSpreadCompositeRequestOnlyWithBodyOptions) (resp azfake.Responder[spreadgroup.SpreadModelClientSpreadCompositeRequestOnlyWithBodyResponse], errResp azfake.ErrorResponder)

	// SpreadCompositeRequestWithoutBody is the fake for method SpreadModelClient.SpreadCompositeRequestWithoutBody
	// HTTP status codes to indicate success: http.StatusNoContent
	SpreadCompositeRequestWithoutBody func(ctx context.Context, name string, testHeader string, options *spreadgroup.SpreadModelClientSpreadCompositeRequestWithoutBodyOptions) (resp azfake.Responder[spreadgroup.SpreadModelClientSpreadCompositeRequestWithoutBodyResponse], errResp azfake.ErrorResponder)
}

// NewSpreadModelServerTransport creates a new instance of SpreadModelServerTransport with the provided implementation.
// The returned SpreadModelServerTransport instance is connected to an instance of spreadgroup.SpreadModelClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSpreadModelServerTransport(srv *SpreadModelServer) *SpreadModelServerTransport {
	return &SpreadModelServerTransport{srv: srv}
}

// SpreadModelServerTransport connects instances of spreadgroup.SpreadModelClient to instances of SpreadModelServer.
// Don't use this type directly, use NewSpreadModelServerTransport instead.
type SpreadModelServerTransport struct {
	srv *SpreadModelServer
}

// Do implements the policy.Transporter interface for SpreadModelServerTransport.
func (s *SpreadModelServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToMethodFake(req, method)
}

func (s *SpreadModelServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "SpreadModelClient.SpreadAsRequestBody":
		resp, err = s.dispatchSpreadAsRequestBody(req)
	case "SpreadModelClient.SpreadCompositeRequest":
		resp, err = s.dispatchSpreadCompositeRequest(req)
	case "SpreadModelClient.SpreadCompositeRequestMix":
		resp, err = s.dispatchSpreadCompositeRequestMix(req)
	case "SpreadModelClient.SpreadCompositeRequestOnlyWithBody":
		resp, err = s.dispatchSpreadCompositeRequestOnlyWithBody(req)
	case "SpreadModelClient.SpreadCompositeRequestWithoutBody":
		resp, err = s.dispatchSpreadCompositeRequestWithoutBody(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (s *SpreadModelServerTransport) dispatchSpreadAsRequestBody(req *http.Request) (*http.Response, error) {
	if s.srv.SpreadAsRequestBody == nil {
		return nil, &nonRetriableError{errors.New("fake for method SpreadAsRequestBody not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[spreadgroup.BodyParameter](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.SpreadAsRequestBody(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpreadModelServerTransport) dispatchSpreadCompositeRequest(req *http.Request) (*http.Response, error) {
	if s.srv.SpreadCompositeRequest == nil {
		return nil, &nonRetriableError{errors.New("fake for method SpreadCompositeRequest not implemented")}
	}
	const regexStr = `/parameters/spread/model/composite-request/(?P<name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[spreadgroup.BodyParameter](req)
	if err != nil {
		return nil, err
	}
	nameParam, err := url.PathUnescape(matches[regex.SubexpIndex("name")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.SpreadCompositeRequest(req.Context(), nameParam, getHeaderValue(req.Header, "test-header"), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpreadModelServerTransport) dispatchSpreadCompositeRequestMix(req *http.Request) (*http.Response, error) {
	if s.srv.SpreadCompositeRequestMix == nil {
		return nil, &nonRetriableError{errors.New("fake for method SpreadCompositeRequestMix not implemented")}
	}
	const regexStr = `/parameters/spread/model/composite-request-mix/(?P<name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[spreadgroup.CompositeRequestMix](req)
	if err != nil {
		return nil, err
	}
	nameParam, err := url.PathUnescape(matches[regex.SubexpIndex("name")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.SpreadCompositeRequestMix(req.Context(), nameParam, getHeaderValue(req.Header, "test-header"), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpreadModelServerTransport) dispatchSpreadCompositeRequestOnlyWithBody(req *http.Request) (*http.Response, error) {
	if s.srv.SpreadCompositeRequestOnlyWithBody == nil {
		return nil, &nonRetriableError{errors.New("fake for method SpreadCompositeRequestOnlyWithBody not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[spreadgroup.BodyParameter](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.SpreadCompositeRequestOnlyWithBody(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpreadModelServerTransport) dispatchSpreadCompositeRequestWithoutBody(req *http.Request) (*http.Response, error) {
	if s.srv.SpreadCompositeRequestWithoutBody == nil {
		return nil, &nonRetriableError{errors.New("fake for method SpreadCompositeRequestWithoutBody not implemented")}
	}
	const regexStr = `/parameters/spread/model/composite-request-without-body/(?P<name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	nameParam, err := url.PathUnescape(matches[regex.SubexpIndex("name")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.SpreadCompositeRequestWithoutBody(req.Context(), nameParam, getHeaderValue(req.Header, "test-header"), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
