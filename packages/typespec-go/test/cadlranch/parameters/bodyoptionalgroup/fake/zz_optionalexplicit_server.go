// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"bodyoptionalgroup"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// OptionalExplicitServer is a fake server for instances of the bodyoptionalgroup.OptionalExplicitClient type.
type OptionalExplicitServer struct {
	// Omit is the fake for method OptionalExplicitClient.Omit
	// HTTP status codes to indicate success: http.StatusNoContent
	Omit func(ctx context.Context, options *bodyoptionalgroup.OptionalExplicitClientOmitOptions) (resp azfake.Responder[bodyoptionalgroup.OptionalExplicitClientOmitResponse], errResp azfake.ErrorResponder)

	// Set is the fake for method OptionalExplicitClient.Set
	// HTTP status codes to indicate success: http.StatusNoContent
	Set func(ctx context.Context, options *bodyoptionalgroup.OptionalExplicitClientSetOptions) (resp azfake.Responder[bodyoptionalgroup.OptionalExplicitClientSetResponse], errResp azfake.ErrorResponder)
}

// NewOptionalExplicitServerTransport creates a new instance of OptionalExplicitServerTransport with the provided implementation.
// The returned OptionalExplicitServerTransport instance is connected to an instance of bodyoptionalgroup.OptionalExplicitClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewOptionalExplicitServerTransport(srv *OptionalExplicitServer) *OptionalExplicitServerTransport {
	return &OptionalExplicitServerTransport{srv: srv}
}

// OptionalExplicitServerTransport connects instances of bodyoptionalgroup.OptionalExplicitClient to instances of OptionalExplicitServer.
// Don't use this type directly, use NewOptionalExplicitServerTransport instead.
type OptionalExplicitServerTransport struct {
	srv *OptionalExplicitServer
}

// Do implements the policy.Transporter interface for OptionalExplicitServerTransport.
func (o *OptionalExplicitServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return o.dispatchToMethodFake(req, method)
}

func (o *OptionalExplicitServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "OptionalExplicitClient.Omit":
		resp, err = o.dispatchOmit(req)
	case "OptionalExplicitClient.Set":
		resp, err = o.dispatchSet(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (o *OptionalExplicitServerTransport) dispatchOmit(req *http.Request) (*http.Response, error) {
	if o.srv.Omit == nil {
		return nil, &nonRetriableError{errors.New("fake for method Omit not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[bodyoptionalgroup.BodyModel](req)
	if err != nil {
		return nil, err
	}
	var options *bodyoptionalgroup.OptionalExplicitClientOmitOptions
	if !reflect.ValueOf(body).IsZero() {
		options = &bodyoptionalgroup.OptionalExplicitClientOmitOptions{
			Body: &body,
		}
	}
	respr, errRespr := o.srv.Omit(req.Context(), options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *OptionalExplicitServerTransport) dispatchSet(req *http.Request) (*http.Response, error) {
	if o.srv.Set == nil {
		return nil, &nonRetriableError{errors.New("fake for method Set not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[bodyoptionalgroup.BodyModel](req)
	if err != nil {
		return nil, err
	}
	var options *bodyoptionalgroup.OptionalExplicitClientSetOptions
	if !reflect.ValueOf(body).IsZero() {
		options = &bodyoptionalgroup.OptionalExplicitClientSetOptions{
			Body: &body,
		}
	}
	respr, errRespr := o.srv.Set(req.Context(), options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
