// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package basicparamsgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// BasicImplicitBodyClient contains the methods for the BasicImplicitBody group.
// Don't use this type directly, use [BasicClient.NewBasicImplicitBodyClient] instead.
type BasicImplicitBodyClient struct {
	internal *azcore.Client
}

// Simple -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - BasicImplicitBodyClientSimpleOptions contains the optional parameters for the BasicImplicitBodyClient.Simple
//     method.
func (client *BasicImplicitBodyClient) Simple(ctx context.Context, name string, options *BasicImplicitBodyClientSimpleOptions) (BasicImplicitBodyClientSimpleResponse, error) {
	var err error
	const operationName = "BasicImplicitBodyClient.Simple"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.simpleCreateRequest(ctx, name, options)
	if err != nil {
		return BasicImplicitBodyClientSimpleResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BasicImplicitBodyClientSimpleResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return BasicImplicitBodyClientSimpleResponse{}, err
	}
	return BasicImplicitBodyClientSimpleResponse{}, nil
}

// simpleCreateRequest creates the Simple request.
func (client *BasicImplicitBodyClient) simpleCreateRequest(ctx context.Context, name string, _ *BasicImplicitBodyClientSimpleOptions) (*policy.Request, error) {
	urlPath := "/parameters/basic/implicit-body/simple"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	body := struct {
		Name string `json:"name"`
	}{
		Name: name,
	}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}
