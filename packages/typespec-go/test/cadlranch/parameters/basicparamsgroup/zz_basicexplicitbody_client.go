// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package basicparamsgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// BasicExplicitBodyClient contains the methods for the Parameters.Basic namespace.
// Don't use this type directly, use [BasicClient.NewBasicExplicitBodyClient] instead.
type BasicExplicitBodyClient struct {
	internal *azcore.Client
}

// Simple -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - BasicExplicitBodyClientSimpleOptions contains the optional parameters for the BasicExplicitBodyClient.Simple
//     method.
func (client *BasicExplicitBodyClient) Simple(ctx context.Context, body User, options *BasicExplicitBodyClientSimpleOptions) (BasicExplicitBodyClientSimpleResponse, error) {
	var err error
	const operationName = "BasicExplicitBodyClient.Simple"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.simpleCreateRequest(ctx, body, options)
	if err != nil {
		return BasicExplicitBodyClientSimpleResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BasicExplicitBodyClientSimpleResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return BasicExplicitBodyClientSimpleResponse{}, err
	}
	return BasicExplicitBodyClientSimpleResponse{}, nil
}

// simpleCreateRequest creates the Simple request.
func (client *BasicExplicitBodyClient) simpleCreateRequest(ctx context.Context, body User, _ *BasicExplicitBodyClientSimpleOptions) (*policy.Request, error) {
	urlPath := "/parameters/basic/explicit-body/simple"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}
