// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"basicparamsgroup"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// BasicImplicitBodyServer is a fake server for instances of the basicparamsgroup.BasicImplicitBodyClient type.
type BasicImplicitBodyServer struct {
	// Simple is the fake for method BasicImplicitBodyClient.Simple
	// HTTP status codes to indicate success: http.StatusNoContent
	Simple func(ctx context.Context, name string, options *basicparamsgroup.BasicImplicitBodyClientSimpleOptions) (resp azfake.Responder[basicparamsgroup.BasicImplicitBodyClientSimpleResponse], errResp azfake.ErrorResponder)
}

// NewBasicImplicitBodyServerTransport creates a new instance of BasicImplicitBodyServerTransport with the provided implementation.
// The returned BasicImplicitBodyServerTransport instance is connected to an instance of basicparamsgroup.BasicImplicitBodyClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewBasicImplicitBodyServerTransport(srv *BasicImplicitBodyServer) *BasicImplicitBodyServerTransport {
	return &BasicImplicitBodyServerTransport{srv: srv}
}

// BasicImplicitBodyServerTransport connects instances of basicparamsgroup.BasicImplicitBodyClient to instances of BasicImplicitBodyServer.
// Don't use this type directly, use NewBasicImplicitBodyServerTransport instead.
type BasicImplicitBodyServerTransport struct {
	srv *BasicImplicitBodyServer
}

// Do implements the policy.Transporter interface for BasicImplicitBodyServerTransport.
func (b *BasicImplicitBodyServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return b.dispatchToMethodFake(req, method)
}

func (b *BasicImplicitBodyServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "BasicImplicitBodyClient.Simple":
		resp, err = b.dispatchSimple(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (b *BasicImplicitBodyServerTransport) dispatchSimple(req *http.Request) (*http.Response, error) {
	if b.srv.Simple == nil {
		return nil, &nonRetriableError{errors.New("fake for method Simple not implemented")}
	}
	type partialBodyParams struct {
		Name string `json:"name"`
	}
	body, err := server.UnmarshalRequestAsJSON[partialBodyParams](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := b.srv.Simple(req.Context(), body.Name, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
