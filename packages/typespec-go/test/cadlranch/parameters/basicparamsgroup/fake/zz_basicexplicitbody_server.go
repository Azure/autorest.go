// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"basicparamsgroup"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// BasicExplicitBodyServer is a fake server for instances of the basicparamsgroup.BasicExplicitBodyClient type.
type BasicExplicitBodyServer struct {
	// Simple is the fake for method BasicExplicitBodyClient.Simple
	// HTTP status codes to indicate success: http.StatusNoContent
	Simple func(ctx context.Context, body basicparamsgroup.User, options *basicparamsgroup.BasicExplicitBodyClientSimpleOptions) (resp azfake.Responder[basicparamsgroup.BasicExplicitBodyClientSimpleResponse], errResp azfake.ErrorResponder)
}

// NewBasicExplicitBodyServerTransport creates a new instance of BasicExplicitBodyServerTransport with the provided implementation.
// The returned BasicExplicitBodyServerTransport instance is connected to an instance of basicparamsgroup.BasicExplicitBodyClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewBasicExplicitBodyServerTransport(srv *BasicExplicitBodyServer) *BasicExplicitBodyServerTransport {
	return &BasicExplicitBodyServerTransport{srv: srv}
}

// BasicExplicitBodyServerTransport connects instances of basicparamsgroup.BasicExplicitBodyClient to instances of BasicExplicitBodyServer.
// Don't use this type directly, use NewBasicExplicitBodyServerTransport instead.
type BasicExplicitBodyServerTransport struct {
	srv *BasicExplicitBodyServer
}

// Do implements the policy.Transporter interface for BasicExplicitBodyServerTransport.
func (b *BasicExplicitBodyServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return b.dispatchToMethodFake(req, method)
}

func (b *BasicExplicitBodyServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "BasicExplicitBodyClient.Simple":
		resp, err = b.dispatchSimple(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (b *BasicExplicitBodyServerTransport) dispatchSimple(req *http.Request) (*http.Response, error) {
	if b.srv.Simple == nil {
		return nil, &nonRetriableError{errors.New("fake for method Simple not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[basicparamsgroup.User](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := b.srv.Simple(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
