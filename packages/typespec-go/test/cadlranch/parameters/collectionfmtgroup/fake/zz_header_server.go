// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"collectionfmtgroup"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// HeaderServer is a fake server for instances of the collectionfmtgroup.HeaderClient type.
type HeaderServer struct {
	// CSV is the fake for method HeaderClient.CSV
	// HTTP status codes to indicate success: http.StatusNoContent
	CSV func(ctx context.Context, colors []string, options *collectionfmtgroup.HeaderClientCSVOptions) (resp azfake.Responder[collectionfmtgroup.HeaderClientCSVResponse], errResp azfake.ErrorResponder)
}

// NewHeaderServerTransport creates a new instance of HeaderServerTransport with the provided implementation.
// The returned HeaderServerTransport instance is connected to an instance of collectionfmtgroup.HeaderClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewHeaderServerTransport(srv *HeaderServer) *HeaderServerTransport {
	return &HeaderServerTransport{srv: srv}
}

// HeaderServerTransport connects instances of collectionfmtgroup.HeaderClient to instances of HeaderServer.
// Don't use this type directly, use NewHeaderServerTransport instead.
type HeaderServerTransport struct {
	srv *HeaderServer
}

// Do implements the policy.Transporter interface for HeaderServerTransport.
func (h *HeaderServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return h.dispatchToMethodFake(req, method)
}

func (h *HeaderServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "HeaderClient.CSV":
		resp, err = h.dispatchCSV(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (h *HeaderServerTransport) dispatchCSV(req *http.Request) (*http.Response, error) {
	if h.srv.CSV == nil {
		return nil, &nonRetriableError{errors.New("fake for method CSV not implemented")}
	}
	respr, errRespr := h.srv.CSV(req.Context(), splitHelper(getHeaderValue(req.Header, "colors"), ","), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
