// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"specialwordsgroup"
)

// SpecialWordsModelsServer is a fake server for instances of the specialwordsgroup.SpecialWordsModelsClient type.
type SpecialWordsModelsServer struct {
	// WithAnd is the fake for method SpecialWordsModelsClient.WithAnd
	// HTTP status codes to indicate success: http.StatusNoContent
	WithAnd func(ctx context.Context, body specialwordsgroup.And, options *specialwordsgroup.SpecialWordsModelsClientWithAndOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithAndResponse], errResp azfake.ErrorResponder)

	// WithAs is the fake for method SpecialWordsModelsClient.WithAs
	// HTTP status codes to indicate success: http.StatusNoContent
	WithAs func(ctx context.Context, body specialwordsgroup.As, options *specialwordsgroup.SpecialWordsModelsClientWithAsOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithAsResponse], errResp azfake.ErrorResponder)

	// WithAssert is the fake for method SpecialWordsModelsClient.WithAssert
	// HTTP status codes to indicate success: http.StatusNoContent
	WithAssert func(ctx context.Context, body specialwordsgroup.Assert, options *specialwordsgroup.SpecialWordsModelsClientWithAssertOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithAssertResponse], errResp azfake.ErrorResponder)

	// WithAsync is the fake for method SpecialWordsModelsClient.WithAsync
	// HTTP status codes to indicate success: http.StatusNoContent
	WithAsync func(ctx context.Context, body specialwordsgroup.Async, options *specialwordsgroup.SpecialWordsModelsClientWithAsyncOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithAsyncResponse], errResp azfake.ErrorResponder)

	// WithAwait is the fake for method SpecialWordsModelsClient.WithAwait
	// HTTP status codes to indicate success: http.StatusNoContent
	WithAwait func(ctx context.Context, body specialwordsgroup.Await, options *specialwordsgroup.SpecialWordsModelsClientWithAwaitOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithAwaitResponse], errResp azfake.ErrorResponder)

	// WithBreak is the fake for method SpecialWordsModelsClient.WithBreak
	// HTTP status codes to indicate success: http.StatusNoContent
	WithBreak func(ctx context.Context, body specialwordsgroup.Break, options *specialwordsgroup.SpecialWordsModelsClientWithBreakOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithBreakResponse], errResp azfake.ErrorResponder)

	// WithClass is the fake for method SpecialWordsModelsClient.WithClass
	// HTTP status codes to indicate success: http.StatusNoContent
	WithClass func(ctx context.Context, body specialwordsgroup.Class, options *specialwordsgroup.SpecialWordsModelsClientWithClassOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithClassResponse], errResp azfake.ErrorResponder)

	// WithConstructor is the fake for method SpecialWordsModelsClient.WithConstructor
	// HTTP status codes to indicate success: http.StatusNoContent
	WithConstructor func(ctx context.Context, body specialwordsgroup.Constructor, options *specialwordsgroup.SpecialWordsModelsClientWithConstructorOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithConstructorResponse], errResp azfake.ErrorResponder)

	// WithContinue is the fake for method SpecialWordsModelsClient.WithContinue
	// HTTP status codes to indicate success: http.StatusNoContent
	WithContinue func(ctx context.Context, body specialwordsgroup.Continue, options *specialwordsgroup.SpecialWordsModelsClientWithContinueOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithContinueResponse], errResp azfake.ErrorResponder)

	// WithDef is the fake for method SpecialWordsModelsClient.WithDef
	// HTTP status codes to indicate success: http.StatusNoContent
	WithDef func(ctx context.Context, body specialwordsgroup.Def, options *specialwordsgroup.SpecialWordsModelsClientWithDefOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithDefResponse], errResp azfake.ErrorResponder)

	// WithDel is the fake for method SpecialWordsModelsClient.WithDel
	// HTTP status codes to indicate success: http.StatusNoContent
	WithDel func(ctx context.Context, body specialwordsgroup.Del, options *specialwordsgroup.SpecialWordsModelsClientWithDelOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithDelResponse], errResp azfake.ErrorResponder)

	// WithElif is the fake for method SpecialWordsModelsClient.WithElif
	// HTTP status codes to indicate success: http.StatusNoContent
	WithElif func(ctx context.Context, body specialwordsgroup.Elif, options *specialwordsgroup.SpecialWordsModelsClientWithElifOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithElifResponse], errResp azfake.ErrorResponder)

	// WithElse is the fake for method SpecialWordsModelsClient.WithElse
	// HTTP status codes to indicate success: http.StatusNoContent
	WithElse func(ctx context.Context, body specialwordsgroup.Else, options *specialwordsgroup.SpecialWordsModelsClientWithElseOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithElseResponse], errResp azfake.ErrorResponder)

	// WithExcept is the fake for method SpecialWordsModelsClient.WithExcept
	// HTTP status codes to indicate success: http.StatusNoContent
	WithExcept func(ctx context.Context, body specialwordsgroup.Except, options *specialwordsgroup.SpecialWordsModelsClientWithExceptOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithExceptResponse], errResp azfake.ErrorResponder)

	// WithExec is the fake for method SpecialWordsModelsClient.WithExec
	// HTTP status codes to indicate success: http.StatusNoContent
	WithExec func(ctx context.Context, body specialwordsgroup.Exec, options *specialwordsgroup.SpecialWordsModelsClientWithExecOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithExecResponse], errResp azfake.ErrorResponder)

	// WithFinally is the fake for method SpecialWordsModelsClient.WithFinally
	// HTTP status codes to indicate success: http.StatusNoContent
	WithFinally func(ctx context.Context, body specialwordsgroup.Finally, options *specialwordsgroup.SpecialWordsModelsClientWithFinallyOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithFinallyResponse], errResp azfake.ErrorResponder)

	// WithFor is the fake for method SpecialWordsModelsClient.WithFor
	// HTTP status codes to indicate success: http.StatusNoContent
	WithFor func(ctx context.Context, body specialwordsgroup.For, options *specialwordsgroup.SpecialWordsModelsClientWithForOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithForResponse], errResp azfake.ErrorResponder)

	// WithFrom is the fake for method SpecialWordsModelsClient.WithFrom
	// HTTP status codes to indicate success: http.StatusNoContent
	WithFrom func(ctx context.Context, body specialwordsgroup.From, options *specialwordsgroup.SpecialWordsModelsClientWithFromOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithFromResponse], errResp azfake.ErrorResponder)

	// WithGlobal is the fake for method SpecialWordsModelsClient.WithGlobal
	// HTTP status codes to indicate success: http.StatusNoContent
	WithGlobal func(ctx context.Context, body specialwordsgroup.Global, options *specialwordsgroup.SpecialWordsModelsClientWithGlobalOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithGlobalResponse], errResp azfake.ErrorResponder)

	// WithIf is the fake for method SpecialWordsModelsClient.WithIf
	// HTTP status codes to indicate success: http.StatusNoContent
	WithIf func(ctx context.Context, body specialwordsgroup.If, options *specialwordsgroup.SpecialWordsModelsClientWithIfOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithIfResponse], errResp azfake.ErrorResponder)

	// WithImport is the fake for method SpecialWordsModelsClient.WithImport
	// HTTP status codes to indicate success: http.StatusNoContent
	WithImport func(ctx context.Context, body specialwordsgroup.Import, options *specialwordsgroup.SpecialWordsModelsClientWithImportOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithImportResponse], errResp azfake.ErrorResponder)

	// WithIn is the fake for method SpecialWordsModelsClient.WithIn
	// HTTP status codes to indicate success: http.StatusNoContent
	WithIn func(ctx context.Context, body specialwordsgroup.In, options *specialwordsgroup.SpecialWordsModelsClientWithInOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithInResponse], errResp azfake.ErrorResponder)

	// WithIs is the fake for method SpecialWordsModelsClient.WithIs
	// HTTP status codes to indicate success: http.StatusNoContent
	WithIs func(ctx context.Context, body specialwordsgroup.Is, options *specialwordsgroup.SpecialWordsModelsClientWithIsOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithIsResponse], errResp azfake.ErrorResponder)

	// WithLambda is the fake for method SpecialWordsModelsClient.WithLambda
	// HTTP status codes to indicate success: http.StatusNoContent
	WithLambda func(ctx context.Context, body specialwordsgroup.Lambda, options *specialwordsgroup.SpecialWordsModelsClientWithLambdaOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithLambdaResponse], errResp azfake.ErrorResponder)

	// WithNot is the fake for method SpecialWordsModelsClient.WithNot
	// HTTP status codes to indicate success: http.StatusNoContent
	WithNot func(ctx context.Context, body specialwordsgroup.Not, options *specialwordsgroup.SpecialWordsModelsClientWithNotOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithNotResponse], errResp azfake.ErrorResponder)

	// WithOr is the fake for method SpecialWordsModelsClient.WithOr
	// HTTP status codes to indicate success: http.StatusNoContent
	WithOr func(ctx context.Context, body specialwordsgroup.Or, options *specialwordsgroup.SpecialWordsModelsClientWithOrOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithOrResponse], errResp azfake.ErrorResponder)

	// WithPass is the fake for method SpecialWordsModelsClient.WithPass
	// HTTP status codes to indicate success: http.StatusNoContent
	WithPass func(ctx context.Context, body specialwordsgroup.Pass, options *specialwordsgroup.SpecialWordsModelsClientWithPassOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithPassResponse], errResp azfake.ErrorResponder)

	// WithRaise is the fake for method SpecialWordsModelsClient.WithRaise
	// HTTP status codes to indicate success: http.StatusNoContent
	WithRaise func(ctx context.Context, body specialwordsgroup.Raise, options *specialwordsgroup.SpecialWordsModelsClientWithRaiseOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithRaiseResponse], errResp azfake.ErrorResponder)

	// WithReturn is the fake for method SpecialWordsModelsClient.WithReturn
	// HTTP status codes to indicate success: http.StatusNoContent
	WithReturn func(ctx context.Context, body specialwordsgroup.Return, options *specialwordsgroup.SpecialWordsModelsClientWithReturnOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithReturnResponse], errResp azfake.ErrorResponder)

	// WithTry is the fake for method SpecialWordsModelsClient.WithTry
	// HTTP status codes to indicate success: http.StatusNoContent
	WithTry func(ctx context.Context, body specialwordsgroup.Try, options *specialwordsgroup.SpecialWordsModelsClientWithTryOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithTryResponse], errResp azfake.ErrorResponder)

	// WithWhile is the fake for method SpecialWordsModelsClient.WithWhile
	// HTTP status codes to indicate success: http.StatusNoContent
	WithWhile func(ctx context.Context, body specialwordsgroup.While, options *specialwordsgroup.SpecialWordsModelsClientWithWhileOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithWhileResponse], errResp azfake.ErrorResponder)

	// WithWith is the fake for method SpecialWordsModelsClient.WithWith
	// HTTP status codes to indicate success: http.StatusNoContent
	WithWith func(ctx context.Context, body specialwordsgroup.With, options *specialwordsgroup.SpecialWordsModelsClientWithWithOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithWithResponse], errResp azfake.ErrorResponder)

	// WithYield is the fake for method SpecialWordsModelsClient.WithYield
	// HTTP status codes to indicate success: http.StatusNoContent
	WithYield func(ctx context.Context, body specialwordsgroup.Yield, options *specialwordsgroup.SpecialWordsModelsClientWithYieldOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsModelsClientWithYieldResponse], errResp azfake.ErrorResponder)
}

// NewSpecialWordsModelsServerTransport creates a new instance of SpecialWordsModelsServerTransport with the provided implementation.
// The returned SpecialWordsModelsServerTransport instance is connected to an instance of specialwordsgroup.SpecialWordsModelsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSpecialWordsModelsServerTransport(srv *SpecialWordsModelsServer) *SpecialWordsModelsServerTransport {
	return &SpecialWordsModelsServerTransport{srv: srv}
}

// SpecialWordsModelsServerTransport connects instances of specialwordsgroup.SpecialWordsModelsClient to instances of SpecialWordsModelsServer.
// Don't use this type directly, use NewSpecialWordsModelsServerTransport instead.
type SpecialWordsModelsServerTransport struct {
	srv *SpecialWordsModelsServer
}

// Do implements the policy.Transporter interface for SpecialWordsModelsServerTransport.
func (s *SpecialWordsModelsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToMethodFake(req, method)
}

func (s *SpecialWordsModelsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var res result
		switch method {
		case "SpecialWordsModelsClient.WithAnd":
			res.resp, res.err = s.dispatchWithAnd(req)
		case "SpecialWordsModelsClient.WithAs":
			res.resp, res.err = s.dispatchWithAs(req)
		case "SpecialWordsModelsClient.WithAssert":
			res.resp, res.err = s.dispatchWithAssert(req)
		case "SpecialWordsModelsClient.WithAsync":
			res.resp, res.err = s.dispatchWithAsync(req)
		case "SpecialWordsModelsClient.WithAwait":
			res.resp, res.err = s.dispatchWithAwait(req)
		case "SpecialWordsModelsClient.WithBreak":
			res.resp, res.err = s.dispatchWithBreak(req)
		case "SpecialWordsModelsClient.WithClass":
			res.resp, res.err = s.dispatchWithClass(req)
		case "SpecialWordsModelsClient.WithConstructor":
			res.resp, res.err = s.dispatchWithConstructor(req)
		case "SpecialWordsModelsClient.WithContinue":
			res.resp, res.err = s.dispatchWithContinue(req)
		case "SpecialWordsModelsClient.WithDef":
			res.resp, res.err = s.dispatchWithDef(req)
		case "SpecialWordsModelsClient.WithDel":
			res.resp, res.err = s.dispatchWithDel(req)
		case "SpecialWordsModelsClient.WithElif":
			res.resp, res.err = s.dispatchWithElif(req)
		case "SpecialWordsModelsClient.WithElse":
			res.resp, res.err = s.dispatchWithElse(req)
		case "SpecialWordsModelsClient.WithExcept":
			res.resp, res.err = s.dispatchWithExcept(req)
		case "SpecialWordsModelsClient.WithExec":
			res.resp, res.err = s.dispatchWithExec(req)
		case "SpecialWordsModelsClient.WithFinally":
			res.resp, res.err = s.dispatchWithFinally(req)
		case "SpecialWordsModelsClient.WithFor":
			res.resp, res.err = s.dispatchWithFor(req)
		case "SpecialWordsModelsClient.WithFrom":
			res.resp, res.err = s.dispatchWithFrom(req)
		case "SpecialWordsModelsClient.WithGlobal":
			res.resp, res.err = s.dispatchWithGlobal(req)
		case "SpecialWordsModelsClient.WithIf":
			res.resp, res.err = s.dispatchWithIf(req)
		case "SpecialWordsModelsClient.WithImport":
			res.resp, res.err = s.dispatchWithImport(req)
		case "SpecialWordsModelsClient.WithIn":
			res.resp, res.err = s.dispatchWithIn(req)
		case "SpecialWordsModelsClient.WithIs":
			res.resp, res.err = s.dispatchWithIs(req)
		case "SpecialWordsModelsClient.WithLambda":
			res.resp, res.err = s.dispatchWithLambda(req)
		case "SpecialWordsModelsClient.WithNot":
			res.resp, res.err = s.dispatchWithNot(req)
		case "SpecialWordsModelsClient.WithOr":
			res.resp, res.err = s.dispatchWithOr(req)
		case "SpecialWordsModelsClient.WithPass":
			res.resp, res.err = s.dispatchWithPass(req)
		case "SpecialWordsModelsClient.WithRaise":
			res.resp, res.err = s.dispatchWithRaise(req)
		case "SpecialWordsModelsClient.WithReturn":
			res.resp, res.err = s.dispatchWithReturn(req)
		case "SpecialWordsModelsClient.WithTry":
			res.resp, res.err = s.dispatchWithTry(req)
		case "SpecialWordsModelsClient.WithWhile":
			res.resp, res.err = s.dispatchWithWhile(req)
		case "SpecialWordsModelsClient.WithWith":
			res.resp, res.err = s.dispatchWithWith(req)
		case "SpecialWordsModelsClient.WithYield":
			res.resp, res.err = s.dispatchWithYield(req)
		default:
			res.err = fmt.Errorf("unhandled API %s", method)
		}

		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (s *SpecialWordsModelsServerTransport) dispatchWithAnd(req *http.Request) (*http.Response, error) {
	if s.srv.WithAnd == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithAnd not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.And](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithAnd(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithAs(req *http.Request) (*http.Response, error) {
	if s.srv.WithAs == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithAs not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.As](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithAs(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithAssert(req *http.Request) (*http.Response, error) {
	if s.srv.WithAssert == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithAssert not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.Assert](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithAssert(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithAsync(req *http.Request) (*http.Response, error) {
	if s.srv.WithAsync == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithAsync not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.Async](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithAsync(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithAwait(req *http.Request) (*http.Response, error) {
	if s.srv.WithAwait == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithAwait not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.Await](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithAwait(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithBreak(req *http.Request) (*http.Response, error) {
	if s.srv.WithBreak == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithBreak not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.Break](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithBreak(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithClass(req *http.Request) (*http.Response, error) {
	if s.srv.WithClass == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithClass not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.Class](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithClass(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithConstructor(req *http.Request) (*http.Response, error) {
	if s.srv.WithConstructor == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithConstructor not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.Constructor](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithConstructor(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithContinue(req *http.Request) (*http.Response, error) {
	if s.srv.WithContinue == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithContinue not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.Continue](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithContinue(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithDef(req *http.Request) (*http.Response, error) {
	if s.srv.WithDef == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithDef not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.Def](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithDef(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithDel(req *http.Request) (*http.Response, error) {
	if s.srv.WithDel == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithDel not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.Del](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithDel(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithElif(req *http.Request) (*http.Response, error) {
	if s.srv.WithElif == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithElif not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.Elif](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithElif(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithElse(req *http.Request) (*http.Response, error) {
	if s.srv.WithElse == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithElse not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.Else](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithElse(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithExcept(req *http.Request) (*http.Response, error) {
	if s.srv.WithExcept == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithExcept not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.Except](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithExcept(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithExec(req *http.Request) (*http.Response, error) {
	if s.srv.WithExec == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithExec not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.Exec](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithExec(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithFinally(req *http.Request) (*http.Response, error) {
	if s.srv.WithFinally == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithFinally not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.Finally](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithFinally(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithFor(req *http.Request) (*http.Response, error) {
	if s.srv.WithFor == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithFor not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.For](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithFor(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithFrom(req *http.Request) (*http.Response, error) {
	if s.srv.WithFrom == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithFrom not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.From](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithFrom(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithGlobal(req *http.Request) (*http.Response, error) {
	if s.srv.WithGlobal == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithGlobal not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.Global](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithGlobal(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithIf(req *http.Request) (*http.Response, error) {
	if s.srv.WithIf == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithIf not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.If](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithIf(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithImport(req *http.Request) (*http.Response, error) {
	if s.srv.WithImport == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithImport not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.Import](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithImport(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithIn(req *http.Request) (*http.Response, error) {
	if s.srv.WithIn == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithIn not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.In](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithIn(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithIs(req *http.Request) (*http.Response, error) {
	if s.srv.WithIs == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithIs not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.Is](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithIs(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithLambda(req *http.Request) (*http.Response, error) {
	if s.srv.WithLambda == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithLambda not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.Lambda](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithLambda(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithNot(req *http.Request) (*http.Response, error) {
	if s.srv.WithNot == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithNot not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.Not](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithNot(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithOr(req *http.Request) (*http.Response, error) {
	if s.srv.WithOr == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithOr not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.Or](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithOr(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithPass(req *http.Request) (*http.Response, error) {
	if s.srv.WithPass == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithPass not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.Pass](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithPass(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithRaise(req *http.Request) (*http.Response, error) {
	if s.srv.WithRaise == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithRaise not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.Raise](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithRaise(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithReturn(req *http.Request) (*http.Response, error) {
	if s.srv.WithReturn == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithReturn not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.Return](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithReturn(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithTry(req *http.Request) (*http.Response, error) {
	if s.srv.WithTry == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithTry not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.Try](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithTry(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithWhile(req *http.Request) (*http.Response, error) {
	if s.srv.WithWhile == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithWhile not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.While](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithWhile(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithWith(req *http.Request) (*http.Response, error) {
	if s.srv.WithWith == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithWith not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.With](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithWith(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsModelsServerTransport) dispatchWithYield(req *http.Request) (*http.Response, error) {
	if s.srv.WithYield == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithYield not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[specialwordsgroup.Yield](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithYield(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
