// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"specialwordsgroup"
)

// SpecialWordsParametersServer is a fake server for instances of the specialwordsgroup.SpecialWordsParametersClient type.
type SpecialWordsParametersServer struct {
	// WithAnd is the fake for method SpecialWordsParametersClient.WithAnd
	// HTTP status codes to indicate success: http.StatusNoContent
	WithAnd func(ctx context.Context, and string, options *specialwordsgroup.SpecialWordsParametersClientWithAndOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithAndResponse], errResp azfake.ErrorResponder)

	// WithAs is the fake for method SpecialWordsParametersClient.WithAs
	// HTTP status codes to indicate success: http.StatusNoContent
	WithAs func(ctx context.Context, as string, options *specialwordsgroup.SpecialWordsParametersClientWithAsOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithAsResponse], errResp azfake.ErrorResponder)

	// WithAssert is the fake for method SpecialWordsParametersClient.WithAssert
	// HTTP status codes to indicate success: http.StatusNoContent
	WithAssert func(ctx context.Context, assert string, options *specialwordsgroup.SpecialWordsParametersClientWithAssertOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithAssertResponse], errResp azfake.ErrorResponder)

	// WithAsync is the fake for method SpecialWordsParametersClient.WithAsync
	// HTTP status codes to indicate success: http.StatusNoContent
	WithAsync func(ctx context.Context, async string, options *specialwordsgroup.SpecialWordsParametersClientWithAsyncOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithAsyncResponse], errResp azfake.ErrorResponder)

	// WithAwait is the fake for method SpecialWordsParametersClient.WithAwait
	// HTTP status codes to indicate success: http.StatusNoContent
	WithAwait func(ctx context.Context, await string, options *specialwordsgroup.SpecialWordsParametersClientWithAwaitOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithAwaitResponse], errResp azfake.ErrorResponder)

	// WithBreak is the fake for method SpecialWordsParametersClient.WithBreak
	// HTTP status codes to indicate success: http.StatusNoContent
	WithBreak func(ctx context.Context, breakParam string, options *specialwordsgroup.SpecialWordsParametersClientWithBreakOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithBreakResponse], errResp azfake.ErrorResponder)

	// WithCancellationToken is the fake for method SpecialWordsParametersClient.WithCancellationToken
	// HTTP status codes to indicate success: http.StatusNoContent
	WithCancellationToken func(ctx context.Context, cancellationToken string, options *specialwordsgroup.SpecialWordsParametersClientWithCancellationTokenOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithCancellationTokenResponse], errResp azfake.ErrorResponder)

	// WithClass is the fake for method SpecialWordsParametersClient.WithClass
	// HTTP status codes to indicate success: http.StatusNoContent
	WithClass func(ctx context.Context, class string, options *specialwordsgroup.SpecialWordsParametersClientWithClassOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithClassResponse], errResp azfake.ErrorResponder)

	// WithConstructor is the fake for method SpecialWordsParametersClient.WithConstructor
	// HTTP status codes to indicate success: http.StatusNoContent
	WithConstructor func(ctx context.Context, constructor string, options *specialwordsgroup.SpecialWordsParametersClientWithConstructorOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithConstructorResponse], errResp azfake.ErrorResponder)

	// WithContinue is the fake for method SpecialWordsParametersClient.WithContinue
	// HTTP status codes to indicate success: http.StatusNoContent
	WithContinue func(ctx context.Context, continueParam string, options *specialwordsgroup.SpecialWordsParametersClientWithContinueOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithContinueResponse], errResp azfake.ErrorResponder)

	// WithDef is the fake for method SpecialWordsParametersClient.WithDef
	// HTTP status codes to indicate success: http.StatusNoContent
	WithDef func(ctx context.Context, def string, options *specialwordsgroup.SpecialWordsParametersClientWithDefOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithDefResponse], errResp azfake.ErrorResponder)

	// WithDel is the fake for method SpecialWordsParametersClient.WithDel
	// HTTP status codes to indicate success: http.StatusNoContent
	WithDel func(ctx context.Context, del string, options *specialwordsgroup.SpecialWordsParametersClientWithDelOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithDelResponse], errResp azfake.ErrorResponder)

	// WithElif is the fake for method SpecialWordsParametersClient.WithElif
	// HTTP status codes to indicate success: http.StatusNoContent
	WithElif func(ctx context.Context, elif string, options *specialwordsgroup.SpecialWordsParametersClientWithElifOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithElifResponse], errResp azfake.ErrorResponder)

	// WithElse is the fake for method SpecialWordsParametersClient.WithElse
	// HTTP status codes to indicate success: http.StatusNoContent
	WithElse func(ctx context.Context, elseParam string, options *specialwordsgroup.SpecialWordsParametersClientWithElseOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithElseResponse], errResp azfake.ErrorResponder)

	// WithExcept is the fake for method SpecialWordsParametersClient.WithExcept
	// HTTP status codes to indicate success: http.StatusNoContent
	WithExcept func(ctx context.Context, except string, options *specialwordsgroup.SpecialWordsParametersClientWithExceptOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithExceptResponse], errResp azfake.ErrorResponder)

	// WithExec is the fake for method SpecialWordsParametersClient.WithExec
	// HTTP status codes to indicate success: http.StatusNoContent
	WithExec func(ctx context.Context, execParam string, options *specialwordsgroup.SpecialWordsParametersClientWithExecOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithExecResponse], errResp azfake.ErrorResponder)

	// WithFinally is the fake for method SpecialWordsParametersClient.WithFinally
	// HTTP status codes to indicate success: http.StatusNoContent
	WithFinally func(ctx context.Context, finally string, options *specialwordsgroup.SpecialWordsParametersClientWithFinallyOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithFinallyResponse], errResp azfake.ErrorResponder)

	// WithFor is the fake for method SpecialWordsParametersClient.WithFor
	// HTTP status codes to indicate success: http.StatusNoContent
	WithFor func(ctx context.Context, forParam string, options *specialwordsgroup.SpecialWordsParametersClientWithForOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithForResponse], errResp azfake.ErrorResponder)

	// WithFrom is the fake for method SpecialWordsParametersClient.WithFrom
	// HTTP status codes to indicate success: http.StatusNoContent
	WithFrom func(ctx context.Context, from string, options *specialwordsgroup.SpecialWordsParametersClientWithFromOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithFromResponse], errResp azfake.ErrorResponder)

	// WithGlobal is the fake for method SpecialWordsParametersClient.WithGlobal
	// HTTP status codes to indicate success: http.StatusNoContent
	WithGlobal func(ctx context.Context, global string, options *specialwordsgroup.SpecialWordsParametersClientWithGlobalOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithGlobalResponse], errResp azfake.ErrorResponder)

	// WithIf is the fake for method SpecialWordsParametersClient.WithIf
	// HTTP status codes to indicate success: http.StatusNoContent
	WithIf func(ctx context.Context, ifParam string, options *specialwordsgroup.SpecialWordsParametersClientWithIfOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithIfResponse], errResp azfake.ErrorResponder)

	// WithImport is the fake for method SpecialWordsParametersClient.WithImport
	// HTTP status codes to indicate success: http.StatusNoContent
	WithImport func(ctx context.Context, importParam string, options *specialwordsgroup.SpecialWordsParametersClientWithImportOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithImportResponse], errResp azfake.ErrorResponder)

	// WithIn is the fake for method SpecialWordsParametersClient.WithIn
	// HTTP status codes to indicate success: http.StatusNoContent
	WithIn func(ctx context.Context, in string, options *specialwordsgroup.SpecialWordsParametersClientWithInOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithInResponse], errResp azfake.ErrorResponder)

	// WithIs is the fake for method SpecialWordsParametersClient.WithIs
	// HTTP status codes to indicate success: http.StatusNoContent
	WithIs func(ctx context.Context, is string, options *specialwordsgroup.SpecialWordsParametersClientWithIsOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithIsResponse], errResp azfake.ErrorResponder)

	// WithLambda is the fake for method SpecialWordsParametersClient.WithLambda
	// HTTP status codes to indicate success: http.StatusNoContent
	WithLambda func(ctx context.Context, lambda string, options *specialwordsgroup.SpecialWordsParametersClientWithLambdaOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithLambdaResponse], errResp azfake.ErrorResponder)

	// WithNot is the fake for method SpecialWordsParametersClient.WithNot
	// HTTP status codes to indicate success: http.StatusNoContent
	WithNot func(ctx context.Context, not string, options *specialwordsgroup.SpecialWordsParametersClientWithNotOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithNotResponse], errResp azfake.ErrorResponder)

	// WithOr is the fake for method SpecialWordsParametersClient.WithOr
	// HTTP status codes to indicate success: http.StatusNoContent
	WithOr func(ctx context.Context, or string, options *specialwordsgroup.SpecialWordsParametersClientWithOrOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithOrResponse], errResp azfake.ErrorResponder)

	// WithPass is the fake for method SpecialWordsParametersClient.WithPass
	// HTTP status codes to indicate success: http.StatusNoContent
	WithPass func(ctx context.Context, pass string, options *specialwordsgroup.SpecialWordsParametersClientWithPassOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithPassResponse], errResp azfake.ErrorResponder)

	// WithRaise is the fake for method SpecialWordsParametersClient.WithRaise
	// HTTP status codes to indicate success: http.StatusNoContent
	WithRaise func(ctx context.Context, raise string, options *specialwordsgroup.SpecialWordsParametersClientWithRaiseOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithRaiseResponse], errResp azfake.ErrorResponder)

	// WithReturn is the fake for method SpecialWordsParametersClient.WithReturn
	// HTTP status codes to indicate success: http.StatusNoContent
	WithReturn func(ctx context.Context, returnParam string, options *specialwordsgroup.SpecialWordsParametersClientWithReturnOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithReturnResponse], errResp azfake.ErrorResponder)

	// WithTry is the fake for method SpecialWordsParametersClient.WithTry
	// HTTP status codes to indicate success: http.StatusNoContent
	WithTry func(ctx context.Context, try string, options *specialwordsgroup.SpecialWordsParametersClientWithTryOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithTryResponse], errResp azfake.ErrorResponder)

	// WithWhile is the fake for method SpecialWordsParametersClient.WithWhile
	// HTTP status codes to indicate success: http.StatusNoContent
	WithWhile func(ctx context.Context, while string, options *specialwordsgroup.SpecialWordsParametersClientWithWhileOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithWhileResponse], errResp azfake.ErrorResponder)

	// WithWith is the fake for method SpecialWordsParametersClient.WithWith
	// HTTP status codes to indicate success: http.StatusNoContent
	WithWith func(ctx context.Context, with string, options *specialwordsgroup.SpecialWordsParametersClientWithWithOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithWithResponse], errResp azfake.ErrorResponder)

	// WithYield is the fake for method SpecialWordsParametersClient.WithYield
	// HTTP status codes to indicate success: http.StatusNoContent
	WithYield func(ctx context.Context, yield string, options *specialwordsgroup.SpecialWordsParametersClientWithYieldOptions) (resp azfake.Responder[specialwordsgroup.SpecialWordsParametersClientWithYieldResponse], errResp azfake.ErrorResponder)
}

// NewSpecialWordsParametersServerTransport creates a new instance of SpecialWordsParametersServerTransport with the provided implementation.
// The returned SpecialWordsParametersServerTransport instance is connected to an instance of specialwordsgroup.SpecialWordsParametersClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSpecialWordsParametersServerTransport(srv *SpecialWordsParametersServer) *SpecialWordsParametersServerTransport {
	return &SpecialWordsParametersServerTransport{srv: srv}
}

// SpecialWordsParametersServerTransport connects instances of specialwordsgroup.SpecialWordsParametersClient to instances of SpecialWordsParametersServer.
// Don't use this type directly, use NewSpecialWordsParametersServerTransport instead.
type SpecialWordsParametersServerTransport struct {
	srv *SpecialWordsParametersServer
}

// Do implements the policy.Transporter interface for SpecialWordsParametersServerTransport.
func (s *SpecialWordsParametersServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToMethodFake(req, method)
}

func (s *SpecialWordsParametersServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "SpecialWordsParametersClient.WithAnd":
		resp, err = s.dispatchWithAnd(req)
	case "SpecialWordsParametersClient.WithAs":
		resp, err = s.dispatchWithAs(req)
	case "SpecialWordsParametersClient.WithAssert":
		resp, err = s.dispatchWithAssert(req)
	case "SpecialWordsParametersClient.WithAsync":
		resp, err = s.dispatchWithAsync(req)
	case "SpecialWordsParametersClient.WithAwait":
		resp, err = s.dispatchWithAwait(req)
	case "SpecialWordsParametersClient.WithBreak":
		resp, err = s.dispatchWithBreak(req)
	case "SpecialWordsParametersClient.WithCancellationToken":
		resp, err = s.dispatchWithCancellationToken(req)
	case "SpecialWordsParametersClient.WithClass":
		resp, err = s.dispatchWithClass(req)
	case "SpecialWordsParametersClient.WithConstructor":
		resp, err = s.dispatchWithConstructor(req)
	case "SpecialWordsParametersClient.WithContinue":
		resp, err = s.dispatchWithContinue(req)
	case "SpecialWordsParametersClient.WithDef":
		resp, err = s.dispatchWithDef(req)
	case "SpecialWordsParametersClient.WithDel":
		resp, err = s.dispatchWithDel(req)
	case "SpecialWordsParametersClient.WithElif":
		resp, err = s.dispatchWithElif(req)
	case "SpecialWordsParametersClient.WithElse":
		resp, err = s.dispatchWithElse(req)
	case "SpecialWordsParametersClient.WithExcept":
		resp, err = s.dispatchWithExcept(req)
	case "SpecialWordsParametersClient.WithExec":
		resp, err = s.dispatchWithExec(req)
	case "SpecialWordsParametersClient.WithFinally":
		resp, err = s.dispatchWithFinally(req)
	case "SpecialWordsParametersClient.WithFor":
		resp, err = s.dispatchWithFor(req)
	case "SpecialWordsParametersClient.WithFrom":
		resp, err = s.dispatchWithFrom(req)
	case "SpecialWordsParametersClient.WithGlobal":
		resp, err = s.dispatchWithGlobal(req)
	case "SpecialWordsParametersClient.WithIf":
		resp, err = s.dispatchWithIf(req)
	case "SpecialWordsParametersClient.WithImport":
		resp, err = s.dispatchWithImport(req)
	case "SpecialWordsParametersClient.WithIn":
		resp, err = s.dispatchWithIn(req)
	case "SpecialWordsParametersClient.WithIs":
		resp, err = s.dispatchWithIs(req)
	case "SpecialWordsParametersClient.WithLambda":
		resp, err = s.dispatchWithLambda(req)
	case "SpecialWordsParametersClient.WithNot":
		resp, err = s.dispatchWithNot(req)
	case "SpecialWordsParametersClient.WithOr":
		resp, err = s.dispatchWithOr(req)
	case "SpecialWordsParametersClient.WithPass":
		resp, err = s.dispatchWithPass(req)
	case "SpecialWordsParametersClient.WithRaise":
		resp, err = s.dispatchWithRaise(req)
	case "SpecialWordsParametersClient.WithReturn":
		resp, err = s.dispatchWithReturn(req)
	case "SpecialWordsParametersClient.WithTry":
		resp, err = s.dispatchWithTry(req)
	case "SpecialWordsParametersClient.WithWhile":
		resp, err = s.dispatchWithWhile(req)
	case "SpecialWordsParametersClient.WithWith":
		resp, err = s.dispatchWithWith(req)
	case "SpecialWordsParametersClient.WithYield":
		resp, err = s.dispatchWithYield(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (s *SpecialWordsParametersServerTransport) dispatchWithAnd(req *http.Request) (*http.Response, error) {
	if s.srv.WithAnd == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithAnd not implemented")}
	}
	qp := req.URL.Query()
	andParam, err := url.QueryUnescape(qp.Get("and"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithAnd(req.Context(), andParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithAs(req *http.Request) (*http.Response, error) {
	if s.srv.WithAs == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithAs not implemented")}
	}
	qp := req.URL.Query()
	asParam, err := url.QueryUnescape(qp.Get("as"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithAs(req.Context(), asParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithAssert(req *http.Request) (*http.Response, error) {
	if s.srv.WithAssert == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithAssert not implemented")}
	}
	qp := req.URL.Query()
	assertParam, err := url.QueryUnescape(qp.Get("assert"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithAssert(req.Context(), assertParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithAsync(req *http.Request) (*http.Response, error) {
	if s.srv.WithAsync == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithAsync not implemented")}
	}
	qp := req.URL.Query()
	asyncParam, err := url.QueryUnescape(qp.Get("async"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithAsync(req.Context(), asyncParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithAwait(req *http.Request) (*http.Response, error) {
	if s.srv.WithAwait == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithAwait not implemented")}
	}
	qp := req.URL.Query()
	awaitParam, err := url.QueryUnescape(qp.Get("await"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithAwait(req.Context(), awaitParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithBreak(req *http.Request) (*http.Response, error) {
	if s.srv.WithBreak == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithBreak not implemented")}
	}
	qp := req.URL.Query()
	breakParamParam, err := url.QueryUnescape(qp.Get("break"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithBreak(req.Context(), breakParamParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithCancellationToken(req *http.Request) (*http.Response, error) {
	if s.srv.WithCancellationToken == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithCancellationToken not implemented")}
	}
	qp := req.URL.Query()
	cancellationTokenParam, err := url.QueryUnescape(qp.Get("cancellationToken"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithCancellationToken(req.Context(), cancellationTokenParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithClass(req *http.Request) (*http.Response, error) {
	if s.srv.WithClass == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithClass not implemented")}
	}
	qp := req.URL.Query()
	classParam, err := url.QueryUnescape(qp.Get("class"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithClass(req.Context(), classParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithConstructor(req *http.Request) (*http.Response, error) {
	if s.srv.WithConstructor == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithConstructor not implemented")}
	}
	qp := req.URL.Query()
	constructorParam, err := url.QueryUnescape(qp.Get("constructor"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithConstructor(req.Context(), constructorParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithContinue(req *http.Request) (*http.Response, error) {
	if s.srv.WithContinue == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithContinue not implemented")}
	}
	qp := req.URL.Query()
	continueParamParam, err := url.QueryUnescape(qp.Get("continue"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithContinue(req.Context(), continueParamParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithDef(req *http.Request) (*http.Response, error) {
	if s.srv.WithDef == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithDef not implemented")}
	}
	qp := req.URL.Query()
	defParam, err := url.QueryUnescape(qp.Get("def"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithDef(req.Context(), defParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithDel(req *http.Request) (*http.Response, error) {
	if s.srv.WithDel == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithDel not implemented")}
	}
	qp := req.URL.Query()
	delParam, err := url.QueryUnescape(qp.Get("del"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithDel(req.Context(), delParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithElif(req *http.Request) (*http.Response, error) {
	if s.srv.WithElif == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithElif not implemented")}
	}
	qp := req.URL.Query()
	elifParam, err := url.QueryUnescape(qp.Get("elif"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithElif(req.Context(), elifParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithElse(req *http.Request) (*http.Response, error) {
	if s.srv.WithElse == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithElse not implemented")}
	}
	qp := req.URL.Query()
	elseParamParam, err := url.QueryUnescape(qp.Get("else"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithElse(req.Context(), elseParamParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithExcept(req *http.Request) (*http.Response, error) {
	if s.srv.WithExcept == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithExcept not implemented")}
	}
	qp := req.URL.Query()
	exceptParam, err := url.QueryUnescape(qp.Get("except"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithExcept(req.Context(), exceptParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithExec(req *http.Request) (*http.Response, error) {
	if s.srv.WithExec == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithExec not implemented")}
	}
	qp := req.URL.Query()
	execParamParam, err := url.QueryUnescape(qp.Get("exec"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithExec(req.Context(), execParamParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithFinally(req *http.Request) (*http.Response, error) {
	if s.srv.WithFinally == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithFinally not implemented")}
	}
	qp := req.URL.Query()
	finallyParam, err := url.QueryUnescape(qp.Get("finally"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithFinally(req.Context(), finallyParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithFor(req *http.Request) (*http.Response, error) {
	if s.srv.WithFor == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithFor not implemented")}
	}
	qp := req.URL.Query()
	forParamParam, err := url.QueryUnescape(qp.Get("for"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithFor(req.Context(), forParamParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithFrom(req *http.Request) (*http.Response, error) {
	if s.srv.WithFrom == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithFrom not implemented")}
	}
	qp := req.URL.Query()
	fromParam, err := url.QueryUnescape(qp.Get("from"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithFrom(req.Context(), fromParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithGlobal(req *http.Request) (*http.Response, error) {
	if s.srv.WithGlobal == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithGlobal not implemented")}
	}
	qp := req.URL.Query()
	globalParam, err := url.QueryUnescape(qp.Get("global"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithGlobal(req.Context(), globalParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithIf(req *http.Request) (*http.Response, error) {
	if s.srv.WithIf == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithIf not implemented")}
	}
	qp := req.URL.Query()
	ifParamParam, err := url.QueryUnescape(qp.Get("if"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithIf(req.Context(), ifParamParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithImport(req *http.Request) (*http.Response, error) {
	if s.srv.WithImport == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithImport not implemented")}
	}
	qp := req.URL.Query()
	importParamParam, err := url.QueryUnescape(qp.Get("import"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithImport(req.Context(), importParamParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithIn(req *http.Request) (*http.Response, error) {
	if s.srv.WithIn == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithIn not implemented")}
	}
	qp := req.URL.Query()
	inParam, err := url.QueryUnescape(qp.Get("in"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithIn(req.Context(), inParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithIs(req *http.Request) (*http.Response, error) {
	if s.srv.WithIs == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithIs not implemented")}
	}
	qp := req.URL.Query()
	isParam, err := url.QueryUnescape(qp.Get("is"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithIs(req.Context(), isParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithLambda(req *http.Request) (*http.Response, error) {
	if s.srv.WithLambda == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithLambda not implemented")}
	}
	qp := req.URL.Query()
	lambdaParam, err := url.QueryUnescape(qp.Get("lambda"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithLambda(req.Context(), lambdaParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithNot(req *http.Request) (*http.Response, error) {
	if s.srv.WithNot == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithNot not implemented")}
	}
	qp := req.URL.Query()
	notParam, err := url.QueryUnescape(qp.Get("not"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithNot(req.Context(), notParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithOr(req *http.Request) (*http.Response, error) {
	if s.srv.WithOr == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithOr not implemented")}
	}
	qp := req.URL.Query()
	orParam, err := url.QueryUnescape(qp.Get("or"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithOr(req.Context(), orParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithPass(req *http.Request) (*http.Response, error) {
	if s.srv.WithPass == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithPass not implemented")}
	}
	qp := req.URL.Query()
	passParam, err := url.QueryUnescape(qp.Get("pass"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithPass(req.Context(), passParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithRaise(req *http.Request) (*http.Response, error) {
	if s.srv.WithRaise == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithRaise not implemented")}
	}
	qp := req.URL.Query()
	raiseParam, err := url.QueryUnescape(qp.Get("raise"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithRaise(req.Context(), raiseParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithReturn(req *http.Request) (*http.Response, error) {
	if s.srv.WithReturn == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithReturn not implemented")}
	}
	qp := req.URL.Query()
	returnParamParam, err := url.QueryUnescape(qp.Get("return"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithReturn(req.Context(), returnParamParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithTry(req *http.Request) (*http.Response, error) {
	if s.srv.WithTry == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithTry not implemented")}
	}
	qp := req.URL.Query()
	tryParam, err := url.QueryUnescape(qp.Get("try"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithTry(req.Context(), tryParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithWhile(req *http.Request) (*http.Response, error) {
	if s.srv.WithWhile == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithWhile not implemented")}
	}
	qp := req.URL.Query()
	whileParam, err := url.QueryUnescape(qp.Get("while"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithWhile(req.Context(), whileParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithWith(req *http.Request) (*http.Response, error) {
	if s.srv.WithWith == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithWith not implemented")}
	}
	qp := req.URL.Query()
	withParam, err := url.QueryUnescape(qp.Get("with"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithWith(req.Context(), withParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SpecialWordsParametersServerTransport) dispatchWithYield(req *http.Request) (*http.Response, error) {
	if s.srv.WithYield == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithYield not implemented")}
	}
	qp := req.URL.Query()
	yieldParam, err := url.QueryUnescape(qp.Get("yield"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.WithYield(req.Context(), yieldParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
