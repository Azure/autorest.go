// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"specialwordsgroup"
)

// ParametersServer is a fake server for instances of the specialwordsgroup.ParametersClient type.
type ParametersServer struct {
	// WithAnd is the fake for method ParametersClient.WithAnd
	// HTTP status codes to indicate success: http.StatusNoContent
	WithAnd func(ctx context.Context, and string, options *specialwordsgroup.ParametersClientWithAndOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithAndResponse], errResp azfake.ErrorResponder)

	// WithAs is the fake for method ParametersClient.WithAs
	// HTTP status codes to indicate success: http.StatusNoContent
	WithAs func(ctx context.Context, as string, options *specialwordsgroup.ParametersClientWithAsOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithAsResponse], errResp azfake.ErrorResponder)

	// WithAssert is the fake for method ParametersClient.WithAssert
	// HTTP status codes to indicate success: http.StatusNoContent
	WithAssert func(ctx context.Context, assert string, options *specialwordsgroup.ParametersClientWithAssertOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithAssertResponse], errResp azfake.ErrorResponder)

	// WithAsync is the fake for method ParametersClient.WithAsync
	// HTTP status codes to indicate success: http.StatusNoContent
	WithAsync func(ctx context.Context, async string, options *specialwordsgroup.ParametersClientWithAsyncOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithAsyncResponse], errResp azfake.ErrorResponder)

	// WithAwait is the fake for method ParametersClient.WithAwait
	// HTTP status codes to indicate success: http.StatusNoContent
	WithAwait func(ctx context.Context, await string, options *specialwordsgroup.ParametersClientWithAwaitOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithAwaitResponse], errResp azfake.ErrorResponder)

	// WithBreak is the fake for method ParametersClient.WithBreak
	// HTTP status codes to indicate success: http.StatusNoContent
	WithBreak func(ctx context.Context, breakParam string, options *specialwordsgroup.ParametersClientWithBreakOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithBreakResponse], errResp azfake.ErrorResponder)

	// WithCancellationToken is the fake for method ParametersClient.WithCancellationToken
	// HTTP status codes to indicate success: http.StatusNoContent
	WithCancellationToken func(ctx context.Context, cancellationToken string, options *specialwordsgroup.ParametersClientWithCancellationTokenOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithCancellationTokenResponse], errResp azfake.ErrorResponder)

	// WithClass is the fake for method ParametersClient.WithClass
	// HTTP status codes to indicate success: http.StatusNoContent
	WithClass func(ctx context.Context, class string, options *specialwordsgroup.ParametersClientWithClassOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithClassResponse], errResp azfake.ErrorResponder)

	// WithConstructor is the fake for method ParametersClient.WithConstructor
	// HTTP status codes to indicate success: http.StatusNoContent
	WithConstructor func(ctx context.Context, constructor string, options *specialwordsgroup.ParametersClientWithConstructorOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithConstructorResponse], errResp azfake.ErrorResponder)

	// WithContinue is the fake for method ParametersClient.WithContinue
	// HTTP status codes to indicate success: http.StatusNoContent
	WithContinue func(ctx context.Context, continueParam string, options *specialwordsgroup.ParametersClientWithContinueOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithContinueResponse], errResp azfake.ErrorResponder)

	// WithDef is the fake for method ParametersClient.WithDef
	// HTTP status codes to indicate success: http.StatusNoContent
	WithDef func(ctx context.Context, def string, options *specialwordsgroup.ParametersClientWithDefOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithDefResponse], errResp azfake.ErrorResponder)

	// WithDel is the fake for method ParametersClient.WithDel
	// HTTP status codes to indicate success: http.StatusNoContent
	WithDel func(ctx context.Context, del string, options *specialwordsgroup.ParametersClientWithDelOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithDelResponse], errResp azfake.ErrorResponder)

	// WithElif is the fake for method ParametersClient.WithElif
	// HTTP status codes to indicate success: http.StatusNoContent
	WithElif func(ctx context.Context, elif string, options *specialwordsgroup.ParametersClientWithElifOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithElifResponse], errResp azfake.ErrorResponder)

	// WithElse is the fake for method ParametersClient.WithElse
	// HTTP status codes to indicate success: http.StatusNoContent
	WithElse func(ctx context.Context, elseParam string, options *specialwordsgroup.ParametersClientWithElseOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithElseResponse], errResp azfake.ErrorResponder)

	// WithExcept is the fake for method ParametersClient.WithExcept
	// HTTP status codes to indicate success: http.StatusNoContent
	WithExcept func(ctx context.Context, except string, options *specialwordsgroup.ParametersClientWithExceptOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithExceptResponse], errResp azfake.ErrorResponder)

	// WithExec is the fake for method ParametersClient.WithExec
	// HTTP status codes to indicate success: http.StatusNoContent
	WithExec func(ctx context.Context, execParam string, options *specialwordsgroup.ParametersClientWithExecOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithExecResponse], errResp azfake.ErrorResponder)

	// WithFinally is the fake for method ParametersClient.WithFinally
	// HTTP status codes to indicate success: http.StatusNoContent
	WithFinally func(ctx context.Context, finally string, options *specialwordsgroup.ParametersClientWithFinallyOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithFinallyResponse], errResp azfake.ErrorResponder)

	// WithFor is the fake for method ParametersClient.WithFor
	// HTTP status codes to indicate success: http.StatusNoContent
	WithFor func(ctx context.Context, forParam string, options *specialwordsgroup.ParametersClientWithForOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithForResponse], errResp azfake.ErrorResponder)

	// WithFrom is the fake for method ParametersClient.WithFrom
	// HTTP status codes to indicate success: http.StatusNoContent
	WithFrom func(ctx context.Context, from string, options *specialwordsgroup.ParametersClientWithFromOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithFromResponse], errResp azfake.ErrorResponder)

	// WithGlobal is the fake for method ParametersClient.WithGlobal
	// HTTP status codes to indicate success: http.StatusNoContent
	WithGlobal func(ctx context.Context, global string, options *specialwordsgroup.ParametersClientWithGlobalOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithGlobalResponse], errResp azfake.ErrorResponder)

	// WithIf is the fake for method ParametersClient.WithIf
	// HTTP status codes to indicate success: http.StatusNoContent
	WithIf func(ctx context.Context, ifParam string, options *specialwordsgroup.ParametersClientWithIfOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithIfResponse], errResp azfake.ErrorResponder)

	// WithImport is the fake for method ParametersClient.WithImport
	// HTTP status codes to indicate success: http.StatusNoContent
	WithImport func(ctx context.Context, importParam string, options *specialwordsgroup.ParametersClientWithImportOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithImportResponse], errResp azfake.ErrorResponder)

	// WithIn is the fake for method ParametersClient.WithIn
	// HTTP status codes to indicate success: http.StatusNoContent
	WithIn func(ctx context.Context, in string, options *specialwordsgroup.ParametersClientWithInOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithInResponse], errResp azfake.ErrorResponder)

	// WithIs is the fake for method ParametersClient.WithIs
	// HTTP status codes to indicate success: http.StatusNoContent
	WithIs func(ctx context.Context, is string, options *specialwordsgroup.ParametersClientWithIsOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithIsResponse], errResp azfake.ErrorResponder)

	// WithLambda is the fake for method ParametersClient.WithLambda
	// HTTP status codes to indicate success: http.StatusNoContent
	WithLambda func(ctx context.Context, lambda string, options *specialwordsgroup.ParametersClientWithLambdaOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithLambdaResponse], errResp azfake.ErrorResponder)

	// WithNot is the fake for method ParametersClient.WithNot
	// HTTP status codes to indicate success: http.StatusNoContent
	WithNot func(ctx context.Context, not string, options *specialwordsgroup.ParametersClientWithNotOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithNotResponse], errResp azfake.ErrorResponder)

	// WithOr is the fake for method ParametersClient.WithOr
	// HTTP status codes to indicate success: http.StatusNoContent
	WithOr func(ctx context.Context, or string, options *specialwordsgroup.ParametersClientWithOrOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithOrResponse], errResp azfake.ErrorResponder)

	// WithPass is the fake for method ParametersClient.WithPass
	// HTTP status codes to indicate success: http.StatusNoContent
	WithPass func(ctx context.Context, pass string, options *specialwordsgroup.ParametersClientWithPassOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithPassResponse], errResp azfake.ErrorResponder)

	// WithRaise is the fake for method ParametersClient.WithRaise
	// HTTP status codes to indicate success: http.StatusNoContent
	WithRaise func(ctx context.Context, raise string, options *specialwordsgroup.ParametersClientWithRaiseOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithRaiseResponse], errResp azfake.ErrorResponder)

	// WithReturn is the fake for method ParametersClient.WithReturn
	// HTTP status codes to indicate success: http.StatusNoContent
	WithReturn func(ctx context.Context, returnParam string, options *specialwordsgroup.ParametersClientWithReturnOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithReturnResponse], errResp azfake.ErrorResponder)

	// WithTry is the fake for method ParametersClient.WithTry
	// HTTP status codes to indicate success: http.StatusNoContent
	WithTry func(ctx context.Context, try string, options *specialwordsgroup.ParametersClientWithTryOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithTryResponse], errResp azfake.ErrorResponder)

	// WithWhile is the fake for method ParametersClient.WithWhile
	// HTTP status codes to indicate success: http.StatusNoContent
	WithWhile func(ctx context.Context, while string, options *specialwordsgroup.ParametersClientWithWhileOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithWhileResponse], errResp azfake.ErrorResponder)

	// WithWith is the fake for method ParametersClient.WithWith
	// HTTP status codes to indicate success: http.StatusNoContent
	WithWith func(ctx context.Context, with string, options *specialwordsgroup.ParametersClientWithWithOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithWithResponse], errResp azfake.ErrorResponder)

	// WithYield is the fake for method ParametersClient.WithYield
	// HTTP status codes to indicate success: http.StatusNoContent
	WithYield func(ctx context.Context, yield string, options *specialwordsgroup.ParametersClientWithYieldOptions) (resp azfake.Responder[specialwordsgroup.ParametersClientWithYieldResponse], errResp azfake.ErrorResponder)
}

// NewParametersServerTransport creates a new instance of ParametersServerTransport with the provided implementation.
// The returned ParametersServerTransport instance is connected to an instance of specialwordsgroup.ParametersClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewParametersServerTransport(srv *ParametersServer) *ParametersServerTransport {
	return &ParametersServerTransport{srv: srv}
}

// ParametersServerTransport connects instances of specialwordsgroup.ParametersClient to instances of ParametersServer.
// Don't use this type directly, use NewParametersServerTransport instead.
type ParametersServerTransport struct {
	srv *ParametersServer
}

// Do implements the policy.Transporter interface for ParametersServerTransport.
func (p *ParametersServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "ParametersClient.WithAnd":
		resp, err = p.dispatchWithAnd(req)
	case "ParametersClient.WithAs":
		resp, err = p.dispatchWithAs(req)
	case "ParametersClient.WithAssert":
		resp, err = p.dispatchWithAssert(req)
	case "ParametersClient.WithAsync":
		resp, err = p.dispatchWithAsync(req)
	case "ParametersClient.WithAwait":
		resp, err = p.dispatchWithAwait(req)
	case "ParametersClient.WithBreak":
		resp, err = p.dispatchWithBreak(req)
	case "ParametersClient.WithCancellationToken":
		resp, err = p.dispatchWithCancellationToken(req)
	case "ParametersClient.WithClass":
		resp, err = p.dispatchWithClass(req)
	case "ParametersClient.WithConstructor":
		resp, err = p.dispatchWithConstructor(req)
	case "ParametersClient.WithContinue":
		resp, err = p.dispatchWithContinue(req)
	case "ParametersClient.WithDef":
		resp, err = p.dispatchWithDef(req)
	case "ParametersClient.WithDel":
		resp, err = p.dispatchWithDel(req)
	case "ParametersClient.WithElif":
		resp, err = p.dispatchWithElif(req)
	case "ParametersClient.WithElse":
		resp, err = p.dispatchWithElse(req)
	case "ParametersClient.WithExcept":
		resp, err = p.dispatchWithExcept(req)
	case "ParametersClient.WithExec":
		resp, err = p.dispatchWithExec(req)
	case "ParametersClient.WithFinally":
		resp, err = p.dispatchWithFinally(req)
	case "ParametersClient.WithFor":
		resp, err = p.dispatchWithFor(req)
	case "ParametersClient.WithFrom":
		resp, err = p.dispatchWithFrom(req)
	case "ParametersClient.WithGlobal":
		resp, err = p.dispatchWithGlobal(req)
	case "ParametersClient.WithIf":
		resp, err = p.dispatchWithIf(req)
	case "ParametersClient.WithImport":
		resp, err = p.dispatchWithImport(req)
	case "ParametersClient.WithIn":
		resp, err = p.dispatchWithIn(req)
	case "ParametersClient.WithIs":
		resp, err = p.dispatchWithIs(req)
	case "ParametersClient.WithLambda":
		resp, err = p.dispatchWithLambda(req)
	case "ParametersClient.WithNot":
		resp, err = p.dispatchWithNot(req)
	case "ParametersClient.WithOr":
		resp, err = p.dispatchWithOr(req)
	case "ParametersClient.WithPass":
		resp, err = p.dispatchWithPass(req)
	case "ParametersClient.WithRaise":
		resp, err = p.dispatchWithRaise(req)
	case "ParametersClient.WithReturn":
		resp, err = p.dispatchWithReturn(req)
	case "ParametersClient.WithTry":
		resp, err = p.dispatchWithTry(req)
	case "ParametersClient.WithWhile":
		resp, err = p.dispatchWithWhile(req)
	case "ParametersClient.WithWith":
		resp, err = p.dispatchWithWith(req)
	case "ParametersClient.WithYield":
		resp, err = p.dispatchWithYield(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithAnd(req *http.Request) (*http.Response, error) {
	if p.srv.WithAnd == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithAnd not implemented")}
	}
	qp := req.URL.Query()
	andParam, err := url.QueryUnescape(qp.Get("and"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithAnd(req.Context(), andParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithAs(req *http.Request) (*http.Response, error) {
	if p.srv.WithAs == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithAs not implemented")}
	}
	qp := req.URL.Query()
	asParam, err := url.QueryUnescape(qp.Get("as"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithAs(req.Context(), asParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithAssert(req *http.Request) (*http.Response, error) {
	if p.srv.WithAssert == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithAssert not implemented")}
	}
	qp := req.URL.Query()
	assertParam, err := url.QueryUnescape(qp.Get("assert"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithAssert(req.Context(), assertParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithAsync(req *http.Request) (*http.Response, error) {
	if p.srv.WithAsync == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithAsync not implemented")}
	}
	qp := req.URL.Query()
	asyncParam, err := url.QueryUnescape(qp.Get("async"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithAsync(req.Context(), asyncParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithAwait(req *http.Request) (*http.Response, error) {
	if p.srv.WithAwait == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithAwait not implemented")}
	}
	qp := req.URL.Query()
	awaitParam, err := url.QueryUnescape(qp.Get("await"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithAwait(req.Context(), awaitParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithBreak(req *http.Request) (*http.Response, error) {
	if p.srv.WithBreak == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithBreak not implemented")}
	}
	qp := req.URL.Query()
	breakParamParam, err := url.QueryUnescape(qp.Get("break"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithBreak(req.Context(), breakParamParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithCancellationToken(req *http.Request) (*http.Response, error) {
	if p.srv.WithCancellationToken == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithCancellationToken not implemented")}
	}
	qp := req.URL.Query()
	cancellationTokenParam, err := url.QueryUnescape(qp.Get("cancellationToken"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithCancellationToken(req.Context(), cancellationTokenParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithClass(req *http.Request) (*http.Response, error) {
	if p.srv.WithClass == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithClass not implemented")}
	}
	qp := req.URL.Query()
	classParam, err := url.QueryUnescape(qp.Get("class"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithClass(req.Context(), classParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithConstructor(req *http.Request) (*http.Response, error) {
	if p.srv.WithConstructor == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithConstructor not implemented")}
	}
	qp := req.URL.Query()
	constructorParam, err := url.QueryUnescape(qp.Get("constructor"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithConstructor(req.Context(), constructorParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithContinue(req *http.Request) (*http.Response, error) {
	if p.srv.WithContinue == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithContinue not implemented")}
	}
	qp := req.URL.Query()
	continueParamParam, err := url.QueryUnescape(qp.Get("continue"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithContinue(req.Context(), continueParamParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithDef(req *http.Request) (*http.Response, error) {
	if p.srv.WithDef == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithDef not implemented")}
	}
	qp := req.URL.Query()
	defParam, err := url.QueryUnescape(qp.Get("def"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithDef(req.Context(), defParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithDel(req *http.Request) (*http.Response, error) {
	if p.srv.WithDel == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithDel not implemented")}
	}
	qp := req.URL.Query()
	delParam, err := url.QueryUnescape(qp.Get("del"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithDel(req.Context(), delParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithElif(req *http.Request) (*http.Response, error) {
	if p.srv.WithElif == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithElif not implemented")}
	}
	qp := req.URL.Query()
	elifParam, err := url.QueryUnescape(qp.Get("elif"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithElif(req.Context(), elifParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithElse(req *http.Request) (*http.Response, error) {
	if p.srv.WithElse == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithElse not implemented")}
	}
	qp := req.URL.Query()
	elseParamParam, err := url.QueryUnescape(qp.Get("else"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithElse(req.Context(), elseParamParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithExcept(req *http.Request) (*http.Response, error) {
	if p.srv.WithExcept == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithExcept not implemented")}
	}
	qp := req.URL.Query()
	exceptParam, err := url.QueryUnescape(qp.Get("except"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithExcept(req.Context(), exceptParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithExec(req *http.Request) (*http.Response, error) {
	if p.srv.WithExec == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithExec not implemented")}
	}
	qp := req.URL.Query()
	execParamParam, err := url.QueryUnescape(qp.Get("exec"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithExec(req.Context(), execParamParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithFinally(req *http.Request) (*http.Response, error) {
	if p.srv.WithFinally == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithFinally not implemented")}
	}
	qp := req.URL.Query()
	finallyParam, err := url.QueryUnescape(qp.Get("finally"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithFinally(req.Context(), finallyParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithFor(req *http.Request) (*http.Response, error) {
	if p.srv.WithFor == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithFor not implemented")}
	}
	qp := req.URL.Query()
	forParamParam, err := url.QueryUnescape(qp.Get("for"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithFor(req.Context(), forParamParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithFrom(req *http.Request) (*http.Response, error) {
	if p.srv.WithFrom == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithFrom not implemented")}
	}
	qp := req.URL.Query()
	fromParam, err := url.QueryUnescape(qp.Get("from"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithFrom(req.Context(), fromParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithGlobal(req *http.Request) (*http.Response, error) {
	if p.srv.WithGlobal == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithGlobal not implemented")}
	}
	qp := req.URL.Query()
	globalParam, err := url.QueryUnescape(qp.Get("global"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithGlobal(req.Context(), globalParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithIf(req *http.Request) (*http.Response, error) {
	if p.srv.WithIf == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithIf not implemented")}
	}
	qp := req.URL.Query()
	ifParamParam, err := url.QueryUnescape(qp.Get("if"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithIf(req.Context(), ifParamParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithImport(req *http.Request) (*http.Response, error) {
	if p.srv.WithImport == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithImport not implemented")}
	}
	qp := req.URL.Query()
	importParamParam, err := url.QueryUnescape(qp.Get("import"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithImport(req.Context(), importParamParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithIn(req *http.Request) (*http.Response, error) {
	if p.srv.WithIn == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithIn not implemented")}
	}
	qp := req.URL.Query()
	inParam, err := url.QueryUnescape(qp.Get("in"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithIn(req.Context(), inParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithIs(req *http.Request) (*http.Response, error) {
	if p.srv.WithIs == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithIs not implemented")}
	}
	qp := req.URL.Query()
	isParam, err := url.QueryUnescape(qp.Get("is"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithIs(req.Context(), isParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithLambda(req *http.Request) (*http.Response, error) {
	if p.srv.WithLambda == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithLambda not implemented")}
	}
	qp := req.URL.Query()
	lambdaParam, err := url.QueryUnescape(qp.Get("lambda"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithLambda(req.Context(), lambdaParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithNot(req *http.Request) (*http.Response, error) {
	if p.srv.WithNot == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithNot not implemented")}
	}
	qp := req.URL.Query()
	notParam, err := url.QueryUnescape(qp.Get("not"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithNot(req.Context(), notParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithOr(req *http.Request) (*http.Response, error) {
	if p.srv.WithOr == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithOr not implemented")}
	}
	qp := req.URL.Query()
	orParam, err := url.QueryUnescape(qp.Get("or"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithOr(req.Context(), orParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithPass(req *http.Request) (*http.Response, error) {
	if p.srv.WithPass == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithPass not implemented")}
	}
	qp := req.URL.Query()
	passParam, err := url.QueryUnescape(qp.Get("pass"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithPass(req.Context(), passParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithRaise(req *http.Request) (*http.Response, error) {
	if p.srv.WithRaise == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithRaise not implemented")}
	}
	qp := req.URL.Query()
	raiseParam, err := url.QueryUnescape(qp.Get("raise"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithRaise(req.Context(), raiseParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithReturn(req *http.Request) (*http.Response, error) {
	if p.srv.WithReturn == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithReturn not implemented")}
	}
	qp := req.URL.Query()
	returnParamParam, err := url.QueryUnescape(qp.Get("return"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithReturn(req.Context(), returnParamParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithTry(req *http.Request) (*http.Response, error) {
	if p.srv.WithTry == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithTry not implemented")}
	}
	qp := req.URL.Query()
	tryParam, err := url.QueryUnescape(qp.Get("try"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithTry(req.Context(), tryParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithWhile(req *http.Request) (*http.Response, error) {
	if p.srv.WithWhile == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithWhile not implemented")}
	}
	qp := req.URL.Query()
	whileParam, err := url.QueryUnescape(qp.Get("while"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithWhile(req.Context(), whileParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithWith(req *http.Request) (*http.Response, error) {
	if p.srv.WithWith == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithWith not implemented")}
	}
	qp := req.URL.Query()
	withParam, err := url.QueryUnescape(qp.Get("with"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithWith(req.Context(), withParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *ParametersServerTransport) dispatchWithYield(req *http.Request) (*http.Response, error) {
	if p.srv.WithYield == nil {
		return nil, &nonRetriableError{errors.New("fake for method WithYield not implemented")}
	}
	qp := req.URL.Query()
	yieldParam, err := url.QueryUnescape(qp.Get("yield"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.WithYield(req.Context(), yieldParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
