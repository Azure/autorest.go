// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// SpecialWordsServer is a fake server for instances of the specialwordsgroup.SpecialWordsClient type.
type SpecialWordsServer struct {
	// ModelPropertiesServer contains the fakes for client ModelPropertiesClient
	ModelPropertiesServer ModelPropertiesServer

	// ModelsServer contains the fakes for client ModelsClient
	ModelsServer ModelsServer

	// OperationsServer contains the fakes for client OperationsClient
	OperationsServer OperationsServer

	// ParametersServer contains the fakes for client ParametersClient
	ParametersServer ParametersServer
}

// NewSpecialWordsServerTransport creates a new instance of SpecialWordsServerTransport with the provided implementation.
// The returned SpecialWordsServerTransport instance is connected to an instance of specialwordsgroup.SpecialWordsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSpecialWordsServerTransport(srv *SpecialWordsServer) *SpecialWordsServerTransport {
	return &SpecialWordsServerTransport{srv: srv}
}

// SpecialWordsServerTransport connects instances of specialwordsgroup.SpecialWordsClient to instances of SpecialWordsServer.
// Don't use this type directly, use NewSpecialWordsServerTransport instead.
type SpecialWordsServerTransport struct {
	srv                     *SpecialWordsServer
	trMu                    sync.Mutex
	trModelPropertiesServer *ModelPropertiesServerTransport
	trModelsServer          *ModelsServerTransport
	trOperationsServer      *OperationsServerTransport
	trParametersServer      *ParametersServerTransport
}

// Do implements the policy.Transporter interface for SpecialWordsServerTransport.
func (s *SpecialWordsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (s *SpecialWordsServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "ModelPropertiesClient":
		initServer(&s.trMu, &s.trModelPropertiesServer, func() *ModelPropertiesServerTransport {
			return NewModelPropertiesServerTransport(&s.srv.ModelPropertiesServer)
		})
		resp, err = s.trModelPropertiesServer.Do(req)
	case "ModelsClient":
		initServer(&s.trMu, &s.trModelsServer, func() *ModelsServerTransport {
			return NewModelsServerTransport(&s.srv.ModelsServer)
		})
		resp, err = s.trModelsServer.Do(req)
	case "OperationsClient":
		initServer(&s.trMu, &s.trOperationsServer, func() *OperationsServerTransport {
			return NewOperationsServerTransport(&s.srv.OperationsServer)
		})
		resp, err = s.trOperationsServer.Do(req)
	case "ParametersClient":
		initServer(&s.trMu, &s.trParametersServer, func() *ParametersServerTransport {
			return NewParametersServerTransport(&s.srv.ParametersServer)
		})
		resp, err = s.trParametersServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}
