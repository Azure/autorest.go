//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package specialwordsgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// ModelPropertiesClient contains the methods for the SpecialWords group.
// Don't use this type directly, use a constructor function instead.
type ModelPropertiesClient struct {
	internal *azcore.Client
}

//   - options - ModelPropertiesClientSameAsModelOptions contains the optional parameters for the ModelPropertiesClient.SameAsModel
//     method.
func (client *ModelPropertiesClient) SameAsModel(ctx context.Context, body SameAsModel, options *ModelPropertiesClientSameAsModelOptions) (ModelPropertiesClientSameAsModelResponse, error) {
	var err error
	req, err := client.sameAsModelCreateRequest(ctx, body, options)
	if err != nil {
		return ModelPropertiesClientSameAsModelResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ModelPropertiesClientSameAsModelResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ModelPropertiesClientSameAsModelResponse{}, err
	}
	return ModelPropertiesClientSameAsModelResponse{}, nil
}

// sameAsModelCreateRequest creates the SameAsModel request.
func (client *ModelPropertiesClient) sameAsModelCreateRequest(ctx context.Context, body SameAsModel, options *ModelPropertiesClientSameAsModelOptions) (*policy.Request, error) {
	urlPath := "/special-words/model-properties/same-as-model"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}
