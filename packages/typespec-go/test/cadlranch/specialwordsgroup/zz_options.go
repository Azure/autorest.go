//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package specialwordsgroup

// ModelPropertiesClientSameAsModelOptions contains the optional parameters for the ModelPropertiesClient.SameAsModel method.
type ModelPropertiesClientSameAsModelOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithAndOptions contains the optional parameters for the ModelsClient.WithAnd method.
type ModelsClientWithAndOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithAsOptions contains the optional parameters for the ModelsClient.WithAs method.
type ModelsClientWithAsOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithAssertOptions contains the optional parameters for the ModelsClient.WithAssert method.
type ModelsClientWithAssertOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithAsyncOptions contains the optional parameters for the ModelsClient.WithAsync method.
type ModelsClientWithAsyncOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithAwaitOptions contains the optional parameters for the ModelsClient.WithAwait method.
type ModelsClientWithAwaitOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithBreakOptions contains the optional parameters for the ModelsClient.WithBreak method.
type ModelsClientWithBreakOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithClassOptions contains the optional parameters for the ModelsClient.WithClass method.
type ModelsClientWithClassOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithConstructorOptions contains the optional parameters for the ModelsClient.WithConstructor method.
type ModelsClientWithConstructorOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithContinueOptions contains the optional parameters for the ModelsClient.WithContinue method.
type ModelsClientWithContinueOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithDefOptions contains the optional parameters for the ModelsClient.WithDef method.
type ModelsClientWithDefOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithDelOptions contains the optional parameters for the ModelsClient.WithDel method.
type ModelsClientWithDelOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithElifOptions contains the optional parameters for the ModelsClient.WithElif method.
type ModelsClientWithElifOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithElseOptions contains the optional parameters for the ModelsClient.WithElse method.
type ModelsClientWithElseOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithExceptOptions contains the optional parameters for the ModelsClient.WithExcept method.
type ModelsClientWithExceptOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithExecOptions contains the optional parameters for the ModelsClient.WithExec method.
type ModelsClientWithExecOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithFinallyOptions contains the optional parameters for the ModelsClient.WithFinally method.
type ModelsClientWithFinallyOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithForOptions contains the optional parameters for the ModelsClient.WithFor method.
type ModelsClientWithForOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithFromOptions contains the optional parameters for the ModelsClient.WithFrom method.
type ModelsClientWithFromOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithGlobalOptions contains the optional parameters for the ModelsClient.WithGlobal method.
type ModelsClientWithGlobalOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithIfOptions contains the optional parameters for the ModelsClient.WithIf method.
type ModelsClientWithIfOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithImportOptions contains the optional parameters for the ModelsClient.WithImport method.
type ModelsClientWithImportOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithInOptions contains the optional parameters for the ModelsClient.WithIn method.
type ModelsClientWithInOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithIsOptions contains the optional parameters for the ModelsClient.WithIs method.
type ModelsClientWithIsOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithLambdaOptions contains the optional parameters for the ModelsClient.WithLambda method.
type ModelsClientWithLambdaOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithNotOptions contains the optional parameters for the ModelsClient.WithNot method.
type ModelsClientWithNotOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithOrOptions contains the optional parameters for the ModelsClient.WithOr method.
type ModelsClientWithOrOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithPassOptions contains the optional parameters for the ModelsClient.WithPass method.
type ModelsClientWithPassOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithRaiseOptions contains the optional parameters for the ModelsClient.WithRaise method.
type ModelsClientWithRaiseOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithReturnOptions contains the optional parameters for the ModelsClient.WithReturn method.
type ModelsClientWithReturnOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithTryOptions contains the optional parameters for the ModelsClient.WithTry method.
type ModelsClientWithTryOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithWhileOptions contains the optional parameters for the ModelsClient.WithWhile method.
type ModelsClientWithWhileOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithWithOptions contains the optional parameters for the ModelsClient.WithWith method.
type ModelsClientWithWithOptions struct {
	// placeholder for future optional parameters
}

// ModelsClientWithYieldOptions contains the optional parameters for the ModelsClient.WithYield method.
type ModelsClientWithYieldOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientAndOptions contains the optional parameters for the OperationsClient.And method.
type OperationsClientAndOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientAsOptions contains the optional parameters for the OperationsClient.As method.
type OperationsClientAsOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientAssertOptions contains the optional parameters for the OperationsClient.Assert method.
type OperationsClientAssertOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientAsyncOptions contains the optional parameters for the OperationsClient.Async method.
type OperationsClientAsyncOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientAwaitOptions contains the optional parameters for the OperationsClient.Await method.
type OperationsClientAwaitOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientBreakOptions contains the optional parameters for the OperationsClient.Break method.
type OperationsClientBreakOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientClassOptions contains the optional parameters for the OperationsClient.Class method.
type OperationsClientClassOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientConstructorOptions contains the optional parameters for the OperationsClient.Constructor method.
type OperationsClientConstructorOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientContinueOptions contains the optional parameters for the OperationsClient.Continue method.
type OperationsClientContinueOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientDefOptions contains the optional parameters for the OperationsClient.Def method.
type OperationsClientDefOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientDelOptions contains the optional parameters for the OperationsClient.Del method.
type OperationsClientDelOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientElifOptions contains the optional parameters for the OperationsClient.Elif method.
type OperationsClientElifOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientElseOptions contains the optional parameters for the OperationsClient.Else method.
type OperationsClientElseOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientExceptOptions contains the optional parameters for the OperationsClient.Except method.
type OperationsClientExceptOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientExecOptions contains the optional parameters for the OperationsClient.Exec method.
type OperationsClientExecOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientFinallyOptions contains the optional parameters for the OperationsClient.Finally method.
type OperationsClientFinallyOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientForOptions contains the optional parameters for the OperationsClient.For method.
type OperationsClientForOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientFromOptions contains the optional parameters for the OperationsClient.From method.
type OperationsClientFromOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientGlobalOptions contains the optional parameters for the OperationsClient.Global method.
type OperationsClientGlobalOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientIfOptions contains the optional parameters for the OperationsClient.If method.
type OperationsClientIfOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientImportOptions contains the optional parameters for the OperationsClient.Import method.
type OperationsClientImportOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientInOptions contains the optional parameters for the OperationsClient.In method.
type OperationsClientInOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientIsOptions contains the optional parameters for the OperationsClient.Is method.
type OperationsClientIsOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientLambdaOptions contains the optional parameters for the OperationsClient.Lambda method.
type OperationsClientLambdaOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientNotOptions contains the optional parameters for the OperationsClient.Not method.
type OperationsClientNotOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientOrOptions contains the optional parameters for the OperationsClient.Or method.
type OperationsClientOrOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientPassOptions contains the optional parameters for the OperationsClient.Pass method.
type OperationsClientPassOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientRaiseOptions contains the optional parameters for the OperationsClient.Raise method.
type OperationsClientRaiseOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientReturnOptions contains the optional parameters for the OperationsClient.Return method.
type OperationsClientReturnOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientTryOptions contains the optional parameters for the OperationsClient.Try method.
type OperationsClientTryOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientWhileOptions contains the optional parameters for the OperationsClient.While method.
type OperationsClientWhileOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientWithOptions contains the optional parameters for the OperationsClient.With method.
type OperationsClientWithOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientYieldOptions contains the optional parameters for the OperationsClient.Yield method.
type OperationsClientYieldOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithAndOptions contains the optional parameters for the ParametersClient.WithAnd method.
type ParametersClientWithAndOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithAsOptions contains the optional parameters for the ParametersClient.WithAs method.
type ParametersClientWithAsOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithAssertOptions contains the optional parameters for the ParametersClient.WithAssert method.
type ParametersClientWithAssertOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithAsyncOptions contains the optional parameters for the ParametersClient.WithAsync method.
type ParametersClientWithAsyncOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithAwaitOptions contains the optional parameters for the ParametersClient.WithAwait method.
type ParametersClientWithAwaitOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithBreakOptions contains the optional parameters for the ParametersClient.WithBreak method.
type ParametersClientWithBreakOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithCancellationTokenOptions contains the optional parameters for the ParametersClient.WithCancellationToken
// method.
type ParametersClientWithCancellationTokenOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithClassOptions contains the optional parameters for the ParametersClient.WithClass method.
type ParametersClientWithClassOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithConstructorOptions contains the optional parameters for the ParametersClient.WithConstructor method.
type ParametersClientWithConstructorOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithContinueOptions contains the optional parameters for the ParametersClient.WithContinue method.
type ParametersClientWithContinueOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithDefOptions contains the optional parameters for the ParametersClient.WithDef method.
type ParametersClientWithDefOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithDelOptions contains the optional parameters for the ParametersClient.WithDel method.
type ParametersClientWithDelOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithElifOptions contains the optional parameters for the ParametersClient.WithElif method.
type ParametersClientWithElifOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithElseOptions contains the optional parameters for the ParametersClient.WithElse method.
type ParametersClientWithElseOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithExceptOptions contains the optional parameters for the ParametersClient.WithExcept method.
type ParametersClientWithExceptOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithExecOptions contains the optional parameters for the ParametersClient.WithExec method.
type ParametersClientWithExecOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithFinallyOptions contains the optional parameters for the ParametersClient.WithFinally method.
type ParametersClientWithFinallyOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithForOptions contains the optional parameters for the ParametersClient.WithFor method.
type ParametersClientWithForOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithFromOptions contains the optional parameters for the ParametersClient.WithFrom method.
type ParametersClientWithFromOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithGlobalOptions contains the optional parameters for the ParametersClient.WithGlobal method.
type ParametersClientWithGlobalOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithIfOptions contains the optional parameters for the ParametersClient.WithIf method.
type ParametersClientWithIfOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithImportOptions contains the optional parameters for the ParametersClient.WithImport method.
type ParametersClientWithImportOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithInOptions contains the optional parameters for the ParametersClient.WithIn method.
type ParametersClientWithInOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithIsOptions contains the optional parameters for the ParametersClient.WithIs method.
type ParametersClientWithIsOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithLambdaOptions contains the optional parameters for the ParametersClient.WithLambda method.
type ParametersClientWithLambdaOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithNotOptions contains the optional parameters for the ParametersClient.WithNot method.
type ParametersClientWithNotOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithOrOptions contains the optional parameters for the ParametersClient.WithOr method.
type ParametersClientWithOrOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithPassOptions contains the optional parameters for the ParametersClient.WithPass method.
type ParametersClientWithPassOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithRaiseOptions contains the optional parameters for the ParametersClient.WithRaise method.
type ParametersClientWithRaiseOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithReturnOptions contains the optional parameters for the ParametersClient.WithReturn method.
type ParametersClientWithReturnOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithTryOptions contains the optional parameters for the ParametersClient.WithTry method.
type ParametersClientWithTryOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithWhileOptions contains the optional parameters for the ParametersClient.WithWhile method.
type ParametersClientWithWhileOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithWithOptions contains the optional parameters for the ParametersClient.WithWith method.
type ParametersClientWithWithOptions struct {
	// placeholder for future optional parameters
}

// ParametersClientWithYieldOptions contains the optional parameters for the ParametersClient.WithYield method.
type ParametersClientWithYieldOptions struct {
	// placeholder for future optional parameters
}
