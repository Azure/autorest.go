//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package specialwordsgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// ParametersClient - Verify reserved words as parameter name.
// Don't use this type directly, use [SpecialWordsClient.NewParametersClient] instead.
type ParametersClient struct {
	internal *azcore.Client
}

// - options - ParametersClientWithAndOptions contains the optional parameters for the ParametersClient.WithAnd method.
func (client *ParametersClient) WithAnd(ctx context.Context, and string, options *ParametersClientWithAndOptions) (ParametersClientWithAndResponse, error) {
	var err error
	req, err := client.withAndCreateRequest(ctx, and, options)
	if err != nil {
		return ParametersClientWithAndResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithAndResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithAndResponse{}, err
	}
	return ParametersClientWithAndResponse{}, nil
}

// withAndCreateRequest creates the WithAnd request.
func (client *ParametersClient) withAndCreateRequest(ctx context.Context, and string, options *ParametersClientWithAndOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/and"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("and", and)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithAsOptions contains the optional parameters for the ParametersClient.WithAs method.
func (client *ParametersClient) WithAs(ctx context.Context, as string, options *ParametersClientWithAsOptions) (ParametersClientWithAsResponse, error) {
	var err error
	req, err := client.withAsCreateRequest(ctx, as, options)
	if err != nil {
		return ParametersClientWithAsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithAsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithAsResponse{}, err
	}
	return ParametersClientWithAsResponse{}, nil
}

// withAsCreateRequest creates the WithAs request.
func (client *ParametersClient) withAsCreateRequest(ctx context.Context, as string, options *ParametersClientWithAsOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/as"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("as", as)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithAssertOptions contains the optional parameters for the ParametersClient.WithAssert method.
func (client *ParametersClient) WithAssert(ctx context.Context, assert string, options *ParametersClientWithAssertOptions) (ParametersClientWithAssertResponse, error) {
	var err error
	req, err := client.withAssertCreateRequest(ctx, assert, options)
	if err != nil {
		return ParametersClientWithAssertResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithAssertResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithAssertResponse{}, err
	}
	return ParametersClientWithAssertResponse{}, nil
}

// withAssertCreateRequest creates the WithAssert request.
func (client *ParametersClient) withAssertCreateRequest(ctx context.Context, assert string, options *ParametersClientWithAssertOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/assert"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("assert", assert)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithAsyncOptions contains the optional parameters for the ParametersClient.WithAsync method.
func (client *ParametersClient) WithAsync(ctx context.Context, async string, options *ParametersClientWithAsyncOptions) (ParametersClientWithAsyncResponse, error) {
	var err error
	req, err := client.withAsyncCreateRequest(ctx, async, options)
	if err != nil {
		return ParametersClientWithAsyncResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithAsyncResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithAsyncResponse{}, err
	}
	return ParametersClientWithAsyncResponse{}, nil
}

// withAsyncCreateRequest creates the WithAsync request.
func (client *ParametersClient) withAsyncCreateRequest(ctx context.Context, async string, options *ParametersClientWithAsyncOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/async"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("async", async)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithAwaitOptions contains the optional parameters for the ParametersClient.WithAwait method.
func (client *ParametersClient) WithAwait(ctx context.Context, await string, options *ParametersClientWithAwaitOptions) (ParametersClientWithAwaitResponse, error) {
	var err error
	req, err := client.withAwaitCreateRequest(ctx, await, options)
	if err != nil {
		return ParametersClientWithAwaitResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithAwaitResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithAwaitResponse{}, err
	}
	return ParametersClientWithAwaitResponse{}, nil
}

// withAwaitCreateRequest creates the WithAwait request.
func (client *ParametersClient) withAwaitCreateRequest(ctx context.Context, await string, options *ParametersClientWithAwaitOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/await"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("await", await)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithBreakOptions contains the optional parameters for the ParametersClient.WithBreak method.
func (client *ParametersClient) WithBreak(ctx context.Context, breakParam string, options *ParametersClientWithBreakOptions) (ParametersClientWithBreakResponse, error) {
	var err error
	req, err := client.withBreakCreateRequest(ctx, breakParam, options)
	if err != nil {
		return ParametersClientWithBreakResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithBreakResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithBreakResponse{}, err
	}
	return ParametersClientWithBreakResponse{}, nil
}

// withBreakCreateRequest creates the WithBreak request.
func (client *ParametersClient) withBreakCreateRequest(ctx context.Context, breakParam string, options *ParametersClientWithBreakOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/break"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("break", breakParam)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

//   - options - ParametersClientWithCancellationTokenOptions contains the optional parameters for the ParametersClient.WithCancellationToken
//     method.
func (client *ParametersClient) WithCancellationToken(ctx context.Context, cancellationToken string, options *ParametersClientWithCancellationTokenOptions) (ParametersClientWithCancellationTokenResponse, error) {
	var err error
	req, err := client.withCancellationTokenCreateRequest(ctx, cancellationToken, options)
	if err != nil {
		return ParametersClientWithCancellationTokenResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithCancellationTokenResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithCancellationTokenResponse{}, err
	}
	return ParametersClientWithCancellationTokenResponse{}, nil
}

// withCancellationTokenCreateRequest creates the WithCancellationToken request.
func (client *ParametersClient) withCancellationTokenCreateRequest(ctx context.Context, cancellationToken string, options *ParametersClientWithCancellationTokenOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/cancellationToken"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("cancellationToken", cancellationToken)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithClassOptions contains the optional parameters for the ParametersClient.WithClass method.
func (client *ParametersClient) WithClass(ctx context.Context, class string, options *ParametersClientWithClassOptions) (ParametersClientWithClassResponse, error) {
	var err error
	req, err := client.withClassCreateRequest(ctx, class, options)
	if err != nil {
		return ParametersClientWithClassResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithClassResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithClassResponse{}, err
	}
	return ParametersClientWithClassResponse{}, nil
}

// withClassCreateRequest creates the WithClass request.
func (client *ParametersClient) withClassCreateRequest(ctx context.Context, class string, options *ParametersClientWithClassOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/class"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("class", class)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

//   - options - ParametersClientWithConstructorOptions contains the optional parameters for the ParametersClient.WithConstructor
//     method.
func (client *ParametersClient) WithConstructor(ctx context.Context, constructor string, options *ParametersClientWithConstructorOptions) (ParametersClientWithConstructorResponse, error) {
	var err error
	req, err := client.withConstructorCreateRequest(ctx, constructor, options)
	if err != nil {
		return ParametersClientWithConstructorResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithConstructorResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithConstructorResponse{}, err
	}
	return ParametersClientWithConstructorResponse{}, nil
}

// withConstructorCreateRequest creates the WithConstructor request.
func (client *ParametersClient) withConstructorCreateRequest(ctx context.Context, constructor string, options *ParametersClientWithConstructorOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/constructor"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("constructor", constructor)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithContinueOptions contains the optional parameters for the ParametersClient.WithContinue method.
func (client *ParametersClient) WithContinue(ctx context.Context, continueParam string, options *ParametersClientWithContinueOptions) (ParametersClientWithContinueResponse, error) {
	var err error
	req, err := client.withContinueCreateRequest(ctx, continueParam, options)
	if err != nil {
		return ParametersClientWithContinueResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithContinueResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithContinueResponse{}, err
	}
	return ParametersClientWithContinueResponse{}, nil
}

// withContinueCreateRequest creates the WithContinue request.
func (client *ParametersClient) withContinueCreateRequest(ctx context.Context, continueParam string, options *ParametersClientWithContinueOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/continue"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("continue", continueParam)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithDefOptions contains the optional parameters for the ParametersClient.WithDef method.
func (client *ParametersClient) WithDef(ctx context.Context, def string, options *ParametersClientWithDefOptions) (ParametersClientWithDefResponse, error) {
	var err error
	req, err := client.withDefCreateRequest(ctx, def, options)
	if err != nil {
		return ParametersClientWithDefResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithDefResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithDefResponse{}, err
	}
	return ParametersClientWithDefResponse{}, nil
}

// withDefCreateRequest creates the WithDef request.
func (client *ParametersClient) withDefCreateRequest(ctx context.Context, def string, options *ParametersClientWithDefOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/def"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("def", def)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithDelOptions contains the optional parameters for the ParametersClient.WithDel method.
func (client *ParametersClient) WithDel(ctx context.Context, del string, options *ParametersClientWithDelOptions) (ParametersClientWithDelResponse, error) {
	var err error
	req, err := client.withDelCreateRequest(ctx, del, options)
	if err != nil {
		return ParametersClientWithDelResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithDelResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithDelResponse{}, err
	}
	return ParametersClientWithDelResponse{}, nil
}

// withDelCreateRequest creates the WithDel request.
func (client *ParametersClient) withDelCreateRequest(ctx context.Context, del string, options *ParametersClientWithDelOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/del"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("del", del)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithElifOptions contains the optional parameters for the ParametersClient.WithElif method.
func (client *ParametersClient) WithElif(ctx context.Context, elif string, options *ParametersClientWithElifOptions) (ParametersClientWithElifResponse, error) {
	var err error
	req, err := client.withElifCreateRequest(ctx, elif, options)
	if err != nil {
		return ParametersClientWithElifResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithElifResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithElifResponse{}, err
	}
	return ParametersClientWithElifResponse{}, nil
}

// withElifCreateRequest creates the WithElif request.
func (client *ParametersClient) withElifCreateRequest(ctx context.Context, elif string, options *ParametersClientWithElifOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/elif"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("elif", elif)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithElseOptions contains the optional parameters for the ParametersClient.WithElse method.
func (client *ParametersClient) WithElse(ctx context.Context, elseParam string, options *ParametersClientWithElseOptions) (ParametersClientWithElseResponse, error) {
	var err error
	req, err := client.withElseCreateRequest(ctx, elseParam, options)
	if err != nil {
		return ParametersClientWithElseResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithElseResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithElseResponse{}, err
	}
	return ParametersClientWithElseResponse{}, nil
}

// withElseCreateRequest creates the WithElse request.
func (client *ParametersClient) withElseCreateRequest(ctx context.Context, elseParam string, options *ParametersClientWithElseOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/else"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("else", elseParam)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithExceptOptions contains the optional parameters for the ParametersClient.WithExcept method.
func (client *ParametersClient) WithExcept(ctx context.Context, except string, options *ParametersClientWithExceptOptions) (ParametersClientWithExceptResponse, error) {
	var err error
	req, err := client.withExceptCreateRequest(ctx, except, options)
	if err != nil {
		return ParametersClientWithExceptResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithExceptResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithExceptResponse{}, err
	}
	return ParametersClientWithExceptResponse{}, nil
}

// withExceptCreateRequest creates the WithExcept request.
func (client *ParametersClient) withExceptCreateRequest(ctx context.Context, except string, options *ParametersClientWithExceptOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/except"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("except", except)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithExecOptions contains the optional parameters for the ParametersClient.WithExec method.
func (client *ParametersClient) WithExec(ctx context.Context, execParam string, options *ParametersClientWithExecOptions) (ParametersClientWithExecResponse, error) {
	var err error
	req, err := client.withExecCreateRequest(ctx, execParam, options)
	if err != nil {
		return ParametersClientWithExecResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithExecResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithExecResponse{}, err
	}
	return ParametersClientWithExecResponse{}, nil
}

// withExecCreateRequest creates the WithExec request.
func (client *ParametersClient) withExecCreateRequest(ctx context.Context, execParam string, options *ParametersClientWithExecOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/exec"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("exec", execParam)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithFinallyOptions contains the optional parameters for the ParametersClient.WithFinally method.
func (client *ParametersClient) WithFinally(ctx context.Context, finally string, options *ParametersClientWithFinallyOptions) (ParametersClientWithFinallyResponse, error) {
	var err error
	req, err := client.withFinallyCreateRequest(ctx, finally, options)
	if err != nil {
		return ParametersClientWithFinallyResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithFinallyResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithFinallyResponse{}, err
	}
	return ParametersClientWithFinallyResponse{}, nil
}

// withFinallyCreateRequest creates the WithFinally request.
func (client *ParametersClient) withFinallyCreateRequest(ctx context.Context, finally string, options *ParametersClientWithFinallyOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/finally"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("finally", finally)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithForOptions contains the optional parameters for the ParametersClient.WithFor method.
func (client *ParametersClient) WithFor(ctx context.Context, forParam string, options *ParametersClientWithForOptions) (ParametersClientWithForResponse, error) {
	var err error
	req, err := client.withForCreateRequest(ctx, forParam, options)
	if err != nil {
		return ParametersClientWithForResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithForResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithForResponse{}, err
	}
	return ParametersClientWithForResponse{}, nil
}

// withForCreateRequest creates the WithFor request.
func (client *ParametersClient) withForCreateRequest(ctx context.Context, forParam string, options *ParametersClientWithForOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/for"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("for", forParam)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithFromOptions contains the optional parameters for the ParametersClient.WithFrom method.
func (client *ParametersClient) WithFrom(ctx context.Context, from string, options *ParametersClientWithFromOptions) (ParametersClientWithFromResponse, error) {
	var err error
	req, err := client.withFromCreateRequest(ctx, from, options)
	if err != nil {
		return ParametersClientWithFromResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithFromResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithFromResponse{}, err
	}
	return ParametersClientWithFromResponse{}, nil
}

// withFromCreateRequest creates the WithFrom request.
func (client *ParametersClient) withFromCreateRequest(ctx context.Context, from string, options *ParametersClientWithFromOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/from"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("from", from)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithGlobalOptions contains the optional parameters for the ParametersClient.WithGlobal method.
func (client *ParametersClient) WithGlobal(ctx context.Context, global string, options *ParametersClientWithGlobalOptions) (ParametersClientWithGlobalResponse, error) {
	var err error
	req, err := client.withGlobalCreateRequest(ctx, global, options)
	if err != nil {
		return ParametersClientWithGlobalResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithGlobalResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithGlobalResponse{}, err
	}
	return ParametersClientWithGlobalResponse{}, nil
}

// withGlobalCreateRequest creates the WithGlobal request.
func (client *ParametersClient) withGlobalCreateRequest(ctx context.Context, global string, options *ParametersClientWithGlobalOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/global"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("global", global)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithIfOptions contains the optional parameters for the ParametersClient.WithIf method.
func (client *ParametersClient) WithIf(ctx context.Context, ifParam string, options *ParametersClientWithIfOptions) (ParametersClientWithIfResponse, error) {
	var err error
	req, err := client.withIfCreateRequest(ctx, ifParam, options)
	if err != nil {
		return ParametersClientWithIfResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithIfResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithIfResponse{}, err
	}
	return ParametersClientWithIfResponse{}, nil
}

// withIfCreateRequest creates the WithIf request.
func (client *ParametersClient) withIfCreateRequest(ctx context.Context, ifParam string, options *ParametersClientWithIfOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/if"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("if", ifParam)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithImportOptions contains the optional parameters for the ParametersClient.WithImport method.
func (client *ParametersClient) WithImport(ctx context.Context, importParam string, options *ParametersClientWithImportOptions) (ParametersClientWithImportResponse, error) {
	var err error
	req, err := client.withImportCreateRequest(ctx, importParam, options)
	if err != nil {
		return ParametersClientWithImportResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithImportResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithImportResponse{}, err
	}
	return ParametersClientWithImportResponse{}, nil
}

// withImportCreateRequest creates the WithImport request.
func (client *ParametersClient) withImportCreateRequest(ctx context.Context, importParam string, options *ParametersClientWithImportOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/import"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("import", importParam)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithInOptions contains the optional parameters for the ParametersClient.WithIn method.
func (client *ParametersClient) WithIn(ctx context.Context, in string, options *ParametersClientWithInOptions) (ParametersClientWithInResponse, error) {
	var err error
	req, err := client.withInCreateRequest(ctx, in, options)
	if err != nil {
		return ParametersClientWithInResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithInResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithInResponse{}, err
	}
	return ParametersClientWithInResponse{}, nil
}

// withInCreateRequest creates the WithIn request.
func (client *ParametersClient) withInCreateRequest(ctx context.Context, in string, options *ParametersClientWithInOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/in"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("in", in)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithIsOptions contains the optional parameters for the ParametersClient.WithIs method.
func (client *ParametersClient) WithIs(ctx context.Context, is string, options *ParametersClientWithIsOptions) (ParametersClientWithIsResponse, error) {
	var err error
	req, err := client.withIsCreateRequest(ctx, is, options)
	if err != nil {
		return ParametersClientWithIsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithIsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithIsResponse{}, err
	}
	return ParametersClientWithIsResponse{}, nil
}

// withIsCreateRequest creates the WithIs request.
func (client *ParametersClient) withIsCreateRequest(ctx context.Context, is string, options *ParametersClientWithIsOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/is"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("is", is)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithLambdaOptions contains the optional parameters for the ParametersClient.WithLambda method.
func (client *ParametersClient) WithLambda(ctx context.Context, lambda string, options *ParametersClientWithLambdaOptions) (ParametersClientWithLambdaResponse, error) {
	var err error
	req, err := client.withLambdaCreateRequest(ctx, lambda, options)
	if err != nil {
		return ParametersClientWithLambdaResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithLambdaResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithLambdaResponse{}, err
	}
	return ParametersClientWithLambdaResponse{}, nil
}

// withLambdaCreateRequest creates the WithLambda request.
func (client *ParametersClient) withLambdaCreateRequest(ctx context.Context, lambda string, options *ParametersClientWithLambdaOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/lambda"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("lambda", lambda)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithNotOptions contains the optional parameters for the ParametersClient.WithNot method.
func (client *ParametersClient) WithNot(ctx context.Context, not string, options *ParametersClientWithNotOptions) (ParametersClientWithNotResponse, error) {
	var err error
	req, err := client.withNotCreateRequest(ctx, not, options)
	if err != nil {
		return ParametersClientWithNotResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithNotResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithNotResponse{}, err
	}
	return ParametersClientWithNotResponse{}, nil
}

// withNotCreateRequest creates the WithNot request.
func (client *ParametersClient) withNotCreateRequest(ctx context.Context, not string, options *ParametersClientWithNotOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/not"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("not", not)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithOrOptions contains the optional parameters for the ParametersClient.WithOr method.
func (client *ParametersClient) WithOr(ctx context.Context, or string, options *ParametersClientWithOrOptions) (ParametersClientWithOrResponse, error) {
	var err error
	req, err := client.withOrCreateRequest(ctx, or, options)
	if err != nil {
		return ParametersClientWithOrResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithOrResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithOrResponse{}, err
	}
	return ParametersClientWithOrResponse{}, nil
}

// withOrCreateRequest creates the WithOr request.
func (client *ParametersClient) withOrCreateRequest(ctx context.Context, or string, options *ParametersClientWithOrOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/or"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("or", or)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithPassOptions contains the optional parameters for the ParametersClient.WithPass method.
func (client *ParametersClient) WithPass(ctx context.Context, pass string, options *ParametersClientWithPassOptions) (ParametersClientWithPassResponse, error) {
	var err error
	req, err := client.withPassCreateRequest(ctx, pass, options)
	if err != nil {
		return ParametersClientWithPassResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithPassResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithPassResponse{}, err
	}
	return ParametersClientWithPassResponse{}, nil
}

// withPassCreateRequest creates the WithPass request.
func (client *ParametersClient) withPassCreateRequest(ctx context.Context, pass string, options *ParametersClientWithPassOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/pass"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("pass", pass)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithRaiseOptions contains the optional parameters for the ParametersClient.WithRaise method.
func (client *ParametersClient) WithRaise(ctx context.Context, raise string, options *ParametersClientWithRaiseOptions) (ParametersClientWithRaiseResponse, error) {
	var err error
	req, err := client.withRaiseCreateRequest(ctx, raise, options)
	if err != nil {
		return ParametersClientWithRaiseResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithRaiseResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithRaiseResponse{}, err
	}
	return ParametersClientWithRaiseResponse{}, nil
}

// withRaiseCreateRequest creates the WithRaise request.
func (client *ParametersClient) withRaiseCreateRequest(ctx context.Context, raise string, options *ParametersClientWithRaiseOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/raise"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("raise", raise)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithReturnOptions contains the optional parameters for the ParametersClient.WithReturn method.
func (client *ParametersClient) WithReturn(ctx context.Context, returnParam string, options *ParametersClientWithReturnOptions) (ParametersClientWithReturnResponse, error) {
	var err error
	req, err := client.withReturnCreateRequest(ctx, returnParam, options)
	if err != nil {
		return ParametersClientWithReturnResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithReturnResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithReturnResponse{}, err
	}
	return ParametersClientWithReturnResponse{}, nil
}

// withReturnCreateRequest creates the WithReturn request.
func (client *ParametersClient) withReturnCreateRequest(ctx context.Context, returnParam string, options *ParametersClientWithReturnOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/return"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("return", returnParam)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithTryOptions contains the optional parameters for the ParametersClient.WithTry method.
func (client *ParametersClient) WithTry(ctx context.Context, try string, options *ParametersClientWithTryOptions) (ParametersClientWithTryResponse, error) {
	var err error
	req, err := client.withTryCreateRequest(ctx, try, options)
	if err != nil {
		return ParametersClientWithTryResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithTryResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithTryResponse{}, err
	}
	return ParametersClientWithTryResponse{}, nil
}

// withTryCreateRequest creates the WithTry request.
func (client *ParametersClient) withTryCreateRequest(ctx context.Context, try string, options *ParametersClientWithTryOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/try"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("try", try)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithWhileOptions contains the optional parameters for the ParametersClient.WithWhile method.
func (client *ParametersClient) WithWhile(ctx context.Context, while string, options *ParametersClientWithWhileOptions) (ParametersClientWithWhileResponse, error) {
	var err error
	req, err := client.withWhileCreateRequest(ctx, while, options)
	if err != nil {
		return ParametersClientWithWhileResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithWhileResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithWhileResponse{}, err
	}
	return ParametersClientWithWhileResponse{}, nil
}

// withWhileCreateRequest creates the WithWhile request.
func (client *ParametersClient) withWhileCreateRequest(ctx context.Context, while string, options *ParametersClientWithWhileOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/while"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("while", while)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithWithOptions contains the optional parameters for the ParametersClient.WithWith method.
func (client *ParametersClient) WithWith(ctx context.Context, with string, options *ParametersClientWithWithOptions) (ParametersClientWithWithResponse, error) {
	var err error
	req, err := client.withWithCreateRequest(ctx, with, options)
	if err != nil {
		return ParametersClientWithWithResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithWithResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithWithResponse{}, err
	}
	return ParametersClientWithWithResponse{}, nil
}

// withWithCreateRequest creates the WithWith request.
func (client *ParametersClient) withWithCreateRequest(ctx context.Context, with string, options *ParametersClientWithWithOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/with"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("with", with)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// - options - ParametersClientWithYieldOptions contains the optional parameters for the ParametersClient.WithYield method.
func (client *ParametersClient) WithYield(ctx context.Context, yield string, options *ParametersClientWithYieldOptions) (ParametersClientWithYieldResponse, error) {
	var err error
	req, err := client.withYieldCreateRequest(ctx, yield, options)
	if err != nil {
		return ParametersClientWithYieldResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ParametersClientWithYieldResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ParametersClientWithYieldResponse{}, err
	}
	return ParametersClientWithYieldResponse{}, nil
}

// withYieldCreateRequest creates the WithYield request.
func (client *ParametersClient) withYieldCreateRequest(ctx context.Context, yield string, options *ParametersClientWithYieldOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/yield"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("yield", yield)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}
