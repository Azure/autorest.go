//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package dictionarygroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"time"
)

// DatetimeValueClient contains the methods for the Type.Dictionary group.
// Don't use this type directly, use a constructor function instead.
type DatetimeValueClient struct {
	internal *azcore.Client
}

func (client *DatetimeValueClient) Get(ctx context.Context, options *DatetimeValueClientGetOptions) (DatetimeValueClientGetResponse, error) {
	var err error
	req, err := client.getCreateRequest(ctx, options)
	if err != nil {
		return DatetimeValueClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DatetimeValueClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DatetimeValueClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *DatetimeValueClient) getCreateRequest(ctx context.Context, options *DatetimeValueClientGetOptions) (*policy.Request, error) {
	urlPath := "/type/dictionary/datetime"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *DatetimeValueClient) getHandleResponse(resp *http.Response) (DatetimeValueClientGetResponse, error) {
	result := DatetimeValueClientGetResponse{}
	aux := map[string]*dateTimeRFC3339{}
	if err := runtime.UnmarshalAsJSON(resp, &aux); err != nil {
		return DatetimeValueClientGetResponse{}, err
	}
	cp := map[string]*time.Time{}
	for k, v := range aux {
		cp[k] = (*time.Time)(v)
	}
	result.Value = cp
	return result, nil
}

func (client *DatetimeValueClient) Put(ctx context.Context, body map[string]*time.Time, options *DatetimeValueClientPutOptions) (DatetimeValueClientPutResponse, error) {
	var err error
	req, err := client.putCreateRequest(ctx, body, options)
	if err != nil {
		return DatetimeValueClientPutResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DatetimeValueClientPutResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return DatetimeValueClientPutResponse{}, err
	}
	return DatetimeValueClientPutResponse{}, nil
}

// putCreateRequest creates the Put request.
func (client *DatetimeValueClient) putCreateRequest(ctx context.Context, body map[string]*time.Time, options *DatetimeValueClientPutOptions) (*policy.Request, error) {
	urlPath := "/type/dictionary/datetime"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	aux := map[string]*dateTimeRFC3339{}
	for k, v := range body {
		aux[k] = (*dateTimeRFC3339)(v)
	}
	if err := runtime.MarshalAsJSON(req, aux); err != nil {
		return nil, err
	}
	return req, nil
}
