// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"clientreqidgroup"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// ClientRequestIDServer is a fake server for instances of the clientreqidgroup.ClientRequestIDClient type.
type ClientRequestIDServer struct {
	// Get is the fake for method ClientRequestIDClient.Get
	// HTTP status codes to indicate success: http.StatusNoContent
	Get func(ctx context.Context, options *clientreqidgroup.ClientRequestIDClientGetOptions) (resp azfake.Responder[clientreqidgroup.ClientRequestIDClientGetResponse], errResp azfake.ErrorResponder)
}

// NewClientRequestIDServerTransport creates a new instance of ClientRequestIDServerTransport with the provided implementation.
// The returned ClientRequestIDServerTransport instance is connected to an instance of clientreqidgroup.ClientRequestIDClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewClientRequestIDServerTransport(srv *ClientRequestIDServer) *ClientRequestIDServerTransport {
	return &ClientRequestIDServerTransport{srv: srv}
}

// ClientRequestIDServerTransport connects instances of clientreqidgroup.ClientRequestIDClient to instances of ClientRequestIDServer.
// Don't use this type directly, use NewClientRequestIDServerTransport instead.
type ClientRequestIDServerTransport struct {
	srv *ClientRequestIDServer
}

// Do implements the policy.Transporter interface for ClientRequestIDServerTransport.
func (c *ClientRequestIDServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return c.dispatchToMethodFake(req, method)
}

func (c *ClientRequestIDServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "ClientRequestIDClient.Get":
		resp, err = c.dispatchGet(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (c *ClientRequestIDServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if c.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	clientRequestIDParam := getOptional(getHeaderValue(req.Header, "client-request-id"))
	var options *clientreqidgroup.ClientRequestIDClientGetOptions
	if clientRequestIDParam != nil {
		options = &clientreqidgroup.ClientRequestIDClientGetOptions{
			ClientRequestID: clientRequestIDParam,
		}
	}
	respr, errRespr := c.srv.Get(req.Context(), options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
