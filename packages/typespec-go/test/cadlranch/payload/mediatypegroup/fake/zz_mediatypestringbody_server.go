// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"mediatypegroup"
	"net/http"
)

// MediaTypeStringBodyServer is a fake server for instances of the mediatypegroup.MediaTypeStringBodyClient type.
type MediaTypeStringBodyServer struct {
	// GetAsJSON is the fake for method MediaTypeStringBodyClient.GetAsJSON
	// HTTP status codes to indicate success: http.StatusOK
	GetAsJSON func(ctx context.Context, options *mediatypegroup.MediaTypeStringBodyClientGetAsJSONOptions) (resp azfake.Responder[mediatypegroup.MediaTypeStringBodyClientGetAsJSONResponse], errResp azfake.ErrorResponder)

	// GetAsText is the fake for method MediaTypeStringBodyClient.GetAsText
	// HTTP status codes to indicate success: http.StatusOK
	GetAsText func(ctx context.Context, options *mediatypegroup.MediaTypeStringBodyClientGetAsTextOptions) (resp azfake.Responder[mediatypegroup.MediaTypeStringBodyClientGetAsTextResponse], errResp azfake.ErrorResponder)

	// SendAsJSON is the fake for method MediaTypeStringBodyClient.SendAsJSON
	// HTTP status codes to indicate success: http.StatusOK
	SendAsJSON func(ctx context.Context, textParam string, options *mediatypegroup.MediaTypeStringBodyClientSendAsJSONOptions) (resp azfake.Responder[mediatypegroup.MediaTypeStringBodyClientSendAsJSONResponse], errResp azfake.ErrorResponder)

	// SendAsText is the fake for method MediaTypeStringBodyClient.SendAsText
	// HTTP status codes to indicate success: http.StatusOK
	SendAsText func(ctx context.Context, textParam string, options *mediatypegroup.MediaTypeStringBodyClientSendAsTextOptions) (resp azfake.Responder[mediatypegroup.MediaTypeStringBodyClientSendAsTextResponse], errResp azfake.ErrorResponder)
}

// NewMediaTypeStringBodyServerTransport creates a new instance of MediaTypeStringBodyServerTransport with the provided implementation.
// The returned MediaTypeStringBodyServerTransport instance is connected to an instance of mediatypegroup.MediaTypeStringBodyClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewMediaTypeStringBodyServerTransport(srv *MediaTypeStringBodyServer) *MediaTypeStringBodyServerTransport {
	return &MediaTypeStringBodyServerTransport{srv: srv}
}

// MediaTypeStringBodyServerTransport connects instances of mediatypegroup.MediaTypeStringBodyClient to instances of MediaTypeStringBodyServer.
// Don't use this type directly, use NewMediaTypeStringBodyServerTransport instead.
type MediaTypeStringBodyServerTransport struct {
	srv *MediaTypeStringBodyServer
}

// Do implements the policy.Transporter interface for MediaTypeStringBodyServerTransport.
func (m *MediaTypeStringBodyServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return m.dispatchToMethodFake(req, method)
}

func (m *MediaTypeStringBodyServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "MediaTypeStringBodyClient.GetAsJSON":
		resp, err = m.dispatchGetAsJSON(req)
	case "MediaTypeStringBodyClient.GetAsText":
		resp, err = m.dispatchGetAsText(req)
	case "MediaTypeStringBodyClient.SendAsJSON":
		resp, err = m.dispatchSendAsJSON(req)
	case "MediaTypeStringBodyClient.SendAsText":
		resp, err = m.dispatchSendAsText(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (m *MediaTypeStringBodyServerTransport) dispatchGetAsJSON(req *http.Request) (*http.Response, error) {
	if m.srv.GetAsJSON == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetAsJSON not implemented")}
	}
	respr, errRespr := m.srv.GetAsJSON(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).ContentType; val != nil {
		resp.Header.Set("content-type", "application/json")
	}
	return resp, nil
}

func (m *MediaTypeStringBodyServerTransport) dispatchGetAsText(req *http.Request) (*http.Response, error) {
	if m.srv.GetAsText == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetAsText not implemented")}
	}
	respr, errRespr := m.srv.GetAsText(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsText(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).ContentType; val != nil {
		resp.Header.Set("content-type", "text/plain")
	}
	return resp, nil
}

func (m *MediaTypeStringBodyServerTransport) dispatchSendAsJSON(req *http.Request) (*http.Response, error) {
	if m.srv.SendAsJSON == nil {
		return nil, &nonRetriableError{errors.New("fake for method SendAsJSON not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[string](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.SendAsJSON(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MediaTypeStringBodyServerTransport) dispatchSendAsText(req *http.Request) (*http.Response, error) {
	if m.srv.SendAsText == nil {
		return nil, &nonRetriableError{errors.New("fake for method SendAsText not implemented")}
	}
	body, err := server.UnmarshalRequestAsText(req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.SendAsText(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
