// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
	"net/url"
	"pageablegroup"
	"strconv"
)

// PageableServer is a fake server for instances of the pageablegroup.PageableClient type.
type PageableServer struct {
	// NewListPager is the fake for method PageableClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(options *pageablegroup.PageableClientListOptions) (resp azfake.PagerResponder[pageablegroup.PageableClientListResponse])
}

// NewPageableServerTransport creates a new instance of PageableServerTransport with the provided implementation.
// The returned PageableServerTransport instance is connected to an instance of pageablegroup.PageableClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewPageableServerTransport(srv *PageableServer) *PageableServerTransport {
	return &PageableServerTransport{
		srv:          srv,
		newListPager: newTracker[azfake.PagerResponder[pageablegroup.PageableClientListResponse]](),
	}
}

// PageableServerTransport connects instances of pageablegroup.PageableClient to instances of PageableServer.
// Don't use this type directly, use NewPageableServerTransport instead.
type PageableServerTransport struct {
	srv          *PageableServer
	newListPager *tracker[azfake.PagerResponder[pageablegroup.PageableClientListResponse]]
}

// Do implements the policy.Transporter interface for PageableServerTransport.
func (p *PageableServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return p.dispatchToMethodFake(req, method)
}

func (p *PageableServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "PageableClient.NewListPager":
		resp, err = p.dispatchNewListPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (p *PageableServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := p.newListPager.get(req)
	if newListPager == nil {
		qp := req.URL.Query()
		maxpagesizeUnescaped, err := url.QueryUnescape(qp.Get("maxpagesize"))
		if err != nil {
			return nil, err
		}
		maxpagesizeParam, err := parseOptional(maxpagesizeUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		var options *pageablegroup.PageableClientListOptions
		if maxpagesizeParam != nil {
			options = &pageablegroup.PageableClientListOptions{
				Maxpagesize: maxpagesizeParam,
			}
		}
		resp := p.srv.NewListPager(options)
		newListPager = &resp
		p.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *pageablegroup.PageableClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		p.newListPager.remove(req)
	}
	return resp, nil
}
