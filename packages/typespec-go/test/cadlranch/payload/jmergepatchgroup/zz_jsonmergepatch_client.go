// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package jmergepatchgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// JSONMergePatchClient - Test for merge-patch+json content-type
// Don't use this type directly, use a constructor function instead.
type JSONMergePatchClient struct {
	internal *azcore.Client
}

// CreateResource - Test content-type: application/merge-patch+json with required body
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - JSONMergePatchClientCreateResourceOptions contains the optional parameters for the JSONMergePatchClient.CreateResource
//     method.
func (client *JSONMergePatchClient) CreateResource(ctx context.Context, body Resource, options *JSONMergePatchClientCreateResourceOptions) (JSONMergePatchClientCreateResourceResponse, error) {
	var err error
	const operationName = "JSONMergePatchClient.CreateResource"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createResourceCreateRequest(ctx, body, options)
	if err != nil {
		return JSONMergePatchClientCreateResourceResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return JSONMergePatchClientCreateResourceResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return JSONMergePatchClientCreateResourceResponse{}, err
	}
	resp, err := client.createResourceHandleResponse(httpResp)
	return resp, err
}

// createResourceCreateRequest creates the CreateResource request.
func (client *JSONMergePatchClient) createResourceCreateRequest(ctx context.Context, body Resource, _ *JSONMergePatchClientCreateResourceOptions) (*policy.Request, error) {
	urlPath := "/json-merge-patch/create/resource"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// createResourceHandleResponse handles the CreateResource response.
func (client *JSONMergePatchClient) createResourceHandleResponse(resp *http.Response) (JSONMergePatchClientCreateResourceResponse, error) {
	result := JSONMergePatchClientCreateResourceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Resource); err != nil {
		return JSONMergePatchClientCreateResourceResponse{}, err
	}
	return result, nil
}

// UpdateOptionalResource - Test content-type: application/merge-patch+json with optional body
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - JSONMergePatchClientUpdateOptionalResourceOptions contains the optional parameters for the JSONMergePatchClient.UpdateOptionalResource
//     method.
func (client *JSONMergePatchClient) UpdateOptionalResource(ctx context.Context, options *JSONMergePatchClientUpdateOptionalResourceOptions) (JSONMergePatchClientUpdateOptionalResourceResponse, error) {
	var err error
	const operationName = "JSONMergePatchClient.UpdateOptionalResource"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateOptionalResourceCreateRequest(ctx, options)
	if err != nil {
		return JSONMergePatchClientUpdateOptionalResourceResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return JSONMergePatchClientUpdateOptionalResourceResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return JSONMergePatchClientUpdateOptionalResourceResponse{}, err
	}
	resp, err := client.updateOptionalResourceHandleResponse(httpResp)
	return resp, err
}

// updateOptionalResourceCreateRequest creates the UpdateOptionalResource request.
func (client *JSONMergePatchClient) updateOptionalResourceCreateRequest(ctx context.Context, options *JSONMergePatchClientUpdateOptionalResourceOptions) (*policy.Request, error) {
	urlPath := "/json-merge-patch/update/resource/optional"
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/merge-patch+json"}
	if options != nil && options.Body != nil {
		if err := runtime.MarshalAsJSON(req, *options.Body); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// updateOptionalResourceHandleResponse handles the UpdateOptionalResource response.
func (client *JSONMergePatchClient) updateOptionalResourceHandleResponse(resp *http.Response) (JSONMergePatchClientUpdateOptionalResourceResponse, error) {
	result := JSONMergePatchClientUpdateOptionalResourceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Resource); err != nil {
		return JSONMergePatchClientUpdateOptionalResourceResponse{}, err
	}
	return result, nil
}

// UpdateResource - Test content-type: application/merge-patch+json with required body
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - JSONMergePatchClientUpdateResourceOptions contains the optional parameters for the JSONMergePatchClient.UpdateResource
//     method.
func (client *JSONMergePatchClient) UpdateResource(ctx context.Context, body ResourcePatch, options *JSONMergePatchClientUpdateResourceOptions) (JSONMergePatchClientUpdateResourceResponse, error) {
	var err error
	const operationName = "JSONMergePatchClient.UpdateResource"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateResourceCreateRequest(ctx, body, options)
	if err != nil {
		return JSONMergePatchClientUpdateResourceResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return JSONMergePatchClientUpdateResourceResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return JSONMergePatchClientUpdateResourceResponse{}, err
	}
	resp, err := client.updateResourceHandleResponse(httpResp)
	return resp, err
}

// updateResourceCreateRequest creates the UpdateResource request.
func (client *JSONMergePatchClient) updateResourceCreateRequest(ctx context.Context, body ResourcePatch, _ *JSONMergePatchClientUpdateResourceOptions) (*policy.Request, error) {
	urlPath := "/json-merge-patch/update/resource"
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/merge-patch+json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// updateResourceHandleResponse handles the UpdateResource response.
func (client *JSONMergePatchClient) updateResourceHandleResponse(resp *http.Response) (JSONMergePatchClientUpdateResourceResponse, error) {
	result := JSONMergePatchClientUpdateResourceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Resource); err != nil {
		return JSONMergePatchClientUpdateResourceResponse{}, err
	}
	return result, nil
}
