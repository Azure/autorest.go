// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package multipartgroup

import (
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"reflect"
)

// MarshalJSON implements the json.Marshaller interface for type Address.
func (a Address) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "city", a.City)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Address.
func (a *Address) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "city":
			err = unpopulate(val, "City", &a.City)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type BinaryArrayPartsRequest.
func (b BinaryArrayPartsRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "id", b.ID)
	populateByteArray(objectMap, "pictures", b.Pictures, func() any {
		encodedValue := make([]string, len(b.Pictures))
		for i := 0; i < len(b.Pictures); i++ {
			encodedValue[i] = runtime.EncodeByteArray(b.Pictures[i], runtime.Base64StdFormat)
		}
		return encodedValue
	})
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BinaryArrayPartsRequest.
func (b *BinaryArrayPartsRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", b, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &b.ID)
			delete(rawMsg, key)
		case "pictures":
			var encodedValue []string
			err = unpopulate(val, "Pictures", &encodedValue)
			if err == nil && len(encodedValue) > 0 {
				b.Pictures = make([][]byte, len(encodedValue))
				for i := 0; i < len(encodedValue) && err == nil; i++ {
					err = runtime.DecodeByteArray(encodedValue[i], &b.Pictures[i], runtime.Base64StdFormat)
				}
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", b, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ComplexPartsRequest.
func (c ComplexPartsRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "address", c.Address)
	populate(objectMap, "id", c.ID)
	populateByteArray(objectMap, "pictures", c.Pictures, func() any {
		encodedValue := make([]string, len(c.Pictures))
		for i := 0; i < len(c.Pictures); i++ {
			encodedValue[i] = runtime.EncodeByteArray(c.Pictures[i], runtime.Base64StdFormat)
		}
		return encodedValue
	})
	populate(objectMap, "previousAddresses", c.PreviousAddresses)
	populateByteArray(objectMap, "profileImage", c.ProfileImage, func() any {
		return runtime.EncodeByteArray(c.ProfileImage, runtime.Base64StdFormat)
	})
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ComplexPartsRequest.
func (c *ComplexPartsRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "address":
			err = unpopulate(val, "Address", &c.Address)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &c.ID)
			delete(rawMsg, key)
		case "pictures":
			var encodedValue []string
			err = unpopulate(val, "Pictures", &encodedValue)
			if err == nil && len(encodedValue) > 0 {
				c.Pictures = make([][]byte, len(encodedValue))
				for i := 0; i < len(encodedValue) && err == nil; i++ {
					err = runtime.DecodeByteArray(encodedValue[i], &c.Pictures[i], runtime.Base64StdFormat)
				}
			}
			delete(rawMsg, key)
		case "previousAddresses":
			err = unpopulate(val, "PreviousAddresses", &c.PreviousAddresses)
			delete(rawMsg, key)
		case "profileImage":
			if val != nil && string(val) != "null" {
				err = runtime.DecodeByteArray(string(val), &c.ProfileImage, runtime.Base64StdFormat)
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type JSONArrayPartsRequest.
func (j JSONArrayPartsRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "previousAddresses", j.PreviousAddresses)
	populateByteArray(objectMap, "profileImage", j.ProfileImage, func() any {
		return runtime.EncodeByteArray(j.ProfileImage, runtime.Base64StdFormat)
	})
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type JSONArrayPartsRequest.
func (j *JSONArrayPartsRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", j, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "previousAddresses":
			err = unpopulate(val, "PreviousAddresses", &j.PreviousAddresses)
			delete(rawMsg, key)
		case "profileImage":
			if val != nil && string(val) != "null" {
				err = runtime.DecodeByteArray(string(val), &j.ProfileImage, runtime.Base64StdFormat)
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", j, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type JSONPartRequest.
func (j JSONPartRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "address", j.Address)
	populateByteArray(objectMap, "profileImage", j.ProfileImage, func() any {
		return runtime.EncodeByteArray(j.ProfileImage, runtime.Base64StdFormat)
	})
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type JSONPartRequest.
func (j *JSONPartRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", j, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "address":
			err = unpopulate(val, "Address", &j.Address)
			delete(rawMsg, key)
		case "profileImage":
			if val != nil && string(val) != "null" {
				err = runtime.DecodeByteArray(string(val), &j.ProfileImage, runtime.Base64StdFormat)
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", j, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MultiBinaryPartsRequest.
func (m MultiBinaryPartsRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populateByteArray(objectMap, "picture", m.Picture, func() any {
		return runtime.EncodeByteArray(m.Picture, runtime.Base64StdFormat)
	})
	populateByteArray(objectMap, "profileImage", m.ProfileImage, func() any {
		return runtime.EncodeByteArray(m.ProfileImage, runtime.Base64StdFormat)
	})
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MultiBinaryPartsRequest.
func (m *MultiBinaryPartsRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "picture":
			if val != nil && string(val) != "null" {
				err = runtime.DecodeByteArray(string(val), &m.Picture, runtime.Base64StdFormat)
			}
			delete(rawMsg, key)
		case "profileImage":
			if val != nil && string(val) != "null" {
				err = runtime.DecodeByteArray(string(val), &m.ProfileImage, runtime.Base64StdFormat)
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MultiPartRequest.
func (m MultiPartRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "id", m.ID)
	populateByteArray(objectMap, "profileImage", m.ProfileImage, func() any {
		return runtime.EncodeByteArray(m.ProfileImage, runtime.Base64StdFormat)
	})
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MultiPartRequest.
func (m *MultiPartRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &m.ID)
			delete(rawMsg, key)
		case "profileImage":
			if val != nil && string(val) != "null" {
				err = runtime.DecodeByteArray(string(val), &m.ProfileImage, runtime.Base64StdFormat)
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

func populate(m map[string]any, k string, v any) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func populateByteArray[T any](m map[string]any, k string, b []T, convert func() any) {
	if azcore.IsNullValue(b) {
		m[k] = nil
	} else if len(b) == 0 {
		return
	} else {
		m[k] = convert()
	}
}

func unpopulate(data json.RawMessage, fn string, v any) error {
	if data == nil || string(data) == "null" {
		return nil
	}
	if err := json.Unmarshal(data, v); err != nil {
		return fmt.Errorf("struct field %s: %v", fn, err)
	}
	return nil
}
