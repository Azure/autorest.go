// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package multipartgroup

import (
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// MarshalJSON implements the json.Marshaller interface for type Address.
func (a Address) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "city", a.City)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Address.
func (a *Address) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "city":
			err = unpopulate(val, "City", &a.City)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// toMultipartFormData converts BinaryArrayPartsRequest to multipart/form data.
func (b BinaryArrayPartsRequest) toMultipartFormData() (map[string]any, error) {
	objectMap := make(map[string]any)
	objectMap["id"] = b.ID
	objectMap["pictures"] = b.Pictures
	return objectMap, nil
}

// toMultipartFormData converts ComplexPartsRequest to multipart/form data.
func (c ComplexPartsRequest) toMultipartFormData() (map[string]any, error) {
	objectMap := make(map[string]any)
	if err := populateMultipartJSON(objectMap, "address", c.Address); err != nil {
		return nil, err
	}
	objectMap["id"] = c.ID
	objectMap["pictures"] = c.Pictures
	if err := populateMultipartJSON(objectMap, "previousAddresses", c.PreviousAddresses); err != nil {
		return nil, err
	}
	objectMap["profileImage"] = c.ProfileImage
	return objectMap, nil
}

// toMultipartFormData converts JSONArrayPartsRequest to multipart/form data.
func (j JSONArrayPartsRequest) toMultipartFormData() (map[string]any, error) {
	objectMap := make(map[string]any)
	if err := populateMultipartJSON(objectMap, "previousAddresses", j.PreviousAddresses); err != nil {
		return nil, err
	}
	objectMap["profileImage"] = j.ProfileImage
	return objectMap, nil
}

// toMultipartFormData converts JSONPartRequest to multipart/form data.
func (j JSONPartRequest) toMultipartFormData() (map[string]any, error) {
	objectMap := make(map[string]any)
	if err := populateMultipartJSON(objectMap, "address", j.Address); err != nil {
		return nil, err
	}
	objectMap["profileImage"] = j.ProfileImage
	return objectMap, nil
}

// toMultipartFormData converts MultiBinaryPartsRequest to multipart/form data.
func (m MultiBinaryPartsRequest) toMultipartFormData() (map[string]any, error) {
	objectMap := make(map[string]any)
	objectMap["picture"] = m.Picture
	objectMap["profileImage"] = m.ProfileImage
	return objectMap, nil
}

// toMultipartFormData converts MultiPartRequest to multipart/form data.
func (m MultiPartRequest) toMultipartFormData() (map[string]any, error) {
	objectMap := make(map[string]any)
	objectMap["id"] = m.ID
	objectMap["profileImage"] = m.ProfileImage
	return objectMap, nil
}

func populate(m map[string]any, k string, v any) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, fn string, v any) error {
	if data == nil || string(data) == "null" {
		return nil
	}
	if err := json.Unmarshal(data, v); err != nil {
		return fmt.Errorf("struct field %s: %v", fn, err)
	}
	return nil
}

func populateMultipartJSON(m map[string]any, k string, v any) error {
	data, err := json.Marshal(v)
	if err != nil {
		return err
	}
	m[k] = data
	return nil
}
