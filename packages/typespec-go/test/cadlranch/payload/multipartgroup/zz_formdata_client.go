// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package multipartgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// FormDataClient contains the methods for the Payload.MultiPart namespace.
// Don't use this type directly, use [MultiPartClient.NewFormDataClient] instead.
type FormDataClient struct {
	internal *azcore.Client
}

// Basic - Test content-type: multipart/form-data
//   - options - FormDataClientBasicOptions contains the optional parameters for the FormDataClient.Basic method.
func (client *FormDataClient) Basic(ctx context.Context, body MultiPartRequest, options *FormDataClientBasicOptions) (FormDataClientBasicResponse, error) {
	var err error
	req, err := client.basicCreateRequest(ctx, body, options)
	if err != nil {
		return FormDataClientBasicResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FormDataClientBasicResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return FormDataClientBasicResponse{}, err
	}
	return FormDataClientBasicResponse{}, nil
}

// basicCreateRequest creates the Basic request.
func (client *FormDataClient) basicCreateRequest(ctx context.Context, body MultiPartRequest, options *FormDataClientBasicOptions) (*policy.Request, error) {
	urlPath := "/multipart/form-data/mixed-parts"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"multipart/form-data"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// BinaryArrayParts - Test content-type: multipart/form-data for scenario contains multi binary parts
//   - options - FormDataClientBinaryArrayPartsOptions contains the optional parameters for the FormDataClient.BinaryArrayParts
//     method.
func (client *FormDataClient) BinaryArrayParts(ctx context.Context, body BinaryArrayPartsRequest, options *FormDataClientBinaryArrayPartsOptions) (FormDataClientBinaryArrayPartsResponse, error) {
	var err error
	req, err := client.binaryArrayPartsCreateRequest(ctx, body, options)
	if err != nil {
		return FormDataClientBinaryArrayPartsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FormDataClientBinaryArrayPartsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return FormDataClientBinaryArrayPartsResponse{}, err
	}
	return FormDataClientBinaryArrayPartsResponse{}, nil
}

// binaryArrayPartsCreateRequest creates the BinaryArrayParts request.
func (client *FormDataClient) binaryArrayPartsCreateRequest(ctx context.Context, body BinaryArrayPartsRequest, options *FormDataClientBinaryArrayPartsOptions) (*policy.Request, error) {
	urlPath := "/multipart/form-data/binary-array-parts"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"multipart/form-data"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// CheckFileNameAndContentType - Test content-type: multipart/form-data
//   - options - FormDataClientCheckFileNameAndContentTypeOptions contains the optional parameters for the FormDataClient.CheckFileNameAndContentType
//     method.
func (client *FormDataClient) CheckFileNameAndContentType(ctx context.Context, body MultiPartRequest, options *FormDataClientCheckFileNameAndContentTypeOptions) (FormDataClientCheckFileNameAndContentTypeResponse, error) {
	var err error
	req, err := client.checkFileNameAndContentTypeCreateRequest(ctx, body, options)
	if err != nil {
		return FormDataClientCheckFileNameAndContentTypeResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FormDataClientCheckFileNameAndContentTypeResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return FormDataClientCheckFileNameAndContentTypeResponse{}, err
	}
	return FormDataClientCheckFileNameAndContentTypeResponse{}, nil
}

// checkFileNameAndContentTypeCreateRequest creates the CheckFileNameAndContentType request.
func (client *FormDataClient) checkFileNameAndContentTypeCreateRequest(ctx context.Context, body MultiPartRequest, options *FormDataClientCheckFileNameAndContentTypeOptions) (*policy.Request, error) {
	urlPath := "/multipart/form-data/check-filename-and-content-type"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"multipart/form-data"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// Complex - Test content-type: multipart/form-data for mixed scenarios
//   - options - FormDataClientComplexOptions contains the optional parameters for the FormDataClient.Complex method.
func (client *FormDataClient) Complex(ctx context.Context, body ComplexPartsRequest, options *FormDataClientComplexOptions) (FormDataClientComplexResponse, error) {
	var err error
	req, err := client.complexCreateRequest(ctx, body, options)
	if err != nil {
		return FormDataClientComplexResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FormDataClientComplexResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return FormDataClientComplexResponse{}, err
	}
	return FormDataClientComplexResponse{}, nil
}

// complexCreateRequest creates the Complex request.
func (client *FormDataClient) complexCreateRequest(ctx context.Context, body ComplexPartsRequest, options *FormDataClientComplexOptions) (*policy.Request, error) {
	urlPath := "/multipart/form-data/complex-parts"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"multipart/form-data"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// JSONArrayParts - Test content-type: multipart/form-data for scenario contains multi json parts
//   - options - FormDataClientJSONArrayPartsOptions contains the optional parameters for the FormDataClient.JSONArrayParts method.
func (client *FormDataClient) JSONArrayParts(ctx context.Context, body JSONArrayPartsRequest, options *FormDataClientJSONArrayPartsOptions) (FormDataClientJSONArrayPartsResponse, error) {
	var err error
	req, err := client.jsonArrayPartsCreateRequest(ctx, body, options)
	if err != nil {
		return FormDataClientJSONArrayPartsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FormDataClientJSONArrayPartsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return FormDataClientJSONArrayPartsResponse{}, err
	}
	return FormDataClientJSONArrayPartsResponse{}, nil
}

// jsonArrayPartsCreateRequest creates the JSONArrayParts request.
func (client *FormDataClient) jsonArrayPartsCreateRequest(ctx context.Context, body JSONArrayPartsRequest, options *FormDataClientJSONArrayPartsOptions) (*policy.Request, error) {
	urlPath := "/multipart/form-data/json-array-parts"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"multipart/form-data"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// JSONPart - Test content-type: multipart/form-data for scenario contains json part and binary part
//   - options - FormDataClientJSONPartOptions contains the optional parameters for the FormDataClient.JSONPart method.
func (client *FormDataClient) JSONPart(ctx context.Context, body JSONPartRequest, options *FormDataClientJSONPartOptions) (FormDataClientJSONPartResponse, error) {
	var err error
	req, err := client.jsonPartCreateRequest(ctx, body, options)
	if err != nil {
		return FormDataClientJSONPartResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FormDataClientJSONPartResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return FormDataClientJSONPartResponse{}, err
	}
	return FormDataClientJSONPartResponse{}, nil
}

// jsonPartCreateRequest creates the JSONPart request.
func (client *FormDataClient) jsonPartCreateRequest(ctx context.Context, body JSONPartRequest, options *FormDataClientJSONPartOptions) (*policy.Request, error) {
	urlPath := "/multipart/form-data/json-part"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"multipart/form-data"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// MultiBinaryParts - Test content-type: multipart/form-data for scenario contains multi binary parts
//   - options - FormDataClientMultiBinaryPartsOptions contains the optional parameters for the FormDataClient.MultiBinaryParts
//     method.
func (client *FormDataClient) MultiBinaryParts(ctx context.Context, body MultiBinaryPartsRequest, options *FormDataClientMultiBinaryPartsOptions) (FormDataClientMultiBinaryPartsResponse, error) {
	var err error
	req, err := client.multiBinaryPartsCreateRequest(ctx, body, options)
	if err != nil {
		return FormDataClientMultiBinaryPartsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FormDataClientMultiBinaryPartsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return FormDataClientMultiBinaryPartsResponse{}, err
	}
	return FormDataClientMultiBinaryPartsResponse{}, nil
}

// multiBinaryPartsCreateRequest creates the MultiBinaryParts request.
func (client *FormDataClient) multiBinaryPartsCreateRequest(ctx context.Context, body MultiBinaryPartsRequest, options *FormDataClientMultiBinaryPartsOptions) (*policy.Request, error) {
	urlPath := "/multipart/form-data/multi-binary-parts"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"multipart/form-data"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}
