// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package contentneggroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// ContentNegotiationSameBodyClient contains the methods for the Payload.ContentNegotiation namespace.
// Don't use this type directly, use [ContentNegotiationClient.NewContentNegotiationSameBodyClient] instead.
type ContentNegotiationSameBodyClient struct {
	internal *azcore.Client
}

//   - options - ContentNegotiationSameBodyClientGetAvatarAsJPEGOptions contains the optional parameters for the ContentNegotiationSameBodyClient.GetAvatarAsJPEG
//     method.
func (client *ContentNegotiationSameBodyClient) GetAvatarAsJPEG(ctx context.Context, options *ContentNegotiationSameBodyClientGetAvatarAsJPEGOptions) (ContentNegotiationSameBodyClientGetAvatarAsJPEGResponse, error) {
	var err error
	const operationName = "ContentNegotiationSameBodyClient.GetAvatarAsJPEG"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getAvatarAsJPEGCreateRequest(ctx, options)
	if err != nil {
		return ContentNegotiationSameBodyClientGetAvatarAsJPEGResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ContentNegotiationSameBodyClientGetAvatarAsJPEGResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ContentNegotiationSameBodyClientGetAvatarAsJPEGResponse{}, err
	}
	return ContentNegotiationSameBodyClientGetAvatarAsJPEGResponse{Body: httpResp.Body}, nil
}

// getAvatarAsJPEGCreateRequest creates the GetAvatarAsJPEG request.
func (client *ContentNegotiationSameBodyClient) getAvatarAsJPEGCreateRequest(ctx context.Context, _ *ContentNegotiationSameBodyClientGetAvatarAsJPEGOptions) (*policy.Request, error) {
	urlPath := "/content-negotiation/same-body"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	runtime.SkipBodyDownload(req)
	req.Raw().Header["accept"] = []string{"image/jpeg"}
	return req, nil
}

//   - options - ContentNegotiationSameBodyClientGetAvatarAsPNGOptions contains the optional parameters for the ContentNegotiationSameBodyClient.GetAvatarAsPNG
//     method.
func (client *ContentNegotiationSameBodyClient) GetAvatarAsPNG(ctx context.Context, options *ContentNegotiationSameBodyClientGetAvatarAsPNGOptions) (ContentNegotiationSameBodyClientGetAvatarAsPNGResponse, error) {
	var err error
	const operationName = "ContentNegotiationSameBodyClient.GetAvatarAsPNG"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getAvatarAsPNGCreateRequest(ctx, options)
	if err != nil {
		return ContentNegotiationSameBodyClientGetAvatarAsPNGResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ContentNegotiationSameBodyClientGetAvatarAsPNGResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ContentNegotiationSameBodyClientGetAvatarAsPNGResponse{}, err
	}
	return ContentNegotiationSameBodyClientGetAvatarAsPNGResponse{Body: httpResp.Body}, nil
}

// getAvatarAsPNGCreateRequest creates the GetAvatarAsPNG request.
func (client *ContentNegotiationSameBodyClient) getAvatarAsPNGCreateRequest(ctx context.Context, _ *ContentNegotiationSameBodyClientGetAvatarAsPNGOptions) (*policy.Request, error) {
	urlPath := "/content-negotiation/same-body"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	runtime.SkipBodyDownload(req)
	req.Raw().Header["accept"] = []string{"image/png"}
	return req, nil
}
