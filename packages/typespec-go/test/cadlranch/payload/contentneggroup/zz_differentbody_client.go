// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package contentneggroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// DifferentBodyClient contains the methods for the Payload.ContentNegotiation namespace.
// Don't use this type directly, use [ContentNegotiationClient.NewDifferentBodyClient] instead.
type DifferentBodyClient struct {
	internal *azcore.Client
}

//   - options - DifferentBodyClientGetAvatarAsJSONOptions contains the optional parameters for the DifferentBodyClient.GetAvatarAsJSON
//     method.
func (client *DifferentBodyClient) GetAvatarAsJSON(ctx context.Context, options *DifferentBodyClientGetAvatarAsJSONOptions) (DifferentBodyClientGetAvatarAsJSONResponse, error) {
	var err error
	const operationName = "DifferentBodyClient.GetAvatarAsJSON"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getAvatarAsJSONCreateRequest(ctx, options)
	if err != nil {
		return DifferentBodyClientGetAvatarAsJSONResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DifferentBodyClientGetAvatarAsJSONResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DifferentBodyClientGetAvatarAsJSONResponse{}, err
	}
	resp, err := client.getAvatarAsJSONHandleResponse(httpResp)
	return resp, err
}

// getAvatarAsJSONCreateRequest creates the GetAvatarAsJSON request.
func (client *DifferentBodyClient) getAvatarAsJSONCreateRequest(ctx context.Context, options *DifferentBodyClientGetAvatarAsJSONOptions) (*policy.Request, error) {
	urlPath := "/content-negotiation/different-body"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["accept"] = []string{"application/json"}
	return req, nil
}

// getAvatarAsJSONHandleResponse handles the GetAvatarAsJSON response.
func (client *DifferentBodyClient) getAvatarAsJSONHandleResponse(resp *http.Response) (DifferentBodyClientGetAvatarAsJSONResponse, error) {
	result := DifferentBodyClientGetAvatarAsJSONResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PNGImageAsJSON); err != nil {
		return DifferentBodyClientGetAvatarAsJSONResponse{}, err
	}
	return result, nil
}

//   - options - DifferentBodyClientGetAvatarAsPNGOptions contains the optional parameters for the DifferentBodyClient.GetAvatarAsPNG
//     method.
func (client *DifferentBodyClient) GetAvatarAsPNG(ctx context.Context, options *DifferentBodyClientGetAvatarAsPNGOptions) (DifferentBodyClientGetAvatarAsPNGResponse, error) {
	var err error
	const operationName = "DifferentBodyClient.GetAvatarAsPNG"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getAvatarAsPNGCreateRequest(ctx, options)
	if err != nil {
		return DifferentBodyClientGetAvatarAsPNGResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DifferentBodyClientGetAvatarAsPNGResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DifferentBodyClientGetAvatarAsPNGResponse{}, err
	}
	return DifferentBodyClientGetAvatarAsPNGResponse{Body: httpResp.Body}, nil
}

// getAvatarAsPNGCreateRequest creates the GetAvatarAsPNG request.
func (client *DifferentBodyClient) getAvatarAsPNGCreateRequest(ctx context.Context, options *DifferentBodyClientGetAvatarAsPNGOptions) (*policy.Request, error) {
	urlPath := "/content-negotiation/different-body"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	runtime.SkipBodyDownload(req)
	req.Raw().Header["accept"] = []string{"image/png"}
	return req, nil
}
