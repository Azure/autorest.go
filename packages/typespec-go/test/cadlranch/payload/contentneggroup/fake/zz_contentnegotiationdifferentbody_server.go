// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"contentneggroup"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// ContentNegotiationDifferentBodyServer is a fake server for instances of the contentneggroup.ContentNegotiationDifferentBodyClient type.
type ContentNegotiationDifferentBodyServer struct {
	// GetAvatarAsJSON is the fake for method ContentNegotiationDifferentBodyClient.GetAvatarAsJSON
	// HTTP status codes to indicate success: http.StatusOK
	GetAvatarAsJSON func(ctx context.Context, options *contentneggroup.ContentNegotiationDifferentBodyClientGetAvatarAsJSONOptions) (resp azfake.Responder[contentneggroup.ContentNegotiationDifferentBodyClientGetAvatarAsJSONResponse], errResp azfake.ErrorResponder)

	// GetAvatarAsPNG is the fake for method ContentNegotiationDifferentBodyClient.GetAvatarAsPNG
	// HTTP status codes to indicate success: http.StatusOK
	GetAvatarAsPNG func(ctx context.Context, options *contentneggroup.ContentNegotiationDifferentBodyClientGetAvatarAsPNGOptions) (resp azfake.Responder[contentneggroup.ContentNegotiationDifferentBodyClientGetAvatarAsPNGResponse], errResp azfake.ErrorResponder)
}

// NewContentNegotiationDifferentBodyServerTransport creates a new instance of ContentNegotiationDifferentBodyServerTransport with the provided implementation.
// The returned ContentNegotiationDifferentBodyServerTransport instance is connected to an instance of contentneggroup.ContentNegotiationDifferentBodyClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewContentNegotiationDifferentBodyServerTransport(srv *ContentNegotiationDifferentBodyServer) *ContentNegotiationDifferentBodyServerTransport {
	return &ContentNegotiationDifferentBodyServerTransport{srv: srv}
}

// ContentNegotiationDifferentBodyServerTransport connects instances of contentneggroup.ContentNegotiationDifferentBodyClient to instances of ContentNegotiationDifferentBodyServer.
// Don't use this type directly, use NewContentNegotiationDifferentBodyServerTransport instead.
type ContentNegotiationDifferentBodyServerTransport struct {
	srv *ContentNegotiationDifferentBodyServer
}

// Do implements the policy.Transporter interface for ContentNegotiationDifferentBodyServerTransport.
func (c *ContentNegotiationDifferentBodyServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return c.dispatchToMethodFake(req, method)
}

func (c *ContentNegotiationDifferentBodyServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "ContentNegotiationDifferentBodyClient.GetAvatarAsJSON":
		resp, err = c.dispatchGetAvatarAsJSON(req)
	case "ContentNegotiationDifferentBodyClient.GetAvatarAsPNG":
		resp, err = c.dispatchGetAvatarAsPNG(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (c *ContentNegotiationDifferentBodyServerTransport) dispatchGetAvatarAsJSON(req *http.Request) (*http.Response, error) {
	if c.srv.GetAvatarAsJSON == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetAvatarAsJSON not implemented")}
	}
	respr, errRespr := c.srv.GetAvatarAsJSON(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).PNGImageAsJSON, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *ContentNegotiationDifferentBodyServerTransport) dispatchGetAvatarAsPNG(req *http.Request) (*http.Response, error) {
	if c.srv.GetAvatarAsPNG == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetAvatarAsPNG not implemented")}
	}
	respr, errRespr := c.srv.GetAvatarAsPNG(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, &server.ResponseOptions{
		Body:        server.GetResponse(respr).Body,
		ContentType: req.Header.Get("Content-Type"),
	})
	if err != nil {
		return nil, err
	}
	return resp, nil
}
