// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"contentneggroup"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// SameBodyServer is a fake server for instances of the contentneggroup.SameBodyClient type.
type SameBodyServer struct {
	// GetAvatarAsJPEG is the fake for method SameBodyClient.GetAvatarAsJPEG
	// HTTP status codes to indicate success: http.StatusOK
	GetAvatarAsJPEG func(ctx context.Context, options *contentneggroup.SameBodyClientGetAvatarAsJPEGOptions) (resp azfake.Responder[contentneggroup.SameBodyClientGetAvatarAsJPEGResponse], errResp azfake.ErrorResponder)

	// GetAvatarAsPNG is the fake for method SameBodyClient.GetAvatarAsPNG
	// HTTP status codes to indicate success: http.StatusOK
	GetAvatarAsPNG func(ctx context.Context, options *contentneggroup.SameBodyClientGetAvatarAsPNGOptions) (resp azfake.Responder[contentneggroup.SameBodyClientGetAvatarAsPNGResponse], errResp azfake.ErrorResponder)
}

// NewSameBodyServerTransport creates a new instance of SameBodyServerTransport with the provided implementation.
// The returned SameBodyServerTransport instance is connected to an instance of contentneggroup.SameBodyClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSameBodyServerTransport(srv *SameBodyServer) *SameBodyServerTransport {
	return &SameBodyServerTransport{srv: srv}
}

// SameBodyServerTransport connects instances of contentneggroup.SameBodyClient to instances of SameBodyServer.
// Don't use this type directly, use NewSameBodyServerTransport instead.
type SameBodyServerTransport struct {
	srv *SameBodyServer
}

// Do implements the policy.Transporter interface for SameBodyServerTransport.
func (s *SameBodyServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToMethodFake(req, method)
}

func (s *SameBodyServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "SameBodyClient.GetAvatarAsJPEG":
		resp, err = s.dispatchGetAvatarAsJPEG(req)
	case "SameBodyClient.GetAvatarAsPNG":
		resp, err = s.dispatchGetAvatarAsPNG(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (s *SameBodyServerTransport) dispatchGetAvatarAsJPEG(req *http.Request) (*http.Response, error) {
	if s.srv.GetAvatarAsJPEG == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetAvatarAsJPEG not implemented")}
	}
	respr, errRespr := s.srv.GetAvatarAsJPEG(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, &server.ResponseOptions{
		Body:        server.GetResponse(respr).Body,
		ContentType: req.Header.Get("Content-Type"),
	})
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SameBodyServerTransport) dispatchGetAvatarAsPNG(req *http.Request) (*http.Response, error) {
	if s.srv.GetAvatarAsPNG == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetAvatarAsPNG not implemented")}
	}
	respr, errRespr := s.srv.GetAvatarAsPNG(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, &server.ResponseOptions{
		Body:        server.GetResponse(respr).Body,
		ContentType: req.Header.Get("Content-Type"),
	})
	if err != nil {
		return nil, err
	}
	return resp, nil
}
