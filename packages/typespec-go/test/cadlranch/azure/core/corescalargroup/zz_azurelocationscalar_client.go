// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package corescalargroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// AzureLocationScalarClient contains the methods for the _Specs_.Azure.Core.Scalar namespace.
// Don't use this type directly, use [ScalarClient.NewAzureLocationScalarClient] instead.
type AzureLocationScalarClient struct {
	internal *azcore.Client
}

// Get - get azureLocation value
//   - options - AzureLocationScalarClientGetOptions contains the optional parameters for the AzureLocationScalarClient.Get method.
func (client *AzureLocationScalarClient) Get(ctx context.Context, options *AzureLocationScalarClientGetOptions) (AzureLocationScalarClientGetResponse, error) {
	var err error
	const operationName = "AzureLocationScalarClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, options)
	if err != nil {
		return AzureLocationScalarClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AzureLocationScalarClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AzureLocationScalarClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *AzureLocationScalarClient) getCreateRequest(ctx context.Context, options *AzureLocationScalarClientGetOptions) (*policy.Request, error) {
	urlPath := "/azure/core/scalar/azureLocation"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *AzureLocationScalarClient) getHandleResponse(resp *http.Response) (AzureLocationScalarClientGetResponse, error) {
	result := AzureLocationScalarClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return AzureLocationScalarClientGetResponse{}, err
	}
	return result, nil
}

// Header - azureLocation value header
//   - region - _
//   - options - AzureLocationScalarClientHeaderOptions contains the optional parameters for the AzureLocationScalarClient.Header
//     method.
func (client *AzureLocationScalarClient) Header(ctx context.Context, region string, options *AzureLocationScalarClientHeaderOptions) (AzureLocationScalarClientHeaderResponse, error) {
	var err error
	const operationName = "AzureLocationScalarClient.Header"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.headerCreateRequest(ctx, region, options)
	if err != nil {
		return AzureLocationScalarClientHeaderResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AzureLocationScalarClientHeaderResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return AzureLocationScalarClientHeaderResponse{}, err
	}
	return AzureLocationScalarClientHeaderResponse{}, nil
}

// headerCreateRequest creates the Header request.
func (client *AzureLocationScalarClient) headerCreateRequest(ctx context.Context, region string, options *AzureLocationScalarClientHeaderOptions) (*policy.Request, error) {
	urlPath := "/azure/core/scalar/azureLocation/header"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["region"] = []string{region}
	return req, nil
}

// Post - post a model which has azureLocation property
//   - body - _
//   - options - AzureLocationScalarClientPostOptions contains the optional parameters for the AzureLocationScalarClient.Post
//     method.
func (client *AzureLocationScalarClient) Post(ctx context.Context, body AzureLocationModel, options *AzureLocationScalarClientPostOptions) (AzureLocationScalarClientPostResponse, error) {
	var err error
	const operationName = "AzureLocationScalarClient.Post"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.postCreateRequest(ctx, body, options)
	if err != nil {
		return AzureLocationScalarClientPostResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AzureLocationScalarClientPostResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AzureLocationScalarClientPostResponse{}, err
	}
	resp, err := client.postHandleResponse(httpResp)
	return resp, err
}

// postCreateRequest creates the Post request.
func (client *AzureLocationScalarClient) postCreateRequest(ctx context.Context, body AzureLocationModel, options *AzureLocationScalarClientPostOptions) (*policy.Request, error) {
	urlPath := "/azure/core/scalar/azureLocation"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// postHandleResponse handles the Post response.
func (client *AzureLocationScalarClient) postHandleResponse(resp *http.Response) (AzureLocationScalarClientPostResponse, error) {
	result := AzureLocationScalarClientPostResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AzureLocationModel); err != nil {
		return AzureLocationScalarClientPostResponse{}, err
	}
	return result, nil
}

// Put - put azureLocation value
//   - body - _
//   - options - AzureLocationScalarClientPutOptions contains the optional parameters for the AzureLocationScalarClient.Put method.
func (client *AzureLocationScalarClient) Put(ctx context.Context, body string, options *AzureLocationScalarClientPutOptions) (AzureLocationScalarClientPutResponse, error) {
	var err error
	const operationName = "AzureLocationScalarClient.Put"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putCreateRequest(ctx, body, options)
	if err != nil {
		return AzureLocationScalarClientPutResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AzureLocationScalarClientPutResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return AzureLocationScalarClientPutResponse{}, err
	}
	return AzureLocationScalarClientPutResponse{}, nil
}

// putCreateRequest creates the Put request.
func (client *AzureLocationScalarClient) putCreateRequest(ctx context.Context, body string, options *AzureLocationScalarClientPutOptions) (*policy.Request, error) {
	urlPath := "/azure/core/scalar/azureLocation"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// Query - azureLocation value query
//   - region - _
//   - options - AzureLocationScalarClientQueryOptions contains the optional parameters for the AzureLocationScalarClient.Query
//     method.
func (client *AzureLocationScalarClient) Query(ctx context.Context, region string, options *AzureLocationScalarClientQueryOptions) (AzureLocationScalarClientQueryResponse, error) {
	var err error
	const operationName = "AzureLocationScalarClient.Query"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.queryCreateRequest(ctx, region, options)
	if err != nil {
		return AzureLocationScalarClientQueryResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AzureLocationScalarClientQueryResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return AzureLocationScalarClientQueryResponse{}, err
	}
	return AzureLocationScalarClientQueryResponse{}, nil
}

// queryCreateRequest creates the Query request.
func (client *AzureLocationScalarClient) queryCreateRequest(ctx context.Context, region string, options *AzureLocationScalarClientQueryOptions) (*policy.Request, error) {
	urlPath := "/azure/core/scalar/azureLocation/query"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("region", region)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}
