// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"lrolegacygroup"
	"net/http"
	"net/url"
	"regexp"
)

// LegacyCreateResourcePollViaOperationLocationServer is a fake server for instances of the lrolegacygroup.LegacyCreateResourcePollViaOperationLocationClient type.
type LegacyCreateResourcePollViaOperationLocationServer struct {
	// BeginCreateJob is the fake for method LegacyCreateResourcePollViaOperationLocationClient.BeginCreateJob
	// HTTP status codes to indicate success: http.StatusAccepted
	BeginCreateJob func(ctx context.Context, jobData lrolegacygroup.JobData, options *lrolegacygroup.LegacyCreateResourcePollViaOperationLocationClientCreateJobOptions) (resp azfake.PollerResponder[lrolegacygroup.LegacyCreateResourcePollViaOperationLocationClientCreateJobResponse], errResp azfake.ErrorResponder)

	// GetJob is the fake for method LegacyCreateResourcePollViaOperationLocationClient.GetJob
	// HTTP status codes to indicate success: http.StatusOK
	GetJob func(ctx context.Context, jobID string, options *lrolegacygroup.LegacyCreateResourcePollViaOperationLocationClientGetJobOptions) (resp azfake.Responder[lrolegacygroup.LegacyCreateResourcePollViaOperationLocationClientGetJobResponse], errResp azfake.ErrorResponder)
}

// NewLegacyCreateResourcePollViaOperationLocationServerTransport creates a new instance of LegacyCreateResourcePollViaOperationLocationServerTransport with the provided implementation.
// The returned LegacyCreateResourcePollViaOperationLocationServerTransport instance is connected to an instance of lrolegacygroup.LegacyCreateResourcePollViaOperationLocationClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewLegacyCreateResourcePollViaOperationLocationServerTransport(srv *LegacyCreateResourcePollViaOperationLocationServer) *LegacyCreateResourcePollViaOperationLocationServerTransport {
	return &LegacyCreateResourcePollViaOperationLocationServerTransport{
		srv:            srv,
		beginCreateJob: newTracker[azfake.PollerResponder[lrolegacygroup.LegacyCreateResourcePollViaOperationLocationClientCreateJobResponse]](),
	}
}

// LegacyCreateResourcePollViaOperationLocationServerTransport connects instances of lrolegacygroup.LegacyCreateResourcePollViaOperationLocationClient to instances of LegacyCreateResourcePollViaOperationLocationServer.
// Don't use this type directly, use NewLegacyCreateResourcePollViaOperationLocationServerTransport instead.
type LegacyCreateResourcePollViaOperationLocationServerTransport struct {
	srv            *LegacyCreateResourcePollViaOperationLocationServer
	beginCreateJob *tracker[azfake.PollerResponder[lrolegacygroup.LegacyCreateResourcePollViaOperationLocationClientCreateJobResponse]]
}

// Do implements the policy.Transporter interface for LegacyCreateResourcePollViaOperationLocationServerTransport.
func (l *LegacyCreateResourcePollViaOperationLocationServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return l.dispatchToMethodFake(req, method)
}

func (l *LegacyCreateResourcePollViaOperationLocationServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "LegacyCreateResourcePollViaOperationLocationClient.BeginCreateJob":
		resp, err = l.dispatchBeginCreateJob(req)
	case "LegacyCreateResourcePollViaOperationLocationClient.GetJob":
		resp, err = l.dispatchGetJob(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (l *LegacyCreateResourcePollViaOperationLocationServerTransport) dispatchBeginCreateJob(req *http.Request) (*http.Response, error) {
	if l.srv.BeginCreateJob == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateJob not implemented")}
	}
	beginCreateJob := l.beginCreateJob.get(req)
	if beginCreateJob == nil {
		body, err := server.UnmarshalRequestAsJSON[lrolegacygroup.JobData](req)
		if err != nil {
			return nil, err
		}
		respr, errRespr := l.srv.BeginCreateJob(req.Context(), body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateJob = &respr
		l.beginCreateJob.add(req, beginCreateJob)
	}

	resp, err := server.PollerResponderNext(beginCreateJob, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusAccepted}, resp.StatusCode) {
		l.beginCreateJob.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateJob) {
		l.beginCreateJob.remove(req)
	}

	return resp, nil
}

func (l *LegacyCreateResourcePollViaOperationLocationServerTransport) dispatchGetJob(req *http.Request) (*http.Response, error) {
	if l.srv.GetJob == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetJob not implemented")}
	}
	const regexStr = `/azure/core/lro/rpc/legacy/create-resource-poll-via-operation-location/jobs/(?P<jobId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	jobIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("jobId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := l.srv.GetJob(req.Context(), jobIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).JobResult, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
