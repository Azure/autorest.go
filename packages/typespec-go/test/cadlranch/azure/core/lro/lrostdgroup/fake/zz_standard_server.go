// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"lrostdgroup"
	"net/http"
	"net/url"
	"regexp"
)

// StandardServer is a fake server for instances of the lrostdgroup.StandardClient type.
type StandardServer struct {
	// BeginCreateOrReplace is the fake for method StandardClient.BeginCreateOrReplace
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrReplace func(ctx context.Context, name string, resource lrostdgroup.User, options *lrostdgroup.StandardClientCreateOrReplaceOptions) (resp azfake.PollerResponder[lrostdgroup.StandardClientCreateOrReplaceResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method StandardClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusAccepted
	BeginDelete func(ctx context.Context, name string, options *lrostdgroup.StandardClientDeleteOptions) (resp azfake.PollerResponder[lrostdgroup.StandardClientDeleteResponse], errResp azfake.ErrorResponder)

	// BeginExport is the fake for method StandardClient.BeginExport
	// HTTP status codes to indicate success: http.StatusAccepted
	BeginExport func(ctx context.Context, name string, formatParam string, options *lrostdgroup.StandardClientExportOptions) (resp azfake.PollerResponder[lrostdgroup.StandardClientExportResponse], errResp azfake.ErrorResponder)
}

// NewStandardServerTransport creates a new instance of StandardServerTransport with the provided implementation.
// The returned StandardServerTransport instance is connected to an instance of lrostdgroup.StandardClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewStandardServerTransport(srv *StandardServer) *StandardServerTransport {
	return &StandardServerTransport{
		srv:                  srv,
		beginCreateOrReplace: newTracker[azfake.PollerResponder[lrostdgroup.StandardClientCreateOrReplaceResponse]](),
		beginDelete:          newTracker[azfake.PollerResponder[lrostdgroup.StandardClientDeleteResponse]](),
		beginExport:          newTracker[azfake.PollerResponder[lrostdgroup.StandardClientExportResponse]](),
	}
}

// StandardServerTransport connects instances of lrostdgroup.StandardClient to instances of StandardServer.
// Don't use this type directly, use NewStandardServerTransport instead.
type StandardServerTransport struct {
	srv                  *StandardServer
	beginCreateOrReplace *tracker[azfake.PollerResponder[lrostdgroup.StandardClientCreateOrReplaceResponse]]
	beginDelete          *tracker[azfake.PollerResponder[lrostdgroup.StandardClientDeleteResponse]]
	beginExport          *tracker[azfake.PollerResponder[lrostdgroup.StandardClientExportResponse]]
}

// Do implements the policy.Transporter interface for StandardServerTransport.
func (s *StandardServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "StandardClient.BeginCreateOrReplace":
		resp, err = s.dispatchBeginCreateOrReplace(req)
	case "StandardClient.BeginDelete":
		resp, err = s.dispatchBeginDelete(req)
	case "StandardClient.BeginExport":
		resp, err = s.dispatchBeginExport(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (s *StandardServerTransport) dispatchBeginCreateOrReplace(req *http.Request) (*http.Response, error) {
	if s.srv.BeginCreateOrReplace == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrReplace not implemented")}
	}
	beginCreateOrReplace := s.beginCreateOrReplace.get(req)
	if beginCreateOrReplace == nil {
		const regexStr = `/azure/core/lro/standard/users/(?P<name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[lrostdgroup.User](req)
		if err != nil {
			return nil, err
		}
		nameParam, err := url.PathUnescape(matches[regex.SubexpIndex("name")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginCreateOrReplace(req.Context(), nameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrReplace = &respr
		s.beginCreateOrReplace.add(req, beginCreateOrReplace)
	}

	resp, err := server.PollerResponderNext(beginCreateOrReplace, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		s.beginCreateOrReplace.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrReplace) {
		s.beginCreateOrReplace.remove(req)
	}

	return resp, nil
}

func (s *StandardServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if s.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := s.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/azure/core/lro/standard/users/(?P<name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		nameParam, err := url.PathUnescape(matches[regex.SubexpIndex("name")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginDelete(req.Context(), nameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		s.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusAccepted}, resp.StatusCode) {
		s.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		s.beginDelete.remove(req)
	}

	return resp, nil
}

func (s *StandardServerTransport) dispatchBeginExport(req *http.Request) (*http.Response, error) {
	if s.srv.BeginExport == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginExport not implemented")}
	}
	beginExport := s.beginExport.get(req)
	if beginExport == nil {
		const regexStr = `/azure/core/lro/standard/users/(?P<name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+):export`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		nameParam, err := url.PathUnescape(matches[regex.SubexpIndex("name")])
		if err != nil {
			return nil, err
		}
		formatParamParam, err := url.QueryUnescape(qp.Get("format"))
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginExport(req.Context(), nameParam, formatParamParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginExport = &respr
		s.beginExport.add(req, beginExport)
	}

	resp, err := server.PollerResponderNext(beginExport, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusAccepted}, resp.StatusCode) {
		s.beginExport.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginExport) {
		s.beginExport.remove(req)
	}

	return resp, nil
}
