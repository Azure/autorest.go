// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"basicgroup"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
)

// TwoModelsAsPageItemServer is a fake server for instances of the basicgroup.TwoModelsAsPageItemClient type.
type TwoModelsAsPageItemServer struct {
	// NewListFirstItemPager is the fake for method TwoModelsAsPageItemClient.NewListFirstItemPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListFirstItemPager func(options *basicgroup.TwoModelsAsPageItemClientListFirstItemOptions) (resp azfake.PagerResponder[basicgroup.TwoModelsAsPageItemClientListFirstItemResponse])

	// NewListSecondItemPager is the fake for method TwoModelsAsPageItemClient.NewListSecondItemPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListSecondItemPager func(options *basicgroup.TwoModelsAsPageItemClientListSecondItemOptions) (resp azfake.PagerResponder[basicgroup.TwoModelsAsPageItemClientListSecondItemResponse])
}

// NewTwoModelsAsPageItemServerTransport creates a new instance of TwoModelsAsPageItemServerTransport with the provided implementation.
// The returned TwoModelsAsPageItemServerTransport instance is connected to an instance of basicgroup.TwoModelsAsPageItemClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewTwoModelsAsPageItemServerTransport(srv *TwoModelsAsPageItemServer) *TwoModelsAsPageItemServerTransport {
	return &TwoModelsAsPageItemServerTransport{
		srv:                    srv,
		newListFirstItemPager:  newTracker[azfake.PagerResponder[basicgroup.TwoModelsAsPageItemClientListFirstItemResponse]](),
		newListSecondItemPager: newTracker[azfake.PagerResponder[basicgroup.TwoModelsAsPageItemClientListSecondItemResponse]](),
	}
}

// TwoModelsAsPageItemServerTransport connects instances of basicgroup.TwoModelsAsPageItemClient to instances of TwoModelsAsPageItemServer.
// Don't use this type directly, use NewTwoModelsAsPageItemServerTransport instead.
type TwoModelsAsPageItemServerTransport struct {
	srv                    *TwoModelsAsPageItemServer
	newListFirstItemPager  *tracker[azfake.PagerResponder[basicgroup.TwoModelsAsPageItemClientListFirstItemResponse]]
	newListSecondItemPager *tracker[azfake.PagerResponder[basicgroup.TwoModelsAsPageItemClientListSecondItemResponse]]
}

// Do implements the policy.Transporter interface for TwoModelsAsPageItemServerTransport.
func (t *TwoModelsAsPageItemServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "TwoModelsAsPageItemClient.NewListFirstItemPager":
		resp, err = t.dispatchNewListFirstItemPager(req)
	case "TwoModelsAsPageItemClient.NewListSecondItemPager":
		resp, err = t.dispatchNewListSecondItemPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (t *TwoModelsAsPageItemServerTransport) dispatchNewListFirstItemPager(req *http.Request) (*http.Response, error) {
	if t.srv.NewListFirstItemPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListFirstItemPager not implemented")}
	}
	newListFirstItemPager := t.newListFirstItemPager.get(req)
	if newListFirstItemPager == nil {
		resp := t.srv.NewListFirstItemPager(nil)
		newListFirstItemPager = &resp
		t.newListFirstItemPager.add(req, newListFirstItemPager)
		server.PagerResponderInjectNextLinks(newListFirstItemPager, req, func(page *basicgroup.TwoModelsAsPageItemClientListFirstItemResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListFirstItemPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		t.newListFirstItemPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListFirstItemPager) {
		t.newListFirstItemPager.remove(req)
	}
	return resp, nil
}

func (t *TwoModelsAsPageItemServerTransport) dispatchNewListSecondItemPager(req *http.Request) (*http.Response, error) {
	if t.srv.NewListSecondItemPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListSecondItemPager not implemented")}
	}
	newListSecondItemPager := t.newListSecondItemPager.get(req)
	if newListSecondItemPager == nil {
		resp := t.srv.NewListSecondItemPager(nil)
		newListSecondItemPager = &resp
		t.newListSecondItemPager.add(req, newListSecondItemPager)
		server.PagerResponderInjectNextLinks(newListSecondItemPager, req, func(page *basicgroup.TwoModelsAsPageItemClientListSecondItemResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListSecondItemPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		t.newListSecondItemPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListSecondItemPager) {
		t.newListSecondItemPager.remove(req)
	}
	return resp, nil
}
