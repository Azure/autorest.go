// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"azurepagegroup"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
)

// PageTwoModelsAsPageItemServer is a fake server for instances of the azurepagegroup.PageTwoModelsAsPageItemClient type.
type PageTwoModelsAsPageItemServer struct {
	// NewListFirstItemPager is the fake for method PageTwoModelsAsPageItemClient.NewListFirstItemPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListFirstItemPager func(options *azurepagegroup.PageTwoModelsAsPageItemClientListFirstItemOptions) (resp azfake.PagerResponder[azurepagegroup.PageTwoModelsAsPageItemClientListFirstItemResponse])

	// NewListSecondItemPager is the fake for method PageTwoModelsAsPageItemClient.NewListSecondItemPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListSecondItemPager func(options *azurepagegroup.PageTwoModelsAsPageItemClientListSecondItemOptions) (resp azfake.PagerResponder[azurepagegroup.PageTwoModelsAsPageItemClientListSecondItemResponse])
}

// NewPageTwoModelsAsPageItemServerTransport creates a new instance of PageTwoModelsAsPageItemServerTransport with the provided implementation.
// The returned PageTwoModelsAsPageItemServerTransport instance is connected to an instance of azurepagegroup.PageTwoModelsAsPageItemClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewPageTwoModelsAsPageItemServerTransport(srv *PageTwoModelsAsPageItemServer) *PageTwoModelsAsPageItemServerTransport {
	return &PageTwoModelsAsPageItemServerTransport{
		srv:                    srv,
		newListFirstItemPager:  newTracker[azfake.PagerResponder[azurepagegroup.PageTwoModelsAsPageItemClientListFirstItemResponse]](),
		newListSecondItemPager: newTracker[azfake.PagerResponder[azurepagegroup.PageTwoModelsAsPageItemClientListSecondItemResponse]](),
	}
}

// PageTwoModelsAsPageItemServerTransport connects instances of azurepagegroup.PageTwoModelsAsPageItemClient to instances of PageTwoModelsAsPageItemServer.
// Don't use this type directly, use NewPageTwoModelsAsPageItemServerTransport instead.
type PageTwoModelsAsPageItemServerTransport struct {
	srv                    *PageTwoModelsAsPageItemServer
	newListFirstItemPager  *tracker[azfake.PagerResponder[azurepagegroup.PageTwoModelsAsPageItemClientListFirstItemResponse]]
	newListSecondItemPager *tracker[azfake.PagerResponder[azurepagegroup.PageTwoModelsAsPageItemClientListSecondItemResponse]]
}

// Do implements the policy.Transporter interface for PageTwoModelsAsPageItemServerTransport.
func (p *PageTwoModelsAsPageItemServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return p.dispatchToMethodFake(req, method)
}

func (p *PageTwoModelsAsPageItemServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var res result
		switch method {
		case "PageTwoModelsAsPageItemClient.NewListFirstItemPager":
			res.resp, res.err = p.dispatchNewListFirstItemPager(req)
		case "PageTwoModelsAsPageItemClient.NewListSecondItemPager":
			res.resp, res.err = p.dispatchNewListSecondItemPager(req)
		default:
			res.err = fmt.Errorf("unhandled API %s", method)
		}

		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (p *PageTwoModelsAsPageItemServerTransport) dispatchNewListFirstItemPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewListFirstItemPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListFirstItemPager not implemented")}
	}
	newListFirstItemPager := p.newListFirstItemPager.get(req)
	if newListFirstItemPager == nil {
		resp := p.srv.NewListFirstItemPager(nil)
		newListFirstItemPager = &resp
		p.newListFirstItemPager.add(req, newListFirstItemPager)
		server.PagerResponderInjectNextLinks(newListFirstItemPager, req, func(page *azurepagegroup.PageTwoModelsAsPageItemClientListFirstItemResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListFirstItemPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newListFirstItemPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListFirstItemPager) {
		p.newListFirstItemPager.remove(req)
	}
	return resp, nil
}

func (p *PageTwoModelsAsPageItemServerTransport) dispatchNewListSecondItemPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewListSecondItemPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListSecondItemPager not implemented")}
	}
	newListSecondItemPager := p.newListSecondItemPager.get(req)
	if newListSecondItemPager == nil {
		resp := p.srv.NewListSecondItemPager(nil)
		newListSecondItemPager = &resp
		p.newListSecondItemPager.add(req, newListSecondItemPager)
		server.PagerResponderInjectNextLinks(newListSecondItemPager, req, func(page *azurepagegroup.PageTwoModelsAsPageItemClientListSecondItemResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListSecondItemPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newListSecondItemPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListSecondItemPager) {
		p.newListSecondItemPager.remove(req)
	}
	return resp, nil
}
