// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package accessgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// AccessInternalOperationClient contains the methods for the _Specs_.Azure.ClientGenerator.Core.Access namespace.
// Don't use this type directly, use [AccessClient.NewAccessInternalOperationClient] instead.
type AccessInternalOperationClient struct {
	internal *azcore.Client
}

//   - options - accessInternalOperationClientinternalDecoratorInInternalOptions contains the optional parameters for the AccessInternalOperationClient.internalDecoratorInInternal
//     method.
func (client *AccessInternalOperationClient) internalDecoratorInInternal(ctx context.Context, name string, options *accessInternalOperationClientinternalDecoratorInInternalOptions) (accessInternalOperationClientinternalDecoratorInInternalResponse, error) {
	var err error
	const operationName = "AccessInternalOperationClient.internalDecoratorInInternal"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.internalDecoratorInInternalCreateRequest(ctx, name, options)
	if err != nil {
		return accessInternalOperationClientinternalDecoratorInInternalResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return accessInternalOperationClientinternalDecoratorInInternalResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return accessInternalOperationClientinternalDecoratorInInternalResponse{}, err
	}
	resp, err := client.internalDecoratorInInternalHandleResponse(httpResp)
	return resp, err
}

// internalDecoratorInInternalCreateRequest creates the internalDecoratorInInternal request.
func (client *AccessInternalOperationClient) internalDecoratorInInternalCreateRequest(ctx context.Context, name string, _ *accessInternalOperationClientinternalDecoratorInInternalOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/access/internalOperation/internalDecoratorInInternal"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("name", name)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// internalDecoratorInInternalHandleResponse handles the internalDecoratorInInternal response.
func (client *AccessInternalOperationClient) internalDecoratorInInternalHandleResponse(resp *http.Response) (accessInternalOperationClientinternalDecoratorInInternalResponse, error) {
	result := accessInternalOperationClientinternalDecoratorInInternalResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.internalDecoratorModelInInternal); err != nil {
		return accessInternalOperationClientinternalDecoratorInInternalResponse{}, err
	}
	return result, nil
}

//   - options - accessInternalOperationClientnoDecoratorInInternalOptions contains the optional parameters for the AccessInternalOperationClient.noDecoratorInInternal
//     method.
func (client *AccessInternalOperationClient) noDecoratorInInternal(ctx context.Context, name string, options *accessInternalOperationClientnoDecoratorInInternalOptions) (accessInternalOperationClientnoDecoratorInInternalResponse, error) {
	var err error
	const operationName = "AccessInternalOperationClient.noDecoratorInInternal"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.noDecoratorInInternalCreateRequest(ctx, name, options)
	if err != nil {
		return accessInternalOperationClientnoDecoratorInInternalResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return accessInternalOperationClientnoDecoratorInInternalResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return accessInternalOperationClientnoDecoratorInInternalResponse{}, err
	}
	resp, err := client.noDecoratorInInternalHandleResponse(httpResp)
	return resp, err
}

// noDecoratorInInternalCreateRequest creates the noDecoratorInInternal request.
func (client *AccessInternalOperationClient) noDecoratorInInternalCreateRequest(ctx context.Context, name string, _ *accessInternalOperationClientnoDecoratorInInternalOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/access/internalOperation/noDecoratorInInternal"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("name", name)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// noDecoratorInInternalHandleResponse handles the noDecoratorInInternal response.
func (client *AccessInternalOperationClient) noDecoratorInInternalHandleResponse(resp *http.Response) (accessInternalOperationClientnoDecoratorInInternalResponse, error) {
	result := accessInternalOperationClientnoDecoratorInInternalResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.noDecoratorModelInInternal); err != nil {
		return accessInternalOperationClientnoDecoratorInInternalResponse{}, err
	}
	return result, nil
}

//   - options - accessInternalOperationClientpublicDecoratorInInternalOptions contains the optional parameters for the AccessInternalOperationClient.publicDecoratorInInternal
//     method.
func (client *AccessInternalOperationClient) publicDecoratorInInternal(ctx context.Context, name string, options *accessInternalOperationClientpublicDecoratorInInternalOptions) (accessInternalOperationClientpublicDecoratorInInternalResponse, error) {
	var err error
	const operationName = "AccessInternalOperationClient.publicDecoratorInInternal"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.publicDecoratorInInternalCreateRequest(ctx, name, options)
	if err != nil {
		return accessInternalOperationClientpublicDecoratorInInternalResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return accessInternalOperationClientpublicDecoratorInInternalResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return accessInternalOperationClientpublicDecoratorInInternalResponse{}, err
	}
	resp, err := client.publicDecoratorInInternalHandleResponse(httpResp)
	return resp, err
}

// publicDecoratorInInternalCreateRequest creates the publicDecoratorInInternal request.
func (client *AccessInternalOperationClient) publicDecoratorInInternalCreateRequest(ctx context.Context, name string, _ *accessInternalOperationClientpublicDecoratorInInternalOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/access/internalOperation/publicDecoratorInInternal"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("name", name)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// publicDecoratorInInternalHandleResponse handles the publicDecoratorInInternal response.
func (client *AccessInternalOperationClient) publicDecoratorInInternalHandleResponse(resp *http.Response) (accessInternalOperationClientpublicDecoratorInInternalResponse, error) {
	result := accessInternalOperationClientpublicDecoratorInInternalResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PublicDecoratorModelInInternal); err != nil {
		return accessInternalOperationClientpublicDecoratorInInternalResponse{}, err
	}
	return result, nil
}
