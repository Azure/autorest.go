// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"accessgroup"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
)

// RelativeModelInOperationServer is a fake server for instances of the accessgroup.RelativeModelInOperationClient type.
type RelativeModelInOperationServer struct {
	// discriminator is the fake for method RelativeModelInOperationClient.discriminator
	// HTTP status codes to indicate success: http.StatusOK
	discriminator func(ctx context.Context, kind string, options *accessgroup.relativeModelInOperationClientdiscriminatorOptions) (resp azfake.Responder[accessgroup.relativeModelInOperationClientdiscriminatorResponse], errResp azfake.ErrorResponder)

	// operation is the fake for method RelativeModelInOperationClient.operation
	// HTTP status codes to indicate success: http.StatusOK
	operation func(ctx context.Context, name string, options *accessgroup.relativeModelInOperationClientoperationOptions) (resp azfake.Responder[accessgroup.relativeModelInOperationClientoperationResponse], errResp azfake.ErrorResponder)
}

// NewRelativeModelInOperationServerTransport creates a new instance of RelativeModelInOperationServerTransport with the provided implementation.
// The returned RelativeModelInOperationServerTransport instance is connected to an instance of accessgroup.RelativeModelInOperationClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewRelativeModelInOperationServerTransport(srv *RelativeModelInOperationServer) *RelativeModelInOperationServerTransport {
	return &RelativeModelInOperationServerTransport{srv: srv}
}

// RelativeModelInOperationServerTransport connects instances of accessgroup.RelativeModelInOperationClient to instances of RelativeModelInOperationServer.
// Don't use this type directly, use NewRelativeModelInOperationServerTransport instead.
type RelativeModelInOperationServerTransport struct {
	srv *RelativeModelInOperationServer
}

// Do implements the policy.Transporter interface for RelativeModelInOperationServerTransport.
func (r *RelativeModelInOperationServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "RelativeModelInOperationClient.discriminator":
		resp, err = r.dispatchdiscriminator(req)
	case "RelativeModelInOperationClient.operation":
		resp, err = r.dispatchoperation(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (r *RelativeModelInOperationServerTransport) dispatchdiscriminator(req *http.Request) (*http.Response, error) {
	if r.srv.discriminator == nil {
		return nil, &nonRetriableError{errors.New("fake for method discriminator not implemented")}
	}
	qp := req.URL.Query()
	kindParam, err := url.QueryUnescape(qp.Get("kind"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := r.srv.discriminator(req.Context(), kindParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).abstractModelClassification, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *RelativeModelInOperationServerTransport) dispatchoperation(req *http.Request) (*http.Response, error) {
	if r.srv.operation == nil {
		return nil, &nonRetriableError{errors.New("fake for method operation not implemented")}
	}
	qp := req.URL.Query()
	nameParam, err := url.QueryUnescape(qp.Get("name"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := r.srv.operation(req.Context(), nameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).outerModel, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
