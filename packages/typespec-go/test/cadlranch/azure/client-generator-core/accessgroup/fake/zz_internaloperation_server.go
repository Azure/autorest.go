// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"accessgroup"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
)

// InternalOperationServer is a fake server for instances of the accessgroup.InternalOperationClient type.
type InternalOperationServer struct {
	// internalDecoratorInInternal is the fake for method InternalOperationClient.internalDecoratorInInternal
	// HTTP status codes to indicate success: http.StatusOK
	internalDecoratorInInternal func(ctx context.Context, name string, options *accessgroup.internalOperationClientinternalDecoratorInInternalOptions) (resp azfake.Responder[accessgroup.internalOperationClientinternalDecoratorInInternalResponse], errResp azfake.ErrorResponder)

	// noDecoratorInInternal is the fake for method InternalOperationClient.noDecoratorInInternal
	// HTTP status codes to indicate success: http.StatusOK
	noDecoratorInInternal func(ctx context.Context, name string, options *accessgroup.internalOperationClientnoDecoratorInInternalOptions) (resp azfake.Responder[accessgroup.internalOperationClientnoDecoratorInInternalResponse], errResp azfake.ErrorResponder)

	// publicDecoratorInInternal is the fake for method InternalOperationClient.publicDecoratorInInternal
	// HTTP status codes to indicate success: http.StatusOK
	publicDecoratorInInternal func(ctx context.Context, name string, options *accessgroup.internalOperationClientpublicDecoratorInInternalOptions) (resp azfake.Responder[accessgroup.internalOperationClientpublicDecoratorInInternalResponse], errResp azfake.ErrorResponder)
}

// NewInternalOperationServerTransport creates a new instance of InternalOperationServerTransport with the provided implementation.
// The returned InternalOperationServerTransport instance is connected to an instance of accessgroup.InternalOperationClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewInternalOperationServerTransport(srv *InternalOperationServer) *InternalOperationServerTransport {
	return &InternalOperationServerTransport{srv: srv}
}

// InternalOperationServerTransport connects instances of accessgroup.InternalOperationClient to instances of InternalOperationServer.
// Don't use this type directly, use NewInternalOperationServerTransport instead.
type InternalOperationServerTransport struct {
	srv *InternalOperationServer
}

// Do implements the policy.Transporter interface for InternalOperationServerTransport.
func (i *InternalOperationServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "InternalOperationClient.internalDecoratorInInternal":
		resp, err = i.dispatchinternalDecoratorInInternal(req)
	case "InternalOperationClient.noDecoratorInInternal":
		resp, err = i.dispatchnoDecoratorInInternal(req)
	case "InternalOperationClient.publicDecoratorInInternal":
		resp, err = i.dispatchpublicDecoratorInInternal(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (i *InternalOperationServerTransport) dispatchinternalDecoratorInInternal(req *http.Request) (*http.Response, error) {
	if i.srv.internalDecoratorInInternal == nil {
		return nil, &nonRetriableError{errors.New("fake for method internalDecoratorInInternal not implemented")}
	}
	qp := req.URL.Query()
	nameParam, err := url.QueryUnescape(qp.Get("name"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.internalDecoratorInInternal(req.Context(), nameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).internalDecoratorModelInInternal, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *InternalOperationServerTransport) dispatchnoDecoratorInInternal(req *http.Request) (*http.Response, error) {
	if i.srv.noDecoratorInInternal == nil {
		return nil, &nonRetriableError{errors.New("fake for method noDecoratorInInternal not implemented")}
	}
	qp := req.URL.Query()
	nameParam, err := url.QueryUnescape(qp.Get("name"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.noDecoratorInInternal(req.Context(), nameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).noDecoratorModelInInternal, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *InternalOperationServerTransport) dispatchpublicDecoratorInInternal(req *http.Request) (*http.Response, error) {
	if i.srv.publicDecoratorInInternal == nil {
		return nil, &nonRetriableError{errors.New("fake for method publicDecoratorInInternal not implemented")}
	}
	qp := req.URL.Query()
	nameParam, err := url.QueryUnescape(qp.Get("name"))
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.publicDecoratorInInternal(req.Context(), nameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).PublicDecoratorModelInInternal, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
