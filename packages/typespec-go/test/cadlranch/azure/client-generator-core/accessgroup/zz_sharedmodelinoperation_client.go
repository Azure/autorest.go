//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package accessgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// SharedModelInOperationClient contains the methods for the _Specs_.Azure.ClientGenerator.Core.Access group.
// Don't use this type directly, use a constructor function instead.
type SharedModelInOperationClient struct {
	internal *azcore.Client
}

func (client *SharedModelInOperationClient) Internal(ctx context.Context, name string, options *SharedModelInOperationClientInternalOptions) (SharedModelInOperationClientInternalResponse, error) {
	var err error
	req, err := client.internalCreateRequest(ctx, name, options)
	if err != nil {
		return SharedModelInOperationClientInternalResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SharedModelInOperationClientInternalResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SharedModelInOperationClientInternalResponse{}, err
	}
	resp, err := client.internalHandleResponse(httpResp)
	return resp, err
}

// internalCreateRequest creates the Internal request.
func (client *SharedModelInOperationClient) internalCreateRequest(ctx context.Context, name string, options *SharedModelInOperationClientInternalOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/access/sharedModelInOperation/internal"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("name", name)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// internalHandleResponse handles the Internal response.
func (client *SharedModelInOperationClient) internalHandleResponse(resp *http.Response) (SharedModelInOperationClientInternalResponse, error) {
	result := SharedModelInOperationClientInternalResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SharedModel); err != nil {
		return SharedModelInOperationClientInternalResponse{}, err
	}
	return result, nil
}

func (client *SharedModelInOperationClient) Public(ctx context.Context, name string, options *SharedModelInOperationClientPublicOptions) (SharedModelInOperationClientPublicResponse, error) {
	var err error
	req, err := client.publicCreateRequest(ctx, name, options)
	if err != nil {
		return SharedModelInOperationClientPublicResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SharedModelInOperationClientPublicResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SharedModelInOperationClientPublicResponse{}, err
	}
	resp, err := client.publicHandleResponse(httpResp)
	return resp, err
}

// publicCreateRequest creates the Public request.
func (client *SharedModelInOperationClient) publicCreateRequest(ctx context.Context, name string, options *SharedModelInOperationClientPublicOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/access/sharedModelInOperation/public"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("name", name)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// publicHandleResponse handles the Public response.
func (client *SharedModelInOperationClient) publicHandleResponse(resp *http.Response) (SharedModelInOperationClientPublicResponse, error) {
	result := SharedModelInOperationClientPublicResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SharedModel); err != nil {
		return SharedModelInOperationClientPublicResponse{}, err
	}
	return result, nil
}
