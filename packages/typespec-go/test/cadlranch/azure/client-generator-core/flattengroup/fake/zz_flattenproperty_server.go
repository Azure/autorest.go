// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"flattengroup"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// FlattenPropertyServer is a fake server for instances of the flattengroup.FlattenPropertyClient type.
type FlattenPropertyServer struct {
	// PutFlattenModel is the fake for method FlattenPropertyClient.PutFlattenModel
	// HTTP status codes to indicate success: http.StatusOK
	PutFlattenModel func(ctx context.Context, input flattengroup.FlattenModel, options *flattengroup.FlattenPropertyClientPutFlattenModelOptions) (resp azfake.Responder[flattengroup.FlattenPropertyClientPutFlattenModelResponse], errResp azfake.ErrorResponder)

	// PutNestedFlattenModel is the fake for method FlattenPropertyClient.PutNestedFlattenModel
	// HTTP status codes to indicate success: http.StatusOK
	PutNestedFlattenModel func(ctx context.Context, input flattengroup.NestedFlattenModel, options *flattengroup.FlattenPropertyClientPutNestedFlattenModelOptions) (resp azfake.Responder[flattengroup.FlattenPropertyClientPutNestedFlattenModelResponse], errResp azfake.ErrorResponder)
}

// NewFlattenPropertyServerTransport creates a new instance of FlattenPropertyServerTransport with the provided implementation.
// The returned FlattenPropertyServerTransport instance is connected to an instance of flattengroup.FlattenPropertyClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewFlattenPropertyServerTransport(srv *FlattenPropertyServer) *FlattenPropertyServerTransport {
	return &FlattenPropertyServerTransport{srv: srv}
}

// FlattenPropertyServerTransport connects instances of flattengroup.FlattenPropertyClient to instances of FlattenPropertyServer.
// Don't use this type directly, use NewFlattenPropertyServerTransport instead.
type FlattenPropertyServerTransport struct {
	srv *FlattenPropertyServer
}

// Do implements the policy.Transporter interface for FlattenPropertyServerTransport.
func (f *FlattenPropertyServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return f.dispatchToMethodFake(req, method)
}

func (f *FlattenPropertyServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var res result
		switch method {
		case "FlattenPropertyClient.PutFlattenModel":
			res.resp, res.err = f.dispatchPutFlattenModel(req)
		case "FlattenPropertyClient.PutNestedFlattenModel":
			res.resp, res.err = f.dispatchPutNestedFlattenModel(req)
		default:
			res.err = fmt.Errorf("unhandled API %s", method)
		}

		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (f *FlattenPropertyServerTransport) dispatchPutFlattenModel(req *http.Request) (*http.Response, error) {
	if f.srv.PutFlattenModel == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutFlattenModel not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[flattengroup.FlattenModel](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := f.srv.PutFlattenModel(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).FlattenModel, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (f *FlattenPropertyServerTransport) dispatchPutNestedFlattenModel(req *http.Request) (*http.Response, error) {
	if f.srv.PutNestedFlattenModel == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutNestedFlattenModel not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[flattengroup.NestedFlattenModel](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := f.srv.PutNestedFlattenModel(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).NestedFlattenModel, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
