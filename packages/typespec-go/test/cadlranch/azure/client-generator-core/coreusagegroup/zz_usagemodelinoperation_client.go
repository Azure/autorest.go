// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package coreusagegroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// UsageModelInOperationClient contains the methods for the UsageModelInOperation group.
// Don't use this type directly, use [UsageClient.NewUsageModelInOperationClient] instead.
type UsageModelInOperationClient struct {
	internal *azcore.Client
}

// InputToInputOutput - Expected body parameter:
// ```json
// {
// "name": <any string>
// }
// ```
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - UsageModelInOperationClientInputToInputOutputOptions contains the optional parameters for the UsageModelInOperationClient.InputToInputOutput
//     method.
func (client *UsageModelInOperationClient) InputToInputOutput(ctx context.Context, body InputModel, options *UsageModelInOperationClientInputToInputOutputOptions) (UsageModelInOperationClientInputToInputOutputResponse, error) {
	var err error
	const operationName = "UsageModelInOperationClient.InputToInputOutput"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.inputToInputOutputCreateRequest(ctx, body, options)
	if err != nil {
		return UsageModelInOperationClientInputToInputOutputResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return UsageModelInOperationClientInputToInputOutputResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return UsageModelInOperationClientInputToInputOutputResponse{}, err
	}
	return UsageModelInOperationClientInputToInputOutputResponse{}, nil
}

// inputToInputOutputCreateRequest creates the InputToInputOutput request.
func (client *UsageModelInOperationClient) inputToInputOutputCreateRequest(ctx context.Context, body InputModel, _ *UsageModelInOperationClientInputToInputOutputOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/usage/inputToInputOutput"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// ModelInReadOnlyProperty - "ResultModel" should be usage=output, as it is read-only and does not exist in request body.
// Expected body parameter:
// ```json
// {
// }
// ```
// Expected response body:
// ```json
// {
// "result": {
// "name": <any string>
// }
// }
// ```
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - UsageModelInOperationClientModelInReadOnlyPropertyOptions contains the optional parameters for the UsageModelInOperationClient.ModelInReadOnlyProperty
//     method.
func (client *UsageModelInOperationClient) ModelInReadOnlyProperty(ctx context.Context, body RoundTripModel, options *UsageModelInOperationClientModelInReadOnlyPropertyOptions) (UsageModelInOperationClientModelInReadOnlyPropertyResponse, error) {
	var err error
	const operationName = "UsageModelInOperationClient.ModelInReadOnlyProperty"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.modelInReadOnlyPropertyCreateRequest(ctx, body, options)
	if err != nil {
		return UsageModelInOperationClientModelInReadOnlyPropertyResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return UsageModelInOperationClientModelInReadOnlyPropertyResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return UsageModelInOperationClientModelInReadOnlyPropertyResponse{}, err
	}
	resp, err := client.modelInReadOnlyPropertyHandleResponse(httpResp)
	return resp, err
}

// modelInReadOnlyPropertyCreateRequest creates the ModelInReadOnlyProperty request.
func (client *UsageModelInOperationClient) modelInReadOnlyPropertyCreateRequest(ctx context.Context, body RoundTripModel, _ *UsageModelInOperationClientModelInReadOnlyPropertyOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/usage/modelInReadOnlyProperty"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// modelInReadOnlyPropertyHandleResponse handles the ModelInReadOnlyProperty response.
func (client *UsageModelInOperationClient) modelInReadOnlyPropertyHandleResponse(resp *http.Response) (UsageModelInOperationClientModelInReadOnlyPropertyResponse, error) {
	result := UsageModelInOperationClientModelInReadOnlyPropertyResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RoundTripModel); err != nil {
		return UsageModelInOperationClientModelInReadOnlyPropertyResponse{}, err
	}
	return result, nil
}

// OutputToInputOutput - Expected response body:
// ```json
// {
// "name": <any string>
// }
// ```
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - UsageModelInOperationClientOutputToInputOutputOptions contains the optional parameters for the UsageModelInOperationClient.OutputToInputOutput
//     method.
func (client *UsageModelInOperationClient) OutputToInputOutput(ctx context.Context, options *UsageModelInOperationClientOutputToInputOutputOptions) (UsageModelInOperationClientOutputToInputOutputResponse, error) {
	var err error
	const operationName = "UsageModelInOperationClient.OutputToInputOutput"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.outputToInputOutputCreateRequest(ctx, options)
	if err != nil {
		return UsageModelInOperationClientOutputToInputOutputResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return UsageModelInOperationClientOutputToInputOutputResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return UsageModelInOperationClientOutputToInputOutputResponse{}, err
	}
	resp, err := client.outputToInputOutputHandleResponse(httpResp)
	return resp, err
}

// outputToInputOutputCreateRequest creates the OutputToInputOutput request.
func (client *UsageModelInOperationClient) outputToInputOutputCreateRequest(ctx context.Context, _ *UsageModelInOperationClientOutputToInputOutputOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/usage/outputToInputOutput"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// outputToInputOutputHandleResponse handles the OutputToInputOutput response.
func (client *UsageModelInOperationClient) outputToInputOutputHandleResponse(resp *http.Response) (UsageModelInOperationClientOutputToInputOutputResponse, error) {
	result := UsageModelInOperationClientOutputToInputOutputResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.OutputModel); err != nil {
		return UsageModelInOperationClientOutputToInputOutputResponse{}, err
	}
	return result, nil
}
