// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"coreusagegroup"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// ModelInOperationServer is a fake server for instances of the coreusagegroup.ModelInOperationClient type.
type ModelInOperationServer struct {
	// InputToInputOutput is the fake for method ModelInOperationClient.InputToInputOutput
	// HTTP status codes to indicate success: http.StatusNoContent
	InputToInputOutput func(ctx context.Context, body coreusagegroup.InputModel, options *coreusagegroup.ModelInOperationClientInputToInputOutputOptions) (resp azfake.Responder[coreusagegroup.ModelInOperationClientInputToInputOutputResponse], errResp azfake.ErrorResponder)

	// OutputToInputOutput is the fake for method ModelInOperationClient.OutputToInputOutput
	// HTTP status codes to indicate success: http.StatusOK
	OutputToInputOutput func(ctx context.Context, options *coreusagegroup.ModelInOperationClientOutputToInputOutputOptions) (resp azfake.Responder[coreusagegroup.ModelInOperationClientOutputToInputOutputResponse], errResp azfake.ErrorResponder)
}

// NewModelInOperationServerTransport creates a new instance of ModelInOperationServerTransport with the provided implementation.
// The returned ModelInOperationServerTransport instance is connected to an instance of coreusagegroup.ModelInOperationClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewModelInOperationServerTransport(srv *ModelInOperationServer) *ModelInOperationServerTransport {
	return &ModelInOperationServerTransport{srv: srv}
}

// ModelInOperationServerTransport connects instances of coreusagegroup.ModelInOperationClient to instances of ModelInOperationServer.
// Don't use this type directly, use NewModelInOperationServerTransport instead.
type ModelInOperationServerTransport struct {
	srv *ModelInOperationServer
}

// Do implements the policy.Transporter interface for ModelInOperationServerTransport.
func (m *ModelInOperationServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return m.dispatchToMethodFake(req, method)
}

func (m *ModelInOperationServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "ModelInOperationClient.InputToInputOutput":
		resp, err = m.dispatchInputToInputOutput(req)
	case "ModelInOperationClient.OutputToInputOutput":
		resp, err = m.dispatchOutputToInputOutput(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (m *ModelInOperationServerTransport) dispatchInputToInputOutput(req *http.Request) (*http.Response, error) {
	if m.srv.InputToInputOutput == nil {
		return nil, &nonRetriableError{errors.New("fake for method InputToInputOutput not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[coreusagegroup.InputModel](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.InputToInputOutput(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *ModelInOperationServerTransport) dispatchOutputToInputOutput(req *http.Request) (*http.Response, error) {
	if m.srv.OutputToInputOutput == nil {
		return nil, &nonRetriableError{errors.New("fake for method OutputToInputOutput not implemented")}
	}
	respr, errRespr := m.srv.OutputToInputOutput(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).OutputModel, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
