//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package coreusagegroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// ModelInOperationClient contains the methods for the _Specs_.Azure.ClientGenerator.Core.Usage namespace.
// Don't use this type directly, use [UsageClient.NewModelInOperationClient] instead.
type ModelInOperationClient struct {
	internal *azcore.Client
}

// InputToInputOutput - Expected body parameter:
// ```json
// {
// "name": <any string>
// }
// ```
//   - options - ModelInOperationClientInputToInputOutputOptions contains the optional parameters for the ModelInOperationClient.InputToInputOutput
//     method.
func (client *ModelInOperationClient) InputToInputOutput(ctx context.Context, body InputModel, options *ModelInOperationClientInputToInputOutputOptions) (ModelInOperationClientInputToInputOutputResponse, error) {
	var err error
	req, err := client.inputToInputOutputCreateRequest(ctx, body, options)
	if err != nil {
		return ModelInOperationClientInputToInputOutputResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ModelInOperationClientInputToInputOutputResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ModelInOperationClientInputToInputOutputResponse{}, err
	}
	return ModelInOperationClientInputToInputOutputResponse{}, nil
}

// inputToInputOutputCreateRequest creates the InputToInputOutput request.
func (client *ModelInOperationClient) inputToInputOutputCreateRequest(ctx context.Context, body InputModel, options *ModelInOperationClientInputToInputOutputOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/usage/inputToInputOutput"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// OutputToInputOutput - Expected response body:
// ```json
// {
// "name": <any string>
// }
// ```
//   - options - ModelInOperationClientOutputToInputOutputOptions contains the optional parameters for the ModelInOperationClient.OutputToInputOutput
//     method.
func (client *ModelInOperationClient) OutputToInputOutput(ctx context.Context, options *ModelInOperationClientOutputToInputOutputOptions) (ModelInOperationClientOutputToInputOutputResponse, error) {
	var err error
	req, err := client.outputToInputOutputCreateRequest(ctx, options)
	if err != nil {
		return ModelInOperationClientOutputToInputOutputResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ModelInOperationClientOutputToInputOutputResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ModelInOperationClientOutputToInputOutputResponse{}, err
	}
	resp, err := client.outputToInputOutputHandleResponse(httpResp)
	return resp, err
}

// outputToInputOutputCreateRequest creates the OutputToInputOutput request.
func (client *ModelInOperationClient) outputToInputOutputCreateRequest(ctx context.Context, options *ModelInOperationClientOutputToInputOutputOptions) (*policy.Request, error) {
	urlPath := "/azure/client-generator-core/usage/outputToInputOutput"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// outputToInputOutputHandleResponse handles the OutputToInputOutput response.
func (client *ModelInOperationClient) outputToInputOutputHandleResponse(resp *http.Response) (ModelInOperationClientOutputToInputOutputResponse, error) {
	result := ModelInOperationClientOutputToInputOutputResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.OutputModel); err != nil {
		return ModelInOperationClientOutputToInputOutputResponse{}, err
	}
	return result, nil
}
