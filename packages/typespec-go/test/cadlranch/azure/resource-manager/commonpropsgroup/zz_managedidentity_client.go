// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package commonpropsgroup

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ManagedIdentityClient contains the methods for the ManagedIdentity group.
// Don't use this type directly, use NewManagedIdentityClient() instead.
type ManagedIdentityClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewManagedIdentityClient creates a new instance of ManagedIdentityClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewManagedIdentityClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ManagedIdentityClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &ManagedIdentityClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CreateWithSystemAssigned - Create a ManagedIdentityTrackedResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - managedIdentityTrackedResourceName - arm resource name for path
//   - resource - Resource create parameters.
//   - options - ManagedIdentityClientCreateWithSystemAssignedOptions contains the optional parameters for the ManagedIdentityClient.CreateWithSystemAssigned
//     method.
func (client *ManagedIdentityClient) CreateWithSystemAssigned(ctx context.Context, resourceGroupName string, managedIdentityTrackedResourceName string, resource ManagedIdentityTrackedResource, options *ManagedIdentityClientCreateWithSystemAssignedOptions) (ManagedIdentityClientCreateWithSystemAssignedResponse, error) {
	var err error
	const operationName = "ManagedIdentityClient.CreateWithSystemAssigned"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createWithSystemAssignedCreateRequest(ctx, resourceGroupName, managedIdentityTrackedResourceName, resource, options)
	if err != nil {
		return ManagedIdentityClientCreateWithSystemAssignedResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ManagedIdentityClientCreateWithSystemAssignedResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return ManagedIdentityClientCreateWithSystemAssignedResponse{}, err
	}
	resp, err := client.createWithSystemAssignedHandleResponse(httpResp)
	return resp, err
}

// createWithSystemAssignedCreateRequest creates the CreateWithSystemAssigned request.
func (client *ManagedIdentityClient) createWithSystemAssignedCreateRequest(ctx context.Context, resourceGroupName string, managedIdentityTrackedResourceName string, resource ManagedIdentityTrackedResource, _ *ManagedIdentityClientCreateWithSystemAssignedOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.CommonProperties/managedIdentityTrackedResources/{managedIdentityTrackedResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if managedIdentityTrackedResourceName == "" {
		return nil, errors.New("parameter managedIdentityTrackedResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managedIdentityTrackedResourceName}", url.PathEscape(managedIdentityTrackedResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// createWithSystemAssignedHandleResponse handles the CreateWithSystemAssigned response.
func (client *ManagedIdentityClient) createWithSystemAssignedHandleResponse(resp *http.Response) (ManagedIdentityClientCreateWithSystemAssignedResponse, error) {
	result := ManagedIdentityClientCreateWithSystemAssignedResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ManagedIdentityTrackedResource); err != nil {
		return ManagedIdentityClientCreateWithSystemAssignedResponse{}, err
	}
	return result, nil
}

// Get - Get a ManagedIdentityTrackedResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - managedIdentityTrackedResourceName - arm resource name for path
//   - options - ManagedIdentityClientGetOptions contains the optional parameters for the ManagedIdentityClient.Get method.
func (client *ManagedIdentityClient) Get(ctx context.Context, resourceGroupName string, managedIdentityTrackedResourceName string, options *ManagedIdentityClientGetOptions) (ManagedIdentityClientGetResponse, error) {
	var err error
	const operationName = "ManagedIdentityClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, managedIdentityTrackedResourceName, options)
	if err != nil {
		return ManagedIdentityClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ManagedIdentityClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ManagedIdentityClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *ManagedIdentityClient) getCreateRequest(ctx context.Context, resourceGroupName string, managedIdentityTrackedResourceName string, _ *ManagedIdentityClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.CommonProperties/managedIdentityTrackedResources/{managedIdentityTrackedResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if managedIdentityTrackedResourceName == "" {
		return nil, errors.New("parameter managedIdentityTrackedResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managedIdentityTrackedResourceName}", url.PathEscape(managedIdentityTrackedResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ManagedIdentityClient) getHandleResponse(resp *http.Response) (ManagedIdentityClientGetResponse, error) {
	result := ManagedIdentityClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ManagedIdentityTrackedResource); err != nil {
		return ManagedIdentityClientGetResponse{}, err
	}
	return result, nil
}

// UpdateWithUserAssignedAndSystemAssigned - Update a ManagedIdentityTrackedResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - managedIdentityTrackedResourceName - arm resource name for path
//   - properties - The resource properties to be updated.
//   - options - ManagedIdentityClientUpdateWithUserAssignedAndSystemAssignedOptions contains the optional parameters for the
//     ManagedIdentityClient.UpdateWithUserAssignedAndSystemAssigned method.
func (client *ManagedIdentityClient) UpdateWithUserAssignedAndSystemAssigned(ctx context.Context, resourceGroupName string, managedIdentityTrackedResourceName string, properties ManagedIdentityTrackedResource, options *ManagedIdentityClientUpdateWithUserAssignedAndSystemAssignedOptions) (ManagedIdentityClientUpdateWithUserAssignedAndSystemAssignedResponse, error) {
	var err error
	const operationName = "ManagedIdentityClient.UpdateWithUserAssignedAndSystemAssigned"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateWithUserAssignedAndSystemAssignedCreateRequest(ctx, resourceGroupName, managedIdentityTrackedResourceName, properties, options)
	if err != nil {
		return ManagedIdentityClientUpdateWithUserAssignedAndSystemAssignedResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ManagedIdentityClientUpdateWithUserAssignedAndSystemAssignedResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ManagedIdentityClientUpdateWithUserAssignedAndSystemAssignedResponse{}, err
	}
	resp, err := client.updateWithUserAssignedAndSystemAssignedHandleResponse(httpResp)
	return resp, err
}

// updateWithUserAssignedAndSystemAssignedCreateRequest creates the UpdateWithUserAssignedAndSystemAssigned request.
func (client *ManagedIdentityClient) updateWithUserAssignedAndSystemAssignedCreateRequest(ctx context.Context, resourceGroupName string, managedIdentityTrackedResourceName string, properties ManagedIdentityTrackedResource, _ *ManagedIdentityClientUpdateWithUserAssignedAndSystemAssignedOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.CommonProperties/managedIdentityTrackedResources/{managedIdentityTrackedResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if managedIdentityTrackedResourceName == "" {
		return nil, errors.New("parameter managedIdentityTrackedResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managedIdentityTrackedResourceName}", url.PathEscape(managedIdentityTrackedResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}

// updateWithUserAssignedAndSystemAssignedHandleResponse handles the UpdateWithUserAssignedAndSystemAssigned response.
func (client *ManagedIdentityClient) updateWithUserAssignedAndSystemAssignedHandleResponse(resp *http.Response) (ManagedIdentityClientUpdateWithUserAssignedAndSystemAssignedResponse, error) {
	result := ManagedIdentityClientUpdateWithUserAssignedAndSystemAssignedResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ManagedIdentityTrackedResource); err != nil {
		return ManagedIdentityClientUpdateWithUserAssignedAndSystemAssignedResponse{}, err
	}
	return result, nil
}
