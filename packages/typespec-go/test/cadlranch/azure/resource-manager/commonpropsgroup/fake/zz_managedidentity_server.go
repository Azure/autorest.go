// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"commonpropsgroup"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"regexp"
)

// ManagedIdentityServer is a fake server for instances of the commonpropsgroup.ManagedIdentityClient type.
type ManagedIdentityServer struct {
	// CreateWithSystemAssigned is the fake for method ManagedIdentityClient.CreateWithSystemAssigned
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	CreateWithSystemAssigned func(ctx context.Context, resourceGroupName string, managedIdentityTrackedResourceName string, resource commonpropsgroup.ManagedIdentityTrackedResource, options *commonpropsgroup.ManagedIdentityClientCreateWithSystemAssignedOptions) (resp azfake.Responder[commonpropsgroup.ManagedIdentityClientCreateWithSystemAssignedResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method ManagedIdentityClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, managedIdentityTrackedResourceName string, options *commonpropsgroup.ManagedIdentityClientGetOptions) (resp azfake.Responder[commonpropsgroup.ManagedIdentityClientGetResponse], errResp azfake.ErrorResponder)

	// UpdateWithUserAssignedAndSystemAssigned is the fake for method ManagedIdentityClient.UpdateWithUserAssignedAndSystemAssigned
	// HTTP status codes to indicate success: http.StatusOK
	UpdateWithUserAssignedAndSystemAssigned func(ctx context.Context, resourceGroupName string, managedIdentityTrackedResourceName string, properties commonpropsgroup.ManagedIdentityTrackedResource, options *commonpropsgroup.ManagedIdentityClientUpdateWithUserAssignedAndSystemAssignedOptions) (resp azfake.Responder[commonpropsgroup.ManagedIdentityClientUpdateWithUserAssignedAndSystemAssignedResponse], errResp azfake.ErrorResponder)
}

// NewManagedIdentityServerTransport creates a new instance of ManagedIdentityServerTransport with the provided implementation.
// The returned ManagedIdentityServerTransport instance is connected to an instance of commonpropsgroup.ManagedIdentityClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewManagedIdentityServerTransport(srv *ManagedIdentityServer) *ManagedIdentityServerTransport {
	return &ManagedIdentityServerTransport{srv: srv}
}

// ManagedIdentityServerTransport connects instances of commonpropsgroup.ManagedIdentityClient to instances of ManagedIdentityServer.
// Don't use this type directly, use NewManagedIdentityServerTransport instead.
type ManagedIdentityServerTransport struct {
	srv *ManagedIdentityServer
}

// Do implements the policy.Transporter interface for ManagedIdentityServerTransport.
func (m *ManagedIdentityServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return m.dispatchToMethodFake(req, method)
}

func (m *ManagedIdentityServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var res result
		switch method {
		case "ManagedIdentityClient.CreateWithSystemAssigned":
			res.resp, res.err = m.dispatchCreateWithSystemAssigned(req)
		case "ManagedIdentityClient.Get":
			res.resp, res.err = m.dispatchGet(req)
		case "ManagedIdentityClient.UpdateWithUserAssignedAndSystemAssigned":
			res.resp, res.err = m.dispatchUpdateWithUserAssignedAndSystemAssigned(req)
		default:
			res.err = fmt.Errorf("unhandled API %s", method)
		}

		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (m *ManagedIdentityServerTransport) dispatchCreateWithSystemAssigned(req *http.Request) (*http.Response, error) {
	if m.srv.CreateWithSystemAssigned == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateWithSystemAssigned not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Azure\.ResourceManager\.CommonProperties/managedIdentityTrackedResources/(?P<managedIdentityTrackedResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[commonpropsgroup.ManagedIdentityTrackedResource](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	managedIdentityTrackedResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("managedIdentityTrackedResourceName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.CreateWithSystemAssigned(req.Context(), resourceGroupNameParam, managedIdentityTrackedResourceNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ManagedIdentityTrackedResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *ManagedIdentityServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if m.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Azure\.ResourceManager\.CommonProperties/managedIdentityTrackedResources/(?P<managedIdentityTrackedResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	managedIdentityTrackedResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("managedIdentityTrackedResourceName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.Get(req.Context(), resourceGroupNameParam, managedIdentityTrackedResourceNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ManagedIdentityTrackedResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *ManagedIdentityServerTransport) dispatchUpdateWithUserAssignedAndSystemAssigned(req *http.Request) (*http.Response, error) {
	if m.srv.UpdateWithUserAssignedAndSystemAssigned == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateWithUserAssignedAndSystemAssigned not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Azure\.ResourceManager\.CommonProperties/managedIdentityTrackedResources/(?P<managedIdentityTrackedResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[commonpropsgroup.ManagedIdentityTrackedResource](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	managedIdentityTrackedResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("managedIdentityTrackedResourceName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.UpdateWithUserAssignedAndSystemAssigned(req.Context(), resourceGroupNameParam, managedIdentityTrackedResourceNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ManagedIdentityTrackedResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
