// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package resources

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// NestedClient contains the methods for the Nested group.
// Don't use this type directly, use NewNestedClient() instead.
type NestedClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewNestedClient creates a new instance of NestedClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewNestedClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*NestedClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &NestedClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrReplace - Create a NestedProxyResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - topLevelTrackedResourceName - arm resource name for path
//   - nextedProxyResourceName - Name of the nested resource.
//   - resource - Resource create parameters.
//   - options - NestedClientBeginCreateOrReplaceOptions contains the optional parameters for the NestedClient.BeginCreateOrReplace
//     method.
func (client *NestedClient) BeginCreateOrReplace(ctx context.Context, resourceGroupName string, topLevelTrackedResourceName string, nextedProxyResourceName string, resource NestedProxyResource, options *NestedClientBeginCreateOrReplaceOptions) (*runtime.Poller[NestedClientCreateOrReplaceResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrReplace(ctx, resourceGroupName, topLevelTrackedResourceName, nextedProxyResourceName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[NestedClientCreateOrReplaceResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[NestedClientCreateOrReplaceResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrReplace - Create a NestedProxyResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
func (client *NestedClient) createOrReplace(ctx context.Context, resourceGroupName string, topLevelTrackedResourceName string, nextedProxyResourceName string, resource NestedProxyResource, options *NestedClientBeginCreateOrReplaceOptions) (*http.Response, error) {
	var err error
	const operationName = "NestedClient.BeginCreateOrReplace"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrReplaceCreateRequest(ctx, resourceGroupName, topLevelTrackedResourceName, nextedProxyResourceName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrReplaceCreateRequest creates the CreateOrReplace request.
func (client *NestedClient) createOrReplaceCreateRequest(ctx context.Context, resourceGroupName string, topLevelTrackedResourceName string, nextedProxyResourceName string, resource NestedProxyResource, _ *NestedClientBeginCreateOrReplaceOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.Resources/topLevelTrackedResources/{topLevelTrackedResourceName}/nestedProxyResources/{nextedProxyResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if topLevelTrackedResourceName == "" {
		return nil, errors.New("parameter topLevelTrackedResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topLevelTrackedResourceName}", url.PathEscape(topLevelTrackedResourceName))
	if nextedProxyResourceName == "" {
		return nil, errors.New("parameter nextedProxyResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nextedProxyResourceName}", url.PathEscape(nextedProxyResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a NestedProxyResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - topLevelTrackedResourceName - arm resource name for path
//   - nextedProxyResourceName - Name of the nested resource.
//   - options - NestedClientBeginDeleteOptions contains the optional parameters for the NestedClient.BeginDelete method.
func (client *NestedClient) BeginDelete(ctx context.Context, resourceGroupName string, topLevelTrackedResourceName string, nextedProxyResourceName string, options *NestedClientBeginDeleteOptions) (*runtime.Poller[NestedClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, topLevelTrackedResourceName, nextedProxyResourceName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[NestedClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[NestedClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete a NestedProxyResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
func (client *NestedClient) deleteOperation(ctx context.Context, resourceGroupName string, topLevelTrackedResourceName string, nextedProxyResourceName string, options *NestedClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "NestedClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, topLevelTrackedResourceName, nextedProxyResourceName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *NestedClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, topLevelTrackedResourceName string, nextedProxyResourceName string, _ *NestedClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.Resources/topLevelTrackedResources/{topLevelTrackedResourceName}/nestedProxyResources/{nextedProxyResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if topLevelTrackedResourceName == "" {
		return nil, errors.New("parameter topLevelTrackedResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topLevelTrackedResourceName}", url.PathEscape(topLevelTrackedResourceName))
	if nextedProxyResourceName == "" {
		return nil, errors.New("parameter nextedProxyResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nextedProxyResourceName}", url.PathEscape(nextedProxyResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a NestedProxyResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - topLevelTrackedResourceName - arm resource name for path
//   - nextedProxyResourceName - Name of the nested resource.
//   - options - NestedClientGetOptions contains the optional parameters for the NestedClient.Get method.
func (client *NestedClient) Get(ctx context.Context, resourceGroupName string, topLevelTrackedResourceName string, nextedProxyResourceName string, options *NestedClientGetOptions) (NestedClientGetResponse, error) {
	var err error
	const operationName = "NestedClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, topLevelTrackedResourceName, nextedProxyResourceName, options)
	if err != nil {
		return NestedClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NestedClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NestedClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *NestedClient) getCreateRequest(ctx context.Context, resourceGroupName string, topLevelTrackedResourceName string, nextedProxyResourceName string, _ *NestedClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.Resources/topLevelTrackedResources/{topLevelTrackedResourceName}/nestedProxyResources/{nextedProxyResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if topLevelTrackedResourceName == "" {
		return nil, errors.New("parameter topLevelTrackedResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topLevelTrackedResourceName}", url.PathEscape(topLevelTrackedResourceName))
	if nextedProxyResourceName == "" {
		return nil, errors.New("parameter nextedProxyResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nextedProxyResourceName}", url.PathEscape(nextedProxyResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *NestedClient) getHandleResponse(resp *http.Response) (NestedClientGetResponse, error) {
	result := NestedClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NestedProxyResource); err != nil {
		return NestedClientGetResponse{}, err
	}
	return result, nil
}

// NewListByTopLevelTrackedResourcePager - List NestedProxyResource resources by TopLevelTrackedResource
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - topLevelTrackedResourceName - arm resource name for path
//   - options - NestedClientListByTopLevelTrackedResourceOptions contains the optional parameters for the NestedClient.NewListByTopLevelTrackedResourcePager
//     method.
func (client *NestedClient) NewListByTopLevelTrackedResourcePager(resourceGroupName string, topLevelTrackedResourceName string, options *NestedClientListByTopLevelTrackedResourceOptions) *runtime.Pager[NestedClientListByTopLevelTrackedResourceResponse] {
	return runtime.NewPager(runtime.PagingHandler[NestedClientListByTopLevelTrackedResourceResponse]{
		More: func(page NestedClientListByTopLevelTrackedResourceResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *NestedClientListByTopLevelTrackedResourceResponse) (NestedClientListByTopLevelTrackedResourceResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "NestedClient.NewListByTopLevelTrackedResourcePager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByTopLevelTrackedResourceCreateRequest(ctx, resourceGroupName, topLevelTrackedResourceName, options)
			}, nil)
			if err != nil {
				return NestedClientListByTopLevelTrackedResourceResponse{}, err
			}
			return client.listByTopLevelTrackedResourceHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByTopLevelTrackedResourceCreateRequest creates the ListByTopLevelTrackedResource request.
func (client *NestedClient) listByTopLevelTrackedResourceCreateRequest(ctx context.Context, resourceGroupName string, topLevelTrackedResourceName string, _ *NestedClientListByTopLevelTrackedResourceOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.Resources/topLevelTrackedResources/{topLevelTrackedResourceName}/nestedProxyResources"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if topLevelTrackedResourceName == "" {
		return nil, errors.New("parameter topLevelTrackedResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topLevelTrackedResourceName}", url.PathEscape(topLevelTrackedResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByTopLevelTrackedResourceHandleResponse handles the ListByTopLevelTrackedResource response.
func (client *NestedClient) listByTopLevelTrackedResourceHandleResponse(resp *http.Response) (NestedClientListByTopLevelTrackedResourceResponse, error) {
	result := NestedClientListByTopLevelTrackedResourceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NestedProxyResourceListResult); err != nil {
		return NestedClientListByTopLevelTrackedResourceResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Update a NestedProxyResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - topLevelTrackedResourceName - arm resource name for path
//   - nextedProxyResourceName - Name of the nested resource.
//   - properties - The resource properties to be updated.
//   - options - NestedClientBeginUpdateOptions contains the optional parameters for the NestedClient.BeginUpdate method.
func (client *NestedClient) BeginUpdate(ctx context.Context, resourceGroupName string, topLevelTrackedResourceName string, nextedProxyResourceName string, properties NestedProxyResource, options *NestedClientBeginUpdateOptions) (*runtime.Poller[NestedClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, topLevelTrackedResourceName, nextedProxyResourceName, properties, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[NestedClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[NestedClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Update a NestedProxyResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
func (client *NestedClient) update(ctx context.Context, resourceGroupName string, topLevelTrackedResourceName string, nextedProxyResourceName string, properties NestedProxyResource, options *NestedClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "NestedClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, topLevelTrackedResourceName, nextedProxyResourceName, properties, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *NestedClient) updateCreateRequest(ctx context.Context, resourceGroupName string, topLevelTrackedResourceName string, nextedProxyResourceName string, properties NestedProxyResource, _ *NestedClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.Resources/topLevelTrackedResources/{topLevelTrackedResourceName}/nestedProxyResources/{nextedProxyResourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if topLevelTrackedResourceName == "" {
		return nil, errors.New("parameter topLevelTrackedResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topLevelTrackedResourceName}", url.PathEscape(topLevelTrackedResourceName))
	if nextedProxyResourceName == "" {
		return nil, errors.New("parameter nextedProxyResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nextedProxyResourceName}", url.PathEscape(nextedProxyResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}
