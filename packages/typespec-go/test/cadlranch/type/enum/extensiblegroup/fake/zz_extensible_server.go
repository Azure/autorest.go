// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ExtensibleServer is a fake server for instances of the extensiblegroup.ExtensibleClient type.
type ExtensibleServer struct {
	// ExtensibleStringServer contains the fakes for client ExtensibleStringClient
	ExtensibleStringServer ExtensibleStringServer
}

// NewExtensibleServerTransport creates a new instance of ExtensibleServerTransport with the provided implementation.
// The returned ExtensibleServerTransport instance is connected to an instance of extensiblegroup.ExtensibleClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewExtensibleServerTransport(srv *ExtensibleServer) *ExtensibleServerTransport {
	return &ExtensibleServerTransport{srv: srv}
}

// ExtensibleServerTransport connects instances of extensiblegroup.ExtensibleClient to instances of ExtensibleServer.
// Don't use this type directly, use NewExtensibleServerTransport instead.
type ExtensibleServerTransport struct {
	srv                      *ExtensibleServer
	trMu                     sync.Mutex
	trExtensibleStringServer *ExtensibleStringServerTransport
}

// Do implements the policy.Transporter interface for ExtensibleServerTransport.
func (e *ExtensibleServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return e.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (e *ExtensibleServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "ExtensibleStringClient":
		initServer(&e.trMu, &e.trExtensibleStringServer, func() *ExtensibleStringServerTransport {
			return NewExtensibleStringServerTransport(&e.srv.ExtensibleStringServer)
		})
		resp, err = e.trExtensibleStringServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}
