// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// FixedServer is a fake server for instances of the fixedgroup.FixedClient type.
type FixedServer struct {
	// StringServer contains the fakes for client StringClient
	StringServer StringServer
}

// NewFixedServerTransport creates a new instance of FixedServerTransport with the provided implementation.
// The returned FixedServerTransport instance is connected to an instance of fixedgroup.FixedClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewFixedServerTransport(srv *FixedServer) *FixedServerTransport {
	return &FixedServerTransport{srv: srv}
}

// FixedServerTransport connects instances of fixedgroup.FixedClient to instances of FixedServer.
// Don't use this type directly, use NewFixedServerTransport instead.
type FixedServerTransport struct {
	srv            *FixedServer
	trMu           sync.Mutex
	trStringServer *StringServerTransport
}

// Do implements the policy.Transporter interface for FixedServerTransport.
func (f *FixedServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return f.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (f *FixedServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "StringClient":
		initServer(&f.trMu, &f.trStringServer, func() *StringServerTransport {
			return NewStringServerTransport(&f.srv.StringServer)
		})
		resp, err = f.trStringServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}
