// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fixedgroup"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// FixedStringServer is a fake server for instances of the fixedgroup.FixedStringClient type.
type FixedStringServer struct {
	// GetKnownValue is the fake for method FixedStringClient.GetKnownValue
	// HTTP status codes to indicate success: http.StatusOK
	GetKnownValue func(ctx context.Context, options *fixedgroup.FixedStringClientGetKnownValueOptions) (resp azfake.Responder[fixedgroup.FixedStringClientGetKnownValueResponse], errResp azfake.ErrorResponder)

	// PutKnownValue is the fake for method FixedStringClient.PutKnownValue
	// HTTP status codes to indicate success: http.StatusNoContent
	PutKnownValue func(ctx context.Context, body fixedgroup.DaysOfWeekEnum, options *fixedgroup.FixedStringClientPutKnownValueOptions) (resp azfake.Responder[fixedgroup.FixedStringClientPutKnownValueResponse], errResp azfake.ErrorResponder)

	// PutUnknownValue is the fake for method FixedStringClient.PutUnknownValue
	// HTTP status codes to indicate success: http.StatusNoContent
	PutUnknownValue func(ctx context.Context, body fixedgroup.DaysOfWeekEnum, options *fixedgroup.FixedStringClientPutUnknownValueOptions) (resp azfake.Responder[fixedgroup.FixedStringClientPutUnknownValueResponse], errResp azfake.ErrorResponder)
}

// NewFixedStringServerTransport creates a new instance of FixedStringServerTransport with the provided implementation.
// The returned FixedStringServerTransport instance is connected to an instance of fixedgroup.FixedStringClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewFixedStringServerTransport(srv *FixedStringServer) *FixedStringServerTransport {
	return &FixedStringServerTransport{srv: srv}
}

// FixedStringServerTransport connects instances of fixedgroup.FixedStringClient to instances of FixedStringServer.
// Don't use this type directly, use NewFixedStringServerTransport instead.
type FixedStringServerTransport struct {
	srv *FixedStringServer
}

// Do implements the policy.Transporter interface for FixedStringServerTransport.
func (f *FixedStringServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return f.dispatchToMethodFake(req, method)
}

func (f *FixedStringServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "FixedStringClient.GetKnownValue":
		resp, err = f.dispatchGetKnownValue(req)
	case "FixedStringClient.PutKnownValue":
		resp, err = f.dispatchPutKnownValue(req)
	case "FixedStringClient.PutUnknownValue":
		resp, err = f.dispatchPutUnknownValue(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (f *FixedStringServerTransport) dispatchGetKnownValue(req *http.Request) (*http.Response, error) {
	if f.srv.GetKnownValue == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetKnownValue not implemented")}
	}
	respr, errRespr := f.srv.GetKnownValue(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (f *FixedStringServerTransport) dispatchPutKnownValue(req *http.Request) (*http.Response, error) {
	if f.srv.PutKnownValue == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutKnownValue not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[fixedgroup.DaysOfWeekEnum](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := f.srv.PutKnownValue(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (f *FixedStringServerTransport) dispatchPutUnknownValue(req *http.Request) (*http.Response, error) {
	if f.srv.PutUnknownValue == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutUnknownValue not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[fixedgroup.DaysOfWeekEnum](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := f.srv.PutUnknownValue(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
