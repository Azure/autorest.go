// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fixedgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// FixedStringClient contains the methods for the Type.Enum.Fixed namespace.
// Don't use this type directly, use [FixedClient.NewFixedStringClient] instead.
type FixedStringClient struct {
	internal *azcore.Client
}

// GetKnownValue - getKnownValue
//   - options - FixedStringClientGetKnownValueOptions contains the optional parameters for the FixedStringClient.GetKnownValue
//     method.
func (client *FixedStringClient) GetKnownValue(ctx context.Context, options *FixedStringClientGetKnownValueOptions) (FixedStringClientGetKnownValueResponse, error) {
	var err error
	const operationName = "FixedStringClient.GetKnownValue"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getKnownValueCreateRequest(ctx, options)
	if err != nil {
		return FixedStringClientGetKnownValueResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FixedStringClientGetKnownValueResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return FixedStringClientGetKnownValueResponse{}, err
	}
	resp, err := client.getKnownValueHandleResponse(httpResp)
	return resp, err
}

// getKnownValueCreateRequest creates the GetKnownValue request.
func (client *FixedStringClient) getKnownValueCreateRequest(ctx context.Context, _ *FixedStringClientGetKnownValueOptions) (*policy.Request, error) {
	urlPath := "/type/enum/fixed/string/known-value"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getKnownValueHandleResponse handles the GetKnownValue response.
func (client *FixedStringClient) getKnownValueHandleResponse(resp *http.Response) (FixedStringClientGetKnownValueResponse, error) {
	result := FixedStringClientGetKnownValueResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return FixedStringClientGetKnownValueResponse{}, err
	}
	return result, nil
}

// PutKnownValue - putKnownValue
//   - body - _
//   - options - FixedStringClientPutKnownValueOptions contains the optional parameters for the FixedStringClient.PutKnownValue
//     method.
func (client *FixedStringClient) PutKnownValue(ctx context.Context, body DaysOfWeekEnum, options *FixedStringClientPutKnownValueOptions) (FixedStringClientPutKnownValueResponse, error) {
	var err error
	const operationName = "FixedStringClient.PutKnownValue"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putKnownValueCreateRequest(ctx, body, options)
	if err != nil {
		return FixedStringClientPutKnownValueResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FixedStringClientPutKnownValueResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return FixedStringClientPutKnownValueResponse{}, err
	}
	return FixedStringClientPutKnownValueResponse{}, nil
}

// putKnownValueCreateRequest creates the PutKnownValue request.
func (client *FixedStringClient) putKnownValueCreateRequest(ctx context.Context, body DaysOfWeekEnum, _ *FixedStringClientPutKnownValueOptions) (*policy.Request, error) {
	urlPath := "/type/enum/fixed/string/known-value"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// PutUnknownValue - putUnknownValue
//   - body - _
//   - options - FixedStringClientPutUnknownValueOptions contains the optional parameters for the FixedStringClient.PutUnknownValue
//     method.
func (client *FixedStringClient) PutUnknownValue(ctx context.Context, body DaysOfWeekEnum, options *FixedStringClientPutUnknownValueOptions) (FixedStringClientPutUnknownValueResponse, error) {
	var err error
	const operationName = "FixedStringClient.PutUnknownValue"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putUnknownValueCreateRequest(ctx, body, options)
	if err != nil {
		return FixedStringClientPutUnknownValueResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return FixedStringClientPutUnknownValueResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return FixedStringClientPutUnknownValueResponse{}, err
	}
	return FixedStringClientPutUnknownValueResponse{}, nil
}

// putUnknownValueCreateRequest creates the PutUnknownValue request.
func (client *FixedStringClient) putUnknownValueCreateRequest(ctx context.Context, body DaysOfWeekEnum, _ *FixedStringClientPutUnknownValueOptions) (*policy.Request, error) {
	urlPath := "/type/enum/fixed/string/unknown-value"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}
