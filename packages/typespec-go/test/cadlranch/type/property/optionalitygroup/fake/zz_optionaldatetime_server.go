// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"optionalitygroup"
)

// OptionalDatetimeServer is a fake server for instances of the optionalitygroup.OptionalDatetimeClient type.
type OptionalDatetimeServer struct {
	// GetAll is the fake for method OptionalDatetimeClient.GetAll
	// HTTP status codes to indicate success: http.StatusOK
	GetAll func(ctx context.Context, options *optionalitygroup.OptionalDatetimeClientGetAllOptions) (resp azfake.Responder[optionalitygroup.OptionalDatetimeClientGetAllResponse], errResp azfake.ErrorResponder)

	// GetDefault is the fake for method OptionalDatetimeClient.GetDefault
	// HTTP status codes to indicate success: http.StatusOK
	GetDefault func(ctx context.Context, options *optionalitygroup.OptionalDatetimeClientGetDefaultOptions) (resp azfake.Responder[optionalitygroup.OptionalDatetimeClientGetDefaultResponse], errResp azfake.ErrorResponder)

	// PutAll is the fake for method OptionalDatetimeClient.PutAll
	// HTTP status codes to indicate success: http.StatusNoContent
	PutAll func(ctx context.Context, body optionalitygroup.DatetimeProperty, options *optionalitygroup.OptionalDatetimeClientPutAllOptions) (resp azfake.Responder[optionalitygroup.OptionalDatetimeClientPutAllResponse], errResp azfake.ErrorResponder)

	// PutDefault is the fake for method OptionalDatetimeClient.PutDefault
	// HTTP status codes to indicate success: http.StatusNoContent
	PutDefault func(ctx context.Context, body optionalitygroup.DatetimeProperty, options *optionalitygroup.OptionalDatetimeClientPutDefaultOptions) (resp azfake.Responder[optionalitygroup.OptionalDatetimeClientPutDefaultResponse], errResp azfake.ErrorResponder)
}

// NewOptionalDatetimeServerTransport creates a new instance of OptionalDatetimeServerTransport with the provided implementation.
// The returned OptionalDatetimeServerTransport instance is connected to an instance of optionalitygroup.OptionalDatetimeClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewOptionalDatetimeServerTransport(srv *OptionalDatetimeServer) *OptionalDatetimeServerTransport {
	return &OptionalDatetimeServerTransport{srv: srv}
}

// OptionalDatetimeServerTransport connects instances of optionalitygroup.OptionalDatetimeClient to instances of OptionalDatetimeServer.
// Don't use this type directly, use NewOptionalDatetimeServerTransport instead.
type OptionalDatetimeServerTransport struct {
	srv *OptionalDatetimeServer
}

// Do implements the policy.Transporter interface for OptionalDatetimeServerTransport.
func (o *OptionalDatetimeServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return o.dispatchToMethodFake(req, method)
}

func (o *OptionalDatetimeServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "OptionalDatetimeClient.GetAll":
		resp, err = o.dispatchGetAll(req)
	case "OptionalDatetimeClient.GetDefault":
		resp, err = o.dispatchGetDefault(req)
	case "OptionalDatetimeClient.PutAll":
		resp, err = o.dispatchPutAll(req)
	case "OptionalDatetimeClient.PutDefault":
		resp, err = o.dispatchPutDefault(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (o *OptionalDatetimeServerTransport) dispatchGetAll(req *http.Request) (*http.Response, error) {
	if o.srv.GetAll == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetAll not implemented")}
	}
	respr, errRespr := o.srv.GetAll(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DatetimeProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *OptionalDatetimeServerTransport) dispatchGetDefault(req *http.Request) (*http.Response, error) {
	if o.srv.GetDefault == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDefault not implemented")}
	}
	respr, errRespr := o.srv.GetDefault(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DatetimeProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *OptionalDatetimeServerTransport) dispatchPutAll(req *http.Request) (*http.Response, error) {
	if o.srv.PutAll == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutAll not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[optionalitygroup.DatetimeProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := o.srv.PutAll(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *OptionalDatetimeServerTransport) dispatchPutDefault(req *http.Request) (*http.Response, error) {
	if o.srv.PutDefault == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutDefault not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[optionalitygroup.DatetimeProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := o.srv.PutDefault(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
