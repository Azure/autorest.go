// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"optionalitygroup"
)

// OptionalStringLiteralServer is a fake server for instances of the optionalitygroup.OptionalStringLiteralClient type.
type OptionalStringLiteralServer struct {
	// GetAll is the fake for method OptionalStringLiteralClient.GetAll
	// HTTP status codes to indicate success: http.StatusOK
	GetAll func(ctx context.Context, options *optionalitygroup.OptionalStringLiteralClientGetAllOptions) (resp azfake.Responder[optionalitygroup.OptionalStringLiteralClientGetAllResponse], errResp azfake.ErrorResponder)

	// GetDefault is the fake for method OptionalStringLiteralClient.GetDefault
	// HTTP status codes to indicate success: http.StatusOK
	GetDefault func(ctx context.Context, options *optionalitygroup.OptionalStringLiteralClientGetDefaultOptions) (resp azfake.Responder[optionalitygroup.OptionalStringLiteralClientGetDefaultResponse], errResp azfake.ErrorResponder)

	// PutAll is the fake for method OptionalStringLiteralClient.PutAll
	// HTTP status codes to indicate success: http.StatusNoContent
	PutAll func(ctx context.Context, body optionalitygroup.StringLiteralProperty, options *optionalitygroup.OptionalStringLiteralClientPutAllOptions) (resp azfake.Responder[optionalitygroup.OptionalStringLiteralClientPutAllResponse], errResp azfake.ErrorResponder)

	// PutDefault is the fake for method OptionalStringLiteralClient.PutDefault
	// HTTP status codes to indicate success: http.StatusNoContent
	PutDefault func(ctx context.Context, body optionalitygroup.StringLiteralProperty, options *optionalitygroup.OptionalStringLiteralClientPutDefaultOptions) (resp azfake.Responder[optionalitygroup.OptionalStringLiteralClientPutDefaultResponse], errResp azfake.ErrorResponder)
}

// NewOptionalStringLiteralServerTransport creates a new instance of OptionalStringLiteralServerTransport with the provided implementation.
// The returned OptionalStringLiteralServerTransport instance is connected to an instance of optionalitygroup.OptionalStringLiteralClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewOptionalStringLiteralServerTransport(srv *OptionalStringLiteralServer) *OptionalStringLiteralServerTransport {
	return &OptionalStringLiteralServerTransport{srv: srv}
}

// OptionalStringLiteralServerTransport connects instances of optionalitygroup.OptionalStringLiteralClient to instances of OptionalStringLiteralServer.
// Don't use this type directly, use NewOptionalStringLiteralServerTransport instead.
type OptionalStringLiteralServerTransport struct {
	srv *OptionalStringLiteralServer
}

// Do implements the policy.Transporter interface for OptionalStringLiteralServerTransport.
func (o *OptionalStringLiteralServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return o.dispatchToMethodFake(req, method)
}

func (o *OptionalStringLiteralServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "OptionalStringLiteralClient.GetAll":
		resp, err = o.dispatchGetAll(req)
	case "OptionalStringLiteralClient.GetDefault":
		resp, err = o.dispatchGetDefault(req)
	case "OptionalStringLiteralClient.PutAll":
		resp, err = o.dispatchPutAll(req)
	case "OptionalStringLiteralClient.PutDefault":
		resp, err = o.dispatchPutDefault(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (o *OptionalStringLiteralServerTransport) dispatchGetAll(req *http.Request) (*http.Response, error) {
	if o.srv.GetAll == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetAll not implemented")}
	}
	respr, errRespr := o.srv.GetAll(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).StringLiteralProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *OptionalStringLiteralServerTransport) dispatchGetDefault(req *http.Request) (*http.Response, error) {
	if o.srv.GetDefault == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDefault not implemented")}
	}
	respr, errRespr := o.srv.GetDefault(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).StringLiteralProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *OptionalStringLiteralServerTransport) dispatchPutAll(req *http.Request) (*http.Response, error) {
	if o.srv.PutAll == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutAll not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[optionalitygroup.StringLiteralProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := o.srv.PutAll(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *OptionalStringLiteralServerTransport) dispatchPutDefault(req *http.Request) (*http.Response, error) {
	if o.srv.PutDefault == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutDefault not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[optionalitygroup.StringLiteralProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := o.srv.PutDefault(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
