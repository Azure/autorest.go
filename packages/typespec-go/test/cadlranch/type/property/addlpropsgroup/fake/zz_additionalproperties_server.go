// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// AdditionalPropertiesServer is a fake server for instances of the addlpropsgroup.AdditionalPropertiesClient type.
type AdditionalPropertiesServer struct {
	// ExtendsFloatServer contains the fakes for client ExtendsFloatClient
	ExtendsFloatServer ExtendsFloatServer

	// ExtendsModelArrayServer contains the fakes for client ExtendsModelArrayClient
	ExtendsModelArrayServer ExtendsModelArrayServer

	// ExtendsModelServer contains the fakes for client ExtendsModelClient
	ExtendsModelServer ExtendsModelServer

	// ExtendsStringServer contains the fakes for client ExtendsStringClient
	ExtendsStringServer ExtendsStringServer

	// ExtendsUnknownServer contains the fakes for client ExtendsUnknownClient
	ExtendsUnknownServer ExtendsUnknownServer

	// ExtendsUnknownDerivedServer contains the fakes for client ExtendsUnknownDerivedClient
	ExtendsUnknownDerivedServer ExtendsUnknownDerivedServer

	// ExtendsUnknownDiscriminatedServer contains the fakes for client ExtendsUnknownDiscriminatedClient
	ExtendsUnknownDiscriminatedServer ExtendsUnknownDiscriminatedServer

	// IsFloatServer contains the fakes for client IsFloatClient
	IsFloatServer IsFloatServer

	// IsModelArrayServer contains the fakes for client IsModelArrayClient
	IsModelArrayServer IsModelArrayServer

	// IsModelServer contains the fakes for client IsModelClient
	IsModelServer IsModelServer

	// IsStringServer contains the fakes for client IsStringClient
	IsStringServer IsStringServer

	// IsUnknownServer contains the fakes for client IsUnknownClient
	IsUnknownServer IsUnknownServer

	// IsUnknownDerivedServer contains the fakes for client IsUnknownDerivedClient
	IsUnknownDerivedServer IsUnknownDerivedServer

	// IsUnknownDiscriminatedServer contains the fakes for client IsUnknownDiscriminatedClient
	IsUnknownDiscriminatedServer IsUnknownDiscriminatedServer
}

// NewAdditionalPropertiesServerTransport creates a new instance of AdditionalPropertiesServerTransport with the provided implementation.
// The returned AdditionalPropertiesServerTransport instance is connected to an instance of addlpropsgroup.AdditionalPropertiesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewAdditionalPropertiesServerTransport(srv *AdditionalPropertiesServer) *AdditionalPropertiesServerTransport {
	return &AdditionalPropertiesServerTransport{srv: srv}
}

// AdditionalPropertiesServerTransport connects instances of addlpropsgroup.AdditionalPropertiesClient to instances of AdditionalPropertiesServer.
// Don't use this type directly, use NewAdditionalPropertiesServerTransport instead.
type AdditionalPropertiesServerTransport struct {
	srv                                 *AdditionalPropertiesServer
	trMu                                sync.Mutex
	trExtendsFloatServer                *ExtendsFloatServerTransport
	trExtendsModelArrayServer           *ExtendsModelArrayServerTransport
	trExtendsModelServer                *ExtendsModelServerTransport
	trExtendsStringServer               *ExtendsStringServerTransport
	trExtendsUnknownServer              *ExtendsUnknownServerTransport
	trExtendsUnknownDerivedServer       *ExtendsUnknownDerivedServerTransport
	trExtendsUnknownDiscriminatedServer *ExtendsUnknownDiscriminatedServerTransport
	trIsFloatServer                     *IsFloatServerTransport
	trIsModelArrayServer                *IsModelArrayServerTransport
	trIsModelServer                     *IsModelServerTransport
	trIsStringServer                    *IsStringServerTransport
	trIsUnknownServer                   *IsUnknownServerTransport
	trIsUnknownDerivedServer            *IsUnknownDerivedServerTransport
	trIsUnknownDiscriminatedServer      *IsUnknownDiscriminatedServerTransport
}

// Do implements the policy.Transporter interface for AdditionalPropertiesServerTransport.
func (a *AdditionalPropertiesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return a.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (a *AdditionalPropertiesServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "ExtendsFloatClient":
		initServer(&a.trMu, &a.trExtendsFloatServer, func() *ExtendsFloatServerTransport {
			return NewExtendsFloatServerTransport(&a.srv.ExtendsFloatServer)
		})
		resp, err = a.trExtendsFloatServer.Do(req)
	case "ExtendsModelArrayClient":
		initServer(&a.trMu, &a.trExtendsModelArrayServer, func() *ExtendsModelArrayServerTransport {
			return NewExtendsModelArrayServerTransport(&a.srv.ExtendsModelArrayServer)
		})
		resp, err = a.trExtendsModelArrayServer.Do(req)
	case "ExtendsModelClient":
		initServer(&a.trMu, &a.trExtendsModelServer, func() *ExtendsModelServerTransport {
			return NewExtendsModelServerTransport(&a.srv.ExtendsModelServer)
		})
		resp, err = a.trExtendsModelServer.Do(req)
	case "ExtendsStringClient":
		initServer(&a.trMu, &a.trExtendsStringServer, func() *ExtendsStringServerTransport {
			return NewExtendsStringServerTransport(&a.srv.ExtendsStringServer)
		})
		resp, err = a.trExtendsStringServer.Do(req)
	case "ExtendsUnknownClient":
		initServer(&a.trMu, &a.trExtendsUnknownServer, func() *ExtendsUnknownServerTransport {
			return NewExtendsUnknownServerTransport(&a.srv.ExtendsUnknownServer)
		})
		resp, err = a.trExtendsUnknownServer.Do(req)
	case "ExtendsUnknownDerivedClient":
		initServer(&a.trMu, &a.trExtendsUnknownDerivedServer, func() *ExtendsUnknownDerivedServerTransport {
			return NewExtendsUnknownDerivedServerTransport(&a.srv.ExtendsUnknownDerivedServer)
		})
		resp, err = a.trExtendsUnknownDerivedServer.Do(req)
	case "ExtendsUnknownDiscriminatedClient":
		initServer(&a.trMu, &a.trExtendsUnknownDiscriminatedServer, func() *ExtendsUnknownDiscriminatedServerTransport {
			return NewExtendsUnknownDiscriminatedServerTransport(&a.srv.ExtendsUnknownDiscriminatedServer)
		})
		resp, err = a.trExtendsUnknownDiscriminatedServer.Do(req)
	case "IsFloatClient":
		initServer(&a.trMu, &a.trIsFloatServer, func() *IsFloatServerTransport {
			return NewIsFloatServerTransport(&a.srv.IsFloatServer)
		})
		resp, err = a.trIsFloatServer.Do(req)
	case "IsModelArrayClient":
		initServer(&a.trMu, &a.trIsModelArrayServer, func() *IsModelArrayServerTransport {
			return NewIsModelArrayServerTransport(&a.srv.IsModelArrayServer)
		})
		resp, err = a.trIsModelArrayServer.Do(req)
	case "IsModelClient":
		initServer(&a.trMu, &a.trIsModelServer, func() *IsModelServerTransport {
			return NewIsModelServerTransport(&a.srv.IsModelServer)
		})
		resp, err = a.trIsModelServer.Do(req)
	case "IsStringClient":
		initServer(&a.trMu, &a.trIsStringServer, func() *IsStringServerTransport {
			return NewIsStringServerTransport(&a.srv.IsStringServer)
		})
		resp, err = a.trIsStringServer.Do(req)
	case "IsUnknownClient":
		initServer(&a.trMu, &a.trIsUnknownServer, func() *IsUnknownServerTransport {
			return NewIsUnknownServerTransport(&a.srv.IsUnknownServer)
		})
		resp, err = a.trIsUnknownServer.Do(req)
	case "IsUnknownDerivedClient":
		initServer(&a.trMu, &a.trIsUnknownDerivedServer, func() *IsUnknownDerivedServerTransport {
			return NewIsUnknownDerivedServerTransport(&a.srv.IsUnknownDerivedServer)
		})
		resp, err = a.trIsUnknownDerivedServer.Do(req)
	case "IsUnknownDiscriminatedClient":
		initServer(&a.trMu, &a.trIsUnknownDiscriminatedServer, func() *IsUnknownDiscriminatedServerTransport {
			return NewIsUnknownDiscriminatedServerTransport(&a.srv.IsUnknownDiscriminatedServer)
		})
		resp, err = a.trIsUnknownDiscriminatedServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}
