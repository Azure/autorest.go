// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"addlpropsgroup"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// IsUnknownServer is a fake server for instances of the addlpropsgroup.IsUnknownClient type.
type IsUnknownServer struct {
	// Get is the fake for method IsUnknownClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, options *addlpropsgroup.IsUnknownClientGetOptions) (resp azfake.Responder[addlpropsgroup.IsUnknownClientGetResponse], errResp azfake.ErrorResponder)

	// Put is the fake for method IsUnknownClient.Put
	// HTTP status codes to indicate success: http.StatusNoContent
	Put func(ctx context.Context, body addlpropsgroup.IsUnknownAdditionalProperties, options *addlpropsgroup.IsUnknownClientPutOptions) (resp azfake.Responder[addlpropsgroup.IsUnknownClientPutResponse], errResp azfake.ErrorResponder)
}

// NewIsUnknownServerTransport creates a new instance of IsUnknownServerTransport with the provided implementation.
// The returned IsUnknownServerTransport instance is connected to an instance of addlpropsgroup.IsUnknownClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewIsUnknownServerTransport(srv *IsUnknownServer) *IsUnknownServerTransport {
	return &IsUnknownServerTransport{srv: srv}
}

// IsUnknownServerTransport connects instances of addlpropsgroup.IsUnknownClient to instances of IsUnknownServer.
// Don't use this type directly, use NewIsUnknownServerTransport instead.
type IsUnknownServerTransport struct {
	srv *IsUnknownServer
}

// Do implements the policy.Transporter interface for IsUnknownServerTransport.
func (i *IsUnknownServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return i.dispatchToMethodFake(req, method)
}

func (i *IsUnknownServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "IsUnknownClient.Get":
		resp, err = i.dispatchGet(req)
	case "IsUnknownClient.Put":
		resp, err = i.dispatchPut(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (i *IsUnknownServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if i.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	respr, errRespr := i.srv.Get(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).IsUnknownAdditionalProperties, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *IsUnknownServerTransport) dispatchPut(req *http.Request) (*http.Response, error) {
	if i.srv.Put == nil {
		return nil, &nonRetriableError{errors.New("fake for method Put not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[addlpropsgroup.IsUnknownAdditionalProperties](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.Put(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
