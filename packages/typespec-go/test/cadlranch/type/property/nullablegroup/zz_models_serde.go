//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package nullablegroup

import (
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"reflect"
)

// MarshalJSON implements the json.Marshaller interface for type BytesProperty.
func (b BytesProperty) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populateByteArray(objectMap, "nullableProperty", b.NullableProperty, func() any {
		return runtime.EncodeByteArray(b.NullableProperty, runtime.Base64StdFormat)
	})
	populate(objectMap, "requiredProperty", b.RequiredProperty)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BytesProperty.
func (b *BytesProperty) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", b, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nullableProperty":
			if val != nil && string(val) != "null" {
				err = runtime.DecodeByteArray(string(val), &b.NullableProperty, runtime.Base64StdFormat)
			}
			delete(rawMsg, key)
		case "requiredProperty":
			err = unpopulate(val, "RequiredProperty", &b.RequiredProperty)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", b, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CollectionsByteProperty.
func (c CollectionsByteProperty) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populateByteArray(objectMap, "nullableProperty", c.NullableProperty, func() any {
		encodedValue := make([]string, len(c.NullableProperty))
		for i := 0; i < len(c.NullableProperty); i++ {
			encodedValue[i] = runtime.EncodeByteArray(c.NullableProperty[i], runtime.Base64StdFormat)
		}
		return encodedValue
	})
	populate(objectMap, "requiredProperty", c.RequiredProperty)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CollectionsByteProperty.
func (c *CollectionsByteProperty) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nullableProperty":
			var encodedValue []string
			err = unpopulate(val, "NullableProperty", &encodedValue)
			if err == nil && len(encodedValue) > 0 {
				c.NullableProperty = make([][]byte, len(encodedValue))
				for i := 0; i < len(encodedValue) && err == nil; i++ {
					err = runtime.DecodeByteArray(encodedValue[i], &c.NullableProperty[i], runtime.Base64StdFormat)
				}
			}
			delete(rawMsg, key)
		case "requiredProperty":
			err = unpopulate(val, "RequiredProperty", &c.RequiredProperty)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CollectionsModelProperty.
func (c CollectionsModelProperty) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "nullableProperty", c.NullableProperty)
	populate(objectMap, "requiredProperty", c.RequiredProperty)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CollectionsModelProperty.
func (c *CollectionsModelProperty) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nullableProperty":
			err = unpopulate(val, "NullableProperty", &c.NullableProperty)
			delete(rawMsg, key)
		case "requiredProperty":
			err = unpopulate(val, "RequiredProperty", &c.RequiredProperty)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DatetimeProperty.
func (d DatetimeProperty) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populateDateTimeRFC3339(objectMap, "nullableProperty", d.NullableProperty)
	populate(objectMap, "requiredProperty", d.RequiredProperty)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DatetimeProperty.
func (d *DatetimeProperty) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nullableProperty":
			err = unpopulateDateTimeRFC3339(val, "NullableProperty", &d.NullableProperty)
			delete(rawMsg, key)
		case "requiredProperty":
			err = unpopulate(val, "RequiredProperty", &d.RequiredProperty)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DurationProperty.
func (d DurationProperty) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "nullableProperty", d.NullableProperty)
	populate(objectMap, "requiredProperty", d.RequiredProperty)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DurationProperty.
func (d *DurationProperty) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nullableProperty":
			err = unpopulate(val, "NullableProperty", &d.NullableProperty)
			delete(rawMsg, key)
		case "requiredProperty":
			err = unpopulate(val, "RequiredProperty", &d.RequiredProperty)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type InnerModel.
func (i InnerModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "property", i.Property)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type InnerModel.
func (i *InnerModel) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", i, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "property":
			err = unpopulate(val, "Property", &i.Property)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", i, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type StringProperty.
func (s StringProperty) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "nullableProperty", s.NullableProperty)
	populate(objectMap, "requiredProperty", s.RequiredProperty)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type StringProperty.
func (s *StringProperty) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nullableProperty":
			err = unpopulate(val, "NullableProperty", &s.NullableProperty)
			delete(rawMsg, key)
		case "requiredProperty":
			err = unpopulate(val, "RequiredProperty", &s.RequiredProperty)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

func populate(m map[string]any, k string, v any) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func populateByteArray[T any](m map[string]any, k string, b []T, convert func() any) {
	if azcore.IsNullValue(b) {
		m[k] = nil
	} else if len(b) == 0 {
		return
	} else {
		m[k] = convert()
	}
}

func unpopulate(data json.RawMessage, fn string, v any) error {
	if data == nil || string(data) == "null" {
		return nil
	}
	if err := json.Unmarshal(data, v); err != nil {
		return fmt.Errorf("struct field %s: %v", fn, err)
	}
	return nil
}
