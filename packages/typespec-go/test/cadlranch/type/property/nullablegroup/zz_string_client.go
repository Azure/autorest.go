//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package nullablegroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// StringClient contains the methods for the Type.Property.Nullable group.
// Don't use this type directly, use a constructor function instead.
type StringClient struct {
	internal *azcore.Client
}

// GetNonNull - Get models that will return all properties in the model
func (client *StringClient) GetNonNull(ctx context.Context, options *StringClientGetNonNullOptions) (StringClientGetNonNullResponse, error) {
	var err error
	req, err := client.getNonNullCreateRequest(ctx, options)
	if err != nil {
		return StringClientGetNonNullResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return StringClientGetNonNullResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return StringClientGetNonNullResponse{}, err
	}
	resp, err := client.getNonNullHandleResponse(httpResp)
	return resp, err
}

// getNonNullCreateRequest creates the GetNonNull request.
func (client *StringClient) getNonNullCreateRequest(ctx context.Context, options *StringClientGetNonNullOptions) (*policy.Request, error) {
	urlPath := "/type/property/nullable/string/non-null"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// getNonNullHandleResponse handles the GetNonNull response.
func (client *StringClient) getNonNullHandleResponse(resp *http.Response) (StringClientGetNonNullResponse, error) {
	result := StringClientGetNonNullResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.StringProperty); err != nil {
		return StringClientGetNonNullResponse{}, err
	}
	return result, nil
}

// GetNull - Get models that will return the default object
func (client *StringClient) GetNull(ctx context.Context, options *StringClientGetNullOptions) (StringClientGetNullResponse, error) {
	var err error
	req, err := client.getNullCreateRequest(ctx, options)
	if err != nil {
		return StringClientGetNullResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return StringClientGetNullResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return StringClientGetNullResponse{}, err
	}
	resp, err := client.getNullHandleResponse(httpResp)
	return resp, err
}

// getNullCreateRequest creates the GetNull request.
func (client *StringClient) getNullCreateRequest(ctx context.Context, options *StringClientGetNullOptions) (*policy.Request, error) {
	urlPath := "/type/property/nullable/string/null"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// getNullHandleResponse handles the GetNull response.
func (client *StringClient) getNullHandleResponse(resp *http.Response) (StringClientGetNullResponse, error) {
	result := StringClientGetNullResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.StringProperty); err != nil {
		return StringClientGetNullResponse{}, err
	}
	return result, nil
}

// PatchNonNull - Put a body with all properties present.
func (client *StringClient) PatchNonNull(ctx context.Context, body StringProperty, options *StringClientPatchNonNullOptions) (StringClientPatchNonNullResponse, error) {
	var err error
	req, err := client.patchNonNullCreateRequest(ctx, body, options)
	if err != nil {
		return StringClientPatchNonNullResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return StringClientPatchNonNullResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return StringClientPatchNonNullResponse{}, err
	}
	return StringClientPatchNonNullResponse{}, nil
}

// patchNonNullCreateRequest creates the PatchNonNull request.
func (client *StringClient) patchNonNullCreateRequest(ctx context.Context, body StringProperty, options *StringClientPatchNonNullOptions) (*policy.Request, error) {
	urlPath := "/type/property/nullable/string/non-null"
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/merge-patch+json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// PatchNull - Put a body with default properties.
func (client *StringClient) PatchNull(ctx context.Context, body StringProperty, options *StringClientPatchNullOptions) (StringClientPatchNullResponse, error) {
	var err error
	req, err := client.patchNullCreateRequest(ctx, body, options)
	if err != nil {
		return StringClientPatchNullResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return StringClientPatchNullResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return StringClientPatchNullResponse{}, err
	}
	return StringClientPatchNullResponse{}, nil
}

// patchNullCreateRequest creates the PatchNull request.
func (client *StringClient) patchNullCreateRequest(ctx context.Context, body StringProperty, options *StringClientPatchNullOptions) (*policy.Request, error) {
	urlPath := "/type/property/nullable/string/null"
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/merge-patch+json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}
