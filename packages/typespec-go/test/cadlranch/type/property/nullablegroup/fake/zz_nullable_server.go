// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// NullableServer is a fake server for instances of the nullablegroup.NullableClient type.
type NullableServer struct {
	// BytesServer contains the fakes for client BytesClient
	BytesServer BytesServer

	// CollectionsByteServer contains the fakes for client CollectionsByteClient
	CollectionsByteServer CollectionsByteServer

	// CollectionsModelServer contains the fakes for client CollectionsModelClient
	CollectionsModelServer CollectionsModelServer

	// DatetimeServer contains the fakes for client DatetimeClient
	DatetimeServer DatetimeServer

	// DurationServer contains the fakes for client DurationClient
	DurationServer DurationServer

	// StringServer contains the fakes for client StringClient
	StringServer StringServer
}

// NewNullableServerTransport creates a new instance of NullableServerTransport with the provided implementation.
// The returned NullableServerTransport instance is connected to an instance of nullablegroup.NullableClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewNullableServerTransport(srv *NullableServer) *NullableServerTransport {
	return &NullableServerTransport{srv: srv}
}

// NullableServerTransport connects instances of nullablegroup.NullableClient to instances of NullableServer.
// Don't use this type directly, use NewNullableServerTransport instead.
type NullableServerTransport struct {
	srv                      *NullableServer
	trMu                     sync.Mutex
	trBytesServer            *BytesServerTransport
	trCollectionsByteServer  *CollectionsByteServerTransport
	trCollectionsModelServer *CollectionsModelServerTransport
	trDatetimeServer         *DatetimeServerTransport
	trDurationServer         *DurationServerTransport
	trStringServer           *StringServerTransport
}

// Do implements the policy.Transporter interface for NullableServerTransport.
func (n *NullableServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return n.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (n *NullableServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "BytesClient":
		initServer(&n.trMu, &n.trBytesServer, func() *BytesServerTransport {
			return NewBytesServerTransport(&n.srv.BytesServer)
		})
		resp, err = n.trBytesServer.Do(req)
	case "CollectionsByteClient":
		initServer(&n.trMu, &n.trCollectionsByteServer, func() *CollectionsByteServerTransport {
			return NewCollectionsByteServerTransport(&n.srv.CollectionsByteServer)
		})
		resp, err = n.trCollectionsByteServer.Do(req)
	case "CollectionsModelClient":
		initServer(&n.trMu, &n.trCollectionsModelServer, func() *CollectionsModelServerTransport {
			return NewCollectionsModelServerTransport(&n.srv.CollectionsModelServer)
		})
		resp, err = n.trCollectionsModelServer.Do(req)
	case "DatetimeClient":
		initServer(&n.trMu, &n.trDatetimeServer, func() *DatetimeServerTransport {
			return NewDatetimeServerTransport(&n.srv.DatetimeServer)
		})
		resp, err = n.trDatetimeServer.Do(req)
	case "DurationClient":
		initServer(&n.trMu, &n.trDurationServer, func() *DurationServerTransport {
			return NewDurationServerTransport(&n.srv.DurationServer)
		})
		resp, err = n.trDurationServer.Do(req)
	case "StringClient":
		initServer(&n.trMu, &n.trStringServer, func() *StringServerTransport {
			return NewStringServerTransport(&n.srv.StringServer)
		})
		resp, err = n.trStringServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}
