// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"nullablegroup"
)

// NullableCollectionsStringServer is a fake server for instances of the nullablegroup.NullableCollectionsStringClient type.
type NullableCollectionsStringServer struct {
	// GetNonNull is the fake for method NullableCollectionsStringClient.GetNonNull
	// HTTP status codes to indicate success: http.StatusOK
	GetNonNull func(ctx context.Context, options *nullablegroup.NullableCollectionsStringClientGetNonNullOptions) (resp azfake.Responder[nullablegroup.NullableCollectionsStringClientGetNonNullResponse], errResp azfake.ErrorResponder)

	// GetNull is the fake for method NullableCollectionsStringClient.GetNull
	// HTTP status codes to indicate success: http.StatusOK
	GetNull func(ctx context.Context, options *nullablegroup.NullableCollectionsStringClientGetNullOptions) (resp azfake.Responder[nullablegroup.NullableCollectionsStringClientGetNullResponse], errResp azfake.ErrorResponder)

	// PatchNonNull is the fake for method NullableCollectionsStringClient.PatchNonNull
	// HTTP status codes to indicate success: http.StatusNoContent
	PatchNonNull func(ctx context.Context, body nullablegroup.CollectionsStringProperty, options *nullablegroup.NullableCollectionsStringClientPatchNonNullOptions) (resp azfake.Responder[nullablegroup.NullableCollectionsStringClientPatchNonNullResponse], errResp azfake.ErrorResponder)

	// PatchNull is the fake for method NullableCollectionsStringClient.PatchNull
	// HTTP status codes to indicate success: http.StatusNoContent
	PatchNull func(ctx context.Context, body nullablegroup.CollectionsStringProperty, options *nullablegroup.NullableCollectionsStringClientPatchNullOptions) (resp azfake.Responder[nullablegroup.NullableCollectionsStringClientPatchNullResponse], errResp azfake.ErrorResponder)
}

// NewNullableCollectionsStringServerTransport creates a new instance of NullableCollectionsStringServerTransport with the provided implementation.
// The returned NullableCollectionsStringServerTransport instance is connected to an instance of nullablegroup.NullableCollectionsStringClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewNullableCollectionsStringServerTransport(srv *NullableCollectionsStringServer) *NullableCollectionsStringServerTransport {
	return &NullableCollectionsStringServerTransport{srv: srv}
}

// NullableCollectionsStringServerTransport connects instances of nullablegroup.NullableCollectionsStringClient to instances of NullableCollectionsStringServer.
// Don't use this type directly, use NewNullableCollectionsStringServerTransport instead.
type NullableCollectionsStringServerTransport struct {
	srv *NullableCollectionsStringServer
}

// Do implements the policy.Transporter interface for NullableCollectionsStringServerTransport.
func (n *NullableCollectionsStringServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return n.dispatchToMethodFake(req, method)
}

func (n *NullableCollectionsStringServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "NullableCollectionsStringClient.GetNonNull":
		resp, err = n.dispatchGetNonNull(req)
	case "NullableCollectionsStringClient.GetNull":
		resp, err = n.dispatchGetNull(req)
	case "NullableCollectionsStringClient.PatchNonNull":
		resp, err = n.dispatchPatchNonNull(req)
	case "NullableCollectionsStringClient.PatchNull":
		resp, err = n.dispatchPatchNull(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (n *NullableCollectionsStringServerTransport) dispatchGetNonNull(req *http.Request) (*http.Response, error) {
	if n.srv.GetNonNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetNonNull not implemented")}
	}
	respr, errRespr := n.srv.GetNonNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).CollectionsStringProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (n *NullableCollectionsStringServerTransport) dispatchGetNull(req *http.Request) (*http.Response, error) {
	if n.srv.GetNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetNull not implemented")}
	}
	respr, errRespr := n.srv.GetNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).CollectionsStringProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (n *NullableCollectionsStringServerTransport) dispatchPatchNonNull(req *http.Request) (*http.Response, error) {
	if n.srv.PatchNonNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method PatchNonNull not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[nullablegroup.CollectionsStringProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := n.srv.PatchNonNull(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (n *NullableCollectionsStringServerTransport) dispatchPatchNull(req *http.Request) (*http.Response, error) {
	if n.srv.PatchNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method PatchNull not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[nullablegroup.CollectionsStringProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := n.srv.PatchNull(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
