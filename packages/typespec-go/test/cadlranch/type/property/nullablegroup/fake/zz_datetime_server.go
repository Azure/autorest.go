// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"nullablegroup"
)

// DatetimeServer is a fake server for instances of the nullablegroup.DatetimeClient type.
type DatetimeServer struct {
	// GetNonNull is the fake for method DatetimeClient.GetNonNull
	// HTTP status codes to indicate success: http.StatusOK
	GetNonNull func(ctx context.Context, options *nullablegroup.DatetimeClientGetNonNullOptions) (resp azfake.Responder[nullablegroup.DatetimeClientGetNonNullResponse], errResp azfake.ErrorResponder)

	// GetNull is the fake for method DatetimeClient.GetNull
	// HTTP status codes to indicate success: http.StatusOK
	GetNull func(ctx context.Context, options *nullablegroup.DatetimeClientGetNullOptions) (resp azfake.Responder[nullablegroup.DatetimeClientGetNullResponse], errResp azfake.ErrorResponder)

	// PatchNonNull is the fake for method DatetimeClient.PatchNonNull
	// HTTP status codes to indicate success: http.StatusNoContent
	PatchNonNull func(ctx context.Context, body nullablegroup.DatetimeProperty, options *nullablegroup.DatetimeClientPatchNonNullOptions) (resp azfake.Responder[nullablegroup.DatetimeClientPatchNonNullResponse], errResp azfake.ErrorResponder)

	// PatchNull is the fake for method DatetimeClient.PatchNull
	// HTTP status codes to indicate success: http.StatusNoContent
	PatchNull func(ctx context.Context, body nullablegroup.DatetimeProperty, options *nullablegroup.DatetimeClientPatchNullOptions) (resp azfake.Responder[nullablegroup.DatetimeClientPatchNullResponse], errResp azfake.ErrorResponder)
}

// NewDatetimeServerTransport creates a new instance of DatetimeServerTransport with the provided implementation.
// The returned DatetimeServerTransport instance is connected to an instance of nullablegroup.DatetimeClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewDatetimeServerTransport(srv *DatetimeServer) *DatetimeServerTransport {
	return &DatetimeServerTransport{srv: srv}
}

// DatetimeServerTransport connects instances of nullablegroup.DatetimeClient to instances of DatetimeServer.
// Don't use this type directly, use NewDatetimeServerTransport instead.
type DatetimeServerTransport struct {
	srv *DatetimeServer
}

// Do implements the policy.Transporter interface for DatetimeServerTransport.
func (d *DatetimeServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "DatetimeClient.GetNonNull":
		resp, err = d.dispatchGetNonNull(req)
	case "DatetimeClient.GetNull":
		resp, err = d.dispatchGetNull(req)
	case "DatetimeClient.PatchNonNull":
		resp, err = d.dispatchPatchNonNull(req)
	case "DatetimeClient.PatchNull":
		resp, err = d.dispatchPatchNull(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (d *DatetimeServerTransport) dispatchGetNonNull(req *http.Request) (*http.Response, error) {
	if d.srv.GetNonNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetNonNull not implemented")}
	}
	respr, errRespr := d.srv.GetNonNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DatetimeProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DatetimeServerTransport) dispatchGetNull(req *http.Request) (*http.Response, error) {
	if d.srv.GetNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetNull not implemented")}
	}
	respr, errRespr := d.srv.GetNull(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DatetimeProperty, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DatetimeServerTransport) dispatchPatchNonNull(req *http.Request) (*http.Response, error) {
	if d.srv.PatchNonNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method PatchNonNull not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[nullablegroup.DatetimeProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.PatchNonNull(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DatetimeServerTransport) dispatchPatchNull(req *http.Request) (*http.Response, error) {
	if d.srv.PatchNull == nil {
		return nil, &nonRetriableError{errors.New("fake for method PatchNull not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[nullablegroup.DatetimeProperty](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.PatchNull(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
