// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package nullablegroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// NullableCollectionsStringClient contains the methods for the NullableCollectionsString group.
// Don't use this type directly, use [NullableClient.NewNullableCollectionsStringClient] instead.
type NullableCollectionsStringClient struct {
	internal *azcore.Client
}

// GetNonNull - Get models that will return all properties in the model
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - NullableCollectionsStringClientGetNonNullOptions contains the optional parameters for the NullableCollectionsStringClient.GetNonNull
//     method.
func (client *NullableCollectionsStringClient) GetNonNull(ctx context.Context, options *NullableCollectionsStringClientGetNonNullOptions) (NullableCollectionsStringClientGetNonNullResponse, error) {
	var err error
	const operationName = "NullableCollectionsStringClient.GetNonNull"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getNonNullCreateRequest(ctx, options)
	if err != nil {
		return NullableCollectionsStringClientGetNonNullResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NullableCollectionsStringClientGetNonNullResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NullableCollectionsStringClientGetNonNullResponse{}, err
	}
	resp, err := client.getNonNullHandleResponse(httpResp)
	return resp, err
}

// getNonNullCreateRequest creates the GetNonNull request.
func (client *NullableCollectionsStringClient) getNonNullCreateRequest(ctx context.Context, _ *NullableCollectionsStringClientGetNonNullOptions) (*policy.Request, error) {
	urlPath := "/type/property/nullable/collections/string/non-null"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getNonNullHandleResponse handles the GetNonNull response.
func (client *NullableCollectionsStringClient) getNonNullHandleResponse(resp *http.Response) (NullableCollectionsStringClientGetNonNullResponse, error) {
	result := NullableCollectionsStringClientGetNonNullResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CollectionsStringProperty); err != nil {
		return NullableCollectionsStringClientGetNonNullResponse{}, err
	}
	return result, nil
}

// GetNull - Get models that will return the default object
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - NullableCollectionsStringClientGetNullOptions contains the optional parameters for the NullableCollectionsStringClient.GetNull
//     method.
func (client *NullableCollectionsStringClient) GetNull(ctx context.Context, options *NullableCollectionsStringClientGetNullOptions) (NullableCollectionsStringClientGetNullResponse, error) {
	var err error
	const operationName = "NullableCollectionsStringClient.GetNull"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getNullCreateRequest(ctx, options)
	if err != nil {
		return NullableCollectionsStringClientGetNullResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NullableCollectionsStringClientGetNullResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NullableCollectionsStringClientGetNullResponse{}, err
	}
	resp, err := client.getNullHandleResponse(httpResp)
	return resp, err
}

// getNullCreateRequest creates the GetNull request.
func (client *NullableCollectionsStringClient) getNullCreateRequest(ctx context.Context, _ *NullableCollectionsStringClientGetNullOptions) (*policy.Request, error) {
	urlPath := "/type/property/nullable/collections/string/null"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getNullHandleResponse handles the GetNull response.
func (client *NullableCollectionsStringClient) getNullHandleResponse(resp *http.Response) (NullableCollectionsStringClientGetNullResponse, error) {
	result := NullableCollectionsStringClientGetNullResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CollectionsStringProperty); err != nil {
		return NullableCollectionsStringClientGetNullResponse{}, err
	}
	return result, nil
}

// PatchNonNull - Put a body with all properties present.
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - NullableCollectionsStringClientPatchNonNullOptions contains the optional parameters for the NullableCollectionsStringClient.PatchNonNull
//     method.
func (client *NullableCollectionsStringClient) PatchNonNull(ctx context.Context, body CollectionsStringProperty, options *NullableCollectionsStringClientPatchNonNullOptions) (NullableCollectionsStringClientPatchNonNullResponse, error) {
	var err error
	const operationName = "NullableCollectionsStringClient.PatchNonNull"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.patchNonNullCreateRequest(ctx, body, options)
	if err != nil {
		return NullableCollectionsStringClientPatchNonNullResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NullableCollectionsStringClientPatchNonNullResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return NullableCollectionsStringClientPatchNonNullResponse{}, err
	}
	return NullableCollectionsStringClientPatchNonNullResponse{}, nil
}

// patchNonNullCreateRequest creates the PatchNonNull request.
func (client *NullableCollectionsStringClient) patchNonNullCreateRequest(ctx context.Context, body CollectionsStringProperty, _ *NullableCollectionsStringClientPatchNonNullOptions) (*policy.Request, error) {
	urlPath := "/type/property/nullable/collections/string/non-null"
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/merge-patch+json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// PatchNull - Put a body with default properties.
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - NullableCollectionsStringClientPatchNullOptions contains the optional parameters for the NullableCollectionsStringClient.PatchNull
//     method.
func (client *NullableCollectionsStringClient) PatchNull(ctx context.Context, body CollectionsStringProperty, options *NullableCollectionsStringClientPatchNullOptions) (NullableCollectionsStringClientPatchNullResponse, error) {
	var err error
	const operationName = "NullableCollectionsStringClient.PatchNull"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.patchNullCreateRequest(ctx, body, options)
	if err != nil {
		return NullableCollectionsStringClientPatchNullResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NullableCollectionsStringClientPatchNullResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return NullableCollectionsStringClientPatchNullResponse{}, err
	}
	return NullableCollectionsStringClientPatchNullResponse{}, nil
}

// patchNullCreateRequest creates the PatchNull request.
func (client *NullableCollectionsStringClient) patchNullCreateRequest(ctx context.Context, body CollectionsStringProperty, _ *NullableCollectionsStringClientPatchNullOptions) (*policy.Request, error) {
	urlPath := "/type/property/nullable/collections/string/null"
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/merge-patch+json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}
