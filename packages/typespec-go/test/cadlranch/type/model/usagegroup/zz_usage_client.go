// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package usagegroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// UsageClient - Illustrates usage of Record in different places(Operation parameters, return type or both).
// Don't use this type directly, use a constructor function instead.
type UsageClient struct {
	internal *azcore.Client
}

// - options - UsageClientInputOptions contains the optional parameters for the UsageClient.Input method.
func (client *UsageClient) Input(ctx context.Context, input InputRecord, options *UsageClientInputOptions) (UsageClientInputResponse, error) {
	var err error
	const operationName = "UsageClient.Input"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.inputCreateRequest(ctx, input, options)
	if err != nil {
		return UsageClientInputResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return UsageClientInputResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return UsageClientInputResponse{}, err
	}
	return UsageClientInputResponse{}, nil
}

// inputCreateRequest creates the Input request.
func (client *UsageClient) inputCreateRequest(ctx context.Context, input InputRecord, _ *UsageClientInputOptions) (*policy.Request, error) {
	urlPath := "/type/model/usage/input"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, input); err != nil {
		return nil, err
	}
	return req, nil
}

// - options - UsageClientInputAndOutputOptions contains the optional parameters for the UsageClient.InputAndOutput method.
func (client *UsageClient) InputAndOutput(ctx context.Context, body InputOutputRecord, options *UsageClientInputAndOutputOptions) (UsageClientInputAndOutputResponse, error) {
	var err error
	const operationName = "UsageClient.InputAndOutput"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.inputAndOutputCreateRequest(ctx, body, options)
	if err != nil {
		return UsageClientInputAndOutputResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return UsageClientInputAndOutputResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return UsageClientInputAndOutputResponse{}, err
	}
	resp, err := client.inputAndOutputHandleResponse(httpResp)
	return resp, err
}

// inputAndOutputCreateRequest creates the InputAndOutput request.
func (client *UsageClient) inputAndOutputCreateRequest(ctx context.Context, body InputOutputRecord, _ *UsageClientInputAndOutputOptions) (*policy.Request, error) {
	urlPath := "/type/model/usage/input-output"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// inputAndOutputHandleResponse handles the InputAndOutput response.
func (client *UsageClient) inputAndOutputHandleResponse(resp *http.Response) (UsageClientInputAndOutputResponse, error) {
	result := UsageClientInputAndOutputResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.InputOutputRecord); err != nil {
		return UsageClientInputAndOutputResponse{}, err
	}
	return result, nil
}

// - options - UsageClientOutputOptions contains the optional parameters for the UsageClient.Output method.
func (client *UsageClient) Output(ctx context.Context, options *UsageClientOutputOptions) (UsageClientOutputResponse, error) {
	var err error
	const operationName = "UsageClient.Output"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.outputCreateRequest(ctx, options)
	if err != nil {
		return UsageClientOutputResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return UsageClientOutputResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return UsageClientOutputResponse{}, err
	}
	resp, err := client.outputHandleResponse(httpResp)
	return resp, err
}

// outputCreateRequest creates the Output request.
func (client *UsageClient) outputCreateRequest(ctx context.Context, _ *UsageClientOutputOptions) (*policy.Request, error) {
	urlPath := "/type/model/usage/output"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// outputHandleResponse handles the Output response.
func (client *UsageClient) outputHandleResponse(resp *http.Response) (UsageClientOutputResponse, error) {
	result := UsageClientOutputResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.OutputRecord); err != nil {
		return UsageClientOutputResponse{}, err
	}
	return result, nil
}
