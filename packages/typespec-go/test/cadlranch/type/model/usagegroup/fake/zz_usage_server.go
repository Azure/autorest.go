// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"usagegroup"
)

// UsageServer is a fake server for instances of the usagegroup.UsageClient type.
type UsageServer struct {
	// Input is the fake for method UsageClient.Input
	// HTTP status codes to indicate success: http.StatusNoContent
	Input func(ctx context.Context, input usagegroup.InputRecord, options *usagegroup.UsageClientInputOptions) (resp azfake.Responder[usagegroup.UsageClientInputResponse], errResp azfake.ErrorResponder)

	// InputAndOutput is the fake for method UsageClient.InputAndOutput
	// HTTP status codes to indicate success: http.StatusOK
	InputAndOutput func(ctx context.Context, body usagegroup.InputOutputRecord, options *usagegroup.UsageClientInputAndOutputOptions) (resp azfake.Responder[usagegroup.UsageClientInputAndOutputResponse], errResp azfake.ErrorResponder)

	// Output is the fake for method UsageClient.Output
	// HTTP status codes to indicate success: http.StatusOK
	Output func(ctx context.Context, options *usagegroup.UsageClientOutputOptions) (resp azfake.Responder[usagegroup.UsageClientOutputResponse], errResp azfake.ErrorResponder)
}

// NewUsageServerTransport creates a new instance of UsageServerTransport with the provided implementation.
// The returned UsageServerTransport instance is connected to an instance of usagegroup.UsageClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewUsageServerTransport(srv *UsageServer) *UsageServerTransport {
	return &UsageServerTransport{srv: srv}
}

// UsageServerTransport connects instances of usagegroup.UsageClient to instances of UsageServer.
// Don't use this type directly, use NewUsageServerTransport instead.
type UsageServerTransport struct {
	srv *UsageServer
}

// Do implements the policy.Transporter interface for UsageServerTransport.
func (u *UsageServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return u.dispatchToMethodFake(req, method)
}

func (u *UsageServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "UsageClient.Input":
		resp, err = u.dispatchInput(req)
	case "UsageClient.InputAndOutput":
		resp, err = u.dispatchInputAndOutput(req)
	case "UsageClient.Output":
		resp, err = u.dispatchOutput(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (u *UsageServerTransport) dispatchInput(req *http.Request) (*http.Response, error) {
	if u.srv.Input == nil {
		return nil, &nonRetriableError{errors.New("fake for method Input not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[usagegroup.InputRecord](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := u.srv.Input(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (u *UsageServerTransport) dispatchInputAndOutput(req *http.Request) (*http.Response, error) {
	if u.srv.InputAndOutput == nil {
		return nil, &nonRetriableError{errors.New("fake for method InputAndOutput not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[usagegroup.InputOutputRecord](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := u.srv.InputAndOutput(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).InputOutputRecord, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (u *UsageServerTransport) dispatchOutput(req *http.Request) (*http.Response, error) {
	if u.srv.Output == nil {
		return nil, &nonRetriableError{errors.New("fake for method Output not implemented")}
	}
	respr, errRespr := u.srv.Output(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).OutputRecord, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
