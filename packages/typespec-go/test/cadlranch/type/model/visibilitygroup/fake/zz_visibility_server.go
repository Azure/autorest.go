// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"visibilitygroup"
)

// VisibilityServer is a fake server for instances of the visibilitygroup.VisibilityClient type.
type VisibilityServer struct {
	// DeleteModel is the fake for method VisibilityClient.DeleteModel
	// HTTP status codes to indicate success: http.StatusNoContent
	DeleteModel func(ctx context.Context, input visibilitygroup.VisibilityModel, options *visibilitygroup.VisibilityClientDeleteModelOptions) (resp azfake.Responder[visibilitygroup.VisibilityClientDeleteModelResponse], errResp azfake.ErrorResponder)

	// GetModel is the fake for method VisibilityClient.GetModel
	// HTTP status codes to indicate success: http.StatusOK
	GetModel func(ctx context.Context, input visibilitygroup.VisibilityModel, options *visibilitygroup.VisibilityClientGetModelOptions) (resp azfake.Responder[visibilitygroup.VisibilityClientGetModelResponse], errResp azfake.ErrorResponder)

	// HeadModel is the fake for method VisibilityClient.HeadModel
	// HTTP status codes to indicate success: http.StatusOK
	HeadModel func(ctx context.Context, input visibilitygroup.VisibilityModel, options *visibilitygroup.VisibilityClientHeadModelOptions) (resp azfake.Responder[visibilitygroup.VisibilityClientHeadModelResponse], errResp azfake.ErrorResponder)

	// PatchModel is the fake for method VisibilityClient.PatchModel
	// HTTP status codes to indicate success: http.StatusNoContent
	PatchModel func(ctx context.Context, input visibilitygroup.VisibilityModel, options *visibilitygroup.VisibilityClientPatchModelOptions) (resp azfake.Responder[visibilitygroup.VisibilityClientPatchModelResponse], errResp azfake.ErrorResponder)

	// PostModel is the fake for method VisibilityClient.PostModel
	// HTTP status codes to indicate success: http.StatusNoContent
	PostModel func(ctx context.Context, input visibilitygroup.VisibilityModel, options *visibilitygroup.VisibilityClientPostModelOptions) (resp azfake.Responder[visibilitygroup.VisibilityClientPostModelResponse], errResp azfake.ErrorResponder)

	// PutModel is the fake for method VisibilityClient.PutModel
	// HTTP status codes to indicate success: http.StatusNoContent
	PutModel func(ctx context.Context, input visibilitygroup.VisibilityModel, options *visibilitygroup.VisibilityClientPutModelOptions) (resp azfake.Responder[visibilitygroup.VisibilityClientPutModelResponse], errResp azfake.ErrorResponder)

	// PutReadOnlyModel is the fake for method VisibilityClient.PutReadOnlyModel
	// HTTP status codes to indicate success: http.StatusOK
	PutReadOnlyModel func(ctx context.Context, input visibilitygroup.ReadOnlyModel, options *visibilitygroup.VisibilityClientPutReadOnlyModelOptions) (resp azfake.Responder[visibilitygroup.VisibilityClientPutReadOnlyModelResponse], errResp azfake.ErrorResponder)
}

// NewVisibilityServerTransport creates a new instance of VisibilityServerTransport with the provided implementation.
// The returned VisibilityServerTransport instance is connected to an instance of visibilitygroup.VisibilityClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewVisibilityServerTransport(srv *VisibilityServer) *VisibilityServerTransport {
	return &VisibilityServerTransport{srv: srv}
}

// VisibilityServerTransport connects instances of visibilitygroup.VisibilityClient to instances of VisibilityServer.
// Don't use this type directly, use NewVisibilityServerTransport instead.
type VisibilityServerTransport struct {
	srv *VisibilityServer
}

// Do implements the policy.Transporter interface for VisibilityServerTransport.
func (v *VisibilityServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return v.dispatchToMethodFake(req, method)
}

func (v *VisibilityServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "VisibilityClient.DeleteModel":
		resp, err = v.dispatchDeleteModel(req)
	case "VisibilityClient.GetModel":
		resp, err = v.dispatchGetModel(req)
	case "VisibilityClient.HeadModel":
		resp, err = v.dispatchHeadModel(req)
	case "VisibilityClient.PatchModel":
		resp, err = v.dispatchPatchModel(req)
	case "VisibilityClient.PostModel":
		resp, err = v.dispatchPostModel(req)
	case "VisibilityClient.PutModel":
		resp, err = v.dispatchPutModel(req)
	case "VisibilityClient.PutReadOnlyModel":
		resp, err = v.dispatchPutReadOnlyModel(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (v *VisibilityServerTransport) dispatchDeleteModel(req *http.Request) (*http.Response, error) {
	if v.srv.DeleteModel == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteModel not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[visibilitygroup.VisibilityModel](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := v.srv.DeleteModel(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (v *VisibilityServerTransport) dispatchGetModel(req *http.Request) (*http.Response, error) {
	if v.srv.GetModel == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetModel not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[visibilitygroup.VisibilityModel](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := v.srv.GetModel(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).VisibilityModel, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (v *VisibilityServerTransport) dispatchHeadModel(req *http.Request) (*http.Response, error) {
	if v.srv.HeadModel == nil {
		return nil, &nonRetriableError{errors.New("fake for method HeadModel not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[visibilitygroup.VisibilityModel](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := v.srv.HeadModel(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (v *VisibilityServerTransport) dispatchPatchModel(req *http.Request) (*http.Response, error) {
	if v.srv.PatchModel == nil {
		return nil, &nonRetriableError{errors.New("fake for method PatchModel not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[visibilitygroup.VisibilityModel](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := v.srv.PatchModel(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (v *VisibilityServerTransport) dispatchPostModel(req *http.Request) (*http.Response, error) {
	if v.srv.PostModel == nil {
		return nil, &nonRetriableError{errors.New("fake for method PostModel not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[visibilitygroup.VisibilityModel](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := v.srv.PostModel(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (v *VisibilityServerTransport) dispatchPutModel(req *http.Request) (*http.Response, error) {
	if v.srv.PutModel == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutModel not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[visibilitygroup.VisibilityModel](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := v.srv.PutModel(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (v *VisibilityServerTransport) dispatchPutReadOnlyModel(req *http.Request) (*http.Response, error) {
	if v.srv.PutReadOnlyModel == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutReadOnlyModel not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[visibilitygroup.ReadOnlyModel](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := v.srv.PutReadOnlyModel(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ReadOnlyModel, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
