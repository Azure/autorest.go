//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package emptygroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// EmptyClient contains the methods for the Type.Model.Empty group.
// Don't use this type directly, use a constructor function instead.
type EmptyClient struct {
	internal *azcore.Client
}

func (client *EmptyClient) GetEmpty(ctx context.Context, options *EmptyClientGetEmptyOptions) (EmptyClientGetEmptyResponse, error) {
	var err error
	req, err := client.getEmptyCreateRequest(ctx, options)
	if err != nil {
		return EmptyClientGetEmptyResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EmptyClientGetEmptyResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return EmptyClientGetEmptyResponse{}, err
	}
	resp, err := client.getEmptyHandleResponse(httpResp)
	return resp, err
}

// getEmptyCreateRequest creates the GetEmpty request.
func (client *EmptyClient) getEmptyCreateRequest(ctx context.Context, options *EmptyClientGetEmptyOptions) (*policy.Request, error) {
	urlPath := "/type/model/empty/alone"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getEmptyHandleResponse handles the GetEmpty response.
func (client *EmptyClient) getEmptyHandleResponse(resp *http.Response) (EmptyClientGetEmptyResponse, error) {
	result := EmptyClientGetEmptyResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.EmptyOutput); err != nil {
		return EmptyClientGetEmptyResponse{}, err
	}
	return result, nil
}

func (client *EmptyClient) PostRoundTripEmpty(ctx context.Context, body EmptyInputOutput, options *EmptyClientPostRoundTripEmptyOptions) (EmptyClientPostRoundTripEmptyResponse, error) {
	var err error
	req, err := client.postRoundTripEmptyCreateRequest(ctx, body, options)
	if err != nil {
		return EmptyClientPostRoundTripEmptyResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EmptyClientPostRoundTripEmptyResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return EmptyClientPostRoundTripEmptyResponse{}, err
	}
	resp, err := client.postRoundTripEmptyHandleResponse(httpResp)
	return resp, err
}

// postRoundTripEmptyCreateRequest creates the PostRoundTripEmpty request.
func (client *EmptyClient) postRoundTripEmptyCreateRequest(ctx context.Context, body EmptyInputOutput, options *EmptyClientPostRoundTripEmptyOptions) (*policy.Request, error) {
	urlPath := "/type/model/empty/round-trip"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// postRoundTripEmptyHandleResponse handles the PostRoundTripEmpty response.
func (client *EmptyClient) postRoundTripEmptyHandleResponse(resp *http.Response) (EmptyClientPostRoundTripEmptyResponse, error) {
	result := EmptyClientPostRoundTripEmptyResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.EmptyInputOutput); err != nil {
		return EmptyClientPostRoundTripEmptyResponse{}, err
	}
	return result, nil
}

func (client *EmptyClient) PutEmpty(ctx context.Context, input EmptyInput, options *EmptyClientPutEmptyOptions) (EmptyClientPutEmptyResponse, error) {
	var err error
	req, err := client.putEmptyCreateRequest(ctx, input, options)
	if err != nil {
		return EmptyClientPutEmptyResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EmptyClientPutEmptyResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return EmptyClientPutEmptyResponse{}, err
	}
	return EmptyClientPutEmptyResponse{}, nil
}

// putEmptyCreateRequest creates the PutEmpty request.
func (client *EmptyClient) putEmptyCreateRequest(ctx context.Context, input EmptyInput, options *EmptyClientPutEmptyOptions) (*policy.Request, error) {
	urlPath := "/type/model/empty/alone"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, input); err != nil {
		return nil, err
	}
	return req, nil
}
