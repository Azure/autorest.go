// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"singlediscgroup"
)

// SingleDiscriminatorServer is a fake server for instances of the singlediscgroup.SingleDiscriminatorClient type.
type SingleDiscriminatorServer struct {
	// GetLegacyModel is the fake for method SingleDiscriminatorClient.GetLegacyModel
	// HTTP status codes to indicate success: http.StatusOK
	GetLegacyModel func(ctx context.Context, options *singlediscgroup.SingleDiscriminatorClientGetLegacyModelOptions) (resp azfake.Responder[singlediscgroup.SingleDiscriminatorClientGetLegacyModelResponse], errResp azfake.ErrorResponder)

	// GetMissingDiscriminator is the fake for method SingleDiscriminatorClient.GetMissingDiscriminator
	// HTTP status codes to indicate success: http.StatusOK
	GetMissingDiscriminator func(ctx context.Context, options *singlediscgroup.SingleDiscriminatorClientGetMissingDiscriminatorOptions) (resp azfake.Responder[singlediscgroup.SingleDiscriminatorClientGetMissingDiscriminatorResponse], errResp azfake.ErrorResponder)

	// GetModel is the fake for method SingleDiscriminatorClient.GetModel
	// HTTP status codes to indicate success: http.StatusOK
	GetModel func(ctx context.Context, options *singlediscgroup.SingleDiscriminatorClientGetModelOptions) (resp azfake.Responder[singlediscgroup.SingleDiscriminatorClientGetModelResponse], errResp azfake.ErrorResponder)

	// GetRecursiveModel is the fake for method SingleDiscriminatorClient.GetRecursiveModel
	// HTTP status codes to indicate success: http.StatusOK
	GetRecursiveModel func(ctx context.Context, options *singlediscgroup.SingleDiscriminatorClientGetRecursiveModelOptions) (resp azfake.Responder[singlediscgroup.SingleDiscriminatorClientGetRecursiveModelResponse], errResp azfake.ErrorResponder)

	// GetWrongDiscriminator is the fake for method SingleDiscriminatorClient.GetWrongDiscriminator
	// HTTP status codes to indicate success: http.StatusOK
	GetWrongDiscriminator func(ctx context.Context, options *singlediscgroup.SingleDiscriminatorClientGetWrongDiscriminatorOptions) (resp azfake.Responder[singlediscgroup.SingleDiscriminatorClientGetWrongDiscriminatorResponse], errResp azfake.ErrorResponder)

	// PutModel is the fake for method SingleDiscriminatorClient.PutModel
	// HTTP status codes to indicate success: http.StatusNoContent
	PutModel func(ctx context.Context, input singlediscgroup.BirdClassification, options *singlediscgroup.SingleDiscriminatorClientPutModelOptions) (resp azfake.Responder[singlediscgroup.SingleDiscriminatorClientPutModelResponse], errResp azfake.ErrorResponder)

	// PutRecursiveModel is the fake for method SingleDiscriminatorClient.PutRecursiveModel
	// HTTP status codes to indicate success: http.StatusNoContent
	PutRecursiveModel func(ctx context.Context, input singlediscgroup.BirdClassification, options *singlediscgroup.SingleDiscriminatorClientPutRecursiveModelOptions) (resp azfake.Responder[singlediscgroup.SingleDiscriminatorClientPutRecursiveModelResponse], errResp azfake.ErrorResponder)
}

// NewSingleDiscriminatorServerTransport creates a new instance of SingleDiscriminatorServerTransport with the provided implementation.
// The returned SingleDiscriminatorServerTransport instance is connected to an instance of singlediscgroup.SingleDiscriminatorClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSingleDiscriminatorServerTransport(srv *SingleDiscriminatorServer) *SingleDiscriminatorServerTransport {
	return &SingleDiscriminatorServerTransport{srv: srv}
}

// SingleDiscriminatorServerTransport connects instances of singlediscgroup.SingleDiscriminatorClient to instances of SingleDiscriminatorServer.
// Don't use this type directly, use NewSingleDiscriminatorServerTransport instead.
type SingleDiscriminatorServerTransport struct {
	srv *SingleDiscriminatorServer
}

// Do implements the policy.Transporter interface for SingleDiscriminatorServerTransport.
func (s *SingleDiscriminatorServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToMethodFake(req, method)
}

func (s *SingleDiscriminatorServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var res result
		switch method {
		case "SingleDiscriminatorClient.GetLegacyModel":
			res.resp, res.err = s.dispatchGetLegacyModel(req)
		case "SingleDiscriminatorClient.GetMissingDiscriminator":
			res.resp, res.err = s.dispatchGetMissingDiscriminator(req)
		case "SingleDiscriminatorClient.GetModel":
			res.resp, res.err = s.dispatchGetModel(req)
		case "SingleDiscriminatorClient.GetRecursiveModel":
			res.resp, res.err = s.dispatchGetRecursiveModel(req)
		case "SingleDiscriminatorClient.GetWrongDiscriminator":
			res.resp, res.err = s.dispatchGetWrongDiscriminator(req)
		case "SingleDiscriminatorClient.PutModel":
			res.resp, res.err = s.dispatchPutModel(req)
		case "SingleDiscriminatorClient.PutRecursiveModel":
			res.resp, res.err = s.dispatchPutRecursiveModel(req)
		default:
			res.err = fmt.Errorf("unhandled API %s", method)
		}

		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (s *SingleDiscriminatorServerTransport) dispatchGetLegacyModel(req *http.Request) (*http.Response, error) {
	if s.srv.GetLegacyModel == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetLegacyModel not implemented")}
	}
	respr, errRespr := s.srv.GetLegacyModel(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DinosaurClassification, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SingleDiscriminatorServerTransport) dispatchGetMissingDiscriminator(req *http.Request) (*http.Response, error) {
	if s.srv.GetMissingDiscriminator == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetMissingDiscriminator not implemented")}
	}
	respr, errRespr := s.srv.GetMissingDiscriminator(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).BirdClassification, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SingleDiscriminatorServerTransport) dispatchGetModel(req *http.Request) (*http.Response, error) {
	if s.srv.GetModel == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetModel not implemented")}
	}
	respr, errRespr := s.srv.GetModel(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).BirdClassification, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SingleDiscriminatorServerTransport) dispatchGetRecursiveModel(req *http.Request) (*http.Response, error) {
	if s.srv.GetRecursiveModel == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetRecursiveModel not implemented")}
	}
	respr, errRespr := s.srv.GetRecursiveModel(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).BirdClassification, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SingleDiscriminatorServerTransport) dispatchGetWrongDiscriminator(req *http.Request) (*http.Response, error) {
	if s.srv.GetWrongDiscriminator == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetWrongDiscriminator not implemented")}
	}
	respr, errRespr := s.srv.GetWrongDiscriminator(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).BirdClassification, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SingleDiscriminatorServerTransport) dispatchPutModel(req *http.Request) (*http.Response, error) {
	if s.srv.PutModel == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutModel not implemented")}
	}
	raw, err := readRequestBody(req)
	if err != nil {
		return nil, err
	}
	body, err := unmarshalBirdClassification(raw)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.PutModel(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SingleDiscriminatorServerTransport) dispatchPutRecursiveModel(req *http.Request) (*http.Response, error) {
	if s.srv.PutRecursiveModel == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutRecursiveModel not implemented")}
	}
	raw, err := readRequestBody(req)
	if err != nil {
		return nil, err
	}
	body, err := unmarshalBirdClassification(raw)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.PutRecursiveModel(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
