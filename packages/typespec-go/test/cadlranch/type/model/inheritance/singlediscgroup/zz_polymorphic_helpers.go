//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package singlediscgroup

import "encoding/json"

func unmarshalBirdClassification(rawMsg json.RawMessage) (BirdClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b BirdClassification
	switch m["kind"] {
	case "eagle":
		b = &Eagle{}
	case "goose":
		b = &Goose{}
	case "seagull":
		b = &SeaGull{}
	case "sparrow":
		b = &Sparrow{}
	default:
		b = &Bird{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalBirdClassificationArray(rawMsg json.RawMessage) ([]BirdClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]BirdClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalBirdClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalBirdClassificationMap(rawMsg json.RawMessage) (map[string]BirdClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages map[string]json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fMap := make(map[string]BirdClassification, len(rawMessages))
	for key, rawMessage := range rawMessages {
		f, err := unmarshalBirdClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fMap[key] = f
	}
	return fMap, nil
}

func unmarshalDinosaurClassification(rawMsg json.RawMessage) (DinosaurClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b DinosaurClassification
	switch m["kind"] {
	case "t-rex":
		b = &TRex{}
	default:
		b = &Dinosaur{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}
