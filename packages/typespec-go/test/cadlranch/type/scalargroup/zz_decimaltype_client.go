//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package scalargroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strconv"
)

// DecimalTypeClient contains the methods for the Type.Scalar group.
// Don't use this type directly, use a constructor function instead.
type DecimalTypeClient struct {
	internal *azcore.Client
}

// - options - DecimalTypeClientRequestBodyOptions contains the optional parameters for the DecimalTypeClient.RequestBody method.
func (client *DecimalTypeClient) RequestBody(ctx context.Context, body float64, options *DecimalTypeClientRequestBodyOptions) (DecimalTypeClientRequestBodyResponse, error) {
	var err error
	req, err := client.requestBodyCreateRequest(ctx, body, options)
	if err != nil {
		return DecimalTypeClientRequestBodyResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DecimalTypeClientRequestBodyResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return DecimalTypeClientRequestBodyResponse{}, err
	}
	return DecimalTypeClientRequestBodyResponse{}, nil
}

// requestBodyCreateRequest creates the RequestBody request.
func (client *DecimalTypeClient) requestBodyCreateRequest(ctx context.Context, body float64, options *DecimalTypeClientRequestBodyOptions) (*policy.Request, error) {
	urlPath := "/type/scalar/decimal/resquest_body"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

//   - options - DecimalTypeClientRequestParameterOptions contains the optional parameters for the DecimalTypeClient.RequestParameter
//     method.
func (client *DecimalTypeClient) RequestParameter(ctx context.Context, value float64, options *DecimalTypeClientRequestParameterOptions) (DecimalTypeClientRequestParameterResponse, error) {
	var err error
	req, err := client.requestParameterCreateRequest(ctx, value, options)
	if err != nil {
		return DecimalTypeClientRequestParameterResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DecimalTypeClientRequestParameterResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return DecimalTypeClientRequestParameterResponse{}, err
	}
	return DecimalTypeClientRequestParameterResponse{}, nil
}

// requestParameterCreateRequest creates the RequestParameter request.
func (client *DecimalTypeClient) requestParameterCreateRequest(ctx context.Context, value float64, options *DecimalTypeClientRequestParameterOptions) (*policy.Request, error) {
	urlPath := "/type/scalar/decimal/request_parameter"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("value", strconv.FormatFloat(value, 'f', -1, 64))
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

//   - options - DecimalTypeClientResponseBodyOptions contains the optional parameters for the DecimalTypeClient.ResponseBody
//     method.
func (client *DecimalTypeClient) ResponseBody(ctx context.Context, options *DecimalTypeClientResponseBodyOptions) (DecimalTypeClientResponseBodyResponse, error) {
	var err error
	req, err := client.responseBodyCreateRequest(ctx, options)
	if err != nil {
		return DecimalTypeClientResponseBodyResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DecimalTypeClientResponseBodyResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DecimalTypeClientResponseBodyResponse{}, err
	}
	resp, err := client.responseBodyHandleResponse(httpResp)
	return resp, err
}

// responseBodyCreateRequest creates the ResponseBody request.
func (client *DecimalTypeClient) responseBodyCreateRequest(ctx context.Context, options *DecimalTypeClientResponseBodyOptions) (*policy.Request, error) {
	urlPath := "/type/scalar/decimal/response_body"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// responseBodyHandleResponse handles the ResponseBody response.
func (client *DecimalTypeClient) responseBodyHandleResponse(resp *http.Response) (DecimalTypeClientResponseBodyResponse, error) {
	result := DecimalTypeClientResponseBodyResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return DecimalTypeClientResponseBodyResponse{}, err
	}
	return result, nil
}
