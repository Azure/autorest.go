// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ScalarServer is a fake server for instances of the scalargroup.ScalarClient type.
type ScalarServer struct {
	// BooleanServer contains the fakes for client BooleanClient
	BooleanServer BooleanServer

	// Decimal128TypeServer contains the fakes for client Decimal128TypeClient
	Decimal128TypeServer Decimal128TypeServer

	// Decimal128VerifyServer contains the fakes for client Decimal128VerifyClient
	Decimal128VerifyServer Decimal128VerifyServer

	// DecimalTypeServer contains the fakes for client DecimalTypeClient
	DecimalTypeServer DecimalTypeServer

	// DecimalVerifyServer contains the fakes for client DecimalVerifyClient
	DecimalVerifyServer DecimalVerifyServer

	// StringServer contains the fakes for client StringClient
	StringServer StringServer

	// UnknownServer contains the fakes for client UnknownClient
	UnknownServer UnknownServer
}

// NewScalarServerTransport creates a new instance of ScalarServerTransport with the provided implementation.
// The returned ScalarServerTransport instance is connected to an instance of scalargroup.ScalarClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewScalarServerTransport(srv *ScalarServer) *ScalarServerTransport {
	return &ScalarServerTransport{srv: srv}
}

// ScalarServerTransport connects instances of scalargroup.ScalarClient to instances of ScalarServer.
// Don't use this type directly, use NewScalarServerTransport instead.
type ScalarServerTransport struct {
	srv                      *ScalarServer
	trMu                     sync.Mutex
	trBooleanServer          *BooleanServerTransport
	trDecimal128TypeServer   *Decimal128TypeServerTransport
	trDecimal128VerifyServer *Decimal128VerifyServerTransport
	trDecimalTypeServer      *DecimalTypeServerTransport
	trDecimalVerifyServer    *DecimalVerifyServerTransport
	trStringServer           *StringServerTransport
	trUnknownServer          *UnknownServerTransport
}

// Do implements the policy.Transporter interface for ScalarServerTransport.
func (s *ScalarServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (s *ScalarServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "BooleanClient":
		initServer(&s.trMu, &s.trBooleanServer, func() *BooleanServerTransport {
			return NewBooleanServerTransport(&s.srv.BooleanServer)
		})
		resp, err = s.trBooleanServer.Do(req)
	case "Decimal128TypeClient":
		initServer(&s.trMu, &s.trDecimal128TypeServer, func() *Decimal128TypeServerTransport {
			return NewDecimal128TypeServerTransport(&s.srv.Decimal128TypeServer)
		})
		resp, err = s.trDecimal128TypeServer.Do(req)
	case "Decimal128VerifyClient":
		initServer(&s.trMu, &s.trDecimal128VerifyServer, func() *Decimal128VerifyServerTransport {
			return NewDecimal128VerifyServerTransport(&s.srv.Decimal128VerifyServer)
		})
		resp, err = s.trDecimal128VerifyServer.Do(req)
	case "DecimalTypeClient":
		initServer(&s.trMu, &s.trDecimalTypeServer, func() *DecimalTypeServerTransport {
			return NewDecimalTypeServerTransport(&s.srv.DecimalTypeServer)
		})
		resp, err = s.trDecimalTypeServer.Do(req)
	case "DecimalVerifyClient":
		initServer(&s.trMu, &s.trDecimalVerifyServer, func() *DecimalVerifyServerTransport {
			return NewDecimalVerifyServerTransport(&s.srv.DecimalVerifyServer)
		})
		resp, err = s.trDecimalVerifyServer.Do(req)
	case "StringClient":
		initServer(&s.trMu, &s.trStringServer, func() *StringServerTransport {
			return NewStringServerTransport(&s.srv.StringServer)
		})
		resp, err = s.trStringServer.Do(req)
	case "UnknownClient":
		initServer(&s.trMu, &s.trUnknownServer, func() *UnknownServerTransport {
			return NewUnknownServerTransport(&s.srv.UnknownServer)
		})
		resp, err = s.trUnknownServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}
