// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"scalargroup"
)

// DecimalVerifyServer is a fake server for instances of the scalargroup.DecimalVerifyClient type.
type DecimalVerifyServer struct {
	// PrepareVerify is the fake for method DecimalVerifyClient.PrepareVerify
	// HTTP status codes to indicate success: http.StatusOK
	PrepareVerify func(ctx context.Context, options *scalargroup.DecimalVerifyClientPrepareVerifyOptions) (resp azfake.Responder[scalargroup.DecimalVerifyClientPrepareVerifyResponse], errResp azfake.ErrorResponder)

	// Verify is the fake for method DecimalVerifyClient.Verify
	// HTTP status codes to indicate success: http.StatusNoContent
	Verify func(ctx context.Context, body float64, options *scalargroup.DecimalVerifyClientVerifyOptions) (resp azfake.Responder[scalargroup.DecimalVerifyClientVerifyResponse], errResp azfake.ErrorResponder)
}

// NewDecimalVerifyServerTransport creates a new instance of DecimalVerifyServerTransport with the provided implementation.
// The returned DecimalVerifyServerTransport instance is connected to an instance of scalargroup.DecimalVerifyClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewDecimalVerifyServerTransport(srv *DecimalVerifyServer) *DecimalVerifyServerTransport {
	return &DecimalVerifyServerTransport{srv: srv}
}

// DecimalVerifyServerTransport connects instances of scalargroup.DecimalVerifyClient to instances of DecimalVerifyServer.
// Don't use this type directly, use NewDecimalVerifyServerTransport instead.
type DecimalVerifyServerTransport struct {
	srv *DecimalVerifyServer
}

// Do implements the policy.Transporter interface for DecimalVerifyServerTransport.
func (d *DecimalVerifyServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return d.dispatchToMethodFake(req, method)
}

func (d *DecimalVerifyServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "DecimalVerifyClient.PrepareVerify":
		resp, err = d.dispatchPrepareVerify(req)
	case "DecimalVerifyClient.Verify":
		resp, err = d.dispatchVerify(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (d *DecimalVerifyServerTransport) dispatchPrepareVerify(req *http.Request) (*http.Response, error) {
	if d.srv.PrepareVerify == nil {
		return nil, &nonRetriableError{errors.New("fake for method PrepareVerify not implemented")}
	}
	respr, errRespr := d.srv.PrepareVerify(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DecimalVerifyServerTransport) dispatchVerify(req *http.Request) (*http.Response, error) {
	if d.srv.Verify == nil {
		return nil, &nonRetriableError{errors.New("fake for method Verify not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[float64](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.Verify(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
