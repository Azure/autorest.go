// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"scalargroup"
	"strconv"
)

// DecimalTypeServer is a fake server for instances of the scalargroup.DecimalTypeClient type.
type DecimalTypeServer struct {
	// RequestBody is the fake for method DecimalTypeClient.RequestBody
	// HTTP status codes to indicate success: http.StatusNoContent
	RequestBody func(ctx context.Context, body float64, options *scalargroup.DecimalTypeClientRequestBodyOptions) (resp azfake.Responder[scalargroup.DecimalTypeClientRequestBodyResponse], errResp azfake.ErrorResponder)

	// RequestParameter is the fake for method DecimalTypeClient.RequestParameter
	// HTTP status codes to indicate success: http.StatusNoContent
	RequestParameter func(ctx context.Context, value float64, options *scalargroup.DecimalTypeClientRequestParameterOptions) (resp azfake.Responder[scalargroup.DecimalTypeClientRequestParameterResponse], errResp azfake.ErrorResponder)

	// ResponseBody is the fake for method DecimalTypeClient.ResponseBody
	// HTTP status codes to indicate success: http.StatusOK
	ResponseBody func(ctx context.Context, options *scalargroup.DecimalTypeClientResponseBodyOptions) (resp azfake.Responder[scalargroup.DecimalTypeClientResponseBodyResponse], errResp azfake.ErrorResponder)
}

// NewDecimalTypeServerTransport creates a new instance of DecimalTypeServerTransport with the provided implementation.
// The returned DecimalTypeServerTransport instance is connected to an instance of scalargroup.DecimalTypeClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewDecimalTypeServerTransport(srv *DecimalTypeServer) *DecimalTypeServerTransport {
	return &DecimalTypeServerTransport{srv: srv}
}

// DecimalTypeServerTransport connects instances of scalargroup.DecimalTypeClient to instances of DecimalTypeServer.
// Don't use this type directly, use NewDecimalTypeServerTransport instead.
type DecimalTypeServerTransport struct {
	srv *DecimalTypeServer
}

// Do implements the policy.Transporter interface for DecimalTypeServerTransport.
func (d *DecimalTypeServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "DecimalTypeClient.RequestBody":
		resp, err = d.dispatchRequestBody(req)
	case "DecimalTypeClient.RequestParameter":
		resp, err = d.dispatchRequestParameter(req)
	case "DecimalTypeClient.ResponseBody":
		resp, err = d.dispatchResponseBody(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (d *DecimalTypeServerTransport) dispatchRequestBody(req *http.Request) (*http.Response, error) {
	if d.srv.RequestBody == nil {
		return nil, &nonRetriableError{errors.New("fake for method RequestBody not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[float64](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.RequestBody(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DecimalTypeServerTransport) dispatchRequestParameter(req *http.Request) (*http.Response, error) {
	if d.srv.RequestParameter == nil {
		return nil, &nonRetriableError{errors.New("fake for method RequestParameter not implemented")}
	}
	qp := req.URL.Query()
	valueUnescaped, err := url.QueryUnescape(qp.Get("value"))
	if err != nil {
		return nil, err
	}
	valueParam, err := strconv.ParseFloat(valueUnescaped, 64)
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.RequestParameter(req.Context(), valueParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DecimalTypeServerTransport) dispatchResponseBody(req *http.Request) (*http.Response, error) {
	if d.srv.ResponseBody == nil {
		return nil, &nonRetriableError{errors.New("fake for method ResponseBody not implemented")}
	}
	respr, errRespr := d.srv.ResponseBody(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
