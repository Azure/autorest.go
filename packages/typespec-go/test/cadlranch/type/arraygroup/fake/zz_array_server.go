// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ArrayServer is a fake server for instances of the arraygroup.ArrayClient type.
type ArrayServer struct {
	// BooleanValueServer contains the fakes for client BooleanValueClient
	BooleanValueServer BooleanValueServer

	// DatetimeValueServer contains the fakes for client DatetimeValueClient
	DatetimeValueServer DatetimeValueServer

	// DurationValueServer contains the fakes for client DurationValueClient
	DurationValueServer DurationValueServer

	// Float32ValueServer contains the fakes for client Float32ValueClient
	Float32ValueServer Float32ValueServer

	// Int32ValueServer contains the fakes for client Int32ValueClient
	Int32ValueServer Int32ValueServer

	// Int64ValueServer contains the fakes for client Int64ValueClient
	Int64ValueServer Int64ValueServer

	// ModelValueServer contains the fakes for client ModelValueClient
	ModelValueServer ModelValueServer

	// NullableFloatValueServer contains the fakes for client NullableFloatValueClient
	NullableFloatValueServer NullableFloatValueServer

	// StringValueServer contains the fakes for client StringValueClient
	StringValueServer StringValueServer

	// UnknownValueServer contains the fakes for client UnknownValueClient
	UnknownValueServer UnknownValueServer
}

// NewArrayServerTransport creates a new instance of ArrayServerTransport with the provided implementation.
// The returned ArrayServerTransport instance is connected to an instance of arraygroup.ArrayClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewArrayServerTransport(srv *ArrayServer) *ArrayServerTransport {
	return &ArrayServerTransport{srv: srv}
}

// ArrayServerTransport connects instances of arraygroup.ArrayClient to instances of ArrayServer.
// Don't use this type directly, use NewArrayServerTransport instead.
type ArrayServerTransport struct {
	srv                        *ArrayServer
	trMu                       sync.Mutex
	trBooleanValueServer       *BooleanValueServerTransport
	trDatetimeValueServer      *DatetimeValueServerTransport
	trDurationValueServer      *DurationValueServerTransport
	trFloat32ValueServer       *Float32ValueServerTransport
	trInt32ValueServer         *Int32ValueServerTransport
	trInt64ValueServer         *Int64ValueServerTransport
	trModelValueServer         *ModelValueServerTransport
	trNullableFloatValueServer *NullableFloatValueServerTransport
	trStringValueServer        *StringValueServerTransport
	trUnknownValueServer       *UnknownValueServerTransport
}

// Do implements the policy.Transporter interface for ArrayServerTransport.
func (a *ArrayServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return a.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (a *ArrayServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "BooleanValueClient":
		initServer(&a.trMu, &a.trBooleanValueServer, func() *BooleanValueServerTransport {
			return NewBooleanValueServerTransport(&a.srv.BooleanValueServer)
		})
		resp, err = a.trBooleanValueServer.Do(req)
	case "DatetimeValueClient":
		initServer(&a.trMu, &a.trDatetimeValueServer, func() *DatetimeValueServerTransport {
			return NewDatetimeValueServerTransport(&a.srv.DatetimeValueServer)
		})
		resp, err = a.trDatetimeValueServer.Do(req)
	case "DurationValueClient":
		initServer(&a.trMu, &a.trDurationValueServer, func() *DurationValueServerTransport {
			return NewDurationValueServerTransport(&a.srv.DurationValueServer)
		})
		resp, err = a.trDurationValueServer.Do(req)
	case "Float32ValueClient":
		initServer(&a.trMu, &a.trFloat32ValueServer, func() *Float32ValueServerTransport {
			return NewFloat32ValueServerTransport(&a.srv.Float32ValueServer)
		})
		resp, err = a.trFloat32ValueServer.Do(req)
	case "Int32ValueClient":
		initServer(&a.trMu, &a.trInt32ValueServer, func() *Int32ValueServerTransport {
			return NewInt32ValueServerTransport(&a.srv.Int32ValueServer)
		})
		resp, err = a.trInt32ValueServer.Do(req)
	case "Int64ValueClient":
		initServer(&a.trMu, &a.trInt64ValueServer, func() *Int64ValueServerTransport {
			return NewInt64ValueServerTransport(&a.srv.Int64ValueServer)
		})
		resp, err = a.trInt64ValueServer.Do(req)
	case "ModelValueClient":
		initServer(&a.trMu, &a.trModelValueServer, func() *ModelValueServerTransport {
			return NewModelValueServerTransport(&a.srv.ModelValueServer)
		})
		resp, err = a.trModelValueServer.Do(req)
	case "NullableFloatValueClient":
		initServer(&a.trMu, &a.trNullableFloatValueServer, func() *NullableFloatValueServerTransport {
			return NewNullableFloatValueServerTransport(&a.srv.NullableFloatValueServer)
		})
		resp, err = a.trNullableFloatValueServer.Do(req)
	case "StringValueClient":
		initServer(&a.trMu, &a.trStringValueServer, func() *StringValueServerTransport {
			return NewStringValueServerTransport(&a.srv.StringValueServer)
		})
		resp, err = a.trStringValueServer.Do(req)
	case "UnknownValueClient":
		initServer(&a.trMu, &a.trUnknownValueServer, func() *UnknownValueServerTransport {
			return NewUnknownValueServerTransport(&a.srv.UnknownValueServer)
		})
		resp, err = a.trUnknownValueServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}
