// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"arraygroup"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// ArrayNullableStringValueServer is a fake server for instances of the arraygroup.ArrayNullableStringValueClient type.
type ArrayNullableStringValueServer struct {
	// Get is the fake for method ArrayNullableStringValueClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, options *arraygroup.ArrayNullableStringValueClientGetOptions) (resp azfake.Responder[arraygroup.ArrayNullableStringValueClientGetResponse], errResp azfake.ErrorResponder)

	// Put is the fake for method ArrayNullableStringValueClient.Put
	// HTTP status codes to indicate success: http.StatusNoContent
	Put func(ctx context.Context, body []*string, options *arraygroup.ArrayNullableStringValueClientPutOptions) (resp azfake.Responder[arraygroup.ArrayNullableStringValueClientPutResponse], errResp azfake.ErrorResponder)
}

// NewArrayNullableStringValueServerTransport creates a new instance of ArrayNullableStringValueServerTransport with the provided implementation.
// The returned ArrayNullableStringValueServerTransport instance is connected to an instance of arraygroup.ArrayNullableStringValueClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewArrayNullableStringValueServerTransport(srv *ArrayNullableStringValueServer) *ArrayNullableStringValueServerTransport {
	return &ArrayNullableStringValueServerTransport{srv: srv}
}

// ArrayNullableStringValueServerTransport connects instances of arraygroup.ArrayNullableStringValueClient to instances of ArrayNullableStringValueServer.
// Don't use this type directly, use NewArrayNullableStringValueServerTransport instead.
type ArrayNullableStringValueServerTransport struct {
	srv *ArrayNullableStringValueServer
}

// Do implements the policy.Transporter interface for ArrayNullableStringValueServerTransport.
func (a *ArrayNullableStringValueServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return a.dispatchToMethodFake(req, method)
}

func (a *ArrayNullableStringValueServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "ArrayNullableStringValueClient.Get":
		resp, err = a.dispatchGet(req)
	case "ArrayNullableStringValueClient.Put":
		resp, err = a.dispatchPut(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (a *ArrayNullableStringValueServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if a.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	respr, errRespr := a.srv.Get(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ArrayNullableStringValueServerTransport) dispatchPut(req *http.Request) (*http.Response, error) {
	if a.srv.Put == nil {
		return nil, &nonRetriableError{errors.New("fake for method Put not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[[]*string](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.Put(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
