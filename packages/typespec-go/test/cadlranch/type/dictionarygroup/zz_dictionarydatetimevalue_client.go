// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package dictionarygroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"time"
)

// DictionaryDatetimeValueClient - Dictionary of datetime values
// Don't use this type directly, use [DictionaryClient.NewDictionaryDatetimeValueClient] instead.
type DictionaryDatetimeValueClient struct {
	internal *azcore.Client
}

//   - options - DictionaryDatetimeValueClientGetOptions contains the optional parameters for the DictionaryDatetimeValueClient.Get
//     method.
func (client *DictionaryDatetimeValueClient) Get(ctx context.Context, options *DictionaryDatetimeValueClientGetOptions) (DictionaryDatetimeValueClientGetResponse, error) {
	var err error
	const operationName = "DictionaryDatetimeValueClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, options)
	if err != nil {
		return DictionaryDatetimeValueClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DictionaryDatetimeValueClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DictionaryDatetimeValueClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *DictionaryDatetimeValueClient) getCreateRequest(ctx context.Context, options *DictionaryDatetimeValueClientGetOptions) (*policy.Request, error) {
	urlPath := "/type/dictionary/datetime"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *DictionaryDatetimeValueClient) getHandleResponse(resp *http.Response) (DictionaryDatetimeValueClientGetResponse, error) {
	result := DictionaryDatetimeValueClientGetResponse{}
	aux := map[string]*dateTimeRFC3339{}
	if err := runtime.UnmarshalAsJSON(resp, &aux); err != nil {
		return DictionaryDatetimeValueClientGetResponse{}, err
	}
	cp := map[string]*time.Time{}
	for k, v := range aux {
		cp[k] = (*time.Time)(v)
	}
	result.Value = cp
	return result, nil
}

//   - options - DictionaryDatetimeValueClientPutOptions contains the optional parameters for the DictionaryDatetimeValueClient.Put
//     method.
func (client *DictionaryDatetimeValueClient) Put(ctx context.Context, body map[string]*time.Time, options *DictionaryDatetimeValueClientPutOptions) (DictionaryDatetimeValueClientPutResponse, error) {
	var err error
	const operationName = "DictionaryDatetimeValueClient.Put"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putCreateRequest(ctx, body, options)
	if err != nil {
		return DictionaryDatetimeValueClientPutResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DictionaryDatetimeValueClientPutResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return DictionaryDatetimeValueClientPutResponse{}, err
	}
	return DictionaryDatetimeValueClientPutResponse{}, nil
}

// putCreateRequest creates the Put request.
func (client *DictionaryDatetimeValueClient) putCreateRequest(ctx context.Context, body map[string]*time.Time, options *DictionaryDatetimeValueClientPutOptions) (*policy.Request, error) {
	urlPath := "/type/dictionary/datetime"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	aux := map[string]*dateTimeRFC3339{}
	for k, v := range body {
		aux[k] = (*dateTimeRFC3339)(v)
	}
	if err := runtime.MarshalAsJSON(req, aux); err != nil {
		return nil, err
	}
	return req, nil
}
