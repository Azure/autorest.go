// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// CodeSigningServer is a fake server for instances of the armcodesigning.CodeSigningClient type.
type CodeSigningServer struct {
	// CertificateProfilesServer contains the fakes for client CertificateProfilesClient
	CertificateProfilesServer CertificateProfilesServer

	// CodeSigningAccountsServer contains the fakes for client CodeSigningAccountsClient
	CodeSigningAccountsServer CodeSigningAccountsServer

	// OperationsServer contains the fakes for client OperationsClient
	OperationsServer OperationsServer
}

// NewCodeSigningServerTransport creates a new instance of CodeSigningServerTransport with the provided implementation.
// The returned CodeSigningServerTransport instance is connected to an instance of armcodesigning.CodeSigningClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewCodeSigningServerTransport(srv *CodeSigningServer) *CodeSigningServerTransport {
	return &CodeSigningServerTransport{srv: srv}
}

// CodeSigningServerTransport connects instances of armcodesigning.CodeSigningClient to instances of CodeSigningServer.
// Don't use this type directly, use NewCodeSigningServerTransport instead.
type CodeSigningServerTransport struct {
	srv                         *CodeSigningServer
	trMu                        sync.Mutex
	trCertificateProfilesServer *CertificateProfilesServerTransport
	trCodeSigningAccountsServer *CodeSigningAccountsServerTransport
	trOperationsServer          *OperationsServerTransport
}

// Do implements the policy.Transporter interface for CodeSigningServerTransport.
func (c *CodeSigningServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return c.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (c *CodeSigningServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "CertificateProfilesClient":
		initServer(&c.trMu, &c.trCertificateProfilesServer, func() *CertificateProfilesServerTransport {
			return NewCertificateProfilesServerTransport(&c.srv.CertificateProfilesServer)
		})
		resp, err = c.trCertificateProfilesServer.Do(req)
	case "CodeSigningAccountsClient":
		initServer(&c.trMu, &c.trCodeSigningAccountsServer, func() *CodeSigningAccountsServerTransport {
			return NewCodeSigningAccountsServerTransport(&c.srv.CodeSigningAccountsServer)
		})
		resp, err = c.trCodeSigningAccountsServer.Do(req)
	case "OperationsClient":
		initServer(&c.trMu, &c.trOperationsServer, func() *OperationsServerTransport {
			return NewOperationsServerTransport(&c.srv.OperationsServer)
		})
		resp, err = c.trOperationsServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}
