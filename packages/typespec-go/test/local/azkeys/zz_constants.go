// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package azkeys

// JSONWebKeyCurveName - Elliptic curve name. For valid values, see JsonWebKeyCurveName.
type JSONWebKeyCurveName string

const (
	// JSONWebKeyCurveNameP256 - The NIST P-256 elliptic curve, AKA SECG curve SECP256R1.
	JSONWebKeyCurveNameP256 JSONWebKeyCurveName = "P-256"
	// JSONWebKeyCurveNameP256K - The SECG SECP256K1 elliptic curve.
	JSONWebKeyCurveNameP256K JSONWebKeyCurveName = "P-256K"
	// JSONWebKeyCurveNameP384 - The NIST P-384 elliptic curve, AKA SECG curve SECP384R1.
	JSONWebKeyCurveNameP384 JSONWebKeyCurveName = "P-384"
	// JSONWebKeyCurveNameP521 - The NIST P-521 elliptic curve, AKA SECG curve SECP521R1.
	JSONWebKeyCurveNameP521 JSONWebKeyCurveName = "P-521"
)

// PossibleJSONWebKeyCurveNameValues returns the possible values for the JSONWebKeyCurveName const type.
func PossibleJSONWebKeyCurveNameValues() []JSONWebKeyCurveName {
	return []JSONWebKeyCurveName{
		JSONWebKeyCurveNameP256,
		JSONWebKeyCurveNameP256K,
		JSONWebKeyCurveNameP384,
		JSONWebKeyCurveNameP521,
	}
}

// JSONWebKeyEncryptionAlgorithm - An algorithm used for encryption and decryption.
type JSONWebKeyEncryptionAlgorithm string

const (
	// JSONWebKeyEncryptionAlgorithmA128CBC - 128-bit AES-CBC.
	JSONWebKeyEncryptionAlgorithmA128CBC JSONWebKeyEncryptionAlgorithm = "A128CBC"
	// JSONWebKeyEncryptionAlgorithmA128CBCPAD - 128-bit AES-CBC with PKCS padding.
	JSONWebKeyEncryptionAlgorithmA128CBCPAD JSONWebKeyEncryptionAlgorithm = "A128CBCPAD"
	// JSONWebKeyEncryptionAlgorithmA128GCM - 128-bit AES-GCM.
	JSONWebKeyEncryptionAlgorithmA128GCM JSONWebKeyEncryptionAlgorithm = "A128GCM"
	// JSONWebKeyEncryptionAlgorithmA128KW - 128-bit AES key wrap.
	JSONWebKeyEncryptionAlgorithmA128KW JSONWebKeyEncryptionAlgorithm = "A128KW"
	// JSONWebKeyEncryptionAlgorithmA192CBC - 192-bit AES-CBC.
	JSONWebKeyEncryptionAlgorithmA192CBC JSONWebKeyEncryptionAlgorithm = "A192CBC"
	// JSONWebKeyEncryptionAlgorithmA192CBCPAD - 192-bit AES-CBC with PKCS padding.
	JSONWebKeyEncryptionAlgorithmA192CBCPAD JSONWebKeyEncryptionAlgorithm = "A192CBCPAD"
	// JSONWebKeyEncryptionAlgorithmA192GCM - 192-bit AES-GCM.
	JSONWebKeyEncryptionAlgorithmA192GCM JSONWebKeyEncryptionAlgorithm = "A192GCM"
	// JSONWebKeyEncryptionAlgorithmA192KW - 192-bit AES key wrap.
	JSONWebKeyEncryptionAlgorithmA192KW JSONWebKeyEncryptionAlgorithm = "A192KW"
	// JSONWebKeyEncryptionAlgorithmA256CBC - 256-bit AES-CBC.
	JSONWebKeyEncryptionAlgorithmA256CBC JSONWebKeyEncryptionAlgorithm = "A256CBC"
	// JSONWebKeyEncryptionAlgorithmA256CBCPAD - 256-bit AES-CBC with PKCS padding.
	JSONWebKeyEncryptionAlgorithmA256CBCPAD JSONWebKeyEncryptionAlgorithm = "A256CBCPAD"
	// JSONWebKeyEncryptionAlgorithmA256GCM - 256-bit AES-GCM.
	JSONWebKeyEncryptionAlgorithmA256GCM JSONWebKeyEncryptionAlgorithm = "A256GCM"
	// JSONWebKeyEncryptionAlgorithmA256KW - 256-bit AES key wrap.
	JSONWebKeyEncryptionAlgorithmA256KW JSONWebKeyEncryptionAlgorithm = "A256KW"
	// JSONWebKeyEncryptionAlgorithmCKMAESKEYWRAP - CKM AES key wrap.
	JSONWebKeyEncryptionAlgorithmCKMAESKEYWRAP JSONWebKeyEncryptionAlgorithm = "CKM_AES_KEY_WRAP"
	// JSONWebKeyEncryptionAlgorithmCKMAESKEYWRAPPAD - CKM AES key wrap with padding.
	JSONWebKeyEncryptionAlgorithmCKMAESKEYWRAPPAD JSONWebKeyEncryptionAlgorithm = "CKM_AES_KEY_WRAP_PAD"
	// JSONWebKeyEncryptionAlgorithmRSA15 - RSAES-PKCS1-V1_5 key encryption, as described in https://tools.ietf.org/html/rfc3447.
	JSONWebKeyEncryptionAlgorithmRSA15 JSONWebKeyEncryptionAlgorithm = "RSA1_5"
	// JSONWebKeyEncryptionAlgorithmRSAOAEP - RSAES using Optimal Asymmetric Encryption Padding (OAEP), as described in
	// https://tools.ietf.org/html/rfc3447, with the default parameters specified by
	// RFC 3447 in Section A.2.1. Those default parameters are using a hash function
	// of SHA-1 and a mask generation function of MGF1 with SHA-1.
	JSONWebKeyEncryptionAlgorithmRSAOAEP JSONWebKeyEncryptionAlgorithm = "RSA-OAEP"
	// JSONWebKeyEncryptionAlgorithmRSAOAEP256 - RSAES using Optimal Asymmetric Encryption Padding with a hash function of SHA-256
	// and a mask generation function of MGF1 with SHA-256.
	JSONWebKeyEncryptionAlgorithmRSAOAEP256 JSONWebKeyEncryptionAlgorithm = "RSA-OAEP-256"
)

// PossibleJSONWebKeyEncryptionAlgorithmValues returns the possible values for the JSONWebKeyEncryptionAlgorithm const type.
func PossibleJSONWebKeyEncryptionAlgorithmValues() []JSONWebKeyEncryptionAlgorithm {
	return []JSONWebKeyEncryptionAlgorithm{
		JSONWebKeyEncryptionAlgorithmA128CBC,
		JSONWebKeyEncryptionAlgorithmA128CBCPAD,
		JSONWebKeyEncryptionAlgorithmA128GCM,
		JSONWebKeyEncryptionAlgorithmA128KW,
		JSONWebKeyEncryptionAlgorithmA192CBC,
		JSONWebKeyEncryptionAlgorithmA192CBCPAD,
		JSONWebKeyEncryptionAlgorithmA192GCM,
		JSONWebKeyEncryptionAlgorithmA192KW,
		JSONWebKeyEncryptionAlgorithmA256CBC,
		JSONWebKeyEncryptionAlgorithmA256CBCPAD,
		JSONWebKeyEncryptionAlgorithmA256GCM,
		JSONWebKeyEncryptionAlgorithmA256KW,
		JSONWebKeyEncryptionAlgorithmCKMAESKEYWRAP,
		JSONWebKeyEncryptionAlgorithmCKMAESKEYWRAPPAD,
		JSONWebKeyEncryptionAlgorithmRSA15,
		JSONWebKeyEncryptionAlgorithmRSAOAEP,
		JSONWebKeyEncryptionAlgorithmRSAOAEP256,
	}
}

// JSONWebKeyOperation - JSON web key operations. For more information, see JsonWebKeyOperation.
type JSONWebKeyOperation string

const (
	// JSONWebKeyOperationDecrypt - Indicates that the key can be used to decrypt.
	JSONWebKeyOperationDecrypt JSONWebKeyOperation = "decrypt"
	// JSONWebKeyOperationEncrypt - Indicates that the key can be used to encrypt.
	JSONWebKeyOperationEncrypt JSONWebKeyOperation = "encrypt"
	// JSONWebKeyOperationExport - Indicates that the private component of the key can be exported.
	JSONWebKeyOperationExport JSONWebKeyOperation = "export"
	// JSONWebKeyOperationImport - Indicates that the key can be imported during creation.
	JSONWebKeyOperationImport JSONWebKeyOperation = "import"
	// JSONWebKeyOperationSign - Indicates that the key can be used to sign.
	JSONWebKeyOperationSign JSONWebKeyOperation = "sign"
	// JSONWebKeyOperationUnwrapKey - Indicates that the key can be used to unwrap another key.
	JSONWebKeyOperationUnwrapKey JSONWebKeyOperation = "unwrapKey"
	// JSONWebKeyOperationVerify - Indicates that the key can be used to verify.
	JSONWebKeyOperationVerify JSONWebKeyOperation = "verify"
	// JSONWebKeyOperationWrapKey - Indicates that the key can be used to wrap another key.
	JSONWebKeyOperationWrapKey JSONWebKeyOperation = "wrapKey"
)

// PossibleJSONWebKeyOperationValues returns the possible values for the JSONWebKeyOperation const type.
func PossibleJSONWebKeyOperationValues() []JSONWebKeyOperation {
	return []JSONWebKeyOperation{
		JSONWebKeyOperationDecrypt,
		JSONWebKeyOperationEncrypt,
		JSONWebKeyOperationExport,
		JSONWebKeyOperationImport,
		JSONWebKeyOperationSign,
		JSONWebKeyOperationUnwrapKey,
		JSONWebKeyOperationVerify,
		JSONWebKeyOperationWrapKey,
	}
}

// JSONWebKeySignatureAlgorithm - The signing/verification algorithm identifier. For more information on possible
// algorithm types, see JsonWebKeySignatureAlgorithm.
type JSONWebKeySignatureAlgorithm string

const (
	// JSONWebKeySignatureAlgorithmES256 - ECDSA using P-256 and SHA-256, as described in
	// https://tools.ietf.org/html/rfc7518.
	JSONWebKeySignatureAlgorithmES256 JSONWebKeySignatureAlgorithm = "ES256"
	// JSONWebKeySignatureAlgorithmES256K - ECDSA using P-256K and SHA-256, as described in
	// https://tools.ietf.org/html/rfc7518
	JSONWebKeySignatureAlgorithmES256K JSONWebKeySignatureAlgorithm = "ES256K"
	// JSONWebKeySignatureAlgorithmES384 - ECDSA using P-384 and SHA-384, as described in
	// https://tools.ietf.org/html/rfc7518
	JSONWebKeySignatureAlgorithmES384 JSONWebKeySignatureAlgorithm = "ES384"
	// JSONWebKeySignatureAlgorithmES512 - ECDSA using P-521 and SHA-512, as described in
	// https://tools.ietf.org/html/rfc7518
	JSONWebKeySignatureAlgorithmES512 JSONWebKeySignatureAlgorithm = "ES512"
	// JSONWebKeySignatureAlgorithmPS256 - RSASSA-PSS using SHA-256 and MGF1 with SHA-256, as described in
	// https://tools.ietf.org/html/rfc7518
	JSONWebKeySignatureAlgorithmPS256 JSONWebKeySignatureAlgorithm = "PS256"
	// JSONWebKeySignatureAlgorithmPS384 - RSASSA-PSS using SHA-384 and MGF1 with SHA-384, as described in
	// https://tools.ietf.org/html/rfc7518
	JSONWebKeySignatureAlgorithmPS384 JSONWebKeySignatureAlgorithm = "PS384"
	// JSONWebKeySignatureAlgorithmPS512 - RSASSA-PSS using SHA-512 and MGF1 with SHA-512, as described in
	// https://tools.ietf.org/html/rfc7518
	JSONWebKeySignatureAlgorithmPS512 JSONWebKeySignatureAlgorithm = "PS512"
	// JSONWebKeySignatureAlgorithmRS256 - RSASSA-PKCS1-v1_5 using SHA-256, as described in
	// https://tools.ietf.org/html/rfc7518
	JSONWebKeySignatureAlgorithmRS256 JSONWebKeySignatureAlgorithm = "RS256"
	// JSONWebKeySignatureAlgorithmRS384 - RSASSA-PKCS1-v1_5 using SHA-384, as described in
	// https://tools.ietf.org/html/rfc7518
	JSONWebKeySignatureAlgorithmRS384 JSONWebKeySignatureAlgorithm = "RS384"
	// JSONWebKeySignatureAlgorithmRS512 - RSASSA-PKCS1-v1_5 using SHA-512, as described in
	// https://tools.ietf.org/html/rfc7518
	JSONWebKeySignatureAlgorithmRS512 JSONWebKeySignatureAlgorithm = "RS512"
	// JSONWebKeySignatureAlgorithmRSNULL - Reserved
	JSONWebKeySignatureAlgorithmRSNULL JSONWebKeySignatureAlgorithm = "RSNULL"
)

// PossibleJSONWebKeySignatureAlgorithmValues returns the possible values for the JSONWebKeySignatureAlgorithm const type.
func PossibleJSONWebKeySignatureAlgorithmValues() []JSONWebKeySignatureAlgorithm {
	return []JSONWebKeySignatureAlgorithm{
		JSONWebKeySignatureAlgorithmES256,
		JSONWebKeySignatureAlgorithmES256K,
		JSONWebKeySignatureAlgorithmES384,
		JSONWebKeySignatureAlgorithmES512,
		JSONWebKeySignatureAlgorithmPS256,
		JSONWebKeySignatureAlgorithmPS384,
		JSONWebKeySignatureAlgorithmPS512,
		JSONWebKeySignatureAlgorithmRS256,
		JSONWebKeySignatureAlgorithmRS384,
		JSONWebKeySignatureAlgorithmRS512,
		JSONWebKeySignatureAlgorithmRSNULL,
	}
}

// JSONWebKeyType - JsonWebKey Key Type (kty), as defined in
// https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40.
type JSONWebKeyType string

const (
	// JSONWebKeyTypeEC - Elliptic Curve.
	JSONWebKeyTypeEC JSONWebKeyType = "EC"
	// JSONWebKeyTypeECHSM - Elliptic Curve with a private key which is stored in the HSM.
	JSONWebKeyTypeECHSM JSONWebKeyType = "EC-HSM"
	// JSONWebKeyTypeOct - Octet sequence (used to represent symmetric keys)
	JSONWebKeyTypeOct JSONWebKeyType = "oct"
	// JSONWebKeyTypeOctHSM - Octet sequence (used to represent symmetric keys) which is stored the HSM.
	JSONWebKeyTypeOctHSM JSONWebKeyType = "oct-HSM"
	// JSONWebKeyTypeRSA - RSA (https://tools.ietf.org/html/rfc3447)
	JSONWebKeyTypeRSA JSONWebKeyType = "RSA"
	// JSONWebKeyTypeRSAHSM - RSA with a private key which is stored in the HSM.
	JSONWebKeyTypeRSAHSM JSONWebKeyType = "RSA-HSM"
)

// PossibleJSONWebKeyTypeValues returns the possible values for the JSONWebKeyType const type.
func PossibleJSONWebKeyTypeValues() []JSONWebKeyType {
	return []JSONWebKeyType{
		JSONWebKeyTypeEC,
		JSONWebKeyTypeECHSM,
		JSONWebKeyTypeOct,
		JSONWebKeyTypeOctHSM,
		JSONWebKeyTypeRSA,
		JSONWebKeyTypeRSAHSM,
	}
}

// KeyEncryptionAlgorithm - The encryption algorithm to use to protected the exported key material
type KeyEncryptionAlgorithm string

const (
	// KeyEncryptionAlgorithmCKMRSAAESKEYWRAP - The CKM_RSA_AES_KEY_WRAP key wrap mechanism.
	KeyEncryptionAlgorithmCKMRSAAESKEYWRAP KeyEncryptionAlgorithm = "CKM_RSA_AES_KEY_WRAP"
	// KeyEncryptionAlgorithmRSAAESKEYWRAP256 - The RSA_AES_KEY_WRAP_256 key wrap mechanism.
	KeyEncryptionAlgorithmRSAAESKEYWRAP256 KeyEncryptionAlgorithm = "RSA_AES_KEY_WRAP_256"
	// KeyEncryptionAlgorithmRSAAESKEYWRAP384 - The RSA_AES_KEY_WRAP_384 key wrap mechanism.
	KeyEncryptionAlgorithmRSAAESKEYWRAP384 KeyEncryptionAlgorithm = "RSA_AES_KEY_WRAP_384"
)

// PossibleKeyEncryptionAlgorithmValues returns the possible values for the KeyEncryptionAlgorithm const type.
func PossibleKeyEncryptionAlgorithmValues() []KeyEncryptionAlgorithm {
	return []KeyEncryptionAlgorithm{
		KeyEncryptionAlgorithmCKMRSAAESKEYWRAP,
		KeyEncryptionAlgorithmRSAAESKEYWRAP256,
		KeyEncryptionAlgorithmRSAAESKEYWRAP384,
	}
}

// KeyRotationPolicyAction - The type of the action. The value should be compared case-insensitively.
type KeyRotationPolicyAction string

const (
	// KeyRotationPolicyActionNotify - Trigger Event Grid events. Defaults to 30 days before expiry. Key Vault only.
	KeyRotationPolicyActionNotify KeyRotationPolicyAction = "Notify"
	// KeyRotationPolicyActionRotate - Rotate the key based on the key policy.
	KeyRotationPolicyActionRotate KeyRotationPolicyAction = "Rotate"
)

// PossibleKeyRotationPolicyActionValues returns the possible values for the KeyRotationPolicyAction const type.
func PossibleKeyRotationPolicyActionValues() []KeyRotationPolicyAction {
	return []KeyRotationPolicyAction{
		KeyRotationPolicyActionNotify,
		KeyRotationPolicyActionRotate,
	}
}
