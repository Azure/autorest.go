// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"azkeys"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
)

// KeyVaultServer is a fake server for instances of the azkeys.KeyVaultClient type.
type KeyVaultServer struct {
	// BackupKey is the fake for method KeyVaultClient.BackupKey
	// HTTP status codes to indicate success: http.StatusOK
	BackupKey func(ctx context.Context, keyName string, options *azkeys.KeyVaultClientBackupKeyOptions) (resp azfake.Responder[azkeys.KeyVaultClientBackupKeyResponse], errResp azfake.ErrorResponder)

	// CreateKey is the fake for method KeyVaultClient.CreateKey
	// HTTP status codes to indicate success: http.StatusOK
	CreateKey func(ctx context.Context, keyName string, parameters azkeys.KeyCreateParameters, options *azkeys.KeyVaultClientCreateKeyOptions) (resp azfake.Responder[azkeys.KeyVaultClientCreateKeyResponse], errResp azfake.ErrorResponder)

	// Decrypt is the fake for method KeyVaultClient.Decrypt
	// HTTP status codes to indicate success: http.StatusOK
	Decrypt func(ctx context.Context, keyName string, keyVersion string, parameters azkeys.KeyOperationsParameters, options *azkeys.KeyVaultClientDecryptOptions) (resp azfake.Responder[azkeys.KeyVaultClientDecryptResponse], errResp azfake.ErrorResponder)

	// DeleteKey is the fake for method KeyVaultClient.DeleteKey
	// HTTP status codes to indicate success: http.StatusOK
	DeleteKey func(ctx context.Context, keyName string, options *azkeys.KeyVaultClientDeleteKeyOptions) (resp azfake.Responder[azkeys.KeyVaultClientDeleteKeyResponse], errResp azfake.ErrorResponder)

	// Encrypt is the fake for method KeyVaultClient.Encrypt
	// HTTP status codes to indicate success: http.StatusOK
	Encrypt func(ctx context.Context, keyName string, keyVersion string, parameters azkeys.KeyOperationsParameters, options *azkeys.KeyVaultClientEncryptOptions) (resp azfake.Responder[azkeys.KeyVaultClientEncryptResponse], errResp azfake.ErrorResponder)

	// GetDeletedKey is the fake for method KeyVaultClient.GetDeletedKey
	// HTTP status codes to indicate success: http.StatusOK
	GetDeletedKey func(ctx context.Context, keyName string, options *azkeys.KeyVaultClientGetDeletedKeyOptions) (resp azfake.Responder[azkeys.KeyVaultClientGetDeletedKeyResponse], errResp azfake.ErrorResponder)

	// NewGetDeletedKeysPager is the fake for method KeyVaultClient.NewGetDeletedKeysPager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetDeletedKeysPager func(options *azkeys.KeyVaultClientGetDeletedKeysOptions) (resp azfake.PagerResponder[azkeys.KeyVaultClientGetDeletedKeysResponse])

	// GetKey is the fake for method KeyVaultClient.GetKey
	// HTTP status codes to indicate success: http.StatusOK
	GetKey func(ctx context.Context, keyName string, keyVersion string, options *azkeys.KeyVaultClientGetKeyOptions) (resp azfake.Responder[azkeys.KeyVaultClientGetKeyResponse], errResp azfake.ErrorResponder)

	// GetKeyRotationPolicy is the fake for method KeyVaultClient.GetKeyRotationPolicy
	// HTTP status codes to indicate success: http.StatusOK
	GetKeyRotationPolicy func(ctx context.Context, keyName string, options *azkeys.KeyVaultClientGetKeyRotationPolicyOptions) (resp azfake.Responder[azkeys.KeyVaultClientGetKeyRotationPolicyResponse], errResp azfake.ErrorResponder)

	// NewGetKeyVersionsPager is the fake for method KeyVaultClient.NewGetKeyVersionsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetKeyVersionsPager func(keyName string, options *azkeys.KeyVaultClientGetKeyVersionsOptions) (resp azfake.PagerResponder[azkeys.KeyVaultClientGetKeyVersionsResponse])

	// NewGetKeysPager is the fake for method KeyVaultClient.NewGetKeysPager
	// HTTP status codes to indicate success: http.StatusOK
	NewGetKeysPager func(options *azkeys.KeyVaultClientGetKeysOptions) (resp azfake.PagerResponder[azkeys.KeyVaultClientGetKeysResponse])

	// GetRandomBytes is the fake for method KeyVaultClient.GetRandomBytes
	// HTTP status codes to indicate success: http.StatusOK
	GetRandomBytes func(ctx context.Context, parameters azkeys.GetRandomBytesRequest, options *azkeys.KeyVaultClientGetRandomBytesOptions) (resp azfake.Responder[azkeys.KeyVaultClientGetRandomBytesResponse], errResp azfake.ErrorResponder)

	// ImportKey is the fake for method KeyVaultClient.ImportKey
	// HTTP status codes to indicate success: http.StatusOK
	ImportKey func(ctx context.Context, keyName string, parameters azkeys.KeyImportParameters, options *azkeys.KeyVaultClientImportKeyOptions) (resp azfake.Responder[azkeys.KeyVaultClientImportKeyResponse], errResp azfake.ErrorResponder)

	// PurgeDeletedKey is the fake for method KeyVaultClient.PurgeDeletedKey
	// HTTP status codes to indicate success: http.StatusNoContent
	PurgeDeletedKey func(ctx context.Context, keyName string, options *azkeys.KeyVaultClientPurgeDeletedKeyOptions) (resp azfake.Responder[azkeys.KeyVaultClientPurgeDeletedKeyResponse], errResp azfake.ErrorResponder)

	// RecoverDeletedKey is the fake for method KeyVaultClient.RecoverDeletedKey
	// HTTP status codes to indicate success: http.StatusOK
	RecoverDeletedKey func(ctx context.Context, keyName string, options *azkeys.KeyVaultClientRecoverDeletedKeyOptions) (resp azfake.Responder[azkeys.KeyVaultClientRecoverDeletedKeyResponse], errResp azfake.ErrorResponder)

	// Release is the fake for method KeyVaultClient.Release
	// HTTP status codes to indicate success: http.StatusOK
	Release func(ctx context.Context, keyName string, keyVersion string, parameters azkeys.KeyReleaseParameters, options *azkeys.KeyVaultClientReleaseOptions) (resp azfake.Responder[azkeys.KeyVaultClientReleaseResponse], errResp azfake.ErrorResponder)

	// RestoreKey is the fake for method KeyVaultClient.RestoreKey
	// HTTP status codes to indicate success: http.StatusOK
	RestoreKey func(ctx context.Context, parameters azkeys.KeyRestoreParameters, options *azkeys.KeyVaultClientRestoreKeyOptions) (resp azfake.Responder[azkeys.KeyVaultClientRestoreKeyResponse], errResp azfake.ErrorResponder)

	// RotateKey is the fake for method KeyVaultClient.RotateKey
	// HTTP status codes to indicate success: http.StatusOK
	RotateKey func(ctx context.Context, keyName string, options *azkeys.KeyVaultClientRotateKeyOptions) (resp azfake.Responder[azkeys.KeyVaultClientRotateKeyResponse], errResp azfake.ErrorResponder)

	// Sign is the fake for method KeyVaultClient.Sign
	// HTTP status codes to indicate success: http.StatusOK
	Sign func(ctx context.Context, keyName string, keyVersion string, parameters azkeys.KeySignParameters, options *azkeys.KeyVaultClientSignOptions) (resp azfake.Responder[azkeys.KeyVaultClientSignResponse], errResp azfake.ErrorResponder)

	// UnwrapKey is the fake for method KeyVaultClient.UnwrapKey
	// HTTP status codes to indicate success: http.StatusOK
	UnwrapKey func(ctx context.Context, keyName string, keyVersion string, parameters azkeys.KeyOperationsParameters, options *azkeys.KeyVaultClientUnwrapKeyOptions) (resp azfake.Responder[azkeys.KeyVaultClientUnwrapKeyResponse], errResp azfake.ErrorResponder)

	// UpdateKey is the fake for method KeyVaultClient.UpdateKey
	// HTTP status codes to indicate success: http.StatusOK
	UpdateKey func(ctx context.Context, keyName string, keyVersion string, parameters azkeys.KeyUpdateParameters, options *azkeys.KeyVaultClientUpdateKeyOptions) (resp azfake.Responder[azkeys.KeyVaultClientUpdateKeyResponse], errResp azfake.ErrorResponder)

	// UpdateKeyRotationPolicy is the fake for method KeyVaultClient.UpdateKeyRotationPolicy
	// HTTP status codes to indicate success: http.StatusOK
	UpdateKeyRotationPolicy func(ctx context.Context, keyName string, keyRotationPolicy azkeys.KeyRotationPolicy, options *azkeys.KeyVaultClientUpdateKeyRotationPolicyOptions) (resp azfake.Responder[azkeys.KeyVaultClientUpdateKeyRotationPolicyResponse], errResp azfake.ErrorResponder)

	// Verify is the fake for method KeyVaultClient.Verify
	// HTTP status codes to indicate success: http.StatusOK
	Verify func(ctx context.Context, keyName string, keyVersion string, parameters azkeys.KeyVerifyParameters, options *azkeys.KeyVaultClientVerifyOptions) (resp azfake.Responder[azkeys.KeyVaultClientVerifyResponse], errResp azfake.ErrorResponder)

	// WrapKey is the fake for method KeyVaultClient.WrapKey
	// HTTP status codes to indicate success: http.StatusOK
	WrapKey func(ctx context.Context, keyName string, keyVersion string, parameters azkeys.KeyOperationsParameters, options *azkeys.KeyVaultClientWrapKeyOptions) (resp azfake.Responder[azkeys.KeyVaultClientWrapKeyResponse], errResp azfake.ErrorResponder)
}

// NewKeyVaultServerTransport creates a new instance of KeyVaultServerTransport with the provided implementation.
// The returned KeyVaultServerTransport instance is connected to an instance of azkeys.KeyVaultClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewKeyVaultServerTransport(srv *KeyVaultServer) *KeyVaultServerTransport {
	return &KeyVaultServerTransport{
		srv:                    srv,
		newGetDeletedKeysPager: newTracker[azfake.PagerResponder[azkeys.KeyVaultClientGetDeletedKeysResponse]](),
		newGetKeyVersionsPager: newTracker[azfake.PagerResponder[azkeys.KeyVaultClientGetKeyVersionsResponse]](),
		newGetKeysPager:        newTracker[azfake.PagerResponder[azkeys.KeyVaultClientGetKeysResponse]](),
	}
}

// KeyVaultServerTransport connects instances of azkeys.KeyVaultClient to instances of KeyVaultServer.
// Don't use this type directly, use NewKeyVaultServerTransport instead.
type KeyVaultServerTransport struct {
	srv                    *KeyVaultServer
	newGetDeletedKeysPager *tracker[azfake.PagerResponder[azkeys.KeyVaultClientGetDeletedKeysResponse]]
	newGetKeyVersionsPager *tracker[azfake.PagerResponder[azkeys.KeyVaultClientGetKeyVersionsResponse]]
	newGetKeysPager        *tracker[azfake.PagerResponder[azkeys.KeyVaultClientGetKeysResponse]]
}

// Do implements the policy.Transporter interface for KeyVaultServerTransport.
func (k *KeyVaultServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return k.dispatchToMethodFake(req, method)
}

func (k *KeyVaultServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if keyVaultServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = keyVaultServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "KeyVaultClient.BackupKey":
				res.resp, res.err = k.dispatchBackupKey(req)
			case "KeyVaultClient.CreateKey":
				res.resp, res.err = k.dispatchCreateKey(req)
			case "KeyVaultClient.Decrypt":
				res.resp, res.err = k.dispatchDecrypt(req)
			case "KeyVaultClient.DeleteKey":
				res.resp, res.err = k.dispatchDeleteKey(req)
			case "KeyVaultClient.Encrypt":
				res.resp, res.err = k.dispatchEncrypt(req)
			case "KeyVaultClient.GetDeletedKey":
				res.resp, res.err = k.dispatchGetDeletedKey(req)
			case "KeyVaultClient.NewGetDeletedKeysPager":
				res.resp, res.err = k.dispatchNewGetDeletedKeysPager(req)
			case "KeyVaultClient.GetKey":
				res.resp, res.err = k.dispatchGetKey(req)
			case "KeyVaultClient.GetKeyRotationPolicy":
				res.resp, res.err = k.dispatchGetKeyRotationPolicy(req)
			case "KeyVaultClient.NewGetKeyVersionsPager":
				res.resp, res.err = k.dispatchNewGetKeyVersionsPager(req)
			case "KeyVaultClient.NewGetKeysPager":
				res.resp, res.err = k.dispatchNewGetKeysPager(req)
			case "KeyVaultClient.GetRandomBytes":
				res.resp, res.err = k.dispatchGetRandomBytes(req)
			case "KeyVaultClient.ImportKey":
				res.resp, res.err = k.dispatchImportKey(req)
			case "KeyVaultClient.PurgeDeletedKey":
				res.resp, res.err = k.dispatchPurgeDeletedKey(req)
			case "KeyVaultClient.RecoverDeletedKey":
				res.resp, res.err = k.dispatchRecoverDeletedKey(req)
			case "KeyVaultClient.Release":
				res.resp, res.err = k.dispatchRelease(req)
			case "KeyVaultClient.RestoreKey":
				res.resp, res.err = k.dispatchRestoreKey(req)
			case "KeyVaultClient.RotateKey":
				res.resp, res.err = k.dispatchRotateKey(req)
			case "KeyVaultClient.Sign":
				res.resp, res.err = k.dispatchSign(req)
			case "KeyVaultClient.UnwrapKey":
				res.resp, res.err = k.dispatchUnwrapKey(req)
			case "KeyVaultClient.UpdateKey":
				res.resp, res.err = k.dispatchUpdateKey(req)
			case "KeyVaultClient.UpdateKeyRotationPolicy":
				res.resp, res.err = k.dispatchUpdateKeyRotationPolicy(req)
			case "KeyVaultClient.Verify":
				res.resp, res.err = k.dispatchVerify(req)
			case "KeyVaultClient.WrapKey":
				res.resp, res.err = k.dispatchWrapKey(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (k *KeyVaultServerTransport) dispatchBackupKey(req *http.Request) (*http.Response, error) {
	if k.srv.BackupKey == nil {
		return nil, &nonRetriableError{errors.New("fake for method BackupKey not implemented")}
	}
	const regexStr = `/keys/(?P<key_name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/backup`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	keyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_name")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := k.srv.BackupKey(req.Context(), keyNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).BackupKeyResult, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (k *KeyVaultServerTransport) dispatchCreateKey(req *http.Request) (*http.Response, error) {
	if k.srv.CreateKey == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateKey not implemented")}
	}
	const regexStr = `/keys/(?P<key_name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/create`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[azkeys.KeyCreateParameters](req)
	if err != nil {
		return nil, err
	}
	keyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_name")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := k.srv.CreateKey(req.Context(), keyNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KeyBundle, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (k *KeyVaultServerTransport) dispatchDecrypt(req *http.Request) (*http.Response, error) {
	if k.srv.Decrypt == nil {
		return nil, &nonRetriableError{errors.New("fake for method Decrypt not implemented")}
	}
	const regexStr = `/keys/(?P<key_name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<key_version>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/decrypt`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[azkeys.KeyOperationsParameters](req)
	if err != nil {
		return nil, err
	}
	keyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_name")])
	if err != nil {
		return nil, err
	}
	keyVersionParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_version")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := k.srv.Decrypt(req.Context(), keyNameParam, keyVersionParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KeyOperationResult, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (k *KeyVaultServerTransport) dispatchDeleteKey(req *http.Request) (*http.Response, error) {
	if k.srv.DeleteKey == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteKey not implemented")}
	}
	const regexStr = `/keys/(?P<key_name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	keyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_name")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := k.srv.DeleteKey(req.Context(), keyNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DeletedKeyBundle, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (k *KeyVaultServerTransport) dispatchEncrypt(req *http.Request) (*http.Response, error) {
	if k.srv.Encrypt == nil {
		return nil, &nonRetriableError{errors.New("fake for method Encrypt not implemented")}
	}
	const regexStr = `/keys/(?P<key_name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<key_version>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/encrypt`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[azkeys.KeyOperationsParameters](req)
	if err != nil {
		return nil, err
	}
	keyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_name")])
	if err != nil {
		return nil, err
	}
	keyVersionParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_version")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := k.srv.Encrypt(req.Context(), keyNameParam, keyVersionParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KeyOperationResult, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (k *KeyVaultServerTransport) dispatchGetDeletedKey(req *http.Request) (*http.Response, error) {
	if k.srv.GetDeletedKey == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetDeletedKey not implemented")}
	}
	const regexStr = `/deletedkeys/(?P<key_name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	keyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_name")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := k.srv.GetDeletedKey(req.Context(), keyNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DeletedKeyBundle, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (k *KeyVaultServerTransport) dispatchNewGetDeletedKeysPager(req *http.Request) (*http.Response, error) {
	if k.srv.NewGetDeletedKeysPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewGetDeletedKeysPager not implemented")}
	}
	newGetDeletedKeysPager := k.newGetDeletedKeysPager.get(req)
	if newGetDeletedKeysPager == nil {
		qp := req.URL.Query()
		maxresultsUnescaped, err := url.QueryUnescape(qp.Get("maxresults"))
		if err != nil {
			return nil, err
		}
		maxresultsParam, err := parseOptional(maxresultsUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		var options *azkeys.KeyVaultClientGetDeletedKeysOptions
		if maxresultsParam != nil {
			options = &azkeys.KeyVaultClientGetDeletedKeysOptions{
				Maxresults: maxresultsParam,
			}
		}
		resp := k.srv.NewGetDeletedKeysPager(options)
		newGetDeletedKeysPager = &resp
		k.newGetDeletedKeysPager.add(req, newGetDeletedKeysPager)
		server.PagerResponderInjectNextLinks(newGetDeletedKeysPager, req, func(page *azkeys.KeyVaultClientGetDeletedKeysResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newGetDeletedKeysPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		k.newGetDeletedKeysPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newGetDeletedKeysPager) {
		k.newGetDeletedKeysPager.remove(req)
	}
	return resp, nil
}

func (k *KeyVaultServerTransport) dispatchGetKey(req *http.Request) (*http.Response, error) {
	if k.srv.GetKey == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetKey not implemented")}
	}
	const regexStr = `/keys/(?P<key_name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<key_version>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	keyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_name")])
	if err != nil {
		return nil, err
	}
	keyVersionParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_version")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := k.srv.GetKey(req.Context(), keyNameParam, keyVersionParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KeyBundle, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (k *KeyVaultServerTransport) dispatchGetKeyRotationPolicy(req *http.Request) (*http.Response, error) {
	if k.srv.GetKeyRotationPolicy == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetKeyRotationPolicy not implemented")}
	}
	const regexStr = `/keys/(?P<key_name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/rotationpolicy`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	keyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_name")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := k.srv.GetKeyRotationPolicy(req.Context(), keyNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KeyRotationPolicy, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (k *KeyVaultServerTransport) dispatchNewGetKeyVersionsPager(req *http.Request) (*http.Response, error) {
	if k.srv.NewGetKeyVersionsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewGetKeyVersionsPager not implemented")}
	}
	newGetKeyVersionsPager := k.newGetKeyVersionsPager.get(req)
	if newGetKeyVersionsPager == nil {
		const regexStr = `/keys/(?P<key_name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/versions`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		keyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_name")])
		if err != nil {
			return nil, err
		}
		maxresultsUnescaped, err := url.QueryUnescape(qp.Get("maxresults"))
		if err != nil {
			return nil, err
		}
		maxresultsParam, err := parseOptional(maxresultsUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		var options *azkeys.KeyVaultClientGetKeyVersionsOptions
		if maxresultsParam != nil {
			options = &azkeys.KeyVaultClientGetKeyVersionsOptions{
				Maxresults: maxresultsParam,
			}
		}
		resp := k.srv.NewGetKeyVersionsPager(keyNameParam, options)
		newGetKeyVersionsPager = &resp
		k.newGetKeyVersionsPager.add(req, newGetKeyVersionsPager)
		server.PagerResponderInjectNextLinks(newGetKeyVersionsPager, req, func(page *azkeys.KeyVaultClientGetKeyVersionsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newGetKeyVersionsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		k.newGetKeyVersionsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newGetKeyVersionsPager) {
		k.newGetKeyVersionsPager.remove(req)
	}
	return resp, nil
}

func (k *KeyVaultServerTransport) dispatchNewGetKeysPager(req *http.Request) (*http.Response, error) {
	if k.srv.NewGetKeysPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewGetKeysPager not implemented")}
	}
	newGetKeysPager := k.newGetKeysPager.get(req)
	if newGetKeysPager == nil {
		qp := req.URL.Query()
		maxresultsUnescaped, err := url.QueryUnescape(qp.Get("maxresults"))
		if err != nil {
			return nil, err
		}
		maxresultsParam, err := parseOptional(maxresultsUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		var options *azkeys.KeyVaultClientGetKeysOptions
		if maxresultsParam != nil {
			options = &azkeys.KeyVaultClientGetKeysOptions{
				Maxresults: maxresultsParam,
			}
		}
		resp := k.srv.NewGetKeysPager(options)
		newGetKeysPager = &resp
		k.newGetKeysPager.add(req, newGetKeysPager)
		server.PagerResponderInjectNextLinks(newGetKeysPager, req, func(page *azkeys.KeyVaultClientGetKeysResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newGetKeysPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		k.newGetKeysPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newGetKeysPager) {
		k.newGetKeysPager.remove(req)
	}
	return resp, nil
}

func (k *KeyVaultServerTransport) dispatchGetRandomBytes(req *http.Request) (*http.Response, error) {
	if k.srv.GetRandomBytes == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetRandomBytes not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[azkeys.GetRandomBytesRequest](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := k.srv.GetRandomBytes(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RandomBytes, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (k *KeyVaultServerTransport) dispatchImportKey(req *http.Request) (*http.Response, error) {
	if k.srv.ImportKey == nil {
		return nil, &nonRetriableError{errors.New("fake for method ImportKey not implemented")}
	}
	const regexStr = `/keys/(?P<key_name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[azkeys.KeyImportParameters](req)
	if err != nil {
		return nil, err
	}
	keyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_name")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := k.srv.ImportKey(req.Context(), keyNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KeyBundle, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (k *KeyVaultServerTransport) dispatchPurgeDeletedKey(req *http.Request) (*http.Response, error) {
	if k.srv.PurgeDeletedKey == nil {
		return nil, &nonRetriableError{errors.New("fake for method PurgeDeletedKey not implemented")}
	}
	const regexStr = `/deletedkeys/(?P<key_name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	keyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_name")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := k.srv.PurgeDeletedKey(req.Context(), keyNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (k *KeyVaultServerTransport) dispatchRecoverDeletedKey(req *http.Request) (*http.Response, error) {
	if k.srv.RecoverDeletedKey == nil {
		return nil, &nonRetriableError{errors.New("fake for method RecoverDeletedKey not implemented")}
	}
	const regexStr = `/deletedkeys/(?P<key_name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/recover`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	keyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_name")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := k.srv.RecoverDeletedKey(req.Context(), keyNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KeyBundle, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (k *KeyVaultServerTransport) dispatchRelease(req *http.Request) (*http.Response, error) {
	if k.srv.Release == nil {
		return nil, &nonRetriableError{errors.New("fake for method Release not implemented")}
	}
	const regexStr = `/keys/(?P<key_name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<key_version>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/release`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[azkeys.KeyReleaseParameters](req)
	if err != nil {
		return nil, err
	}
	keyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_name")])
	if err != nil {
		return nil, err
	}
	keyVersionParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_version")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := k.srv.Release(req.Context(), keyNameParam, keyVersionParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KeyReleaseResult, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (k *KeyVaultServerTransport) dispatchRestoreKey(req *http.Request) (*http.Response, error) {
	if k.srv.RestoreKey == nil {
		return nil, &nonRetriableError{errors.New("fake for method RestoreKey not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[azkeys.KeyRestoreParameters](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := k.srv.RestoreKey(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KeyBundle, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (k *KeyVaultServerTransport) dispatchRotateKey(req *http.Request) (*http.Response, error) {
	if k.srv.RotateKey == nil {
		return nil, &nonRetriableError{errors.New("fake for method RotateKey not implemented")}
	}
	const regexStr = `/keys/(?P<key_name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/rotate`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	keyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_name")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := k.srv.RotateKey(req.Context(), keyNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KeyBundle, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (k *KeyVaultServerTransport) dispatchSign(req *http.Request) (*http.Response, error) {
	if k.srv.Sign == nil {
		return nil, &nonRetriableError{errors.New("fake for method Sign not implemented")}
	}
	const regexStr = `/keys/(?P<key_name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<key_version>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/sign`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[azkeys.KeySignParameters](req)
	if err != nil {
		return nil, err
	}
	keyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_name")])
	if err != nil {
		return nil, err
	}
	keyVersionParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_version")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := k.srv.Sign(req.Context(), keyNameParam, keyVersionParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KeyOperationResult, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (k *KeyVaultServerTransport) dispatchUnwrapKey(req *http.Request) (*http.Response, error) {
	if k.srv.UnwrapKey == nil {
		return nil, &nonRetriableError{errors.New("fake for method UnwrapKey not implemented")}
	}
	const regexStr = `/keys/(?P<key_name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<key_version>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/unwrapkey`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[azkeys.KeyOperationsParameters](req)
	if err != nil {
		return nil, err
	}
	keyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_name")])
	if err != nil {
		return nil, err
	}
	keyVersionParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_version")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := k.srv.UnwrapKey(req.Context(), keyNameParam, keyVersionParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KeyOperationResult, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (k *KeyVaultServerTransport) dispatchUpdateKey(req *http.Request) (*http.Response, error) {
	if k.srv.UpdateKey == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateKey not implemented")}
	}
	const regexStr = `/keys/(?P<key_name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<key_version>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[azkeys.KeyUpdateParameters](req)
	if err != nil {
		return nil, err
	}
	keyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_name")])
	if err != nil {
		return nil, err
	}
	keyVersionParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_version")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := k.srv.UpdateKey(req.Context(), keyNameParam, keyVersionParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KeyBundle, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (k *KeyVaultServerTransport) dispatchUpdateKeyRotationPolicy(req *http.Request) (*http.Response, error) {
	if k.srv.UpdateKeyRotationPolicy == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateKeyRotationPolicy not implemented")}
	}
	const regexStr = `/keys/(?P<key_name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/rotationpolicy`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[azkeys.KeyRotationPolicy](req)
	if err != nil {
		return nil, err
	}
	keyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_name")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := k.srv.UpdateKeyRotationPolicy(req.Context(), keyNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KeyRotationPolicy, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (k *KeyVaultServerTransport) dispatchVerify(req *http.Request) (*http.Response, error) {
	if k.srv.Verify == nil {
		return nil, &nonRetriableError{errors.New("fake for method Verify not implemented")}
	}
	const regexStr = `/keys/(?P<key_name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<key_version>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/verify`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[azkeys.KeyVerifyParameters](req)
	if err != nil {
		return nil, err
	}
	keyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_name")])
	if err != nil {
		return nil, err
	}
	keyVersionParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_version")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := k.srv.Verify(req.Context(), keyNameParam, keyVersionParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KeyVerifyResult, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (k *KeyVaultServerTransport) dispatchWrapKey(req *http.Request) (*http.Response, error) {
	if k.srv.WrapKey == nil {
		return nil, &nonRetriableError{errors.New("fake for method WrapKey not implemented")}
	}
	const regexStr = `/keys/(?P<key_name>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<key_version>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/wrapkey`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[azkeys.KeyOperationsParameters](req)
	if err != nil {
		return nil, err
	}
	keyNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_name")])
	if err != nil {
		return nil, err
	}
	keyVersionParam, err := url.PathUnescape(matches[regex.SubexpIndex("key_version")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := k.srv.WrapKey(req.Context(), keyNameParam, keyVersionParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KeyOperationResult, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to KeyVaultServerTransport
var keyVaultServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
