// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"armhealthbot"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
	"net/url"
	"regexp"
)

// HealthBotsServer is a fake server for instances of the armhealthbot.HealthBotsClient type.
type HealthBotsServer struct {
	// BeginCreate is the fake for method HealthBotsClient.BeginCreate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreate func(ctx context.Context, resourceGroupName string, botName string, parameters armhealthbot.HealthBot, options *armhealthbot.HealthBotsClientBeginCreateOptions) (resp azfake.PollerResponder[armhealthbot.HealthBotsClientCreateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method HealthBotsClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, botName string, options *armhealthbot.HealthBotsClientBeginDeleteOptions) (resp azfake.PollerResponder[armhealthbot.HealthBotsClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method HealthBotsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, botName string, options *armhealthbot.HealthBotsClientGetOptions) (resp azfake.Responder[armhealthbot.HealthBotsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method HealthBotsClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(options *armhealthbot.HealthBotsClientListOptions) (resp azfake.PagerResponder[armhealthbot.HealthBotsClientListResponse])

	// NewListByResourceGroupPager is the fake for method HealthBotsClient.NewListByResourceGroupPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByResourceGroupPager func(resourceGroupName string, options *armhealthbot.HealthBotsClientListByResourceGroupOptions) (resp azfake.PagerResponder[armhealthbot.HealthBotsClientListByResourceGroupResponse])

	// ListSecrets is the fake for method HealthBotsClient.ListSecrets
	// HTTP status codes to indicate success: http.StatusOK
	ListSecrets func(ctx context.Context, resourceGroupName string, botName string, options *armhealthbot.HealthBotsClientListSecretsOptions) (resp azfake.Responder[armhealthbot.HealthBotsClientListSecretsResponse], errResp azfake.ErrorResponder)

	// RegenerateAPIJwtSecret is the fake for method HealthBotsClient.RegenerateAPIJwtSecret
	// HTTP status codes to indicate success: http.StatusOK
	RegenerateAPIJwtSecret func(ctx context.Context, resourceGroupName string, botName string, options *armhealthbot.HealthBotsClientRegenerateAPIJwtSecretOptions) (resp azfake.Responder[armhealthbot.HealthBotsClientRegenerateAPIJwtSecretResponse], errResp azfake.ErrorResponder)

	// BeginUpdate is the fake for method HealthBotsClient.BeginUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated, http.StatusNoContent
	BeginUpdate func(ctx context.Context, resourceGroupName string, botName string, parameters armhealthbot.UpdateParameters, options *armhealthbot.HealthBotsClientBeginUpdateOptions) (resp azfake.PollerResponder[armhealthbot.HealthBotsClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewHealthBotsServerTransport creates a new instance of HealthBotsServerTransport with the provided implementation.
// The returned HealthBotsServerTransport instance is connected to an instance of armhealthbot.HealthBotsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewHealthBotsServerTransport(srv *HealthBotsServer) *HealthBotsServerTransport {
	return &HealthBotsServerTransport{
		srv:                         srv,
		beginCreate:                 newTracker[azfake.PollerResponder[armhealthbot.HealthBotsClientCreateResponse]](),
		beginDelete:                 newTracker[azfake.PollerResponder[armhealthbot.HealthBotsClientDeleteResponse]](),
		newListPager:                newTracker[azfake.PagerResponder[armhealthbot.HealthBotsClientListResponse]](),
		newListByResourceGroupPager: newTracker[azfake.PagerResponder[armhealthbot.HealthBotsClientListByResourceGroupResponse]](),
		beginUpdate:                 newTracker[azfake.PollerResponder[armhealthbot.HealthBotsClientUpdateResponse]](),
	}
}

// HealthBotsServerTransport connects instances of armhealthbot.HealthBotsClient to instances of HealthBotsServer.
// Don't use this type directly, use NewHealthBotsServerTransport instead.
type HealthBotsServerTransport struct {
	srv                         *HealthBotsServer
	beginCreate                 *tracker[azfake.PollerResponder[armhealthbot.HealthBotsClientCreateResponse]]
	beginDelete                 *tracker[azfake.PollerResponder[armhealthbot.HealthBotsClientDeleteResponse]]
	newListPager                *tracker[azfake.PagerResponder[armhealthbot.HealthBotsClientListResponse]]
	newListByResourceGroupPager *tracker[azfake.PagerResponder[armhealthbot.HealthBotsClientListByResourceGroupResponse]]
	beginUpdate                 *tracker[azfake.PollerResponder[armhealthbot.HealthBotsClientUpdateResponse]]
}

// Do implements the policy.Transporter interface for HealthBotsServerTransport.
func (h *HealthBotsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return h.dispatchToMethodFake(req, method)
}

func (h *HealthBotsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if healthBotsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = healthBotsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "HealthBotsClient.BeginCreate":
				res.resp, res.err = h.dispatchBeginCreate(req)
			case "HealthBotsClient.BeginDelete":
				res.resp, res.err = h.dispatchBeginDelete(req)
			case "HealthBotsClient.Get":
				res.resp, res.err = h.dispatchGet(req)
			case "HealthBotsClient.NewListPager":
				res.resp, res.err = h.dispatchNewListPager(req)
			case "HealthBotsClient.NewListByResourceGroupPager":
				res.resp, res.err = h.dispatchNewListByResourceGroupPager(req)
			case "HealthBotsClient.ListSecrets":
				res.resp, res.err = h.dispatchListSecrets(req)
			case "HealthBotsClient.RegenerateAPIJwtSecret":
				res.resp, res.err = h.dispatchRegenerateAPIJwtSecret(req)
			case "HealthBotsClient.BeginUpdate":
				res.resp, res.err = h.dispatchBeginUpdate(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (h *HealthBotsServerTransport) dispatchBeginCreate(req *http.Request) (*http.Response, error) {
	if h.srv.BeginCreate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreate not implemented")}
	}
	beginCreate := h.beginCreate.get(req)
	if beginCreate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HealthBot/healthBots/(?P<botName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armhealthbot.HealthBot](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		botNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("botName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := h.srv.BeginCreate(req.Context(), resourceGroupNameParam, botNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreate = &respr
		h.beginCreate.add(req, beginCreate)
	}

	resp, err := server.PollerResponderNext(beginCreate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		h.beginCreate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreate) {
		h.beginCreate.remove(req)
	}

	return resp, nil
}

func (h *HealthBotsServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if h.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := h.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HealthBot/healthBots/(?P<botName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		botNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("botName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := h.srv.BeginDelete(req.Context(), resourceGroupNameParam, botNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		h.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		h.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		h.beginDelete.remove(req)
	}

	return resp, nil
}

func (h *HealthBotsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if h.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HealthBot/healthBots/(?P<botName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	botNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("botName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := h.srv.Get(req.Context(), resourceGroupNameParam, botNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).HealthBot, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HealthBotsServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if h.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := h.newListPager.get(req)
	if newListPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HealthBot/healthBots`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := h.srv.NewListPager(nil)
		newListPager = &resp
		h.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *armhealthbot.HealthBotsClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		h.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		h.newListPager.remove(req)
	}
	return resp, nil
}

func (h *HealthBotsServerTransport) dispatchNewListByResourceGroupPager(req *http.Request) (*http.Response, error) {
	if h.srv.NewListByResourceGroupPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByResourceGroupPager not implemented")}
	}
	newListByResourceGroupPager := h.newListByResourceGroupPager.get(req)
	if newListByResourceGroupPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HealthBot/healthBots`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		resp := h.srv.NewListByResourceGroupPager(resourceGroupNameParam, nil)
		newListByResourceGroupPager = &resp
		h.newListByResourceGroupPager.add(req, newListByResourceGroupPager)
		server.PagerResponderInjectNextLinks(newListByResourceGroupPager, req, func(page *armhealthbot.HealthBotsClientListByResourceGroupResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByResourceGroupPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		h.newListByResourceGroupPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByResourceGroupPager) {
		h.newListByResourceGroupPager.remove(req)
	}
	return resp, nil
}

func (h *HealthBotsServerTransport) dispatchListSecrets(req *http.Request) (*http.Response, error) {
	if h.srv.ListSecrets == nil {
		return nil, &nonRetriableError{errors.New("fake for method ListSecrets not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HealthBot/healthBots/(?P<botName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/listSecrets`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	botNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("botName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := h.srv.ListSecrets(req.Context(), resourceGroupNameParam, botNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).KeysResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HealthBotsServerTransport) dispatchRegenerateAPIJwtSecret(req *http.Request) (*http.Response, error) {
	if h.srv.RegenerateAPIJwtSecret == nil {
		return nil, &nonRetriableError{errors.New("fake for method RegenerateAPIJwtSecret not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HealthBot/healthBots/(?P<botName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/regenerateApiJwtSecret`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	botNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("botName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := h.srv.RegenerateAPIJwtSecret(req.Context(), resourceGroupNameParam, botNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Key, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (h *HealthBotsServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if h.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdate not implemented")}
	}
	beginUpdate := h.beginUpdate.get(req)
	if beginUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HealthBot/healthBots/(?P<botName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armhealthbot.UpdateParameters](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		botNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("botName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := h.srv.BeginUpdate(req.Context(), resourceGroupNameParam, botNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdate = &respr
		h.beginUpdate.add(req, beginUpdate)
	}

	resp, err := server.PollerResponderNext(beginUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated, http.StatusNoContent}, resp.StatusCode) {
		h.beginUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdate) {
		h.beginUpdate.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to HealthBotsServerTransport
var healthBotsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
