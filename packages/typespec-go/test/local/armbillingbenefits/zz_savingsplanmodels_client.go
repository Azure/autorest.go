// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armbillingbenefits

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// SavingsPlanModelsClient contains the methods for the SavingsPlanModels group.
// Don't use this type directly, use NewSavingsPlanModelsClient() instead.
type SavingsPlanModelsClient struct {
	internal *arm.Client
}

// NewSavingsPlanModelsClient creates a new instance of SavingsPlanModelsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewSavingsPlanModelsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*SavingsPlanModelsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &SavingsPlanModelsClient{
		internal: cl,
	}
	return client, nil
}

// Get - Get savings plan.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-11-01-preview
//   - savingsPlanOrderID - Order ID of the savings plan
//   - savingsPlanID - ID of the savings plan
//   - options - SavingsPlanModelsClientGetOptions contains the optional parameters for the SavingsPlanModelsClient.Get method.
func (client *SavingsPlanModelsClient) Get(ctx context.Context, savingsPlanOrderID string, savingsPlanID string, options *SavingsPlanModelsClientGetOptions) (SavingsPlanModelsClientGetResponse, error) {
	var err error
	const operationName = "SavingsPlanModelsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, savingsPlanOrderID, savingsPlanID, options)
	if err != nil {
		return SavingsPlanModelsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SavingsPlanModelsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SavingsPlanModelsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *SavingsPlanModelsClient) getCreateRequest(ctx context.Context, savingsPlanOrderID string, savingsPlanID string, options *SavingsPlanModelsClientGetOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}/savingsPlans/{savingsPlanId}"
	if savingsPlanOrderID == "" {
		return nil, errors.New("parameter savingsPlanOrderID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{savingsPlanOrderId}", url.PathEscape(savingsPlanOrderID))
	if savingsPlanID == "" {
		return nil, errors.New("parameter savingsPlanID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{savingsPlanId}", url.PathEscape(savingsPlanID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Expand != nil {
		reqQP.Set("$expand", *options.Expand)
	}
	reqQP.Set("api-version", "2024-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SavingsPlanModelsClient) getHandleResponse(resp *http.Response) (SavingsPlanModelsClientGetResponse, error) {
	result := SavingsPlanModelsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SavingsPlanModel); err != nil {
		return SavingsPlanModelsClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - List savings plans in an order.
//
// Generated from API version 2024-11-01-preview
//   - savingsPlanOrderID - Order ID of the savings plan
//   - options - SavingsPlanModelsClientListOptions contains the optional parameters for the SavingsPlanModelsClient.NewListPager
//     method.
func (client *SavingsPlanModelsClient) NewListPager(savingsPlanOrderID string, options *SavingsPlanModelsClientListOptions) *runtime.Pager[SavingsPlanModelsClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[SavingsPlanModelsClientListResponse]{
		More: func(page SavingsPlanModelsClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SavingsPlanModelsClientListResponse) (SavingsPlanModelsClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "SavingsPlanModelsClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, savingsPlanOrderID, options)
			}, nil)
			if err != nil {
				return SavingsPlanModelsClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *SavingsPlanModelsClient) listCreateRequest(ctx context.Context, savingsPlanOrderID string, _ *SavingsPlanModelsClientListOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}/savingsPlans"
	if savingsPlanOrderID == "" {
		return nil, errors.New("parameter savingsPlanOrderID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{savingsPlanOrderId}", url.PathEscape(savingsPlanOrderID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *SavingsPlanModelsClient) listHandleResponse(resp *http.Response) (SavingsPlanModelsClientListResponse, error) {
	result := SavingsPlanModelsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SavingsPlanModelList); err != nil {
		return SavingsPlanModelsClientListResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Update savings plan.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-11-01-preview
//   - savingsPlanOrderID - Order ID of the savings plan
//   - savingsPlanID - ID of the savings plan
//   - body - Request body for patching a savings plan order alias
//   - options - SavingsPlanModelsClientBeginUpdateOptions contains the optional parameters for the SavingsPlanModelsClient.BeginUpdate
//     method.
func (client *SavingsPlanModelsClient) BeginUpdate(ctx context.Context, savingsPlanOrderID string, savingsPlanID string, body SavingsPlanUpdateRequest, options *SavingsPlanModelsClientBeginUpdateOptions) (*runtime.Poller[SavingsPlanModelsClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, savingsPlanOrderID, savingsPlanID, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[SavingsPlanModelsClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[SavingsPlanModelsClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Update savings plan.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-11-01-preview
func (client *SavingsPlanModelsClient) update(ctx context.Context, savingsPlanOrderID string, savingsPlanID string, body SavingsPlanUpdateRequest, options *SavingsPlanModelsClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "SavingsPlanModelsClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, savingsPlanOrderID, savingsPlanID, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted, http.StatusNotFound) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *SavingsPlanModelsClient) updateCreateRequest(ctx context.Context, savingsPlanOrderID string, savingsPlanID string, body SavingsPlanUpdateRequest, _ *SavingsPlanModelsClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}/savingsPlans/{savingsPlanId}"
	if savingsPlanOrderID == "" {
		return nil, errors.New("parameter savingsPlanOrderID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{savingsPlanOrderId}", url.PathEscape(savingsPlanOrderID))
	if savingsPlanID == "" {
		return nil, errors.New("parameter savingsPlanID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{savingsPlanId}", url.PathEscape(savingsPlanID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// ValidateUpdate - Validate savings plan patch.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-11-01-preview
//   - savingsPlanOrderID - Order ID of the savings plan
//   - savingsPlanID - ID of the savings plan
//   - body - Request body for validating a savings plan patch request
//   - options - SavingsPlanModelsClientValidateUpdateOptions contains the optional parameters for the SavingsPlanModelsClient.ValidateUpdate
//     method.
func (client *SavingsPlanModelsClient) ValidateUpdate(ctx context.Context, savingsPlanOrderID string, savingsPlanID string, body SavingsPlanUpdateValidateRequest, options *SavingsPlanModelsClientValidateUpdateOptions) (SavingsPlanModelsClientValidateUpdateResponse, error) {
	var err error
	const operationName = "SavingsPlanModelsClient.ValidateUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.validateUpdateCreateRequest(ctx, savingsPlanOrderID, savingsPlanID, body, options)
	if err != nil {
		return SavingsPlanModelsClientValidateUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SavingsPlanModelsClientValidateUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SavingsPlanModelsClientValidateUpdateResponse{}, err
	}
	resp, err := client.validateUpdateHandleResponse(httpResp)
	return resp, err
}

// validateUpdateCreateRequest creates the ValidateUpdate request.
func (client *SavingsPlanModelsClient) validateUpdateCreateRequest(ctx context.Context, savingsPlanOrderID string, savingsPlanID string, body SavingsPlanUpdateValidateRequest, _ *SavingsPlanModelsClientValidateUpdateOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}/savingsPlans/{savingsPlanId}/validate"
	if savingsPlanOrderID == "" {
		return nil, errors.New("parameter savingsPlanOrderID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{savingsPlanOrderId}", url.PathEscape(savingsPlanOrderID))
	if savingsPlanID == "" {
		return nil, errors.New("parameter savingsPlanID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{savingsPlanId}", url.PathEscape(savingsPlanID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// validateUpdateHandleResponse handles the ValidateUpdate response.
func (client *SavingsPlanModelsClient) validateUpdateHandleResponse(resp *http.Response) (SavingsPlanModelsClientValidateUpdateResponse, error) {
	result := SavingsPlanModelsClientValidateUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SavingsPlanValidateResponse); err != nil {
		return SavingsPlanModelsClientValidateUpdateResponse{}, err
	}
	return result, nil
}
