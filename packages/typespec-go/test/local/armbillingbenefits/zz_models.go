// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armbillingbenefits

import "time"

// AppliedScopeProperties - Properties specific to applied scope type. Not required if not applicable.
type AppliedScopeProperties struct {
	// Display name
	DisplayName *string

	// Fully-qualified identifier of the management group where the benefit must be applied.
	ManagementGroupID *string

	// Fully-qualified identifier of the resource group.
	ResourceGroupID *string

	// Fully-qualified identifier of the subscription.
	SubscriptionID *string

	// Tenant ID where the benefit is applied.
	TenantID *string
}

// BillingPlanInformation - Information describing the type of billing plan for this savings plan.
type BillingPlanInformation struct {
	// For recurring billing plans, indicates the date when next payment will be processed. Null when total is paid off.
	NextPaymentDueDate *time.Time

	// Amount of money to be paid for the Order. Tax is not included.
	PricingCurrencyTotal *Price

	// Date when the billing plan has started.
	StartDate    *time.Time
	Transactions []*PaymentDetail
}

// Commitment towards the benefit.
type Commitment struct {
	Amount *float64

	// The ISO 4217 3-letter currency code for the currency used by this purchase record.
	CurrencyCode *string

	// Commitment grain.
	Grain *CommitmentGrain
}

// ConditionsItem - Condition for a discount.
type ConditionsItem struct {
	ConditionName *string
	Type          *string

	// These items are open-ended strings.
	Value []*string
}

// Discount - Resource definition for Discounts.
type Discount struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// Managed service identity (system assigned and/or user assigned identities)
	Identity *ManagedServiceIdentity

	// Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type. E.g. ApiApps are
	// a kind of Microsoft.Web/sites type. If supported, the resource provider must validate and persist this value.
	Kind *string

	// The fully qualified resource ID of the resource that manages this resource. Indicates if this resource is managed by another
	// Azure resource. If this is present, complete mode deployment will not delete the resource if it is removed from the template
	// since it is managed by another resource.
	ManagedBy *string

	// Plan for the resource.
	Plan *Plan

	// Discount properties
	Properties DiscountPropertiesClassification

	// The resource model definition representing SKU
	SKU *SKU

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; The etag field is *not* required. If it is provided in the response body, it must also be provided as a header
	// per the normal etag convention. Entity tags are used for comparing two or more entities from the same requested resource.
	// HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range
	// (section 14.27) header fields.
	Etag *string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// DiscountList - Discount list
type DiscountList struct {
	// REQUIRED; The Discount items on this page
	Value []*Discount

	// The link to the next page of items
	NextLink *string
}

// DiscountPatchRequest - Discounts patch request
type DiscountPatchRequest struct {
	// Discounts patch request properties
	Properties *DiscountPatchRequestProperties

	// Resource tags.
	Tags map[string]*string
}

// DiscountPatchRequestProperties - Discounts patch request properties
type DiscountPatchRequestProperties struct {
	// Display name
	DisplayName *string
}

// DiscountProperties - Properties belonging to discounts.
type DiscountProperties struct {
	// REQUIRED; This defines whether the entity being created is primary or affiliate. Supported values: primary, affiliate.
	// Validation: Required, must match one of the 2 values.
	EntityType *DiscountEntityType

	// REQUIRED; This is the catalog UPN for the product.
	ProductCode *string

	// REQUIRED; Start date of the discount. Value is the date the discount started or will start in the future.
	StartAt *time.Time

	// List of applied scopes supported for discounts.
	AppliedScopeType *DiscountAppliedScopeType

	// This defines a user friendly display name for the discount.
	DisplayName *string

	// This is the globally unique identifier of the Discount which will not change for the lifetime of the Discount.
	SystemID *string

	// READ-ONLY; Fully-qualified identifier of the benefit under applicable benefit list.
	BenefitResourceID *string

	// READ-ONLY; Billing account resource id where the discount metadata is present.
	BillingAccountResourceID *string

	// READ-ONLY; Billing profile resource id where the discount is scoped to.
	BillingProfileResourceID *string

	// READ-ONLY; Customer resource id where the discount is scoped to.
	CustomerResourceID *string

	// READ-ONLY; The state of the resource. Supported values are Pending, Failed, Succeeded, Canceled.
	ProvisioningState *DiscountProvisioningState

	// READ-ONLY; Represents the current status of the discount.
	Status *DiscountStatus
}

// GetDiscountProperties implements the DiscountPropertiesClassification interface for type DiscountProperties.
func (d *DiscountProperties) GetDiscountProperties() *DiscountProperties { return d }

// DiscountTypeProperties - This defines the conditions for a given discount type.
type DiscountTypeProperties struct {
	// REQUIRED; The customer action on which the discount is applied. Supported values are Purchase, Consume, and Renew. Validation:
	// Required, one of supported values.
	ApplyDiscountOn *ApplyDiscountOn

	// REQUIRED; Defines the type of discount. Supported values are ProductFamily, Product, Sku, CustomPrice, and CustomPriceMultiCurrency.
	DiscountType *DiscountType

	// Array of conditions for the discount. Validation: Optional. Maximum length is 1000.
	Conditions []*ConditionsItem

	// The discount combination rule when there are multiple applicable custom prices. Validation: Required. Supported values
	// are Stackable and BestOf.
	DiscountCombinationRule *DiscountCombinationRule

	// Discount percentage provided for the customer. Validation: Required unless this is a price rule.
	DiscountPercentage *float64

	// Set only in price guarantee scenario.
	PriceGuaranteeProperties *PriceGuaranteeProperties
}

// GetDiscountTypeProperties implements the DiscountTypePropertiesClassification interface for type DiscountTypeProperties.
func (d *DiscountTypeProperties) GetDiscountTypeProperties() *DiscountTypeProperties { return d }

// EntityTypeAffiliateDiscount - Entity type for affiliate discounts
type EntityTypeAffiliateDiscount struct {
	// CONSTANT; This defines whether the entity being created is primary or affiliate. Supported values: primary, affiliate.
	// Validation: Required, must match one of the 2 values.
	// Field has constant value DiscountEntityTypeAffiliate, any specified value is ignored.
	EntityType *DiscountEntityType

	// REQUIRED; This is the catalog UPN for the product.
	ProductCode *string

	// REQUIRED; Start date of the discount. Value is the date the discount started or will start in the future.
	StartAt *time.Time

	// List of applied scopes supported for discounts.
	AppliedScopeType *DiscountAppliedScopeType

	// This defines a user friendly display name for the discount.
	DisplayName *string

	// This is the globally unique identifier of the Discount which will not change for the lifetime of the Discount.
	SystemID *string

	// READ-ONLY; Fully-qualified identifier of the benefit under applicable benefit list.
	BenefitResourceID *string

	// READ-ONLY; Billing account resource id where the discount metadata is present.
	BillingAccountResourceID *string

	// READ-ONLY; Billing profile resource id where the discount is scoped to.
	BillingProfileResourceID *string

	// READ-ONLY; Customer resource id where the discount is scoped to.
	CustomerResourceID *string

	// READ-ONLY; End date of the discount. No duration will be supported. Allowed value is any date greater than or equal to
	// startDate.
	EndAt *time.Time

	// READ-ONLY; This will be present in the response if the primary has a resource ID
	PrimaryResourceID *string

	// READ-ONLY; The state of the resource. Supported values are Pending, Failed, Succeeded, Canceled.
	ProvisioningState *DiscountProvisioningState

	// READ-ONLY; Represents the current status of the discount.
	Status *DiscountStatus
}

// GetDiscountProperties implements the DiscountPropertiesClassification interface for type EntityTypeAffiliateDiscount.
func (e *EntityTypeAffiliateDiscount) GetDiscountProperties() *DiscountProperties {
	return &DiscountProperties{
		AppliedScopeType:         e.AppliedScopeType,
		BenefitResourceID:        e.BenefitResourceID,
		BillingAccountResourceID: e.BillingAccountResourceID,
		BillingProfileResourceID: e.BillingProfileResourceID,
		CustomerResourceID:       e.CustomerResourceID,
		DisplayName:              e.DisplayName,
		EntityType:               e.EntityType,
		ProductCode:              e.ProductCode,
		ProvisioningState:        e.ProvisioningState,
		StartAt:                  e.StartAt,
		Status:                   e.Status,
		SystemID:                 e.SystemID,
	}
}

// EntityTypePrimaryDiscount - Entity type for primary discounts
type EntityTypePrimaryDiscount struct {
	// REQUIRED; End date of the discount. No duration will be supported. Allowed value is any date greater than or equal to startDate.
	EndAt *time.Time

	// CONSTANT; This defines whether the entity being created is primary or affiliate. Supported values: primary, affiliate.
	// Validation: Required, must match one of the 2 values.
	// Field has constant value DiscountEntityTypePrimary, any specified value is ignored.
	EntityType *DiscountEntityType

	// REQUIRED; This is the catalog UPN for the product.
	ProductCode *string

	// REQUIRED; Start date of the discount. Value is the date the discount started or will start in the future.
	StartAt *time.Time

	// List of applied scopes supported for discounts.
	AppliedScopeType *DiscountAppliedScopeType

	// This defines the conditions for a given discount type.
	DiscountTypeProperties DiscountTypePropertiesClassification

	// This defines a user friendly display name for the discount.
	DisplayName *string

	// This is the globally unique identifier of the Discount which will not change for the lifetime of the Discount.
	SystemID *string

	// READ-ONLY; Fully-qualified identifier of the benefit under applicable benefit list.
	BenefitResourceID *string

	// READ-ONLY; Billing account resource id where the discount metadata is present.
	BillingAccountResourceID *string

	// READ-ONLY; Billing profile resource id where the discount is scoped to.
	BillingProfileResourceID *string

	// READ-ONLY; Customer resource id where the discount is scoped to.
	CustomerResourceID *string

	// READ-ONLY; The state of the resource. Supported values are Pending, Failed, Succeeded, Canceled.
	ProvisioningState *DiscountProvisioningState

	// READ-ONLY; Represents the current status of the discount.
	Status *DiscountStatus
}

// GetDiscountProperties implements the DiscountPropertiesClassification interface for type EntityTypePrimaryDiscount.
func (e *EntityTypePrimaryDiscount) GetDiscountProperties() *DiscountProperties {
	return &DiscountProperties{
		AppliedScopeType:         e.AppliedScopeType,
		BenefitResourceID:        e.BenefitResourceID,
		BillingAccountResourceID: e.BillingAccountResourceID,
		BillingProfileResourceID: e.BillingProfileResourceID,
		CustomerResourceID:       e.CustomerResourceID,
		DisplayName:              e.DisplayName,
		EntityType:               e.EntityType,
		ProductCode:              e.ProductCode,
		ProvisioningState:        e.ProvisioningState,
		StartAt:                  e.StartAt,
		Status:                   e.Status,
		SystemID:                 e.SystemID,
	}
}

type ExtendedStatusInfo struct {
	// The message giving detailed information about the status code.
	Message *string

	// Status code providing additional information.
	StatusCode *string
}

// ManagedServiceIdentity - Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity struct {
	// REQUIRED; Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type *ManagedServiceIdentityType

	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
	// resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
	// The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities map[string]*UserAssignedIdentity

	// READ-ONLY; The service principal ID of the system assigned identity. This property will only be provided for a system assigned
	// identity.
	PrincipalID *string

	// READ-ONLY; The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantID *string
}

// Operation - REST API Operation
//
// Details of a REST API operation, returned from the Resource Provider Operations API
type Operation struct {
	// Localized display information for this particular operation.
	Display *OperationDisplay

	// READ-ONLY; Extensible enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
	ActionType *ActionType

	// READ-ONLY; Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for Azure
	// Resource Manager/control-plane operations.
	IsDataAction *bool

	// READ-ONLY; The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write",
	// "Microsoft.Compute/virtualMachines/capture/action"
	Name *string

	// READ-ONLY; The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
	// value is "user,system"
	Origin *Origin
}

// OperationDisplay - Localized display information for and operation.
type OperationDisplay struct {
	// READ-ONLY; The short, localized friendly description of the operation; suitable for tool tips and detailed views.
	Description *string

	// READ-ONLY; The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual
	// Machine", "Restart Virtual Machine".
	Operation *string

	// READ-ONLY; The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft
	// Compute".
	Provider *string

	// READ-ONLY; The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job
	// Schedule Collections".
	Resource *string
}

// OperationListResult - A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to
// get the next set of results.
type OperationListResult struct {
	// REQUIRED; The Operation items on this page
	Value []*Operation

	// The link to the next page of items
	NextLink *string
}

// PaymentDetail - Information about payment related to a savings plan order.
type PaymentDetail struct {
	// Billing account
	BillingAccount *string

	// Amount charged in Billing currency. Tax not included. Is null for future payments
	BillingCurrencyTotal *Price

	// Date when the payment needs to be done.
	DueDate *time.Time

	// Date when the transaction is completed. Is null when it is scheduled.
	PaymentDate *time.Time

	// Amount in pricing currency. Tax not included.
	PricingCurrencyTotal *Price

	// Describes whether the payment is completed, failed, cancelled or scheduled in the future.
	Status *PaymentStatus

	// READ-ONLY
	ExtendedStatusInfo *ExtendedStatusInfo
}

// Plan for the resource.
type Plan struct {
	// REQUIRED; A user defined name of the 3rd Party Artifact that is being procured.
	Name *string

	// REQUIRED; The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact
	// at the time of Data Market onboarding.
	Product *string

	// REQUIRED; The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
	Publisher *string

	// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
	PromotionCode *string

	// The version of the desired product/artifact.
	Version *string
}

type Price struct {
	Amount *float64

	// The ISO 4217 3-letter currency code for the currency used by this purchase record.
	CurrencyCode *string
}

// PriceGuaranteeProperties - Set only in price guarantee scenario.
type PriceGuaranteeProperties struct {
	// The date on which prices are to be used for guarantee calculation. Validation: expected to be 00 hours, Format: 2024-09-30T00:00:00Z.
	// Must be in UTC.
	PriceGuaranteeDate *time.Time

	// Supported values: Protected, Locked
	PricingPolicy *PricingPolicy
}

// ProductDiscountTypeProperties - Discount type properties including product family name and product id.
type ProductDiscountTypeProperties struct {
	// REQUIRED; The customer action on which the discount is applied. Supported values are Purchase, Consume, and Renew. Validation:
	// Required, one of supported values.
	ApplyDiscountOn *ApplyDiscountOn

	// CONSTANT; Defines the type of discount. Supported values are ProductFamily, Product, Sku, CustomPrice, and CustomPriceMultiCurrency.
	// Field has constant value DiscountTypeProduct, any specified value is ignored.
	DiscountType *DiscountType

	// Array of conditions for the discount. Validation: Optional. Maximum length is 1000.
	Conditions []*ConditionsItem

	// The discount combination rule when there are multiple applicable custom prices. Validation: Required. Supported values
	// are Stackable and BestOf.
	DiscountCombinationRule *DiscountCombinationRule

	// Discount percentage provided for the customer. Validation: Required unless this is a price rule.
	DiscountPercentage *float64

	// Set only in price guarantee scenario.
	PriceGuaranteeProperties *PriceGuaranteeProperties

	// Product family for which the discount is given. Validation: Optional
	ProductFamilyName *string

	// Product ID for which the discount is given. Validation: Optional. No specific format, example: DZH318Z09V6F
	ProductID *string
}

// GetDiscountTypeProperties implements the DiscountTypePropertiesClassification interface for type ProductDiscountTypeProperties.
func (p *ProductDiscountTypeProperties) GetDiscountTypeProperties() *DiscountTypeProperties {
	return &DiscountTypeProperties{
		ApplyDiscountOn:          p.ApplyDiscountOn,
		Conditions:               p.Conditions,
		DiscountCombinationRule:  p.DiscountCombinationRule,
		DiscountPercentage:       p.DiscountPercentage,
		DiscountType:             p.DiscountType,
		PriceGuaranteeProperties: p.PriceGuaranteeProperties,
	}
}

// ProductFamilyDiscountTypeProperties - Discount type properties including product family name
type ProductFamilyDiscountTypeProperties struct {
	// REQUIRED; The customer action on which the discount is applied. Supported values are Purchase, Consume, and Renew. Validation:
	// Required, one of supported values.
	ApplyDiscountOn *ApplyDiscountOn

	// CONSTANT; Defines the type of discount. Supported values are ProductFamily, Product, Sku, CustomPrice, and CustomPriceMultiCurrency.
	// Field has constant value DiscountTypeProductFamily, any specified value is ignored.
	DiscountType *DiscountType

	// Array of conditions for the discount. Validation: Optional. Maximum length is 1000.
	Conditions []*ConditionsItem

	// The discount combination rule when there are multiple applicable custom prices. Validation: Required. Supported values
	// are Stackable and BestOf.
	DiscountCombinationRule *DiscountCombinationRule

	// Discount percentage provided for the customer. Validation: Required unless this is a price rule.
	DiscountPercentage *float64

	// Set only in price guarantee scenario.
	PriceGuaranteeProperties *PriceGuaranteeProperties

	// Product family for which the discount is given. Validation: Optional
	ProductFamilyName *string
}

// GetDiscountTypeProperties implements the DiscountTypePropertiesClassification interface for type ProductFamilyDiscountTypeProperties.
func (p *ProductFamilyDiscountTypeProperties) GetDiscountTypeProperties() *DiscountTypeProperties {
	return &DiscountTypeProperties{
		ApplyDiscountOn:          p.ApplyDiscountOn,
		Conditions:               p.Conditions,
		DiscountCombinationRule:  p.DiscountCombinationRule,
		DiscountPercentage:       p.DiscountPercentage,
		DiscountType:             p.DiscountType,
		PriceGuaranteeProperties: p.PriceGuaranteeProperties,
	}
}

// ProductSKUDiscountTypeProperties - Discount type properties including product family name, product id, and sku id.
type ProductSKUDiscountTypeProperties struct {
	// REQUIRED; The customer action on which the discount is applied. Supported values are Purchase, Consume, and Renew. Validation:
	// Required, one of supported values.
	ApplyDiscountOn *ApplyDiscountOn

	// CONSTANT; Defines the type of discount. Supported values are ProductFamily, Product, Sku, CustomPrice, and CustomPriceMultiCurrency.
	// Field has constant value DiscountTypeSKU, any specified value is ignored.
	DiscountType *DiscountType

	// Array of conditions for the discount. Validation: Optional. Maximum length is 1000.
	Conditions []*ConditionsItem

	// The discount combination rule when there are multiple applicable custom prices. Validation: Required. Supported values
	// are Stackable and BestOf.
	DiscountCombinationRule *DiscountCombinationRule

	// Discount percentage provided for the customer. Validation: Required unless this is a price rule.
	DiscountPercentage *float64

	// Set only in price guarantee scenario.
	PriceGuaranteeProperties *PriceGuaranteeProperties

	// Product family for which the discount is given. Validation: Optional
	ProductFamilyName *string

	// Product ID for which the discount is given. Validation: Optional. No specific format, example: DZH318Z09V6F
	ProductID *string

	// ResourceSku for the given discount. Validation: Optional.
	SKUID *string
}

// GetDiscountTypeProperties implements the DiscountTypePropertiesClassification interface for type ProductSKUDiscountTypeProperties.
func (p *ProductSKUDiscountTypeProperties) GetDiscountTypeProperties() *DiscountTypeProperties {
	return &DiscountTypeProperties{
		ApplyDiscountOn:          p.ApplyDiscountOn,
		Conditions:               p.Conditions,
		DiscountCombinationRule:  p.DiscountCombinationRule,
		DiscountPercentage:       p.DiscountPercentage,
		DiscountType:             p.DiscountType,
		PriceGuaranteeProperties: p.PriceGuaranteeProperties,
	}
}

type PurchaseRequest struct {
	Properties *PurchaseRequestProperties

	// The SKU to be applied for this resource
	SKU *ResourceSKU
}

type PurchaseRequestProperties struct {
	// Properties specific to applied scope type. Not required if not applicable.
	AppliedScopeProperties *AppliedScopeProperties

	// Type of the Applied Scope.
	AppliedScopeType *AppliedScopeType

	// Represents the billing plan in ISO 8601 format. Required only for monthly billing plans.
	BillingPlan *BillingPlan

	// Subscription that will be charged for purchasing the benefit
	BillingScopeID *string

	// Commitment towards the benefit.
	Commitment *Commitment

	// Friendly name of the savings plan
	DisplayName *string

	// Setting this to true will automatically purchase a new benefit on the expiration date time.
	Renew *bool

	// Represent benefit term in ISO 8601 format.
	Term *Term

	// READ-ONLY; DateTime of the savings plan starts providing benefit from.
	EffectiveDateTime *time.Time
}

type RenewProperties struct {
	PurchaseProperties *PurchaseRequest
}

// ReservationOrderAliasRequest - Reservation order alias
type ReservationOrderAliasRequest struct {
	// REQUIRED; Reservation order SKU
	SKU *ResourceSKU

	// The Azure Region where the reservation benefits are applied to.
	Location *string

	// Reservation order alias request properties
	Properties *ReservationOrderAliasRequestProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ReservationOrderAliasRequestProperties - Reservation properties
type ReservationOrderAliasRequestProperties struct {
	// Properties specific to applied scope type. Not required if not applicable.
	AppliedScopeProperties *AppliedScopeProperties

	// Type of the Applied Scope.
	AppliedScopeType *AppliedScopeType

	// Represents the billing plan in ISO 8601 format. Required only for monthly billing plans.
	BillingPlan *BillingPlan

	// Subscription that will be charged for purchasing the benefit
	BillingScopeID *string

	// Display name
	DisplayName *string

	// Total Quantity of the SKUs purchased in the Reservation.
	Quantity *int32

	// Setting this to true will automatically purchase a new benefit on the expiration date time.
	Renew *bool

	// Properties specific to each reserved resource type. Not required if not applicable.
	ReservedResourceProperties *ReservationOrderAliasRequestPropertiesReservedResourceProperties

	// The type of the resource that is being reserved.
	ReservedResourceType *ReservedResourceType

	// This is the date-time when the Azure Hybrid Benefit needs to be reviewed.
	ReviewDateTime *time.Time

	// Represent benefit term in ISO 8601 format.
	Term *Term
}

// ReservationOrderAliasRequestPropertiesReservedResourceProperties - Properties specific to each reserved resource type.
// Not required if not applicable.
type ReservationOrderAliasRequestPropertiesReservedResourceProperties struct {
	// Turning this on will apply the reservation discount to other VMs in the same VM size group.
	InstanceFlexibility *InstanceFlexibility
}

// ReservationOrderAliasResponse - Reservation order alias
type ReservationOrderAliasResponse struct {
	// REQUIRED; Reservation order SKU
	SKU *ResourceSKU

	// The Azure Region where the reserved resource lives.
	Location *string

	// Reservation order alias response properties
	Properties *ReservationOrderAliasResponseProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ReservationOrderAliasResponseProperties - Reservation properties
type ReservationOrderAliasResponseProperties struct {
	// Properties specific to applied scope type. Not required if not applicable.
	AppliedScopeProperties *AppliedScopeProperties

	// Type of the Applied Scope.
	AppliedScopeType *AppliedScopeType

	// Represents the billing plan in ISO 8601 format. Required only for monthly billing plans.
	BillingPlan *BillingPlan

	// Subscription that will be charged for purchasing the benefit
	BillingScopeID *string

	// Display name
	DisplayName *string

	// Total Quantity of the SKUs purchased in the Reservation.
	Quantity *int32

	// Setting this to true will automatically purchase a new benefit on the expiration date time.
	Renew *bool

	// Properties specific to each reserved resource type. Not required if not applicable.
	ReservedResourceProperties *ReservationOrderAliasResponsePropertiesReservedResourceProperties

	// The type of the resource that is being reserved.
	ReservedResourceType *ReservedResourceType

	// This is the date-time when the Reservation needs to be reviewed.
	ReviewDateTime *time.Time

	// Represent benefit term in ISO 8601 format.
	Term *Term

	// READ-ONLY; Provisioning state
	ProvisioningState *ProvisioningState

	// READ-ONLY; Identifier of the reservation order created
	ReservationOrderID *string
}

// ReservationOrderAliasResponsePropertiesReservedResourceProperties - Properties specific to each reserved resource type.
// Not required if not applicable.
type ReservationOrderAliasResponsePropertiesReservedResourceProperties struct {
	// Turning this on will apply the reservation discount to other VMs in the same VM size group.
	InstanceFlexibility *InstanceFlexibility
}

type ResourceSKU struct {
	Name *string
}

// RoleAssignmentEntity - Role assignment entity
type RoleAssignmentEntity struct {
	// Role assignment entity id
	ID *string

	// Role assignment entity name
	Name *string

	// Role assignment entity properties
	Properties *RoleAssignmentEntityProperties
}

// RoleAssignmentEntityProperties - Role assignment entity properties
type RoleAssignmentEntityProperties struct {
	// Principal Id
	PrincipalID *string

	// Role definition id
	RoleDefinitionID *string

	// Scope of the role assignment entity
	Scope *string
}

// SKU - The resource model definition representing SKU
type SKU struct {
	// REQUIRED; The name of the SKU. E.g. P3. It is typically a letter+number code
	Name *string

	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the
	// resource this may be omitted.
	Capacity *int32

	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string

	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size *string

	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required
	// on a PUT.
	Tier *SKUTier
}

// SavingsPlanModel - Savings plan
type SavingsPlanModel struct {
	// REQUIRED; Savings plan SKU
	SKU *ResourceSKU

	// Savings plan properties
	Properties *SavingsPlanModelProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// SavingsPlanModelList - Paged collection of SavingsPlanModel items
type SavingsPlanModelList struct {
	// REQUIRED; The SavingsPlanModel items on this page
	Value []*SavingsPlanModel

	// The link to the next page of items
	NextLink *string
}

// SavingsPlanModelListResult - Represents the result of listing savings plan models
type SavingsPlanModelListResult struct {
	// READ-ONLY; The roll out count summary of the savings plans
	AdditionalProperties []*SavingsPlanSummary

	// READ-ONLY; Url to get the next page.
	NextLink *string

	// READ-ONLY; The list of savings plans.
	Value []*SavingsPlanModel
}

// SavingsPlanModelProperties - Savings plan properties
type SavingsPlanModelProperties struct {
	// Properties specific to applied scope type. Not required if not applicable.
	AppliedScopeProperties *AppliedScopeProperties

	// Type of the Applied Scope.
	AppliedScopeType *AppliedScopeType

	// This is the DateTime when the savings plan benefit started.
	BenefitStartTime *time.Time

	// Represents the billing plan in ISO 8601 format. Required only for monthly billing plans.
	BillingPlan *BillingPlan

	// Subscription that will be charged for purchasing the benefit
	BillingScopeID *string

	// Commitment towards the benefit.
	Commitment *Commitment

	// Display name
	DisplayName *string

	// Setting this to true will automatically purchase a new benefit on the expiration date time.
	Renew *bool

	// SavingsPlan Id of the SavingsPlan which is purchased because of renew.
	RenewDestination *string
	RenewProperties  *RenewProperties

	// SavingsPlan Id of the SavingsPlan from which this SavingsPlan is renewed.
	RenewSource *string

	// Represent benefit term in ISO 8601 format.
	Term *Term

	// READ-ONLY; Fully-qualified identifier of the billing account where the savings plan is applied. Present only for Enterprise
	// Agreement customers.
	BillingAccountID *string

	// READ-ONLY; Fully-qualified identifier of the billing profile where the savings plan is applied. Present only for Field-led
	// or Customer-led customers.
	BillingProfileID *string

	// READ-ONLY; Fully-qualified identifier of the customer where the savings plan is applied. Present only for Partner-led customers.
	CustomerID *string

	// READ-ONLY; The provisioning state of the savings plan for display, e.g. Succeeded
	DisplayProvisioningState *string

	// READ-ONLY; DateTime of the savings plan starts providing benefit from.
	EffectiveDateTime *time.Time

	// READ-ONLY; Expiry date time
	ExpiryDateTime *time.Time

	// READ-ONLY
	ExtendedStatusInfo *ExtendedStatusInfo

	// READ-ONLY; Provisioning state
	ProvisioningState *ProvisioningState

	// READ-ONLY; Date time when the savings plan was purchased
	PurchaseDateTime *time.Time

	// READ-ONLY; The applied scope type of the savings plan for display, e.g. Shared
	UserFriendlyAppliedScopeType *string

	// READ-ONLY; Savings plan utilization
	Utilization *Utilization
}

// SavingsPlanOrderAliasModel - Savings plan order alias
type SavingsPlanOrderAliasModel struct {
	// REQUIRED; Savings plan SKU
	SKU *ResourceSKU

	// Resource provider kind
	Kind *string

	// Savings plan order alias properties
	Properties *SavingsPlanOrderAliasProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// SavingsPlanOrderAliasProperties - Savings plan properties
type SavingsPlanOrderAliasProperties struct {
	// Properties specific to applied scope type. Not required if not applicable.
	AppliedScopeProperties *AppliedScopeProperties

	// Type of the Applied Scope.
	AppliedScopeType *AppliedScopeType

	// Represents the billing plan in ISO 8601 format. Required only for monthly billing plans.
	BillingPlan *BillingPlan

	// Subscription that will be charged for purchasing the benefit
	BillingScopeID *string

	// Commitment towards the benefit.
	Commitment *Commitment

	// Display name
	DisplayName *string

	// Setting this to true will automatically purchase a new benefit on the expiration date time.
	Renew *bool

	// Represent benefit term in ISO 8601 format.
	Term *Term

	// READ-ONLY; Provisioning state
	ProvisioningState *ProvisioningState

	// READ-ONLY; Identifier of the savings plan created
	SavingsPlanOrderID *string
}

// SavingsPlanOrderModel - Savings plan order
type SavingsPlanOrderModel struct {
	// REQUIRED; Savings plan SKU
	SKU *ResourceSKU

	// Savings plan order properties
	Properties *SavingsPlanOrderModelProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// SavingsPlanOrderModelList - Paged collection of SavingsPlanOrderModel items
type SavingsPlanOrderModelList struct {
	// REQUIRED; The SavingsPlanOrderModel items on this page
	Value []*SavingsPlanOrderModel

	// The link to the next page of items
	NextLink *string
}

// SavingsPlanOrderModelProperties - Savings plan order properties
type SavingsPlanOrderModelProperties struct {
	// This is the DateTime when the savings plan benefit started.
	BenefitStartTime *time.Time

	// Represents the billing plan in ISO 8601 format. Required only for monthly billing plans.
	BillingPlan *BillingPlan

	// Subscription that will be charged for purchasing the benefit
	BillingScopeID *string

	// Display name
	DisplayName *string

	// Information describing the type of billing plan for this savings plan.
	PlanInformation *BillingPlanInformation
	SavingsPlans    []*string

	// Represent benefit term in ISO 8601 format.
	Term *Term

	// READ-ONLY; Fully-qualified identifier of the billing account where the savings plan is applied. Present only for Enterprise
	// Agreement customers.
	BillingAccountID *string

	// READ-ONLY; Fully-qualified identifier of the billing profile where the savings plan is applied. Present only for Field-led
	// or Customer-led customers.
	BillingProfileID *string

	// READ-ONLY; Fully-qualified identifier of the customer where the savings plan is applied. Present only for Partner-led customers.
	CustomerID *string

	// READ-ONLY; Expiry date time
	ExpiryDateTime *time.Time

	// READ-ONLY
	ExtendedStatusInfo *ExtendedStatusInfo

	// READ-ONLY; Provisioning state
	ProvisioningState *ProvisioningState
}

type SavingsPlanPurchaseValidateRequest struct {
	Benefits []*SavingsPlanOrderAliasModel
}

// SavingsPlanSummary - Savings plans list summary
type SavingsPlanSummary struct {
	// The roll up count summary of savings plans in each state
	Value *SavingsPlanSummaryCount

	// READ-ONLY; This property has value 'summary'
	Name *string
}

// SavingsPlanSummaryCount - The roll up count summary of savings plans in each state
type SavingsPlanSummaryCount struct {
	// READ-ONLY; The number of savings plans in Cancelled state
	CancelledCount *float32

	// READ-ONLY; The number of savings plans in Expired state
	ExpiredCount *float32

	// READ-ONLY; The number of savings plans in Expiring state
	ExpiringCount *float32

	// READ-ONLY; The number of savings plans in Failed state
	FailedCount *float32

	// READ-ONLY; The number of savings plans in No Benefit state
	NoBenefitCount *float32

	// READ-ONLY; The number of savings plans in Pending state
	PendingCount *float32

	// READ-ONLY; The number of savings plans in Processing state
	ProcessingCount *float32

	// READ-ONLY; The number of savings plans in Succeeded state
	SucceededCount *float32

	// READ-ONLY; The number of savings plans in Warning state
	WarningCount *float32
}

// SavingsPlanUpdateRequest - Savings plan patch request
type SavingsPlanUpdateRequest struct {
	// Savings plan patch request
	Properties *SavingsPlanUpdateRequestProperties
}

// SavingsPlanUpdateRequestProperties - Savings plan patch request
type SavingsPlanUpdateRequestProperties struct {
	// Properties specific to applied scope type. Not required if not applicable.
	AppliedScopeProperties *AppliedScopeProperties

	// Type of the Applied Scope.
	AppliedScopeType *AppliedScopeType

	// Display name
	DisplayName *string

	// Setting this to true will automatically purchase a new benefit on the expiration date time.
	Renew           *bool
	RenewProperties *RenewProperties
}

type SavingsPlanUpdateValidateRequest struct {
	Benefits []*SavingsPlanUpdateRequestProperties
}

// SavingsPlanValidResponseProperty - Benefit scope response property
type SavingsPlanValidResponseProperty struct {
	// Failure reason if the provided input was invalid
	Reason *string

	// Failure reason code if the provided input was invalid
	ReasonCode *string

	// Indicates if the provided input was valid
	Valid *bool
}

type SavingsPlanValidateResponse struct {
	Benefits []*SavingsPlanValidResponseProperty

	// Url to get the next page.
	NextLink *string
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time

	// The identity that created the resource.
	CreatedBy *string

	// The type of identity that created the resource.
	CreatedByType *CreatedByType

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time

	// The identity that last modified the resource.
	LastModifiedBy *string

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType
}

// UserAssignedIdentity - User assigned identity properties
type UserAssignedIdentity struct {
	// READ-ONLY; The client ID of the assigned identity.
	ClientID *string

	// READ-ONLY; The principal ID of the assigned identity.
	PrincipalID *string
}

// Utilization - Savings plan utilization
type Utilization struct {
	// The array of aggregates of a savings plan's utilization
	Aggregates []*UtilizationAggregates

	// READ-ONLY; The number of days trend for a savings plan
	Trend *string
}

// UtilizationAggregates - The aggregate values of savings plan utilization
type UtilizationAggregates struct {
	// READ-ONLY; The grain of the aggregate
	Grain *float32

	// READ-ONLY; The grain unit of the aggregate
	GrainUnit *string

	// READ-ONLY; The aggregate value
	Value *float32

	// READ-ONLY; The aggregate value unit
	ValueUnit *string
}
