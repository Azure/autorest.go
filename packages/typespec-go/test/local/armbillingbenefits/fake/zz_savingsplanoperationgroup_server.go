// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"armbillingbenefits"
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strconv"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
)

// SavingsPlanOperationGroupServer is a fake server for instances of the armbillingbenefits.SavingsPlanOperationGroupClient type.
type SavingsPlanOperationGroupServer struct {
	// NewListAllPager is the fake for method SavingsPlanOperationGroupClient.NewListAllPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListAllPager func(options *armbillingbenefits.SavingsPlanOperationGroupClientListAllOptions) (resp azfake.PagerResponder[armbillingbenefits.SavingsPlanOperationGroupClientListAllResponse])

	// ValidatePurchase is the fake for method SavingsPlanOperationGroupClient.ValidatePurchase
	// HTTP status codes to indicate success: http.StatusOK
	ValidatePurchase func(ctx context.Context, body armbillingbenefits.SavingsPlanPurchaseValidateRequest, options *armbillingbenefits.SavingsPlanOperationGroupClientValidatePurchaseOptions) (resp azfake.Responder[armbillingbenefits.SavingsPlanOperationGroupClientValidatePurchaseResponse], errResp azfake.ErrorResponder)
}

// NewSavingsPlanOperationGroupServerTransport creates a new instance of SavingsPlanOperationGroupServerTransport with the provided implementation.
// The returned SavingsPlanOperationGroupServerTransport instance is connected to an instance of armbillingbenefits.SavingsPlanOperationGroupClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSavingsPlanOperationGroupServerTransport(srv *SavingsPlanOperationGroupServer) *SavingsPlanOperationGroupServerTransport {
	return &SavingsPlanOperationGroupServerTransport{
		srv:             srv,
		newListAllPager: newTracker[azfake.PagerResponder[armbillingbenefits.SavingsPlanOperationGroupClientListAllResponse]](),
	}
}

// SavingsPlanOperationGroupServerTransport connects instances of armbillingbenefits.SavingsPlanOperationGroupClient to instances of SavingsPlanOperationGroupServer.
// Don't use this type directly, use NewSavingsPlanOperationGroupServerTransport instead.
type SavingsPlanOperationGroupServerTransport struct {
	srv             *SavingsPlanOperationGroupServer
	newListAllPager *tracker[azfake.PagerResponder[armbillingbenefits.SavingsPlanOperationGroupClientListAllResponse]]
}

// Do implements the policy.Transporter interface for SavingsPlanOperationGroupServerTransport.
func (s *SavingsPlanOperationGroupServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToMethodFake(req, method)
}

func (s *SavingsPlanOperationGroupServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if savingsPlanOperationGroupServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = savingsPlanOperationGroupServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "SavingsPlanOperationGroupClient.NewListAllPager":
				res.resp, res.err = s.dispatchNewListAllPager(req)
			case "SavingsPlanOperationGroupClient.ValidatePurchase":
				res.resp, res.err = s.dispatchValidatePurchase(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (s *SavingsPlanOperationGroupServerTransport) dispatchNewListAllPager(req *http.Request) (*http.Response, error) {
	if s.srv.NewListAllPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListAllPager not implemented")}
	}
	newListAllPager := s.newListAllPager.get(req)
	if newListAllPager == nil {
		qp := req.URL.Query()
		filterUnescaped, err := url.QueryUnescape(qp.Get("$filter"))
		if err != nil {
			return nil, err
		}
		filterParam := getOptional(filterUnescaped)
		orderbyUnescaped, err := url.QueryUnescape(qp.Get("$orderby"))
		if err != nil {
			return nil, err
		}
		orderbyParam := getOptional(orderbyUnescaped)
		refreshSummaryUnescaped, err := url.QueryUnescape(qp.Get("refreshSummary"))
		if err != nil {
			return nil, err
		}
		refreshSummaryParam := getOptional(refreshSummaryUnescaped)
		skiptokenUnescaped, err := url.QueryUnescape(qp.Get("$skiptoken"))
		if err != nil {
			return nil, err
		}
		skiptokenParam, err := parseOptional(skiptokenUnescaped, func(v string) (float32, error) {
			p, parseErr := strconv.ParseFloat(v, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return float32(p), nil
		})
		if err != nil {
			return nil, err
		}
		selectedStateUnescaped, err := url.QueryUnescape(qp.Get("selectedState"))
		if err != nil {
			return nil, err
		}
		selectedStateParam := getOptional(selectedStateUnescaped)
		takeUnescaped, err := url.QueryUnescape(qp.Get("take"))
		if err != nil {
			return nil, err
		}
		takeParam, err := parseOptional(takeUnescaped, func(v string) (float32, error) {
			p, parseErr := strconv.ParseFloat(v, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return float32(p), nil
		})
		if err != nil {
			return nil, err
		}
		var options *armbillingbenefits.SavingsPlanOperationGroupClientListAllOptions
		if filterParam != nil || orderbyParam != nil || refreshSummaryParam != nil || skiptokenParam != nil || selectedStateParam != nil || takeParam != nil {
			options = &armbillingbenefits.SavingsPlanOperationGroupClientListAllOptions{
				Filter:         filterParam,
				Orderby:        orderbyParam,
				RefreshSummary: refreshSummaryParam,
				Skiptoken:      skiptokenParam,
				SelectedState:  selectedStateParam,
				Take:           takeParam,
			}
		}
		resp := s.srv.NewListAllPager(options)
		newListAllPager = &resp
		s.newListAllPager.add(req, newListAllPager)
		server.PagerResponderInjectNextLinks(newListAllPager, req, func(page *armbillingbenefits.SavingsPlanOperationGroupClientListAllResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListAllPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		s.newListAllPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListAllPager) {
		s.newListAllPager.remove(req)
	}
	return resp, nil
}

func (s *SavingsPlanOperationGroupServerTransport) dispatchValidatePurchase(req *http.Request) (*http.Response, error) {
	if s.srv.ValidatePurchase == nil {
		return nil, &nonRetriableError{errors.New("fake for method ValidatePurchase not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[armbillingbenefits.SavingsPlanPurchaseValidateRequest](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.ValidatePurchase(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SavingsPlanValidateResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to SavingsPlanOperationGroupServerTransport
var savingsPlanOperationGroupServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
