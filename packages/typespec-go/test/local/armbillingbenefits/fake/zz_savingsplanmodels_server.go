// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"armbillingbenefits"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
	"net/url"
	"regexp"
)

// SavingsPlanModelsServer is a fake server for instances of the armbillingbenefits.SavingsPlanModelsClient type.
type SavingsPlanModelsServer struct {
	// Get is the fake for method SavingsPlanModelsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, savingsPlanOrderID string, savingsPlanID string, options *armbillingbenefits.SavingsPlanModelsClientGetOptions) (resp azfake.Responder[armbillingbenefits.SavingsPlanModelsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method SavingsPlanModelsClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(savingsPlanOrderID string, options *armbillingbenefits.SavingsPlanModelsClientListOptions) (resp azfake.PagerResponder[armbillingbenefits.SavingsPlanModelsClientListResponse])

	// BeginUpdate is the fake for method SavingsPlanModelsClient.BeginUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNotFound, http.StatusNoContent
	BeginUpdate func(ctx context.Context, savingsPlanOrderID string, savingsPlanID string, body armbillingbenefits.SavingsPlanUpdateRequest, options *armbillingbenefits.SavingsPlanModelsClientBeginUpdateOptions) (resp azfake.PollerResponder[armbillingbenefits.SavingsPlanModelsClientUpdateResponse], errResp azfake.ErrorResponder)

	// ValidateUpdate is the fake for method SavingsPlanModelsClient.ValidateUpdate
	// HTTP status codes to indicate success: http.StatusOK
	ValidateUpdate func(ctx context.Context, savingsPlanOrderID string, savingsPlanID string, body armbillingbenefits.SavingsPlanUpdateValidateRequest, options *armbillingbenefits.SavingsPlanModelsClientValidateUpdateOptions) (resp azfake.Responder[armbillingbenefits.SavingsPlanModelsClientValidateUpdateResponse], errResp azfake.ErrorResponder)
}

// NewSavingsPlanModelsServerTransport creates a new instance of SavingsPlanModelsServerTransport with the provided implementation.
// The returned SavingsPlanModelsServerTransport instance is connected to an instance of armbillingbenefits.SavingsPlanModelsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSavingsPlanModelsServerTransport(srv *SavingsPlanModelsServer) *SavingsPlanModelsServerTransport {
	return &SavingsPlanModelsServerTransport{
		srv:          srv,
		newListPager: newTracker[azfake.PagerResponder[armbillingbenefits.SavingsPlanModelsClientListResponse]](),
		beginUpdate:  newTracker[azfake.PollerResponder[armbillingbenefits.SavingsPlanModelsClientUpdateResponse]](),
	}
}

// SavingsPlanModelsServerTransport connects instances of armbillingbenefits.SavingsPlanModelsClient to instances of SavingsPlanModelsServer.
// Don't use this type directly, use NewSavingsPlanModelsServerTransport instead.
type SavingsPlanModelsServerTransport struct {
	srv          *SavingsPlanModelsServer
	newListPager *tracker[azfake.PagerResponder[armbillingbenefits.SavingsPlanModelsClientListResponse]]
	beginUpdate  *tracker[azfake.PollerResponder[armbillingbenefits.SavingsPlanModelsClientUpdateResponse]]
}

// Do implements the policy.Transporter interface for SavingsPlanModelsServerTransport.
func (s *SavingsPlanModelsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToMethodFake(req, method)
}

func (s *SavingsPlanModelsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if savingsPlanModelsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = savingsPlanModelsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "SavingsPlanModelsClient.Get":
				res.resp, res.err = s.dispatchGet(req)
			case "SavingsPlanModelsClient.NewListPager":
				res.resp, res.err = s.dispatchNewListPager(req)
			case "SavingsPlanModelsClient.BeginUpdate":
				res.resp, res.err = s.dispatchBeginUpdate(req)
			case "SavingsPlanModelsClient.ValidateUpdate":
				res.resp, res.err = s.dispatchValidateUpdate(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (s *SavingsPlanModelsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if s.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/providers/Microsoft\.BillingBenefits/savingsPlanOrders/(?P<savingsPlanOrderId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/savingsPlans/(?P<savingsPlanId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	savingsPlanOrderIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("savingsPlanOrderId")])
	if err != nil {
		return nil, err
	}
	savingsPlanIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("savingsPlanId")])
	if err != nil {
		return nil, err
	}
	expandUnescaped, err := url.QueryUnescape(qp.Get("$expand"))
	if err != nil {
		return nil, err
	}
	expandParam := getOptional(expandUnescaped)
	var options *armbillingbenefits.SavingsPlanModelsClientGetOptions
	if expandParam != nil {
		options = &armbillingbenefits.SavingsPlanModelsClientGetOptions{
			Expand: expandParam,
		}
	}
	respr, errRespr := s.srv.Get(req.Context(), savingsPlanOrderIDParam, savingsPlanIDParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SavingsPlanModel, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SavingsPlanModelsServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if s.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := s.newListPager.get(req)
	if newListPager == nil {
		const regexStr = `/providers/Microsoft\.BillingBenefits/savingsPlanOrders/(?P<savingsPlanOrderId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/savingsPlans`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		savingsPlanOrderIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("savingsPlanOrderId")])
		if err != nil {
			return nil, err
		}
		resp := s.srv.NewListPager(savingsPlanOrderIDParam, nil)
		newListPager = &resp
		s.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *armbillingbenefits.SavingsPlanModelsClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		s.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		s.newListPager.remove(req)
	}
	return resp, nil
}

func (s *SavingsPlanModelsServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if s.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdate not implemented")}
	}
	beginUpdate := s.beginUpdate.get(req)
	if beginUpdate == nil {
		const regexStr = `/providers/Microsoft\.BillingBenefits/savingsPlanOrders/(?P<savingsPlanOrderId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/savingsPlans/(?P<savingsPlanId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armbillingbenefits.SavingsPlanUpdateRequest](req)
		if err != nil {
			return nil, err
		}
		savingsPlanOrderIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("savingsPlanOrderId")])
		if err != nil {
			return nil, err
		}
		savingsPlanIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("savingsPlanId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginUpdate(req.Context(), savingsPlanOrderIDParam, savingsPlanIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdate = &respr
		s.beginUpdate.add(req, beginUpdate)
	}

	resp, err := server.PollerResponderNext(beginUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNotFound, http.StatusNoContent}, resp.StatusCode) {
		s.beginUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNotFound, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdate) {
		s.beginUpdate.remove(req)
	}

	return resp, nil
}

func (s *SavingsPlanModelsServerTransport) dispatchValidateUpdate(req *http.Request) (*http.Response, error) {
	if s.srv.ValidateUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method ValidateUpdate not implemented")}
	}
	const regexStr = `/providers/Microsoft\.BillingBenefits/savingsPlanOrders/(?P<savingsPlanOrderId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/savingsPlans/(?P<savingsPlanId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/validate`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armbillingbenefits.SavingsPlanUpdateValidateRequest](req)
	if err != nil {
		return nil, err
	}
	savingsPlanOrderIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("savingsPlanOrderId")])
	if err != nil {
		return nil, err
	}
	savingsPlanIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("savingsPlanId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.ValidateUpdate(req.Context(), savingsPlanOrderIDParam, savingsPlanIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SavingsPlanValidateResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to SavingsPlanModelsServerTransport
var savingsPlanModelsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
