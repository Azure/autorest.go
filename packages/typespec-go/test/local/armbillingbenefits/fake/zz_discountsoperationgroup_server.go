// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"armbillingbenefits"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
	"net/url"
	"regexp"
)

// DiscountsOperationGroupServer is a fake server for instances of the armbillingbenefits.DiscountsOperationGroupClient type.
type DiscountsOperationGroupServer struct {
	// NewScopeListPager is the fake for method DiscountsOperationGroupClient.NewScopeListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewScopeListPager func(scope string, options *armbillingbenefits.DiscountsOperationGroupClientScopeListOptions) (resp azfake.PagerResponder[armbillingbenefits.DiscountsOperationGroupClientScopeListResponse])
}

// NewDiscountsOperationGroupServerTransport creates a new instance of DiscountsOperationGroupServerTransport with the provided implementation.
// The returned DiscountsOperationGroupServerTransport instance is connected to an instance of armbillingbenefits.DiscountsOperationGroupClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewDiscountsOperationGroupServerTransport(srv *DiscountsOperationGroupServer) *DiscountsOperationGroupServerTransport {
	return &DiscountsOperationGroupServerTransport{
		srv:               srv,
		newScopeListPager: newTracker[azfake.PagerResponder[armbillingbenefits.DiscountsOperationGroupClientScopeListResponse]](),
	}
}

// DiscountsOperationGroupServerTransport connects instances of armbillingbenefits.DiscountsOperationGroupClient to instances of DiscountsOperationGroupServer.
// Don't use this type directly, use NewDiscountsOperationGroupServerTransport instead.
type DiscountsOperationGroupServerTransport struct {
	srv               *DiscountsOperationGroupServer
	newScopeListPager *tracker[azfake.PagerResponder[armbillingbenefits.DiscountsOperationGroupClientScopeListResponse]]
}

// Do implements the policy.Transporter interface for DiscountsOperationGroupServerTransport.
func (d *DiscountsOperationGroupServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return d.dispatchToMethodFake(req, method)
}

func (d *DiscountsOperationGroupServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if discountsOperationGroupServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = discountsOperationGroupServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "DiscountsOperationGroupClient.NewScopeListPager":
				res.resp, res.err = d.dispatchNewScopeListPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (d *DiscountsOperationGroupServerTransport) dispatchNewScopeListPager(req *http.Request) (*http.Response, error) {
	if d.srv.NewScopeListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewScopeListPager not implemented")}
	}
	newScopeListPager := d.newScopeListPager.get(req)
	if newScopeListPager == nil {
		const regexStr = `/(?P<scope>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.BillingBenefits/applicableDiscounts`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		scopeParam, err := url.PathUnescape(matches[regex.SubexpIndex("scope")])
		if err != nil {
			return nil, err
		}
		resp := d.srv.NewScopeListPager(scopeParam, nil)
		newScopeListPager = &resp
		d.newScopeListPager.add(req, newScopeListPager)
		server.PagerResponderInjectNextLinks(newScopeListPager, req, func(page *armbillingbenefits.DiscountsOperationGroupClientScopeListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newScopeListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		d.newScopeListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newScopeListPager) {
		d.newScopeListPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to DiscountsOperationGroupServerTransport
var discountsOperationGroupServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
