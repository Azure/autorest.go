// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"armbillingbenefits"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
	"net/url"
	"regexp"
)

// SavingsPlanOrderModelsServer is a fake server for instances of the armbillingbenefits.SavingsPlanOrderModelsClient type.
type SavingsPlanOrderModelsServer struct {
	// Elevate is the fake for method SavingsPlanOrderModelsClient.Elevate
	// HTTP status codes to indicate success: http.StatusOK
	Elevate func(ctx context.Context, savingsPlanOrderID string, options *armbillingbenefits.SavingsPlanOrderModelsClientElevateOptions) (resp azfake.Responder[armbillingbenefits.SavingsPlanOrderModelsClientElevateResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method SavingsPlanOrderModelsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, savingsPlanOrderID string, options *armbillingbenefits.SavingsPlanOrderModelsClientGetOptions) (resp azfake.Responder[armbillingbenefits.SavingsPlanOrderModelsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method SavingsPlanOrderModelsClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(options *armbillingbenefits.SavingsPlanOrderModelsClientListOptions) (resp azfake.PagerResponder[armbillingbenefits.SavingsPlanOrderModelsClientListResponse])
}

// NewSavingsPlanOrderModelsServerTransport creates a new instance of SavingsPlanOrderModelsServerTransport with the provided implementation.
// The returned SavingsPlanOrderModelsServerTransport instance is connected to an instance of armbillingbenefits.SavingsPlanOrderModelsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSavingsPlanOrderModelsServerTransport(srv *SavingsPlanOrderModelsServer) *SavingsPlanOrderModelsServerTransport {
	return &SavingsPlanOrderModelsServerTransport{
		srv:          srv,
		newListPager: newTracker[azfake.PagerResponder[armbillingbenefits.SavingsPlanOrderModelsClientListResponse]](),
	}
}

// SavingsPlanOrderModelsServerTransport connects instances of armbillingbenefits.SavingsPlanOrderModelsClient to instances of SavingsPlanOrderModelsServer.
// Don't use this type directly, use NewSavingsPlanOrderModelsServerTransport instead.
type SavingsPlanOrderModelsServerTransport struct {
	srv          *SavingsPlanOrderModelsServer
	newListPager *tracker[azfake.PagerResponder[armbillingbenefits.SavingsPlanOrderModelsClientListResponse]]
}

// Do implements the policy.Transporter interface for SavingsPlanOrderModelsServerTransport.
func (s *SavingsPlanOrderModelsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToMethodFake(req, method)
}

func (s *SavingsPlanOrderModelsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if savingsPlanOrderModelsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = savingsPlanOrderModelsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "SavingsPlanOrderModelsClient.Elevate":
				res.resp, res.err = s.dispatchElevate(req)
			case "SavingsPlanOrderModelsClient.Get":
				res.resp, res.err = s.dispatchGet(req)
			case "SavingsPlanOrderModelsClient.NewListPager":
				res.resp, res.err = s.dispatchNewListPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (s *SavingsPlanOrderModelsServerTransport) dispatchElevate(req *http.Request) (*http.Response, error) {
	if s.srv.Elevate == nil {
		return nil, &nonRetriableError{errors.New("fake for method Elevate not implemented")}
	}
	const regexStr = `/providers/Microsoft\.BillingBenefits/savingsPlanOrders/(?P<savingsPlanOrderId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/elevate`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	savingsPlanOrderIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("savingsPlanOrderId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Elevate(req.Context(), savingsPlanOrderIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RoleAssignmentEntity, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SavingsPlanOrderModelsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if s.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/providers/Microsoft\.BillingBenefits/savingsPlanOrders/(?P<savingsPlanOrderId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	savingsPlanOrderIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("savingsPlanOrderId")])
	if err != nil {
		return nil, err
	}
	expandUnescaped, err := url.QueryUnescape(qp.Get("$expand"))
	if err != nil {
		return nil, err
	}
	expandParam := getOptional(expandUnescaped)
	var options *armbillingbenefits.SavingsPlanOrderModelsClientGetOptions
	if expandParam != nil {
		options = &armbillingbenefits.SavingsPlanOrderModelsClientGetOptions{
			Expand: expandParam,
		}
	}
	respr, errRespr := s.srv.Get(req.Context(), savingsPlanOrderIDParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SavingsPlanOrderModel, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SavingsPlanOrderModelsServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if s.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := s.newListPager.get(req)
	if newListPager == nil {
		resp := s.srv.NewListPager(nil)
		newListPager = &resp
		s.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *armbillingbenefits.SavingsPlanOrderModelsClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		s.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		s.newListPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to SavingsPlanOrderModelsServerTransport
var savingsPlanOrderModelsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
