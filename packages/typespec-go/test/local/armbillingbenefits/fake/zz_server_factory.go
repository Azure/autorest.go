// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the armbillingbenefits.ClientFactory type.
type ServerFactory struct {
	// DiscountsServer contains the fakes for client DiscountsClient
	DiscountsServer DiscountsServer

	// DiscountsOperationGroupServer contains the fakes for client DiscountsOperationGroupClient
	DiscountsOperationGroupServer DiscountsOperationGroupServer

	// OperationsServer contains the fakes for client OperationsClient
	OperationsServer OperationsServer

	// ReservationOrderAliasResponsesServer contains the fakes for client ReservationOrderAliasResponsesClient
	ReservationOrderAliasResponsesServer ReservationOrderAliasResponsesServer

	// SavingsPlanModelsServer contains the fakes for client SavingsPlanModelsClient
	SavingsPlanModelsServer SavingsPlanModelsServer

	// SavingsPlanOperationGroupServer contains the fakes for client SavingsPlanOperationGroupClient
	SavingsPlanOperationGroupServer SavingsPlanOperationGroupServer

	// SavingsPlanOrderAliasModelsServer contains the fakes for client SavingsPlanOrderAliasModelsClient
	SavingsPlanOrderAliasModelsServer SavingsPlanOrderAliasModelsServer

	// SavingsPlanOrderModelsServer contains the fakes for client SavingsPlanOrderModelsClient
	SavingsPlanOrderModelsServer SavingsPlanOrderModelsServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of armbillingbenefits.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of armbillingbenefits.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                                    *ServerFactory
	trMu                                   sync.Mutex
	trDiscountsServer                      *DiscountsServerTransport
	trDiscountsOperationGroupServer        *DiscountsOperationGroupServerTransport
	trOperationsServer                     *OperationsServerTransport
	trReservationOrderAliasResponsesServer *ReservationOrderAliasResponsesServerTransport
	trSavingsPlanModelsServer              *SavingsPlanModelsServerTransport
	trSavingsPlanOperationGroupServer      *SavingsPlanOperationGroupServerTransport
	trSavingsPlanOrderAliasModelsServer    *SavingsPlanOrderAliasModelsServerTransport
	trSavingsPlanOrderModelsServer         *SavingsPlanOrderModelsServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "DiscountsClient":
		initServer(s, &s.trDiscountsServer, func() *DiscountsServerTransport { return NewDiscountsServerTransport(&s.srv.DiscountsServer) })
		resp, err = s.trDiscountsServer.Do(req)
	case "DiscountsOperationGroupClient":
		initServer(s, &s.trDiscountsOperationGroupServer, func() *DiscountsOperationGroupServerTransport {
			return NewDiscountsOperationGroupServerTransport(&s.srv.DiscountsOperationGroupServer)
		})
		resp, err = s.trDiscountsOperationGroupServer.Do(req)
	case "OperationsClient":
		initServer(s, &s.trOperationsServer, func() *OperationsServerTransport { return NewOperationsServerTransport(&s.srv.OperationsServer) })
		resp, err = s.trOperationsServer.Do(req)
	case "ReservationOrderAliasResponsesClient":
		initServer(s, &s.trReservationOrderAliasResponsesServer, func() *ReservationOrderAliasResponsesServerTransport {
			return NewReservationOrderAliasResponsesServerTransport(&s.srv.ReservationOrderAliasResponsesServer)
		})
		resp, err = s.trReservationOrderAliasResponsesServer.Do(req)
	case "SavingsPlanModelsClient":
		initServer(s, &s.trSavingsPlanModelsServer, func() *SavingsPlanModelsServerTransport {
			return NewSavingsPlanModelsServerTransport(&s.srv.SavingsPlanModelsServer)
		})
		resp, err = s.trSavingsPlanModelsServer.Do(req)
	case "SavingsPlanOperationGroupClient":
		initServer(s, &s.trSavingsPlanOperationGroupServer, func() *SavingsPlanOperationGroupServerTransport {
			return NewSavingsPlanOperationGroupServerTransport(&s.srv.SavingsPlanOperationGroupServer)
		})
		resp, err = s.trSavingsPlanOperationGroupServer.Do(req)
	case "SavingsPlanOrderAliasModelsClient":
		initServer(s, &s.trSavingsPlanOrderAliasModelsServer, func() *SavingsPlanOrderAliasModelsServerTransport {
			return NewSavingsPlanOrderAliasModelsServerTransport(&s.srv.SavingsPlanOrderAliasModelsServer)
		})
		resp, err = s.trSavingsPlanOrderAliasModelsServer.Do(req)
	case "SavingsPlanOrderModelsClient":
		initServer(s, &s.trSavingsPlanOrderModelsServer, func() *SavingsPlanOrderModelsServerTransport {
			return NewSavingsPlanOrderModelsServerTransport(&s.srv.SavingsPlanOrderModelsServer)
		})
		resp, err = s.trSavingsPlanOrderModelsServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
