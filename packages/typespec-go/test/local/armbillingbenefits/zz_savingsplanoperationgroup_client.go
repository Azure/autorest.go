// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armbillingbenefits

import (
	"context"
	"net/http"
	"strconv"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// SavingsPlanOperationGroupClient contains the methods for the SavingsPlanOperationGroup group.
// Don't use this type directly, use NewSavingsPlanOperationGroupClient() instead.
type SavingsPlanOperationGroupClient struct {
	internal *arm.Client
}

// NewSavingsPlanOperationGroupClient creates a new instance of SavingsPlanOperationGroupClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewSavingsPlanOperationGroupClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*SavingsPlanOperationGroupClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &SavingsPlanOperationGroupClient{
		internal: cl,
	}
	return client, nil
}

// NewListAllPager - List savings plans.
//
// Generated from API version 2024-11-01-preview
//   - options - SavingsPlanOperationGroupClientListAllOptions contains the optional parameters for the SavingsPlanOperationGroupClient.NewListAllPager
//     method.
func (client *SavingsPlanOperationGroupClient) NewListAllPager(options *SavingsPlanOperationGroupClientListAllOptions) *runtime.Pager[SavingsPlanOperationGroupClientListAllResponse] {
	return runtime.NewPager(runtime.PagingHandler[SavingsPlanOperationGroupClientListAllResponse]{
		More: func(page SavingsPlanOperationGroupClientListAllResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SavingsPlanOperationGroupClientListAllResponse) (SavingsPlanOperationGroupClientListAllResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "SavingsPlanOperationGroupClient.NewListAllPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listAllCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return SavingsPlanOperationGroupClientListAllResponse{}, err
			}
			return client.listAllHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listAllCreateRequest creates the ListAll request.
func (client *SavingsPlanOperationGroupClient) listAllCreateRequest(ctx context.Context, options *SavingsPlanOperationGroupClientListAllOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.BillingBenefits/savingsPlans"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	if options != nil && options.Orderby != nil {
		reqQP.Set("$orderby", *options.Orderby)
	}
	if options != nil && options.Skiptoken != nil {
		reqQP.Set("$skiptoken", strconv.FormatFloat(float64(*options.Skiptoken), 'f', -1, 32))
	}
	reqQP.Set("api-version", "2024-11-01-preview")
	if options != nil && options.RefreshSummary != nil {
		reqQP.Set("refreshSummary", *options.RefreshSummary)
	}
	if options != nil && options.SelectedState != nil {
		reqQP.Set("selectedState", *options.SelectedState)
	}
	if options != nil && options.Take != nil {
		reqQP.Set("take", strconv.FormatFloat(float64(*options.Take), 'f', -1, 32))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listAllHandleResponse handles the ListAll response.
func (client *SavingsPlanOperationGroupClient) listAllHandleResponse(resp *http.Response) (SavingsPlanOperationGroupClientListAllResponse, error) {
	result := SavingsPlanOperationGroupClientListAllResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SavingsPlanModelListResult); err != nil {
		return SavingsPlanOperationGroupClientListAllResponse{}, err
	}
	return result, nil
}

// ValidatePurchase - Validate savings plan purchase.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-11-01-preview
//   - body - The request body
//   - options - SavingsPlanOperationGroupClientValidatePurchaseOptions contains the optional parameters for the SavingsPlanOperationGroupClient.ValidatePurchase
//     method.
func (client *SavingsPlanOperationGroupClient) ValidatePurchase(ctx context.Context, body SavingsPlanPurchaseValidateRequest, options *SavingsPlanOperationGroupClientValidatePurchaseOptions) (SavingsPlanOperationGroupClientValidatePurchaseResponse, error) {
	var err error
	const operationName = "SavingsPlanOperationGroupClient.ValidatePurchase"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.validatePurchaseCreateRequest(ctx, body, options)
	if err != nil {
		return SavingsPlanOperationGroupClientValidatePurchaseResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SavingsPlanOperationGroupClientValidatePurchaseResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SavingsPlanOperationGroupClientValidatePurchaseResponse{}, err
	}
	resp, err := client.validatePurchaseHandleResponse(httpResp)
	return resp, err
}

// validatePurchaseCreateRequest creates the ValidatePurchase request.
func (client *SavingsPlanOperationGroupClient) validatePurchaseCreateRequest(ctx context.Context, body SavingsPlanPurchaseValidateRequest, _ *SavingsPlanOperationGroupClientValidatePurchaseOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.BillingBenefits/validate"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// validatePurchaseHandleResponse handles the ValidatePurchase response.
func (client *SavingsPlanOperationGroupClient) validatePurchaseHandleResponse(resp *http.Response) (SavingsPlanOperationGroupClientValidatePurchaseResponse, error) {
	result := SavingsPlanOperationGroupClientValidatePurchaseResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SavingsPlanValidateResponse); err != nil {
		return SavingsPlanOperationGroupClientValidatePurchaseResponse{}, err
	}
	return result, nil
}
