// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armbillingbenefits

// ActionType - Extensible enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
type ActionType string

const (
	// ActionTypeInternal - Actions are for internal-only APIs.
	ActionTypeInternal ActionType = "Internal"
)

// PossibleActionTypeValues returns the possible values for the ActionType const type.
func PossibleActionTypeValues() []ActionType {
	return []ActionType{
		ActionTypeInternal,
	}
}

// AppliedScopeType - Type of the Applied Scope.
type AppliedScopeType string

const (
	AppliedScopeTypeManagementGroup AppliedScopeType = "ManagementGroup"
	AppliedScopeTypeShared          AppliedScopeType = "Shared"
	AppliedScopeTypeSingle          AppliedScopeType = "Single"
)

// PossibleAppliedScopeTypeValues returns the possible values for the AppliedScopeType const type.
func PossibleAppliedScopeTypeValues() []AppliedScopeType {
	return []AppliedScopeType{
		AppliedScopeTypeManagementGroup,
		AppliedScopeTypeShared,
		AppliedScopeTypeSingle,
	}
}

// ApplyDiscountOn - The customer action on which the discount is applied. Supported values are Purchase, Consume, and Renew.
// Validation: Required, one of supported values.
type ApplyDiscountOn string

const (
	ApplyDiscountOnConsume  ApplyDiscountOn = "Consume"
	ApplyDiscountOnPurchase ApplyDiscountOn = "Purchase"
	ApplyDiscountOnRenew    ApplyDiscountOn = "Renew"
)

// PossibleApplyDiscountOnValues returns the possible values for the ApplyDiscountOn const type.
func PossibleApplyDiscountOnValues() []ApplyDiscountOn {
	return []ApplyDiscountOn{
		ApplyDiscountOnConsume,
		ApplyDiscountOnPurchase,
		ApplyDiscountOnRenew,
	}
}

// BillingPlan - Represents the billing plan in ISO 8601 format. Required only for monthly billing plans.
type BillingPlan string

const (
	BillingPlanP1M BillingPlan = "P1M"
)

// PossibleBillingPlanValues returns the possible values for the BillingPlan const type.
func PossibleBillingPlanValues() []BillingPlan {
	return []BillingPlan{
		BillingPlanP1M,
	}
}

// CommitmentGrain - Commitment grain.
type CommitmentGrain string

const (
	CommitmentGrainFullTerm CommitmentGrain = "FullTerm"
	CommitmentGrainHourly   CommitmentGrain = "Hourly"
	CommitmentGrainUnknown  CommitmentGrain = "Unknown"
)

// PossibleCommitmentGrainValues returns the possible values for the CommitmentGrain const type.
func PossibleCommitmentGrainValues() []CommitmentGrain {
	return []CommitmentGrain{
		CommitmentGrainFullTerm,
		CommitmentGrainHourly,
		CommitmentGrainUnknown,
	}
}

// CreatedByType - The kind of entity that created the resource.
type CreatedByType string

const (
	// CreatedByTypeApplication - The entity was created by an application.
	CreatedByTypeApplication CreatedByType = "Application"
	// CreatedByTypeKey - The entity was created by a key.
	CreatedByTypeKey CreatedByType = "Key"
	// CreatedByTypeManagedIdentity - The entity was created by a managed identity.
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	// CreatedByTypeUser - The entity was created by a user.
	CreatedByTypeUser CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns the possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{
		CreatedByTypeApplication,
		CreatedByTypeKey,
		CreatedByTypeManagedIdentity,
		CreatedByTypeUser,
	}
}

// DiscountAppliedScopeType - List of applied scopes supported for discounts.
type DiscountAppliedScopeType string

const (
	DiscountAppliedScopeTypeBillingAccount DiscountAppliedScopeType = "BillingAccount"
	DiscountAppliedScopeTypeBillingProfile DiscountAppliedScopeType = "BillingProfile"
	DiscountAppliedScopeTypeCustomer       DiscountAppliedScopeType = "Customer"
)

// PossibleDiscountAppliedScopeTypeValues returns the possible values for the DiscountAppliedScopeType const type.
func PossibleDiscountAppliedScopeTypeValues() []DiscountAppliedScopeType {
	return []DiscountAppliedScopeType{
		DiscountAppliedScopeTypeBillingAccount,
		DiscountAppliedScopeTypeBillingProfile,
		DiscountAppliedScopeTypeCustomer,
	}
}

// DiscountCombinationRule - The discount combination rule when there are multiple applicable custom prices. Validation: Required.
// Supported values are Stackable and BestOf.
type DiscountCombinationRule string

const (
	DiscountCombinationRuleBestOf    DiscountCombinationRule = "BestOf"
	DiscountCombinationRuleStackable DiscountCombinationRule = "Stackable"
)

// PossibleDiscountCombinationRuleValues returns the possible values for the DiscountCombinationRule const type.
func PossibleDiscountCombinationRuleValues() []DiscountCombinationRule {
	return []DiscountCombinationRule{
		DiscountCombinationRuleBestOf,
		DiscountCombinationRuleStackable,
	}
}

// DiscountEntityType - This defines whether the entity being created is primary or affiliate. Supported values: primary,
// affiliate. Validation: Required, must match one of the 2 values.
type DiscountEntityType string

const (
	DiscountEntityTypeAffiliate DiscountEntityType = "Affiliate"
	DiscountEntityTypePrimary   DiscountEntityType = "Primary"
)

// PossibleDiscountEntityTypeValues returns the possible values for the DiscountEntityType const type.
func PossibleDiscountEntityTypeValues() []DiscountEntityType {
	return []DiscountEntityType{
		DiscountEntityTypeAffiliate,
		DiscountEntityTypePrimary,
	}
}

// DiscountProvisioningState - Provisioning states of Discount.
type DiscountProvisioningState string

const (
	DiscountProvisioningStateCanceled  DiscountProvisioningState = "Canceled"
	DiscountProvisioningStateFailed    DiscountProvisioningState = "Failed"
	DiscountProvisioningStatePending   DiscountProvisioningState = "Pending"
	DiscountProvisioningStateSucceeded DiscountProvisioningState = "Succeeded"
	DiscountProvisioningStateUnknown   DiscountProvisioningState = "Unknown"
)

// PossibleDiscountProvisioningStateValues returns the possible values for the DiscountProvisioningState const type.
func PossibleDiscountProvisioningStateValues() []DiscountProvisioningState {
	return []DiscountProvisioningState{
		DiscountProvisioningStateCanceled,
		DiscountProvisioningStateFailed,
		DiscountProvisioningStatePending,
		DiscountProvisioningStateSucceeded,
		DiscountProvisioningStateUnknown,
	}
}

// DiscountStatus - Represents the current status of the discount.
type DiscountStatus string

const (
	DiscountStatusActive   DiscountStatus = "Active"
	DiscountStatusCanceled DiscountStatus = "Canceled"
	DiscountStatusExpired  DiscountStatus = "Expired"
	DiscountStatusFailed   DiscountStatus = "Failed"
	DiscountStatusPending  DiscountStatus = "Pending"
)

// PossibleDiscountStatusValues returns the possible values for the DiscountStatus const type.
func PossibleDiscountStatusValues() []DiscountStatus {
	return []DiscountStatus{
		DiscountStatusActive,
		DiscountStatusCanceled,
		DiscountStatusExpired,
		DiscountStatusFailed,
		DiscountStatusPending,
	}
}

// DiscountType - Defines the type of discount. Supported values are ProductFamily, Product, Sku, CustomPrice, and CustomPriceMultiCurrency.
type DiscountType string

const (
	DiscountTypeCustomPrice              DiscountType = "CustomPrice"
	DiscountTypeCustomPriceMultiCurrency DiscountType = "CustomPriceMultiCurrency"
	DiscountTypeProduct                  DiscountType = "Product"
	DiscountTypeProductFamily            DiscountType = "ProductFamily"
	DiscountTypeSKU                      DiscountType = "Sku"
)

// PossibleDiscountTypeValues returns the possible values for the DiscountType const type.
func PossibleDiscountTypeValues() []DiscountType {
	return []DiscountType{
		DiscountTypeCustomPrice,
		DiscountTypeCustomPriceMultiCurrency,
		DiscountTypeProduct,
		DiscountTypeProductFamily,
		DiscountTypeSKU,
	}
}

// InstanceFlexibility - Turning this on will apply the reservation discount to other VMs in the same VM size group.
type InstanceFlexibility string

const (
	InstanceFlexibilityOff InstanceFlexibility = "Off"
	InstanceFlexibilityOn  InstanceFlexibility = "On"
)

// PossibleInstanceFlexibilityValues returns the possible values for the InstanceFlexibility const type.
func PossibleInstanceFlexibilityValues() []InstanceFlexibility {
	return []InstanceFlexibility{
		InstanceFlexibilityOff,
		InstanceFlexibilityOn,
	}
}

// ManagedServiceIdentityType - Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
type ManagedServiceIdentityType string

const (
	ManagedServiceIdentityTypeNone                       ManagedServiceIdentityType = "None"
	ManagedServiceIdentityTypeSystemAssigned             ManagedServiceIdentityType = "SystemAssigned"
	ManagedServiceIdentityTypeSystemAssignedUserAssigned ManagedServiceIdentityType = "SystemAssigned,UserAssigned"
	ManagedServiceIdentityTypeUserAssigned               ManagedServiceIdentityType = "UserAssigned"
)

// PossibleManagedServiceIdentityTypeValues returns the possible values for the ManagedServiceIdentityType const type.
func PossibleManagedServiceIdentityTypeValues() []ManagedServiceIdentityType {
	return []ManagedServiceIdentityType{
		ManagedServiceIdentityTypeNone,
		ManagedServiceIdentityTypeSystemAssigned,
		ManagedServiceIdentityTypeSystemAssignedUserAssigned,
		ManagedServiceIdentityTypeUserAssigned,
	}
}

// Origin - The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
// value is "user,system"
type Origin string

const (
	// OriginSystem - Indicates the operation is initiated by a system.
	OriginSystem Origin = "system"
	// OriginUser - Indicates the operation is initiated by a user.
	OriginUser Origin = "user"
	// OriginUserSystem - Indicates the operation is initiated by a user or system.
	OriginUserSystem Origin = "user,system"
)

// PossibleOriginValues returns the possible values for the Origin const type.
func PossibleOriginValues() []Origin {
	return []Origin{
		OriginSystem,
		OriginUser,
		OriginUserSystem,
	}
}

// PaymentStatus - Describes whether the payment is completed, failed, cancelled or scheduled in the future.
type PaymentStatus string

const (
	PaymentStatusCancelled PaymentStatus = "Cancelled"
	PaymentStatusFailed    PaymentStatus = "Failed"
	PaymentStatusScheduled PaymentStatus = "Scheduled"
	PaymentStatusSucceeded PaymentStatus = "Succeeded"
)

// PossiblePaymentStatusValues returns the possible values for the PaymentStatus const type.
func PossiblePaymentStatusValues() []PaymentStatus {
	return []PaymentStatus{
		PaymentStatusCancelled,
		PaymentStatusFailed,
		PaymentStatusScheduled,
		PaymentStatusSucceeded,
	}
}

// PricingPolicy - Supported values: Protected, Locked
type PricingPolicy string

const (
	PricingPolicyLocked    PricingPolicy = "Locked"
	PricingPolicyProtected PricingPolicy = "Protected"
)

// PossiblePricingPolicyValues returns the possible values for the PricingPolicy const type.
func PossiblePricingPolicyValues() []PricingPolicy {
	return []PricingPolicy{
		PricingPolicyLocked,
		PricingPolicyProtected,
	}
}

// ProvisioningState - Provisioning state
type ProvisioningState string

const (
	ProvisioningStateCancelled        ProvisioningState = "Cancelled"
	ProvisioningStateConfirmedBilling ProvisioningState = "ConfirmedBilling"
	ProvisioningStateCreated          ProvisioningState = "Created"
	ProvisioningStateCreating         ProvisioningState = "Creating"
	ProvisioningStateExpired          ProvisioningState = "Expired"
	ProvisioningStateFailed           ProvisioningState = "Failed"
	ProvisioningStatePendingBilling   ProvisioningState = "PendingBilling"
	ProvisioningStateSucceeded        ProvisioningState = "Succeeded"
)

// PossibleProvisioningStateValues returns the possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{
		ProvisioningStateCancelled,
		ProvisioningStateConfirmedBilling,
		ProvisioningStateCreated,
		ProvisioningStateCreating,
		ProvisioningStateExpired,
		ProvisioningStateFailed,
		ProvisioningStatePendingBilling,
		ProvisioningStateSucceeded,
	}
}

// ReservedResourceType - The type of the resource that is being reserved.
type ReservedResourceType string

const (
	ReservedResourceTypeAVS                    ReservedResourceType = "AVS"
	ReservedResourceTypeAppService             ReservedResourceType = "AppService"
	ReservedResourceTypeAzureDataExplorer      ReservedResourceType = "AzureDataExplorer"
	ReservedResourceTypeAzureFiles             ReservedResourceType = "AzureFiles"
	ReservedResourceTypeBlockBlob              ReservedResourceType = "BlockBlob"
	ReservedResourceTypeCosmosDb               ReservedResourceType = "CosmosDb"
	ReservedResourceTypeDataFactory            ReservedResourceType = "DataFactory"
	ReservedResourceTypeDatabricks             ReservedResourceType = "Databricks"
	ReservedResourceTypeDedicatedHost          ReservedResourceType = "DedicatedHost"
	ReservedResourceTypeManagedDisk            ReservedResourceType = "ManagedDisk"
	ReservedResourceTypeMariaDb                ReservedResourceType = "MariaDb"
	ReservedResourceTypeMySQL                  ReservedResourceType = "MySql"
	ReservedResourceTypeNetAppStorage          ReservedResourceType = "NetAppStorage"
	ReservedResourceTypePostgreSQL             ReservedResourceType = "PostgreSql"
	ReservedResourceTypeRedHat                 ReservedResourceType = "RedHat"
	ReservedResourceTypeRedHatOsa              ReservedResourceType = "RedHatOsa"
	ReservedResourceTypeRedisCache             ReservedResourceType = "RedisCache"
	ReservedResourceTypeSQLAzureHybridBenefit  ReservedResourceType = "SqlAzureHybridBenefit"
	ReservedResourceTypeSQLDataWarehouse       ReservedResourceType = "SqlDataWarehouse"
	ReservedResourceTypeSQLDatabases           ReservedResourceType = "SqlDatabases"
	ReservedResourceTypeSQLEdge                ReservedResourceType = "SqlEdge"
	ReservedResourceTypeSapHana                ReservedResourceType = "SapHana"
	ReservedResourceTypeSuseLinux              ReservedResourceType = "SuseLinux"
	ReservedResourceTypeVMwareCloudSimple      ReservedResourceType = "VMwareCloudSimple"
	ReservedResourceTypeVirtualMachineSoftware ReservedResourceType = "VirtualMachineSoftware"
	ReservedResourceTypeVirtualMachines        ReservedResourceType = "VirtualMachines"
)

// PossibleReservedResourceTypeValues returns the possible values for the ReservedResourceType const type.
func PossibleReservedResourceTypeValues() []ReservedResourceType {
	return []ReservedResourceType{
		ReservedResourceTypeAVS,
		ReservedResourceTypeAppService,
		ReservedResourceTypeAzureDataExplorer,
		ReservedResourceTypeAzureFiles,
		ReservedResourceTypeBlockBlob,
		ReservedResourceTypeCosmosDb,
		ReservedResourceTypeDataFactory,
		ReservedResourceTypeDatabricks,
		ReservedResourceTypeDedicatedHost,
		ReservedResourceTypeManagedDisk,
		ReservedResourceTypeMariaDb,
		ReservedResourceTypeMySQL,
		ReservedResourceTypeNetAppStorage,
		ReservedResourceTypePostgreSQL,
		ReservedResourceTypeRedHat,
		ReservedResourceTypeRedHatOsa,
		ReservedResourceTypeRedisCache,
		ReservedResourceTypeSQLAzureHybridBenefit,
		ReservedResourceTypeSQLDataWarehouse,
		ReservedResourceTypeSQLDatabases,
		ReservedResourceTypeSQLEdge,
		ReservedResourceTypeSapHana,
		ReservedResourceTypeSuseLinux,
		ReservedResourceTypeVMwareCloudSimple,
		ReservedResourceTypeVirtualMachineSoftware,
		ReservedResourceTypeVirtualMachines,
	}
}

// SKUTier - This field is required to be implemented by the Resource Provider if the service has more than one tier, but
// is not required on a PUT.
type SKUTier string

const (
	// SKUTierBasic - The Basic service tier.
	SKUTierBasic SKUTier = "Basic"
	// SKUTierFree - The Free service tier.
	SKUTierFree SKUTier = "Free"
	// SKUTierPremium - The Premium service tier.
	SKUTierPremium SKUTier = "Premium"
	// SKUTierStandard - The Standard service tier.
	SKUTierStandard SKUTier = "Standard"
)

// PossibleSKUTierValues returns the possible values for the SKUTier const type.
func PossibleSKUTierValues() []SKUTier {
	return []SKUTier{
		SKUTierBasic,
		SKUTierFree,
		SKUTierPremium,
		SKUTierStandard,
	}
}

// Term - Represent benefit term in ISO 8601 format.
type Term string

const (
	TermP1Y Term = "P1Y"
	TermP3Y Term = "P3Y"
	TermP5Y Term = "P5Y"
)

// PossibleTermValues returns the possible values for the Term const type.
func PossibleTermValues() []Term {
	return []Term{
		TermP1Y,
		TermP3Y,
		TermP5Y,
	}
}
