// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armbillingbenefits

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// DiscountsOperationGroupClient contains the methods for the DiscountsOperationGroup group.
// Don't use this type directly, use NewDiscountsOperationGroupClient() instead.
type DiscountsOperationGroupClient struct {
	internal *arm.Client
}

// NewDiscountsOperationGroupClient creates a new instance of DiscountsOperationGroupClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewDiscountsOperationGroupClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*DiscountsOperationGroupClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &DiscountsOperationGroupClient{
		internal: cl,
	}
	return client, nil
}

// NewScopeListPager - List discounts that are applicable for a given scope. Currently supported scopes: billing accounts
//
// Generated from API version 2024-11-01-preview
//   - scope - The scope at which the benefits are listed.
//   - options - DiscountsOperationGroupClientScopeListOptions contains the optional parameters for the DiscountsOperationGroupClient.NewScopeListPager
//     method.
func (client *DiscountsOperationGroupClient) NewScopeListPager(scope string, options *DiscountsOperationGroupClientScopeListOptions) *runtime.Pager[DiscountsOperationGroupClientScopeListResponse] {
	return runtime.NewPager(runtime.PagingHandler[DiscountsOperationGroupClientScopeListResponse]{
		More: func(page DiscountsOperationGroupClientScopeListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *DiscountsOperationGroupClientScopeListResponse) (DiscountsOperationGroupClientScopeListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DiscountsOperationGroupClient.NewScopeListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.scopeListCreateRequest(ctx, scope, options)
			}, nil)
			if err != nil {
				return DiscountsOperationGroupClientScopeListResponse{}, err
			}
			return client.scopeListHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// scopeListCreateRequest creates the ScopeList request.
func (client *DiscountsOperationGroupClient) scopeListCreateRequest(ctx context.Context, scope string, _ *DiscountsOperationGroupClientScopeListOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.BillingBenefits/applicableDiscounts"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", url.PathEscape(scope))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// scopeListHandleResponse handles the ScopeList response.
func (client *DiscountsOperationGroupClient) scopeListHandleResponse(resp *http.Response) (DiscountsOperationGroupClientScopeListResponse, error) {
	result := DiscountsOperationGroupClientScopeListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DiscountList); err != nil {
		return DiscountsOperationGroupClientScopeListResponse{}, err
	}
	return result, nil
}
