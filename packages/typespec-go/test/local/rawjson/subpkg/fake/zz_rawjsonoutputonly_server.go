// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"io"
	"net/http"
	"rawjson/v2/subpkg"
)

// RawJSONOutputOnlyServer is a fake server for instances of the subpkg.RawJSONOutputOnlyClient type.
type RawJSONOutputOnlyServer struct {
	// Get is the fake for method RawJSONOutputOnlyClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, options *subpkg.RawJSONOutputOnlyClientGetOptions) (resp azfake.Responder[subpkg.RawJSONOutputOnlyClientGetResponse], errResp azfake.ErrorResponder)
}

// NewRawJSONOutputOnlyServerTransport creates a new instance of RawJSONOutputOnlyServerTransport with the provided implementation.
// The returned RawJSONOutputOnlyServerTransport instance is connected to an instance of subpkg.RawJSONOutputOnlyClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewRawJSONOutputOnlyServerTransport(srv *RawJSONOutputOnlyServer) *RawJSONOutputOnlyServerTransport {
	return &RawJSONOutputOnlyServerTransport{srv: srv}
}

// RawJSONOutputOnlyServerTransport connects instances of subpkg.RawJSONOutputOnlyClient to instances of RawJSONOutputOnlyServer.
// Don't use this type directly, use NewRawJSONOutputOnlyServerTransport instead.
type RawJSONOutputOnlyServerTransport struct {
	srv *RawJSONOutputOnlyServer
}

// Do implements the policy.Transporter interface for RawJSONOutputOnlyServerTransport.
func (r *RawJSONOutputOnlyServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return r.dispatchToMethodFake(req, method)
}

func (r *RawJSONOutputOnlyServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if rawJsonOutputOnlyServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = rawJsonOutputOnlyServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "RawJSONOutputOnlyClient.Get":
				res.resp, res.err = r.dispatchGet(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (r *RawJSONOutputOnlyServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if r.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	respr, errRespr := r.srv.Get(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, &server.ResponseOptions{
		Body:        io.NopCloser(bytes.NewReader(server.GetResponse(respr).RawJSON)),
		ContentType: "application/json",
	})
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to RawJSONOutputOnlyServerTransport
var rawJsonOutputOnlyServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
