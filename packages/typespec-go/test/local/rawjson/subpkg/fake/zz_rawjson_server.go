// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// RawJSONServer is a fake server for instances of the subpkg.RawJSONClient type.
type RawJSONServer struct {
	// RawJSONInputOnlyServer contains the fakes for client RawJSONInputOnlyClient
	RawJSONInputOnlyServer RawJSONInputOnlyServer

	// RawJSONModelCaseServer contains the fakes for client RawJSONModelCaseClient
	RawJSONModelCaseServer RawJSONModelCaseServer

	// RawJSONOutputOnlyServer contains the fakes for client RawJSONOutputOnlyClient
	RawJSONOutputOnlyServer RawJSONOutputOnlyServer
}

// NewRawJSONServerTransport creates a new instance of RawJSONServerTransport with the provided implementation.
// The returned RawJSONServerTransport instance is connected to an instance of subpkg.RawJSONClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewRawJSONServerTransport(srv *RawJSONServer) *RawJSONServerTransport {
	return &RawJSONServerTransport{srv: srv}
}

// RawJSONServerTransport connects instances of subpkg.RawJSONClient to instances of RawJSONServer.
// Don't use this type directly, use NewRawJSONServerTransport instead.
type RawJSONServerTransport struct {
	srv                       *RawJSONServer
	trMu                      sync.Mutex
	trRawJSONInputOnlyServer  *RawJSONInputOnlyServerTransport
	trRawJSONModelCaseServer  *RawJSONModelCaseServerTransport
	trRawJSONOutputOnlyServer *RawJSONOutputOnlyServerTransport
}

// Do implements the policy.Transporter interface for RawJSONServerTransport.
func (r *RawJSONServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return r.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (r *RawJSONServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "RawJSONInputOnlyClient":
		initServer(&r.trMu, &r.trRawJSONInputOnlyServer, func() *RawJSONInputOnlyServerTransport {
			return NewRawJSONInputOnlyServerTransport(&r.srv.RawJSONInputOnlyServer)
		})
		resp, err = r.trRawJSONInputOnlyServer.Do(req)
	case "RawJSONModelCaseClient":
		initServer(&r.trMu, &r.trRawJSONModelCaseServer, func() *RawJSONModelCaseServerTransport {
			return NewRawJSONModelCaseServerTransport(&r.srv.RawJSONModelCaseServer)
		})
		resp, err = r.trRawJSONModelCaseServer.Do(req)
	case "RawJSONOutputOnlyClient":
		initServer(&r.trMu, &r.trRawJSONOutputOnlyServer, func() *RawJSONOutputOnlyServerTransport {
			return NewRawJSONOutputOnlyServerTransport(&r.srv.RawJSONOutputOnlyServer)
		})
		resp, err = r.trRawJSONOutputOnlyServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}

// set this to conditionally intercept incoming requests to RawJSONServerTransport
var rawJsonServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
