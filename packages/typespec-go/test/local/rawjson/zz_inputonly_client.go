// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package rawjson

import (
	"bytes"
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/streaming"
	"net/http"
)

// InputOnlyClient contains the methods for the InputOnly group.
// Don't use this type directly, use [Client.NewInputOnlyClient] instead.
type InputOnlyClient struct {
	internal *azcore.Client
	endpoint string
}

// Put -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - InputOnlyClientPutOptions contains the optional parameters for the InputOnlyClient.Put method.
func (client *InputOnlyClient) Put(ctx context.Context, body []byte, options *InputOnlyClientPutOptions) (InputOnlyClientPutResponse, error) {
	var err error
	const operationName = "InputOnlyClient.Put"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putCreateRequest(ctx, body, options)
	if err != nil {
		return InputOnlyClientPutResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return InputOnlyClientPutResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return InputOnlyClientPutResponse{}, err
	}
	return InputOnlyClientPutResponse{}, nil
}

// putCreateRequest creates the Put request.
func (client *InputOnlyClient) putCreateRequest(ctx context.Context, body []byte, _ *InputOnlyClientPutOptions) (*policy.Request, error) {
	urlPath := "/input"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := req.SetBody(streaming.NopCloser(bytes.NewReader(body)), "application/json"); err != nil {
		return nil, err
	}
	return req, nil
}
