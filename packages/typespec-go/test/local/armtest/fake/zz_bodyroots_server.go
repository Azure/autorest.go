// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"armtest"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"regexp"
)

// BodyRootsServer is a fake server for instances of the armtest.BodyRootsClient type.
type BodyRootsServer struct {
	// Action is the fake for method BodyRootsClient.Action
	// HTTP status codes to indicate success: http.StatusNoContent
	Action func(ctx context.Context, resourceGroupName string, bodyRootName string, action armtest.ActionRequest, options *armtest.BodyRootsClientActionOptions) (resp azfake.Responder[armtest.BodyRootsClientActionResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method BodyRootsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, bodyRootName string, options *armtest.BodyRootsClientGetOptions) (resp azfake.Responder[armtest.BodyRootsClientGetResponse], errResp azfake.ErrorResponder)
}

// NewBodyRootsServerTransport creates a new instance of BodyRootsServerTransport with the provided implementation.
// The returned BodyRootsServerTransport instance is connected to an instance of armtest.BodyRootsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewBodyRootsServerTransport(srv *BodyRootsServer) *BodyRootsServerTransport {
	return &BodyRootsServerTransport{srv: srv}
}

// BodyRootsServerTransport connects instances of armtest.BodyRootsClient to instances of BodyRootsServer.
// Don't use this type directly, use NewBodyRootsServerTransport instead.
type BodyRootsServerTransport struct {
	srv *BodyRootsServer
}

// Do implements the policy.Transporter interface for BodyRootsServerTransport.
func (b *BodyRootsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return b.dispatchToMethodFake(req, method)
}

func (b *BodyRootsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if bodyRootsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = bodyRootsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "BodyRootsClient.Action":
				res.resp, res.err = b.dispatchAction(req)
			case "BodyRootsClient.Get":
				res.resp, res.err = b.dispatchGet(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (b *BodyRootsServerTransport) dispatchAction(req *http.Request) (*http.Response, error) {
	if b.srv.Action == nil {
		return nil, &nonRetriableError{errors.New("fake for method Action not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Test/bodyRoots/(?P<bodyRootName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/action`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armtest.ActionRequest](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	bodyRootNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("bodyRootName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := b.srv.Action(req.Context(), resourceGroupNameParam, bodyRootNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (b *BodyRootsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if b.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Test/bodyRoots/(?P<bodyRootName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	bodyRootNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("bodyRootName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := b.srv.Get(req.Context(), resourceGroupNameParam, bodyRootNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).BodyRoot, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to BodyRootsServerTransport
var bodyRootsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
