// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package internalpager

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
)

// PagerWidgetsClient contains the methods for the PagerWidgets group.
// Don't use this type directly, use [PagerClient.NewPagerWidgetsClient] instead.
type PagerWidgetsClient struct {
	internal *azcore.Client
	endpoint string
}

//   - options - pagerWidgetsClientlistMethodOptions contains the optional parameters for the PagerWidgetsClient.NewlistMethodPager
//     method.
func (client *PagerWidgetsClient) newListMethodPager(options *pagerWidgetsClientlistMethodOptions) *runtime.Pager[pagerWidgetsClientlistMethodResponse] {
	return runtime.NewPager(runtime.PagingHandler[pagerWidgetsClientlistMethodResponse]{
		More: func(page pagerWidgetsClientlistMethodResponse) bool {
			return false
		},
		Fetcher: func(ctx context.Context, page *pagerWidgetsClientlistMethodResponse) (pagerWidgetsClientlistMethodResponse, error) {
			req, err := client.listCreateRequest(ctx, options)
			if err != nil {
				return pagerWidgetsClientlistMethodResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return pagerWidgetsClientlistMethodResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return pagerWidgetsClientlistMethodResponse{}, runtime.NewResponseError(resp)
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the listMethod request.
func (client *PagerWidgetsClient) listCreateRequest(ctx context.Context, _ *pagerWidgetsClientlistMethodOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/widgets"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the listMethod response.
func (client *PagerWidgetsClient) listHandleResponse(resp *http.Response) (pagerWidgetsClientlistMethodResponse, error) {
	result := pagerWidgetsClientlistMethodResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.widgetList); err != nil {
		return pagerWidgetsClientlistMethodResponse{}, err
	}
	return result, nil
}
