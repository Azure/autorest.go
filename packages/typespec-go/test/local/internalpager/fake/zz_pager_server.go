// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// PagerServer is a fake server for instances of the internalpager.PagerClient type.
type PagerServer struct {
}

// NewPagerServerTransport creates a new instance of PagerServerTransport with the provided implementation.
// The returned PagerServerTransport instance is connected to an instance of internalpager.PagerClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewPagerServerTransport(srv *PagerServer) *PagerServerTransport {
	return &PagerServerTransport{srv: srv}
}

// PagerServerTransport connects instances of internalpager.PagerClient to instances of PagerServer.
// Don't use this type directly, use NewPagerServerTransport instead.
type PagerServerTransport struct {
	srv *PagerServer
}

// Do implements the policy.Transporter interface for PagerServerTransport.
func (p *PagerServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return p.dispatchToMethodFake(req, method)
}

// set this to conditionally intercept incoming requests to PagerServerTransport
var pagerServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
