// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package nooptionalbody

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// Client contains the methods for the service.
// Don't use this type directly, use NewClientWithNoCredential() instead.
type Client struct {
	internal *azcore.Client
	endpoint string
}

// ClientOptions contains the optional values for creating a [Client].
type ClientOptions struct {
	azcore.ClientOptions
}

// NewClientWithNoCredential creates a new instance of Client with the specified values.
//   - endpoint - Service host
//   - ClientOptions - ClientOptions contains the optional values for creating a [Client]
func NewClientWithNoCredential(endpoint string, options *ClientOptions) (*Client, error) {
	if options == nil {
		options = &ClientOptions{}
	}
	cl, err := azcore.NewClient(moduleName, moduleVersion, runtime.PipelineOptions{}, &options.ClientOptions)
	if err != nil {
		return nil, err
	}
	client := &Client{
		endpoint: endpoint,
		internal: cl,
	}
	return client, nil
}

// Patch - body should not be optional
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - ClientPatchOptions contains the optional parameters for the Client.Patch method.
func (client *Client) Patch(ctx context.Context, body Widget, options *ClientPatchOptions) (ClientPatchResponse, error) {
	var err error
	ctx, endSpan := runtime.StartSpan(ctx, "Client.Patch", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.patchCreateRequest(ctx, body, options)
	if err != nil {
		return ClientPatchResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ClientPatchResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ClientPatchResponse{}, err
	}
	return ClientPatchResponse{}, nil
}

// patchCreateRequest creates the Patch request.
func (client *Client) patchCreateRequest(ctx context.Context, body Widget, _ *ClientPatchOptions) (*policy.Request, error) {
	req, err := runtime.NewRequest(ctx, http.MethodPatch, client.endpoint)
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// Post - body should be optional
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - ClientPostOptions contains the optional parameters for the Client.Post method.
func (client *Client) Post(ctx context.Context, options *ClientPostOptions) (ClientPostResponse, error) {
	var err error
	ctx, endSpan := runtime.StartSpan(ctx, "Client.Post", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.postCreateRequest(ctx, options)
	if err != nil {
		return ClientPostResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ClientPostResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ClientPostResponse{}, err
	}
	return ClientPostResponse{}, nil
}

// postCreateRequest creates the Post request.
func (client *Client) postCreateRequest(ctx context.Context, options *ClientPostOptions) (*policy.Request, error) {
	req, err := runtime.NewRequest(ctx, http.MethodPost, client.endpoint)
	if err != nil {
		return nil, err
	}
	if options != nil && options.Body != nil {
		req.Raw().Header["Content-Type"] = []string{"application/json"}
		if err := runtime.MarshalAsJSON(req, *options.Body); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// Put - body should not be optional
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - ClientPutOptions contains the optional parameters for the Client.Put method.
func (client *Client) Put(ctx context.Context, body Widget, options *ClientPutOptions) (ClientPutResponse, error) {
	var err error
	ctx, endSpan := runtime.StartSpan(ctx, "Client.Put", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putCreateRequest(ctx, body, options)
	if err != nil {
		return ClientPutResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ClientPutResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ClientPutResponse{}, err
	}
	return ClientPutResponse{}, nil
}

// putCreateRequest creates the Put request.
func (client *Client) putCreateRequest(ctx context.Context, body Widget, _ *ClientPutOptions) (*policy.Request, error) {
	req, err := runtime.NewRequest(ctx, http.MethodPut, client.endpoint)
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}
