// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package nooptionalbody

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
)

// BodyWidgetsClient contains the methods for the BodyWidgets group.
// Don't use this type directly, use [BodyClient.NewBodyWidgetsClient] instead.
type BodyWidgetsClient struct {
	internal *azcore.Client
	endpoint string
}

// Put -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - BodyWidgetsClientPutOptions contains the optional parameters for the BodyWidgetsClient.Put method.
func (client *BodyWidgetsClient) Put(ctx context.Context, body Widget, options *BodyWidgetsClientPutOptions) (BodyWidgetsClientPutResponse, error) {
	var err error
	ctx, endSpan := runtime.StartSpan(ctx, "BodyWidgetsClient.Put", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putCreateRequest(ctx, body, options)
	if err != nil {
		return BodyWidgetsClientPutResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BodyWidgetsClientPutResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return BodyWidgetsClientPutResponse{}, err
	}
	return BodyWidgetsClientPutResponse{}, nil
}

// putCreateRequest creates the Put request.
func (client *BodyWidgetsClient) putCreateRequest(ctx context.Context, body Widget, _ *BodyWidgetsClientPutOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/widgets"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}
