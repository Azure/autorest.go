// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armloadtestservice

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// LoadTestMgmtClient contains the methods for the LoadTestMgmt group.
// Don't use this type directly, use NewLoadTestMgmtClient() instead.
type LoadTestMgmtClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewLoadTestMgmtClient creates a new instance of LoadTestMgmtClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewLoadTestMgmtClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*LoadTestMgmtClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &LoadTestMgmtClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CheckAvailabilityQuota - Check Quota Availability on quota bucket per region per subscription.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - location - The name of the Azure region.
//   - quotaBucketName - The quota name.
//   - quotaBucketRequest - The content of the action request
//   - options - LoadTestMgmtClientCheckAvailabilityQuotaOptions contains the optional parameters for the LoadTestMgmtClient.CheckAvailabilityQuota
//     method.
func (client *LoadTestMgmtClient) CheckAvailabilityQuota(ctx context.Context, location string, quotaBucketName string, quotaBucketRequest QuotaBucketRequest, options *LoadTestMgmtClientCheckAvailabilityQuotaOptions) (LoadTestMgmtClientCheckAvailabilityQuotaResponse, error) {
	var err error
	const operationName = "LoadTestMgmtClient.CheckAvailabilityQuota"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.checkAvailabilityQuotaCreateRequest(ctx, location, quotaBucketName, quotaBucketRequest, options)
	if err != nil {
		return LoadTestMgmtClientCheckAvailabilityQuotaResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return LoadTestMgmtClientCheckAvailabilityQuotaResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return LoadTestMgmtClientCheckAvailabilityQuotaResponse{}, err
	}
	resp, err := client.checkAvailabilityQuotaHandleResponse(httpResp)
	return resp, err
}

// checkAvailabilityQuotaCreateRequest creates the CheckAvailabilityQuota request.
func (client *LoadTestMgmtClient) checkAvailabilityQuotaCreateRequest(ctx context.Context, location string, quotaBucketName string, quotaBucketRequest QuotaBucketRequest, _ *LoadTestMgmtClientCheckAvailabilityQuotaOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/locations/{location}/quotas/{quotaBucketName}/checkAvailabilityQuota"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if quotaBucketName == "" {
		return nil, errors.New("parameter quotaBucketName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{quotaBucketName}", url.PathEscape(quotaBucketName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, quotaBucketRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// checkAvailabilityQuotaHandleResponse handles the CheckAvailabilityQuota response.
func (client *LoadTestMgmtClient) checkAvailabilityQuotaHandleResponse(resp *http.Response) (LoadTestMgmtClientCheckAvailabilityQuotaResponse, error) {
	result := LoadTestMgmtClientCheckAvailabilityQuotaResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CheckQuotaAvailabilityResponse); err != nil {
		return LoadTestMgmtClientCheckAvailabilityQuotaResponse{}, err
	}
	return result, nil
}

// BeginCreateOrUpdateLoadtest - Create a LoadTestResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - loadTestName - Load Test name
//   - loadTestResource - Resource create parameters.
//   - options - LoadTestMgmtClientBeginCreateOrUpdateLoadtestOptions contains the optional parameters for the LoadTestMgmtClient.BeginCreateOrUpdateLoadtest
//     method.
func (client *LoadTestMgmtClient) BeginCreateOrUpdateLoadtest(ctx context.Context, resourceGroupName string, loadTestName string, loadTestResource LoadTestResource, options *LoadTestMgmtClientBeginCreateOrUpdateLoadtestOptions) (*runtime.Poller[LoadTestMgmtClientCreateOrUpdateLoadtestResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdateLoadtest(ctx, resourceGroupName, loadTestName, loadTestResource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[LoadTestMgmtClientCreateOrUpdateLoadtestResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[LoadTestMgmtClientCreateOrUpdateLoadtestResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdateLoadtest - Create a LoadTestResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
func (client *LoadTestMgmtClient) createOrUpdateLoadtest(ctx context.Context, resourceGroupName string, loadTestName string, loadTestResource LoadTestResource, options *LoadTestMgmtClientBeginCreateOrUpdateLoadtestOptions) (*http.Response, error) {
	var err error
	const operationName = "LoadTestMgmtClient.BeginCreateOrUpdateLoadtest"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateLoadtestCreateRequest(ctx, resourceGroupName, loadTestName, loadTestResource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateLoadtestCreateRequest creates the CreateOrUpdateLoadtest request.
func (client *LoadTestMgmtClient) createOrUpdateLoadtestCreateRequest(ctx context.Context, resourceGroupName string, loadTestName string, loadTestResource LoadTestResource, _ *LoadTestMgmtClientBeginCreateOrUpdateLoadtestOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/loadTests/{loadTestName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if loadTestName == "" {
		return nil, errors.New("parameter loadTestName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{loadTestName}", url.PathEscape(loadTestName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, loadTestResource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDeleteLoadtest - Delete a LoadTestResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - loadTestName - Load Test name
//   - options - LoadTestMgmtClientBeginDeleteLoadtestOptions contains the optional parameters for the LoadTestMgmtClient.BeginDeleteLoadtest
//     method.
func (client *LoadTestMgmtClient) BeginDeleteLoadtest(ctx context.Context, resourceGroupName string, loadTestName string, options *LoadTestMgmtClientBeginDeleteLoadtestOptions) (*runtime.Poller[LoadTestMgmtClientDeleteLoadtestResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteLoadtest(ctx, resourceGroupName, loadTestName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[LoadTestMgmtClientDeleteLoadtestResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[LoadTestMgmtClientDeleteLoadtestResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// DeleteLoadtest - Delete a LoadTestResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
func (client *LoadTestMgmtClient) deleteLoadtest(ctx context.Context, resourceGroupName string, loadTestName string, options *LoadTestMgmtClientBeginDeleteLoadtestOptions) (*http.Response, error) {
	var err error
	const operationName = "LoadTestMgmtClient.BeginDeleteLoadtest"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteLoadtestCreateRequest(ctx, resourceGroupName, loadTestName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteLoadtestCreateRequest creates the DeleteLoadtest request.
func (client *LoadTestMgmtClient) deleteLoadtestCreateRequest(ctx context.Context, resourceGroupName string, loadTestName string, _ *LoadTestMgmtClientBeginDeleteLoadtestOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/loadTests/{loadTestName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if loadTestName == "" {
		return nil, errors.New("parameter loadTestName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{loadTestName}", url.PathEscape(loadTestName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// GetLoadtest - Get a LoadTestResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - loadTestName - Load Test name
//   - options - LoadTestMgmtClientGetLoadtestOptions contains the optional parameters for the LoadTestMgmtClient.GetLoadtest
//     method.
func (client *LoadTestMgmtClient) GetLoadtest(ctx context.Context, resourceGroupName string, loadTestName string, options *LoadTestMgmtClientGetLoadtestOptions) (LoadTestMgmtClientGetLoadtestResponse, error) {
	var err error
	const operationName = "LoadTestMgmtClient.GetLoadtest"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getLoadtestCreateRequest(ctx, resourceGroupName, loadTestName, options)
	if err != nil {
		return LoadTestMgmtClientGetLoadtestResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return LoadTestMgmtClientGetLoadtestResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return LoadTestMgmtClientGetLoadtestResponse{}, err
	}
	resp, err := client.getLoadtestHandleResponse(httpResp)
	return resp, err
}

// getLoadtestCreateRequest creates the GetLoadtest request.
func (client *LoadTestMgmtClient) getLoadtestCreateRequest(ctx context.Context, resourceGroupName string, loadTestName string, _ *LoadTestMgmtClientGetLoadtestOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/loadTests/{loadTestName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if loadTestName == "" {
		return nil, errors.New("parameter loadTestName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{loadTestName}", url.PathEscape(loadTestName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getLoadtestHandleResponse handles the GetLoadtest response.
func (client *LoadTestMgmtClient) getLoadtestHandleResponse(resp *http.Response) (LoadTestMgmtClientGetLoadtestResponse, error) {
	result := LoadTestMgmtClientGetLoadtestResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.LoadTestResource); err != nil {
		return LoadTestMgmtClientGetLoadtestResponse{}, err
	}
	return result, nil
}

// GetQuota - Get the available quota for a quota bucket per region per subscription.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - location - The name of the Azure region.
//   - quotaBucketName - The quota name.
//   - options - LoadTestMgmtClientGetQuotaOptions contains the optional parameters for the LoadTestMgmtClient.GetQuota method.
func (client *LoadTestMgmtClient) GetQuota(ctx context.Context, location string, quotaBucketName string, options *LoadTestMgmtClientGetQuotaOptions) (LoadTestMgmtClientGetQuotaResponse, error) {
	var err error
	const operationName = "LoadTestMgmtClient.GetQuota"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getQuotaCreateRequest(ctx, location, quotaBucketName, options)
	if err != nil {
		return LoadTestMgmtClientGetQuotaResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return LoadTestMgmtClientGetQuotaResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return LoadTestMgmtClientGetQuotaResponse{}, err
	}
	resp, err := client.getQuotaHandleResponse(httpResp)
	return resp, err
}

// getQuotaCreateRequest creates the GetQuota request.
func (client *LoadTestMgmtClient) getQuotaCreateRequest(ctx context.Context, location string, quotaBucketName string, _ *LoadTestMgmtClientGetQuotaOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/locations/{location}/quotas/{quotaBucketName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if quotaBucketName == "" {
		return nil, errors.New("parameter quotaBucketName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{quotaBucketName}", url.PathEscape(quotaBucketName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getQuotaHandleResponse handles the GetQuota response.
func (client *LoadTestMgmtClient) getQuotaHandleResponse(resp *http.Response) (LoadTestMgmtClientGetQuotaResponse, error) {
	result := LoadTestMgmtClientGetQuotaResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.QuotaResource); err != nil {
		return LoadTestMgmtClientGetQuotaResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - List LoadTestResource resources by resource group
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - LoadTestMgmtClientListByResourceGroupOptions contains the optional parameters for the LoadTestMgmtClient.NewListByResourceGroupPager
//     method.
func (client *LoadTestMgmtClient) NewListByResourceGroupPager(resourceGroupName string, options *LoadTestMgmtClientListByResourceGroupOptions) *runtime.Pager[LoadTestMgmtClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[LoadTestMgmtClientListByResourceGroupResponse]{
		More: func(page LoadTestMgmtClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *LoadTestMgmtClientListByResourceGroupResponse) (LoadTestMgmtClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "LoadTestMgmtClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return LoadTestMgmtClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *LoadTestMgmtClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, _ *LoadTestMgmtClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/loadTests"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *LoadTestMgmtClient) listByResourceGroupHandleResponse(resp *http.Response) (LoadTestMgmtClientListByResourceGroupResponse, error) {
	result := LoadTestMgmtClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.LoadTestResourceListResult); err != nil {
		return LoadTestMgmtClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List LoadTestResource resources by subscription ID
//
// Generated from API version 2023-12-01-preview
//   - options - LoadTestMgmtClientListBySubscriptionOptions contains the optional parameters for the LoadTestMgmtClient.NewListBySubscriptionPager
//     method.
func (client *LoadTestMgmtClient) NewListBySubscriptionPager(options *LoadTestMgmtClientListBySubscriptionOptions) *runtime.Pager[LoadTestMgmtClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[LoadTestMgmtClientListBySubscriptionResponse]{
		More: func(page LoadTestMgmtClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *LoadTestMgmtClientListBySubscriptionResponse) (LoadTestMgmtClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "LoadTestMgmtClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return LoadTestMgmtClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *LoadTestMgmtClient) listBySubscriptionCreateRequest(ctx context.Context, _ *LoadTestMgmtClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/loadTests"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *LoadTestMgmtClient) listBySubscriptionHandleResponse(resp *http.Response) (LoadTestMgmtClientListBySubscriptionResponse, error) {
	result := LoadTestMgmtClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.LoadTestResourceListResult); err != nil {
		return LoadTestMgmtClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// NewListQuotaPager - List quotas for a given subscription Id.
//
// Generated from API version 2023-12-01-preview
//   - location - The name of the Azure region.
//   - options - LoadTestMgmtClientListQuotaOptions contains the optional parameters for the LoadTestMgmtClient.NewListQuotaPager
//     method.
func (client *LoadTestMgmtClient) NewListQuotaPager(location string, options *LoadTestMgmtClientListQuotaOptions) *runtime.Pager[LoadTestMgmtClientListQuotaResponse] {
	return runtime.NewPager(runtime.PagingHandler[LoadTestMgmtClientListQuotaResponse]{
		More: func(page LoadTestMgmtClientListQuotaResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *LoadTestMgmtClientListQuotaResponse) (LoadTestMgmtClientListQuotaResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "LoadTestMgmtClient.NewListQuotaPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listQuotaCreateRequest(ctx, location, options)
			}, nil)
			if err != nil {
				return LoadTestMgmtClientListQuotaResponse{}, err
			}
			return client.listQuotaHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listQuotaCreateRequest creates the ListQuota request.
func (client *LoadTestMgmtClient) listQuotaCreateRequest(ctx context.Context, location string, _ *LoadTestMgmtClientListQuotaOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/locations/{location}/quotas"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listQuotaHandleResponse handles the ListQuota response.
func (client *LoadTestMgmtClient) listQuotaHandleResponse(resp *http.Response) (LoadTestMgmtClientListQuotaResponse, error) {
	result := LoadTestMgmtClientListQuotaResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.QuotaResourceListResult); err != nil {
		return LoadTestMgmtClientListQuotaResponse{}, err
	}
	return result, nil
}

// NewOutboundNetworkDependenciesEndpointsPager - Lists the endpoints that agents may call as part of load testing.
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - loadTestName - Load Test name
//   - options - LoadTestMgmtClientOutboundNetworkDependenciesEndpointsOptions contains the optional parameters for the LoadTestMgmtClient.NewOutboundNetworkDependenciesEndpointsPager
//     method.
func (client *LoadTestMgmtClient) NewOutboundNetworkDependenciesEndpointsPager(resourceGroupName string, loadTestName string, options *LoadTestMgmtClientOutboundNetworkDependenciesEndpointsOptions) *runtime.Pager[LoadTestMgmtClientOutboundNetworkDependenciesEndpointsResponse] {
	return runtime.NewPager(runtime.PagingHandler[LoadTestMgmtClientOutboundNetworkDependenciesEndpointsResponse]{
		More: func(page LoadTestMgmtClientOutboundNetworkDependenciesEndpointsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *LoadTestMgmtClientOutboundNetworkDependenciesEndpointsResponse) (LoadTestMgmtClientOutboundNetworkDependenciesEndpointsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "LoadTestMgmtClient.NewOutboundNetworkDependenciesEndpointsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.outboundNetworkDependenciesEndpointsCreateRequest(ctx, resourceGroupName, loadTestName, options)
			}, nil)
			if err != nil {
				return LoadTestMgmtClientOutboundNetworkDependenciesEndpointsResponse{}, err
			}
			return client.outboundNetworkDependenciesEndpointsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// outboundNetworkDependenciesEndpointsCreateRequest creates the OutboundNetworkDependenciesEndpoints request.
func (client *LoadTestMgmtClient) outboundNetworkDependenciesEndpointsCreateRequest(ctx context.Context, resourceGroupName string, loadTestName string, _ *LoadTestMgmtClientOutboundNetworkDependenciesEndpointsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/loadTests/{loadTestName}/outboundNetworkDependenciesEndpoints"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if loadTestName == "" {
		return nil, errors.New("parameter loadTestName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{loadTestName}", url.PathEscape(loadTestName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// outboundNetworkDependenciesEndpointsHandleResponse handles the OutboundNetworkDependenciesEndpoints response.
func (client *LoadTestMgmtClient) outboundNetworkDependenciesEndpointsHandleResponse(resp *http.Response) (LoadTestMgmtClientOutboundNetworkDependenciesEndpointsResponse, error) {
	result := LoadTestMgmtClientOutboundNetworkDependenciesEndpointsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PagedOutboundEnvironmentEndpoint); err != nil {
		return LoadTestMgmtClientOutboundNetworkDependenciesEndpointsResponse{}, err
	}
	return result, nil
}

// BeginUpdateLoadtest - Update a LoadTestResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - loadTestName - Load Test name
//   - loadTestResourcePatchRequestBody - The resource properties to be updated.
//   - options - LoadTestMgmtClientBeginUpdateLoadtestOptions contains the optional parameters for the LoadTestMgmtClient.BeginUpdateLoadtest
//     method.
func (client *LoadTestMgmtClient) BeginUpdateLoadtest(ctx context.Context, resourceGroupName string, loadTestName string, loadTestResourcePatchRequestBody LoadTestResourceUpdate, options *LoadTestMgmtClientBeginUpdateLoadtestOptions) (*runtime.Poller[LoadTestMgmtClientUpdateLoadtestResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.updateLoadtest(ctx, resourceGroupName, loadTestName, loadTestResourcePatchRequestBody, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[LoadTestMgmtClientUpdateLoadtestResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[LoadTestMgmtClientUpdateLoadtestResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// UpdateLoadtest - Update a LoadTestResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
func (client *LoadTestMgmtClient) updateLoadtest(ctx context.Context, resourceGroupName string, loadTestName string, loadTestResourcePatchRequestBody LoadTestResourceUpdate, options *LoadTestMgmtClientBeginUpdateLoadtestOptions) (*http.Response, error) {
	var err error
	const operationName = "LoadTestMgmtClient.BeginUpdateLoadtest"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateLoadtestCreateRequest(ctx, resourceGroupName, loadTestName, loadTestResourcePatchRequestBody, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateLoadtestCreateRequest creates the UpdateLoadtest request.
func (client *LoadTestMgmtClient) updateLoadtestCreateRequest(ctx context.Context, resourceGroupName string, loadTestName string, loadTestResourcePatchRequestBody LoadTestResourceUpdate, _ *LoadTestMgmtClientBeginUpdateLoadtestOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/loadTests/{loadTestName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if loadTestName == "" {
		return nil, errors.New("parameter loadTestName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{loadTestName}", url.PathEscape(loadTestName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, loadTestResourcePatchRequestBody); err != nil {
		return nil, err
	}
	return req, nil
}
