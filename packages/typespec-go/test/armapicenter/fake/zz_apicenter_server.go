// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ApiCenterServer is a fake server for instances of the armapicenter.ApiCenterClient type.
type ApiCenterServer struct {
	// ApiDefinitionsServer contains the fakes for client ApiDefinitionsClient
	ApiDefinitionsServer ApiDefinitionsServer

	// ApiVersionsServer contains the fakes for client ApiVersionsClient
	ApiVersionsServer ApiVersionsServer

	// ApisServer contains the fakes for client ApisClient
	ApisServer ApisServer

	// DeploymentsServer contains the fakes for client DeploymentsClient
	DeploymentsServer DeploymentsServer

	// EnvironmentsServer contains the fakes for client EnvironmentsClient
	EnvironmentsServer EnvironmentsServer

	// MetadataSchemasServer contains the fakes for client MetadataSchemasClient
	MetadataSchemasServer MetadataSchemasServer

	// OperationsServer contains the fakes for client OperationsClient
	OperationsServer OperationsServer

	// ServicesServer contains the fakes for client ServicesClient
	ServicesServer ServicesServer

	// WorkspacesServer contains the fakes for client WorkspacesClient
	WorkspacesServer WorkspacesServer
}

// NewApiCenterServerTransport creates a new instance of ApiCenterServerTransport with the provided implementation.
// The returned ApiCenterServerTransport instance is connected to an instance of armapicenter.ApiCenterClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewApiCenterServerTransport(srv *ApiCenterServer) *ApiCenterServerTransport {
	return &ApiCenterServerTransport{srv: srv}
}

// ApiCenterServerTransport connects instances of armapicenter.ApiCenterClient to instances of ApiCenterServer.
// Don't use this type directly, use NewApiCenterServerTransport instead.
type ApiCenterServerTransport struct {
	srv                     *ApiCenterServer
	trMu                    sync.Mutex
	trApiDefinitionsServer  *ApiDefinitionsServerTransport
	trApiVersionsServer     *ApiVersionsServerTransport
	trApisServer            *ApisServerTransport
	trDeploymentsServer     *DeploymentsServerTransport
	trEnvironmentsServer    *EnvironmentsServerTransport
	trMetadataSchemasServer *MetadataSchemasServerTransport
	trOperationsServer      *OperationsServerTransport
	trServicesServer        *ServicesServerTransport
	trWorkspacesServer      *WorkspacesServerTransport
}

// Do implements the policy.Transporter interface for ApiCenterServerTransport.
func (a *ApiCenterServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return a.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (a *ApiCenterServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "ApiDefinitionsClient":
		initServer(&a.trMu, &a.trApiDefinitionsServer, func() *ApiDefinitionsServerTransport {
			return NewApiDefinitionsServerTransport(&a.srv.ApiDefinitionsServer)
		})
		resp, err = a.trApiDefinitionsServer.Do(req)
	case "ApiVersionsClient":
		initServer(&a.trMu, &a.trApiVersionsServer, func() *ApiVersionsServerTransport {
			return NewApiVersionsServerTransport(&a.srv.ApiVersionsServer)
		})
		resp, err = a.trApiVersionsServer.Do(req)
	case "ApisClient":
		initServer(&a.trMu, &a.trApisServer, func() *ApisServerTransport {
			return NewApisServerTransport(&a.srv.ApisServer)
		})
		resp, err = a.trApisServer.Do(req)
	case "DeploymentsClient":
		initServer(&a.trMu, &a.trDeploymentsServer, func() *DeploymentsServerTransport {
			return NewDeploymentsServerTransport(&a.srv.DeploymentsServer)
		})
		resp, err = a.trDeploymentsServer.Do(req)
	case "EnvironmentsClient":
		initServer(&a.trMu, &a.trEnvironmentsServer, func() *EnvironmentsServerTransport {
			return NewEnvironmentsServerTransport(&a.srv.EnvironmentsServer)
		})
		resp, err = a.trEnvironmentsServer.Do(req)
	case "MetadataSchemasClient":
		initServer(&a.trMu, &a.trMetadataSchemasServer, func() *MetadataSchemasServerTransport {
			return NewMetadataSchemasServerTransport(&a.srv.MetadataSchemasServer)
		})
		resp, err = a.trMetadataSchemasServer.Do(req)
	case "OperationsClient":
		initServer(&a.trMu, &a.trOperationsServer, func() *OperationsServerTransport {
			return NewOperationsServerTransport(&a.srv.OperationsServer)
		})
		resp, err = a.trOperationsServer.Do(req)
	case "ServicesClient":
		initServer(&a.trMu, &a.trServicesServer, func() *ServicesServerTransport {
			return NewServicesServerTransport(&a.srv.ServicesServer)
		})
		resp, err = a.trServicesServer.Do(req)
	case "WorkspacesClient":
		initServer(&a.trMu, &a.trWorkspacesServer, func() *WorkspacesServerTransport {
			return NewWorkspacesServerTransport(&a.srv.WorkspacesServer)
		})
		resp, err = a.trWorkspacesServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}
