// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"net/http"
	"strings"
	"sync"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// PageableServer is a fake server for instances of the pageablegroup.PageableClient type.
type PageableServer struct {
	// PageableServerDrivenPaginationServer contains the fakes for client PageableServerDrivenPaginationClient
	PageableServerDrivenPaginationServer PageableServerDrivenPaginationServer
}

// NewPageableServerTransport creates a new instance of PageableServerTransport with the provided implementation.
// The returned PageableServerTransport instance is connected to an instance of pageablegroup.PageableClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewPageableServerTransport(srv *PageableServer) *PageableServerTransport {
	return &PageableServerTransport{srv: srv}
}

// PageableServerTransport connects instances of pageablegroup.PageableClient to instances of PageableServer.
// Don't use this type directly, use NewPageableServerTransport instead.
type PageableServerTransport struct {
	srv                                    *PageableServer
	trMu                                   sync.Mutex
	trPageableServerDrivenPaginationServer *PageableServerDrivenPaginationServerTransport
}

// Do implements the policy.Transporter interface for PageableServerTransport.
func (p *PageableServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return p.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (p *PageableServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "PageableServerDrivenPaginationClient":
		initServer(&p.trMu, &p.trPageableServerDrivenPaginationServer, func() *PageableServerDrivenPaginationServerTransport {
			return NewPageableServerDrivenPaginationServerTransport(&p.srv.PageableServerDrivenPaginationServer)
		})
		resp, err = p.trPageableServerDrivenPaginationServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}

// set this to conditionally intercept incoming requests to PageableServerTransport
var pageableServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
