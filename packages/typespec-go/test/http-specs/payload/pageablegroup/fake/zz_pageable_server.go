// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"pageablegroup"
	"strings"
	"sync"
)

// PageableServer is a fake server for instances of the pageablegroup.PageableClient type.
type PageableServer struct {
	// PageableServerDrivenPaginationServer contains the fakes for client PageableServerDrivenPaginationClient
	PageableServerDrivenPaginationServer PageableServerDrivenPaginationServer

	// NewListWithoutContinuationPager is the fake for method PageableClient.NewListWithoutContinuationPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListWithoutContinuationPager func(options *pageablegroup.PageableClientListWithoutContinuationOptions) (resp azfake.PagerResponder[pageablegroup.PageableClientListWithoutContinuationResponse])
}

// NewPageableServerTransport creates a new instance of PageableServerTransport with the provided implementation.
// The returned PageableServerTransport instance is connected to an instance of pageablegroup.PageableClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewPageableServerTransport(srv *PageableServer) *PageableServerTransport {
	return &PageableServerTransport{
		srv:                             srv,
		newListWithoutContinuationPager: newTracker[azfake.PagerResponder[pageablegroup.PageableClientListWithoutContinuationResponse]](),
	}
}

// PageableServerTransport connects instances of pageablegroup.PageableClient to instances of PageableServer.
// Don't use this type directly, use NewPageableServerTransport instead.
type PageableServerTransport struct {
	srv                                    *PageableServer
	trMu                                   sync.Mutex
	trPageableServerDrivenPaginationServer *PageableServerDrivenPaginationServerTransport
	newListWithoutContinuationPager        *tracker[azfake.PagerResponder[pageablegroup.PageableClientListWithoutContinuationResponse]]
}

// Do implements the policy.Transporter interface for PageableServerTransport.
func (p *PageableServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	if client := method[:strings.Index(method, ".")]; client != "PageableClient" {
		return p.dispatchToClientFake(req, client)
	}
	return p.dispatchToMethodFake(req, method)
}

func (p *PageableServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "PageableServerDrivenPaginationClient":
		initServer(&p.trMu, &p.trPageableServerDrivenPaginationServer, func() *PageableServerDrivenPaginationServerTransport {
			return NewPageableServerDrivenPaginationServerTransport(&p.srv.PageableServerDrivenPaginationServer)
		})
		resp, err = p.trPageableServerDrivenPaginationServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}

func (p *PageableServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if pageableServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = pageableServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "PageableClient.NewListWithoutContinuationPager":
				res.resp, res.err = p.dispatchNewListWithoutContinuationPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (p *PageableServerTransport) dispatchNewListWithoutContinuationPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewListWithoutContinuationPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListWithoutContinuationPager not implemented")}
	}
	newListWithoutContinuationPager := p.newListWithoutContinuationPager.get(req)
	if newListWithoutContinuationPager == nil {
		resp := p.srv.NewListWithoutContinuationPager(nil)
		newListWithoutContinuationPager = &resp
		p.newListWithoutContinuationPager.add(req, newListWithoutContinuationPager)
	}
	resp, err := server.PagerResponderNext(newListWithoutContinuationPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newListWithoutContinuationPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListWithoutContinuationPager) {
		p.newListWithoutContinuationPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to PageableServerTransport
var pageableServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
