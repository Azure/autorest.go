// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"pageablegroup"
	"strconv"
)

// PageablePageSizeServer is a fake server for instances of the pageablegroup.PageablePageSizeClient type.
type PageablePageSizeServer struct {
	// NewListWithPageSizePager is the fake for method PageablePageSizeClient.NewListWithPageSizePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListWithPageSizePager func(options *pageablegroup.PageablePageSizeClientListWithPageSizeOptions) (resp azfake.PagerResponder[pageablegroup.PageablePageSizeClientListWithPageSizeResponse])

	// NewListWithoutContinuationPager is the fake for method PageablePageSizeClient.NewListWithoutContinuationPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListWithoutContinuationPager func(options *pageablegroup.PageablePageSizeClientListWithoutContinuationOptions) (resp azfake.PagerResponder[pageablegroup.PageablePageSizeClientListWithoutContinuationResponse])
}

// NewPageablePageSizeServerTransport creates a new instance of PageablePageSizeServerTransport with the provided implementation.
// The returned PageablePageSizeServerTransport instance is connected to an instance of pageablegroup.PageablePageSizeClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewPageablePageSizeServerTransport(srv *PageablePageSizeServer) *PageablePageSizeServerTransport {
	return &PageablePageSizeServerTransport{
		srv:                             srv,
		newListWithPageSizePager:        newTracker[azfake.PagerResponder[pageablegroup.PageablePageSizeClientListWithPageSizeResponse]](),
		newListWithoutContinuationPager: newTracker[azfake.PagerResponder[pageablegroup.PageablePageSizeClientListWithoutContinuationResponse]](),
	}
}

// PageablePageSizeServerTransport connects instances of pageablegroup.PageablePageSizeClient to instances of PageablePageSizeServer.
// Don't use this type directly, use NewPageablePageSizeServerTransport instead.
type PageablePageSizeServerTransport struct {
	srv                             *PageablePageSizeServer
	newListWithPageSizePager        *tracker[azfake.PagerResponder[pageablegroup.PageablePageSizeClientListWithPageSizeResponse]]
	newListWithoutContinuationPager *tracker[azfake.PagerResponder[pageablegroup.PageablePageSizeClientListWithoutContinuationResponse]]
}

// Do implements the policy.Transporter interface for PageablePageSizeServerTransport.
func (p *PageablePageSizeServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return p.dispatchToMethodFake(req, method)
}

func (p *PageablePageSizeServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if pageablePageSizeServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = pageablePageSizeServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "PageablePageSizeClient.NewListWithPageSizePager":
				res.resp, res.err = p.dispatchNewListWithPageSizePager(req)
			case "PageablePageSizeClient.NewListWithoutContinuationPager":
				res.resp, res.err = p.dispatchNewListWithoutContinuationPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (p *PageablePageSizeServerTransport) dispatchNewListWithPageSizePager(req *http.Request) (*http.Response, error) {
	if p.srv.NewListWithPageSizePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListWithPageSizePager not implemented")}
	}
	newListWithPageSizePager := p.newListWithPageSizePager.get(req)
	if newListWithPageSizePager == nil {
		qp := req.URL.Query()
		pageSizeUnescaped, err := url.QueryUnescape(qp.Get("pageSize"))
		if err != nil {
			return nil, err
		}
		pageSizeParam, err := parseOptional(pageSizeUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		var options *pageablegroup.PageablePageSizeClientListWithPageSizeOptions
		if pageSizeParam != nil {
			options = &pageablegroup.PageablePageSizeClientListWithPageSizeOptions{
				PageSize: pageSizeParam,
			}
		}
		resp := p.srv.NewListWithPageSizePager(options)
		newListWithPageSizePager = &resp
		p.newListWithPageSizePager.add(req, newListWithPageSizePager)
	}
	resp, err := server.PagerResponderNext(newListWithPageSizePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newListWithPageSizePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListWithPageSizePager) {
		p.newListWithPageSizePager.remove(req)
	}
	return resp, nil
}

func (p *PageablePageSizeServerTransport) dispatchNewListWithoutContinuationPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewListWithoutContinuationPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListWithoutContinuationPager not implemented")}
	}
	newListWithoutContinuationPager := p.newListWithoutContinuationPager.get(req)
	if newListWithoutContinuationPager == nil {
		resp := p.srv.NewListWithoutContinuationPager(nil)
		newListWithoutContinuationPager = &resp
		p.newListWithoutContinuationPager.add(req, newListWithoutContinuationPager)
	}
	resp, err := server.PagerResponderNext(newListWithoutContinuationPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newListWithoutContinuationPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListWithoutContinuationPager) {
		p.newListWithoutContinuationPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to PageablePageSizeServerTransport
var pageablePageSizeServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
