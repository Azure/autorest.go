// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
	"pageablegroup"
	"strings"
	"sync"
)

// PageableServerDrivenPaginationServer is a fake server for instances of the pageablegroup.PageableServerDrivenPaginationClient type.
type PageableServerDrivenPaginationServer struct {
	// PageableServerDrivenPaginationContinuationTokenServer contains the fakes for client PageableServerDrivenPaginationContinuationTokenClient
	PageableServerDrivenPaginationContinuationTokenServer PageableServerDrivenPaginationContinuationTokenServer

	// NewLinkPager is the fake for method PageableServerDrivenPaginationClient.NewLinkPager
	// HTTP status codes to indicate success: http.StatusOK
	NewLinkPager func(options *pageablegroup.PageableServerDrivenPaginationClientLinkOptions) (resp azfake.PagerResponder[pageablegroup.PageableServerDrivenPaginationClientLinkResponse])

	// NewNestedLinkPager is the fake for method PageableServerDrivenPaginationClient.NewNestedLinkPager
	// HTTP status codes to indicate success: http.StatusOK
	NewNestedLinkPager func(options *pageablegroup.PageableServerDrivenPaginationClientNestedLinkOptions) (resp azfake.PagerResponder[pageablegroup.PageableServerDrivenPaginationClientNestedLinkResponse])
}

// NewPageableServerDrivenPaginationServerTransport creates a new instance of PageableServerDrivenPaginationServerTransport with the provided implementation.
// The returned PageableServerDrivenPaginationServerTransport instance is connected to an instance of pageablegroup.PageableServerDrivenPaginationClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewPageableServerDrivenPaginationServerTransport(srv *PageableServerDrivenPaginationServer) *PageableServerDrivenPaginationServerTransport {
	return &PageableServerDrivenPaginationServerTransport{
		srv:                srv,
		newLinkPager:       newTracker[azfake.PagerResponder[pageablegroup.PageableServerDrivenPaginationClientLinkResponse]](),
		newNestedLinkPager: newTracker[azfake.PagerResponder[pageablegroup.PageableServerDrivenPaginationClientNestedLinkResponse]](),
	}
}

// PageableServerDrivenPaginationServerTransport connects instances of pageablegroup.PageableServerDrivenPaginationClient to instances of PageableServerDrivenPaginationServer.
// Don't use this type directly, use NewPageableServerDrivenPaginationServerTransport instead.
type PageableServerDrivenPaginationServerTransport struct {
	srv                                                     *PageableServerDrivenPaginationServer
	trMu                                                    sync.Mutex
	trPageableServerDrivenPaginationContinuationTokenServer *PageableServerDrivenPaginationContinuationTokenServerTransport
	newLinkPager                                            *tracker[azfake.PagerResponder[pageablegroup.PageableServerDrivenPaginationClientLinkResponse]]
	newNestedLinkPager                                      *tracker[azfake.PagerResponder[pageablegroup.PageableServerDrivenPaginationClientNestedLinkResponse]]
}

// Do implements the policy.Transporter interface for PageableServerDrivenPaginationServerTransport.
func (p *PageableServerDrivenPaginationServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	if client := method[:strings.Index(method, ".")]; client != "PageableServerDrivenPaginationClient" {
		return p.dispatchToClientFake(req, client)
	}
	return p.dispatchToMethodFake(req, method)
}

func (p *PageableServerDrivenPaginationServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "PageableServerDrivenPaginationContinuationTokenClient":
		initServer(&p.trMu, &p.trPageableServerDrivenPaginationContinuationTokenServer, func() *PageableServerDrivenPaginationContinuationTokenServerTransport {
			return NewPageableServerDrivenPaginationContinuationTokenServerTransport(&p.srv.PageableServerDrivenPaginationContinuationTokenServer)
		})
		resp, err = p.trPageableServerDrivenPaginationContinuationTokenServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}

func (p *PageableServerDrivenPaginationServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if pageableServerDrivenPaginationServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = pageableServerDrivenPaginationServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "PageableServerDrivenPaginationClient.NewLinkPager":
				res.resp, res.err = p.dispatchNewLinkPager(req)
			case "PageableServerDrivenPaginationClient.NewNestedLinkPager":
				res.resp, res.err = p.dispatchNewNestedLinkPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (p *PageableServerDrivenPaginationServerTransport) dispatchNewLinkPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewLinkPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewLinkPager not implemented")}
	}
	newLinkPager := p.newLinkPager.get(req)
	if newLinkPager == nil {
		resp := p.srv.NewLinkPager(nil)
		newLinkPager = &resp
		p.newLinkPager.add(req, newLinkPager)
		server.PagerResponderInjectNextLinks(newLinkPager, req, func(page *pageablegroup.PageableServerDrivenPaginationClientLinkResponse, createLink func() string) {
			page.Next = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newLinkPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newLinkPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newLinkPager) {
		p.newLinkPager.remove(req)
	}
	return resp, nil
}

func (p *PageableServerDrivenPaginationServerTransport) dispatchNewNestedLinkPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewNestedLinkPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewNestedLinkPager not implemented")}
	}
	newNestedLinkPager := p.newNestedLinkPager.get(req)
	if newNestedLinkPager == nil {
		resp := p.srv.NewNestedLinkPager(nil)
		newNestedLinkPager = &resp
		p.newNestedLinkPager.add(req, newNestedLinkPager)
		server.PagerResponderInjectNextLinks(newNestedLinkPager, req, func(page *pageablegroup.PageableServerDrivenPaginationClientNestedLinkResponse, createLink func() string) {
			page.NestedNext.Next = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newNestedLinkPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newNestedLinkPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newNestedLinkPager) {
		p.newNestedLinkPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to PageableServerDrivenPaginationServerTransport
var pageableServerDrivenPaginationServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
