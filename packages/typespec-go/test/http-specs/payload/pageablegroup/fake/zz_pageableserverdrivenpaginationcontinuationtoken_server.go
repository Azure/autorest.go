// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"pageablegroup"
)

// PageableServerDrivenPaginationContinuationTokenServer is a fake server for instances of the pageablegroup.PageableServerDrivenPaginationContinuationTokenClient type.
type PageableServerDrivenPaginationContinuationTokenServer struct {
	// NewRequestHeaderResponseBodyPager is the fake for method PageableServerDrivenPaginationContinuationTokenClient.NewRequestHeaderResponseBodyPager
	// HTTP status codes to indicate success: http.StatusOK
	NewRequestHeaderResponseBodyPager func(options *pageablegroup.PageableServerDrivenPaginationContinuationTokenClientRequestHeaderResponseBodyOptions) (resp azfake.PagerResponder[pageablegroup.PageableServerDrivenPaginationContinuationTokenClientRequestHeaderResponseBodyResponse])

	// NewRequestHeaderResponseHeaderPager is the fake for method PageableServerDrivenPaginationContinuationTokenClient.NewRequestHeaderResponseHeaderPager
	// HTTP status codes to indicate success: http.StatusOK
	NewRequestHeaderResponseHeaderPager func(options *pageablegroup.PageableServerDrivenPaginationContinuationTokenClientRequestHeaderResponseHeaderOptions) (resp azfake.PagerResponder[pageablegroup.PageableServerDrivenPaginationContinuationTokenClientRequestHeaderResponseHeaderResponse])

	// NewRequestQueryResponseBodyPager is the fake for method PageableServerDrivenPaginationContinuationTokenClient.NewRequestQueryResponseBodyPager
	// HTTP status codes to indicate success: http.StatusOK
	NewRequestQueryResponseBodyPager func(options *pageablegroup.PageableServerDrivenPaginationContinuationTokenClientRequestQueryResponseBodyOptions) (resp azfake.PagerResponder[pageablegroup.PageableServerDrivenPaginationContinuationTokenClientRequestQueryResponseBodyResponse])

	// NewRequestQueryResponseHeaderPager is the fake for method PageableServerDrivenPaginationContinuationTokenClient.NewRequestQueryResponseHeaderPager
	// HTTP status codes to indicate success: http.StatusOK
	NewRequestQueryResponseHeaderPager func(options *pageablegroup.PageableServerDrivenPaginationContinuationTokenClientRequestQueryResponseHeaderOptions) (resp azfake.PagerResponder[pageablegroup.PageableServerDrivenPaginationContinuationTokenClientRequestQueryResponseHeaderResponse])
}

// NewPageableServerDrivenPaginationContinuationTokenServerTransport creates a new instance of PageableServerDrivenPaginationContinuationTokenServerTransport with the provided implementation.
// The returned PageableServerDrivenPaginationContinuationTokenServerTransport instance is connected to an instance of pageablegroup.PageableServerDrivenPaginationContinuationTokenClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewPageableServerDrivenPaginationContinuationTokenServerTransport(srv *PageableServerDrivenPaginationContinuationTokenServer) *PageableServerDrivenPaginationContinuationTokenServerTransport {
	return &PageableServerDrivenPaginationContinuationTokenServerTransport{
		srv:                                 srv,
		newRequestHeaderResponseBodyPager:   newTracker[azfake.PagerResponder[pageablegroup.PageableServerDrivenPaginationContinuationTokenClientRequestHeaderResponseBodyResponse]](),
		newRequestHeaderResponseHeaderPager: newTracker[azfake.PagerResponder[pageablegroup.PageableServerDrivenPaginationContinuationTokenClientRequestHeaderResponseHeaderResponse]](),
		newRequestQueryResponseBodyPager:    newTracker[azfake.PagerResponder[pageablegroup.PageableServerDrivenPaginationContinuationTokenClientRequestQueryResponseBodyResponse]](),
		newRequestQueryResponseHeaderPager:  newTracker[azfake.PagerResponder[pageablegroup.PageableServerDrivenPaginationContinuationTokenClientRequestQueryResponseHeaderResponse]](),
	}
}

// PageableServerDrivenPaginationContinuationTokenServerTransport connects instances of pageablegroup.PageableServerDrivenPaginationContinuationTokenClient to instances of PageableServerDrivenPaginationContinuationTokenServer.
// Don't use this type directly, use NewPageableServerDrivenPaginationContinuationTokenServerTransport instead.
type PageableServerDrivenPaginationContinuationTokenServerTransport struct {
	srv                                 *PageableServerDrivenPaginationContinuationTokenServer
	newRequestHeaderResponseBodyPager   *tracker[azfake.PagerResponder[pageablegroup.PageableServerDrivenPaginationContinuationTokenClientRequestHeaderResponseBodyResponse]]
	newRequestHeaderResponseHeaderPager *tracker[azfake.PagerResponder[pageablegroup.PageableServerDrivenPaginationContinuationTokenClientRequestHeaderResponseHeaderResponse]]
	newRequestQueryResponseBodyPager    *tracker[azfake.PagerResponder[pageablegroup.PageableServerDrivenPaginationContinuationTokenClientRequestQueryResponseBodyResponse]]
	newRequestQueryResponseHeaderPager  *tracker[azfake.PagerResponder[pageablegroup.PageableServerDrivenPaginationContinuationTokenClientRequestQueryResponseHeaderResponse]]
}

// Do implements the policy.Transporter interface for PageableServerDrivenPaginationContinuationTokenServerTransport.
func (p *PageableServerDrivenPaginationContinuationTokenServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return p.dispatchToMethodFake(req, method)
}

func (p *PageableServerDrivenPaginationContinuationTokenServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if pageableServerDrivenPaginationContinuationTokenServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = pageableServerDrivenPaginationContinuationTokenServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "PageableServerDrivenPaginationContinuationTokenClient.NewRequestHeaderResponseBodyPager":
				res.resp, res.err = p.dispatchNewRequestHeaderResponseBodyPager(req)
			case "PageableServerDrivenPaginationContinuationTokenClient.NewRequestHeaderResponseHeaderPager":
				res.resp, res.err = p.dispatchNewRequestHeaderResponseHeaderPager(req)
			case "PageableServerDrivenPaginationContinuationTokenClient.NewRequestQueryResponseBodyPager":
				res.resp, res.err = p.dispatchNewRequestQueryResponseBodyPager(req)
			case "PageableServerDrivenPaginationContinuationTokenClient.NewRequestQueryResponseHeaderPager":
				res.resp, res.err = p.dispatchNewRequestQueryResponseHeaderPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (p *PageableServerDrivenPaginationContinuationTokenServerTransport) dispatchNewRequestHeaderResponseBodyPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewRequestHeaderResponseBodyPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewRequestHeaderResponseBodyPager not implemented")}
	}
	newRequestHeaderResponseBodyPager := p.newRequestHeaderResponseBodyPager.get(req)
	if newRequestHeaderResponseBodyPager == nil {
		qp := req.URL.Query()
		tokenParamParam := getOptional(getHeaderValue(req.Header, "token"))
		fooParam := getOptional(getHeaderValue(req.Header, "foo"))
		barUnescaped, err := url.QueryUnescape(qp.Get("bar"))
		if err != nil {
			return nil, err
		}
		barParam := getOptional(barUnescaped)
		var options *pageablegroup.PageableServerDrivenPaginationContinuationTokenClientRequestHeaderResponseBodyOptions
		if tokenParamParam != nil || fooParam != nil || barParam != nil {
			options = &pageablegroup.PageableServerDrivenPaginationContinuationTokenClientRequestHeaderResponseBodyOptions{
				TokenParam: tokenParamParam,
				Foo:        fooParam,
				Bar:        barParam,
			}
		}
		resp := p.srv.NewRequestHeaderResponseBodyPager(options)
		newRequestHeaderResponseBodyPager = &resp
		p.newRequestHeaderResponseBodyPager.add(req, newRequestHeaderResponseBodyPager)
	}
	resp, err := server.PagerResponderNext(newRequestHeaderResponseBodyPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newRequestHeaderResponseBodyPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newRequestHeaderResponseBodyPager) {
		p.newRequestHeaderResponseBodyPager.remove(req)
	}
	return resp, nil
}

func (p *PageableServerDrivenPaginationContinuationTokenServerTransport) dispatchNewRequestHeaderResponseHeaderPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewRequestHeaderResponseHeaderPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewRequestHeaderResponseHeaderPager not implemented")}
	}
	newRequestHeaderResponseHeaderPager := p.newRequestHeaderResponseHeaderPager.get(req)
	if newRequestHeaderResponseHeaderPager == nil {
		qp := req.URL.Query()
		tokenParamParam := getOptional(getHeaderValue(req.Header, "token"))
		fooParam := getOptional(getHeaderValue(req.Header, "foo"))
		barUnescaped, err := url.QueryUnescape(qp.Get("bar"))
		if err != nil {
			return nil, err
		}
		barParam := getOptional(barUnescaped)
		var options *pageablegroup.PageableServerDrivenPaginationContinuationTokenClientRequestHeaderResponseHeaderOptions
		if tokenParamParam != nil || fooParam != nil || barParam != nil {
			options = &pageablegroup.PageableServerDrivenPaginationContinuationTokenClientRequestHeaderResponseHeaderOptions{
				TokenParam: tokenParamParam,
				Foo:        fooParam,
				Bar:        barParam,
			}
		}
		resp := p.srv.NewRequestHeaderResponseHeaderPager(options)
		newRequestHeaderResponseHeaderPager = &resp
		p.newRequestHeaderResponseHeaderPager.add(req, newRequestHeaderResponseHeaderPager)
	}
	resp, err := server.PagerResponderNext(newRequestHeaderResponseHeaderPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newRequestHeaderResponseHeaderPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newRequestHeaderResponseHeaderPager) {
		p.newRequestHeaderResponseHeaderPager.remove(req)
	}
	return resp, nil
}

func (p *PageableServerDrivenPaginationContinuationTokenServerTransport) dispatchNewRequestQueryResponseBodyPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewRequestQueryResponseBodyPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewRequestQueryResponseBodyPager not implemented")}
	}
	newRequestQueryResponseBodyPager := p.newRequestQueryResponseBodyPager.get(req)
	if newRequestQueryResponseBodyPager == nil {
		qp := req.URL.Query()
		tokenParamUnescaped, err := url.QueryUnescape(qp.Get("token"))
		if err != nil {
			return nil, err
		}
		tokenParamParam := getOptional(tokenParamUnescaped)
		fooParam := getOptional(getHeaderValue(req.Header, "foo"))
		barUnescaped, err := url.QueryUnescape(qp.Get("bar"))
		if err != nil {
			return nil, err
		}
		barParam := getOptional(barUnescaped)
		var options *pageablegroup.PageableServerDrivenPaginationContinuationTokenClientRequestQueryResponseBodyOptions
		if tokenParamParam != nil || fooParam != nil || barParam != nil {
			options = &pageablegroup.PageableServerDrivenPaginationContinuationTokenClientRequestQueryResponseBodyOptions{
				TokenParam: tokenParamParam,
				Foo:        fooParam,
				Bar:        barParam,
			}
		}
		resp := p.srv.NewRequestQueryResponseBodyPager(options)
		newRequestQueryResponseBodyPager = &resp
		p.newRequestQueryResponseBodyPager.add(req, newRequestQueryResponseBodyPager)
	}
	resp, err := server.PagerResponderNext(newRequestQueryResponseBodyPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newRequestQueryResponseBodyPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newRequestQueryResponseBodyPager) {
		p.newRequestQueryResponseBodyPager.remove(req)
	}
	return resp, nil
}

func (p *PageableServerDrivenPaginationContinuationTokenServerTransport) dispatchNewRequestQueryResponseHeaderPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewRequestQueryResponseHeaderPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewRequestQueryResponseHeaderPager not implemented")}
	}
	newRequestQueryResponseHeaderPager := p.newRequestQueryResponseHeaderPager.get(req)
	if newRequestQueryResponseHeaderPager == nil {
		qp := req.URL.Query()
		tokenParamUnescaped, err := url.QueryUnescape(qp.Get("token"))
		if err != nil {
			return nil, err
		}
		tokenParamParam := getOptional(tokenParamUnescaped)
		fooParam := getOptional(getHeaderValue(req.Header, "foo"))
		barUnescaped, err := url.QueryUnescape(qp.Get("bar"))
		if err != nil {
			return nil, err
		}
		barParam := getOptional(barUnescaped)
		var options *pageablegroup.PageableServerDrivenPaginationContinuationTokenClientRequestQueryResponseHeaderOptions
		if tokenParamParam != nil || fooParam != nil || barParam != nil {
			options = &pageablegroup.PageableServerDrivenPaginationContinuationTokenClientRequestQueryResponseHeaderOptions{
				TokenParam: tokenParamParam,
				Foo:        fooParam,
				Bar:        barParam,
			}
		}
		resp := p.srv.NewRequestQueryResponseHeaderPager(options)
		newRequestQueryResponseHeaderPager = &resp
		p.newRequestQueryResponseHeaderPager.add(req, newRequestQueryResponseHeaderPager)
	}
	resp, err := server.PagerResponderNext(newRequestQueryResponseHeaderPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newRequestQueryResponseHeaderPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newRequestQueryResponseHeaderPager) {
		p.newRequestQueryResponseHeaderPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to PageableServerDrivenPaginationContinuationTokenServerTransport
var pageableServerDrivenPaginationContinuationTokenServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
