// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package pageablegroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// PageableServerDrivenPaginationClient contains the methods for the PageableServerDrivenPagination group.
// Don't use this type directly, use [PageableClient.NewPageableServerDrivenPaginationClient] instead.
type PageableServerDrivenPaginationClient struct {
	internal *azcore.Client
}

// Link -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - PageableServerDrivenPaginationClientLinkOptions contains the optional parameters for the PageableServerDrivenPaginationClient.Link
//     method.
func (client *PageableServerDrivenPaginationClient) Link(ctx context.Context, options *PageableServerDrivenPaginationClientLinkOptions) (PageableServerDrivenPaginationClientLinkResponse, error) {
	var err error
	const operationName = "PageableServerDrivenPaginationClient.Link"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.linkCreateRequest(ctx, options)
	if err != nil {
		return PageableServerDrivenPaginationClientLinkResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PageableServerDrivenPaginationClientLinkResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PageableServerDrivenPaginationClientLinkResponse{}, err
	}
	resp, err := client.linkHandleResponse(httpResp)
	return resp, err
}

// linkCreateRequest creates the Link request.
func (client *PageableServerDrivenPaginationClient) linkCreateRequest(ctx context.Context, _ *PageableServerDrivenPaginationClientLinkOptions) (*policy.Request, error) {
	urlPath := "/payload/pageable/server-driven-pagination/link"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// linkHandleResponse handles the Link response.
func (client *PageableServerDrivenPaginationClient) linkHandleResponse(resp *http.Response) (PageableServerDrivenPaginationClientLinkResponse, error) {
	result := PageableServerDrivenPaginationClientLinkResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.LinkResponse); err != nil {
		return PageableServerDrivenPaginationClientLinkResponse{}, err
	}
	return result, nil
}
