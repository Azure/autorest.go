// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package pageablegroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// PageableServerDrivenPaginationClient contains the methods for the PageableServerDrivenPagination group.
// Don't use this type directly, use [PageableClient.NewPageableServerDrivenPaginationClient] instead.
type PageableServerDrivenPaginationClient struct {
	internal *azcore.Client
}

// NewPageableServerDrivenPaginationContinuationTokenClient creates a new instance of [PageableServerDrivenPaginationContinuationTokenClient].
func (client *PageableServerDrivenPaginationClient) NewPageableServerDrivenPaginationContinuationTokenClient() *PageableServerDrivenPaginationContinuationTokenClient {
	return &PageableServerDrivenPaginationContinuationTokenClient{
		internal: client.internal,
	}
}

//   - options - PageableServerDrivenPaginationClientLinkOptions contains the optional parameters for the PageableServerDrivenPaginationClient.NewLinkPager
//     method.
func (client *PageableServerDrivenPaginationClient) NewLinkPager(options *PageableServerDrivenPaginationClientLinkOptions) *runtime.Pager[PageableServerDrivenPaginationClientLinkResponse] {
	return runtime.NewPager(runtime.PagingHandler[PageableServerDrivenPaginationClientLinkResponse]{
		More: func(page PageableServerDrivenPaginationClientLinkResponse) bool {
			return page.Next != nil && len(*page.Next) > 0
		},
		Fetcher: func(ctx context.Context, page *PageableServerDrivenPaginationClientLinkResponse) (PageableServerDrivenPaginationClientLinkResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PageableServerDrivenPaginationClient.NewLinkPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.Next
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.linkCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return PageableServerDrivenPaginationClientLinkResponse{}, err
			}
			return client.linkHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// linkCreateRequest creates the Link request.
func (client *PageableServerDrivenPaginationClient) linkCreateRequest(ctx context.Context, _ *PageableServerDrivenPaginationClientLinkOptions) (*policy.Request, error) {
	urlPath := "/payload/pageable/server-driven-pagination/link"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// linkHandleResponse handles the Link response.
func (client *PageableServerDrivenPaginationClient) linkHandleResponse(resp *http.Response) (PageableServerDrivenPaginationClientLinkResponse, error) {
	result := PageableServerDrivenPaginationClientLinkResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.LinkResponse); err != nil {
		return PageableServerDrivenPaginationClientLinkResponse{}, err
	}
	return result, nil
}

//   - options - PageableServerDrivenPaginationClientNestedLinkOptions contains the optional parameters for the PageableServerDrivenPaginationClient.NewNestedLinkPager
//     method.
func (client *PageableServerDrivenPaginationClient) NewNestedLinkPager(options *PageableServerDrivenPaginationClientNestedLinkOptions) *runtime.Pager[PageableServerDrivenPaginationClientNestedLinkResponse] {
	return runtime.NewPager(runtime.PagingHandler[PageableServerDrivenPaginationClientNestedLinkResponse]{
		More: func(page PageableServerDrivenPaginationClientNestedLinkResponse) bool {
			return page.NestedNext != nil && page.NestedNext.Next != nil && len(*page.NestedNext.Next) > 0
		},
		Fetcher: func(ctx context.Context, page *PageableServerDrivenPaginationClientNestedLinkResponse) (PageableServerDrivenPaginationClientNestedLinkResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PageableServerDrivenPaginationClient.NewNestedLinkPager")
			nextLink := ""
			if page != nil && page.NestedNext != nil {
				nextLink = *page.NestedNext.Next
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.nestedLinkCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return PageableServerDrivenPaginationClientNestedLinkResponse{}, err
			}
			return client.nestedLinkHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// nestedLinkCreateRequest creates the NestedLink request.
func (client *PageableServerDrivenPaginationClient) nestedLinkCreateRequest(ctx context.Context, _ *PageableServerDrivenPaginationClientNestedLinkOptions) (*policy.Request, error) {
	urlPath := "/payload/pageable/server-driven-pagination/nested-link"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// nestedLinkHandleResponse handles the NestedLink response.
func (client *PageableServerDrivenPaginationClient) nestedLinkHandleResponse(resp *http.Response) (PageableServerDrivenPaginationClientNestedLinkResponse, error) {
	result := PageableServerDrivenPaginationClientNestedLinkResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NestedLinkResponse); err != nil {
		return PageableServerDrivenPaginationClientNestedLinkResponse{}, err
	}
	return result, nil
}
