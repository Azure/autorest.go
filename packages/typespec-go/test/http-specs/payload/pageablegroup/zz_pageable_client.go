// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package pageablegroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// PageableClient - Test for pageable payload.
// Don't use this type directly, use NewPageableClientWithNoCredential() instead.
type PageableClient struct {
	internal *azcore.Client
	endpoint string
}

// PageableClientOptions contains the optional values for creating a [PageableClient].
type PageableClientOptions struct {
	azcore.ClientOptions
}

// NewPageableClientWithNoCredential creates a new instance of PageableClient with the specified values.
//   - endpoint - Service host
//   - PageableClientOptions - PageableClientOptions contains the optional values for creating a [PageableClient]
func NewPageableClientWithNoCredential(endpoint string, options *PageableClientOptions) (*PageableClient, error) {
	if options == nil {
		options = &PageableClientOptions{}
	}
	cl, err := azcore.NewClient(moduleName, moduleVersion, runtime.PipelineOptions{}, &options.ClientOptions)
	if err != nil {
		return nil, err
	}
	client := &PageableClient{
		endpoint: endpoint,
		internal: cl,
	}
	return client, nil
}

// NewPageableServerDrivenPaginationClient creates a new instance of [PageableServerDrivenPaginationClient].
func (client *PageableClient) NewPageableServerDrivenPaginationClient() *PageableServerDrivenPaginationClient {
	return &PageableServerDrivenPaginationClient{
		internal: client.internal,
		endpoint: client.endpoint,
	}
}

//   - options - PageableClientListWithoutContinuationOptions contains the optional parameters for the PageableClient.NewListWithoutContinuationPager
//     method.
func (client *PageableClient) NewListWithoutContinuationPager(options *PageableClientListWithoutContinuationOptions) *runtime.Pager[PageableClientListWithoutContinuationResponse] {
	return runtime.NewPager(runtime.PagingHandler[PageableClientListWithoutContinuationResponse]{
		More: func(page PageableClientListWithoutContinuationResponse) bool {
			return false
		},
		Fetcher: func(ctx context.Context, page *PageableClientListWithoutContinuationResponse) (PageableClientListWithoutContinuationResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PageableClient.NewListWithoutContinuationPager")
			req, err := client.listWithoutContinuationCreateRequest(ctx, options)
			if err != nil {
				return PageableClientListWithoutContinuationResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return PageableClientListWithoutContinuationResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return PageableClientListWithoutContinuationResponse{}, runtime.NewResponseError(resp)
			}
			return client.listWithoutContinuationHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listWithoutContinuationCreateRequest creates the ListWithoutContinuation request.
func (client *PageableClient) listWithoutContinuationCreateRequest(ctx context.Context, _ *PageableClientListWithoutContinuationOptions) (*policy.Request, error) {
	urlPath := "/payload/pageable/simple"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listWithoutContinuationHandleResponse handles the ListWithoutContinuation response.
func (client *PageableClient) listWithoutContinuationHandleResponse(resp *http.Response) (PageableClientListWithoutContinuationResponse, error) {
	result := PageableClientListWithoutContinuationResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ListWithoutContinuationResponse); err != nil {
		return PageableClientListWithoutContinuationResponse{}, err
	}
	return result, nil
}
