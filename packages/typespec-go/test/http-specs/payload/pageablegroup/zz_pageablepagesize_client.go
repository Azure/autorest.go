// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package pageablegroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strconv"
)

// PageablePageSizeClient contains the methods for the PageablePageSize group.
// Don't use this type directly, use [PageableClient.NewPageablePageSizeClient] instead.
type PageablePageSizeClient struct {
	internal *azcore.Client
	endpoint string
}

//   - options - PageablePageSizeClientListWithPageSizeOptions contains the optional parameters for the PageablePageSizeClient.NewListWithPageSizePager
//     method.
func (client *PageablePageSizeClient) NewListWithPageSizePager(options *PageablePageSizeClientListWithPageSizeOptions) *runtime.Pager[PageablePageSizeClientListWithPageSizeResponse] {
	return runtime.NewPager(runtime.PagingHandler[PageablePageSizeClientListWithPageSizeResponse]{
		More: func(page PageablePageSizeClientListWithPageSizeResponse) bool {
			return false
		},
		Fetcher: func(ctx context.Context, page *PageablePageSizeClientListWithPageSizeResponse) (PageablePageSizeClientListWithPageSizeResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PageablePageSizeClient.NewListWithPageSizePager")
			req, err := client.listWithPageSizeCreateRequest(ctx, options)
			if err != nil {
				return PageablePageSizeClientListWithPageSizeResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return PageablePageSizeClientListWithPageSizeResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return PageablePageSizeClientListWithPageSizeResponse{}, runtime.NewResponseError(resp)
			}
			return client.listWithPageSizeHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listWithPageSizeCreateRequest creates the ListWithPageSize request.
func (client *PageablePageSizeClient) listWithPageSizeCreateRequest(ctx context.Context, options *PageablePageSizeClientListWithPageSizeOptions) (*policy.Request, error) {
	urlPath := "/payload/pageable/pagesize/list"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.PageSize != nil {
		reqQP.Set("pageSize", strconv.FormatInt(int64(*options.PageSize), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listWithPageSizeHandleResponse handles the ListWithPageSize response.
func (client *PageablePageSizeClient) listWithPageSizeHandleResponse(resp *http.Response) (PageablePageSizeClientListWithPageSizeResponse, error) {
	result := PageablePageSizeClientListWithPageSizeResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ListWithPageSizeResponse); err != nil {
		return PageablePageSizeClientListWithPageSizeResponse{}, err
	}
	return result, nil
}

//   - options - PageablePageSizeClientListWithoutContinuationOptions contains the optional parameters for the PageablePageSizeClient.NewListWithoutContinuationPager
//     method.
func (client *PageablePageSizeClient) NewListWithoutContinuationPager(options *PageablePageSizeClientListWithoutContinuationOptions) *runtime.Pager[PageablePageSizeClientListWithoutContinuationResponse] {
	return runtime.NewPager(runtime.PagingHandler[PageablePageSizeClientListWithoutContinuationResponse]{
		More: func(page PageablePageSizeClientListWithoutContinuationResponse) bool {
			return false
		},
		Fetcher: func(ctx context.Context, page *PageablePageSizeClientListWithoutContinuationResponse) (PageablePageSizeClientListWithoutContinuationResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PageablePageSizeClient.NewListWithoutContinuationPager")
			req, err := client.listWithoutContinuationCreateRequest(ctx, options)
			if err != nil {
				return PageablePageSizeClientListWithoutContinuationResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return PageablePageSizeClientListWithoutContinuationResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return PageablePageSizeClientListWithoutContinuationResponse{}, runtime.NewResponseError(resp)
			}
			return client.listWithoutContinuationHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listWithoutContinuationCreateRequest creates the ListWithoutContinuation request.
func (client *PageablePageSizeClient) listWithoutContinuationCreateRequest(ctx context.Context, _ *PageablePageSizeClientListWithoutContinuationOptions) (*policy.Request, error) {
	urlPath := "/payload/pageable/pagesize/without-continuation"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listWithoutContinuationHandleResponse handles the ListWithoutContinuation response.
func (client *PageablePageSizeClient) listWithoutContinuationHandleResponse(resp *http.Response) (PageablePageSizeClientListWithoutContinuationResponse, error) {
	result := PageablePageSizeClientListWithoutContinuationResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ListWithoutContinuationResponse); err != nil {
		return PageablePageSizeClientListWithoutContinuationResponse{}, err
	}
	return result, nil
}
