// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ContentNegotiationServer is a fake server for instances of the contentneggroup.ContentNegotiationClient type.
type ContentNegotiationServer struct {
	// ContentNegotiationDifferentBodyServer contains the fakes for client ContentNegotiationDifferentBodyClient
	ContentNegotiationDifferentBodyServer ContentNegotiationDifferentBodyServer

	// ContentNegotiationSameBodyServer contains the fakes for client ContentNegotiationSameBodyClient
	ContentNegotiationSameBodyServer ContentNegotiationSameBodyServer
}

// NewContentNegotiationServerTransport creates a new instance of ContentNegotiationServerTransport with the provided implementation.
// The returned ContentNegotiationServerTransport instance is connected to an instance of contentneggroup.ContentNegotiationClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewContentNegotiationServerTransport(srv *ContentNegotiationServer) *ContentNegotiationServerTransport {
	return &ContentNegotiationServerTransport{srv: srv}
}

// ContentNegotiationServerTransport connects instances of contentneggroup.ContentNegotiationClient to instances of ContentNegotiationServer.
// Don't use this type directly, use NewContentNegotiationServerTransport instead.
type ContentNegotiationServerTransport struct {
	srv                                     *ContentNegotiationServer
	trMu                                    sync.Mutex
	trContentNegotiationDifferentBodyServer *ContentNegotiationDifferentBodyServerTransport
	trContentNegotiationSameBodyServer      *ContentNegotiationSameBodyServerTransport
}

// Do implements the policy.Transporter interface for ContentNegotiationServerTransport.
func (c *ContentNegotiationServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return c.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (c *ContentNegotiationServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "ContentNegotiationDifferentBodyClient":
		initServer(&c.trMu, &c.trContentNegotiationDifferentBodyServer, func() *ContentNegotiationDifferentBodyServerTransport {
			return NewContentNegotiationDifferentBodyServerTransport(&c.srv.ContentNegotiationDifferentBodyServer)
		})
		resp, err = c.trContentNegotiationDifferentBodyServer.Do(req)
	case "ContentNegotiationSameBodyClient":
		initServer(&c.trMu, &c.trContentNegotiationSameBodyServer, func() *ContentNegotiationSameBodyServerTransport {
			return NewContentNegotiationSameBodyServerTransport(&c.srv.ContentNegotiationSameBodyServer)
		})
		resp, err = c.trContentNegotiationSameBodyServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}

// set this to conditionally intercept incoming requests to ContentNegotiationServerTransport
var contentNegotiationServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
