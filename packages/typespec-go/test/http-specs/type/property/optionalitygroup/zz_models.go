// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package optionalitygroup

import "time"

// BooleanLiteralProperty - Model with boolean literal property
type BooleanLiteralProperty struct {
	// FLAG; CONSTANT; Property
	// Field has constant value true, any specified value is ignored.
	Property *bool
}

// BytesProperty - Template type for testing models with optional property. Pass in the type of the property you are looking
// for
type BytesProperty struct {
	// Property
	Property []byte
}

// CollectionsByteProperty - Model with collection bytes properties
type CollectionsByteProperty struct {
	// Property
	Property [][]byte
}

// CollectionsModelProperty - Model with collection models properties
type CollectionsModelProperty struct {
	// Property
	Property []StringProperty
}

// DatetimeProperty - Model with a datetime property
type DatetimeProperty struct {
	// Property
	Property *time.Time
}

// DurationProperty - Model with a duration property
type DurationProperty struct {
	// Property
	Property *string
}

// FloatLiteralProperty - Model with float literal property
type FloatLiteralProperty struct {
	// FLAG; CONSTANT; Property
	// Field has constant value 1.25, any specified value is ignored.
	Property *float32
}

// IntLiteralProperty - Model with int literal property
type IntLiteralProperty struct {
	// FLAG; CONSTANT; Property
	// Field has constant value 1, any specified value is ignored.
	Property *int32
}

// PlainDateProperty - Model with a plainDate property
type PlainDateProperty struct {
	// Property
	Property *time.Time
}

// PlainTimeProperty - Model with a plainTime property
type PlainTimeProperty struct {
	// Property
	Property *time.Time
}

// RequiredAndOptionalProperty - Model with required and optional properties
type RequiredAndOptionalProperty struct {
	// REQUIRED; required int property
	RequiredProperty *int32

	// optional string property
	OptionalProperty *string
}

// StringLiteralProperty - Model with string literal property
type StringLiteralProperty struct {
	// FLAG; CONSTANT; Property
	// Field has constant value "hello", any specified value is ignored.
	Property *string
}

// StringProperty - Template type for testing models with optional property. Pass in the type of the property you are looking
// for
type StringProperty struct {
	// Property
	Property *string
}

// UnionFloatLiteralProperty - Model with union of float literal property
type UnionFloatLiteralProperty struct {
	// Property
	Property *UnionFloatLiteralPropertyProperty
}

// UnionIntLiteralProperty - Model with union of int literal property
type UnionIntLiteralProperty struct {
	// Property
	Property *UnionIntLiteralPropertyProperty
}

// UnionStringLiteralProperty - Model with union of string literal property
type UnionStringLiteralProperty struct {
	// Property
	Property *UnionStringLiteralPropertyProperty
}
