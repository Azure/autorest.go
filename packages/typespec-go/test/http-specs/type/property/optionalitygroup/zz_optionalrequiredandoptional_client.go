// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package optionalitygroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// OptionalRequiredAndOptionalClient - Test optional and required properties
// Don't use this type directly, use [OptionalClient.NewOptionalRequiredAndOptionalClient] instead.
type OptionalRequiredAndOptionalClient struct {
	internal *azcore.Client
}

// GetAll - Get models that will return all properties in the model
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - OptionalRequiredAndOptionalClientGetAllOptions contains the optional parameters for the OptionalRequiredAndOptionalClient.GetAll
//     method.
func (client *OptionalRequiredAndOptionalClient) GetAll(ctx context.Context, options *OptionalRequiredAndOptionalClientGetAllOptions) (OptionalRequiredAndOptionalClientGetAllResponse, error) {
	var err error
	const operationName = "OptionalRequiredAndOptionalClient.GetAll"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getAllCreateRequest(ctx, options)
	if err != nil {
		return OptionalRequiredAndOptionalClientGetAllResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return OptionalRequiredAndOptionalClientGetAllResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return OptionalRequiredAndOptionalClientGetAllResponse{}, err
	}
	resp, err := client.getAllHandleResponse(httpResp)
	return resp, err
}

// getAllCreateRequest creates the GetAll request.
func (client *OptionalRequiredAndOptionalClient) getAllCreateRequest(ctx context.Context, _ *OptionalRequiredAndOptionalClientGetAllOptions) (*policy.Request, error) {
	urlPath := "/type/property/optional/requiredAndOptional/all"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getAllHandleResponse handles the GetAll response.
func (client *OptionalRequiredAndOptionalClient) getAllHandleResponse(resp *http.Response) (OptionalRequiredAndOptionalClientGetAllResponse, error) {
	result := OptionalRequiredAndOptionalClientGetAllResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RequiredAndOptionalProperty); err != nil {
		return OptionalRequiredAndOptionalClientGetAllResponse{}, err
	}
	return result, nil
}

// GetRequiredOnly - Get models that will return only the required properties
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - OptionalRequiredAndOptionalClientGetRequiredOnlyOptions contains the optional parameters for the OptionalRequiredAndOptionalClient.GetRequiredOnly
//     method.
func (client *OptionalRequiredAndOptionalClient) GetRequiredOnly(ctx context.Context, options *OptionalRequiredAndOptionalClientGetRequiredOnlyOptions) (OptionalRequiredAndOptionalClientGetRequiredOnlyResponse, error) {
	var err error
	const operationName = "OptionalRequiredAndOptionalClient.GetRequiredOnly"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getRequiredOnlyCreateRequest(ctx, options)
	if err != nil {
		return OptionalRequiredAndOptionalClientGetRequiredOnlyResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return OptionalRequiredAndOptionalClientGetRequiredOnlyResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return OptionalRequiredAndOptionalClientGetRequiredOnlyResponse{}, err
	}
	resp, err := client.getRequiredOnlyHandleResponse(httpResp)
	return resp, err
}

// getRequiredOnlyCreateRequest creates the GetRequiredOnly request.
func (client *OptionalRequiredAndOptionalClient) getRequiredOnlyCreateRequest(ctx context.Context, _ *OptionalRequiredAndOptionalClientGetRequiredOnlyOptions) (*policy.Request, error) {
	urlPath := "/type/property/optional/requiredAndOptional/requiredOnly"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getRequiredOnlyHandleResponse handles the GetRequiredOnly response.
func (client *OptionalRequiredAndOptionalClient) getRequiredOnlyHandleResponse(resp *http.Response) (OptionalRequiredAndOptionalClientGetRequiredOnlyResponse, error) {
	result := OptionalRequiredAndOptionalClientGetRequiredOnlyResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RequiredAndOptionalProperty); err != nil {
		return OptionalRequiredAndOptionalClientGetRequiredOnlyResponse{}, err
	}
	return result, nil
}

// PutAll - Put a body with all properties present.
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - OptionalRequiredAndOptionalClientPutAllOptions contains the optional parameters for the OptionalRequiredAndOptionalClient.PutAll
//     method.
func (client *OptionalRequiredAndOptionalClient) PutAll(ctx context.Context, body RequiredAndOptionalProperty, options *OptionalRequiredAndOptionalClientPutAllOptions) (OptionalRequiredAndOptionalClientPutAllResponse, error) {
	var err error
	const operationName = "OptionalRequiredAndOptionalClient.PutAll"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putAllCreateRequest(ctx, body, options)
	if err != nil {
		return OptionalRequiredAndOptionalClientPutAllResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return OptionalRequiredAndOptionalClientPutAllResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return OptionalRequiredAndOptionalClientPutAllResponse{}, err
	}
	return OptionalRequiredAndOptionalClientPutAllResponse{}, nil
}

// putAllCreateRequest creates the PutAll request.
func (client *OptionalRequiredAndOptionalClient) putAllCreateRequest(ctx context.Context, body RequiredAndOptionalProperty, _ *OptionalRequiredAndOptionalClientPutAllOptions) (*policy.Request, error) {
	urlPath := "/type/property/optional/requiredAndOptional/all"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// PutRequiredOnly - Put a body with only required properties.
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - OptionalRequiredAndOptionalClientPutRequiredOnlyOptions contains the optional parameters for the OptionalRequiredAndOptionalClient.PutRequiredOnly
//     method.
func (client *OptionalRequiredAndOptionalClient) PutRequiredOnly(ctx context.Context, body RequiredAndOptionalProperty, options *OptionalRequiredAndOptionalClientPutRequiredOnlyOptions) (OptionalRequiredAndOptionalClientPutRequiredOnlyResponse, error) {
	var err error
	const operationName = "OptionalRequiredAndOptionalClient.PutRequiredOnly"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putRequiredOnlyCreateRequest(ctx, body, options)
	if err != nil {
		return OptionalRequiredAndOptionalClientPutRequiredOnlyResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return OptionalRequiredAndOptionalClientPutRequiredOnlyResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return OptionalRequiredAndOptionalClientPutRequiredOnlyResponse{}, err
	}
	return OptionalRequiredAndOptionalClientPutRequiredOnlyResponse{}, nil
}

// putRequiredOnlyCreateRequest creates the PutRequiredOnly request.
func (client *OptionalRequiredAndOptionalClient) putRequiredOnlyCreateRequest(ctx context.Context, body RequiredAndOptionalProperty, _ *OptionalRequiredAndOptionalClientPutRequiredOnlyOptions) (*policy.Request, error) {
	urlPath := "/type/property/optional/requiredAndOptional/requiredOnly"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}
