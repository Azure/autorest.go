// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package nullablegroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// NullableDatetimeClient contains the methods for the NullableDatetime group.
// Don't use this type directly, use [NullableClient.NewNullableDatetimeClient] instead.
type NullableDatetimeClient struct {
	internal *azcore.Client
}

// GetNonNull - Get models that will return all properties in the model
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - NullableDatetimeClientGetNonNullOptions contains the optional parameters for the NullableDatetimeClient.GetNonNull
//     method.
func (client *NullableDatetimeClient) GetNonNull(ctx context.Context, options *NullableDatetimeClientGetNonNullOptions) (NullableDatetimeClientGetNonNullResponse, error) {
	var err error
	const operationName = "NullableDatetimeClient.GetNonNull"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getNonNullCreateRequest(ctx, options)
	if err != nil {
		return NullableDatetimeClientGetNonNullResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NullableDatetimeClientGetNonNullResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NullableDatetimeClientGetNonNullResponse{}, err
	}
	resp, err := client.getNonNullHandleResponse(httpResp)
	return resp, err
}

// getNonNullCreateRequest creates the GetNonNull request.
func (client *NullableDatetimeClient) getNonNullCreateRequest(ctx context.Context, _ *NullableDatetimeClientGetNonNullOptions) (*policy.Request, error) {
	urlPath := "/type/property/nullable/datetime/non-null"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getNonNullHandleResponse handles the GetNonNull response.
func (client *NullableDatetimeClient) getNonNullHandleResponse(resp *http.Response) (NullableDatetimeClientGetNonNullResponse, error) {
	result := NullableDatetimeClientGetNonNullResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DatetimeProperty); err != nil {
		return NullableDatetimeClientGetNonNullResponse{}, err
	}
	return result, nil
}

// GetNull - Get models that will return the default object
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - NullableDatetimeClientGetNullOptions contains the optional parameters for the NullableDatetimeClient.GetNull
//     method.
func (client *NullableDatetimeClient) GetNull(ctx context.Context, options *NullableDatetimeClientGetNullOptions) (NullableDatetimeClientGetNullResponse, error) {
	var err error
	const operationName = "NullableDatetimeClient.GetNull"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getNullCreateRequest(ctx, options)
	if err != nil {
		return NullableDatetimeClientGetNullResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NullableDatetimeClientGetNullResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NullableDatetimeClientGetNullResponse{}, err
	}
	resp, err := client.getNullHandleResponse(httpResp)
	return resp, err
}

// getNullCreateRequest creates the GetNull request.
func (client *NullableDatetimeClient) getNullCreateRequest(ctx context.Context, _ *NullableDatetimeClientGetNullOptions) (*policy.Request, error) {
	urlPath := "/type/property/nullable/datetime/null"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getNullHandleResponse handles the GetNull response.
func (client *NullableDatetimeClient) getNullHandleResponse(resp *http.Response) (NullableDatetimeClientGetNullResponse, error) {
	result := NullableDatetimeClientGetNullResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DatetimeProperty); err != nil {
		return NullableDatetimeClientGetNullResponse{}, err
	}
	return result, nil
}

// PatchNonNull - Put a body with all properties present.
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - NullableDatetimeClientPatchNonNullOptions contains the optional parameters for the NullableDatetimeClient.PatchNonNull
//     method.
func (client *NullableDatetimeClient) PatchNonNull(ctx context.Context, body DatetimeProperty, options *NullableDatetimeClientPatchNonNullOptions) (NullableDatetimeClientPatchNonNullResponse, error) {
	var err error
	const operationName = "NullableDatetimeClient.PatchNonNull"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.patchNonNullCreateRequest(ctx, body, options)
	if err != nil {
		return NullableDatetimeClientPatchNonNullResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NullableDatetimeClientPatchNonNullResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return NullableDatetimeClientPatchNonNullResponse{}, err
	}
	return NullableDatetimeClientPatchNonNullResponse{}, nil
}

// patchNonNullCreateRequest creates the PatchNonNull request.
func (client *NullableDatetimeClient) patchNonNullCreateRequest(ctx context.Context, body DatetimeProperty, _ *NullableDatetimeClientPatchNonNullOptions) (*policy.Request, error) {
	urlPath := "/type/property/nullable/datetime/non-null"
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/merge-patch+json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// PatchNull - Put a body with default properties.
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - NullableDatetimeClientPatchNullOptions contains the optional parameters for the NullableDatetimeClient.PatchNull
//     method.
func (client *NullableDatetimeClient) PatchNull(ctx context.Context, body DatetimeProperty, options *NullableDatetimeClientPatchNullOptions) (NullableDatetimeClientPatchNullResponse, error) {
	var err error
	const operationName = "NullableDatetimeClient.PatchNull"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.patchNullCreateRequest(ctx, body, options)
	if err != nil {
		return NullableDatetimeClientPatchNullResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NullableDatetimeClientPatchNullResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return NullableDatetimeClientPatchNullResponse{}, err
	}
	return NullableDatetimeClientPatchNullResponse{}, nil
}

// patchNullCreateRequest creates the PatchNull request.
func (client *NullableDatetimeClient) patchNullCreateRequest(ctx context.Context, body DatetimeProperty, _ *NullableDatetimeClientPatchNullOptions) (*policy.Request, error) {
	urlPath := "/type/property/nullable/datetime/null"
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/merge-patch+json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}
