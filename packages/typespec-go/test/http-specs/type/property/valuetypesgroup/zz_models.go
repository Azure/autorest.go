// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package valuetypesgroup

import "time"

// BooleanLiteralProperty - Model with a boolean literal property.
type BooleanLiteralProperty struct {
	// CONSTANT; Property
	// Field has constant value true, any specified value is ignored.
	Property *bool
}

// BooleanProperty - Model with a boolean property
type BooleanProperty struct {
	// REQUIRED; Property
	Property *bool
}

// BytesProperty - Model with a bytes property
type BytesProperty struct {
	// REQUIRED; Property
	Property []byte
}

// CollectionsIntProperty - Model with collection int properties
type CollectionsIntProperty struct {
	// REQUIRED; Property
	Property []int32
}

// CollectionsModelProperty - Model with collection model properties
type CollectionsModelProperty struct {
	// REQUIRED; Property
	Property []InnerModel
}

// CollectionsStringProperty - Model with collection string properties
type CollectionsStringProperty struct {
	// REQUIRED; Property
	Property []string
}

// DatetimeProperty - Model with a datetime property
type DatetimeProperty struct {
	// REQUIRED; Property
	Property *time.Time
}

// Decimal128Property - Model with a decimal128 property
type Decimal128Property struct {
	// REQUIRED; Property
	Property *float64
}

// DecimalProperty - Model with a decimal property
type DecimalProperty struct {
	// REQUIRED; Property
	Property *float64
}

// DictionaryStringProperty - Model with dictionary string properties
type DictionaryStringProperty struct {
	// REQUIRED; Property
	Property map[string]*string
}

// DurationProperty - Model with a duration property
type DurationProperty struct {
	// REQUIRED; Property
	Property *string
}

// EnumProperty - Model with enum properties
type EnumProperty struct {
	// REQUIRED; Property
	Property *FixedInnerEnum
}

// ExtensibleEnumProperty - Model with extensible enum properties
type ExtensibleEnumProperty struct {
	// REQUIRED; Property
	Property *InnerEnum
}

// FloatLiteralProperty - Model with a float literal property.
type FloatLiteralProperty struct {
	// CONSTANT; Property
	// Field has constant value 43.125, any specified value is ignored.
	Property *float32
}

// FloatProperty - Model with a float property
type FloatProperty struct {
	// REQUIRED; Property
	Property *float32
}

// InnerModel - Inner model. Will be a property type for ModelWithModelProperties
type InnerModel struct {
	// REQUIRED; Required string property
	Property *string
}

// IntLiteralProperty - Model with a int literal property.
type IntLiteralProperty struct {
	// CONSTANT; Property
	// Field has constant value 42, any specified value is ignored.
	Property *int32
}

// IntProperty - Model with a int property
type IntProperty struct {
	// REQUIRED; Property
	Property *int32
}

// ModelProperty - Model with model properties
type ModelProperty struct {
	// REQUIRED; Property
	Property *InnerModel
}

// NeverProperty - Model with a property never. (This property should not be included).
type NeverProperty struct {
}

// StringLiteralProperty - Model with a string literal property.
type StringLiteralProperty struct {
	// CONSTANT; Property
	// Field has constant value "hello", any specified value is ignored.
	Property *string
}

// StringProperty - Model with a string property
type StringProperty struct {
	// REQUIRED; Property
	Property *string
}

// UnionEnumValueProperty - Template type for testing models with specific properties. Pass in the type of the property you
// are looking for
type UnionEnumValueProperty struct {
	// CONSTANT; Property
	// Field has constant value ExtendedEnumEnumValue2, any specified value is ignored.
	Property *ExtendedEnum
}

// UnionFloatLiteralProperty - Model with a union of float literal as property.
type UnionFloatLiteralProperty struct {
	// REQUIRED; Property
	Property *UnionFloatLiteralPropertyProperty
}

// UnionIntLiteralProperty - Model with a union of int literal as property.
type UnionIntLiteralProperty struct {
	// REQUIRED; Property
	Property *UnionIntLiteralPropertyProperty
}

// UnionStringLiteralProperty - Model with a union of string literal as property.
type UnionStringLiteralProperty struct {
	// REQUIRED; Property
	Property *UnionStringLiteralPropertyProperty
}

// UnknownArrayProperty - Model with a property unknown, and the data is an array.
type UnknownArrayProperty struct {
	// REQUIRED; Property
	Property any
}

// UnknownDictProperty - Model with a property unknown, and the data is a dictionnary.
type UnknownDictProperty struct {
	// REQUIRED; Property
	Property any
}

// UnknownIntProperty - Model with a property unknown, and the data is a int32.
type UnknownIntProperty struct {
	// REQUIRED; Property
	Property any
}

// UnknownStringProperty - Model with a property unknown, and the data is a string.
type UnknownStringProperty struct {
	// REQUIRED; Property
	Property any
}
