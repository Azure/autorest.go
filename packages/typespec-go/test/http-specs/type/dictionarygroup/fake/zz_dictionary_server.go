// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// DictionaryServer is a fake server for instances of the dictionarygroup.DictionaryClient type.
type DictionaryServer struct {
	// DictionaryBooleanValueServer contains the fakes for client DictionaryBooleanValueClient
	DictionaryBooleanValueServer DictionaryBooleanValueServer

	// DictionaryDatetimeValueServer contains the fakes for client DictionaryDatetimeValueClient
	DictionaryDatetimeValueServer DictionaryDatetimeValueServer

	// DictionaryDurationValueServer contains the fakes for client DictionaryDurationValueClient
	DictionaryDurationValueServer DictionaryDurationValueServer

	// DictionaryFloat32ValueServer contains the fakes for client DictionaryFloat32ValueClient
	DictionaryFloat32ValueServer DictionaryFloat32ValueServer

	// DictionaryInt32ValueServer contains the fakes for client DictionaryInt32ValueClient
	DictionaryInt32ValueServer DictionaryInt32ValueServer

	// DictionaryInt64ValueServer contains the fakes for client DictionaryInt64ValueClient
	DictionaryInt64ValueServer DictionaryInt64ValueServer

	// DictionaryModelValueServer contains the fakes for client DictionaryModelValueClient
	DictionaryModelValueServer DictionaryModelValueServer

	// DictionaryNullableFloatValueServer contains the fakes for client DictionaryNullableFloatValueClient
	DictionaryNullableFloatValueServer DictionaryNullableFloatValueServer

	// DictionaryRecursiveModelValueServer contains the fakes for client DictionaryRecursiveModelValueClient
	DictionaryRecursiveModelValueServer DictionaryRecursiveModelValueServer

	// DictionaryStringValueServer contains the fakes for client DictionaryStringValueClient
	DictionaryStringValueServer DictionaryStringValueServer

	// DictionaryUnknownValueServer contains the fakes for client DictionaryUnknownValueClient
	DictionaryUnknownValueServer DictionaryUnknownValueServer
}

// NewDictionaryServerTransport creates a new instance of DictionaryServerTransport with the provided implementation.
// The returned DictionaryServerTransport instance is connected to an instance of dictionarygroup.DictionaryClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewDictionaryServerTransport(srv *DictionaryServer) *DictionaryServerTransport {
	return &DictionaryServerTransport{srv: srv}
}

// DictionaryServerTransport connects instances of dictionarygroup.DictionaryClient to instances of DictionaryServer.
// Don't use this type directly, use NewDictionaryServerTransport instead.
type DictionaryServerTransport struct {
	srv                                   *DictionaryServer
	trMu                                  sync.Mutex
	trDictionaryBooleanValueServer        *DictionaryBooleanValueServerTransport
	trDictionaryDatetimeValueServer       *DictionaryDatetimeValueServerTransport
	trDictionaryDurationValueServer       *DictionaryDurationValueServerTransport
	trDictionaryFloat32ValueServer        *DictionaryFloat32ValueServerTransport
	trDictionaryInt32ValueServer          *DictionaryInt32ValueServerTransport
	trDictionaryInt64ValueServer          *DictionaryInt64ValueServerTransport
	trDictionaryModelValueServer          *DictionaryModelValueServerTransport
	trDictionaryNullableFloatValueServer  *DictionaryNullableFloatValueServerTransport
	trDictionaryRecursiveModelValueServer *DictionaryRecursiveModelValueServerTransport
	trDictionaryStringValueServer         *DictionaryStringValueServerTransport
	trDictionaryUnknownValueServer        *DictionaryUnknownValueServerTransport
}

// Do implements the policy.Transporter interface for DictionaryServerTransport.
func (d *DictionaryServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return d.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (d *DictionaryServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "DictionaryBooleanValueClient":
		initServer(&d.trMu, &d.trDictionaryBooleanValueServer, func() *DictionaryBooleanValueServerTransport {
			return NewDictionaryBooleanValueServerTransport(&d.srv.DictionaryBooleanValueServer)
		})
		resp, err = d.trDictionaryBooleanValueServer.Do(req)
	case "DictionaryDatetimeValueClient":
		initServer(&d.trMu, &d.trDictionaryDatetimeValueServer, func() *DictionaryDatetimeValueServerTransport {
			return NewDictionaryDatetimeValueServerTransport(&d.srv.DictionaryDatetimeValueServer)
		})
		resp, err = d.trDictionaryDatetimeValueServer.Do(req)
	case "DictionaryDurationValueClient":
		initServer(&d.trMu, &d.trDictionaryDurationValueServer, func() *DictionaryDurationValueServerTransport {
			return NewDictionaryDurationValueServerTransport(&d.srv.DictionaryDurationValueServer)
		})
		resp, err = d.trDictionaryDurationValueServer.Do(req)
	case "DictionaryFloat32ValueClient":
		initServer(&d.trMu, &d.trDictionaryFloat32ValueServer, func() *DictionaryFloat32ValueServerTransport {
			return NewDictionaryFloat32ValueServerTransport(&d.srv.DictionaryFloat32ValueServer)
		})
		resp, err = d.trDictionaryFloat32ValueServer.Do(req)
	case "DictionaryInt32ValueClient":
		initServer(&d.trMu, &d.trDictionaryInt32ValueServer, func() *DictionaryInt32ValueServerTransport {
			return NewDictionaryInt32ValueServerTransport(&d.srv.DictionaryInt32ValueServer)
		})
		resp, err = d.trDictionaryInt32ValueServer.Do(req)
	case "DictionaryInt64ValueClient":
		initServer(&d.trMu, &d.trDictionaryInt64ValueServer, func() *DictionaryInt64ValueServerTransport {
			return NewDictionaryInt64ValueServerTransport(&d.srv.DictionaryInt64ValueServer)
		})
		resp, err = d.trDictionaryInt64ValueServer.Do(req)
	case "DictionaryModelValueClient":
		initServer(&d.trMu, &d.trDictionaryModelValueServer, func() *DictionaryModelValueServerTransport {
			return NewDictionaryModelValueServerTransport(&d.srv.DictionaryModelValueServer)
		})
		resp, err = d.trDictionaryModelValueServer.Do(req)
	case "DictionaryNullableFloatValueClient":
		initServer(&d.trMu, &d.trDictionaryNullableFloatValueServer, func() *DictionaryNullableFloatValueServerTransport {
			return NewDictionaryNullableFloatValueServerTransport(&d.srv.DictionaryNullableFloatValueServer)
		})
		resp, err = d.trDictionaryNullableFloatValueServer.Do(req)
	case "DictionaryRecursiveModelValueClient":
		initServer(&d.trMu, &d.trDictionaryRecursiveModelValueServer, func() *DictionaryRecursiveModelValueServerTransport {
			return NewDictionaryRecursiveModelValueServerTransport(&d.srv.DictionaryRecursiveModelValueServer)
		})
		resp, err = d.trDictionaryRecursiveModelValueServer.Do(req)
	case "DictionaryStringValueClient":
		initServer(&d.trMu, &d.trDictionaryStringValueServer, func() *DictionaryStringValueServerTransport {
			return NewDictionaryStringValueServerTransport(&d.srv.DictionaryStringValueServer)
		})
		resp, err = d.trDictionaryStringValueServer.Do(req)
	case "DictionaryUnknownValueClient":
		initServer(&d.trMu, &d.trDictionaryUnknownValueServer, func() *DictionaryUnknownValueServerTransport {
			return NewDictionaryUnknownValueServerTransport(&d.srv.DictionaryUnknownValueServer)
		})
		resp, err = d.trDictionaryUnknownValueServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}

// set this to conditionally intercept incoming requests to DictionaryServerTransport
var dictionaryServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
