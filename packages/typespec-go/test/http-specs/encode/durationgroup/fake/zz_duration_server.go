// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// DurationServer is a fake server for instances of the durationgroup.DurationClient type.
type DurationServer struct {
	// DurationHeaderServer contains the fakes for client DurationHeaderClient
	DurationHeaderServer DurationHeaderServer

	// DurationPropertyServer contains the fakes for client DurationPropertyClient
	DurationPropertyServer DurationPropertyServer

	// DurationQueryServer contains the fakes for client DurationQueryClient
	DurationQueryServer DurationQueryServer
}

// NewDurationServerTransport creates a new instance of DurationServerTransport with the provided implementation.
// The returned DurationServerTransport instance is connected to an instance of durationgroup.DurationClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewDurationServerTransport(srv *DurationServer) *DurationServerTransport {
	return &DurationServerTransport{srv: srv}
}

// DurationServerTransport connects instances of durationgroup.DurationClient to instances of DurationServer.
// Don't use this type directly, use NewDurationServerTransport instead.
type DurationServerTransport struct {
	srv                      *DurationServer
	trMu                     sync.Mutex
	trDurationHeaderServer   *DurationHeaderServerTransport
	trDurationPropertyServer *DurationPropertyServerTransport
	trDurationQueryServer    *DurationQueryServerTransport
}

// Do implements the policy.Transporter interface for DurationServerTransport.
func (d *DurationServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return d.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (d *DurationServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "DurationHeaderClient":
		initServer(&d.trMu, &d.trDurationHeaderServer, func() *DurationHeaderServerTransport {
			return NewDurationHeaderServerTransport(&d.srv.DurationHeaderServer)
		})
		resp, err = d.trDurationHeaderServer.Do(req)
	case "DurationPropertyClient":
		initServer(&d.trMu, &d.trDurationPropertyServer, func() *DurationPropertyServerTransport {
			return NewDurationPropertyServerTransport(&d.srv.DurationPropertyServer)
		})
		resp, err = d.trDurationPropertyServer.Do(req)
	case "DurationQueryClient":
		initServer(&d.trMu, &d.trDurationQueryServer, func() *DurationQueryServerTransport {
			return NewDurationQueryServerTransport(&d.srv.DurationQueryServer)
		})
		resp, err = d.trDurationQueryServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}

// set this to conditionally intercept incoming requests to DurationServerTransport
var durationServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
