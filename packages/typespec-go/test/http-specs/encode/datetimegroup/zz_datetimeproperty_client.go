// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package datetimegroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// DatetimePropertyClient contains the methods for the DatetimeProperty group.
// Don't use this type directly, use [DatetimeClient.NewDatetimePropertyClient] instead.
type DatetimePropertyClient struct {
	internal *azcore.Client
}

// Default -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - DatetimePropertyClientDefaultOptions contains the optional parameters for the DatetimePropertyClient.Default
//     method.
func (client *DatetimePropertyClient) Default(ctx context.Context, body DefaultDatetimeProperty, options *DatetimePropertyClientDefaultOptions) (DatetimePropertyClientDefaultResponse, error) {
	var err error
	const operationName = "DatetimePropertyClient.Default"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.defaultCreateRequest(ctx, body, options)
	if err != nil {
		return DatetimePropertyClientDefaultResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DatetimePropertyClientDefaultResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DatetimePropertyClientDefaultResponse{}, err
	}
	resp, err := client.defaultHandleResponse(httpResp)
	return resp, err
}

// defaultCreateRequest creates the Default request.
func (client *DatetimePropertyClient) defaultCreateRequest(ctx context.Context, body DefaultDatetimeProperty, _ *DatetimePropertyClientDefaultOptions) (*policy.Request, error) {
	urlPath := "/encode/datetime/property/default"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// defaultHandleResponse handles the Default response.
func (client *DatetimePropertyClient) defaultHandleResponse(resp *http.Response) (DatetimePropertyClientDefaultResponse, error) {
	result := DatetimePropertyClientDefaultResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DefaultDatetimeProperty); err != nil {
		return DatetimePropertyClientDefaultResponse{}, err
	}
	return result, nil
}

// RFC3339 -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - DatetimePropertyClientRFC3339Options contains the optional parameters for the DatetimePropertyClient.RFC3339
//     method.
func (client *DatetimePropertyClient) RFC3339(ctx context.Context, body RFC3339DatetimeProperty, options *DatetimePropertyClientRFC3339Options) (DatetimePropertyClientRFC3339Response, error) {
	var err error
	const operationName = "DatetimePropertyClient.RFC3339"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.rfc3339CreateRequest(ctx, body, options)
	if err != nil {
		return DatetimePropertyClientRFC3339Response{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DatetimePropertyClientRFC3339Response{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DatetimePropertyClientRFC3339Response{}, err
	}
	resp, err := client.rfc3339HandleResponse(httpResp)
	return resp, err
}

// rfc3339CreateRequest creates the RFC3339 request.
func (client *DatetimePropertyClient) rfc3339CreateRequest(ctx context.Context, body RFC3339DatetimeProperty, _ *DatetimePropertyClientRFC3339Options) (*policy.Request, error) {
	urlPath := "/encode/datetime/property/rfc3339"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// rfc3339HandleResponse handles the RFC3339 response.
func (client *DatetimePropertyClient) rfc3339HandleResponse(resp *http.Response) (DatetimePropertyClientRFC3339Response, error) {
	result := DatetimePropertyClientRFC3339Response{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RFC3339DatetimeProperty); err != nil {
		return DatetimePropertyClientRFC3339Response{}, err
	}
	return result, nil
}

// RFC7231 -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - DatetimePropertyClientRFC7231Options contains the optional parameters for the DatetimePropertyClient.RFC7231
//     method.
func (client *DatetimePropertyClient) RFC7231(ctx context.Context, body RFC7231DatetimeProperty, options *DatetimePropertyClientRFC7231Options) (DatetimePropertyClientRFC7231Response, error) {
	var err error
	const operationName = "DatetimePropertyClient.RFC7231"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.rfc7231CreateRequest(ctx, body, options)
	if err != nil {
		return DatetimePropertyClientRFC7231Response{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DatetimePropertyClientRFC7231Response{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DatetimePropertyClientRFC7231Response{}, err
	}
	resp, err := client.rfc7231HandleResponse(httpResp)
	return resp, err
}

// rfc7231CreateRequest creates the RFC7231 request.
func (client *DatetimePropertyClient) rfc7231CreateRequest(ctx context.Context, body RFC7231DatetimeProperty, _ *DatetimePropertyClientRFC7231Options) (*policy.Request, error) {
	urlPath := "/encode/datetime/property/rfc7231"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// rfc7231HandleResponse handles the RFC7231 response.
func (client *DatetimePropertyClient) rfc7231HandleResponse(resp *http.Response) (DatetimePropertyClientRFC7231Response, error) {
	result := DatetimePropertyClientRFC7231Response{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RFC7231DatetimeProperty); err != nil {
		return DatetimePropertyClientRFC7231Response{}, err
	}
	return result, nil
}

// UnixTimestamp -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - DatetimePropertyClientUnixTimestampOptions contains the optional parameters for the DatetimePropertyClient.UnixTimestamp
//     method.
func (client *DatetimePropertyClient) UnixTimestamp(ctx context.Context, body UnixTimestampDatetimeProperty, options *DatetimePropertyClientUnixTimestampOptions) (DatetimePropertyClientUnixTimestampResponse, error) {
	var err error
	const operationName = "DatetimePropertyClient.UnixTimestamp"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.unixTimestampCreateRequest(ctx, body, options)
	if err != nil {
		return DatetimePropertyClientUnixTimestampResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DatetimePropertyClientUnixTimestampResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DatetimePropertyClientUnixTimestampResponse{}, err
	}
	resp, err := client.unixTimestampHandleResponse(httpResp)
	return resp, err
}

// unixTimestampCreateRequest creates the UnixTimestamp request.
func (client *DatetimePropertyClient) unixTimestampCreateRequest(ctx context.Context, body UnixTimestampDatetimeProperty, _ *DatetimePropertyClientUnixTimestampOptions) (*policy.Request, error) {
	urlPath := "/encode/datetime/property/unix-timestamp"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// unixTimestampHandleResponse handles the UnixTimestamp response.
func (client *DatetimePropertyClient) unixTimestampHandleResponse(resp *http.Response) (DatetimePropertyClientUnixTimestampResponse, error) {
	result := DatetimePropertyClientUnixTimestampResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.UnixTimestampDatetimeProperty); err != nil {
		return DatetimePropertyClientUnixTimestampResponse{}, err
	}
	return result, nil
}

// UnixTimestampArray -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - DatetimePropertyClientUnixTimestampArrayOptions contains the optional parameters for the DatetimePropertyClient.UnixTimestampArray
//     method.
func (client *DatetimePropertyClient) UnixTimestampArray(ctx context.Context, body UnixTimestampArrayDatetimeProperty, options *DatetimePropertyClientUnixTimestampArrayOptions) (DatetimePropertyClientUnixTimestampArrayResponse, error) {
	var err error
	const operationName = "DatetimePropertyClient.UnixTimestampArray"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.unixTimestampArrayCreateRequest(ctx, body, options)
	if err != nil {
		return DatetimePropertyClientUnixTimestampArrayResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DatetimePropertyClientUnixTimestampArrayResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DatetimePropertyClientUnixTimestampArrayResponse{}, err
	}
	resp, err := client.unixTimestampArrayHandleResponse(httpResp)
	return resp, err
}

// unixTimestampArrayCreateRequest creates the UnixTimestampArray request.
func (client *DatetimePropertyClient) unixTimestampArrayCreateRequest(ctx context.Context, body UnixTimestampArrayDatetimeProperty, _ *DatetimePropertyClientUnixTimestampArrayOptions) (*policy.Request, error) {
	urlPath := "/encode/datetime/property/unix-timestamp-array"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// unixTimestampArrayHandleResponse handles the UnixTimestampArray response.
func (client *DatetimePropertyClient) unixTimestampArrayHandleResponse(resp *http.Response) (DatetimePropertyClientUnixTimestampArrayResponse, error) {
	result := DatetimePropertyClientUnixTimestampArrayResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.UnixTimestampArrayDatetimeProperty); err != nil {
		return DatetimePropertyClientUnixTimestampArrayResponse{}, err
	}
	return result, nil
}
