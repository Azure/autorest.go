// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package madeoptionalgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
)

// MadeOptionalClient - Test for the `@madeOptional` decorator.
// Don't use this type directly, use NewMadeOptionalClientWithNoCredential() instead.
type MadeOptionalClient struct {
	internal *azcore.Client
	endpoint string
	version  string
}

// MadeOptionalClientOptions contains the optional values for creating a [MadeOptionalClient].
type MadeOptionalClientOptions struct {
	azcore.ClientOptions
}

// NewMadeOptionalClientWithNoCredential creates a new instance of MadeOptionalClient with the specified values.
//   - endpoint - Need to be set as 'http://localhost:3000' in client.
//   - MadeOptionalClientOptions - MadeOptionalClientOptions contains the optional values for creating a [MadeOptionalClient]
func NewMadeOptionalClientWithNoCredential(endpoint string, options *MadeOptionalClientOptions) (*MadeOptionalClient, error) {
	if options == nil {
		options = &MadeOptionalClientOptions{}
	}
	cl, err := azcore.NewClient(moduleName, moduleVersion, runtime.PipelineOptions{
		APIVersion: runtime.APIVersionOptions{
			Location: runtime.APIVersionLocationPath,
		},
	}, &options.ClientOptions)
	if err != nil {
		return nil, err
	}
	version := "v2"
	if options.APIVersion != "" {
		version = options.APIVersion
	}
	client := &MadeOptionalClient{
		endpoint: endpoint,
		version:  version,
		internal: cl,
	}
	return client, nil
}

// Test -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - MadeOptionalClientTestOptions contains the optional parameters for the MadeOptionalClient.Test method.
func (client *MadeOptionalClient) Test(ctx context.Context, body TestModel, options *MadeOptionalClientTestOptions) (MadeOptionalClientTestResponse, error) {
	var err error
	const operationName = "MadeOptionalClient.Test"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.testCreateRequest(ctx, body, options)
	if err != nil {
		return MadeOptionalClientTestResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return MadeOptionalClientTestResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return MadeOptionalClientTestResponse{}, err
	}
	resp, err := client.testHandleResponse(httpResp)
	return resp, err
}

// testCreateRequest creates the Test request.
func (client *MadeOptionalClient) testCreateRequest(ctx context.Context, body TestModel, options *MadeOptionalClientTestOptions) (*policy.Request, error) {
	host := "{endpoint}/versioning/made-optional/api-version:{version}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	host = strings.ReplaceAll(host, "{version}", client.version)
	urlPath := "/test"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Param != nil {
		reqQP.Set("param", *options.Param)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// testHandleResponse handles the Test response.
func (client *MadeOptionalClient) testHandleResponse(resp *http.Response) (MadeOptionalClientTestResponse, error) {
	result := MadeOptionalClientTestResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.TestModel); err != nil {
		return MadeOptionalClientTestResponse{}, err
	}
	return result, nil
}
