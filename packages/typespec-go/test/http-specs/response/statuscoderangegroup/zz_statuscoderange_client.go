// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package statuscoderangegroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// StatusCodeRangeClient - Test for range of status code.
// Don't use this type directly, use a constructor function instead.
type StatusCodeRangeClient struct {
	internal *azcore.Client
}

// ErrorResponseStatusCode404 -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - StatusCodeRangeClientErrorResponseStatusCode404Options contains the optional parameters for the StatusCodeRangeClient.ErrorResponseStatusCode404
//     method.
func (client *StatusCodeRangeClient) ErrorResponseStatusCode404(ctx context.Context, options *StatusCodeRangeClientErrorResponseStatusCode404Options) (StatusCodeRangeClientErrorResponseStatusCode404Response, error) {
	var err error
	const operationName = "StatusCodeRangeClient.ErrorResponseStatusCode404"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.errorResponseStatusCode404CreateRequest(ctx, options)
	if err != nil {
		return StatusCodeRangeClientErrorResponseStatusCode404Response{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return StatusCodeRangeClientErrorResponseStatusCode404Response{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return StatusCodeRangeClientErrorResponseStatusCode404Response{}, err
	}
	return StatusCodeRangeClientErrorResponseStatusCode404Response{}, nil
}

// errorResponseStatusCode404CreateRequest creates the ErrorResponseStatusCode404 request.
func (client *StatusCodeRangeClient) errorResponseStatusCode404CreateRequest(ctx context.Context, _ *StatusCodeRangeClientErrorResponseStatusCode404Options) (*policy.Request, error) {
	urlPath := "/response/status-code-range/error-response-status-code-404"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// ErrorResponseStatusCodeInRange -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - StatusCodeRangeClientErrorResponseStatusCodeInRangeOptions contains the optional parameters for the StatusCodeRangeClient.ErrorResponseStatusCodeInRange
//     method.
func (client *StatusCodeRangeClient) ErrorResponseStatusCodeInRange(ctx context.Context, options *StatusCodeRangeClientErrorResponseStatusCodeInRangeOptions) (StatusCodeRangeClientErrorResponseStatusCodeInRangeResponse, error) {
	var err error
	const operationName = "StatusCodeRangeClient.ErrorResponseStatusCodeInRange"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.errorResponseStatusCodeInRangeCreateRequest(ctx, options)
	if err != nil {
		return StatusCodeRangeClientErrorResponseStatusCodeInRangeResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return StatusCodeRangeClientErrorResponseStatusCodeInRangeResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return StatusCodeRangeClientErrorResponseStatusCodeInRangeResponse{}, err
	}
	return StatusCodeRangeClientErrorResponseStatusCodeInRangeResponse{}, nil
}

// errorResponseStatusCodeInRangeCreateRequest creates the ErrorResponseStatusCodeInRange request.
func (client *StatusCodeRangeClient) errorResponseStatusCodeInRangeCreateRequest(ctx context.Context, _ *StatusCodeRangeClientErrorResponseStatusCodeInRangeOptions) (*policy.Request, error) {
	urlPath := "/response/status-code-range/error-response-status-code-in-range"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}
