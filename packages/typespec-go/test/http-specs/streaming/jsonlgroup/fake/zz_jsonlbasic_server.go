// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	"jsonlgroup"
	"net/http"

	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// JsonlBasicServer is a fake server for instances of the jsonlgroup.JsonlBasicClient type.
type JsonlBasicServer struct {
	// Receive is the fake for method JsonlBasicClient.Receive
	// HTTP status codes to indicate success: http.StatusOK
	Receive func(ctx context.Context, options *jsonlgroup.JsonlBasicClientReceiveOptions) (resp azfake.Responder[jsonlgroup.JsonlBasicClientReceiveResponse], errResp azfake.ErrorResponder)

	// Send is the fake for method JsonlBasicClient.Send
	// HTTP status codes to indicate success: http.StatusNoContent
	Send func(ctx context.Context, options *jsonlgroup.JsonlBasicClientSendOptions) (resp azfake.Responder[jsonlgroup.JsonlBasicClientSendResponse], errResp azfake.ErrorResponder)
}

// NewJsonlBasicServerTransport creates a new instance of JsonlBasicServerTransport with the provided implementation.
// The returned JsonlBasicServerTransport instance is connected to an instance of jsonlgroup.JsonlBasicClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewJsonlBasicServerTransport(srv *JsonlBasicServer) *JsonlBasicServerTransport {
	return &JsonlBasicServerTransport{srv: srv}
}

// JsonlBasicServerTransport connects instances of jsonlgroup.JsonlBasicClient to instances of JsonlBasicServer.
// Don't use this type directly, use NewJsonlBasicServerTransport instead.
type JsonlBasicServerTransport struct {
	srv *JsonlBasicServer
}

// Do implements the policy.Transporter interface for JsonlBasicServerTransport.
func (j *JsonlBasicServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return j.dispatchToMethodFake(req, method)
}

func (j *JsonlBasicServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if jsonlBasicServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = jsonlBasicServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "JsonlBasicClient.Receive":
				res.resp, res.err = j.dispatchReceive(req)
			case "JsonlBasicClient.Send":
				res.resp, res.err = j.dispatchSend(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (j *JsonlBasicServerTransport) dispatchReceive(req *http.Request) (*http.Response, error) {
	if j.srv.Receive == nil {
		return nil, &nonRetriableError{errors.New("fake for method Receive not implemented")}
	}
	respr, errRespr := j.srv.Receive(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsByteArray(respContent, server.GetResponse(respr).Value, runtime.Base64StdFormat, req)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).ContentType; val != nil {
		resp.Header.Set("content-type", "application/jsonl")
	}
	return resp, nil
}

func (j *JsonlBasicServerTransport) dispatchSend(req *http.Request) (*http.Response, error) {
	if j.srv.Send == nil {
		return nil, &nonRetriableError{errors.New("fake for method Send not implemented")}
	}
	respr, errRespr := j.srv.Send(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to JsonlBasicServerTransport
var jsonlBasicServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
