// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// JsonlServer is a fake server for instances of the jsonlgroup.JsonlClient type.
type JsonlServer struct {
	// JsonlBasicServer contains the fakes for client JsonlBasicClient
	JsonlBasicServer JsonlBasicServer
}

// NewJsonlServerTransport creates a new instance of JsonlServerTransport with the provided implementation.
// The returned JsonlServerTransport instance is connected to an instance of jsonlgroup.JsonlClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewJsonlServerTransport(srv *JsonlServer) *JsonlServerTransport {
	return &JsonlServerTransport{srv: srv}
}

// JsonlServerTransport connects instances of jsonlgroup.JsonlClient to instances of JsonlServer.
// Don't use this type directly, use NewJsonlServerTransport instead.
type JsonlServerTransport struct {
	srv                *JsonlServer
	trMu               sync.Mutex
	trJsonlBasicServer *JsonlBasicServerTransport
}

// Do implements the policy.Transporter interface for JsonlServerTransport.
func (j *JsonlServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return j.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (j *JsonlServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "JsonlBasicClient":
		initServer(&j.trMu, &j.trJsonlBasicServer, func() *JsonlBasicServerTransport {
			return NewJsonlBasicServerTransport(&j.srv.JsonlBasicServer)
		})
		resp, err = j.trJsonlBasicServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}

// set this to conditionally intercept incoming requests to JsonlServerTransport
var jsonlServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
