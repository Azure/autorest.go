// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package jsonlgroup

import (
	"context"
	"net/http"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// JsonlBasicClient contains the methods for the JsonlBasic group.
// Don't use this type directly, use [JsonlClient.NewJsonlBasicClient] instead.
type JsonlBasicClient struct {
	internal *azcore.Client
}

// Receive -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - JsonlBasicClientReceiveOptions contains the optional parameters for the JsonlBasicClient.Receive method.
func (client *JsonlBasicClient) Receive(ctx context.Context, options *JsonlBasicClientReceiveOptions) (JsonlBasicClientReceiveResponse, error) {
	var err error
	const operationName = "JsonlBasicClient.Receive"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.receiveCreateRequest(ctx, options)
	if err != nil {
		return JsonlBasicClientReceiveResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return JsonlBasicClientReceiveResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return JsonlBasicClientReceiveResponse{}, err
	}
	resp, err := client.receiveHandleResponse(httpResp)
	return resp, err
}

// receiveCreateRequest creates the Receive request.
func (client *JsonlBasicClient) receiveCreateRequest(ctx context.Context, _ *JsonlBasicClientReceiveOptions) (*policy.Request, error) {
	urlPath := "/streaming/jsonl/basic/receive"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/jsonl"}
	return req, nil
}

// receiveHandleResponse handles the Receive response.
func (client *JsonlBasicClient) receiveHandleResponse(resp *http.Response) (JsonlBasicClientReceiveResponse, error) {
	result := JsonlBasicClientReceiveResponse{}
	if val := resp.Header.Get("content-type"); val != "" {
		result.ContentType = &val
	}
	if err := runtime.UnmarshalAsByteArray(resp, &result.Value, runtime.Base64StdFormat); err != nil {
		return JsonlBasicClientReceiveResponse{}, err
	}
	return result, nil
}

// Send -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - JsonlBasicClientSendOptions contains the optional parameters for the JsonlBasicClient.Send method.
func (client *JsonlBasicClient) Send(ctx context.Context, options *JsonlBasicClientSendOptions) (JsonlBasicClientSendResponse, error) {
	var err error
	const operationName = "JsonlBasicClient.Send"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.sendCreateRequest(ctx, options)
	if err != nil {
		return JsonlBasicClientSendResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return JsonlBasicClientSendResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return JsonlBasicClientSendResponse{}, err
	}
	return JsonlBasicClientSendResponse{}, nil
}

// sendCreateRequest creates the Send request.
func (client *JsonlBasicClient) sendCreateRequest(ctx context.Context, _ *JsonlBasicClientSendOptions) (*policy.Request, error) {
	urlPath := "/streaming/jsonl/basic/send"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}
