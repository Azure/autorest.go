// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package apikeygroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// APIKeyClient - Illustrates clients generated with ApiKey authentication.
// Don't use this type directly, use NewAPIKeyClientWithKeyCredential() instead.
type APIKeyClient struct {
	internal *azcore.Client
	endpoint string
}

// APIKeyClientOptions contains the optional values for creating a [APIKeyClient].
type APIKeyClientOptions struct {
	azcore.ClientOptions
}

// NewAPIKeyClientWithKeyCredential creates a new instance of APIKeyClient with the specified values.
//   - endpoint - Service host
//   - credential - the [azcore.KeyCredential] used to authenticate requests.
//   - APIKeyClientOptions - APIKeyClientOptions contains the optional values for creating a [APIKeyClient]
func NewAPIKeyClientWithKeyCredential(endpoint string, credential *azcore.KeyCredential, options *APIKeyClientOptions) (*APIKeyClient, error) {
	if options == nil {
		options = &APIKeyClientOptions{}
	}
	cl, err := azcore.NewClient(moduleName, moduleVersion, runtime.PipelineOptions{
		PerCall: []policy.Policy{
			runtime.NewKeyCredentialPolicy(credential, "x-ms-api-key", &runtime.KeyCredentialPolicyOptions{
				InsecureAllowCredentialWithHTTP: options.InsecureAllowCredentialWithHTTP,
			}),
		},
	}, &options.ClientOptions)
	if err != nil {
		return nil, err
	}
	client := &APIKeyClient{
		endpoint: endpoint,
		internal: cl,
	}
	return client, nil
}

// Invalid - Check whether client is authenticated.
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - APIKeyClientInvalidOptions contains the optional parameters for the APIKeyClient.Invalid method.
func (client *APIKeyClient) Invalid(ctx context.Context, options *APIKeyClientInvalidOptions) (APIKeyClientInvalidResponse, error) {
	var err error
	const operationName = "APIKeyClient.Invalid"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.invalidCreateRequest(ctx, options)
	if err != nil {
		return APIKeyClientInvalidResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return APIKeyClientInvalidResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return APIKeyClientInvalidResponse{}, err
	}
	return APIKeyClientInvalidResponse{}, nil
}

// invalidCreateRequest creates the Invalid request.
func (client *APIKeyClient) invalidCreateRequest(ctx context.Context, _ *APIKeyClientInvalidOptions) (*policy.Request, error) {
	urlPath := "/authentication/api-key/invalid"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// Valid - Check whether client is authenticated
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - APIKeyClientValidOptions contains the optional parameters for the APIKeyClient.Valid method.
func (client *APIKeyClient) Valid(ctx context.Context, options *APIKeyClientValidOptions) (APIKeyClientValidResponse, error) {
	var err error
	const operationName = "APIKeyClient.Valid"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.validCreateRequest(ctx, options)
	if err != nil {
		return APIKeyClientValidResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return APIKeyClientValidResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return APIKeyClientValidResponse{}, err
	}
	return APIKeyClientValidResponse{}, nil
}

// validCreateRequest creates the Valid request.
func (client *APIKeyClient) validCreateRequest(ctx context.Context, _ *APIKeyClientValidOptions) (*policy.Request, error) {
	urlPath := "/authentication/api-key/valid"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}
