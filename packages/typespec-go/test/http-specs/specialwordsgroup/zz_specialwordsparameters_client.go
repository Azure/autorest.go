// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package specialwordsgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// SpecialWordsParametersClient - Verify reserved words as parameter name.
// Don't use this type directly, use [SpecialWordsClient.NewSpecialWordsParametersClient] instead.
type SpecialWordsParametersClient struct {
	internal *azcore.Client
}

// WithAnd -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithAndOptions contains the optional parameters for the SpecialWordsParametersClient.WithAnd
//     method.
func (client *SpecialWordsParametersClient) WithAnd(ctx context.Context, and string, options *SpecialWordsParametersClientWithAndOptions) (SpecialWordsParametersClientWithAndResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithAnd"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withAndCreateRequest(ctx, and, options)
	if err != nil {
		return SpecialWordsParametersClientWithAndResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithAndResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithAndResponse{}, err
	}
	return SpecialWordsParametersClientWithAndResponse{}, nil
}

// withAndCreateRequest creates the WithAnd request.
func (client *SpecialWordsParametersClient) withAndCreateRequest(ctx context.Context, and string, _ *SpecialWordsParametersClientWithAndOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/and"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("and", and)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithAs -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithAsOptions contains the optional parameters for the SpecialWordsParametersClient.WithAs
//     method.
func (client *SpecialWordsParametersClient) WithAs(ctx context.Context, as string, options *SpecialWordsParametersClientWithAsOptions) (SpecialWordsParametersClientWithAsResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithAs"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withAsCreateRequest(ctx, as, options)
	if err != nil {
		return SpecialWordsParametersClientWithAsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithAsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithAsResponse{}, err
	}
	return SpecialWordsParametersClientWithAsResponse{}, nil
}

// withAsCreateRequest creates the WithAs request.
func (client *SpecialWordsParametersClient) withAsCreateRequest(ctx context.Context, as string, _ *SpecialWordsParametersClientWithAsOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/as"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("as", as)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithAssert -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithAssertOptions contains the optional parameters for the SpecialWordsParametersClient.WithAssert
//     method.
func (client *SpecialWordsParametersClient) WithAssert(ctx context.Context, assert string, options *SpecialWordsParametersClientWithAssertOptions) (SpecialWordsParametersClientWithAssertResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithAssert"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withAssertCreateRequest(ctx, assert, options)
	if err != nil {
		return SpecialWordsParametersClientWithAssertResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithAssertResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithAssertResponse{}, err
	}
	return SpecialWordsParametersClientWithAssertResponse{}, nil
}

// withAssertCreateRequest creates the WithAssert request.
func (client *SpecialWordsParametersClient) withAssertCreateRequest(ctx context.Context, assert string, _ *SpecialWordsParametersClientWithAssertOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/assert"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("assert", assert)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithAsync -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithAsyncOptions contains the optional parameters for the SpecialWordsParametersClient.WithAsync
//     method.
func (client *SpecialWordsParametersClient) WithAsync(ctx context.Context, async string, options *SpecialWordsParametersClientWithAsyncOptions) (SpecialWordsParametersClientWithAsyncResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithAsync"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withAsyncCreateRequest(ctx, async, options)
	if err != nil {
		return SpecialWordsParametersClientWithAsyncResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithAsyncResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithAsyncResponse{}, err
	}
	return SpecialWordsParametersClientWithAsyncResponse{}, nil
}

// withAsyncCreateRequest creates the WithAsync request.
func (client *SpecialWordsParametersClient) withAsyncCreateRequest(ctx context.Context, async string, _ *SpecialWordsParametersClientWithAsyncOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/async"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("async", async)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithAwait -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithAwaitOptions contains the optional parameters for the SpecialWordsParametersClient.WithAwait
//     method.
func (client *SpecialWordsParametersClient) WithAwait(ctx context.Context, await string, options *SpecialWordsParametersClientWithAwaitOptions) (SpecialWordsParametersClientWithAwaitResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithAwait"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withAwaitCreateRequest(ctx, await, options)
	if err != nil {
		return SpecialWordsParametersClientWithAwaitResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithAwaitResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithAwaitResponse{}, err
	}
	return SpecialWordsParametersClientWithAwaitResponse{}, nil
}

// withAwaitCreateRequest creates the WithAwait request.
func (client *SpecialWordsParametersClient) withAwaitCreateRequest(ctx context.Context, await string, _ *SpecialWordsParametersClientWithAwaitOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/await"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("await", await)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithBreak -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithBreakOptions contains the optional parameters for the SpecialWordsParametersClient.WithBreak
//     method.
func (client *SpecialWordsParametersClient) WithBreak(ctx context.Context, breakParam string, options *SpecialWordsParametersClientWithBreakOptions) (SpecialWordsParametersClientWithBreakResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithBreak"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withBreakCreateRequest(ctx, breakParam, options)
	if err != nil {
		return SpecialWordsParametersClientWithBreakResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithBreakResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithBreakResponse{}, err
	}
	return SpecialWordsParametersClientWithBreakResponse{}, nil
}

// withBreakCreateRequest creates the WithBreak request.
func (client *SpecialWordsParametersClient) withBreakCreateRequest(ctx context.Context, breakParam string, _ *SpecialWordsParametersClientWithBreakOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/break"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("break", breakParam)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithCancellationToken -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithCancellationTokenOptions contains the optional parameters for the SpecialWordsParametersClient.WithCancellationToken
//     method.
func (client *SpecialWordsParametersClient) WithCancellationToken(ctx context.Context, cancellationToken string, options *SpecialWordsParametersClientWithCancellationTokenOptions) (SpecialWordsParametersClientWithCancellationTokenResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithCancellationToken"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withCancellationTokenCreateRequest(ctx, cancellationToken, options)
	if err != nil {
		return SpecialWordsParametersClientWithCancellationTokenResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithCancellationTokenResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithCancellationTokenResponse{}, err
	}
	return SpecialWordsParametersClientWithCancellationTokenResponse{}, nil
}

// withCancellationTokenCreateRequest creates the WithCancellationToken request.
func (client *SpecialWordsParametersClient) withCancellationTokenCreateRequest(ctx context.Context, cancellationToken string, _ *SpecialWordsParametersClientWithCancellationTokenOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/cancellationToken"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("cancellationToken", cancellationToken)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithClass -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithClassOptions contains the optional parameters for the SpecialWordsParametersClient.WithClass
//     method.
func (client *SpecialWordsParametersClient) WithClass(ctx context.Context, class string, options *SpecialWordsParametersClientWithClassOptions) (SpecialWordsParametersClientWithClassResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithClass"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withClassCreateRequest(ctx, class, options)
	if err != nil {
		return SpecialWordsParametersClientWithClassResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithClassResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithClassResponse{}, err
	}
	return SpecialWordsParametersClientWithClassResponse{}, nil
}

// withClassCreateRequest creates the WithClass request.
func (client *SpecialWordsParametersClient) withClassCreateRequest(ctx context.Context, class string, _ *SpecialWordsParametersClientWithClassOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/class"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("class", class)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithConstructor -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithConstructorOptions contains the optional parameters for the SpecialWordsParametersClient.WithConstructor
//     method.
func (client *SpecialWordsParametersClient) WithConstructor(ctx context.Context, constructor string, options *SpecialWordsParametersClientWithConstructorOptions) (SpecialWordsParametersClientWithConstructorResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithConstructor"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withConstructorCreateRequest(ctx, constructor, options)
	if err != nil {
		return SpecialWordsParametersClientWithConstructorResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithConstructorResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithConstructorResponse{}, err
	}
	return SpecialWordsParametersClientWithConstructorResponse{}, nil
}

// withConstructorCreateRequest creates the WithConstructor request.
func (client *SpecialWordsParametersClient) withConstructorCreateRequest(ctx context.Context, constructor string, _ *SpecialWordsParametersClientWithConstructorOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/constructor"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("constructor", constructor)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithContinue -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithContinueOptions contains the optional parameters for the SpecialWordsParametersClient.WithContinue
//     method.
func (client *SpecialWordsParametersClient) WithContinue(ctx context.Context, continueParam string, options *SpecialWordsParametersClientWithContinueOptions) (SpecialWordsParametersClientWithContinueResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithContinue"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withContinueCreateRequest(ctx, continueParam, options)
	if err != nil {
		return SpecialWordsParametersClientWithContinueResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithContinueResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithContinueResponse{}, err
	}
	return SpecialWordsParametersClientWithContinueResponse{}, nil
}

// withContinueCreateRequest creates the WithContinue request.
func (client *SpecialWordsParametersClient) withContinueCreateRequest(ctx context.Context, continueParam string, _ *SpecialWordsParametersClientWithContinueOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/continue"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("continue", continueParam)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithDef -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithDefOptions contains the optional parameters for the SpecialWordsParametersClient.WithDef
//     method.
func (client *SpecialWordsParametersClient) WithDef(ctx context.Context, def string, options *SpecialWordsParametersClientWithDefOptions) (SpecialWordsParametersClientWithDefResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithDef"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withDefCreateRequest(ctx, def, options)
	if err != nil {
		return SpecialWordsParametersClientWithDefResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithDefResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithDefResponse{}, err
	}
	return SpecialWordsParametersClientWithDefResponse{}, nil
}

// withDefCreateRequest creates the WithDef request.
func (client *SpecialWordsParametersClient) withDefCreateRequest(ctx context.Context, def string, _ *SpecialWordsParametersClientWithDefOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/def"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("def", def)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithDel -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithDelOptions contains the optional parameters for the SpecialWordsParametersClient.WithDel
//     method.
func (client *SpecialWordsParametersClient) WithDel(ctx context.Context, del string, options *SpecialWordsParametersClientWithDelOptions) (SpecialWordsParametersClientWithDelResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithDel"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withDelCreateRequest(ctx, del, options)
	if err != nil {
		return SpecialWordsParametersClientWithDelResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithDelResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithDelResponse{}, err
	}
	return SpecialWordsParametersClientWithDelResponse{}, nil
}

// withDelCreateRequest creates the WithDel request.
func (client *SpecialWordsParametersClient) withDelCreateRequest(ctx context.Context, del string, _ *SpecialWordsParametersClientWithDelOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/del"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("del", del)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithElif -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithElifOptions contains the optional parameters for the SpecialWordsParametersClient.WithElif
//     method.
func (client *SpecialWordsParametersClient) WithElif(ctx context.Context, elif string, options *SpecialWordsParametersClientWithElifOptions) (SpecialWordsParametersClientWithElifResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithElif"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withElifCreateRequest(ctx, elif, options)
	if err != nil {
		return SpecialWordsParametersClientWithElifResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithElifResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithElifResponse{}, err
	}
	return SpecialWordsParametersClientWithElifResponse{}, nil
}

// withElifCreateRequest creates the WithElif request.
func (client *SpecialWordsParametersClient) withElifCreateRequest(ctx context.Context, elif string, _ *SpecialWordsParametersClientWithElifOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/elif"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("elif", elif)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithElse -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithElseOptions contains the optional parameters for the SpecialWordsParametersClient.WithElse
//     method.
func (client *SpecialWordsParametersClient) WithElse(ctx context.Context, elseParam string, options *SpecialWordsParametersClientWithElseOptions) (SpecialWordsParametersClientWithElseResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithElse"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withElseCreateRequest(ctx, elseParam, options)
	if err != nil {
		return SpecialWordsParametersClientWithElseResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithElseResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithElseResponse{}, err
	}
	return SpecialWordsParametersClientWithElseResponse{}, nil
}

// withElseCreateRequest creates the WithElse request.
func (client *SpecialWordsParametersClient) withElseCreateRequest(ctx context.Context, elseParam string, _ *SpecialWordsParametersClientWithElseOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/else"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("else", elseParam)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithExcept -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithExceptOptions contains the optional parameters for the SpecialWordsParametersClient.WithExcept
//     method.
func (client *SpecialWordsParametersClient) WithExcept(ctx context.Context, except string, options *SpecialWordsParametersClientWithExceptOptions) (SpecialWordsParametersClientWithExceptResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithExcept"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withExceptCreateRequest(ctx, except, options)
	if err != nil {
		return SpecialWordsParametersClientWithExceptResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithExceptResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithExceptResponse{}, err
	}
	return SpecialWordsParametersClientWithExceptResponse{}, nil
}

// withExceptCreateRequest creates the WithExcept request.
func (client *SpecialWordsParametersClient) withExceptCreateRequest(ctx context.Context, except string, _ *SpecialWordsParametersClientWithExceptOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/except"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("except", except)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithExec -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithExecOptions contains the optional parameters for the SpecialWordsParametersClient.WithExec
//     method.
func (client *SpecialWordsParametersClient) WithExec(ctx context.Context, execParam string, options *SpecialWordsParametersClientWithExecOptions) (SpecialWordsParametersClientWithExecResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithExec"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withExecCreateRequest(ctx, execParam, options)
	if err != nil {
		return SpecialWordsParametersClientWithExecResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithExecResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithExecResponse{}, err
	}
	return SpecialWordsParametersClientWithExecResponse{}, nil
}

// withExecCreateRequest creates the WithExec request.
func (client *SpecialWordsParametersClient) withExecCreateRequest(ctx context.Context, execParam string, _ *SpecialWordsParametersClientWithExecOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/exec"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("exec", execParam)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithFinally -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithFinallyOptions contains the optional parameters for the SpecialWordsParametersClient.WithFinally
//     method.
func (client *SpecialWordsParametersClient) WithFinally(ctx context.Context, finally string, options *SpecialWordsParametersClientWithFinallyOptions) (SpecialWordsParametersClientWithFinallyResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithFinally"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withFinallyCreateRequest(ctx, finally, options)
	if err != nil {
		return SpecialWordsParametersClientWithFinallyResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithFinallyResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithFinallyResponse{}, err
	}
	return SpecialWordsParametersClientWithFinallyResponse{}, nil
}

// withFinallyCreateRequest creates the WithFinally request.
func (client *SpecialWordsParametersClient) withFinallyCreateRequest(ctx context.Context, finally string, _ *SpecialWordsParametersClientWithFinallyOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/finally"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("finally", finally)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithFor -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithForOptions contains the optional parameters for the SpecialWordsParametersClient.WithFor
//     method.
func (client *SpecialWordsParametersClient) WithFor(ctx context.Context, forParam string, options *SpecialWordsParametersClientWithForOptions) (SpecialWordsParametersClientWithForResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithFor"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withForCreateRequest(ctx, forParam, options)
	if err != nil {
		return SpecialWordsParametersClientWithForResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithForResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithForResponse{}, err
	}
	return SpecialWordsParametersClientWithForResponse{}, nil
}

// withForCreateRequest creates the WithFor request.
func (client *SpecialWordsParametersClient) withForCreateRequest(ctx context.Context, forParam string, _ *SpecialWordsParametersClientWithForOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/for"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("for", forParam)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithFrom -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithFromOptions contains the optional parameters for the SpecialWordsParametersClient.WithFrom
//     method.
func (client *SpecialWordsParametersClient) WithFrom(ctx context.Context, from string, options *SpecialWordsParametersClientWithFromOptions) (SpecialWordsParametersClientWithFromResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithFrom"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withFromCreateRequest(ctx, from, options)
	if err != nil {
		return SpecialWordsParametersClientWithFromResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithFromResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithFromResponse{}, err
	}
	return SpecialWordsParametersClientWithFromResponse{}, nil
}

// withFromCreateRequest creates the WithFrom request.
func (client *SpecialWordsParametersClient) withFromCreateRequest(ctx context.Context, from string, _ *SpecialWordsParametersClientWithFromOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/from"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("from", from)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithGlobal -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithGlobalOptions contains the optional parameters for the SpecialWordsParametersClient.WithGlobal
//     method.
func (client *SpecialWordsParametersClient) WithGlobal(ctx context.Context, global string, options *SpecialWordsParametersClientWithGlobalOptions) (SpecialWordsParametersClientWithGlobalResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithGlobal"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withGlobalCreateRequest(ctx, global, options)
	if err != nil {
		return SpecialWordsParametersClientWithGlobalResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithGlobalResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithGlobalResponse{}, err
	}
	return SpecialWordsParametersClientWithGlobalResponse{}, nil
}

// withGlobalCreateRequest creates the WithGlobal request.
func (client *SpecialWordsParametersClient) withGlobalCreateRequest(ctx context.Context, global string, _ *SpecialWordsParametersClientWithGlobalOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/global"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("global", global)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithIf -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithIfOptions contains the optional parameters for the SpecialWordsParametersClient.WithIf
//     method.
func (client *SpecialWordsParametersClient) WithIf(ctx context.Context, ifParam string, options *SpecialWordsParametersClientWithIfOptions) (SpecialWordsParametersClientWithIfResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithIf"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withIfCreateRequest(ctx, ifParam, options)
	if err != nil {
		return SpecialWordsParametersClientWithIfResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithIfResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithIfResponse{}, err
	}
	return SpecialWordsParametersClientWithIfResponse{}, nil
}

// withIfCreateRequest creates the WithIf request.
func (client *SpecialWordsParametersClient) withIfCreateRequest(ctx context.Context, ifParam string, _ *SpecialWordsParametersClientWithIfOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/if"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("if", ifParam)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithImport -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithImportOptions contains the optional parameters for the SpecialWordsParametersClient.WithImport
//     method.
func (client *SpecialWordsParametersClient) WithImport(ctx context.Context, importParam string, options *SpecialWordsParametersClientWithImportOptions) (SpecialWordsParametersClientWithImportResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithImport"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withImportCreateRequest(ctx, importParam, options)
	if err != nil {
		return SpecialWordsParametersClientWithImportResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithImportResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithImportResponse{}, err
	}
	return SpecialWordsParametersClientWithImportResponse{}, nil
}

// withImportCreateRequest creates the WithImport request.
func (client *SpecialWordsParametersClient) withImportCreateRequest(ctx context.Context, importParam string, _ *SpecialWordsParametersClientWithImportOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/import"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("import", importParam)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithIn -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithInOptions contains the optional parameters for the SpecialWordsParametersClient.WithIn
//     method.
func (client *SpecialWordsParametersClient) WithIn(ctx context.Context, in string, options *SpecialWordsParametersClientWithInOptions) (SpecialWordsParametersClientWithInResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithIn"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withInCreateRequest(ctx, in, options)
	if err != nil {
		return SpecialWordsParametersClientWithInResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithInResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithInResponse{}, err
	}
	return SpecialWordsParametersClientWithInResponse{}, nil
}

// withInCreateRequest creates the WithIn request.
func (client *SpecialWordsParametersClient) withInCreateRequest(ctx context.Context, in string, _ *SpecialWordsParametersClientWithInOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/in"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("in", in)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithIs -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithIsOptions contains the optional parameters for the SpecialWordsParametersClient.WithIs
//     method.
func (client *SpecialWordsParametersClient) WithIs(ctx context.Context, is string, options *SpecialWordsParametersClientWithIsOptions) (SpecialWordsParametersClientWithIsResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithIs"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withIsCreateRequest(ctx, is, options)
	if err != nil {
		return SpecialWordsParametersClientWithIsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithIsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithIsResponse{}, err
	}
	return SpecialWordsParametersClientWithIsResponse{}, nil
}

// withIsCreateRequest creates the WithIs request.
func (client *SpecialWordsParametersClient) withIsCreateRequest(ctx context.Context, is string, _ *SpecialWordsParametersClientWithIsOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/is"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("is", is)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithLambda -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithLambdaOptions contains the optional parameters for the SpecialWordsParametersClient.WithLambda
//     method.
func (client *SpecialWordsParametersClient) WithLambda(ctx context.Context, lambda string, options *SpecialWordsParametersClientWithLambdaOptions) (SpecialWordsParametersClientWithLambdaResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithLambda"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withLambdaCreateRequest(ctx, lambda, options)
	if err != nil {
		return SpecialWordsParametersClientWithLambdaResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithLambdaResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithLambdaResponse{}, err
	}
	return SpecialWordsParametersClientWithLambdaResponse{}, nil
}

// withLambdaCreateRequest creates the WithLambda request.
func (client *SpecialWordsParametersClient) withLambdaCreateRequest(ctx context.Context, lambda string, _ *SpecialWordsParametersClientWithLambdaOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/lambda"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("lambda", lambda)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithNot -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithNotOptions contains the optional parameters for the SpecialWordsParametersClient.WithNot
//     method.
func (client *SpecialWordsParametersClient) WithNot(ctx context.Context, not string, options *SpecialWordsParametersClientWithNotOptions) (SpecialWordsParametersClientWithNotResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithNot"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withNotCreateRequest(ctx, not, options)
	if err != nil {
		return SpecialWordsParametersClientWithNotResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithNotResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithNotResponse{}, err
	}
	return SpecialWordsParametersClientWithNotResponse{}, nil
}

// withNotCreateRequest creates the WithNot request.
func (client *SpecialWordsParametersClient) withNotCreateRequest(ctx context.Context, not string, _ *SpecialWordsParametersClientWithNotOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/not"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("not", not)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithOr -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithOrOptions contains the optional parameters for the SpecialWordsParametersClient.WithOr
//     method.
func (client *SpecialWordsParametersClient) WithOr(ctx context.Context, or string, options *SpecialWordsParametersClientWithOrOptions) (SpecialWordsParametersClientWithOrResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithOr"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withOrCreateRequest(ctx, or, options)
	if err != nil {
		return SpecialWordsParametersClientWithOrResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithOrResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithOrResponse{}, err
	}
	return SpecialWordsParametersClientWithOrResponse{}, nil
}

// withOrCreateRequest creates the WithOr request.
func (client *SpecialWordsParametersClient) withOrCreateRequest(ctx context.Context, or string, _ *SpecialWordsParametersClientWithOrOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/or"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("or", or)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithPass -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithPassOptions contains the optional parameters for the SpecialWordsParametersClient.WithPass
//     method.
func (client *SpecialWordsParametersClient) WithPass(ctx context.Context, pass string, options *SpecialWordsParametersClientWithPassOptions) (SpecialWordsParametersClientWithPassResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithPass"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withPassCreateRequest(ctx, pass, options)
	if err != nil {
		return SpecialWordsParametersClientWithPassResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithPassResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithPassResponse{}, err
	}
	return SpecialWordsParametersClientWithPassResponse{}, nil
}

// withPassCreateRequest creates the WithPass request.
func (client *SpecialWordsParametersClient) withPassCreateRequest(ctx context.Context, pass string, _ *SpecialWordsParametersClientWithPassOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/pass"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("pass", pass)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithRaise -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithRaiseOptions contains the optional parameters for the SpecialWordsParametersClient.WithRaise
//     method.
func (client *SpecialWordsParametersClient) WithRaise(ctx context.Context, raise string, options *SpecialWordsParametersClientWithRaiseOptions) (SpecialWordsParametersClientWithRaiseResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithRaise"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withRaiseCreateRequest(ctx, raise, options)
	if err != nil {
		return SpecialWordsParametersClientWithRaiseResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithRaiseResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithRaiseResponse{}, err
	}
	return SpecialWordsParametersClientWithRaiseResponse{}, nil
}

// withRaiseCreateRequest creates the WithRaise request.
func (client *SpecialWordsParametersClient) withRaiseCreateRequest(ctx context.Context, raise string, _ *SpecialWordsParametersClientWithRaiseOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/raise"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("raise", raise)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithReturn -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithReturnOptions contains the optional parameters for the SpecialWordsParametersClient.WithReturn
//     method.
func (client *SpecialWordsParametersClient) WithReturn(ctx context.Context, returnParam string, options *SpecialWordsParametersClientWithReturnOptions) (SpecialWordsParametersClientWithReturnResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithReturn"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withReturnCreateRequest(ctx, returnParam, options)
	if err != nil {
		return SpecialWordsParametersClientWithReturnResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithReturnResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithReturnResponse{}, err
	}
	return SpecialWordsParametersClientWithReturnResponse{}, nil
}

// withReturnCreateRequest creates the WithReturn request.
func (client *SpecialWordsParametersClient) withReturnCreateRequest(ctx context.Context, returnParam string, _ *SpecialWordsParametersClientWithReturnOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/return"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("return", returnParam)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithTry -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithTryOptions contains the optional parameters for the SpecialWordsParametersClient.WithTry
//     method.
func (client *SpecialWordsParametersClient) WithTry(ctx context.Context, try string, options *SpecialWordsParametersClientWithTryOptions) (SpecialWordsParametersClientWithTryResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithTry"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withTryCreateRequest(ctx, try, options)
	if err != nil {
		return SpecialWordsParametersClientWithTryResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithTryResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithTryResponse{}, err
	}
	return SpecialWordsParametersClientWithTryResponse{}, nil
}

// withTryCreateRequest creates the WithTry request.
func (client *SpecialWordsParametersClient) withTryCreateRequest(ctx context.Context, try string, _ *SpecialWordsParametersClientWithTryOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/try"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("try", try)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithWhile -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithWhileOptions contains the optional parameters for the SpecialWordsParametersClient.WithWhile
//     method.
func (client *SpecialWordsParametersClient) WithWhile(ctx context.Context, while string, options *SpecialWordsParametersClientWithWhileOptions) (SpecialWordsParametersClientWithWhileResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithWhile"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withWhileCreateRequest(ctx, while, options)
	if err != nil {
		return SpecialWordsParametersClientWithWhileResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithWhileResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithWhileResponse{}, err
	}
	return SpecialWordsParametersClientWithWhileResponse{}, nil
}

// withWhileCreateRequest creates the WithWhile request.
func (client *SpecialWordsParametersClient) withWhileCreateRequest(ctx context.Context, while string, _ *SpecialWordsParametersClientWithWhileOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/while"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("while", while)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithWith -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithWithOptions contains the optional parameters for the SpecialWordsParametersClient.WithWith
//     method.
func (client *SpecialWordsParametersClient) WithWith(ctx context.Context, with string, options *SpecialWordsParametersClientWithWithOptions) (SpecialWordsParametersClientWithWithResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithWith"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withWithCreateRequest(ctx, with, options)
	if err != nil {
		return SpecialWordsParametersClientWithWithResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithWithResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithWithResponse{}, err
	}
	return SpecialWordsParametersClientWithWithResponse{}, nil
}

// withWithCreateRequest creates the WithWith request.
func (client *SpecialWordsParametersClient) withWithCreateRequest(ctx context.Context, with string, _ *SpecialWordsParametersClientWithWithOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/with"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("with", with)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// WithYield -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - SpecialWordsParametersClientWithYieldOptions contains the optional parameters for the SpecialWordsParametersClient.WithYield
//     method.
func (client *SpecialWordsParametersClient) WithYield(ctx context.Context, yield string, options *SpecialWordsParametersClientWithYieldOptions) (SpecialWordsParametersClientWithYieldResponse, error) {
	var err error
	const operationName = "SpecialWordsParametersClient.WithYield"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.withYieldCreateRequest(ctx, yield, options)
	if err != nil {
		return SpecialWordsParametersClientWithYieldResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SpecialWordsParametersClientWithYieldResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SpecialWordsParametersClientWithYieldResponse{}, err
	}
	return SpecialWordsParametersClientWithYieldResponse{}, nil
}

// withYieldCreateRequest creates the WithYield request.
func (client *SpecialWordsParametersClient) withYieldCreateRequest(ctx context.Context, yield string, _ *SpecialWordsParametersClientWithYieldOptions) (*policy.Request, error) {
	urlPath := "/special-words/parameters/yield"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("yield", yield)
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}
