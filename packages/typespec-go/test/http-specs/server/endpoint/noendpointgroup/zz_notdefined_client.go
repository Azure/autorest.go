// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package noendpointgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// NotDefinedClient - Illustrates server doesn't define endpoint. Client should automatically add an endpoint to let user
// pass in.
// Don't use this type directly, use NewNotDefinedClientWithNoCredential() instead.
type NotDefinedClient struct {
	internal *azcore.Client
	endpoint string
}

// NotDefinedClientOptions contains the optional values for creating a [NotDefinedClient].
type NotDefinedClientOptions struct {
	azcore.ClientOptions
}

// NewNotDefinedClientWithNoCredential creates a new instance of NotDefinedClient with the specified values.
//   - endpoint - Service host
//   - NotDefinedClientOptions - NotDefinedClientOptions contains the optional values for creating a [NotDefinedClient]
func NewNotDefinedClientWithNoCredential(endpoint string, options *NotDefinedClientOptions) (*NotDefinedClient, error) {
	if options == nil {
		options = &NotDefinedClientOptions{}
	}
	cl, err := azcore.NewClient(moduleName, moduleVersion, runtime.PipelineOptions{}, &options.ClientOptions)
	if err != nil {
		return nil, err
	}
	client := &NotDefinedClient{
		endpoint: endpoint,
		internal: cl,
	}
	return client, nil
}

// - options - NotDefinedClientValidOptions contains the optional parameters for the NotDefinedClient.Valid method.
func (client *NotDefinedClient) Valid(ctx context.Context, options *NotDefinedClientValidOptions) (NotDefinedClientValidResponse, error) {
	var err error
	const operationName = "NotDefinedClient.Valid"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.validCreateRequest(ctx, options)
	if err != nil {
		return NotDefinedClientValidResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NotDefinedClientValidResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NotDefinedClientValidResponse{}, err
	}
	return NotDefinedClientValidResponse{Success: httpResp.StatusCode >= 200 && httpResp.StatusCode < 300}, nil
}

// validCreateRequest creates the Valid request.
func (client *NotDefinedClient) validCreateRequest(ctx context.Context, _ *NotDefinedClientValidOptions) (*policy.Request, error) {
	urlPath := "/server/endpoint/not-defined/valid"
	req, err := runtime.NewRequest(ctx, http.MethodHead, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}
