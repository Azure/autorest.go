// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package collectionfmtgroup

import (
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// CollectionFormatClient - Test for collectionFormat.
// Don't use this type directly, use NewCollectionFormatClientWithNoCredential() instead.
type CollectionFormatClient struct {
	internal *azcore.Client
	endpoint string
}

// CollectionFormatClientOptions contains the optional values for creating a [CollectionFormatClient].
type CollectionFormatClientOptions struct {
	azcore.ClientOptions
}

// NewCollectionFormatClientWithNoCredential creates a new instance of CollectionFormatClient with the specified values.
//   - endpoint - Service host
//   - CollectionFormatClientOptions - CollectionFormatClientOptions contains the optional values for creating a [CollectionFormatClient]
func NewCollectionFormatClientWithNoCredential(endpoint string, options *CollectionFormatClientOptions) (*CollectionFormatClient, error) {
	if options == nil {
		options = &CollectionFormatClientOptions{}
	}
	cl, err := azcore.NewClient(moduleName, moduleVersion, runtime.PipelineOptions{}, &options.ClientOptions)
	if err != nil {
		return nil, err
	}
	client := &CollectionFormatClient{
		endpoint: endpoint,
		internal: cl,
	}
	return client, nil
}

// NewCollectionFormatHeaderClient creates a new instance of [CollectionFormatHeaderClient].
func (client *CollectionFormatClient) NewCollectionFormatHeaderClient() *CollectionFormatHeaderClient {
	return &CollectionFormatHeaderClient{
		internal: client.internal,
		endpoint: client.endpoint,
	}
}

// NewCollectionFormatQueryClient creates a new instance of [CollectionFormatQueryClient].
func (client *CollectionFormatClient) NewCollectionFormatQueryClient() *CollectionFormatQueryClient {
	return &CollectionFormatQueryClient{
		internal: client.internal,
		endpoint: client.endpoint,
	}
}
