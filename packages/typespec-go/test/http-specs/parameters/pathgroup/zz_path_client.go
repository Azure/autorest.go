// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package pathgroup

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// PathClient - Test for path parameters cases.
// Don't use this type directly, use NewPathClientWithNoCredential() instead.
type PathClient struct {
	internal *azcore.Client
	endpoint string
}

// PathClientOptions contains the optional values for creating a [PathClient].
type PathClientOptions struct {
	azcore.ClientOptions
}

// NewPathClientWithNoCredential creates a new instance of PathClient with the specified values.
//   - endpoint - Service host
//   - options - PathClientOptions contains the optional values for creating a [PathClient]
func NewPathClientWithNoCredential(endpoint string, options *PathClientOptions) (*PathClient, error) {
	if options == nil {
		options = &PathClientOptions{}
	}
	cl, err := azcore.NewClient(moduleName, moduleVersion, runtime.PipelineOptions{}, &options.ClientOptions)
	if err != nil {
		return nil, err
	}
	client := &PathClient{
		endpoint: endpoint,
		internal: cl,
	}
	return client, nil
}

// Normal -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - PathClientNormalOptions contains the optional parameters for the PathClient.Normal method.
func (client *PathClient) Normal(ctx context.Context, name string, options *PathClientNormalOptions) (PathClientNormalResponse, error) {
	var err error
	const operationName = "PathClient.Normal"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.normalCreateRequest(ctx, name, options)
	if err != nil {
		return PathClientNormalResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PathClientNormalResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return PathClientNormalResponse{}, err
	}
	return PathClientNormalResponse{}, nil
}

// normalCreateRequest creates the Normal request.
func (client *PathClient) normalCreateRequest(ctx context.Context, name string, _ *PathClientNormalOptions) (*policy.Request, error) {
	urlPath := "/parameters/path/normal/{name}"
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// Optional -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - PathClientOptionalOptions contains the optional parameters for the PathClient.Optional method.
func (client *PathClient) Optional(ctx context.Context, options *PathClientOptionalOptions) (PathClientOptionalResponse, error) {
	var err error
	const operationName = "PathClient.Optional"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.optionalCreateRequest(ctx, options)
	if err != nil {
		return PathClientOptionalResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PathClientOptionalResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return PathClientOptionalResponse{}, err
	}
	return PathClientOptionalResponse{}, nil
}

// optionalCreateRequest creates the Optional request.
func (client *PathClient) optionalCreateRequest(ctx context.Context, options *PathClientOptionalOptions) (*policy.Request, error) {
	urlPath := "/parameters/path/optional{name}"
	optionalName := ""
	if options != nil && options.Name != nil {
		optionalName = *options.Name
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", "/"+url.PathEscape(optionalName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}
