// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package bodyoptionalgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// BodyOptionalityOptionalExplicitClient contains the methods for the BodyOptionalityOptionalExplicit group.
// Don't use this type directly, use [BodyOptionalityClient.NewBodyOptionalityOptionalExplicitClient] instead.
type BodyOptionalityOptionalExplicitClient struct {
	internal *azcore.Client
}

// Omit -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - BodyOptionalityOptionalExplicitClientOmitOptions contains the optional parameters for the BodyOptionalityOptionalExplicitClient.Omit
//     method.
func (client *BodyOptionalityOptionalExplicitClient) Omit(ctx context.Context, options *BodyOptionalityOptionalExplicitClientOmitOptions) (BodyOptionalityOptionalExplicitClientOmitResponse, error) {
	var err error
	const operationName = "BodyOptionalityOptionalExplicitClient.Omit"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.omitCreateRequest(ctx, options)
	if err != nil {
		return BodyOptionalityOptionalExplicitClientOmitResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BodyOptionalityOptionalExplicitClientOmitResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return BodyOptionalityOptionalExplicitClientOmitResponse{}, err
	}
	return BodyOptionalityOptionalExplicitClientOmitResponse{}, nil
}

// omitCreateRequest creates the Omit request.
func (client *BodyOptionalityOptionalExplicitClient) omitCreateRequest(ctx context.Context, options *BodyOptionalityOptionalExplicitClientOmitOptions) (*policy.Request, error) {
	urlPath := "/parameters/body-optionality/optional-explicit/omit"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	if options != nil && options.Body != nil {
		req.Raw().Header["Content-Type"] = []string{"application/json"}
		if err := runtime.MarshalAsJSON(req, *options.Body); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// Set -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - BodyOptionalityOptionalExplicitClientSetOptions contains the optional parameters for the BodyOptionalityOptionalExplicitClient.Set
//     method.
func (client *BodyOptionalityOptionalExplicitClient) Set(ctx context.Context, options *BodyOptionalityOptionalExplicitClientSetOptions) (BodyOptionalityOptionalExplicitClientSetResponse, error) {
	var err error
	const operationName = "BodyOptionalityOptionalExplicitClient.Set"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.setCreateRequest(ctx, options)
	if err != nil {
		return BodyOptionalityOptionalExplicitClientSetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BodyOptionalityOptionalExplicitClientSetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return BodyOptionalityOptionalExplicitClientSetResponse{}, err
	}
	return BodyOptionalityOptionalExplicitClientSetResponse{}, nil
}

// setCreateRequest creates the Set request.
func (client *BodyOptionalityOptionalExplicitClient) setCreateRequest(ctx context.Context, options *BodyOptionalityOptionalExplicitClientSetOptions) (*policy.Request, error) {
	urlPath := "/parameters/body-optionality/optional-explicit/set"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	if options != nil && options.Body != nil {
		req.Raw().Header["Content-Type"] = []string{"application/json"}
		if err := runtime.MarshalAsJSON(req, *options.Body); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}
