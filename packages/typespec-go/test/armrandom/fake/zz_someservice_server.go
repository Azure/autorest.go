// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"armrandom"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
)

// SomeServiceServer is a fake server for instances of the armrandom.SomeServiceClient type.
type SomeServiceServer struct {
	// NewListThingsPager is the fake for method SomeServiceClient.NewListThingsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListThingsPager func(options *armrandom.SomeServiceClientListThingsOptions) (resp azfake.PagerResponder[armrandom.SomeServiceClientListThingsResponse])
}

// NewSomeServiceServerTransport creates a new instance of SomeServiceServerTransport with the provided implementation.
// The returned SomeServiceServerTransport instance is connected to an instance of armrandom.SomeServiceClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSomeServiceServerTransport(srv *SomeServiceServer) *SomeServiceServerTransport {
	return &SomeServiceServerTransport{
		srv:                srv,
		newListThingsPager: newTracker[azfake.PagerResponder[armrandom.SomeServiceClientListThingsResponse]](),
	}
}

// SomeServiceServerTransport connects instances of armrandom.SomeServiceClient to instances of SomeServiceServer.
// Don't use this type directly, use NewSomeServiceServerTransport instead.
type SomeServiceServerTransport struct {
	srv                *SomeServiceServer
	newListThingsPager *tracker[azfake.PagerResponder[armrandom.SomeServiceClientListThingsResponse]]
}

// Do implements the policy.Transporter interface for SomeServiceServerTransport.
func (s *SomeServiceServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToMethodFake(req, method)
}

func (s *SomeServiceServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var res result
		switch method {
		case "SomeServiceClient.NewListThingsPager":
			res.resp, res.err = s.dispatchNewListThingsPager(req)
		default:
			res.err = fmt.Errorf("unhandled API %s", method)
		}

		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (s *SomeServiceServerTransport) dispatchNewListThingsPager(req *http.Request) (*http.Response, error) {
	if s.srv.NewListThingsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListThingsPager not implemented")}
	}
	newListThingsPager := s.newListThingsPager.get(req)
	if newListThingsPager == nil {
		resp := s.srv.NewListThingsPager(nil)
		newListThingsPager = &resp
		s.newListThingsPager.add(req, newListThingsPager)
		server.PagerResponderInjectNextLinks(newListThingsPager, req, func(page *armrandom.SomeServiceClientListThingsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListThingsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		s.newListThingsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListThingsPager) {
		s.newListThingsPager.remove(req)
	}
	return resp, nil
}
