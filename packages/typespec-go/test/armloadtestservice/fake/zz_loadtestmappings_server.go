// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"armloadtestservice"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
	"net/url"
	"regexp"
)

// LoadTestMappingsServer is a fake server for instances of the armloadtestservice.LoadTestMappingsClient type.
type LoadTestMappingsServer struct {
	// CreateOrUpdate is the fake for method LoadTestMappingsClient.CreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	CreateOrUpdate func(ctx context.Context, resourceURI string, loadTestMappingName string, resource armloadtestservice.LoadTestMappingResource, options *armloadtestservice.LoadTestMappingsClientCreateOrUpdateOptions) (resp azfake.Responder[armloadtestservice.LoadTestMappingsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// Delete is the fake for method LoadTestMappingsClient.Delete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Delete func(ctx context.Context, resourceURI string, loadTestMappingName string, options *armloadtestservice.LoadTestMappingsClientDeleteOptions) (resp azfake.Responder[armloadtestservice.LoadTestMappingsClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method LoadTestMappingsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceURI string, loadTestMappingName string, options *armloadtestservice.LoadTestMappingsClientGetOptions) (resp azfake.Responder[armloadtestservice.LoadTestMappingsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method LoadTestMappingsClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(resourceURI string, options *armloadtestservice.LoadTestMappingsClientListOptions) (resp azfake.PagerResponder[armloadtestservice.LoadTestMappingsClientListResponse])

	// Update is the fake for method LoadTestMappingsClient.Update
	// HTTP status codes to indicate success: http.StatusOK
	Update func(ctx context.Context, resourceURI string, loadTestMappingName string, properties armloadtestservice.LoadTestMappingResourceUpdate, options *armloadtestservice.LoadTestMappingsClientUpdateOptions) (resp azfake.Responder[armloadtestservice.LoadTestMappingsClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewLoadTestMappingsServerTransport creates a new instance of LoadTestMappingsServerTransport with the provided implementation.
// The returned LoadTestMappingsServerTransport instance is connected to an instance of armloadtestservice.LoadTestMappingsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewLoadTestMappingsServerTransport(srv *LoadTestMappingsServer) *LoadTestMappingsServerTransport {
	return &LoadTestMappingsServerTransport{
		srv:          srv,
		newListPager: newTracker[azfake.PagerResponder[armloadtestservice.LoadTestMappingsClientListResponse]](),
	}
}

// LoadTestMappingsServerTransport connects instances of armloadtestservice.LoadTestMappingsClient to instances of LoadTestMappingsServer.
// Don't use this type directly, use NewLoadTestMappingsServerTransport instead.
type LoadTestMappingsServerTransport struct {
	srv          *LoadTestMappingsServer
	newListPager *tracker[azfake.PagerResponder[armloadtestservice.LoadTestMappingsClientListResponse]]
}

// Do implements the policy.Transporter interface for LoadTestMappingsServerTransport.
func (l *LoadTestMappingsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return l.dispatchToMethodFake(req, method)
}

func (l *LoadTestMappingsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var res result
		switch method {
		case "LoadTestMappingsClient.CreateOrUpdate":
			res.resp, res.err = l.dispatchCreateOrUpdate(req)
		case "LoadTestMappingsClient.Delete":
			res.resp, res.err = l.dispatchDelete(req)
		case "LoadTestMappingsClient.Get":
			res.resp, res.err = l.dispatchGet(req)
		case "LoadTestMappingsClient.NewListPager":
			res.resp, res.err = l.dispatchNewListPager(req)
		case "LoadTestMappingsClient.Update":
			res.resp, res.err = l.dispatchUpdate(req)
		default:
			res.err = fmt.Errorf("unhandled API %s", method)
		}

		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (l *LoadTestMappingsServerTransport) dispatchCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if l.srv.CreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateOrUpdate not implemented")}
	}
	const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.LoadTestService/loadTestMappings/(?P<loadTestMappingName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armloadtestservice.LoadTestMappingResource](req)
	if err != nil {
		return nil, err
	}
	resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
	if err != nil {
		return nil, err
	}
	loadTestMappingNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("loadTestMappingName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := l.srv.CreateOrUpdate(req.Context(), resourceURIParam, loadTestMappingNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).LoadTestMappingResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (l *LoadTestMappingsServerTransport) dispatchDelete(req *http.Request) (*http.Response, error) {
	if l.srv.Delete == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete not implemented")}
	}
	const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.LoadTestService/loadTestMappings/(?P<loadTestMappingName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
	if err != nil {
		return nil, err
	}
	loadTestMappingNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("loadTestMappingName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := l.srv.Delete(req.Context(), resourceURIParam, loadTestMappingNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (l *LoadTestMappingsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if l.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.LoadTestService/loadTestMappings/(?P<loadTestMappingName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
	if err != nil {
		return nil, err
	}
	loadTestMappingNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("loadTestMappingName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := l.srv.Get(req.Context(), resourceURIParam, loadTestMappingNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).LoadTestMappingResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (l *LoadTestMappingsServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if l.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := l.newListPager.get(req)
	if newListPager == nil {
		const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.LoadTestService/loadTestMappings`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
		if err != nil {
			return nil, err
		}
		resp := l.srv.NewListPager(resourceURIParam, nil)
		newListPager = &resp
		l.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *armloadtestservice.LoadTestMappingsClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		l.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		l.newListPager.remove(req)
	}
	return resp, nil
}

func (l *LoadTestMappingsServerTransport) dispatchUpdate(req *http.Request) (*http.Response, error) {
	if l.srv.Update == nil {
		return nil, &nonRetriableError{errors.New("fake for method Update not implemented")}
	}
	const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.LoadTestService/loadTestMappings/(?P<loadTestMappingName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armloadtestservice.LoadTestMappingResourceUpdate](req)
	if err != nil {
		return nil, err
	}
	resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
	if err != nil {
		return nil, err
	}
	loadTestMappingNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("loadTestMappingName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := l.srv.Update(req.Context(), resourceURIParam, loadTestMappingNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).LoadTestMappingResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
