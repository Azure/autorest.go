// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armloadtestservice_test

import (
	"armloadtestservice"
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"log"
)

// Generated from example definition: /tsp/LoadTestService.Management/examples/2022-12-01/LoadTests_CreateOrUpdate.json
func ExampleLoadTestsClient_BeginCreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armloadtestservice.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewLoadTestsClient().BeginCreateOrUpdate(ctx, "dummyrg", "myLoadTest", armloadtestservice.LoadTestResource{
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"Team": to.Ptr("Dev Exp"),
		},
		Identity: &armloadtestservice.ManagedServiceIdentity{
			Type: to.Ptr(armloadtestservice.ManagedServiceIdentityTypeSystemAndUserAssigned),
			UserAssignedIdentities: map[string]*armloadtestservice.UserAssignedIdentity{
				"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/dummyrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": &armloadtestservice.UserAssignedIdentity{},
			},
		},
		Properties: &armloadtestservice.LoadTestProperties{
			Description: to.Ptr("This is new load test resource"),
			Encryption: &armloadtestservice.EncryptionProperties{
				Identity: &armloadtestservice.EncryptionPropertiesIdentity{
					Type:       to.Ptr(armloadtestservice.TypeUserAssigned),
					ResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/dummyrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1"),
				},
				KeyURL: to.Ptr("https://dummy.vault.azure.net/keys/dummykey1"),
			},
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armloadtestservice.LoadTestsClientCreateOrUpdateResponse{
	// 	LoadTestResource: &armloadtestservice.LoadTestResource{
	// 		Location: to.Ptr("westus"),
	// 		Identity: &armloadtestservice.ManagedServiceIdentity{
	// 			Type: to.Ptr(armloadtestservice.ManagedServiceIdentityTypeSystemAndUserAssigned),
	// 			PrincipalID: to.Ptr("12345678-1234-1234-1234-123456789012"),
	// 			TenantID: to.Ptr("12345678-1234-1234-4321-123456789012"),
	// 			UserAssignedIdentities: map[string]*armloadtestservice.UserAssignedIdentity{
	// 				"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/dummyrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": &armloadtestservice.UserAssignedIdentity{
	// 					PrincipalID: to.Ptr("12345678-1234-4321-1234-123456789012"),
	// 					ClientID: to.Ptr("12345678-4321-1234-1234-123456789012"),
	// 				},
	// 			},
	// 		},
	// 		Properties: &armloadtestservice.LoadTestProperties{
	// 			Description: to.Ptr("This is new load test resource"),
	// 			DataPlaneURI: to.Ptr("https://myLoadTest.00000000-0000-0000-0000-000000000000.cnt-dp.domain.com"),
	// 			ProvisioningState: to.Ptr(armloadtestservice.ResourceStateSucceeded),
	// 			Encryption: &armloadtestservice.EncryptionProperties{
	// 				Identity: &armloadtestservice.EncryptionPropertiesIdentity{
	// 					Type: to.Ptr(armloadtestservice.TypeUserAssigned),
	// 					ResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/dummyrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1"),
	// 				},
	// 				KeyURL: to.Ptr("https://dummy.vault.azure.net/keys/dummykey1"),
	// 			},
	// 		},
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/dummyrg/providers/Microsoft.LoadTestService/loadTests/myLoadTest"),
	// 		Name: to.Ptr("myLoadTest"),
	// 		Type: to.Ptr("Microsoft.LoadTestService/loadTests"),
	// 		Tags: map[string]*string{
	// 			"Team": to.Ptr("Dev Exp"),
	// 		},
	// 		SystemData: &armloadtestservice.SystemData{
	// 			CreatedBy: to.Ptr("userId1001"),
	// 			CreatedByType: to.Ptr(armloadtestservice.CreatedByTypeUser),
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-28T12:32:33Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("userId1001"),
	// 			LastModifiedByType: to.Ptr(armloadtestservice.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-28T12:32:33Z"); return t}()),
	// 		},
	// 	},
	// }
}

// Generated from example definition: /tsp/LoadTestService.Management/examples/2022-12-01/LoadTests_Delete.json
func ExampleLoadTestsClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armloadtestservice.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewLoadTestsClient().BeginDelete(ctx, "dummyrg", "myLoadTest", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: /tsp/LoadTestService.Management/examples/2022-12-01/LoadTests_Get.json
func ExampleLoadTestsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armloadtestservice.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewLoadTestsClient().Get(ctx, "dummyrg", "myLoadTest", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armloadtestservice.LoadTestsClientGetResponse{
	// 	LoadTestResource: &armloadtestservice.LoadTestResource{
	// 		Location: to.Ptr("westus"),
	// 		Properties: &armloadtestservice.LoadTestProperties{
	// 			Description: to.Ptr("This is new load test resource"),
	// 			DataPlaneURI: to.Ptr("https://myLoadTest.00000000-0000-0000-0000-000000000000.cnt-dp.domain.com"),
	// 			ProvisioningState: to.Ptr(armloadtestservice.ResourceStateSucceeded),
	// 		},
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/dummyrg/providers/Microsoft.LoadTestService/loadTests/myLoadTest"),
	// 		Name: to.Ptr("myLoadTest"),
	// 		Type: to.Ptr("Microsoft.LoadTestService/loadTests"),
	// 		Tags: map[string]*string{
	// 			"Team": to.Ptr("Dev Exp"),
	// 		},
	// 		SystemData: &armloadtestservice.SystemData{
	// 			CreatedBy: to.Ptr("userId1001"),
	// 			CreatedByType: to.Ptr(armloadtestservice.CreatedByTypeUser),
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-28T12:32:33Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("userId1001"),
	// 			LastModifiedByType: to.Ptr(armloadtestservice.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-28T12:32:33Z"); return t}()),
	// 		},
	// 	},
	// }
}

// Generated from example definition: /tsp/LoadTestService.Management/examples/2022-12-01/LoadTests_ListByResourceGroup.json
func ExampleLoadTestsClient_NewListByResourceGroupPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armloadtestservice.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewLoadTestsClient().NewListByResourceGroupPager("dummyrg", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armloadtestservice.LoadTestsClientListByResourceGroupResponse{
		// 	LoadTestResourceListResult: armloadtestservice.LoadTestResourceListResult{
		// 		Value: []*armloadtestservice.LoadTestResource{
		// 			{
		// 				Location: to.Ptr("westus"),
		// 				Properties: &armloadtestservice.LoadTestProperties{
		// 					Description: to.Ptr("This is new load test resource"),
		// 					DataPlaneURI: to.Ptr("https://myLoadTest.00000000-0000-0000-0000-000000000000.cnt-dp.domain.com"),
		// 					ProvisioningState: to.Ptr(armloadtestservice.ResourceStateSucceeded),
		// 				},
		// 				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/dummyrg/providers/Microsoft.LoadTestService/loadTests/myLoadTest"),
		// 				Name: to.Ptr("myLoadTest"),
		// 				Type: to.Ptr("Microsoft.LoadTestService/loadTests"),
		// 				Tags: map[string]*string{
		// 					"Team": to.Ptr("Dev Exp"),
		// 				},
		// 				SystemData: &armloadtestservice.SystemData{
		// 					CreatedBy: to.Ptr("userId1001"),
		// 					CreatedByType: to.Ptr(armloadtestservice.CreatedByTypeUser),
		// 					CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-28T12:32:33Z"); return t}()),
		// 					LastModifiedBy: to.Ptr("userId1001"),
		// 					LastModifiedByType: to.Ptr(armloadtestservice.CreatedByTypeUser),
		// 					LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-28T12:32:33Z"); return t}()),
		// 				},
		// 			},
		// 		},
		// 	},
		// }
	}
}

// Generated from example definition: /tsp/LoadTestService.Management/examples/2022-12-01/LoadTests_ListBySubscription.json
func ExampleLoadTestsClient_NewListBySubscriptionPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armloadtestservice.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewLoadTestsClient().NewListBySubscriptionPager(nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armloadtestservice.LoadTestsClientListBySubscriptionResponse{
		// 	LoadTestResourceListResult: armloadtestservice.LoadTestResourceListResult{
		// 		Value: []*armloadtestservice.LoadTestResource{
		// 			{
		// 				Location: to.Ptr("westus"),
		// 				Properties: &armloadtestservice.LoadTestProperties{
		// 					Description: to.Ptr("This is new load test resource"),
		// 					DataPlaneURI: to.Ptr("https://myLoadTest.00000000-0000-0000-0000-000000000000.cnt-dp.domain.com"),
		// 					ProvisioningState: to.Ptr(armloadtestservice.ResourceStateSucceeded),
		// 				},
		// 				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/dummyrg/providers/Microsoft.LoadTestService/loadTests/myLoadTest"),
		// 				Name: to.Ptr("myLoadTest"),
		// 				Type: to.Ptr("Microsoft.LoadTestService/loadTests"),
		// 				Tags: map[string]*string{
		// 					"Team": to.Ptr("Dev Exp"),
		// 				},
		// 				SystemData: &armloadtestservice.SystemData{
		// 					CreatedBy: to.Ptr("userId1001"),
		// 					CreatedByType: to.Ptr(armloadtestservice.CreatedByTypeUser),
		// 					CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-28T12:32:33Z"); return t}()),
		// 					LastModifiedBy: to.Ptr("userId1001"),
		// 					LastModifiedByType: to.Ptr(armloadtestservice.CreatedByTypeUser),
		// 					LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-28T12:32:33Z"); return t}()),
		// 				},
		// 			},
		// 		},
		// 	},
		// }
	}
}

// Generated from example definition: /tsp/LoadTestService.Management/examples/2022-12-01/LoadTests_ListOutboundNetworkDependenciesEndpoints.json
func ExampleLoadTestsClient_NewOutboundNetworkDependenciesEndpointsPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armloadtestservice.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewLoadTestsClient().NewOutboundNetworkDependenciesEndpointsPager("default-azureloadtest-japaneast", "sampleloadtest", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armloadtestservice.LoadTestsClientOutboundNetworkDependenciesEndpointsResponse{
		// 	OutboundEnvironmentEndpointCollection: armloadtestservice.OutboundEnvironmentEndpointCollection{
		// 		Value: []*armloadtestservice.OutboundEnvironmentEndpoint{
		// 			{
		// 				Category: to.Ptr("Azure Batch"),
		// 				Endpoints: []*armloadtestservice.EndpointDependency{
		// 					{
		// 						DomainName: to.Ptr("sampleacct.japaneast.batch.azure.com"),
		// 						Description: to.Ptr("Applicable to job manager tasks, tasks that use job scoped authentication, or any task that makes calls to Batch."),
		// 						EndpointDetails: []*armloadtestservice.EndpointDetail{
		// 							{
		// 								Port: to.Ptr[int32](443),
		// 							},
		// 						},
		// 					},
		// 					{
		// 						DomainName: to.Ptr("japaneast.service.batch.azure.com"),
		// 						Description: to.Ptr("Applicable to all Azure Batch pools."),
		// 						EndpointDetails: []*armloadtestservice.EndpointDetail{
		// 							{
		// 								Port: to.Ptr[int32](443),
		// 							},
		// 						},
		// 					},
		// 				},
		// 			},
		// 			{
		// 				Category: to.Ptr("Azure Storage"),
		// 				Endpoints: []*armloadtestservice.EndpointDependency{
		// 					{
		// 						DomainName: to.Ptr("autostorageaccountname.blob.core.windows.net"),
		// 						Description: to.Ptr("AutoStorage endpoint for this Batch account. Applicable to all Azure Batch pools under this account."),
		// 						EndpointDetails: []*armloadtestservice.EndpointDetail{
		// 							{
		// 								Port: to.Ptr[int32](443),
		// 							},
		// 						},
		// 					},
		// 					{
		// 						DomainName: to.Ptr("*.blob.core.windows.net"),
		// 						Description: to.Ptr("Applicable to all Azure Batch pools."),
		// 						EndpointDetails: []*armloadtestservice.EndpointDetail{
		// 							{
		// 								Port: to.Ptr[int32](443),
		// 							},
		// 						},
		// 					},
		// 					{
		// 						DomainName: to.Ptr("*.table.core.windows.net"),
		// 						Description: to.Ptr("Applicable to all Azure Batch pools."),
		// 						EndpointDetails: []*armloadtestservice.EndpointDetail{
		// 							{
		// 								Port: to.Ptr[int32](443),
		// 							},
		// 						},
		// 					},
		// 					{
		// 						DomainName: to.Ptr("*.queue.core.windows.net"),
		// 						Description: to.Ptr("Applicable to all Azure Batch pools."),
		// 						EndpointDetails: []*armloadtestservice.EndpointDetail{
		// 							{
		// 								Port: to.Ptr[int32](443),
		// 							},
		// 						},
		// 					},
		// 				},
		// 			},
		// 			{
		// 				Category: to.Ptr("Microsoft Package Repository"),
		// 				Endpoints: []*armloadtestservice.EndpointDependency{
		// 					{
		// 						DomainName: to.Ptr("packages.microsoft.com"),
		// 						Description: to.Ptr("Only applicable to pools containing a Mount Configuration. Learn about Mount Configurations in Batch at https://docs.microsoft.com/azure/batch/virtual-file-mount."),
		// 						EndpointDetails: []*armloadtestservice.EndpointDetail{
		// 							{
		// 								Port: to.Ptr[int32](443),
		// 							},
		// 						},
		// 					},
		// 				},
		// 			},
		// 			{
		// 				Category: to.Ptr("Azure Key Vault"),
		// 				Endpoints: []*armloadtestservice.EndpointDependency{
		// 					{
		// 						DomainName: to.Ptr("*.vault.azure.net"),
		// 						Description: to.Ptr("Only applicable to pools containing a Disk Encryption Configuration and whose VM size does not support encryption at host. Learn more about disk encryption in Azure Batch at https://docs.microsoft.com/azure/batch/disk-encryption. Learn more about encryption at host and supported VM sizes at https://docs.microsoft.com/azure/virtual-machines/disks-enable-host-based-encryption-portal."),
		// 						EndpointDetails: []*armloadtestservice.EndpointDetail{
		// 							{
		// 								Port: to.Ptr[int32](443),
		// 							},
		// 						},
		// 					},
		// 				},
		// 			},
		// 		},
		// 	},
		// }
	}
}

// Generated from example definition: /tsp/LoadTestService.Management/examples/2022-12-01/LoadTests_Update.json
func ExampleLoadTestsClient_BeginUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armloadtestservice.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewLoadTestsClient().BeginUpdate(ctx, "dummyrg", "myLoadTest", armloadtestservice.LoadTestResource{
		Tags: map[string]*string{
			"Team":     to.Ptr("Dev Exp"),
			"Division": to.Ptr("LT"),
		},
		Identity: &armloadtestservice.ManagedServiceIdentity{
			Type: to.Ptr(armloadtestservice.ManagedServiceIdentityTypeSystemAndUserAssigned),
			UserAssignedIdentities: map[string]*armloadtestservice.UserAssignedIdentity{
				"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/dummyrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": &armloadtestservice.UserAssignedIdentity{},
			},
		},
		Properties: &armloadtestservice.LoadTestProperties{
			Description: to.Ptr("This is new load test resource"),
			Encryption: &armloadtestservice.EncryptionProperties{
				Identity: &armloadtestservice.EncryptionPropertiesIdentity{
					Type:       to.Ptr(armloadtestservice.TypeSystemAssigned),
					ResourceID: nil,
				},
				KeyURL: to.Ptr("https://dummy.vault.azure.net/keys/dummykey1"),
			},
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armloadtestservice.LoadTestsClientUpdateResponse{
	// 	LoadTestResource: &armloadtestservice.LoadTestResource{
	// 		Location: to.Ptr("westus"),
	// 		Identity: &armloadtestservice.ManagedServiceIdentity{
	// 			Type: to.Ptr(armloadtestservice.ManagedServiceIdentityTypeSystemAndUserAssigned),
	// 			PrincipalID: to.Ptr("12345678-1234-1234-1234-123456789012"),
	// 			TenantID: to.Ptr("12345678-1234-1234-4321-123456789012"),
	// 			UserAssignedIdentities: map[string]*armloadtestservice.UserAssignedIdentity{
	// 				"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/dummyrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": &armloadtestservice.UserAssignedIdentity{
	// 					PrincipalID: to.Ptr("12345678-1234-4321-1234-123456789012"),
	// 					ClientID: to.Ptr("12345678-4321-1234-1234-123456789012"),
	// 				},
	// 			},
	// 		},
	// 		Properties: &armloadtestservice.LoadTestProperties{
	// 			Description: to.Ptr("This is new load test resource"),
	// 			DataPlaneURI: to.Ptr("https://myLoadTest.00000000-0000-0000-0000-000000000000.cnt-dp.domain.com"),
	// 			ProvisioningState: to.Ptr(armloadtestservice.ResourceStateSucceeded),
	// 			Encryption: &armloadtestservice.EncryptionProperties{
	// 				Identity: &armloadtestservice.EncryptionPropertiesIdentity{
	// 					Type: to.Ptr(armloadtestservice.TypeSystemAssigned),
	// 					ResourceID: nil,
	// 				},
	// 				KeyURL: to.Ptr("https://dummy.vault.azure.net/keys/dummykey1"),
	// 			},
	// 		},
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/dummyrg/providers/Microsoft.LoadTestService/loadTests/myLoadTest"),
	// 		Name: to.Ptr("myLoadTest"),
	// 		Type: to.Ptr("Microsoft.LoadTestService/loadTests"),
	// 		Tags: map[string]*string{
	// 			"Team": to.Ptr("Dev Exp"),
	// 			"Division": to.Ptr("LT"),
	// 		},
	// 		SystemData: &armloadtestservice.SystemData{
	// 			CreatedBy: to.Ptr("userId1001"),
	// 			CreatedByType: to.Ptr(armloadtestservice.CreatedByTypeUser),
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-28T12:32:33Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("userId1001"),
	// 			LastModifiedByType: to.Ptr(armloadtestservice.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-28T12:32:33Z"); return t}()),
	// 		},
	// 	},
	// }
}
