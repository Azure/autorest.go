// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armloadtestservice

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// LoadTestProfileMappingsClient contains the methods for the LoadTestProfileMappings group.
// Don't use this type directly, use NewLoadTestProfileMappingsClient() instead.
type LoadTestProfileMappingsClient struct {
	internal *arm.Client
}

// NewLoadTestProfileMappingsClient creates a new instance of LoadTestProfileMappingsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewLoadTestProfileMappingsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*LoadTestProfileMappingsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &LoadTestProfileMappingsClient{
		internal: cl,
	}
	return client, nil
}

// CreateOrUpdate - Create a LoadTestProfileMappingResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource.
//   - loadTestProfileMappingName - Load Test Profile Mapping name
//   - resource - Resource create parameters.
//   - options - LoadTestProfileMappingsClientCreateOrUpdateOptions contains the optional parameters for the LoadTestProfileMappingsClient.CreateOrUpdate
//     method.
func (client *LoadTestProfileMappingsClient) CreateOrUpdate(ctx context.Context, resourceURI string, loadTestProfileMappingName string, resource LoadTestProfileMappingResource, options *LoadTestProfileMappingsClientCreateOrUpdateOptions) (LoadTestProfileMappingsClientCreateOrUpdateResponse, error) {
	var err error
	const operationName = "LoadTestProfileMappingsClient.CreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceURI, loadTestProfileMappingName, resource, options)
	if err != nil {
		return LoadTestProfileMappingsClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return LoadTestProfileMappingsClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return LoadTestProfileMappingsClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *LoadTestProfileMappingsClient) createOrUpdateCreateRequest(ctx context.Context, resourceURI string, loadTestProfileMappingName string, resource LoadTestProfileMappingResource, _ *LoadTestProfileMappingsClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.LoadTestService/loadTestProfileMappings/{loadTestProfileMappingName}"
	if resourceURI == "" {
		return nil, errors.New("parameter resourceURI cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", url.PathEscape(resourceURI))
	if loadTestProfileMappingName == "" {
		return nil, errors.New("parameter loadTestProfileMappingName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{loadTestProfileMappingName}", url.PathEscape(loadTestProfileMappingName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *LoadTestProfileMappingsClient) createOrUpdateHandleResponse(resp *http.Response) (LoadTestProfileMappingsClientCreateOrUpdateResponse, error) {
	result := LoadTestProfileMappingsClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.LoadTestProfileMappingResource); err != nil {
		return LoadTestProfileMappingsClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Delete a LoadTestProfileMappingResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource.
//   - loadTestProfileMappingName - Load Test Profile Mapping name
//   - options - LoadTestProfileMappingsClientDeleteOptions contains the optional parameters for the LoadTestProfileMappingsClient.Delete
//     method.
func (client *LoadTestProfileMappingsClient) Delete(ctx context.Context, resourceURI string, loadTestProfileMappingName string, options *LoadTestProfileMappingsClientDeleteOptions) (LoadTestProfileMappingsClientDeleteResponse, error) {
	var err error
	const operationName = "LoadTestProfileMappingsClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceURI, loadTestProfileMappingName, options)
	if err != nil {
		return LoadTestProfileMappingsClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return LoadTestProfileMappingsClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return LoadTestProfileMappingsClientDeleteResponse{}, err
	}
	return LoadTestProfileMappingsClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *LoadTestProfileMappingsClient) deleteCreateRequest(ctx context.Context, resourceURI string, loadTestProfileMappingName string, _ *LoadTestProfileMappingsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.LoadTestService/loadTestProfileMappings/{loadTestProfileMappingName}"
	if resourceURI == "" {
		return nil, errors.New("parameter resourceURI cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", url.PathEscape(resourceURI))
	if loadTestProfileMappingName == "" {
		return nil, errors.New("parameter loadTestProfileMappingName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{loadTestProfileMappingName}", url.PathEscape(loadTestProfileMappingName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a LoadTestProfileMappingResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource.
//   - loadTestProfileMappingName - Load Test Profile Mapping name
//   - options - LoadTestProfileMappingsClientGetOptions contains the optional parameters for the LoadTestProfileMappingsClient.Get
//     method.
func (client *LoadTestProfileMappingsClient) Get(ctx context.Context, resourceURI string, loadTestProfileMappingName string, options *LoadTestProfileMappingsClientGetOptions) (LoadTestProfileMappingsClientGetResponse, error) {
	var err error
	const operationName = "LoadTestProfileMappingsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceURI, loadTestProfileMappingName, options)
	if err != nil {
		return LoadTestProfileMappingsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return LoadTestProfileMappingsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return LoadTestProfileMappingsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *LoadTestProfileMappingsClient) getCreateRequest(ctx context.Context, resourceURI string, loadTestProfileMappingName string, _ *LoadTestProfileMappingsClientGetOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.LoadTestService/loadTestProfileMappings/{loadTestProfileMappingName}"
	if resourceURI == "" {
		return nil, errors.New("parameter resourceURI cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", url.PathEscape(resourceURI))
	if loadTestProfileMappingName == "" {
		return nil, errors.New("parameter loadTestProfileMappingName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{loadTestProfileMappingName}", url.PathEscape(loadTestProfileMappingName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *LoadTestProfileMappingsClient) getHandleResponse(resp *http.Response) (LoadTestProfileMappingsClientGetResponse, error) {
	result := LoadTestProfileMappingsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.LoadTestProfileMappingResource); err != nil {
		return LoadTestProfileMappingsClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - List LoadTestProfileMappingResource resources by parent
//
// Generated from API version 2023-12-01-preview
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource.
//   - options - LoadTestProfileMappingsClientListOptions contains the optional parameters for the LoadTestProfileMappingsClient.NewListPager
//     method.
func (client *LoadTestProfileMappingsClient) NewListPager(resourceURI string, options *LoadTestProfileMappingsClientListOptions) *runtime.Pager[LoadTestProfileMappingsClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[LoadTestProfileMappingsClientListResponse]{
		More: func(page LoadTestProfileMappingsClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *LoadTestProfileMappingsClientListResponse) (LoadTestProfileMappingsClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "LoadTestProfileMappingsClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, resourceURI, options)
			}, nil)
			if err != nil {
				return LoadTestProfileMappingsClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *LoadTestProfileMappingsClient) listCreateRequest(ctx context.Context, resourceURI string, _ *LoadTestProfileMappingsClientListOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.LoadTestService/loadTestProfileMappings"
	if resourceURI == "" {
		return nil, errors.New("parameter resourceURI cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", url.PathEscape(resourceURI))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *LoadTestProfileMappingsClient) listHandleResponse(resp *http.Response) (LoadTestProfileMappingsClientListResponse, error) {
	result := LoadTestProfileMappingsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.LoadTestProfileMappingResourceListResult); err != nil {
		return LoadTestProfileMappingsClientListResponse{}, err
	}
	return result, nil
}

// Update - Update a LoadTestProfileMappingResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-12-01-preview
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource.
//   - loadTestProfileMappingName - Load Test Profile Mapping name
//   - properties - The resource properties to be updated.
//   - options - LoadTestProfileMappingsClientUpdateOptions contains the optional parameters for the LoadTestProfileMappingsClient.Update
//     method.
func (client *LoadTestProfileMappingsClient) Update(ctx context.Context, resourceURI string, loadTestProfileMappingName string, properties LoadTestProfileMappingResourceUpdate, options *LoadTestProfileMappingsClientUpdateOptions) (LoadTestProfileMappingsClientUpdateResponse, error) {
	var err error
	const operationName = "LoadTestProfileMappingsClient.Update"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceURI, loadTestProfileMappingName, properties, options)
	if err != nil {
		return LoadTestProfileMappingsClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return LoadTestProfileMappingsClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return LoadTestProfileMappingsClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *LoadTestProfileMappingsClient) updateCreateRequest(ctx context.Context, resourceURI string, loadTestProfileMappingName string, properties LoadTestProfileMappingResourceUpdate, _ *LoadTestProfileMappingsClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.LoadTestService/loadTestProfileMappings/{loadTestProfileMappingName}"
	if resourceURI == "" {
		return nil, errors.New("parameter resourceURI cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", url.PathEscape(resourceURI))
	if loadTestProfileMappingName == "" {
		return nil, errors.New("parameter loadTestProfileMappingName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{loadTestProfileMappingName}", url.PathEscape(loadTestProfileMappingName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *LoadTestProfileMappingsClient) updateHandleResponse(resp *http.Response) (LoadTestProfileMappingsClientUpdateResponse, error) {
	result := LoadTestProfileMappingsClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.LoadTestProfileMappingResource); err != nil {
		return LoadTestProfileMappingsClientUpdateResponse{}, err
	}
	return result, nil
}
